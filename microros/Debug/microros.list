
microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015df0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08015f90  08015f90  00025f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d20  08016d20  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08016d20  08016d20  00026d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d28  08016d28  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016d28  08016d28  00026d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d30  08016d30  00026d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08016d34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db60  20000238  08016f68  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dd98  08016f68  0003dd98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f29  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b5d  00000000  00000000  0004a203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0004dd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ff  00000000  00000000  0004f358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000880b  00000000  00000000  00050457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a51  00000000  00000000  00058c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a44f3  00000000  00000000  000726b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006be8  00000000  00000000  00116ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015f78 	.word	0x08015f78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08015f78 	.word	0x08015f78

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_ldivmod>:
 80009cc:	b97b      	cbnz	r3, 80009ee <__aeabi_ldivmod+0x22>
 80009ce:	b972      	cbnz	r2, 80009ee <__aeabi_ldivmod+0x22>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bfbe      	ittt	lt
 80009d4:	2000      	movlt	r0, #0
 80009d6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80009da:	e006      	blt.n	80009ea <__aeabi_ldivmod+0x1e>
 80009dc:	bf08      	it	eq
 80009de:	2800      	cmpeq	r0, #0
 80009e0:	bf1c      	itt	ne
 80009e2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80009e6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009ea:	f000 b9bb 	b.w	8000d64 <__aeabi_idiv0>
 80009ee:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009f6:	2900      	cmp	r1, #0
 80009f8:	db09      	blt.n	8000a0e <__aeabi_ldivmod+0x42>
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db1a      	blt.n	8000a34 <__aeabi_ldivmod+0x68>
 80009fe:	f000 f84d 	bl	8000a9c <__udivmoddi4>
 8000a02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0a:	b004      	add	sp, #16
 8000a0c:	4770      	bx	lr
 8000a0e:	4240      	negs	r0, r0
 8000a10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db1b      	blt.n	8000a50 <__aeabi_ldivmod+0x84>
 8000a18:	f000 f840 	bl	8000a9c <__udivmoddi4>
 8000a1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a24:	b004      	add	sp, #16
 8000a26:	4240      	negs	r0, r0
 8000a28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a2c:	4252      	negs	r2, r2
 8000a2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a32:	4770      	bx	lr
 8000a34:	4252      	negs	r2, r2
 8000a36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a3a:	f000 f82f 	bl	8000a9c <__udivmoddi4>
 8000a3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a46:	b004      	add	sp, #16
 8000a48:	4240      	negs	r0, r0
 8000a4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a4e:	4770      	bx	lr
 8000a50:	4252      	negs	r2, r2
 8000a52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a56:	f000 f821 	bl	8000a9c <__udivmoddi4>
 8000a5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a62:	b004      	add	sp, #16
 8000a64:	4252      	negs	r2, r2
 8000a66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000d74:	f005 ffa8 	bl	8006cc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <pvPortMallocMicroROS+0x174>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000d80:	f000 f980 	bl	8001084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000d84:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <pvPortMallocMicroROS+0x178>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f040 808e 	bne.w	8000eae <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d01d      	beq.n	8000dd4 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000d98:	2208      	movs	r2, #8
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d014      	beq.n	8000dd4 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f023 0307 	bic.w	r3, r3, #7
 8000db0:	3308      	adds	r3, #8
 8000db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00a      	beq.n	8000dd4 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc2:	f383 8811 	msr	BASEPRI, r3
 8000dc6:	f3bf 8f6f 	isb	sy
 8000dca:	f3bf 8f4f 	dsb	sy
 8000dce:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000dd0:	bf00      	nop
 8000dd2:	e7fe      	b.n	8000dd2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d069      	beq.n	8000eae <pvPortMallocMicroROS+0x146>
 8000dda:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <pvPortMallocMicroROS+0x17c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d864      	bhi.n	8000eae <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000de4:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <pvPortMallocMicroROS+0x180>)
 8000de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000de8:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <pvPortMallocMicroROS+0x180>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000dee:	e004      	b.n	8000dfa <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d903      	bls.n	8000e0c <pvPortMallocMicroROS+0xa4>
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f1      	bne.n	8000df0 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000e0c:	4b33      	ldr	r3, [pc, #204]	; (8000edc <pvPortMallocMicroROS+0x174>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d04b      	beq.n	8000eae <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	4413      	add	r3, r2
 8000e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	1ad2      	subs	r2, r2, r3
 8000e30:	2308      	movs	r3, #8
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d91f      	bls.n	8000e78 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00a      	beq.n	8000e60 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e4e:	f383 8811 	msr	BASEPRI, r3
 8000e52:	f3bf 8f6f 	isb	sy
 8000e56:	f3bf 8f4f 	dsb	sy
 8000e5a:	613b      	str	r3, [r7, #16]
}
 8000e5c:	bf00      	nop
 8000e5e:	e7fe      	b.n	8000e5e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	1ad2      	subs	r2, r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e72:	69b8      	ldr	r0, [r7, #24]
 8000e74:	f000 f968 	bl	8001148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <pvPortMallocMicroROS+0x17c>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <pvPortMallocMicroROS+0x17c>)
 8000e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <pvPortMallocMicroROS+0x17c>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <pvPortMallocMicroROS+0x184>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d203      	bcs.n	8000e9a <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <pvPortMallocMicroROS+0x17c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <pvPortMallocMicroROS+0x184>)
 8000e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <pvPortMallocMicroROS+0x178>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000eae:	f005 ff19 	bl	8006ce4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00a      	beq.n	8000ed2 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec0:	f383 8811 	msr	BASEPRI, r3
 8000ec4:	f3bf 8f6f 	isb	sy
 8000ec8:	f3bf 8f4f 	dsb	sy
 8000ecc:	60fb      	str	r3, [r7, #12]
}
 8000ece:	bf00      	nop
 8000ed0:	e7fe      	b.n	8000ed0 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20003e5c 	.word	0x20003e5c
 8000ee0:	20003e68 	.word	0x20003e68
 8000ee4:	20003e60 	.word	0x20003e60
 8000ee8:	20003e54 	.word	0x20003e54
 8000eec:	20003e64 	.word	0x20003e64

08000ef0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d048      	beq.n	8000f94 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000f02:	2308      	movs	r3, #8
 8000f04:	425b      	negs	r3, r3
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4413      	add	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <vPortFreeMicroROS+0xac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10a      	bne.n	8000f34 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f22:	f383 8811 	msr	BASEPRI, r3
 8000f26:	f3bf 8f6f 	isb	sy
 8000f2a:	f3bf 8f4f 	dsb	sy
 8000f2e:	60fb      	str	r3, [r7, #12]
}
 8000f30:	bf00      	nop
 8000f32:	e7fe      	b.n	8000f32 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00a      	beq.n	8000f52 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f40:	f383 8811 	msr	BASEPRI, r3
 8000f44:	f3bf 8f6f 	isb	sy
 8000f48:	f3bf 8f4f 	dsb	sy
 8000f4c:	60bb      	str	r3, [r7, #8]
}
 8000f4e:	bf00      	nop
 8000f50:	e7fe      	b.n	8000f50 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <vPortFreeMicroROS+0xac>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d019      	beq.n	8000f94 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d115      	bne.n	8000f94 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <vPortFreeMicroROS+0xac>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	401a      	ands	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f78:	f005 fea6 	bl	8006cc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <vPortFreeMicroROS+0xb0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <vPortFreeMicroROS+0xb0>)
 8000f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f8a:	6938      	ldr	r0, [r7, #16]
 8000f8c:	f000 f8dc 	bl	8001148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f90:	f005 fea8 	bl	8006ce4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20003e68 	.word	0x20003e68
 8000fa0:	20003e60 	.word	0x20003e60

08000fa4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <getBlockSize+0x38>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

	return count;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20003e68 	.word	0x20003e68

08000fe0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000fea:	f005 fe6d 	bl	8006cc8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f7ff feba 	bl	8000d68 <pvPortMallocMicroROS>
 8000ff4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d017      	beq.n	800102c <pvPortReallocMicroROS+0x4c>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d014      	beq.n	800102c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffce 	bl	8000fa4 <getBlockSize>
 8001008:	4603      	mov	r3, r0
 800100a:	2208      	movs	r2, #8
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d201      	bcs.n	800101c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f014 f8ca 	bl	80151ba <memcpy>

		vPortFreeMicroROS(pv);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff62 	bl	8000ef0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800102c:	f005 fe5a 	bl	8006ce4 <xTaskResumeAll>

	return newmem;
 8001030:	68bb      	ldr	r3, [r7, #8]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001044:	f005 fe40 	bl	8006cc8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	fb02 f303 	mul.w	r3, r2, r3
 8001050:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff fe88 	bl	8000d68 <pvPortMallocMicroROS>
 8001058:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800105e:	e004      	b.n	800106a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	613a      	str	r2, [r7, #16]
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	617a      	str	r2, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f5      	bne.n	8001060 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001074:	f005 fe36 	bl	8006ce4 <xTaskResumeAll>
  	return mem;
 8001078:	68fb      	ldr	r3, [r7, #12]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800108a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800108e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <prvHeapInit+0xac>)
 8001092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00c      	beq.n	80010b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3307      	adds	r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f023 0307 	bic.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <prvHeapInit+0xac>)
 80010b4:	4413      	add	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <prvHeapInit+0xb0>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <prvHeapInit+0xb0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	4413      	add	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80010d0:	2208      	movs	r2, #8
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f023 0307 	bic.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <prvHeapInit+0xb4>)
 80010e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <prvHeapInit+0xb4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <prvHeapInit+0xb4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	1ad2      	subs	r2, r2, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <prvHeapInit+0xb4>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <prvHeapInit+0xb8>)
 8001112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <prvHeapInit+0xbc>)
 800111a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <prvHeapInit+0xc0>)
 800111e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	20000254 	.word	0x20000254
 8001134:	20003e54 	.word	0x20003e54
 8001138:	20003e5c 	.word	0x20003e5c
 800113c:	20003e64 	.word	0x20003e64
 8001140:	20003e60 	.word	0x20003e60
 8001144:	20003e68 	.word	0x20003e68

08001148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <prvInsertBlockIntoFreeList+0xac>)
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e002      	b.n	800115c <prvInsertBlockIntoFreeList+0x14>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	d8f7      	bhi.n	8001156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	4413      	add	r3, r2
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	d108      	bne.n	800118a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	441a      	add	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	441a      	add	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d118      	bne.n	80011d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <prvInsertBlockIntoFreeList+0xb0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d00d      	beq.n	80011c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	441a      	add	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e008      	b.n	80011d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <prvInsertBlockIntoFreeList+0xb0>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e003      	b.n	80011d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d002      	beq.n	80011e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20003e54 	.word	0x20003e54
 80011f8:	20003e5c 	.word	0x20003e5c
 80011fc:	00000000 	.word	0x00000000

08001200 <cmd_vel_callback>:




void cmd_vel_callback(const void*msgin)											//defining the cmd_vel callback
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist*)msgin;		//pointing the message type of /cmd_vel to msg
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	60fb      	str	r3, [r7, #12]

	leftWheelVelocity = msg->linear.x - msg->angular.z*length;					//differential drive kinematics
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001218:	a34f      	add	r3, pc, #316	; (adr r3, 8001358 <cmd_vel_callback+0x158>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff f847 	bl	80002b0 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff f96f 	bl	800050c <__aeabi_dsub>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	494b      	ldr	r1, [pc, #300]	; (8001360 <cmd_vel_callback+0x160>)
 8001234:	e9c1 2300 	strd	r2, r3, [r1]
	rightWheelVelocity = msg->linear.x + msg->angular.z*length;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001244:	a344      	add	r3, pc, #272	; (adr r3, 8001358 <cmd_vel_callback+0x158>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f831 	bl	80002b0 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4620      	mov	r0, r4
 8001254:	4629      	mov	r1, r5
 8001256:	f7ff f95b 	bl	8000510 <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4941      	ldr	r1, [pc, #260]	; (8001364 <cmd_vel_callback+0x164>)
 8001260:	e9c1 2300 	strd	r2, r3, [r1]

	if (msg->linear.x >= 0){
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	f7ff fb77 	bl	8000964 <__aeabi_dcmpge>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d034      	beq.n	80012e6 <cmd_vel_callback+0xe6>
		HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, 1); 						//while moving forward we want green light to turn on
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001282:	4839      	ldr	r0, [pc, #228]	; (8001368 <cmd_vel_callback+0x168>)
 8001284:	f001 fee8 	bl	8003058 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, 0); 							//and hence red light is turned off
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128e:	4836      	ldr	r0, [pc, #216]	; (8001368 <cmd_vel_callback+0x168>)
 8001290:	f001 fee2 	bl	8003058 <HAL_GPIO_WritePin>
		TIM3->CCR1 = 200*msg->linear.x;   										//RPWM1 set to high (PA6)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <cmd_vel_callback+0x16c>)
 80012a0:	f7ff f806 	bl	80002b0 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4c31      	ldr	r4, [pc, #196]	; (8001370 <cmd_vel_callback+0x170>)
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fb6d 	bl	800098c <__aeabi_d2uiz>
 80012b2:	4603      	mov	r3, r0
 80012b4:	6363      	str	r3, [r4, #52]	; 0x34
		TIM3->CCR2 = 0; 														//RPWM2 set to low  (PA7)
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <cmd_vel_callback+0x170>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 200*msg->linear.x;  										//LPWM1 set to high (PB0)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <cmd_vel_callback+0x16c>)
 80012c8:	f7fe fff2 	bl	80002b0 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4c27      	ldr	r4, [pc, #156]	; (8001370 <cmd_vel_callback+0x170>)
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fb59 	bl	800098c <__aeabi_d2uiz>
 80012da:	4603      	mov	r3, r0
 80012dc:	63e3      	str	r3, [r4, #60]	; 0x3c
		TIM3->CCR4 = 0; 														//LPWM2 set to low  (PB1)
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <cmd_vel_callback+0x170>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40
		TIM3->CCR1 = 0; 														//RPWM1 set to low
		TIM3->CCR2 = -200*msg->linear.x;										//RPWM2 set to high
		TIM3->CCR3 = 0; 														//LPWM1 set to low
		TIM3->CCR4 = -200*msg->linear.x;										//LPWM2 set to high
	}
}
 80012e4:	e033      	b.n	800134e <cmd_vel_callback+0x14e>
		HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, 0);						//now we are moving backwards so green is turned off
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ec:	481e      	ldr	r0, [pc, #120]	; (8001368 <cmd_vel_callback+0x168>)
 80012ee:	f001 feb3 	bl	8003058 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, 1);							//and red is turned on
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f8:	481b      	ldr	r0, [pc, #108]	; (8001368 <cmd_vel_callback+0x168>)
 80012fa:	f001 fead 	bl	8003058 <HAL_GPIO_WritePin>
		TIM3->CCR1 = 0; 														//RPWM1 set to low
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <cmd_vel_callback+0x170>)
 8001300:	2200      	movs	r2, #0
 8001302:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = -200*msg->linear.x;										//RPWM2 set to high
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <cmd_vel_callback+0x174>)
 8001310:	f7fe ffce 	bl	80002b0 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4c15      	ldr	r4, [pc, #84]	; (8001370 <cmd_vel_callback+0x170>)
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fb35 	bl	800098c <__aeabi_d2uiz>
 8001322:	4603      	mov	r3, r0
 8001324:	63a3      	str	r3, [r4, #56]	; 0x38
		TIM3->CCR3 = 0; 														//LPWM1 set to low
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <cmd_vel_callback+0x170>)
 8001328:	2200      	movs	r2, #0
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = -200*msg->linear.x;										//LPWM2 set to high
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <cmd_vel_callback+0x174>)
 8001338:	f7fe ffba 	bl	80002b0 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4c0b      	ldr	r4, [pc, #44]	; (8001370 <cmd_vel_callback+0x170>)
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fb21 	bl	800098c <__aeabi_d2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bdb0      	pop	{r4, r5, r7, pc}
 8001356:	bf00      	nop
 8001358:	cccccccd 	.word	0xcccccccd
 800135c:	3fcccccc 	.word	0x3fcccccc
 8001360:	20003fc0 	.word	0x20003fc0
 8001364:	20003fc8 	.word	0x20003fc8
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40690000 	.word	0x40690000
 8001370:	40000400 	.word	0x40000400
 8001374:	c0690000 	.word	0xc0690000

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f000 ff62 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f82e 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f000 f97e 	bl	8001684 <MX_GPIO_Init>
  MX_DMA_Init();
 8001388:	f000 f954 	bl	8001634 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800138c:	f000 f928 	bl	80015e0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001390:	f000 f88e 	bl	80014b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001394:	2100      	movs	r1, #0
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <main+0x58>)
 8001398:	f002 fb78 	bl	8003a8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800139c:	2104      	movs	r1, #4
 800139e:	480c      	ldr	r0, [pc, #48]	; (80013d0 <main+0x58>)
 80013a0:	f002 fb74 	bl	8003a8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80013a4:	2108      	movs	r1, #8
 80013a6:	480a      	ldr	r0, [pc, #40]	; (80013d0 <main+0x58>)
 80013a8:	f002 fb70 	bl	8003a8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80013ac:	210c      	movs	r1, #12
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <main+0x58>)
 80013b0:	f002 fb6c 	bl	8003a8c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013b4:	f004 fb80 	bl	8005ab8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <main+0x5c>)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4806      	ldr	r0, [pc, #24]	; (80013d8 <main+0x60>)
 80013be:	f004 fbc5 	bl	8005b4c <osThreadNew>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <main+0x64>)
 80013c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013c8:	f004 fb9a 	bl	8005b00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <main+0x54>
 80013ce:	bf00      	nop
 80013d0:	20003e6c 	.word	0x20003e6c
 80013d4:	08016010 	.word	0x08016010
 80013d8:	08001761 	.word	0x08001761
 80013dc:	20003fbc 	.word	0x20003fbc

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b094      	sub	sp, #80	; 0x50
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	2230      	movs	r2, #48	; 0x30
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f013 fe1a 	bl	8015028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <SystemClock_Config+0xc8>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	4a26      	ldr	r2, [pc, #152]	; (80014a8 <SystemClock_Config+0xc8>)
 800140e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001412:	6413      	str	r3, [r2, #64]	; 0x40
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <SystemClock_Config+0xc8>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <SystemClock_Config+0xcc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a20      	ldr	r2, [pc, #128]	; (80014ac <SystemClock_Config+0xcc>)
 800142a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <SystemClock_Config+0xcc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001440:	2301      	movs	r3, #1
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001444:	2310      	movs	r3, #16
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144c:	2300      	movs	r3, #0
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001450:	2308      	movs	r3, #8
 8001452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001460:	f107 0320 	add.w	r3, r7, #32
 8001464:	4618      	mov	r0, r3
 8001466:	f001 fe11 	bl	800308c <HAL_RCC_OscConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001470:	f000 fa2a 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001474:	230f      	movs	r3, #15
 8001476:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001478:	2302      	movs	r3, #2
 800147a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2103      	movs	r1, #3
 8001490:	4618      	mov	r0, r3
 8001492:	f002 f873 	bl	800357c <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800149c:	f000 fa14 	bl	80018c8 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3750      	adds	r7, #80	; 0x50
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000

080014b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	f107 0320 	add.w	r3, r7, #32
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e0:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <MX_TIM3_Init+0x128>)
 80014e2:	4a3e      	ldr	r2, [pc, #248]	; (80015dc <MX_TIM3_Init+0x12c>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80014e6:	4b3c      	ldr	r3, [pc, #240]	; (80015d8 <MX_TIM3_Init+0x128>)
 80014e8:	2209      	movs	r2, #9
 80014ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <MX_TIM3_Init+0x128>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80014f2:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <MX_TIM3_Init+0x128>)
 80014f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <MX_TIM3_Init+0x128>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <MX_TIM3_Init+0x128>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001506:	4834      	ldr	r0, [pc, #208]	; (80015d8 <MX_TIM3_Init+0x128>)
 8001508:	f002 fa18 	bl	800393c <HAL_TIM_Base_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001512:	f000 f9d9 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800151c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001520:	4619      	mov	r1, r3
 8001522:	482d      	ldr	r0, [pc, #180]	; (80015d8 <MX_TIM3_Init+0x128>)
 8001524:	f002 fc24 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800152e:	f000 f9cb 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001532:	4829      	ldr	r0, [pc, #164]	; (80015d8 <MX_TIM3_Init+0x128>)
 8001534:	f002 fa51 	bl	80039da <HAL_TIM_PWM_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800153e:	f000 f9c3 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	4619      	mov	r1, r3
 8001550:	4821      	ldr	r0, [pc, #132]	; (80015d8 <MX_TIM3_Init+0x128>)
 8001552:	f002 ffad 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800155c:	f000 f9b4 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001560:	2360      	movs	r3, #96	; 0x60
 8001562:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM3_Init+0x128>)
 8001578:	f002 fb38 	bl	8003bec <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001582:	f000 f9a1 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2204      	movs	r2, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4812      	ldr	r0, [pc, #72]	; (80015d8 <MX_TIM3_Init+0x128>)
 800158e:	f002 fb2d 	bl	8003bec <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001598:	f000 f996 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2208      	movs	r2, #8
 80015a0:	4619      	mov	r1, r3
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <MX_TIM3_Init+0x128>)
 80015a4:	f002 fb22 	bl	8003bec <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80015ae:	f000 f98b 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	220c      	movs	r2, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <MX_TIM3_Init+0x128>)
 80015ba:	f002 fb17 	bl	8003bec <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80015c4:	f000 f980 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MX_TIM3_Init+0x128>)
 80015ca:	f000 fb37 	bl	8001c3c <HAL_TIM_MspPostInit>

}
 80015ce:	bf00      	nop
 80015d0:	3738      	adds	r7, #56	; 0x38
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20003e6c 	.word	0x20003e6c
 80015dc:	40000400 	.word	0x40000400

080015e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_USART2_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_USART2_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001618:	f002 ffb8 	bl	800458c <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f000 f951 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20003eb4 	.word	0x20003eb4
 8001630:	40004400 	.word	0x40004400

08001634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <MX_DMA_Init+0x4c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <MX_DMA_Init+0x4c>)
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <MX_DMA_Init+0x4c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	2010      	movs	r0, #16
 800165c:	f000 ff3f 	bl	80024de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001660:	2010      	movs	r0, #16
 8001662:	f000 ff58 	bl	8002516 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	2011      	movs	r0, #17
 800166c:	f000 ff37 	bl	80024de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001670:	2011      	movs	r0, #17
 8001672:	f000 ff50 	bl	8002516 <HAL_NVIC_EnableIRQ>

}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a2d      	ldr	r2, [pc, #180]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a26      	ldr	r2, [pc, #152]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <MX_GPIO_Init+0xd4>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_GPIO_Init+0xd4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_GPIO_Init+0xd4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a11      	ldr	r2, [pc, #68]	; (8001758 <MX_GPIO_Init+0xd4>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_GPIO_Init+0xd4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|orange_Pin|red_Pin|blue_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <MX_GPIO_Init+0xd8>)
 800172e:	f001 fc93 	bl	8003058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : green_Pin orange_Pin red_Pin blue_Pin */
  GPIO_InitStruct.Pin = green_Pin|orange_Pin|red_Pin|blue_Pin;
 8001732:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_GPIO_Init+0xd8>)
 800174c:	f001 fb00 	bl	8002d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	40020c00 	.word	0x40020c00

08001760 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001766:	af02      	add	r7, sp, #8
 8001768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001770:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration
	  char test_array[ARRAY_LEN];
	  memset(test_array,'z',ARRAY_LEN);
 8001772:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001776:	22c8      	movs	r2, #200	; 0xc8
 8001778:	217a      	movs	r1, #122	; 0x7a
 800177a:	4618      	mov	r0, r3
 800177c:	f013 fc54 	bl	8015028 <memset>


	  rmw_uros_set_custom_transport(
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <StartDefaultTask+0x130>)
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	4b43      	ldr	r3, [pc, #268]	; (8001894 <StartDefaultTask+0x134>)
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4b43      	ldr	r3, [pc, #268]	; (8001898 <StartDefaultTask+0x138>)
 800178a:	4a44      	ldr	r2, [pc, #272]	; (800189c <StartDefaultTask+0x13c>)
 800178c:	4944      	ldr	r1, [pc, #272]	; (80018a0 <StartDefaultTask+0x140>)
 800178e:	2001      	movs	r0, #1
 8001790:	f009 ffa8 	bl	800b6e4 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001794:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001798:	4618      	mov	r0, r3
 800179a:	f009 fc77 	bl	800b08c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <StartDefaultTask+0x144>)
 80017a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80017a4:	4b40      	ldr	r3, [pc, #256]	; (80018a8 <StartDefaultTask+0x148>)
 80017a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <StartDefaultTask+0x14c>)
 80017ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80017b0:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <StartDefaultTask+0x150>)
 80017b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80017b6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80017ba:	4618      	mov	r0, r3
 80017bc:	f009 fc74 	bl	800b0a8 <rcutils_set_default_allocator>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f083 0301 	eor.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <StartDefaultTask+0x76>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80017cc:	f240 2103 	movw	r1, #515	; 0x203
 80017d0:	4838      	ldr	r0, [pc, #224]	; (80018b4 <StartDefaultTask+0x154>)
 80017d2:	f013 fb3d 	bl	8014e50 <iprintf>

	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 80017d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017da:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 80017de:	463b      	mov	r3, r7
 80017e0:	4618      	mov	r0, r3
 80017e2:	f009 fc7f 	bl	800b0e4 <rcutils_get_default_allocator>
 80017e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ea:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80017ee:	461d      	mov	r5, r3
 80017f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 80017f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017fc:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	f009 fb80 	bl	800af08 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "microROS", "", &support);
 8001808:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800180c:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001810:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <StartDefaultTask+0x158>)
 8001812:	492a      	ldr	r1, [pc, #168]	; (80018bc <StartDefaultTask+0x15c>)
 8001814:	f009 fbc2 	bl	800af9c <rclc_node_init_default>
	    */



	  //create subscriber
	  rclc_subscription_init_default(
 8001818:	f006 fec8 	bl	80085ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800181c:	4602      	mov	r2, r0
 800181e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001822:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <StartDefaultTask+0x160>)
 8001828:	f009 fbf4 	bl	800b014 <rclc_subscription_init_default>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	    "cmd_vel");

	  //create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 800182c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001830:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001834:	4618      	mov	r0, r3
 8001836:	f009 f88b 	bl	800a950 <rclc_executor_get_zero_initialized_executor>
	  rclc_executor_init(&executor, &support.context, 2, &allocator);
 800183a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800183e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001842:	f107 0020 	add.w	r0, r7, #32
 8001846:	2202      	movs	r2, #2
 8001848:	f009 f88e 	bl	800a968 <rclc_executor_init>
	  rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &cmd_vel_msg, &cmd_vel_callback, ON_NEW_DATA);
 800184c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001850:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001854:	f107 0020 	add.w	r0, r7, #32
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <StartDefaultTask+0x164>)
 800185e:	f009 f8f3 	bl	800aa48 <rclc_executor_add_subscription>



	    // execute subscriber
	    rclc_executor_spin(&executor);
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	4618      	mov	r0, r3
 8001868:	f009 fb0e 	bl	800ae88 <rclc_executor_spin>

	    //organize
	    rcl_subscription_fini(&subscriber_cmd_vel, &node);
 800186c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001870:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f008 fc38 	bl	800a0ec <rcl_subscription_fini>
	    rcl_node_fini(&node);
 800187c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001880:	4618      	mov	r0, r3
 8001882:	f008 faff 	bl	8009e84 <rcl_node_fini>
	  }*/



  /* USER CODE END 5 */
}
 8001886:	bf00      	nop
 8001888:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800188c:	46bd      	mov	sp, r7
 800188e:	bdb0      	pop	{r4, r5, r7, pc}
 8001890:	08002149 	.word	0x08002149
 8001894:	080020e1 	.word	0x080020e1
 8001898:	080020c1 	.word	0x080020c1
 800189c:	08002095 	.word	0x08002095
 80018a0:	20003eb4 	.word	0x20003eb4
 80018a4:	080018d5 	.word	0x080018d5
 80018a8:	08001919 	.word	0x08001919
 80018ac:	08001951 	.word	0x08001951
 80018b0:	080019bd 	.word	0x080019bd
 80018b4:	08015f9c 	.word	0x08015f9c
 80018b8:	08015fc4 	.word	0x08015fc4
 80018bc:	08015fc8 	.word	0x08015fc8
 80018c0:	08015fd4 	.word	0x08015fd4
 80018c4:	08001201 	.word	0x08001201

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <microros_allocate+0x3c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <microros_allocate+0x3c>)
 80018ec:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <microros_allocate+0x40>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <microros_allocate+0x40>)
 80018fc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fa32 	bl	8000d68 <pvPortMallocMicroROS>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20003fd0 	.word	0x20003fd0
 8001914:	20003fd4 	.word	0x20003fd4

08001918 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00c      	beq.n	8001942 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fb3b 	bl	8000fa4 <getBlockSize>
 800192e:	4603      	mov	r3, r0
 8001930:	4a06      	ldr	r2, [pc, #24]	; (800194c <microros_deallocate+0x34>)
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	461a      	mov	r2, r3
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <microros_deallocate+0x34>)
 800193a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fad7 	bl	8000ef0 <vPortFreeMicroROS>
  }
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20003fd4 	.word	0x20003fd4

08001950 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <microros_reallocate+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	4413      	add	r3, r2
 8001966:	461a      	mov	r2, r3
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <microros_reallocate+0x64>)
 800196a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <microros_reallocate+0x68>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	4413      	add	r3, r2
 8001976:	461a      	mov	r2, r3
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <microros_reallocate+0x68>)
 800197a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d104      	bne.n	800198c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	f7ff f9f0 	bl	8000d68 <pvPortMallocMicroROS>
 8001988:	4603      	mov	r3, r0
 800198a:	e00e      	b.n	80019aa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff fb09 	bl	8000fa4 <getBlockSize>
 8001992:	4603      	mov	r3, r0
 8001994:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <microros_reallocate+0x68>)
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	461a      	mov	r2, r3
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <microros_reallocate+0x68>)
 800199e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f7ff fb1c 	bl	8000fe0 <pvPortReallocMicroROS>
 80019a8:	4603      	mov	r3, r0
  }
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20003fd0 	.word	0x20003fd0
 80019b8:	20003fd4 	.word	0x20003fd4

080019bc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <microros_zero_allocate+0x48>)
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <microros_zero_allocate+0x48>)
 80019da:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <microros_zero_allocate+0x4c>)
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <microros_zero_allocate+0x4c>)
 80019ee:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff fb21 	bl	800103a <pvPortCallocMicroROS>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20003fd0 	.word	0x20003fd0
 8001a08:	20003fd4 	.word	0x20003fd4
 8001a0c:	00000000 	.word	0x00000000

08001a10 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a26:	a320      	add	r3, pc, #128	; (adr r3, 8001aa8 <UTILS_NanosecondsToTimespec+0x98>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe ffce 	bl	80009cc <__aeabi_ldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a3e:	a31a      	add	r3, pc, #104	; (adr r3, 8001aa8 <UTILS_NanosecondsToTimespec+0x98>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe ffc2 	bl	80009cc <__aeabi_ldivmod>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da20      	bge.n	8001a96 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <UTILS_NanosecondsToTimespec+0x90>)
 8001a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5e:	1712      	asrs	r2, r2, #28
 8001a60:	17db      	asrs	r3, r3, #31
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	6979      	ldr	r1, [r7, #20]
 8001a70:	17c8      	asrs	r0, r1, #31
 8001a72:	460c      	mov	r4, r1
 8001a74:	4605      	mov	r5, r0
 8001a76:	ebb2 0804 	subs.w	r8, r2, r4
 8001a7a:	eb63 0905 	sbc.w	r9, r3, r5
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <UTILS_NanosecondsToTimespec+0x94>)
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	441a      	add	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	609a      	str	r2, [r3, #8]
    }
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa0:	44b82fa1 	.word	0x44b82fa1
 8001aa4:	3b9aca00 	.word	0x3b9aca00
 8001aa8:	3b9aca00 	.word	0x3b9aca00
 8001aac:	00000000 	.word	0x00000000

08001ab0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab4:	b08e      	sub	sp, #56	; 0x38
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6278      	str	r0, [r7, #36]	; 0x24
 8001aba:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001abc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f005 fb7e 	bl	80071d8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	17da      	asrs	r2, r3, #31
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	61fa      	str	r2, [r7, #28]
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	69b9      	ldr	r1, [r7, #24]
 8001aee:	000b      	movs	r3, r1
 8001af0:	2200      	movs	r2, #0
 8001af2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	2200      	movs	r2, #0
 8001afa:	461c      	mov	r4, r3
 8001afc:	4615      	mov	r5, r2
 8001afe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b02:	1911      	adds	r1, r2, r4
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	416b      	adcs	r3, r5
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b0e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001b12:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	f04f 0400 	mov.w	r4, #0
 8001b1e:	f04f 0500 	mov.w	r5, #0
 8001b22:	015d      	lsls	r5, r3, #5
 8001b24:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001b28:	0154      	lsls	r4, r2, #5
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	462b      	mov	r3, r5
 8001b2e:	ebb2 0800 	subs.w	r8, r2, r0
 8001b32:	eb63 0901 	sbc.w	r9, r3, r1
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001b42:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001b46:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	eb18 0a00 	adds.w	sl, r8, r0
 8001b52:	eb49 0b01 	adc.w	fp, r9, r1
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b62:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b66:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b6a:	ebb2 040a 	subs.w	r4, r2, sl
 8001b6e:	603c      	str	r4, [r7, #0]
 8001b70:	eb63 030b 	sbc.w	r3, r3, fp
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	181b      	adds	r3, r3, r0
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	462b      	mov	r3, r5
 8001b82:	eb41 0303 	adc.w	r3, r1, r3
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	6a3a      	ldr	r2, [r7, #32]
 8001b8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b8e:	f7ff ff3f 	bl	8001a10 <UTILS_NanosecondsToTimespec>

    return 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	3738      	adds	r7, #56	; 0x38
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ba0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_MspInit+0x54>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_MspInit+0x54>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_MspInit+0x54>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_MspInit+0x54>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_MspInit+0x54>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_MspInit+0x54>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	210f      	movs	r1, #15
 8001be2:	f06f 0001 	mvn.w	r0, #1
 8001be6:	f000 fc7a 	bl	80024de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_TIM_Base_MspInit+0x3c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10d      	bne.n	8001c26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_TIM_Base_MspInit+0x40>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_TIM_Base_MspInit+0x40>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_TIM_Base_MspInit+0x40>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40000400 	.word	0x40000400
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_TIM_MspPostInit+0xa4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d13b      	bne.n	8001cd6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_TIM_MspPostInit+0xa8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <HAL_TIM_MspPostInit+0xa8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_TIM_MspPostInit+0xa8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_TIM_MspPostInit+0xa8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_TIM_MspPostInit+0xa8>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_TIM_MspPostInit+0xa8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8001c96:	23c0      	movs	r3, #192	; 0xc0
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <HAL_TIM_MspPostInit+0xac>)
 8001cb2:	f001 f84d 	bl	8002d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4806      	ldr	r0, [pc, #24]	; (8001cec <HAL_TIM_MspPostInit+0xb0>)
 8001cd2:	f001 f83d 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400

08001cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a4d      	ldr	r2, [pc, #308]	; (8001e44 <HAL_UART_MspInit+0x154>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	f040 8093 	bne.w	8001e3a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_UART_MspInit+0x158>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a4a      	ldr	r2, [pc, #296]	; (8001e48 <HAL_UART_MspInit+0x158>)
 8001d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b48      	ldr	r3, [pc, #288]	; (8001e48 <HAL_UART_MspInit+0x158>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <HAL_UART_MspInit+0x158>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a43      	ldr	r2, [pc, #268]	; (8001e48 <HAL_UART_MspInit+0x158>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_UART_MspInit+0x158>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	4839      	ldr	r0, [pc, #228]	; (8001e4c <HAL_UART_MspInit+0x15c>)
 8001d68:	f000 fff2 	bl	8002d50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001d6e:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HAL_UART_MspInit+0x164>)
 8001d70:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d72:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d78:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7a:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d94:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001da4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001da8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001db0:	4827      	ldr	r0, [pc, #156]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001db2:	f000 fbcb 	bl	800254c <HAL_DMA_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001dbc:	f7ff fd84 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dc6:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_UART_MspInit+0x160>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001dce:	4a23      	ldr	r2, [pc, #140]	; (8001e5c <HAL_UART_MspInit+0x16c>)
 8001dd0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001dd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001ddc:	2240      	movs	r2, #64	; 0x40
 8001dde:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001e02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e0e:	4812      	ldr	r0, [pc, #72]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001e10:	f000 fb9c 	bl	800254c <HAL_DMA_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001e1a:	f7ff fd55 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38
 8001e24:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_UART_MspInit+0x168>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	2026      	movs	r0, #38	; 0x26
 8001e30:	f000 fb55 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e34:	2026      	movs	r0, #38	; 0x26
 8001e36:	f000 fb6e 	bl	8002516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	; 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40004400 	.word	0x40004400
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	20003efc 	.word	0x20003efc
 8001e54:	40026088 	.word	0x40026088
 8001e58:	20003f5c 	.word	0x20003f5c
 8001e5c:	400260a0 	.word	0x400260a0

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e90:	f000 fa2a 	bl	80022e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e94:	f005 fb20 	bl	80074d8 <xTaskGetSchedulerState>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e9e:	f006 f90b 	bl	80080b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <DMA1_Stream5_IRQHandler+0x10>)
 8001eae:	f000 fce5 	bl	800287c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20003efc 	.word	0x20003efc

08001ebc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <DMA1_Stream6_IRQHandler+0x10>)
 8001ec2:	f000 fcdb 	bl	800287c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20003f5c 	.word	0x20003f5c

08001ed0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <USART2_IRQHandler+0x10>)
 8001ed6:	f002 fcbd 	bl	8004854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20003eb4 	.word	0x20003eb4

08001ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_kill>:

int _kill(int pid, int sig)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001efe:	f013 f927 	bl	8015150 <__errno>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2216      	movs	r2, #22
 8001f06:	601a      	str	r2, [r3, #0]
  return -1;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_exit>:

void _exit (int status)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffe7 	bl	8001ef4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f26:	e7fe      	b.n	8001f26 <_exit+0x12>

08001f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e00a      	b.n	8001f50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f3a:	f3af 8000 	nop.w
 8001f3e:	4601      	mov	r1, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf0      	blt.n	8001f3a <_read+0x12>
  }

  return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e009      	b.n	8001f88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbf1      	blt.n	8001f74 <_write+0x12>
  }
  return len;
 8001f90:	687b      	ldr	r3, [r7, #4]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_close>:

int _close(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_isatty>:

int _isatty(int file)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f013 f88c 	bl	8015150 <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20020000 	.word	0x20020000
 8002064:	00000400 	.word	0x00000400
 8002068:	20003fdc 	.word	0x20003fdc
 800206c:	2000dd98 	.word	0x2000dd98

08002070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <SystemInit+0x20>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <SystemInit+0x20>)
 800207c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020a2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80020a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a8:	4904      	ldr	r1, [pc, #16]	; (80020bc <cubemx_transport_open+0x28>)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f002 fb2e 	bl	800470c <HAL_UART_Receive_DMA>
    return true;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20003fe0 	.word	0x20003fe0

080020c0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020ce:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f002 fb40 	bl	8004756 <HAL_UART_DMAStop>
    return true;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020f4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d11c      	bne.n	800213c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f002 fa8e 	bl	800462c <HAL_UART_Transmit_DMA>
 8002110:	4603      	mov	r3, r0
 8002112:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002114:	e002      	b.n	800211c <cubemx_transport_write+0x3c>
            osDelay(1);
 8002116:	2001      	movs	r0, #1
 8002118:	f003 fdaa 	bl	8005c70 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <cubemx_transport_write+0x4e>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b20      	cmp	r3, #32
 800212c:	d1f3      	bne.n	8002116 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <cubemx_transport_write+0x58>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	e002      	b.n	800213e <cubemx_transport_write+0x5e>
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800213c:	2300      	movs	r3, #0
    }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800215c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002162:	b672      	cpsid	i
}
 8002164:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002172:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <cubemx_transport_read+0x9c>)
 8002174:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002176:	b662      	cpsie	i
}
 8002178:	bf00      	nop
        __enable_irq();
        ms_used++;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002180:	2001      	movs	r0, #1
 8002182:	f003 fd75 	bl	8005c70 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <cubemx_transport_read+0xa0>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <cubemx_transport_read+0x9c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d103      	bne.n	800219a <cubemx_transport_read+0x52>
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	dbe3      	blt.n	8002162 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800219e:	e011      	b.n	80021c4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <cubemx_transport_read+0xa0>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	440b      	add	r3, r1
 80021aa:	4910      	ldr	r1, [pc, #64]	; (80021ec <cubemx_transport_read+0xa4>)
 80021ac:	5c8a      	ldrb	r2, [r1, r2]
 80021ae:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <cubemx_transport_read+0xa0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <cubemx_transport_read+0xa0>)
 80021bc:	6013      	str	r3, [r2, #0]
        wrote++;
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <cubemx_transport_read+0xa0>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <cubemx_transport_read+0x9c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d003      	beq.n	80021d8 <cubemx_transport_read+0x90>
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3e3      	bcc.n	80021a0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80021d8:	69bb      	ldr	r3, [r7, #24]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200047e4 	.word	0x200047e4
 80021e8:	200047e0 	.word	0x200047e0
 80021ec:	20003fe0 	.word	0x20003fe0

080021f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021f4:	f7ff ff3c 	bl	8002070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	; (8002230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	; (800223c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221e:	f012 ff9d 	bl	801515c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002222:	f7ff f8a9 	bl	8001378 <main>
  bx  lr    
 8002226:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002234:	08016d34 	.word	0x08016d34
  ldr r2, =_sbss
 8002238:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 800223c:	2000dd98 	.word	0x2000dd98

08002240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_Init+0x40>)
 800224e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_Init+0x40>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_Init+0x40>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 f92b 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	200f      	movs	r0, #15
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fc92 	bl	8001ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f943 	bl	8002532 <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c4:	f000 f90b 	bl	80024de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000004 	.word	0x20000004
 80022e0:	2000000c 	.word	0x2000000c
 80022e4:	20000008 	.word	0x20000008

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	2000000c 	.word	0x2000000c
 800230c:	200047e8 	.word	0x200047e8

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200047e8 	.word	0x200047e8

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db0b      	blt.n	80023b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4907      	ldr	r1, [pc, #28]	; (80023c4 <__NVIC_EnableIRQ+0x38>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2001      	movs	r0, #1
 80023ae:	fa00 f202 	lsl.w	r2, r0, r2
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002494:	d301      	bcc.n	800249a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <SysTick_Config+0x40>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a2:	210f      	movs	r1, #15
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a8:	f7ff ff8e 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <SysTick_Config+0x40>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SysTick_Config+0x40>)
 80024b4:	2207      	movs	r2, #7
 80024b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff29 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f0:	f7ff ff3e 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff ff8e 	bl	800241c <NVIC_EncodePriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff5d 	bl	80023c8 <__NVIC_SetPriority>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff31 	bl	800238c <__NVIC_EnableIRQ>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffa2 	bl	8002484 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff feda 	bl	8002310 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e099      	b.n	800269c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002588:	e00f      	b.n	80025aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800258a:	f7ff fec1 	bl	8002310 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b05      	cmp	r3, #5
 8002596:	d908      	bls.n	80025aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2203      	movs	r2, #3
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e078      	b.n	800269c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e8      	bne.n	800258a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_DMA_Init+0x158>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	2b04      	cmp	r3, #4
 8002602:	d107      	bne.n	8002614 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4313      	orrs	r3, r2
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0307 	bic.w	r3, r3, #7
 800262a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b04      	cmp	r3, #4
 800263c:	d117      	bne.n	800266e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00e      	beq.n	800266e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fb01 	bl	8002c58 <DMA_CheckFifoParam>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800266a:	2301      	movs	r3, #1
 800266c:	e016      	b.n	800269c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fab8 	bl	8002bec <DMA_CalcBaseAndBitshift>
 800267c:	4603      	mov	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	223f      	movs	r2, #63	; 0x3f
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	f010803f 	.word	0xf010803f

080026a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_DMA_Start_IT+0x26>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e040      	b.n	8002750 <HAL_DMA_Start_IT+0xa8>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d12f      	bne.n	8002742 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa4a 	bl	8002b90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	223f      	movs	r2, #63	; 0x3f
 8002702:	409a      	lsls	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0216 	orr.w	r2, r2, #22
 8002716:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0208 	orr.w	r2, r2, #8
 800272e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e005      	b.n	800274e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800274e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002766:	f7ff fdd3 	bl	8002310 <HAL_GetTick>
 800276a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d008      	beq.n	800278a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e052      	b.n	8002830 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0216 	bic.w	r2, r2, #22
 8002798:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <HAL_DMA_Abort+0x62>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0208 	bic.w	r2, r2, #8
 80027c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027da:	e013      	b.n	8002804 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027dc:	f7ff fd98 	bl	8002310 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d90c      	bls.n	8002804 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2203      	movs	r2, #3
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e015      	b.n	8002830 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e4      	bne.n	80027dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	223f      	movs	r2, #63	; 0x3f
 8002818:	409a      	lsls	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d004      	beq.n	8002856 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e00c      	b.n	8002870 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2205      	movs	r2, #5
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0201 	bic.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002888:	4b8e      	ldr	r3, [pc, #568]	; (8002ac4 <HAL_DMA_IRQHandler+0x248>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a8e      	ldr	r2, [pc, #568]	; (8002ac8 <HAL_DMA_IRQHandler+0x24c>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0a9b      	lsrs	r3, r3, #10
 8002894:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	2208      	movs	r2, #8
 80028a8:	409a      	lsls	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01a      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0204 	bic.w	r2, r2, #4
 80028ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2208      	movs	r2, #8
 80028d6:	409a      	lsls	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	2201      	movs	r2, #1
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d012      	beq.n	800291e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2201      	movs	r2, #1
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	f043 0202 	orr.w	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	2204      	movs	r2, #4
 8002924:	409a      	lsls	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	2204      	movs	r2, #4
 8002942:	409a      	lsls	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f043 0204 	orr.w	r2, r3, #4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	2210      	movs	r2, #16
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d043      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d03c      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	2210      	movs	r2, #16
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d018      	beq.n	80029be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d108      	bne.n	80029ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d024      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
 80029aa:	e01f      	b.n	80029ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
 80029bc:	e016      	b.n	80029ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d107      	bne.n	80029dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0208 	bic.w	r2, r2, #8
 80029da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	2220      	movs	r2, #32
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 808f 	beq.w	8002b1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8087 	beq.w	8002b1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2220      	movs	r2, #32
 8002a14:	409a      	lsls	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d136      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0216 	bic.w	r2, r2, #22
 8002a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <HAL_DMA_IRQHandler+0x1da>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0208 	bic.w	r2, r2, #8
 8002a64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	223f      	movs	r2, #63	; 0x3f
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d07e      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
        }
        return;
 8002a92:	e079      	b.n	8002b88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01d      	beq.n	8002ade <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d031      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
 8002ac0:	e02c      	b.n	8002b1c <HAL_DMA_IRQHandler+0x2a0>
 8002ac2:	bf00      	nop
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d023      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
 8002adc:	e01e      	b.n	8002b1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10f      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0210 	bic.w	r2, r2, #16
 8002afa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d032      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d022      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2205      	movs	r2, #5
 8002b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d307      	bcc.n	8002b64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f2      	bne.n	8002b48 <HAL_DMA_IRQHandler+0x2cc>
 8002b62:	e000      	b.n	8002b66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
 8002b86:	e000      	b.n	8002b8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b88:	bf00      	nop
    }
  }
}
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d108      	bne.n	8002bd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bce:	e007      	b.n	8002be0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3b10      	subs	r3, #16
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <DMA_CalcBaseAndBitshift+0x64>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c06:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <DMA_CalcBaseAndBitshift+0x68>)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d909      	bls.n	8002c2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	1d1a      	adds	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c2c:	e007      	b.n	8002c3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c36:	f023 0303 	bic.w	r3, r3, #3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	aaaaaaab 	.word	0xaaaaaaab
 8002c54:	0801604c 	.word	0x0801604c

08002c58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d11f      	bne.n	8002cb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d856      	bhi.n	8002d26 <DMA_CheckFifoParam+0xce>
 8002c78:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <DMA_CheckFifoParam+0x28>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002ca3 	.word	0x08002ca3
 8002c88:	08002c91 	.word	0x08002c91
 8002c8c:	08002d27 	.word	0x08002d27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d046      	beq.n	8002d2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca0:	e043      	b.n	8002d2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002caa:	d140      	bne.n	8002d2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb0:	e03d      	b.n	8002d2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cba:	d121      	bne.n	8002d00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d837      	bhi.n	8002d32 <DMA_CheckFifoParam+0xda>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <DMA_CheckFifoParam+0x70>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002cd9 	.word	0x08002cd9
 8002ccc:	08002cdf 	.word	0x08002cdf
 8002cd0:	08002cd9 	.word	0x08002cd9
 8002cd4:	08002cf1 	.word	0x08002cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e030      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d025      	beq.n	8002d36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cee:	e022      	b.n	8002d36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cf8:	d11f      	bne.n	8002d3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cfe:	e01c      	b.n	8002d3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d903      	bls.n	8002d0e <DMA_CheckFifoParam+0xb6>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d003      	beq.n	8002d14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d0c:	e018      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      break;
 8002d12:	e015      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      break;
 8002d24:	e00b      	b.n	8002d3e <DMA_CheckFifoParam+0xe6>
      break;
 8002d26:	bf00      	nop
 8002d28:	e00a      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e008      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e006      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
 8002d34:	e004      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e159      	b.n	8003020 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	f040 8148 	bne.w	800301a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d005      	beq.n	8002da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d130      	bne.n	8002e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 0201 	and.w	r2, r3, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d017      	beq.n	8002e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d123      	bne.n	8002e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3208      	adds	r2, #8
 8002e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	220f      	movs	r2, #15
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	08da      	lsrs	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3208      	adds	r2, #8
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80a2 	beq.w	800301a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b57      	ldr	r3, [pc, #348]	; (8003038 <HAL_GPIO_Init+0x2e8>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4a56      	ldr	r2, [pc, #344]	; (8003038 <HAL_GPIO_Init+0x2e8>)
 8002ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee6:	4b54      	ldr	r3, [pc, #336]	; (8003038 <HAL_GPIO_Init+0x2e8>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef2:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a49      	ldr	r2, [pc, #292]	; (8003040 <HAL_GPIO_Init+0x2f0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d019      	beq.n	8002f52 <HAL_GPIO_Init+0x202>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a48      	ldr	r2, [pc, #288]	; (8003044 <HAL_GPIO_Init+0x2f4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_GPIO_Init+0x1fe>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a47      	ldr	r2, [pc, #284]	; (8003048 <HAL_GPIO_Init+0x2f8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0x1fa>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a46      	ldr	r2, [pc, #280]	; (800304c <HAL_GPIO_Init+0x2fc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x1f6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a45      	ldr	r2, [pc, #276]	; (8003050 <HAL_GPIO_Init+0x300>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_GPIO_Init+0x1f2>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e008      	b.n	8002f54 <HAL_GPIO_Init+0x204>
 8002f42:	2307      	movs	r3, #7
 8002f44:	e006      	b.n	8002f54 <HAL_GPIO_Init+0x204>
 8002f46:	2303      	movs	r3, #3
 8002f48:	e004      	b.n	8002f54 <HAL_GPIO_Init+0x204>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e002      	b.n	8002f54 <HAL_GPIO_Init+0x204>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_GPIO_Init+0x204>
 8002f52:	2300      	movs	r3, #0
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	f002 0203 	and.w	r2, r2, #3
 8002f5a:	0092      	lsls	r2, r2, #2
 8002f5c:	4093      	lsls	r3, r2
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f64:	4935      	ldr	r1, [pc, #212]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_GPIO_Init+0x304>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f96:	4a2f      	ldr	r2, [pc, #188]	; (8003054 <HAL_GPIO_Init+0x304>)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_GPIO_Init+0x304>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc0:	4a24      	ldr	r2, [pc, #144]	; (8003054 <HAL_GPIO_Init+0x304>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fc6:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_GPIO_Init+0x304>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fea:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <HAL_GPIO_Init+0x304>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_GPIO_Init+0x304>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003014:	4a0f      	ldr	r2, [pc, #60]	; (8003054 <HAL_GPIO_Init+0x304>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3301      	adds	r3, #1
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b0f      	cmp	r3, #15
 8003024:	f67f aea2 	bls.w	8002d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40013800 	.word	0x40013800
 8003040:	40020000 	.word	0x40020000
 8003044:	40020400 	.word	0x40020400
 8003048:	40020800 	.word	0x40020800
 800304c:	40020c00 	.word	0x40020c00
 8003050:	40021000 	.word	0x40021000
 8003054:	40013c00 	.word	0x40013c00

08003058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
 8003064:	4613      	mov	r3, r2
 8003066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003068:	787b      	ldrb	r3, [r7, #1]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003074:	e003      	b.n	800307e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003076:	887b      	ldrh	r3, [r7, #2]
 8003078:	041a      	lsls	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	619a      	str	r2, [r3, #24]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e267      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d075      	beq.n	8003196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030aa:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d00c      	beq.n	80030d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b6:	4b85      	ldr	r3, [pc, #532]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d112      	bne.n	80030e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c2:	4b82      	ldr	r3, [pc, #520]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ce:	d10b      	bne.n	80030e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	4b7e      	ldr	r3, [pc, #504]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d05b      	beq.n	8003194 <HAL_RCC_OscConfig+0x108>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d157      	bne.n	8003194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e242      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d106      	bne.n	8003100 <HAL_RCC_OscConfig+0x74>
 80030f2:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a75      	ldr	r2, [pc, #468]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e01d      	b.n	800313c <HAL_RCC_OscConfig+0xb0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x98>
 800310a:	4b70      	ldr	r3, [pc, #448]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6f      	ldr	r2, [pc, #444]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b6d      	ldr	r3, [pc, #436]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6c      	ldr	r2, [pc, #432]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e00b      	b.n	800313c <HAL_RCC_OscConfig+0xb0>
 8003124:	4b69      	ldr	r3, [pc, #420]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a68      	ldr	r2, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800312a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b66      	ldr	r3, [pc, #408]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a65      	ldr	r2, [pc, #404]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7ff f8e4 	bl	8002310 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800314c:	f7ff f8e0 	bl	8002310 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e207      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b5b      	ldr	r3, [pc, #364]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0xc0>
 800316a:	e014      	b.n	8003196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7ff f8d0 	bl	8002310 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003174:	f7ff f8cc 	bl	8002310 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e1f3      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	4b51      	ldr	r3, [pc, #324]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0xe8>
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d063      	beq.n	800326a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031a2:	4b4a      	ldr	r3, [pc, #296]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d11c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b44      	ldr	r3, [pc, #272]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d116      	bne.n	80031f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	4b41      	ldr	r3, [pc, #260]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_RCC_OscConfig+0x152>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e1c7      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031de:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4937      	ldr	r1, [pc, #220]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f2:	e03a      	b.n	800326a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_RCC_OscConfig+0x244>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7ff f885 	bl	8002310 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320a:	f7ff f881 	bl	8002310 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e1a8      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003228:	4b28      	ldr	r3, [pc, #160]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4925      	ldr	r1, [pc, #148]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]
 800323c:	e015      	b.n	800326a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x244>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7ff f864 	bl	8002310 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324c:	f7ff f860 	bl	8002310 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e187      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d036      	beq.n	80032e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_RCC_OscConfig+0x248>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7ff f844 	bl	8002310 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328c:	f7ff f840 	bl	8002310 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e167      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x200>
 80032aa:	e01b      	b.n	80032e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCC_OscConfig+0x248>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b2:	f7ff f82d 	bl	8002310 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	e00e      	b.n	80032d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ba:	f7ff f829 	bl	8002310 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d907      	bls.n	80032d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e150      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
 80032cc:	40023800 	.word	0x40023800
 80032d0:	42470000 	.word	0x42470000
 80032d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	4b88      	ldr	r3, [pc, #544]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 80032da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1ea      	bne.n	80032ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8097 	beq.w	8003420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f6:	4b81      	ldr	r3, [pc, #516]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10f      	bne.n	8003322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	4b7d      	ldr	r3, [pc, #500]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a7c      	ldr	r2, [pc, #496]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b7a      	ldr	r3, [pc, #488]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	4b77      	ldr	r3, [pc, #476]	; (8003500 <HAL_RCC_OscConfig+0x474>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d118      	bne.n	8003360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332e:	4b74      	ldr	r3, [pc, #464]	; (8003500 <HAL_RCC_OscConfig+0x474>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a73      	ldr	r2, [pc, #460]	; (8003500 <HAL_RCC_OscConfig+0x474>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333a:	f7fe ffe9 	bl	8002310 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003342:	f7fe ffe5 	bl	8002310 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e10c      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <HAL_RCC_OscConfig+0x474>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x2ea>
 8003368:	4b64      	ldr	r3, [pc, #400]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a63      	ldr	r2, [pc, #396]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6713      	str	r3, [r2, #112]	; 0x70
 8003374:	e01c      	b.n	80033b0 <HAL_RCC_OscConfig+0x324>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b05      	cmp	r3, #5
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x30c>
 800337e:	4b5f      	ldr	r3, [pc, #380]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a5e      	ldr	r2, [pc, #376]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	4b5c      	ldr	r3, [pc, #368]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a5b      	ldr	r2, [pc, #364]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	e00b      	b.n	80033b0 <HAL_RCC_OscConfig+0x324>
 8003398:	4b58      	ldr	r3, [pc, #352]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a57      	ldr	r2, [pc, #348]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	4b55      	ldr	r3, [pc, #340]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a54      	ldr	r2, [pc, #336]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 80033aa:	f023 0304 	bic.w	r3, r3, #4
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d015      	beq.n	80033e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fe ffaa 	bl	8002310 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe ffa6 	bl	8002310 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0cb      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	4b49      	ldr	r3, [pc, #292]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ee      	beq.n	80033c0 <HAL_RCC_OscConfig+0x334>
 80033e2:	e014      	b.n	800340e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e4:	f7fe ff94 	bl	8002310 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ec:	f7fe ff90 	bl	8002310 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e0b5      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	4b3e      	ldr	r3, [pc, #248]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ee      	bne.n	80033ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b39      	ldr	r3, [pc, #228]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	4a38      	ldr	r2, [pc, #224]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a1 	beq.w	800356c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800342a:	4b34      	ldr	r3, [pc, #208]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b08      	cmp	r3, #8
 8003434:	d05c      	beq.n	80034f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d141      	bne.n	80034c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe ff64 	bl	8002310 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe ff60 	bl	8002310 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e087      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	019b      	lsls	r3, r3, #6
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	3b01      	subs	r3, #1
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	491b      	ldr	r1, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fe ff39 	bl	8002310 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fe ff35 	bl	8002310 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e05c      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x416>
 80034c0:	e054      	b.n	800356c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fe ff22 	bl	8002310 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe ff1e 	bl	8002310 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e045      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_OscConfig+0x470>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x444>
 80034ee:	e03d      	b.n	800356c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e038      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
 80034fc:	40023800 	.word	0x40023800
 8003500:	40007000 	.word	0x40007000
 8003504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003508:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <HAL_RCC_OscConfig+0x4ec>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d028      	beq.n	8003568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d121      	bne.n	8003568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d11a      	bne.n	8003568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003538:	4013      	ands	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800353e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003540:	4293      	cmp	r3, r2
 8003542:	d111      	bne.n	8003568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	3b01      	subs	r3, #1
 8003552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d107      	bne.n	8003568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800

0800357c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0cc      	b.n	800372a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b68      	ldr	r3, [pc, #416]	; (8003734 <HAL_RCC_ClockConfig+0x1b8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d90c      	bls.n	80035b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b65      	ldr	r3, [pc, #404]	; (8003734 <HAL_RCC_ClockConfig+0x1b8>)
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b63      	ldr	r3, [pc, #396]	; (8003734 <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0b8      	b.n	800372a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d020      	beq.n	8003606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d0:	4b59      	ldr	r3, [pc, #356]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e8:	4b53      	ldr	r3, [pc, #332]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f4:	4b50      	ldr	r3, [pc, #320]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	494d      	ldr	r1, [pc, #308]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d044      	beq.n	800369c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d119      	bne.n	800365a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e07f      	b.n	800372a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d003      	beq.n	800363a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003636:	2b03      	cmp	r3, #3
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e06f      	b.n	800372a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e067      	b.n	800372a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365a:	4b37      	ldr	r3, [pc, #220]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4934      	ldr	r1, [pc, #208]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800366c:	f7fe fe50 	bl	8002310 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7fe fe4c 	bl	8002310 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e04f      	b.n	800372a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 020c 	and.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1eb      	bne.n	8003674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <HAL_RCC_ClockConfig+0x1b8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d20c      	bcs.n	80036c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b22      	ldr	r3, [pc, #136]	; (8003734 <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b20      	ldr	r3, [pc, #128]	; (8003734 <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e032      	b.n	800372a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d0:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4916      	ldr	r1, [pc, #88]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	490e      	ldr	r1, [pc, #56]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003702:	f000 f821 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8003706:	4602      	mov	r2, r0
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	490a      	ldr	r1, [pc, #40]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	5ccb      	ldrb	r3, [r1, r3]
 8003716:	fa22 f303 	lsr.w	r3, r2, r3
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fdb0 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40023c00 	.word	0x40023c00
 8003738:	40023800 	.word	0x40023800
 800373c:	08016034 	.word	0x08016034
 8003740:	20000004 	.word	0x20000004
 8003744:	20000008 	.word	0x20000008

08003748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800374c:	b090      	sub	sp, #64	; 0x40
 800374e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
 8003754:	2300      	movs	r3, #0
 8003756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003758:	2300      	movs	r3, #0
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003760:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d00d      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x40>
 800376c:	2b08      	cmp	r3, #8
 800376e:	f200 80a1 	bhi.w	80038b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x34>
 8003776:	2b04      	cmp	r3, #4
 8003778:	d003      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x3a>
 800377a:	e09b      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4b53      	ldr	r3, [pc, #332]	; (80038cc <HAL_RCC_GetSysClockFreq+0x184>)
 800377e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003780:	e09b      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003782:	4b53      	ldr	r3, [pc, #332]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003784:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003786:	e098      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003788:	4b4f      	ldr	r3, [pc, #316]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003792:	4b4d      	ldr	r3, [pc, #308]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d028      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379e:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	099b      	lsrs	r3, r3, #6
 80037a4:	2200      	movs	r2, #0
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	627a      	str	r2, [r7, #36]	; 0x24
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037b0:	2100      	movs	r1, #0
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037b4:	fb03 f201 	mul.w	r2, r3, r1
 80037b8:	2300      	movs	r3, #0
 80037ba:	fb00 f303 	mul.w	r3, r0, r3
 80037be:	4413      	add	r3, r2
 80037c0:	4a43      	ldr	r2, [pc, #268]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037c2:	fba0 1202 	umull	r1, r2, r0, r2
 80037c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c8:	460a      	mov	r2, r1
 80037ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80037cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ce:	4413      	add	r3, r2
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d4:	2200      	movs	r2, #0
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	61fa      	str	r2, [r7, #28]
 80037da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037e2:	f7fd f943 	bl	8000a6c <__aeabi_uldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4613      	mov	r3, r2
 80037ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ee:	e053      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f0:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	099b      	lsrs	r3, r3, #6
 80037f6:	2200      	movs	r2, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	617a      	str	r2, [r7, #20]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003802:	f04f 0b00 	mov.w	fp, #0
 8003806:	4652      	mov	r2, sl
 8003808:	465b      	mov	r3, fp
 800380a:	f04f 0000 	mov.w	r0, #0
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	0159      	lsls	r1, r3, #5
 8003814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003818:	0150      	lsls	r0, r2, #5
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	ebb2 080a 	subs.w	r8, r2, sl
 8003822:	eb63 090b 	sbc.w	r9, r3, fp
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003832:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003836:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800383a:	ebb2 0408 	subs.w	r4, r2, r8
 800383e:	eb63 0509 	sbc.w	r5, r3, r9
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	00eb      	lsls	r3, r5, #3
 800384c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003850:	00e2      	lsls	r2, r4, #3
 8003852:	4614      	mov	r4, r2
 8003854:	461d      	mov	r5, r3
 8003856:	eb14 030a 	adds.w	r3, r4, sl
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	eb45 030b 	adc.w	r3, r5, fp
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800386e:	4629      	mov	r1, r5
 8003870:	028b      	lsls	r3, r1, #10
 8003872:	4621      	mov	r1, r4
 8003874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003878:	4621      	mov	r1, r4
 800387a:	028a      	lsls	r2, r1, #10
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	2200      	movs	r2, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	60fa      	str	r2, [r7, #12]
 8003888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800388c:	f7fd f8ee 	bl	8000a6c <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4613      	mov	r3, r2
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	0c1b      	lsrs	r3, r3, #16
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	3301      	adds	r3, #1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038b2:	e002      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetSysClockFreq+0x184>)
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3740      	adds	r7, #64	; 0x40
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	017d7840 	.word	0x017d7840

080038d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038f0:	f7ff fff0 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	0a9b      	lsrs	r3, r3, #10
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	4903      	ldr	r1, [pc, #12]	; (8003910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	08016044 	.word	0x08016044

08003914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003918:	f7ff ffdc 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 800391c:	4602      	mov	r2, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0b5b      	lsrs	r3, r3, #13
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4903      	ldr	r1, [pc, #12]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	08016044 	.word	0x08016044

0800393c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e041      	b.n	80039d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe f948 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 fac0 	bl	8003f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e041      	b.n	8003a70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f839 	bl	8003a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f000 fa71 	bl	8003f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_TIM_PWM_Start+0x24>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e022      	b.n	8003af6 <HAL_TIM_PWM_Start+0x6a>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d109      	bne.n	8003aca <HAL_TIM_PWM_Start+0x3e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	bf14      	ite	ne
 8003ac2:	2301      	movne	r3, #1
 8003ac4:	2300      	moveq	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	e015      	b.n	8003af6 <HAL_TIM_PWM_Start+0x6a>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d109      	bne.n	8003ae4 <HAL_TIM_PWM_Start+0x58>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	bf14      	ite	ne
 8003adc:	2301      	movne	r3, #1
 8003ade:	2300      	moveq	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e008      	b.n	8003af6 <HAL_TIM_PWM_Start+0x6a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e068      	b.n	8003bd0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_PWM_Start+0x82>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b0c:	e013      	b.n	8003b36 <HAL_TIM_PWM_Start+0xaa>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d104      	bne.n	8003b1e <HAL_TIM_PWM_Start+0x92>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b1c:	e00b      	b.n	8003b36 <HAL_TIM_PWM_Start+0xaa>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_PWM_Start+0xa2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b2c:	e003      	b.n	8003b36 <HAL_TIM_PWM_Start+0xaa>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	6839      	ldr	r1, [r7, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fc90 	bl	8004464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <HAL_TIM_PWM_Start+0x14c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d107      	bne.n	8003b5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <HAL_TIM_PWM_Start+0x14c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <HAL_TIM_PWM_Start+0x10e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b70:	d013      	beq.n	8003b9a <HAL_TIM_PWM_Start+0x10e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_TIM_PWM_Start+0x150>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_TIM_PWM_Start+0x10e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <HAL_TIM_PWM_Start+0x154>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_TIM_PWM_Start+0x10e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <HAL_TIM_PWM_Start+0x158>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_TIM_PWM_Start+0x10e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <HAL_TIM_PWM_Start+0x15c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d111      	bne.n	8003bbe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d010      	beq.n	8003bce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbc:	e007      	b.n	8003bce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40000800 	.word	0x40000800
 8003be4:	40000c00 	.word	0x40000c00
 8003be8:	40014000 	.word	0x40014000

08003bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e0ae      	b.n	8003d68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b0c      	cmp	r3, #12
 8003c16:	f200 809f 	bhi.w	8003d58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003d59 	.word	0x08003d59
 8003c28:	08003d59 	.word	0x08003d59
 8003c2c:	08003d59 	.word	0x08003d59
 8003c30:	08003c95 	.word	0x08003c95
 8003c34:	08003d59 	.word	0x08003d59
 8003c38:	08003d59 	.word	0x08003d59
 8003c3c:	08003d59 	.word	0x08003d59
 8003c40:	08003cd7 	.word	0x08003cd7
 8003c44:	08003d59 	.word	0x08003d59
 8003c48:	08003d59 	.word	0x08003d59
 8003c4c:	08003d59 	.word	0x08003d59
 8003c50:	08003d17 	.word	0x08003d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f9dc 	bl	8004018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0208 	orr.w	r2, r2, #8
 8003c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6999      	ldr	r1, [r3, #24]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	619a      	str	r2, [r3, #24]
      break;
 8003c92:	e064      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fa22 	bl	80040e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6999      	ldr	r1, [r3, #24]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	021a      	lsls	r2, r3, #8
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	619a      	str	r2, [r3, #24]
      break;
 8003cd4:	e043      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fa6d 	bl	80041bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0208 	orr.w	r2, r2, #8
 8003cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0204 	bic.w	r2, r2, #4
 8003d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69d9      	ldr	r1, [r3, #28]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	61da      	str	r2, [r3, #28]
      break;
 8003d14:	e023      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fab7 	bl	8004290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69d9      	ldr	r1, [r3, #28]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	021a      	lsls	r2, r3, #8
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	61da      	str	r2, [r3, #28]
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIM_ConfigClockSource+0x1c>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e0b4      	b.n	8003ef6 <HAL_TIM_ConfigClockSource+0x186>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc4:	d03e      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0xd4>
 8003dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dca:	f200 8087 	bhi.w	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd2:	f000 8086 	beq.w	8003ee2 <HAL_TIM_ConfigClockSource+0x172>
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d87f      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b70      	cmp	r3, #112	; 0x70
 8003dde:	d01a      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0xa6>
 8003de0:	2b70      	cmp	r3, #112	; 0x70
 8003de2:	d87b      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b60      	cmp	r3, #96	; 0x60
 8003de6:	d050      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x11a>
 8003de8:	2b60      	cmp	r3, #96	; 0x60
 8003dea:	d877      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b50      	cmp	r3, #80	; 0x50
 8003dee:	d03c      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0xfa>
 8003df0:	2b50      	cmp	r3, #80	; 0x50
 8003df2:	d873      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d058      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x13a>
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d86f      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b30      	cmp	r3, #48	; 0x30
 8003dfe:	d064      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e00:	2b30      	cmp	r3, #48	; 0x30
 8003e02:	d86b      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d060      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d867      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05c      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d05a      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e14:	e062      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e26:	f000 fafd 	bl	8004424 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	609a      	str	r2, [r3, #8]
      break;
 8003e42:	e04f      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e54:	f000 fae6 	bl	8004424 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e66:	609a      	str	r2, [r3, #8]
      break;
 8003e68:	e03c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e76:	461a      	mov	r2, r3
 8003e78:	f000 fa5a 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2150      	movs	r1, #80	; 0x50
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fab3 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003e88:	e02c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e96:	461a      	mov	r2, r3
 8003e98:	f000 fa79 	bl	800438e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2160      	movs	r1, #96	; 0x60
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 faa3 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e01c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f000 fa3a 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2140      	movs	r1, #64	; 0x40
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fa93 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003ec8:	e00c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f000 fa8a 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003eda:	e003      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a3a      	ldr	r2, [pc, #232]	; (8003ffc <TIM_Base_SetConfig+0xfc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00f      	beq.n	8003f38 <TIM_Base_SetConfig+0x38>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d00b      	beq.n	8003f38 <TIM_Base_SetConfig+0x38>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a37      	ldr	r2, [pc, #220]	; (8004000 <TIM_Base_SetConfig+0x100>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <TIM_Base_SetConfig+0x38>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a36      	ldr	r2, [pc, #216]	; (8004004 <TIM_Base_SetConfig+0x104>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_Base_SetConfig+0x38>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a35      	ldr	r2, [pc, #212]	; (8004008 <TIM_Base_SetConfig+0x108>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d108      	bne.n	8003f4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2b      	ldr	r2, [pc, #172]	; (8003ffc <TIM_Base_SetConfig+0xfc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01b      	beq.n	8003f8a <TIM_Base_SetConfig+0x8a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d017      	beq.n	8003f8a <TIM_Base_SetConfig+0x8a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a28      	ldr	r2, [pc, #160]	; (8004000 <TIM_Base_SetConfig+0x100>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <TIM_Base_SetConfig+0x8a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a27      	ldr	r2, [pc, #156]	; (8004004 <TIM_Base_SetConfig+0x104>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00f      	beq.n	8003f8a <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a26      	ldr	r2, [pc, #152]	; (8004008 <TIM_Base_SetConfig+0x108>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a25      	ldr	r2, [pc, #148]	; (800400c <TIM_Base_SetConfig+0x10c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a24      	ldr	r2, [pc, #144]	; (8004010 <TIM_Base_SetConfig+0x110>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a23      	ldr	r2, [pc, #140]	; (8004014 <TIM_Base_SetConfig+0x114>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <TIM_Base_SetConfig+0xfc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d103      	bne.n	8003fd0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]
  }
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800

08004018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f023 0201 	bic.w	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 0302 	bic.w	r3, r3, #2
 8004060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <TIM_OC1_SetConfig+0xc8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0308 	bic.w	r3, r3, #8
 800407a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <TIM_OC1_SetConfig+0xc8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000

080040e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f023 0210 	bic.w	r2, r3, #16
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f023 0320 	bic.w	r3, r3, #32
 800412e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <TIM_OC2_SetConfig+0xd4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10d      	bne.n	8004160 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800415e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <TIM_OC2_SetConfig+0xd4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d113      	bne.n	8004190 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000

080041bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1d      	ldr	r2, [pc, #116]	; (800428c <TIM_OC3_SetConfig+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10d      	bne.n	8004236 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <TIM_OC3_SetConfig+0xd0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d113      	bne.n	8004266 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800424c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	40010000 	.word	0x40010000

08004290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a10      	ldr	r2, [pc, #64]	; (800432c <TIM_OC4_SetConfig+0x9c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d109      	bne.n	8004304 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000

08004330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 030a 	bic.w	r3, r3, #10
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438e:	b480      	push	{r7}
 8004390:	b087      	sub	sp, #28
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f023 0210 	bic.w	r2, r3, #16
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	031b      	lsls	r3, r3, #12
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	f043 0307 	orr.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	021a      	lsls	r2, r3, #8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	431a      	orrs	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4313      	orrs	r3, r2
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	609a      	str	r2, [r3, #8]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2201      	movs	r2, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	43db      	mvns	r3, r3
 8004486:	401a      	ands	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e050      	b.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d018      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d013      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a18      	ldr	r2, [pc, #96]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d009      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a15      	ldr	r2, [pc, #84]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a13      	ldr	r2, [pc, #76]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10c      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4313      	orrs	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000

0800458c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e042      	b.n	8004624 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd fb9c 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 ffc9 	bl	8005568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	; 0x30
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b20      	cmp	r3, #32
 8004644:	d156      	bne.n	80046f4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_UART_Transmit_DMA+0x26>
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e04f      	b.n	80046f6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2221      	movs	r2, #33	; 0x21
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4a21      	ldr	r2, [pc, #132]	; (8004700 <HAL_UART_Transmit_DMA+0xd4>)
 800467c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	4a20      	ldr	r2, [pc, #128]	; (8004704 <HAL_UART_Transmit_DMA+0xd8>)
 8004684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	4a1f      	ldr	r2, [pc, #124]	; (8004708 <HAL_UART_Transmit_DMA+0xdc>)
 800468c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	2200      	movs	r2, #0
 8004694:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004696:	f107 0308 	add.w	r3, r7, #8
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3304      	adds	r3, #4
 80046aa:	461a      	mov	r2, r3
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	f7fd fffb 	bl	80026a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	617b      	str	r3, [r7, #20]
   return(result);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3314      	adds	r3, #20
 80046da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046dc:	627a      	str	r2, [r7, #36]	; 0x24
 80046de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6a39      	ldr	r1, [r7, #32]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e5      	bne.n	80046bc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3730      	adds	r7, #48	; 0x30
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	08004df5 	.word	0x08004df5
 8004704:	08004e8f 	.word	0x08004e8f
 8004708:	08005013 	.word	0x08005013

0800470c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b20      	cmp	r3, #32
 8004724:	d112      	bne.n	800474c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_Receive_DMA+0x26>
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e00b      	b.n	800474e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	461a      	mov	r2, r3
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fcb0 	bl	80050a8 <UART_Start_Receive_DMA>
 8004748:	4603      	mov	r3, r0
 800474a:	e000      	b.n	800474e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b090      	sub	sp, #64	; 0x40
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800475e:	2300      	movs	r3, #0
 8004760:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b80      	cmp	r3, #128	; 0x80
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b21      	cmp	r3, #33	; 0x21
 8004782:	d128      	bne.n	80047d6 <HAL_UART_DMAStop+0x80>
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d025      	beq.n	80047d6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	623b      	str	r3, [r7, #32]
   return(result);
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047aa:	633a      	str	r2, [r7, #48]	; 0x30
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e5      	bne.n	800478a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd ffc4 	bl	8002758 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fd03 	bl	80051dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b22      	cmp	r3, #34	; 0x22
 80047f6:	d128      	bne.n	800484a <HAL_UART_DMAStop+0xf4>
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d025      	beq.n	800484a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	60fb      	str	r3, [r7, #12]
   return(result);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3314      	adds	r3, #20
 800481c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800481e:	61fa      	str	r2, [r7, #28]
 8004820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	617b      	str	r3, [r7, #20]
   return(result);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e5      	bne.n	80047fe <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd ff8a 	bl	8002758 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fcf1 	bl	800522c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3740      	adds	r7, #64	; 0x40
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b0ba      	sub	sp, #232	; 0xe8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_UART_IRQHandler+0x66>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fd99 	bl	80053ea <UART_Receive_IT>
      return;
 80048b8:	e25b      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80de 	beq.w	8004a80 <HAL_UART_IRQHandler+0x22c>
 80048c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80d1 	beq.w	8004a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_UART_IRQHandler+0xae>
 80048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f043 0201 	orr.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <HAL_UART_IRQHandler+0xd2>
 800490e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	f043 0202 	orr.w	r2, r3, #2
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <HAL_UART_IRQHandler+0xf6>
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d011      	beq.n	800497a <HAL_UART_IRQHandler+0x126>
 8004956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f043 0208 	orr.w	r2, r3, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 81f2 	beq.w	8004d68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_UART_IRQHandler+0x14e>
 8004990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fd24 	bl	80053ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <HAL_UART_IRQHandler+0x17a>
 80049c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04f      	beq.n	8004a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fc2c 	bl	800522c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d141      	bne.n	8004a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3314      	adds	r3, #20
 80049e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3314      	adds	r3, #20
 8004a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1d9      	bne.n	80049e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	4a7e      	ldr	r2, [pc, #504]	; (8004c34 <HAL_UART_IRQHandler+0x3e0>)
 8004a3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fef8 	bl	8002838 <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d016      	beq.n	8004a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e00e      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9b2 	bl	8004dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	e00a      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9ae 	bl	8004dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	e006      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9aa 	bl	8004dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004a7a:	e175      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	bf00      	nop
    return;
 8004a7e:	e173      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	f040 814f 	bne.w	8004d28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8148 	beq.w	8004d28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8141 	beq.w	8004d28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac6:	2b40      	cmp	r3, #64	; 0x40
 8004ac8:	f040 80b6 	bne.w	8004c38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8145 	beq.w	8004d6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aea:	429a      	cmp	r2, r3
 8004aec:	f080 813e 	bcs.w	8004d6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004af6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	f000 8088 	beq.w	8004c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1d9      	bne.n	8004b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3314      	adds	r3, #20
 8004b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3314      	adds	r3, #20
 8004b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e1      	bne.n	8004b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3314      	adds	r3, #20
 8004b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e3      	bne.n	8004b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be6:	f023 0310 	bic.w	r3, r3, #16
 8004bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e3      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd fda1 	bl	8002758 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f8d5 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c32:	e09b      	b.n	8004d6c <HAL_UART_IRQHandler+0x518>
 8004c34:	080052f3 	.word	0x080052f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 808e 	beq.w	8004d70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8089 	beq.w	8004d70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c82:	647a      	str	r2, [r7, #68]	; 0x44
 8004c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e3      	bne.n	8004c5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3314      	adds	r3, #20
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cba:	633a      	str	r2, [r7, #48]	; 0x30
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e3      	bne.n	8004c96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0310 	bic.w	r3, r3, #16
 8004cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d00:	61fa      	str	r2, [r7, #28]
 8004d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e3      	bne.n	8004cdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f85b 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d26:	e023      	b.n	8004d70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <HAL_UART_IRQHandler+0x4f4>
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 faea 	bl	800531a <UART_Transmit_IT>
    return;
 8004d46:	e014      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00e      	beq.n	8004d72 <HAL_UART_IRQHandler+0x51e>
 8004d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb2a 	bl	80053ba <UART_EndTransmit_IT>
    return;
 8004d66:	e004      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d68:	bf00      	nop
 8004d6a:	e002      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d6c:	bf00      	nop
 8004d6e:	e000      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d70:	bf00      	nop
  }
}
 8004d72:	37e8      	adds	r7, #232	; 0xe8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b090      	sub	sp, #64	; 0x40
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d137      	bne.n	8004e80 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e12:	2200      	movs	r2, #0
 8004e14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3314      	adds	r3, #20
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	623b      	str	r3, [r7, #32]
   return(result);
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3314      	adds	r3, #20
 8004e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e36:	633a      	str	r2, [r7, #48]	; 0x30
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
 8004e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e6a:	61fa      	str	r2, [r7, #28]
 8004e6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	69b9      	ldr	r1, [r7, #24]
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	617b      	str	r3, [r7, #20]
   return(result);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e7e:	e002      	b.n	8004e86 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004e80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e82:	f7ff ff79 	bl	8004d78 <HAL_UART_TxCpltCallback>
}
 8004e86:	bf00      	nop
 8004e88:	3740      	adds	r7, #64	; 0x40
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff ff75 	bl	8004d8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b09c      	sub	sp, #112	; 0x70
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d172      	bne.n	8004fac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec8:	2200      	movs	r2, #0
 8004eca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eec:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e5      	bne.n	8004ecc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3314      	adds	r3, #20
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	667b      	str	r3, [r7, #100]	; 0x64
 8004f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f20:	647a      	str	r2, [r7, #68]	; 0x44
 8004f22:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e5      	bne.n	8004f00 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	623b      	str	r3, [r7, #32]
   return(result);
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3314      	adds	r3, #20
 8004f52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f54:	633a      	str	r2, [r7, #48]	; 0x30
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d119      	bne.n	8004fac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0310 	bic.w	r3, r3, #16
 8004f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f98:	61fa      	str	r2, [r7, #28]
 8004f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e5      	bne.n	8004f78 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fae:	2200      	movs	r2, #0
 8004fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d106      	bne.n	8004fc8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fc2:	f7ff ff0b 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fc6:	e002      	b.n	8004fce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004fc8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fca:	f7ff fee9 	bl	8004da0 <HAL_UART_RxCpltCallback>
}
 8004fce:	bf00      	nop
 8004fd0:	3770      	adds	r7, #112	; 0x70
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d108      	bne.n	8005004 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff feed 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005002:	e002      	b.n	800500a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff fed5 	bl	8004db4 <HAL_UART_RxHalfCpltCallback>
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	2b80      	cmp	r3, #128	; 0x80
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b21      	cmp	r3, #33	; 0x21
 8005044:	d108      	bne.n	8005058 <UART_DMAError+0x46>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2200      	movs	r2, #0
 8005050:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005052:	68b8      	ldr	r0, [r7, #8]
 8005054:	f000 f8c2 	bl	80051dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b22      	cmp	r3, #34	; 0x22
 8005078:	d108      	bne.n	800508c <UART_DMAError+0x7a>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005086:	68b8      	ldr	r0, [r7, #8]
 8005088:	f000 f8d0 	bl	800522c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	f043 0210 	orr.w	r2, r3, #16
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005098:	68b8      	ldr	r0, [r7, #8]
 800509a:	f7ff fe95 	bl	8004dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b098      	sub	sp, #96	; 0x60
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2222      	movs	r2, #34	; 0x22
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d4:	4a3e      	ldr	r2, [pc, #248]	; (80051d0 <UART_Start_Receive_DMA+0x128>)
 80050d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	4a3d      	ldr	r2, [pc, #244]	; (80051d4 <UART_Start_Receive_DMA+0x12c>)
 80050de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <UART_Start_Receive_DMA+0x130>)
 80050e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	2200      	movs	r2, #0
 80050ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050f0:	f107 0308 	add.w	r3, r7, #8
 80050f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	f7fd face 	bl	80026a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d019      	beq.n	800515e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800513a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005140:	65bb      	str	r3, [r7, #88]	; 0x58
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800514a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800514c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3314      	adds	r3, #20
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	657b      	str	r3, [r7, #84]	; 0x54
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800517e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e5      	bne.n	800515e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3314      	adds	r3, #20
 8005198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	617b      	str	r3, [r7, #20]
   return(result);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a8:	653b      	str	r3, [r7, #80]	; 0x50
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3314      	adds	r3, #20
 80051b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051b2:	627a      	str	r2, [r7, #36]	; 0x24
 80051b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6a39      	ldr	r1, [r7, #32]
 80051b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e5      	bne.n	8005192 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3760      	adds	r7, #96	; 0x60
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	08004eab 	.word	0x08004eab
 80051d4:	08004fd7 	.word	0x08004fd7
 80051d8:	08005013 	.word	0x08005013

080051dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	; 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	61ba      	str	r2, [r7, #24]
 8005206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6979      	ldr	r1, [r7, #20]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	613b      	str	r3, [r7, #16]
   return(result);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005220:	bf00      	nop
 8005222:	3724      	adds	r7, #36	; 0x24
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b095      	sub	sp, #84	; 0x54
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	330c      	adds	r3, #12
 8005252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005254:	643a      	str	r2, [r7, #64]	; 0x40
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800525a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e5      	bne.n	8005234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	61fb      	str	r3, [r7, #28]
   return(result);
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3314      	adds	r3, #20
 8005286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800528e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e5      	bne.n	8005268 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d119      	bne.n	80052d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f023 0310 	bic.w	r3, r3, #16
 80052ba:	647b      	str	r3, [r7, #68]	; 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052c4:	61ba      	str	r2, [r7, #24]
 80052c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6979      	ldr	r1, [r7, #20]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	613b      	str	r3, [r7, #16]
   return(result);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e5      	bne.n	80052a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052e6:	bf00      	nop
 80052e8:	3754      	adds	r7, #84	; 0x54
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff fd5b 	bl	8004dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b21      	cmp	r3, #33	; 0x21
 800532c:	d13e      	bne.n	80053ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005336:	d114      	bne.n	8005362 <UART_Transmit_IT+0x48>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d110      	bne.n	8005362 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	1c9a      	adds	r2, r3, #2
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	621a      	str	r2, [r3, #32]
 8005360:	e008      	b.n	8005374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6211      	str	r1, [r2, #32]
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29b      	uxth	r3, r3
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	4619      	mov	r1, r3
 8005382:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10f      	bne.n	80053a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fccc 	bl	8004d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b08c      	sub	sp, #48	; 0x30
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b22      	cmp	r3, #34	; 0x22
 80053fc:	f040 80ae 	bne.w	800555c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005408:	d117      	bne.n	800543a <UART_Receive_IT+0x50>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d113      	bne.n	800543a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005428:	b29a      	uxth	r2, r3
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28
 8005438:	e026      	b.n	8005488 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544c:	d007      	beq.n	800545e <UART_Receive_IT+0x74>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <UART_Receive_IT+0x82>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e008      	b.n	800547e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005478:	b2da      	uxtb	r2, r3
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29b      	uxth	r3, r3
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4619      	mov	r1, r3
 8005496:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005498:	2b00      	cmp	r3, #0
 800549a:	d15d      	bne.n	8005558 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0220 	bic.w	r2, r2, #32
 80054aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0201 	bic.w	r2, r2, #1
 80054ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d135      	bne.n	800554e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	613b      	str	r3, [r7, #16]
   return(result);
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f023 0310 	bic.w	r3, r3, #16
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005508:	623a      	str	r2, [r7, #32]
 800550a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	69f9      	ldr	r1, [r7, #28]
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	61bb      	str	r3, [r7, #24]
   return(result);
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e5      	bne.n	80054e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b10      	cmp	r3, #16
 8005528:	d10a      	bne.n	8005540 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff fc48 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
 800554c:	e002      	b.n	8005554 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff fc26 	bl	8004da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e002      	b.n	800555e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	e000      	b.n	800555e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800555c:	2302      	movs	r3, #2
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	3730      	adds	r7, #48	; 0x30
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800556c:	b0c0      	sub	sp, #256	; 0x100
 800556e:	af00      	add	r7, sp, #0
 8005570:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005584:	68d9      	ldr	r1, [r3, #12]
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	ea40 0301 	orr.w	r3, r0, r1
 8005590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	431a      	orrs	r2, r3
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055c0:	f021 010c 	bic.w	r1, r1, #12
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055ce:	430b      	orrs	r3, r1
 80055d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	6999      	ldr	r1, [r3, #24]
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	ea40 0301 	orr.w	r3, r0, r1
 80055ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4b8f      	ldr	r3, [pc, #572]	; (8005834 <UART_SetConfig+0x2cc>)
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d005      	beq.n	8005608 <UART_SetConfig+0xa0>
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b8d      	ldr	r3, [pc, #564]	; (8005838 <UART_SetConfig+0x2d0>)
 8005604:	429a      	cmp	r2, r3
 8005606:	d104      	bne.n	8005612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7fe f984 	bl	8003914 <HAL_RCC_GetPCLK2Freq>
 800560c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005610:	e003      	b.n	800561a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005612:	f7fe f96b 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005616:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005624:	f040 810c 	bne.w	8005840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005632:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800563a:	4622      	mov	r2, r4
 800563c:	462b      	mov	r3, r5
 800563e:	1891      	adds	r1, r2, r2
 8005640:	65b9      	str	r1, [r7, #88]	; 0x58
 8005642:	415b      	adcs	r3, r3
 8005644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800564a:	4621      	mov	r1, r4
 800564c:	eb12 0801 	adds.w	r8, r2, r1
 8005650:	4629      	mov	r1, r5
 8005652:	eb43 0901 	adc.w	r9, r3, r1
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800566a:	4690      	mov	r8, r2
 800566c:	4699      	mov	r9, r3
 800566e:	4623      	mov	r3, r4
 8005670:	eb18 0303 	adds.w	r3, r8, r3
 8005674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005678:	462b      	mov	r3, r5
 800567a:	eb49 0303 	adc.w	r3, r9, r3
 800567e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800568e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005696:	460b      	mov	r3, r1
 8005698:	18db      	adds	r3, r3, r3
 800569a:	653b      	str	r3, [r7, #80]	; 0x50
 800569c:	4613      	mov	r3, r2
 800569e:	eb42 0303 	adc.w	r3, r2, r3
 80056a2:	657b      	str	r3, [r7, #84]	; 0x54
 80056a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056ac:	f7fb f9de 	bl	8000a6c <__aeabi_uldivmod>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4b61      	ldr	r3, [pc, #388]	; (800583c <UART_SetConfig+0x2d4>)
 80056b6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	011c      	lsls	r4, r3, #4
 80056be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	1891      	adds	r1, r2, r2
 80056d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80056d8:	415b      	adcs	r3, r3
 80056da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056e0:	4641      	mov	r1, r8
 80056e2:	eb12 0a01 	adds.w	sl, r2, r1
 80056e6:	4649      	mov	r1, r9
 80056e8:	eb43 0b01 	adc.w	fp, r3, r1
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005700:	4692      	mov	sl, r2
 8005702:	469b      	mov	fp, r3
 8005704:	4643      	mov	r3, r8
 8005706:	eb1a 0303 	adds.w	r3, sl, r3
 800570a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800570e:	464b      	mov	r3, r9
 8005710:	eb4b 0303 	adc.w	r3, fp, r3
 8005714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005724:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800572c:	460b      	mov	r3, r1
 800572e:	18db      	adds	r3, r3, r3
 8005730:	643b      	str	r3, [r7, #64]	; 0x40
 8005732:	4613      	mov	r3, r2
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	647b      	str	r3, [r7, #68]	; 0x44
 800573a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800573e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005742:	f7fb f993 	bl	8000a6c <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4611      	mov	r1, r2
 800574c:	4b3b      	ldr	r3, [pc, #236]	; (800583c <UART_SetConfig+0x2d4>)
 800574e:	fba3 2301 	umull	r2, r3, r3, r1
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	2264      	movs	r2, #100	; 0x64
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	1acb      	subs	r3, r1, r3
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005762:	4b36      	ldr	r3, [pc, #216]	; (800583c <UART_SetConfig+0x2d4>)
 8005764:	fba3 2302 	umull	r2, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005770:	441c      	add	r4, r3
 8005772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800577c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005784:	4642      	mov	r2, r8
 8005786:	464b      	mov	r3, r9
 8005788:	1891      	adds	r1, r2, r2
 800578a:	63b9      	str	r1, [r7, #56]	; 0x38
 800578c:	415b      	adcs	r3, r3
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005794:	4641      	mov	r1, r8
 8005796:	1851      	adds	r1, r2, r1
 8005798:	6339      	str	r1, [r7, #48]	; 0x30
 800579a:	4649      	mov	r1, r9
 800579c:	414b      	adcs	r3, r1
 800579e:	637b      	str	r3, [r7, #52]	; 0x34
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057ac:	4659      	mov	r1, fp
 80057ae:	00cb      	lsls	r3, r1, #3
 80057b0:	4651      	mov	r1, sl
 80057b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b6:	4651      	mov	r1, sl
 80057b8:	00ca      	lsls	r2, r1, #3
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	4603      	mov	r3, r0
 80057c0:	4642      	mov	r2, r8
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c8:	464b      	mov	r3, r9
 80057ca:	460a      	mov	r2, r1
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057e8:	460b      	mov	r3, r1
 80057ea:	18db      	adds	r3, r3, r3
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ee:	4613      	mov	r3, r2
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057fe:	f7fb f935 	bl	8000a6c <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <UART_SetConfig+0x2d4>)
 8005808:	fba3 1302 	umull	r1, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	2164      	movs	r1, #100	; 0x64
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3332      	adds	r3, #50	; 0x32
 800581a:	4a08      	ldr	r2, [pc, #32]	; (800583c <UART_SetConfig+0x2d4>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	f003 0207 	and.w	r2, r3, #7
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4422      	add	r2, r4
 800582e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005830:	e106      	b.n	8005a40 <UART_SetConfig+0x4d8>
 8005832:	bf00      	nop
 8005834:	40011000 	.word	0x40011000
 8005838:	40011400 	.word	0x40011400
 800583c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005844:	2200      	movs	r2, #0
 8005846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800584a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800584e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005852:	4642      	mov	r2, r8
 8005854:	464b      	mov	r3, r9
 8005856:	1891      	adds	r1, r2, r2
 8005858:	6239      	str	r1, [r7, #32]
 800585a:	415b      	adcs	r3, r3
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
 800585e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005862:	4641      	mov	r1, r8
 8005864:	1854      	adds	r4, r2, r1
 8005866:	4649      	mov	r1, r9
 8005868:	eb43 0501 	adc.w	r5, r3, r1
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	00eb      	lsls	r3, r5, #3
 8005876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800587a:	00e2      	lsls	r2, r4, #3
 800587c:	4614      	mov	r4, r2
 800587e:	461d      	mov	r5, r3
 8005880:	4643      	mov	r3, r8
 8005882:	18e3      	adds	r3, r4, r3
 8005884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005888:	464b      	mov	r3, r9
 800588a:	eb45 0303 	adc.w	r3, r5, r3
 800588e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800589e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058ae:	4629      	mov	r1, r5
 80058b0:	008b      	lsls	r3, r1, #2
 80058b2:	4621      	mov	r1, r4
 80058b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b8:	4621      	mov	r1, r4
 80058ba:	008a      	lsls	r2, r1, #2
 80058bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058c0:	f7fb f8d4 	bl	8000a6c <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4b60      	ldr	r3, [pc, #384]	; (8005a4c <UART_SetConfig+0x4e4>)
 80058ca:	fba3 2302 	umull	r2, r3, r3, r2
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	011c      	lsls	r4, r3, #4
 80058d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058e4:	4642      	mov	r2, r8
 80058e6:	464b      	mov	r3, r9
 80058e8:	1891      	adds	r1, r2, r2
 80058ea:	61b9      	str	r1, [r7, #24]
 80058ec:	415b      	adcs	r3, r3
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f4:	4641      	mov	r1, r8
 80058f6:	1851      	adds	r1, r2, r1
 80058f8:	6139      	str	r1, [r7, #16]
 80058fa:	4649      	mov	r1, r9
 80058fc:	414b      	adcs	r3, r1
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800590c:	4659      	mov	r1, fp
 800590e:	00cb      	lsls	r3, r1, #3
 8005910:	4651      	mov	r1, sl
 8005912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005916:	4651      	mov	r1, sl
 8005918:	00ca      	lsls	r2, r1, #3
 800591a:	4610      	mov	r0, r2
 800591c:	4619      	mov	r1, r3
 800591e:	4603      	mov	r3, r0
 8005920:	4642      	mov	r2, r8
 8005922:	189b      	adds	r3, r3, r2
 8005924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005928:	464b      	mov	r3, r9
 800592a:	460a      	mov	r2, r1
 800592c:	eb42 0303 	adc.w	r3, r2, r3
 8005930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	67bb      	str	r3, [r7, #120]	; 0x78
 800593e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800594c:	4649      	mov	r1, r9
 800594e:	008b      	lsls	r3, r1, #2
 8005950:	4641      	mov	r1, r8
 8005952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005956:	4641      	mov	r1, r8
 8005958:	008a      	lsls	r2, r1, #2
 800595a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800595e:	f7fb f885 	bl	8000a6c <__aeabi_uldivmod>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4611      	mov	r1, r2
 8005968:	4b38      	ldr	r3, [pc, #224]	; (8005a4c <UART_SetConfig+0x4e4>)
 800596a:	fba3 2301 	umull	r2, r3, r3, r1
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	2264      	movs	r2, #100	; 0x64
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	1acb      	subs	r3, r1, r3
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	3332      	adds	r3, #50	; 0x32
 800597c:	4a33      	ldr	r2, [pc, #204]	; (8005a4c <UART_SetConfig+0x4e4>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005988:	441c      	add	r4, r3
 800598a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598e:	2200      	movs	r2, #0
 8005990:	673b      	str	r3, [r7, #112]	; 0x70
 8005992:	677a      	str	r2, [r7, #116]	; 0x74
 8005994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	1891      	adds	r1, r2, r2
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	415b      	adcs	r3, r3
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a8:	4641      	mov	r1, r8
 80059aa:	1851      	adds	r1, r2, r1
 80059ac:	6039      	str	r1, [r7, #0]
 80059ae:	4649      	mov	r1, r9
 80059b0:	414b      	adcs	r3, r1
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059c0:	4659      	mov	r1, fp
 80059c2:	00cb      	lsls	r3, r1, #3
 80059c4:	4651      	mov	r1, sl
 80059c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ca:	4651      	mov	r1, sl
 80059cc:	00ca      	lsls	r2, r1, #3
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	4642      	mov	r2, r8
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80059da:	464b      	mov	r3, r9
 80059dc:	460a      	mov	r2, r1
 80059de:	eb42 0303 	adc.w	r3, r2, r3
 80059e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	663b      	str	r3, [r7, #96]	; 0x60
 80059ee:	667a      	str	r2, [r7, #100]	; 0x64
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059fc:	4649      	mov	r1, r9
 80059fe:	008b      	lsls	r3, r1, #2
 8005a00:	4641      	mov	r1, r8
 8005a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a06:	4641      	mov	r1, r8
 8005a08:	008a      	lsls	r2, r1, #2
 8005a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a0e:	f7fb f82d 	bl	8000a6c <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <UART_SetConfig+0x4e4>)
 8005a18:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	2164      	movs	r1, #100	; 0x64
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	3332      	adds	r3, #50	; 0x32
 8005a2a:	4a08      	ldr	r2, [pc, #32]	; (8005a4c <UART_SetConfig+0x4e4>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f003 020f 	and.w	r2, r3, #15
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4422      	add	r2, r4
 8005a3e:	609a      	str	r2, [r3, #8]
}
 8005a40:	bf00      	nop
 8005a42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a46:	46bd      	mov	sp, r7
 8005a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a4c:	51eb851f 	.word	0x51eb851f

08005a50 <__NVIC_SetPriority>:
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	6039      	str	r1, [r7, #0]
 8005a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	db0a      	blt.n	8005a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	490c      	ldr	r1, [pc, #48]	; (8005a9c <__NVIC_SetPriority+0x4c>)
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	0112      	lsls	r2, r2, #4
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	440b      	add	r3, r1
 8005a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a78:	e00a      	b.n	8005a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4908      	ldr	r1, [pc, #32]	; (8005aa0 <__NVIC_SetPriority+0x50>)
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	3b04      	subs	r3, #4
 8005a88:	0112      	lsls	r2, r2, #4
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	761a      	strb	r2, [r3, #24]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	e000e100 	.word	0xe000e100
 8005aa0:	e000ed00 	.word	0xe000ed00

08005aa4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	f06f 0004 	mvn.w	r0, #4
 8005aae:	f7ff ffcf 	bl	8005a50 <__NVIC_SetPriority>
#endif
}
 8005ab2:	bf00      	nop
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005abe:	f3ef 8305 	mrs	r3, IPSR
 8005ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005aca:	f06f 0305 	mvn.w	r3, #5
 8005ace:	607b      	str	r3, [r7, #4]
 8005ad0:	e00c      	b.n	8005aec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <osKernelInitialize+0x44>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ada:	4b08      	ldr	r3, [pc, #32]	; (8005afc <osKernelInitialize+0x44>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	e002      	b.n	8005aec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005aec:	687b      	ldr	r3, [r7, #4]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	200047ec 	.word	0x200047ec

08005b00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b06:	f3ef 8305 	mrs	r3, IPSR
 8005b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b12:	f06f 0305 	mvn.w	r3, #5
 8005b16:	607b      	str	r3, [r7, #4]
 8005b18:	e010      	b.n	8005b3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <osKernelStart+0x48>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d109      	bne.n	8005b36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b22:	f7ff ffbf 	bl	8005aa4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b26:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <osKernelStart+0x48>)
 8005b28:	2202      	movs	r2, #2
 8005b2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b2c:	f001 f866 	bl	8006bfc <vTaskStartScheduler>
      stat = osOK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	607b      	str	r3, [r7, #4]
 8005b34:	e002      	b.n	8005b3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b3c:	687b      	ldr	r3, [r7, #4]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200047ec 	.word	0x200047ec

08005b4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08e      	sub	sp, #56	; 0x38
 8005b50:	af04      	add	r7, sp, #16
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b5c:	f3ef 8305 	mrs	r3, IPSR
 8005b60:	617b      	str	r3, [r7, #20]
  return(result);
 8005b62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d17e      	bne.n	8005c66 <osThreadNew+0x11a>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d07b      	beq.n	8005c66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b72:	2318      	movs	r3, #24
 8005b74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d045      	beq.n	8005c12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <osThreadNew+0x48>
        name = attr->name;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <osThreadNew+0x6e>
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b38      	cmp	r3, #56	; 0x38
 8005bac:	d805      	bhi.n	8005bba <osThreadNew+0x6e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <osThreadNew+0x72>
        return (NULL);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e054      	b.n	8005c68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	089b      	lsrs	r3, r3, #2
 8005bcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00e      	beq.n	8005bf4 <osThreadNew+0xa8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b5b      	cmp	r3, #91	; 0x5b
 8005bdc:	d90a      	bls.n	8005bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d006      	beq.n	8005bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <osThreadNew+0xa8>
        mem = 1;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	e010      	b.n	8005c16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10c      	bne.n	8005c16 <osThreadNew+0xca>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <osThreadNew+0xca>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <osThreadNew+0xca>
          mem = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61bb      	str	r3, [r7, #24]
 8005c10:	e001      	b.n	8005c16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d110      	bne.n	8005c3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c24:	9202      	str	r2, [sp, #8]
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	6a3a      	ldr	r2, [r7, #32]
 8005c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fe0c 	bl	8006850 <xTaskCreateStatic>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	e013      	b.n	8005c66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d110      	bne.n	8005c66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	f107 0310 	add.w	r3, r7, #16
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fe57 	bl	800690a <xTaskCreate>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d001      	beq.n	8005c66 <osThreadNew+0x11a>
            hTask = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c66:	693b      	ldr	r3, [r7, #16]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3728      	adds	r7, #40	; 0x28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c78:	f3ef 8305 	mrs	r3, IPSR
 8005c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <osDelay+0x1c>
    stat = osErrorISR;
 8005c84:	f06f 0305 	mvn.w	r3, #5
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e007      	b.n	8005c9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 ff7c 	bl	8006b94 <vTaskDelay>
    }
  }

  return (stat);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a07      	ldr	r2, [pc, #28]	; (8005cd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4a06      	ldr	r2, [pc, #24]	; (8005cd8 <vApplicationGetIdleTaskMemory+0x30>)
 8005cbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2280      	movs	r2, #128	; 0x80
 8005cc4:	601a      	str	r2, [r3, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	200047f0 	.word	0x200047f0
 8005cd8:	2000484c 	.word	0x2000484c

08005cdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a07      	ldr	r2, [pc, #28]	; (8005d08 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4a06      	ldr	r2, [pc, #24]	; (8005d0c <vApplicationGetTimerTaskMemory+0x30>)
 8005cf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cfa:	601a      	str	r2, [r3, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	20004a4c 	.word	0x20004a4c
 8005d0c:	20004aa8 	.word	0x20004aa8

08005d10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f103 0208 	add.w	r2, r3, #8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f103 0208 	add.w	r2, r3, #8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f103 0208 	add.w	r2, r3, #8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc8:	d103      	bne.n	8005dd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e00c      	b.n	8005dec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e002      	b.n	8005de0 <vListInsert+0x2e>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d2f6      	bcs.n	8005dda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6892      	ldr	r2, [r2, #8]
 8005e3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6852      	ldr	r2, [r2, #4]
 8005e44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d103      	bne.n	8005e58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	1e5a      	subs	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <xQueueGenericReset+0x2a>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	60bb      	str	r3, [r7, #8]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ea2:	f002 f877 	bl	8007f94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	441a      	add	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	68f9      	ldr	r1, [r7, #12]
 8005ed6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	441a      	add	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	22ff      	movs	r2, #255	; 0xff
 8005ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	22ff      	movs	r2, #255	; 0xff
 8005eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d114      	bne.n	8005f22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01a      	beq.n	8005f36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3310      	adds	r3, #16
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 f903 	bl	8007110 <xTaskRemoveFromEventList>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d012      	beq.n	8005f36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <xQueueGenericReset+0xcc>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	e009      	b.n	8005f36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3310      	adds	r3, #16
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fef2 	bl	8005d10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3324      	adds	r3, #36	; 0x24
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff feed 	bl	8005d10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f36:	f002 f85d 	bl	8007ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f3a:	2301      	movs	r3, #1
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	e000ed04 	.word	0xe000ed04

08005f48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08e      	sub	sp, #56	; 0x38
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <xQueueGenericCreateStatic+0x52>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <xQueueGenericCreateStatic+0x56>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <xQueueGenericCreateStatic+0x58>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	623b      	str	r3, [r7, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <xQueueGenericCreateStatic+0x7e>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <xQueueGenericCreateStatic+0x82>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <xQueueGenericCreateStatic+0x84>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	61fb      	str	r3, [r7, #28]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fe6:	2350      	movs	r3, #80	; 0x50
 8005fe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b50      	cmp	r3, #80	; 0x50
 8005fee:	d00a      	beq.n	8006006 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	61bb      	str	r3, [r7, #24]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006006:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00d      	beq.n	800602e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800601a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	4613      	mov	r3, r2
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f805 	bl	8006038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006030:	4618      	mov	r0, r3
 8006032:	3730      	adds	r7, #48	; 0x30
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d103      	bne.n	8006054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	e002      	b.n	800605a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006066:	2101      	movs	r1, #1
 8006068:	69b8      	ldr	r0, [r7, #24]
 800606a:	f7ff ff05 	bl	8005e78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08e      	sub	sp, #56	; 0x38
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800608e:	2300      	movs	r3, #0
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueGenericSend+0x32>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <xQueueGenericSend+0x40>
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <xQueueGenericSend+0x44>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <xQueueGenericSend+0x46>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <xQueueGenericSend+0x60>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d103      	bne.n	80060ee <xQueueGenericSend+0x6e>
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <xQueueGenericSend+0x72>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <xQueueGenericSend+0x74>
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <xQueueGenericSend+0x8e>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	623b      	str	r3, [r7, #32]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800610e:	f001 f9e3 	bl	80074d8 <xTaskGetSchedulerState>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <xQueueGenericSend+0x9e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <xQueueGenericSend+0xa2>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <xQueueGenericSend+0xa4>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <xQueueGenericSend+0xbe>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	61fb      	str	r3, [r7, #28]
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800613e:	f001 ff29 	bl	8007f94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <xQueueGenericSend+0xd4>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d129      	bne.n	80061a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800615a:	f000 fa0b 	bl	8006574 <prvCopyDataToQueue>
 800615e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d010      	beq.n	800618a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	3324      	adds	r3, #36	; 0x24
 800616c:	4618      	mov	r0, r3
 800616e:	f000 ffcf 	bl	8007110 <xTaskRemoveFromEventList>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d013      	beq.n	80061a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006178:	4b3f      	ldr	r3, [pc, #252]	; (8006278 <xQueueGenericSend+0x1f8>)
 800617a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	e00a      	b.n	80061a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006190:	4b39      	ldr	r3, [pc, #228]	; (8006278 <xQueueGenericSend+0x1f8>)
 8006192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061a0:	f001 ff28 	bl	8007ff4 <vPortExitCritical>
				return pdPASS;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e063      	b.n	8006270 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061ae:	f001 ff21 	bl	8007ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e05c      	b.n	8006270 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061bc:	f107 0314 	add.w	r3, r7, #20
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 f82f 	bl	8007224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061c6:	2301      	movs	r3, #1
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061ca:	f001 ff13 	bl	8007ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061ce:	f000 fd7b 	bl	8006cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061d2:	f001 fedf 	bl	8007f94 <vPortEnterCritical>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061dc:	b25b      	sxtb	r3, r3
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e2:	d103      	bne.n	80061ec <xQueueGenericSend+0x16c>
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f2:	b25b      	sxtb	r3, r3
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f8:	d103      	bne.n	8006202 <xQueueGenericSend+0x182>
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006202:	f001 fef7 	bl	8007ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006206:	1d3a      	adds	r2, r7, #4
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	4611      	mov	r1, r2
 800620e:	4618      	mov	r0, r3
 8006210:	f001 f81e 	bl	8007250 <xTaskCheckForTimeOut>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d124      	bne.n	8006264 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800621a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800621c:	f000 faa2 	bl	8006764 <prvIsQueueFull>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d018      	beq.n	8006258 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	3310      	adds	r3, #16
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4611      	mov	r1, r2
 800622e:	4618      	mov	r0, r3
 8006230:	f000 ff1e 	bl	8007070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006236:	f000 fa2d 	bl	8006694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800623a:	f000 fd53 	bl	8006ce4 <xTaskResumeAll>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	f47f af7c 	bne.w	800613e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <xQueueGenericSend+0x1f8>)
 8006248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	e772      	b.n	800613e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800625a:	f000 fa1b 	bl	8006694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800625e:	f000 fd41 	bl	8006ce4 <xTaskResumeAll>
 8006262:	e76c      	b.n	800613e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006266:	f000 fa15 	bl	8006694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800626a:	f000 fd3b 	bl	8006ce4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800626e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006270:	4618      	mov	r0, r3
 8006272:	3738      	adds	r7, #56	; 0x38
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b090      	sub	sp, #64	; 0x40
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <xQueueGenericSendFromISR+0x3c>
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <xQueueGenericSendFromISR+0x40>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <xQueueGenericSendFromISR+0x42>
 80062bc:	2300      	movs	r3, #0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062d4:	bf00      	nop
 80062d6:	e7fe      	b.n	80062d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d103      	bne.n	80062e6 <xQueueGenericSendFromISR+0x6a>
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <xQueueGenericSendFromISR+0x6e>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <xQueueGenericSendFromISR+0x70>
 80062ea:	2300      	movs	r3, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	623b      	str	r3, [r7, #32]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006306:	f001 ff27 	bl	8008158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800630a:	f3ef 8211 	mrs	r2, BASEPRI
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	61fa      	str	r2, [r7, #28]
 8006320:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006322:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	429a      	cmp	r2, r3
 8006330:	d302      	bcc.n	8006338 <xQueueGenericSendFromISR+0xbc>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d12f      	bne.n	8006398 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800633e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800634e:	f000 f911 	bl	8006574 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006352:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635a:	d112      	bne.n	8006382 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d016      	beq.n	8006392 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	3324      	adds	r3, #36	; 0x24
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fed1 	bl	8007110 <xTaskRemoveFromEventList>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00e      	beq.n	8006392 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e007      	b.n	8006392 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006386:	3301      	adds	r3, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	b25a      	sxtb	r2, r3
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006392:	2301      	movs	r3, #1
 8006394:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006396:	e001      	b.n	800639c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006398:	2300      	movs	r3, #0
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3740      	adds	r7, #64	; 0x40
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08c      	sub	sp, #48	; 0x30
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <xQueueReceive+0x30>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	623b      	str	r3, [r7, #32]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d103      	bne.n	80063f2 <xQueueReceive+0x3e>
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <xQueueReceive+0x42>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <xQueueReceive+0x44>
 80063f6:	2300      	movs	r3, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xQueueReceive+0x5e>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	61fb      	str	r3, [r7, #28]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006412:	f001 f861 	bl	80074d8 <xTaskGetSchedulerState>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <xQueueReceive+0x6e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <xQueueReceive+0x72>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <xQueueReceive+0x74>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <xQueueReceive+0x8e>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	61bb      	str	r3, [r7, #24]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006442:	f001 fda7 	bl	8007f94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01f      	beq.n	8006492 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006456:	f000 f8f7 	bl	8006648 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	1e5a      	subs	r2, r3, #1
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00f      	beq.n	800648a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	3310      	adds	r3, #16
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fe4e 	bl	8007110 <xTaskRemoveFromEventList>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800647a:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <xQueueReceive+0x1bc>)
 800647c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800648a:	f001 fdb3 	bl	8007ff4 <vPortExitCritical>
				return pdPASS;
 800648e:	2301      	movs	r3, #1
 8006490:	e069      	b.n	8006566 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d103      	bne.n	80064a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006498:	f001 fdac 	bl	8007ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800649c:	2300      	movs	r3, #0
 800649e:	e062      	b.n	8006566 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064a6:	f107 0310 	add.w	r3, r7, #16
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 feba 	bl	8007224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064b4:	f001 fd9e 	bl	8007ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064b8:	f000 fc06 	bl	8006cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064bc:	f001 fd6a 	bl	8007f94 <vPortEnterCritical>
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064c6:	b25b      	sxtb	r3, r3
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064cc:	d103      	bne.n	80064d6 <xQueueReceive+0x122>
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064dc:	b25b      	sxtb	r3, r3
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e2:	d103      	bne.n	80064ec <xQueueReceive+0x138>
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064ec:	f001 fd82 	bl	8007ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064f0:	1d3a      	adds	r2, r7, #4
 80064f2:	f107 0310 	add.w	r3, r7, #16
 80064f6:	4611      	mov	r1, r2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fea9 	bl	8007250 <xTaskCheckForTimeOut>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d123      	bne.n	800654c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006506:	f000 f917 	bl	8006738 <prvIsQueueEmpty>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d017      	beq.n	8006540 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	3324      	adds	r3, #36	; 0x24
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	4611      	mov	r1, r2
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fda9 	bl	8007070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800651e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006520:	f000 f8b8 	bl	8006694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006524:	f000 fbde 	bl	8006ce4 <xTaskResumeAll>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d189      	bne.n	8006442 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800652e:	4b10      	ldr	r3, [pc, #64]	; (8006570 <xQueueReceive+0x1bc>)
 8006530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	e780      	b.n	8006442 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006542:	f000 f8a7 	bl	8006694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006546:	f000 fbcd 	bl	8006ce4 <xTaskResumeAll>
 800654a:	e77a      	b.n	8006442 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800654c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800654e:	f000 f8a1 	bl	8006694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006552:	f000 fbc7 	bl	8006ce4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006558:	f000 f8ee 	bl	8006738 <prvIsQueueEmpty>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	f43f af6f 	beq.w	8006442 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006566:	4618      	mov	r0, r3
 8006568:	3730      	adds	r7, #48	; 0x30
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10d      	bne.n	80065ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d14d      	bne.n	8006636 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 ffb8 	bl	8007514 <xTaskPriorityDisinherit>
 80065a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	609a      	str	r2, [r3, #8]
 80065ac:	e043      	b.n	8006636 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d119      	bne.n	80065e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6858      	ldr	r0, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	461a      	mov	r2, r3
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	f00e fdfb 	bl	80151ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	441a      	add	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d32b      	bcc.n	8006636 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]
 80065e6:	e026      	b.n	8006636 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68d8      	ldr	r0, [r3, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	461a      	mov	r2, r3
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	f00e fde1 	bl	80151ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	425b      	negs	r3, r3
 8006602:	441a      	add	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d207      	bcs.n	8006624 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	425b      	negs	r3, r3
 800661e:	441a      	add	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d105      	bne.n	8006636 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	3b01      	subs	r3, #1
 8006634:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800663e:	697b      	ldr	r3, [r7, #20]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d018      	beq.n	800668c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	441a      	add	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	429a      	cmp	r2, r3
 8006672:	d303      	bcc.n	800667c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68d9      	ldr	r1, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	461a      	mov	r2, r3
 8006686:	6838      	ldr	r0, [r7, #0]
 8006688:	f00e fd97 	bl	80151ba <memcpy>
	}
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800669c:	f001 fc7a 	bl	8007f94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066a8:	e011      	b.n	80066ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d012      	beq.n	80066d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3324      	adds	r3, #36	; 0x24
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fd2a 	bl	8007110 <xTaskRemoveFromEventList>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066c2:	f000 fe27 	bl	8007314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	dce9      	bgt.n	80066aa <prvUnlockQueue+0x16>
 80066d6:	e000      	b.n	80066da <prvUnlockQueue+0x46>
					break;
 80066d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	22ff      	movs	r2, #255	; 0xff
 80066de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066e2:	f001 fc87 	bl	8007ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066e6:	f001 fc55 	bl	8007f94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066f2:	e011      	b.n	8006718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d012      	beq.n	8006722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3310      	adds	r3, #16
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fd05 	bl	8007110 <xTaskRemoveFromEventList>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800670c:	f000 fe02 	bl	8007314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	3b01      	subs	r3, #1
 8006714:	b2db      	uxtb	r3, r3
 8006716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800671c:	2b00      	cmp	r3, #0
 800671e:	dce9      	bgt.n	80066f4 <prvUnlockQueue+0x60>
 8006720:	e000      	b.n	8006724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	22ff      	movs	r2, #255	; 0xff
 8006728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800672c:	f001 fc62 	bl	8007ff4 <vPortExitCritical>
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006740:	f001 fc28 	bl	8007f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800674c:	2301      	movs	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	e001      	b.n	8006756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006756:	f001 fc4d 	bl	8007ff4 <vPortExitCritical>

	return xReturn;
 800675a:	68fb      	ldr	r3, [r7, #12]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800676c:	f001 fc12 	bl	8007f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006778:	429a      	cmp	r2, r3
 800677a:	d102      	bne.n	8006782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800677c:	2301      	movs	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e001      	b.n	8006786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006786:	f001 fc35 	bl	8007ff4 <vPortExitCritical>

	return xReturn;
 800678a:	68fb      	ldr	r3, [r7, #12]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	e014      	b.n	80067ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067a4:	4a0f      	ldr	r2, [pc, #60]	; (80067e4 <vQueueAddToRegistry+0x50>)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067b0:	490c      	ldr	r1, [pc, #48]	; (80067e4 <vQueueAddToRegistry+0x50>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067ba:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <vQueueAddToRegistry+0x50>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	4413      	add	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067c6:	e006      	b.n	80067d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b07      	cmp	r3, #7
 80067d2:	d9e7      	bls.n	80067a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20004ea8 	.word	0x20004ea8

080067e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067f8:	f001 fbcc 	bl	8007f94 <vPortEnterCritical>
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006802:	b25b      	sxtb	r3, r3
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006808:	d103      	bne.n	8006812 <vQueueWaitForMessageRestricted+0x2a>
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006818:	b25b      	sxtb	r3, r3
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800681e:	d103      	bne.n	8006828 <vQueueWaitForMessageRestricted+0x40>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006828:	f001 fbe4 	bl	8007ff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3324      	adds	r3, #36	; 0x24
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fc3b 	bl	80070b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f7ff ff26 	bl	8006694 <prvUnlockQueue>
	}
 8006848:	bf00      	nop
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08e      	sub	sp, #56	; 0x38
 8006854:	af04      	add	r7, sp, #16
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10a      	bne.n	800687a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	623b      	str	r3, [r7, #32]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xTaskCreateStatic+0x46>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61fb      	str	r3, [r7, #28]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006896:	235c      	movs	r3, #92	; 0x5c
 8006898:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b5c      	cmp	r3, #92	; 0x5c
 800689e:	d00a      	beq.n	80068b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	61bb      	str	r3, [r7, #24]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01e      	beq.n	80068fc <xTaskCreateStatic+0xac>
 80068be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01b      	beq.n	80068fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	2202      	movs	r2, #2
 80068d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068d6:	2300      	movs	r3, #0
 80068d8:	9303      	str	r3, [sp, #12]
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	9302      	str	r3, [sp, #8]
 80068de:	f107 0314 	add.w	r3, r7, #20
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f850 	bl	8006994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068f6:	f000 f8dd 	bl	8006ab4 <prvAddNewTaskToReadyList>
 80068fa:	e001      	b.n	8006900 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006900:	697b      	ldr	r3, [r7, #20]
	}
 8006902:	4618      	mov	r0, r3
 8006904:	3728      	adds	r7, #40	; 0x28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800690a:	b580      	push	{r7, lr}
 800690c:	b08c      	sub	sp, #48	; 0x30
 800690e:	af04      	add	r7, sp, #16
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	4613      	mov	r3, r2
 8006918:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800691a:	88fb      	ldrh	r3, [r7, #6]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4618      	mov	r0, r3
 8006920:	f001 fc5a 	bl	80081d8 <pvPortMalloc>
 8006924:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00e      	beq.n	800694a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800692c:	205c      	movs	r0, #92	; 0x5c
 800692e:	f001 fc53 	bl	80081d8 <pvPortMalloc>
 8006932:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
 8006940:	e005      	b.n	800694e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006942:	6978      	ldr	r0, [r7, #20]
 8006944:	f001 fd14 	bl	8008370 <vPortFree>
 8006948:	e001      	b.n	800694e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d017      	beq.n	8006984 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	2300      	movs	r3, #0
 8006960:	9303      	str	r3, [sp, #12]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	9302      	str	r3, [sp, #8]
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f80e 	bl	8006994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006978:	69f8      	ldr	r0, [r7, #28]
 800697a:	f000 f89b 	bl	8006ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800697e:	2301      	movs	r3, #1
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	e002      	b.n	800698a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006988:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800698a:	69bb      	ldr	r3, [r7, #24]
	}
 800698c:	4618      	mov	r0, r3
 800698e:	3720      	adds	r7, #32
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	461a      	mov	r2, r3
 80069ac:	21a5      	movs	r1, #165	; 0xa5
 80069ae:	f00e fb3b 	bl	8015028 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069bc:	3b01      	subs	r3, #1
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	f023 0307 	bic.w	r3, r3, #7
 80069ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	617b      	str	r3, [r7, #20]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01f      	beq.n	8006a32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	e012      	b.n	8006a1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4413      	add	r3, r2
 80069fe:	7819      	ldrb	r1, [r3, #0]
 8006a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	3334      	adds	r3, #52	; 0x34
 8006a08:	460a      	mov	r2, r1
 8006a0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d006      	beq.n	8006a26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	61fb      	str	r3, [r7, #28]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	2b0f      	cmp	r3, #15
 8006a22:	d9e9      	bls.n	80069f8 <prvInitialiseNewTask+0x64>
 8006a24:	e000      	b.n	8006a28 <prvInitialiseNewTask+0x94>
			{
				break;
 8006a26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a30:	e003      	b.n	8006a3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	2b37      	cmp	r3, #55	; 0x37
 8006a3e:	d901      	bls.n	8006a44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a40:	2337      	movs	r3, #55	; 0x37
 8006a42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	2200      	movs	r2, #0
 8006a54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff f978 	bl	8005d50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	3318      	adds	r3, #24
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff f973 	bl	8005d50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	2200      	movs	r2, #0
 8006a84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	68f9      	ldr	r1, [r7, #12]
 8006a92:	69b8      	ldr	r0, [r7, #24]
 8006a94:	f001 f94e 	bl	8007d34 <pxPortInitialiseStack>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aaa:	bf00      	nop
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006abc:	f001 fa6a 	bl	8007f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ac0:	4b2d      	ldr	r3, [pc, #180]	; (8006b78 <prvAddNewTaskToReadyList+0xc4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	4a2c      	ldr	r2, [pc, #176]	; (8006b78 <prvAddNewTaskToReadyList+0xc4>)
 8006ac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006aca:	4b2c      	ldr	r3, [pc, #176]	; (8006b7c <prvAddNewTaskToReadyList+0xc8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ad2:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <prvAddNewTaskToReadyList+0xc8>)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ad8:	4b27      	ldr	r3, [pc, #156]	; (8006b78 <prvAddNewTaskToReadyList+0xc4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d110      	bne.n	8006b02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ae0:	f000 fc3c 	bl	800735c <prvInitialiseTaskLists>
 8006ae4:	e00d      	b.n	8006b02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ae6:	4b26      	ldr	r3, [pc, #152]	; (8006b80 <prvAddNewTaskToReadyList+0xcc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006aee:	4b23      	ldr	r3, [pc, #140]	; (8006b7c <prvAddNewTaskToReadyList+0xc8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d802      	bhi.n	8006b02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006afc:	4a1f      	ldr	r2, [pc, #124]	; (8006b7c <prvAddNewTaskToReadyList+0xc8>)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b02:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <prvAddNewTaskToReadyList+0xd0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3301      	adds	r3, #1
 8006b08:	4a1e      	ldr	r2, [pc, #120]	; (8006b84 <prvAddNewTaskToReadyList+0xd0>)
 8006b0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <prvAddNewTaskToReadyList+0xd0>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <prvAddNewTaskToReadyList+0xd4>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d903      	bls.n	8006b28 <prvAddNewTaskToReadyList+0x74>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <prvAddNewTaskToReadyList+0xd4>)
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <prvAddNewTaskToReadyList+0xd8>)
 8006b36:	441a      	add	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f7ff f913 	bl	8005d6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b44:	f001 fa56 	bl	8007ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b48:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <prvAddNewTaskToReadyList+0xcc>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00e      	beq.n	8006b6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b50:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <prvAddNewTaskToReadyList+0xc8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d207      	bcs.n	8006b6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <prvAddNewTaskToReadyList+0xdc>)
 8006b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200053bc 	.word	0x200053bc
 8006b7c:	20004ee8 	.word	0x20004ee8
 8006b80:	200053c8 	.word	0x200053c8
 8006b84:	200053d8 	.word	0x200053d8
 8006b88:	200053c4 	.word	0x200053c4
 8006b8c:	20004eec 	.word	0x20004eec
 8006b90:	e000ed04 	.word	0xe000ed04

08006b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d017      	beq.n	8006bd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ba6:	4b13      	ldr	r3, [pc, #76]	; (8006bf4 <vTaskDelay+0x60>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <vTaskDelay+0x30>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	60bb      	str	r3, [r7, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bc4:	f000 f880 	bl	8006cc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bc8:	2100      	movs	r1, #0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fd10 	bl	80075f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bd0:	f000 f888 	bl	8006ce4 <xTaskResumeAll>
 8006bd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d107      	bne.n	8006bec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <vTaskDelay+0x64>)
 8006bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	200053e4 	.word	0x200053e4
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	; 0x28
 8006c00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c0a:	463a      	mov	r2, r7
 8006c0c:	1d39      	adds	r1, r7, #4
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff f848 	bl	8005ca8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	9202      	str	r2, [sp, #8]
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	2300      	movs	r3, #0
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2300      	movs	r3, #0
 8006c28:	460a      	mov	r2, r1
 8006c2a:	4921      	ldr	r1, [pc, #132]	; (8006cb0 <vTaskStartScheduler+0xb4>)
 8006c2c:	4821      	ldr	r0, [pc, #132]	; (8006cb4 <vTaskStartScheduler+0xb8>)
 8006c2e:	f7ff fe0f 	bl	8006850 <xTaskCreateStatic>
 8006c32:	4603      	mov	r3, r0
 8006c34:	4a20      	ldr	r2, [pc, #128]	; (8006cb8 <vTaskStartScheduler+0xbc>)
 8006c36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c38:	4b1f      	ldr	r3, [pc, #124]	; (8006cb8 <vTaskStartScheduler+0xbc>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c40:	2301      	movs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	e001      	b.n	8006c4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d102      	bne.n	8006c56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c50:	f000 fd22 	bl	8007698 <xTimerCreateTimerTask>
 8006c54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d116      	bne.n	8006c8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	613b      	str	r3, [r7, #16]
}
 8006c6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c70:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <vTaskStartScheduler+0xc0>)
 8006c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c78:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <vTaskStartScheduler+0xc4>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c7e:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <vTaskStartScheduler+0xc8>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c84:	f001 f8e4 	bl	8007e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c88:	e00e      	b.n	8006ca8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c90:	d10a      	bne.n	8006ca8 <vTaskStartScheduler+0xac>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	60fb      	str	r3, [r7, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <vTaskStartScheduler+0xaa>
}
 8006ca8:	bf00      	nop
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	08015fdc 	.word	0x08015fdc
 8006cb4:	0800732d 	.word	0x0800732d
 8006cb8:	200053e0 	.word	0x200053e0
 8006cbc:	200053dc 	.word	0x200053dc
 8006cc0:	200053c8 	.word	0x200053c8
 8006cc4:	200053c0 	.word	0x200053c0

08006cc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ccc:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <vTaskSuspendAll+0x18>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	4a03      	ldr	r2, [pc, #12]	; (8006ce0 <vTaskSuspendAll+0x18>)
 8006cd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cd6:	bf00      	nop
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	200053e4 	.word	0x200053e4

08006ce4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cf2:	4b42      	ldr	r3, [pc, #264]	; (8006dfc <xTaskResumeAll+0x118>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <xTaskResumeAll+0x2c>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	603b      	str	r3, [r7, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d10:	f001 f940 	bl	8007f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d14:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <xTaskResumeAll+0x118>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	4a38      	ldr	r2, [pc, #224]	; (8006dfc <xTaskResumeAll+0x118>)
 8006d1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d1e:	4b37      	ldr	r3, [pc, #220]	; (8006dfc <xTaskResumeAll+0x118>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d162      	bne.n	8006dec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d26:	4b36      	ldr	r3, [pc, #216]	; (8006e00 <xTaskResumeAll+0x11c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d05e      	beq.n	8006dec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d2e:	e02f      	b.n	8006d90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d30:	4b34      	ldr	r3, [pc, #208]	; (8006e04 <xTaskResumeAll+0x120>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3318      	adds	r3, #24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff f871 	bl	8005e24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff f86c 	bl	8005e24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d50:	4b2d      	ldr	r3, [pc, #180]	; (8006e08 <xTaskResumeAll+0x124>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d903      	bls.n	8006d60 <xTaskResumeAll+0x7c>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	4a2a      	ldr	r2, [pc, #168]	; (8006e08 <xTaskResumeAll+0x124>)
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d64:	4613      	mov	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4a27      	ldr	r2, [pc, #156]	; (8006e0c <xTaskResumeAll+0x128>)
 8006d6e:	441a      	add	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3304      	adds	r3, #4
 8006d74:	4619      	mov	r1, r3
 8006d76:	4610      	mov	r0, r2
 8006d78:	f7fe fff7 	bl	8005d6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d80:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <xTaskResumeAll+0x12c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d302      	bcc.n	8006d90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d8a:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <xTaskResumeAll+0x130>)
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d90:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <xTaskResumeAll+0x120>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1cb      	bne.n	8006d30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d9e:	f000 fb7b 	bl	8007498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006da2:	4b1d      	ldr	r3, [pc, #116]	; (8006e18 <xTaskResumeAll+0x134>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d010      	beq.n	8006dd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dae:	f000 f847 	bl	8006e40 <xTaskIncrementTick>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006db8:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <xTaskResumeAll+0x130>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1f1      	bne.n	8006dae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006dca:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <xTaskResumeAll+0x134>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dd0:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <xTaskResumeAll+0x130>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d009      	beq.n	8006dec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <xTaskResumeAll+0x138>)
 8006dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dec:	f001 f902 	bl	8007ff4 <vPortExitCritical>

	return xAlreadyYielded;
 8006df0:	68bb      	ldr	r3, [r7, #8]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200053e4 	.word	0x200053e4
 8006e00:	200053bc 	.word	0x200053bc
 8006e04:	2000537c 	.word	0x2000537c
 8006e08:	200053c4 	.word	0x200053c4
 8006e0c:	20004eec 	.word	0x20004eec
 8006e10:	20004ee8 	.word	0x20004ee8
 8006e14:	200053d0 	.word	0x200053d0
 8006e18:	200053cc 	.word	0x200053cc
 8006e1c:	e000ed04 	.word	0xe000ed04

08006e20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <xTaskGetTickCount+0x1c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e2c:	687b      	ldr	r3, [r7, #4]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	200053c0 	.word	0x200053c0

08006e40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e4a:	4b4f      	ldr	r3, [pc, #316]	; (8006f88 <xTaskIncrementTick+0x148>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f040 808f 	bne.w	8006f72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e54:	4b4d      	ldr	r3, [pc, #308]	; (8006f8c <xTaskIncrementTick+0x14c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e5c:	4a4b      	ldr	r2, [pc, #300]	; (8006f8c <xTaskIncrementTick+0x14c>)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d120      	bne.n	8006eaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e68:	4b49      	ldr	r3, [pc, #292]	; (8006f90 <xTaskIncrementTick+0x150>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	603b      	str	r3, [r7, #0]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <xTaskIncrementTick+0x46>
 8006e88:	4b41      	ldr	r3, [pc, #260]	; (8006f90 <xTaskIncrementTick+0x150>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	4b41      	ldr	r3, [pc, #260]	; (8006f94 <xTaskIncrementTick+0x154>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a3f      	ldr	r2, [pc, #252]	; (8006f90 <xTaskIncrementTick+0x150>)
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	4a3f      	ldr	r2, [pc, #252]	; (8006f94 <xTaskIncrementTick+0x154>)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	4b3e      	ldr	r3, [pc, #248]	; (8006f98 <xTaskIncrementTick+0x158>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	4a3d      	ldr	r2, [pc, #244]	; (8006f98 <xTaskIncrementTick+0x158>)
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	f000 faf7 	bl	8007498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006eaa:	4b3c      	ldr	r3, [pc, #240]	; (8006f9c <xTaskIncrementTick+0x15c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d349      	bcc.n	8006f48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eb4:	4b36      	ldr	r3, [pc, #216]	; (8006f90 <xTaskIncrementTick+0x150>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d104      	bne.n	8006ec8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ebe:	4b37      	ldr	r3, [pc, #220]	; (8006f9c <xTaskIncrementTick+0x15c>)
 8006ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ec4:	601a      	str	r2, [r3, #0]
					break;
 8006ec6:	e03f      	b.n	8006f48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec8:	4b31      	ldr	r3, [pc, #196]	; (8006f90 <xTaskIncrementTick+0x150>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d203      	bcs.n	8006ee8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ee0:	4a2e      	ldr	r2, [pc, #184]	; (8006f9c <xTaskIncrementTick+0x15c>)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ee6:	e02f      	b.n	8006f48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe ff99 	bl	8005e24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d004      	beq.n	8006f04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	3318      	adds	r3, #24
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe ff90 	bl	8005e24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <xTaskIncrementTick+0x160>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d903      	bls.n	8006f18 <xTaskIncrementTick+0xd8>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	4a22      	ldr	r2, [pc, #136]	; (8006fa0 <xTaskIncrementTick+0x160>)
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4a1f      	ldr	r2, [pc, #124]	; (8006fa4 <xTaskIncrementTick+0x164>)
 8006f26:	441a      	add	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4610      	mov	r0, r2
 8006f30:	f7fe ff1b 	bl	8005d6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <xTaskIncrementTick+0x168>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d3b8      	bcc.n	8006eb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f46:	e7b5      	b.n	8006eb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f48:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <xTaskIncrementTick+0x168>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4e:	4915      	ldr	r1, [pc, #84]	; (8006fa4 <xTaskIncrementTick+0x164>)
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d901      	bls.n	8006f64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f60:	2301      	movs	r3, #1
 8006f62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f64:	4b11      	ldr	r3, [pc, #68]	; (8006fac <xTaskIncrementTick+0x16c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	e004      	b.n	8006f7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f72:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <xTaskIncrementTick+0x170>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3301      	adds	r3, #1
 8006f78:	4a0d      	ldr	r2, [pc, #52]	; (8006fb0 <xTaskIncrementTick+0x170>)
 8006f7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f7c:	697b      	ldr	r3, [r7, #20]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	200053e4 	.word	0x200053e4
 8006f8c:	200053c0 	.word	0x200053c0
 8006f90:	20005374 	.word	0x20005374
 8006f94:	20005378 	.word	0x20005378
 8006f98:	200053d4 	.word	0x200053d4
 8006f9c:	200053dc 	.word	0x200053dc
 8006fa0:	200053c4 	.word	0x200053c4
 8006fa4:	20004eec 	.word	0x20004eec
 8006fa8:	20004ee8 	.word	0x20004ee8
 8006fac:	200053d0 	.word	0x200053d0
 8006fb0:	200053cc 	.word	0x200053cc

08006fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fba:	4b28      	ldr	r3, [pc, #160]	; (800705c <vTaskSwitchContext+0xa8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fc2:	4b27      	ldr	r3, [pc, #156]	; (8007060 <vTaskSwitchContext+0xac>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fc8:	e041      	b.n	800704e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006fca:	4b25      	ldr	r3, [pc, #148]	; (8007060 <vTaskSwitchContext+0xac>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd0:	4b24      	ldr	r3, [pc, #144]	; (8007064 <vTaskSwitchContext+0xb0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	e010      	b.n	8006ffa <vTaskSwitchContext+0x46>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <vTaskSwitchContext+0x40>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	607b      	str	r3, [r7, #4]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <vTaskSwitchContext+0x3e>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	491b      	ldr	r1, [pc, #108]	; (8007068 <vTaskSwitchContext+0xb4>)
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0e4      	beq.n	8006fd8 <vTaskSwitchContext+0x24>
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4a13      	ldr	r2, [pc, #76]	; (8007068 <vTaskSwitchContext+0xb4>)
 800701a:	4413      	add	r3, r2
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	605a      	str	r2, [r3, #4]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	3308      	adds	r3, #8
 8007030:	429a      	cmp	r2, r3
 8007032:	d104      	bne.n	800703e <vTaskSwitchContext+0x8a>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	605a      	str	r2, [r3, #4]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a09      	ldr	r2, [pc, #36]	; (800706c <vTaskSwitchContext+0xb8>)
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	4a06      	ldr	r2, [pc, #24]	; (8007064 <vTaskSwitchContext+0xb0>)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6013      	str	r3, [r2, #0]
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	200053e4 	.word	0x200053e4
 8007060:	200053d0 	.word	0x200053d0
 8007064:	200053c4 	.word	0x200053c4
 8007068:	20004eec 	.word	0x20004eec
 800706c:	20004ee8 	.word	0x20004ee8

08007070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	60fb      	str	r3, [r7, #12]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007096:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <vTaskPlaceOnEventList+0x44>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3318      	adds	r3, #24
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fe fe87 	bl	8005db2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070a4:	2101      	movs	r1, #1
 80070a6:	6838      	ldr	r0, [r7, #0]
 80070a8:	f000 faa2 	bl	80075f0 <prvAddCurrentTaskToDelayedList>
}
 80070ac:	bf00      	nop
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20004ee8 	.word	0x20004ee8

080070b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10a      	bne.n	80070e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	617b      	str	r3, [r7, #20]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070e0:	4b0a      	ldr	r3, [pc, #40]	; (800710c <vTaskPlaceOnEventListRestricted+0x54>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3318      	adds	r3, #24
 80070e6:	4619      	mov	r1, r3
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7fe fe3e 	bl	8005d6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80070f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	68b8      	ldr	r0, [r7, #8]
 80070fe:	f000 fa77 	bl	80075f0 <prvAddCurrentTaskToDelayedList>
	}
 8007102:	bf00      	nop
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20004ee8 	.word	0x20004ee8

08007110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	60fb      	str	r3, [r7, #12]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	3318      	adds	r3, #24
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fe6f 	bl	8005e24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007146:	4b1e      	ldr	r3, [pc, #120]	; (80071c0 <xTaskRemoveFromEventList+0xb0>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d11d      	bne.n	800718a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	3304      	adds	r3, #4
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fe66 	bl	8005e24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	4b19      	ldr	r3, [pc, #100]	; (80071c4 <xTaskRemoveFromEventList+0xb4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d903      	bls.n	800716c <xTaskRemoveFromEventList+0x5c>
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	4a16      	ldr	r2, [pc, #88]	; (80071c4 <xTaskRemoveFromEventList+0xb4>)
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4a13      	ldr	r2, [pc, #76]	; (80071c8 <xTaskRemoveFromEventList+0xb8>)
 800717a:	441a      	add	r2, r3
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	3304      	adds	r3, #4
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f7fe fdf1 	bl	8005d6a <vListInsertEnd>
 8007188:	e005      	b.n	8007196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	3318      	adds	r3, #24
 800718e:	4619      	mov	r1, r3
 8007190:	480e      	ldr	r0, [pc, #56]	; (80071cc <xTaskRemoveFromEventList+0xbc>)
 8007192:	f7fe fdea 	bl	8005d6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719a:	4b0d      	ldr	r3, [pc, #52]	; (80071d0 <xTaskRemoveFromEventList+0xc0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d905      	bls.n	80071b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071a4:	2301      	movs	r3, #1
 80071a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <xTaskRemoveFromEventList+0xc4>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e001      	b.n	80071b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071b4:	697b      	ldr	r3, [r7, #20]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200053e4 	.word	0x200053e4
 80071c4:	200053c4 	.word	0x200053c4
 80071c8:	20004eec 	.word	0x20004eec
 80071cc:	2000537c 	.word	0x2000537c
 80071d0:	20004ee8 	.word	0x20004ee8
 80071d4:	200053d0 	.word	0x200053d0

080071d8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <vTaskSetTimeOutState+0x24>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	60fb      	str	r3, [r7, #12]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80071fc:	f000 feca 	bl	8007f94 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <vTaskSetTimeOutState+0x44>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007208:	4b05      	ldr	r3, [pc, #20]	; (8007220 <vTaskSetTimeOutState+0x48>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007210:	f000 fef0 	bl	8007ff4 <vPortExitCritical>
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200053d4 	.word	0x200053d4
 8007220:	200053c0 	.word	0x200053c0

08007224 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <vTaskInternalSetTimeOutState+0x24>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <vTaskInternalSetTimeOutState+0x28>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	605a      	str	r2, [r3, #4]
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	200053d4 	.word	0x200053d4
 800724c:	200053c0 	.word	0x200053c0

08007250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	613b      	str	r3, [r7, #16]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	60fb      	str	r3, [r7, #12]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007292:	f000 fe7f 	bl	8007f94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007296:	4b1d      	ldr	r3, [pc, #116]	; (800730c <xTaskCheckForTimeOut+0xbc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ae:	d102      	bne.n	80072b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]
 80072b4:	e023      	b.n	80072fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	4b15      	ldr	r3, [pc, #84]	; (8007310 <xTaskCheckForTimeOut+0xc0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d007      	beq.n	80072d2 <xTaskCheckForTimeOut+0x82>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d302      	bcc.n	80072d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072cc:	2301      	movs	r3, #1
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	e015      	b.n	80072fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d20b      	bcs.n	80072f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff ff9b 	bl	8007224 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072ee:	2300      	movs	r3, #0
 80072f0:	61fb      	str	r3, [r7, #28]
 80072f2:	e004      	b.n	80072fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072fa:	2301      	movs	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072fe:	f000 fe79 	bl	8007ff4 <vPortExitCritical>

	return xReturn;
 8007302:	69fb      	ldr	r3, [r7, #28]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	200053c0 	.word	0x200053c0
 8007310:	200053d4 	.word	0x200053d4

08007314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007318:	4b03      	ldr	r3, [pc, #12]	; (8007328 <vTaskMissedYield+0x14>)
 800731a:	2201      	movs	r2, #1
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	200053d0 	.word	0x200053d0

0800732c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007334:	f000 f852 	bl	80073dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007338:	4b06      	ldr	r3, [pc, #24]	; (8007354 <prvIdleTask+0x28>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d9f9      	bls.n	8007334 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007340:	4b05      	ldr	r3, [pc, #20]	; (8007358 <prvIdleTask+0x2c>)
 8007342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007350:	e7f0      	b.n	8007334 <prvIdleTask+0x8>
 8007352:	bf00      	nop
 8007354:	20004eec 	.word	0x20004eec
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007362:	2300      	movs	r3, #0
 8007364:	607b      	str	r3, [r7, #4]
 8007366:	e00c      	b.n	8007382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4a12      	ldr	r2, [pc, #72]	; (80073bc <prvInitialiseTaskLists+0x60>)
 8007374:	4413      	add	r3, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe fcca 	bl	8005d10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3301      	adds	r3, #1
 8007380:	607b      	str	r3, [r7, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b37      	cmp	r3, #55	; 0x37
 8007386:	d9ef      	bls.n	8007368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007388:	480d      	ldr	r0, [pc, #52]	; (80073c0 <prvInitialiseTaskLists+0x64>)
 800738a:	f7fe fcc1 	bl	8005d10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800738e:	480d      	ldr	r0, [pc, #52]	; (80073c4 <prvInitialiseTaskLists+0x68>)
 8007390:	f7fe fcbe 	bl	8005d10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007394:	480c      	ldr	r0, [pc, #48]	; (80073c8 <prvInitialiseTaskLists+0x6c>)
 8007396:	f7fe fcbb 	bl	8005d10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800739a:	480c      	ldr	r0, [pc, #48]	; (80073cc <prvInitialiseTaskLists+0x70>)
 800739c:	f7fe fcb8 	bl	8005d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073a0:	480b      	ldr	r0, [pc, #44]	; (80073d0 <prvInitialiseTaskLists+0x74>)
 80073a2:	f7fe fcb5 	bl	8005d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <prvInitialiseTaskLists+0x78>)
 80073a8:	4a05      	ldr	r2, [pc, #20]	; (80073c0 <prvInitialiseTaskLists+0x64>)
 80073aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <prvInitialiseTaskLists+0x7c>)
 80073ae:	4a05      	ldr	r2, [pc, #20]	; (80073c4 <prvInitialiseTaskLists+0x68>)
 80073b0:	601a      	str	r2, [r3, #0]
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20004eec 	.word	0x20004eec
 80073c0:	2000534c 	.word	0x2000534c
 80073c4:	20005360 	.word	0x20005360
 80073c8:	2000537c 	.word	0x2000537c
 80073cc:	20005390 	.word	0x20005390
 80073d0:	200053a8 	.word	0x200053a8
 80073d4:	20005374 	.word	0x20005374
 80073d8:	20005378 	.word	0x20005378

080073dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073e2:	e019      	b.n	8007418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073e4:	f000 fdd6 	bl	8007f94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e8:	4b10      	ldr	r3, [pc, #64]	; (800742c <prvCheckTasksWaitingTermination+0x50>)
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3304      	adds	r3, #4
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe fd15 	bl	8005e24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073fa:	4b0d      	ldr	r3, [pc, #52]	; (8007430 <prvCheckTasksWaitingTermination+0x54>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3b01      	subs	r3, #1
 8007400:	4a0b      	ldr	r2, [pc, #44]	; (8007430 <prvCheckTasksWaitingTermination+0x54>)
 8007402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007404:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <prvCheckTasksWaitingTermination+0x58>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3b01      	subs	r3, #1
 800740a:	4a0a      	ldr	r2, [pc, #40]	; (8007434 <prvCheckTasksWaitingTermination+0x58>)
 800740c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800740e:	f000 fdf1 	bl	8007ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f810 	bl	8007438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007418:	4b06      	ldr	r3, [pc, #24]	; (8007434 <prvCheckTasksWaitingTermination+0x58>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e1      	bne.n	80073e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007420:	bf00      	nop
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20005390 	.word	0x20005390
 8007430:	200053bc 	.word	0x200053bc
 8007434:	200053a4 	.word	0x200053a4

08007438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007446:	2b00      	cmp	r3, #0
 8007448:	d108      	bne.n	800745c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	4618      	mov	r0, r3
 8007450:	f000 ff8e 	bl	8008370 <vPortFree>
				vPortFree( pxTCB );
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 ff8b 	bl	8008370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800745a:	e018      	b.n	800748e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007462:	2b01      	cmp	r3, #1
 8007464:	d103      	bne.n	800746e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 ff82 	bl	8008370 <vPortFree>
	}
 800746c:	e00f      	b.n	800748e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007474:	2b02      	cmp	r3, #2
 8007476:	d00a      	beq.n	800748e <prvDeleteTCB+0x56>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	60fb      	str	r3, [r7, #12]
}
 800748a:	bf00      	nop
 800748c:	e7fe      	b.n	800748c <prvDeleteTCB+0x54>
	}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800749e:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <prvResetNextTaskUnblockTime+0x38>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <prvResetNextTaskUnblockTime+0x3c>)
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074b0:	e008      	b.n	80074c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b2:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <prvResetNextTaskUnblockTime+0x38>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	4a04      	ldr	r2, [pc, #16]	; (80074d4 <prvResetNextTaskUnblockTime+0x3c>)
 80074c2:	6013      	str	r3, [r2, #0]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20005374 	.word	0x20005374
 80074d4:	200053dc 	.word	0x200053dc

080074d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074de:	4b0b      	ldr	r3, [pc, #44]	; (800750c <xTaskGetSchedulerState+0x34>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074e6:	2301      	movs	r3, #1
 80074e8:	607b      	str	r3, [r7, #4]
 80074ea:	e008      	b.n	80074fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ec:	4b08      	ldr	r3, [pc, #32]	; (8007510 <xTaskGetSchedulerState+0x38>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074f4:	2302      	movs	r3, #2
 80074f6:	607b      	str	r3, [r7, #4]
 80074f8:	e001      	b.n	80074fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074fa:	2300      	movs	r3, #0
 80074fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074fe:	687b      	ldr	r3, [r7, #4]
	}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	200053c8 	.word	0x200053c8
 8007510:	200053e4 	.word	0x200053e4

08007514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d056      	beq.n	80075d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800752a:	4b2e      	ldr	r3, [pc, #184]	; (80075e4 <xTaskPriorityDisinherit+0xd0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	429a      	cmp	r2, r3
 8007532:	d00a      	beq.n	800754a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	60fb      	str	r3, [r7, #12]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	60bb      	str	r3, [r7, #8]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756c:	1e5a      	subs	r2, r3, #1
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757a:	429a      	cmp	r2, r3
 800757c:	d02c      	beq.n	80075d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007582:	2b00      	cmp	r3, #0
 8007584:	d128      	bne.n	80075d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	3304      	adds	r3, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe fc4a 	bl	8005e24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	4b0f      	ldr	r3, [pc, #60]	; (80075e8 <xTaskPriorityDisinherit+0xd4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d903      	bls.n	80075b8 <xTaskPriorityDisinherit+0xa4>
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	4a0c      	ldr	r2, [pc, #48]	; (80075e8 <xTaskPriorityDisinherit+0xd4>)
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4a09      	ldr	r2, [pc, #36]	; (80075ec <xTaskPriorityDisinherit+0xd8>)
 80075c6:	441a      	add	r2, r3
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	3304      	adds	r3, #4
 80075cc:	4619      	mov	r1, r3
 80075ce:	4610      	mov	r0, r2
 80075d0:	f7fe fbcb 	bl	8005d6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075d8:	697b      	ldr	r3, [r7, #20]
	}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20004ee8 	.word	0x20004ee8
 80075e8:	200053c4 	.word	0x200053c4
 80075ec:	20004eec 	.word	0x20004eec

080075f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075fa:	4b21      	ldr	r3, [pc, #132]	; (8007680 <prvAddCurrentTaskToDelayedList+0x90>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007600:	4b20      	ldr	r3, [pc, #128]	; (8007684 <prvAddCurrentTaskToDelayedList+0x94>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3304      	adds	r3, #4
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe fc0c 	bl	8005e24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007612:	d10a      	bne.n	800762a <prvAddCurrentTaskToDelayedList+0x3a>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800761a:	4b1a      	ldr	r3, [pc, #104]	; (8007684 <prvAddCurrentTaskToDelayedList+0x94>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3304      	adds	r3, #4
 8007620:	4619      	mov	r1, r3
 8007622:	4819      	ldr	r0, [pc, #100]	; (8007688 <prvAddCurrentTaskToDelayedList+0x98>)
 8007624:	f7fe fba1 	bl	8005d6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007628:	e026      	b.n	8007678 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4413      	add	r3, r2
 8007630:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007632:	4b14      	ldr	r3, [pc, #80]	; (8007684 <prvAddCurrentTaskToDelayedList+0x94>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	429a      	cmp	r2, r3
 8007640:	d209      	bcs.n	8007656 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007642:	4b12      	ldr	r3, [pc, #72]	; (800768c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <prvAddCurrentTaskToDelayedList+0x94>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3304      	adds	r3, #4
 800764c:	4619      	mov	r1, r3
 800764e:	4610      	mov	r0, r2
 8007650:	f7fe fbaf 	bl	8005db2 <vListInsert>
}
 8007654:	e010      	b.n	8007678 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007656:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <prvAddCurrentTaskToDelayedList+0x94>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3304      	adds	r3, #4
 8007660:	4619      	mov	r1, r3
 8007662:	4610      	mov	r0, r2
 8007664:	f7fe fba5 	bl	8005db2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007668:	4b0a      	ldr	r3, [pc, #40]	; (8007694 <prvAddCurrentTaskToDelayedList+0xa4>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	429a      	cmp	r2, r3
 8007670:	d202      	bcs.n	8007678 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007672:	4a08      	ldr	r2, [pc, #32]	; (8007694 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	6013      	str	r3, [r2, #0]
}
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	200053c0 	.word	0x200053c0
 8007684:	20004ee8 	.word	0x20004ee8
 8007688:	200053a8 	.word	0x200053a8
 800768c:	20005378 	.word	0x20005378
 8007690:	20005374 	.word	0x20005374
 8007694:	200053dc 	.word	0x200053dc

08007698 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08a      	sub	sp, #40	; 0x28
 800769c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076a2:	f000 fb07 	bl	8007cb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076a6:	4b1c      	ldr	r3, [pc, #112]	; (8007718 <xTimerCreateTimerTask+0x80>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d021      	beq.n	80076f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076b6:	1d3a      	adds	r2, r7, #4
 80076b8:	f107 0108 	add.w	r1, r7, #8
 80076bc:	f107 030c 	add.w	r3, r7, #12
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fb0b 	bl	8005cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	9202      	str	r2, [sp, #8]
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	2302      	movs	r3, #2
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	460a      	mov	r2, r1
 80076d8:	4910      	ldr	r1, [pc, #64]	; (800771c <xTimerCreateTimerTask+0x84>)
 80076da:	4811      	ldr	r0, [pc, #68]	; (8007720 <xTimerCreateTimerTask+0x88>)
 80076dc:	f7ff f8b8 	bl	8006850 <xTaskCreateStatic>
 80076e0:	4603      	mov	r3, r0
 80076e2:	4a10      	ldr	r2, [pc, #64]	; (8007724 <xTimerCreateTimerTask+0x8c>)
 80076e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <xTimerCreateTimerTask+0x8c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076ee:	2301      	movs	r3, #1
 80076f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	613b      	str	r3, [r7, #16]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800770e:	697b      	ldr	r3, [r7, #20]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20005418 	.word	0x20005418
 800771c:	08015fe4 	.word	0x08015fe4
 8007720:	0800785d 	.word	0x0800785d
 8007724:	2000541c 	.word	0x2000541c

08007728 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	; 0x28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007736:	2300      	movs	r3, #0
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	623b      	str	r3, [r7, #32]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007756:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <xTimerGenericCommand+0x98>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d02a      	beq.n	80077b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b05      	cmp	r3, #5
 800776e:	dc18      	bgt.n	80077a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007770:	f7ff feb2 	bl	80074d8 <xTaskGetSchedulerState>
 8007774:	4603      	mov	r3, r0
 8007776:	2b02      	cmp	r3, #2
 8007778:	d109      	bne.n	800778e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800777a:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <xTimerGenericCommand+0x98>)
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	f107 0110 	add.w	r1, r7, #16
 8007782:	2300      	movs	r3, #0
 8007784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007786:	f7fe fc7b 	bl	8006080 <xQueueGenericSend>
 800778a:	6278      	str	r0, [r7, #36]	; 0x24
 800778c:	e012      	b.n	80077b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800778e:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <xTimerGenericCommand+0x98>)
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	f107 0110 	add.w	r1, r7, #16
 8007796:	2300      	movs	r3, #0
 8007798:	2200      	movs	r2, #0
 800779a:	f7fe fc71 	bl	8006080 <xQueueGenericSend>
 800779e:	6278      	str	r0, [r7, #36]	; 0x24
 80077a0:	e008      	b.n	80077b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077a2:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <xTimerGenericCommand+0x98>)
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	f107 0110 	add.w	r1, r7, #16
 80077aa:	2300      	movs	r3, #0
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	f7fe fd65 	bl	800627c <xQueueGenericSendFromISR>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3728      	adds	r7, #40	; 0x28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20005418 	.word	0x20005418

080077c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ce:	4b22      	ldr	r3, [pc, #136]	; (8007858 <prvProcessExpiredTimer+0x94>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	3304      	adds	r3, #4
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe fb21 	bl	8005e24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d022      	beq.n	8007836 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	18d1      	adds	r1, r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	6978      	ldr	r0, [r7, #20]
 80077fe:	f000 f8d1 	bl	80079a4 <prvInsertTimerInActiveList>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01f      	beq.n	8007848 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007808:	2300      	movs	r3, #0
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	2300      	movs	r3, #0
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	2100      	movs	r1, #0
 8007812:	6978      	ldr	r0, [r7, #20]
 8007814:	f7ff ff88 	bl	8007728 <xTimerGenericCommand>
 8007818:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d113      	bne.n	8007848 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	60fb      	str	r3, [r7, #12]
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	b2da      	uxtb	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	6978      	ldr	r0, [r7, #20]
 800784e:	4798      	blx	r3
}
 8007850:	bf00      	nop
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20005410 	.word	0x20005410

0800785c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007864:	f107 0308 	add.w	r3, r7, #8
 8007868:	4618      	mov	r0, r3
 800786a:	f000 f857 	bl	800791c <prvGetNextExpireTime>
 800786e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4619      	mov	r1, r3
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 f803 	bl	8007880 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800787a:	f000 f8d5 	bl	8007a28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800787e:	e7f1      	b.n	8007864 <prvTimerTask+0x8>

08007880 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800788a:	f7ff fa1d 	bl	8006cc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800788e:	f107 0308 	add.w	r3, r7, #8
 8007892:	4618      	mov	r0, r3
 8007894:	f000 f866 	bl	8007964 <prvSampleTimeNow>
 8007898:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d130      	bne.n	8007902 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <prvProcessTimerOrBlockTask+0x3c>
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d806      	bhi.n	80078bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078ae:	f7ff fa19 	bl	8006ce4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff ff85 	bl	80077c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078ba:	e024      	b.n	8007906 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d008      	beq.n	80078d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078c2:	4b13      	ldr	r3, [pc, #76]	; (8007910 <prvProcessTimerOrBlockTask+0x90>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <prvProcessTimerOrBlockTask+0x50>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <prvProcessTimerOrBlockTask+0x52>
 80078d0:	2300      	movs	r3, #0
 80078d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078d4:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <prvProcessTimerOrBlockTask+0x94>)
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	4619      	mov	r1, r3
 80078e2:	f7fe ff81 	bl	80067e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078e6:	f7ff f9fd 	bl	8006ce4 <xTaskResumeAll>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078f0:	4b09      	ldr	r3, [pc, #36]	; (8007918 <prvProcessTimerOrBlockTask+0x98>)
 80078f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	f3bf 8f6f 	isb	sy
}
 8007900:	e001      	b.n	8007906 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007902:	f7ff f9ef 	bl	8006ce4 <xTaskResumeAll>
}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20005414 	.word	0x20005414
 8007914:	20005418 	.word	0x20005418
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007924:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <prvGetNextExpireTime+0x44>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <prvGetNextExpireTime+0x16>
 800792e:	2201      	movs	r2, #1
 8007930:	e000      	b.n	8007934 <prvGetNextExpireTime+0x18>
 8007932:	2200      	movs	r2, #0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007940:	4b07      	ldr	r3, [pc, #28]	; (8007960 <prvGetNextExpireTime+0x44>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	e001      	b.n	8007950 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007950:	68fb      	ldr	r3, [r7, #12]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20005410 	.word	0x20005410

08007964 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800796c:	f7ff fa58 	bl	8006e20 <xTaskGetTickCount>
 8007970:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007972:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <prvSampleTimeNow+0x3c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	429a      	cmp	r2, r3
 800797a:	d205      	bcs.n	8007988 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800797c:	f000 f936 	bl	8007bec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	e002      	b.n	800798e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800798e:	4a04      	ldr	r2, [pc, #16]	; (80079a0 <prvSampleTimeNow+0x3c>)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007994:	68fb      	ldr	r3, [r7, #12]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20005420 	.word	0x20005420

080079a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d812      	bhi.n	80079f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d302      	bcc.n	80079de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079d8:	2301      	movs	r3, #1
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	e01b      	b.n	8007a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079de:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <prvInsertTimerInActiveList+0x7c>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3304      	adds	r3, #4
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f7fe f9e2 	bl	8005db2 <vListInsert>
 80079ee:	e012      	b.n	8007a16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d206      	bcs.n	8007a06 <prvInsertTimerInActiveList+0x62>
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d302      	bcc.n	8007a06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	e007      	b.n	8007a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a06:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <prvInsertTimerInActiveList+0x80>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f7fe f9ce 	bl	8005db2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a16:	697b      	ldr	r3, [r7, #20]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20005414 	.word	0x20005414
 8007a24:	20005410 	.word	0x20005410

08007a28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	; 0x38
 8007a2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a2e:	e0ca      	b.n	8007bc6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da18      	bge.n	8007a68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a36:	1d3b      	adds	r3, r7, #4
 8007a38:	3304      	adds	r3, #4
 8007a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10a      	bne.n	8007a58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	61fb      	str	r3, [r7, #28]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a5e:	6850      	ldr	r0, [r2, #4]
 8007a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a62:	6892      	ldr	r2, [r2, #8]
 8007a64:	4611      	mov	r1, r2
 8007a66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f2c0 80ab 	blt.w	8007bc6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	3304      	adds	r3, #4
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fe f9cf 	bl	8005e24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a86:	463b      	mov	r3, r7
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff ff6b 	bl	8007964 <prvSampleTimeNow>
 8007a8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b09      	cmp	r3, #9
 8007a94:	f200 8096 	bhi.w	8007bc4 <prvProcessReceivedCommands+0x19c>
 8007a98:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <prvProcessReceivedCommands+0x78>)
 8007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9e:	bf00      	nop
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007ac9 	.word	0x08007ac9
 8007aac:	08007b3d 	.word	0x08007b3d
 8007ab0:	08007b51 	.word	0x08007b51
 8007ab4:	08007b9b 	.word	0x08007b9b
 8007ab8:	08007ac9 	.word	0x08007ac9
 8007abc:	08007ac9 	.word	0x08007ac9
 8007ac0:	08007b3d 	.word	0x08007b3d
 8007ac4:	08007b51 	.word	0x08007b51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	18d1      	adds	r1, r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ae8:	f7ff ff5c 	bl	80079a4 <prvInsertTimerInActiveList>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d069      	beq.n	8007bc6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007af8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d05e      	beq.n	8007bc6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	441a      	add	r2, r3
 8007b10:	2300      	movs	r3, #0
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	2300      	movs	r3, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b1a:	f7ff fe05 	bl	8007728 <xTimerGenericCommand>
 8007b1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d14f      	bne.n	8007bc6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	61bb      	str	r3, [r7, #24]
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b42:	f023 0301 	bic.w	r3, r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b4e:	e03a      	b.n	8007bc6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	617b      	str	r3, [r7, #20]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	18d1      	adds	r1, r2, r3
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b94:	f7ff ff06 	bl	80079a4 <prvInsertTimerInActiveList>
					break;
 8007b98:	e015      	b.n	8007bc6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d103      	bne.n	8007bb0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007baa:	f000 fbe1 	bl	8008370 <vPortFree>
 8007bae:	e00a      	b.n	8007bc6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bc2:	e000      	b.n	8007bc6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007bc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bc6:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <prvProcessReceivedCommands+0x1c0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	1d39      	adds	r1, r7, #4
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fbf0 	bl	80063b4 <xQueueReceive>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f47f af2a 	bne.w	8007a30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	3730      	adds	r7, #48	; 0x30
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20005418 	.word	0x20005418

08007bec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bf2:	e048      	b.n	8007c86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bf4:	4b2d      	ldr	r3, [pc, #180]	; (8007cac <prvSwitchTimerLists+0xc0>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfe:	4b2b      	ldr	r3, [pc, #172]	; (8007cac <prvSwitchTimerLists+0xc0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe f909 	bl	8005e24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d02e      	beq.n	8007c86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4413      	add	r3, r2
 8007c30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d90e      	bls.n	8007c58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c46:	4b19      	ldr	r3, [pc, #100]	; (8007cac <prvSwitchTimerLists+0xc0>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f7fe f8ae 	bl	8005db2 <vListInsert>
 8007c56:	e016      	b.n	8007c86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	2100      	movs	r1, #0
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff fd60 	bl	8007728 <xTimerGenericCommand>
 8007c68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	603b      	str	r3, [r7, #0]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c86:	4b09      	ldr	r3, [pc, #36]	; (8007cac <prvSwitchTimerLists+0xc0>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1b1      	bne.n	8007bf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c90:	4b06      	ldr	r3, [pc, #24]	; (8007cac <prvSwitchTimerLists+0xc0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c96:	4b06      	ldr	r3, [pc, #24]	; (8007cb0 <prvSwitchTimerLists+0xc4>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a04      	ldr	r2, [pc, #16]	; (8007cac <prvSwitchTimerLists+0xc0>)
 8007c9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c9e:	4a04      	ldr	r2, [pc, #16]	; (8007cb0 <prvSwitchTimerLists+0xc4>)
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	6013      	str	r3, [r2, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	20005410 	.word	0x20005410
 8007cb0:	20005414 	.word	0x20005414

08007cb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cba:	f000 f96b 	bl	8007f94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cbe:	4b15      	ldr	r3, [pc, #84]	; (8007d14 <prvCheckForValidListAndQueue+0x60>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d120      	bne.n	8007d08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cc6:	4814      	ldr	r0, [pc, #80]	; (8007d18 <prvCheckForValidListAndQueue+0x64>)
 8007cc8:	f7fe f822 	bl	8005d10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ccc:	4813      	ldr	r0, [pc, #76]	; (8007d1c <prvCheckForValidListAndQueue+0x68>)
 8007cce:	f7fe f81f 	bl	8005d10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cd2:	4b13      	ldr	r3, [pc, #76]	; (8007d20 <prvCheckForValidListAndQueue+0x6c>)
 8007cd4:	4a10      	ldr	r2, [pc, #64]	; (8007d18 <prvCheckForValidListAndQueue+0x64>)
 8007cd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cd8:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <prvCheckForValidListAndQueue+0x70>)
 8007cda:	4a10      	ldr	r2, [pc, #64]	; (8007d1c <prvCheckForValidListAndQueue+0x68>)
 8007cdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cde:	2300      	movs	r3, #0
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <prvCheckForValidListAndQueue+0x74>)
 8007ce4:	4a11      	ldr	r2, [pc, #68]	; (8007d2c <prvCheckForValidListAndQueue+0x78>)
 8007ce6:	2110      	movs	r1, #16
 8007ce8:	200a      	movs	r0, #10
 8007cea:	f7fe f92d 	bl	8005f48 <xQueueGenericCreateStatic>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4a08      	ldr	r2, [pc, #32]	; (8007d14 <prvCheckForValidListAndQueue+0x60>)
 8007cf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cf4:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <prvCheckForValidListAndQueue+0x60>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <prvCheckForValidListAndQueue+0x60>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	490b      	ldr	r1, [pc, #44]	; (8007d30 <prvCheckForValidListAndQueue+0x7c>)
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fd46 	bl	8006794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d08:	f000 f974 	bl	8007ff4 <vPortExitCritical>
}
 8007d0c:	bf00      	nop
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20005418 	.word	0x20005418
 8007d18:	200053e8 	.word	0x200053e8
 8007d1c:	200053fc 	.word	0x200053fc
 8007d20:	20005410 	.word	0x20005410
 8007d24:	20005414 	.word	0x20005414
 8007d28:	200054c4 	.word	0x200054c4
 8007d2c:	20005424 	.word	0x20005424
 8007d30:	08015fec 	.word	0x08015fec

08007d34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3b04      	subs	r3, #4
 8007d44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3b04      	subs	r3, #4
 8007d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3b04      	subs	r3, #4
 8007d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d64:	4a0c      	ldr	r2, [pc, #48]	; (8007d98 <pxPortInitialiseStack+0x64>)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3b14      	subs	r3, #20
 8007d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3b04      	subs	r3, #4
 8007d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f06f 0202 	mvn.w	r2, #2
 8007d82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3b20      	subs	r3, #32
 8007d88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	08007d9d 	.word	0x08007d9d

08007d9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007da6:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <prvTaskExitError+0x54>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dae:	d00a      	beq.n	8007dc6 <prvTaskExitError+0x2a>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <prvTaskExitError+0x28>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60bb      	str	r3, [r7, #8]
}
 8007dd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dda:	bf00      	nop
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0fc      	beq.n	8007ddc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007de2:	bf00      	nop
 8007de4:	bf00      	nop
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	20000010 	.word	0x20000010
	...

08007e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e00:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <pxCurrentTCBConst2>)
 8007e02:	6819      	ldr	r1, [r3, #0]
 8007e04:	6808      	ldr	r0, [r1, #0]
 8007e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	f380 8809 	msr	PSP, r0
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f04f 0000 	mov.w	r0, #0
 8007e16:	f380 8811 	msr	BASEPRI, r0
 8007e1a:	4770      	bx	lr
 8007e1c:	f3af 8000 	nop.w

08007e20 <pxCurrentTCBConst2>:
 8007e20:	20004ee8 	.word	0x20004ee8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop

08007e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e28:	4808      	ldr	r0, [pc, #32]	; (8007e4c <prvPortStartFirstTask+0x24>)
 8007e2a:	6800      	ldr	r0, [r0, #0]
 8007e2c:	6800      	ldr	r0, [r0, #0]
 8007e2e:	f380 8808 	msr	MSP, r0
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f380 8814 	msr	CONTROL, r0
 8007e3a:	b662      	cpsie	i
 8007e3c:	b661      	cpsie	f
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	df00      	svc	0
 8007e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e4a:	bf00      	nop
 8007e4c:	e000ed08 	.word	0xe000ed08

08007e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e56:	4b46      	ldr	r3, [pc, #280]	; (8007f70 <xPortStartScheduler+0x120>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a46      	ldr	r2, [pc, #280]	; (8007f74 <xPortStartScheduler+0x124>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d10a      	bne.n	8007e76 <xPortStartScheduler+0x26>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	613b      	str	r3, [r7, #16]
}
 8007e72:	bf00      	nop
 8007e74:	e7fe      	b.n	8007e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e76:	4b3e      	ldr	r3, [pc, #248]	; (8007f70 <xPortStartScheduler+0x120>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a3f      	ldr	r2, [pc, #252]	; (8007f78 <xPortStartScheduler+0x128>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d10a      	bne.n	8007e96 <xPortStartScheduler+0x46>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	60fb      	str	r3, [r7, #12]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e96:	4b39      	ldr	r3, [pc, #228]	; (8007f7c <xPortStartScheduler+0x12c>)
 8007e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	22ff      	movs	r2, #255	; 0xff
 8007ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	4b31      	ldr	r3, [pc, #196]	; (8007f80 <xPortStartScheduler+0x130>)
 8007ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ebe:	4b31      	ldr	r3, [pc, #196]	; (8007f84 <xPortStartScheduler+0x134>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ec4:	e009      	b.n	8007eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ec6:	4b2f      	ldr	r3, [pc, #188]	; (8007f84 <xPortStartScheduler+0x134>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	4a2d      	ldr	r2, [pc, #180]	; (8007f84 <xPortStartScheduler+0x134>)
 8007ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee2:	2b80      	cmp	r3, #128	; 0x80
 8007ee4:	d0ef      	beq.n	8007ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ee6:	4b27      	ldr	r3, [pc, #156]	; (8007f84 <xPortStartScheduler+0x134>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f1c3 0307 	rsb	r3, r3, #7
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d00a      	beq.n	8007f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	60bb      	str	r3, [r7, #8]
}
 8007f04:	bf00      	nop
 8007f06:	e7fe      	b.n	8007f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f08:	4b1e      	ldr	r3, [pc, #120]	; (8007f84 <xPortStartScheduler+0x134>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	021b      	lsls	r3, r3, #8
 8007f0e:	4a1d      	ldr	r2, [pc, #116]	; (8007f84 <xPortStartScheduler+0x134>)
 8007f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f12:	4b1c      	ldr	r3, [pc, #112]	; (8007f84 <xPortStartScheduler+0x134>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f1a:	4a1a      	ldr	r2, [pc, #104]	; (8007f84 <xPortStartScheduler+0x134>)
 8007f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f26:	4b18      	ldr	r3, [pc, #96]	; (8007f88 <xPortStartScheduler+0x138>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a17      	ldr	r2, [pc, #92]	; (8007f88 <xPortStartScheduler+0x138>)
 8007f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f32:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <xPortStartScheduler+0x138>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a14      	ldr	r2, [pc, #80]	; (8007f88 <xPortStartScheduler+0x138>)
 8007f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f3e:	f000 f8dd 	bl	80080fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <xPortStartScheduler+0x13c>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f48:	f000 f8fc 	bl	8008144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f4c:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <xPortStartScheduler+0x140>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a0f      	ldr	r2, [pc, #60]	; (8007f90 <xPortStartScheduler+0x140>)
 8007f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f58:	f7ff ff66 	bl	8007e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f5c:	f7ff f82a 	bl	8006fb4 <vTaskSwitchContext>
	prvTaskExitError();
 8007f60:	f7ff ff1c 	bl	8007d9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	e000ed00 	.word	0xe000ed00
 8007f74:	410fc271 	.word	0x410fc271
 8007f78:	410fc270 	.word	0x410fc270
 8007f7c:	e000e400 	.word	0xe000e400
 8007f80:	20005514 	.word	0x20005514
 8007f84:	20005518 	.word	0x20005518
 8007f88:	e000ed20 	.word	0xe000ed20
 8007f8c:	20000010 	.word	0x20000010
 8007f90:	e000ef34 	.word	0xe000ef34

08007f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	607b      	str	r3, [r7, #4]
}
 8007fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fae:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <vPortEnterCritical+0x58>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	4a0d      	ldr	r2, [pc, #52]	; (8007fec <vPortEnterCritical+0x58>)
 8007fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fb8:	4b0c      	ldr	r3, [pc, #48]	; (8007fec <vPortEnterCritical+0x58>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d10f      	bne.n	8007fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <vPortEnterCritical+0x5c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	603b      	str	r3, [r7, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <vPortEnterCritical+0x4a>
	}
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	20000010 	.word	0x20000010
 8007ff0:	e000ed04 	.word	0xe000ed04

08007ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <vPortExitCritical+0x50>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <vPortExitCritical+0x24>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	607b      	str	r3, [r7, #4]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008018:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <vPortExitCritical+0x50>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3b01      	subs	r3, #1
 800801e:	4a09      	ldr	r2, [pc, #36]	; (8008044 <vPortExitCritical+0x50>)
 8008020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008022:	4b08      	ldr	r3, [pc, #32]	; (8008044 <vPortExitCritical+0x50>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d105      	bne.n	8008036 <vPortExitCritical+0x42>
 800802a:	2300      	movs	r3, #0
 800802c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	f383 8811 	msr	BASEPRI, r3
}
 8008034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20000010 	.word	0x20000010
	...

08008050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008050:	f3ef 8009 	mrs	r0, PSP
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <pxCurrentTCBConst>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	f01e 0f10 	tst.w	lr, #16
 8008060:	bf08      	it	eq
 8008062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806a:	6010      	str	r0, [r2, #0]
 800806c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008074:	f380 8811 	msr	BASEPRI, r0
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f7fe ff98 	bl	8006fb4 <vTaskSwitchContext>
 8008084:	f04f 0000 	mov.w	r0, #0
 8008088:	f380 8811 	msr	BASEPRI, r0
 800808c:	bc09      	pop	{r0, r3}
 800808e:	6819      	ldr	r1, [r3, #0]
 8008090:	6808      	ldr	r0, [r1, #0]
 8008092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008096:	f01e 0f10 	tst.w	lr, #16
 800809a:	bf08      	it	eq
 800809c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080a0:	f380 8809 	msr	PSP, r0
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	f3af 8000 	nop.w

080080b0 <pxCurrentTCBConst>:
 80080b0:	20004ee8 	.word	0x20004ee8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop

080080b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	607b      	str	r3, [r7, #4]
}
 80080d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080d2:	f7fe feb5 	bl	8006e40 <xTaskIncrementTick>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080dc:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <xPortSysTickHandler+0x40>)
 80080de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	2300      	movs	r3, #0
 80080e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	f383 8811 	msr	BASEPRI, r3
}
 80080ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080f0:	bf00      	nop
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	e000ed04 	.word	0xe000ed04

080080fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <vPortSetupTimerInterrupt+0x34>)
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008106:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <vPortSetupTimerInterrupt+0x38>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <vPortSetupTimerInterrupt+0x3c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a0a      	ldr	r2, [pc, #40]	; (800813c <vPortSetupTimerInterrupt+0x40>)
 8008112:	fba2 2303 	umull	r2, r3, r2, r3
 8008116:	099b      	lsrs	r3, r3, #6
 8008118:	4a09      	ldr	r2, [pc, #36]	; (8008140 <vPortSetupTimerInterrupt+0x44>)
 800811a:	3b01      	subs	r3, #1
 800811c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800811e:	4b04      	ldr	r3, [pc, #16]	; (8008130 <vPortSetupTimerInterrupt+0x34>)
 8008120:	2207      	movs	r2, #7
 8008122:	601a      	str	r2, [r3, #0]
}
 8008124:	bf00      	nop
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	e000e010 	.word	0xe000e010
 8008134:	e000e018 	.word	0xe000e018
 8008138:	20000004 	.word	0x20000004
 800813c:	10624dd3 	.word	0x10624dd3
 8008140:	e000e014 	.word	0xe000e014

08008144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008154 <vPortEnableVFP+0x10>
 8008148:	6801      	ldr	r1, [r0, #0]
 800814a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800814e:	6001      	str	r1, [r0, #0]
 8008150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008152:	bf00      	nop
 8008154:	e000ed88 	.word	0xe000ed88

08008158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800815e:	f3ef 8305 	mrs	r3, IPSR
 8008162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b0f      	cmp	r3, #15
 8008168:	d914      	bls.n	8008194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800816a:	4a17      	ldr	r2, [pc, #92]	; (80081c8 <vPortValidateInterruptPriority+0x70>)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008174:	4b15      	ldr	r3, [pc, #84]	; (80081cc <vPortValidateInterruptPriority+0x74>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	7afa      	ldrb	r2, [r7, #11]
 800817a:	429a      	cmp	r2, r3
 800817c:	d20a      	bcs.n	8008194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	607b      	str	r3, [r7, #4]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008194:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <vPortValidateInterruptPriority+0x78>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800819c:	4b0d      	ldr	r3, [pc, #52]	; (80081d4 <vPortValidateInterruptPriority+0x7c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d90a      	bls.n	80081ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	603b      	str	r3, [r7, #0]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <vPortValidateInterruptPriority+0x60>
	}
 80081ba:	bf00      	nop
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	e000e3f0 	.word	0xe000e3f0
 80081cc:	20005514 	.word	0x20005514
 80081d0:	e000ed0c 	.word	0xe000ed0c
 80081d4:	20005518 	.word	0x20005518

080081d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08a      	sub	sp, #40	; 0x28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081e0:	2300      	movs	r3, #0
 80081e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081e4:	f7fe fd70 	bl	8006cc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081e8:	4b5b      	ldr	r3, [pc, #364]	; (8008358 <pvPortMalloc+0x180>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081f0:	f000 f920 	bl	8008434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081f4:	4b59      	ldr	r3, [pc, #356]	; (800835c <pvPortMalloc+0x184>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4013      	ands	r3, r2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f040 8093 	bne.w	8008328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01d      	beq.n	8008244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008208:	2208      	movs	r2, #8
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4413      	add	r3, r2
 800820e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	2b00      	cmp	r3, #0
 8008218:	d014      	beq.n	8008244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f023 0307 	bic.w	r3, r3, #7
 8008220:	3308      	adds	r3, #8
 8008222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00a      	beq.n	8008244 <pvPortMalloc+0x6c>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	617b      	str	r3, [r7, #20]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d06e      	beq.n	8008328 <pvPortMalloc+0x150>
 800824a:	4b45      	ldr	r3, [pc, #276]	; (8008360 <pvPortMalloc+0x188>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	429a      	cmp	r2, r3
 8008252:	d869      	bhi.n	8008328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008254:	4b43      	ldr	r3, [pc, #268]	; (8008364 <pvPortMalloc+0x18c>)
 8008256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008258:	4b42      	ldr	r3, [pc, #264]	; (8008364 <pvPortMalloc+0x18c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800825e:	e004      	b.n	800826a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d903      	bls.n	800827c <pvPortMalloc+0xa4>
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1f1      	bne.n	8008260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800827c:	4b36      	ldr	r3, [pc, #216]	; (8008358 <pvPortMalloc+0x180>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008282:	429a      	cmp	r2, r3
 8008284:	d050      	beq.n	8008328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2208      	movs	r2, #8
 800828c:	4413      	add	r3, r2
 800828e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	1ad2      	subs	r2, r2, r3
 80082a0:	2308      	movs	r3, #8
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d91f      	bls.n	80082e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4413      	add	r3, r2
 80082ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <pvPortMalloc+0xf8>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	613b      	str	r3, [r7, #16]
}
 80082cc:	bf00      	nop
 80082ce:	e7fe      	b.n	80082ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	1ad2      	subs	r2, r2, r3
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082e2:	69b8      	ldr	r0, [r7, #24]
 80082e4:	f000 f908 	bl	80084f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082e8:	4b1d      	ldr	r3, [pc, #116]	; (8008360 <pvPortMalloc+0x188>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	4a1b      	ldr	r2, [pc, #108]	; (8008360 <pvPortMalloc+0x188>)
 80082f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082f6:	4b1a      	ldr	r3, [pc, #104]	; (8008360 <pvPortMalloc+0x188>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	4b1b      	ldr	r3, [pc, #108]	; (8008368 <pvPortMalloc+0x190>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d203      	bcs.n	800830a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008302:	4b17      	ldr	r3, [pc, #92]	; (8008360 <pvPortMalloc+0x188>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a18      	ldr	r2, [pc, #96]	; (8008368 <pvPortMalloc+0x190>)
 8008308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	4b13      	ldr	r3, [pc, #76]	; (800835c <pvPortMalloc+0x184>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	431a      	orrs	r2, r3
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800831e:	4b13      	ldr	r3, [pc, #76]	; (800836c <pvPortMalloc+0x194>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	4a11      	ldr	r2, [pc, #68]	; (800836c <pvPortMalloc+0x194>)
 8008326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008328:	f7fe fcdc 	bl	8006ce4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <pvPortMalloc+0x174>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	60fb      	str	r3, [r7, #12]
}
 8008348:	bf00      	nop
 800834a:	e7fe      	b.n	800834a <pvPortMalloc+0x172>
	return pvReturn;
 800834c:	69fb      	ldr	r3, [r7, #28]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3728      	adds	r7, #40	; 0x28
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20009124 	.word	0x20009124
 800835c:	20009138 	.word	0x20009138
 8008360:	20009128 	.word	0x20009128
 8008364:	2000911c 	.word	0x2000911c
 8008368:	2000912c 	.word	0x2000912c
 800836c:	20009130 	.word	0x20009130

08008370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d04d      	beq.n	800841e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008382:	2308      	movs	r3, #8
 8008384:	425b      	negs	r3, r3
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	4413      	add	r3, r2
 800838a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	4b24      	ldr	r3, [pc, #144]	; (8008428 <vPortFree+0xb8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4013      	ands	r3, r2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10a      	bne.n	80083b4 <vPortFree+0x44>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	60fb      	str	r3, [r7, #12]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <vPortFree+0x62>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	60bb      	str	r3, [r7, #8]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	4b14      	ldr	r3, [pc, #80]	; (8008428 <vPortFree+0xb8>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4013      	ands	r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d01e      	beq.n	800841e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11a      	bne.n	800841e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	4b0e      	ldr	r3, [pc, #56]	; (8008428 <vPortFree+0xb8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	43db      	mvns	r3, r3
 80083f2:	401a      	ands	r2, r3
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083f8:	f7fe fc66 	bl	8006cc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	4b0a      	ldr	r3, [pc, #40]	; (800842c <vPortFree+0xbc>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4413      	add	r3, r2
 8008406:	4a09      	ldr	r2, [pc, #36]	; (800842c <vPortFree+0xbc>)
 8008408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800840a:	6938      	ldr	r0, [r7, #16]
 800840c:	f000 f874 	bl	80084f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008410:	4b07      	ldr	r3, [pc, #28]	; (8008430 <vPortFree+0xc0>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3301      	adds	r3, #1
 8008416:	4a06      	ldr	r2, [pc, #24]	; (8008430 <vPortFree+0xc0>)
 8008418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800841a:	f7fe fc63 	bl	8006ce4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800841e:	bf00      	nop
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20009138 	.word	0x20009138
 800842c:	20009128 	.word	0x20009128
 8008430:	20009134 	.word	0x20009134

08008434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800843a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800843e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008440:	4b27      	ldr	r3, [pc, #156]	; (80084e0 <prvHeapInit+0xac>)
 8008442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00c      	beq.n	8008468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3307      	adds	r3, #7
 8008452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0307 	bic.w	r3, r3, #7
 800845a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	4a1f      	ldr	r2, [pc, #124]	; (80084e0 <prvHeapInit+0xac>)
 8008464:	4413      	add	r3, r2
 8008466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800846c:	4a1d      	ldr	r2, [pc, #116]	; (80084e4 <prvHeapInit+0xb0>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008472:	4b1c      	ldr	r3, [pc, #112]	; (80084e4 <prvHeapInit+0xb0>)
 8008474:	2200      	movs	r2, #0
 8008476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008480:	2208      	movs	r2, #8
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	1a9b      	subs	r3, r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0307 	bic.w	r3, r3, #7
 800848e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <prvHeapInit+0xb4>)
 8008494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008496:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <prvHeapInit+0xb4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2200      	movs	r2, #0
 800849c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800849e:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <prvHeapInit+0xb4>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084b4:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <prvHeapInit+0xb4>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <prvHeapInit+0xb8>)
 80084c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <prvHeapInit+0xbc>)
 80084ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084cc:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <prvHeapInit+0xc0>)
 80084ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	2000551c 	.word	0x2000551c
 80084e4:	2000911c 	.word	0x2000911c
 80084e8:	20009124 	.word	0x20009124
 80084ec:	2000912c 	.word	0x2000912c
 80084f0:	20009128 	.word	0x20009128
 80084f4:	20009138 	.word	0x20009138

080084f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008500:	4b28      	ldr	r3, [pc, #160]	; (80085a4 <prvInsertBlockIntoFreeList+0xac>)
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	e002      	b.n	800850c <prvInsertBlockIntoFreeList+0x14>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	429a      	cmp	r2, r3
 8008514:	d8f7      	bhi.n	8008506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	4413      	add	r3, r2
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	429a      	cmp	r2, r3
 8008526:	d108      	bne.n	800853a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	441a      	add	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	441a      	add	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d118      	bne.n	8008580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d00d      	beq.n	8008576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	441a      	add	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e008      	b.n	8008588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008576:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	e003      	b.n	8008588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	429a      	cmp	r2, r3
 800858e:	d002      	beq.n	8008596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008596:	bf00      	nop
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	2000911c 	.word	0x2000911c
 80085a8:	20009124 	.word	0x20009124

080085ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80085ac:	4b04      	ldr	r3, [pc, #16]	; (80085c0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	b10a      	cbz	r2, 80085b6 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 80085b2:	4803      	ldr	r0, [pc, #12]	; (80085c0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 80085b4:	4770      	bx	lr
 80085b6:	4a03      	ldr	r2, [pc, #12]	; (80085c4 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 80085b8:	4801      	ldr	r0, [pc, #4]	; (80085c0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 80085ba:	6812      	ldr	r2, [r2, #0]
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	4770      	bx	lr
 80085c0:	2000001c 	.word	0x2000001c
 80085c4:	200001d0 	.word	0x200001d0

080085c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80085c8:	4a02      	ldr	r2, [pc, #8]	; (80085d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 80085ca:	4b03      	ldr	r3, [pc, #12]	; (80085d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 80085cc:	6812      	ldr	r2, [r2, #0]
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	200001d0 	.word	0x200001d0
 80085d8:	2000001c 	.word	0x2000001c

080085dc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 80085dc:	f003 bf86 	b.w	800c4ec <geometry_msgs__msg__Twist__init>

080085e0 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 80085e0:	f003 bfa8 	b.w	800c534 <geometry_msgs__msg__Twist__fini>

080085e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	f000 f819 	bl	800861c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80085ea:	4c07      	ldr	r4, [pc, #28]	; (8008608 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 80085ec:	60e0      	str	r0, [r4, #12]
 80085ee:	f000 f815 	bl	800861c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80085f4:	64a0      	str	r0, [r4, #72]	; 0x48
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	b10a      	cbz	r2, 80085fe <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 80085fa:	4804      	ldr	r0, [pc, #16]	; (800860c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	4a04      	ldr	r2, [pc, #16]	; (8008610 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8008600:	4802      	ldr	r0, [pc, #8]	; (800860c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8008602:	6812      	ldr	r2, [r2, #0]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	bd10      	pop	{r4, pc}
 8008608:	20000028 	.word	0x20000028
 800860c:	200000a0 	.word	0x200000a0
 8008610:	200001d4 	.word	0x200001d4

08008614 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8008614:	f003 bf9a 	b.w	800c54c <geometry_msgs__msg__Vector3__init>

08008618 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8008618:	f003 bf9c 	b.w	800c554 <geometry_msgs__msg__Vector3__fini>

0800861c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800861c:	4b04      	ldr	r3, [pc, #16]	; (8008630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	b10a      	cbz	r2, 8008626 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8008622:	4803      	ldr	r0, [pc, #12]	; (8008630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8008624:	4770      	bx	lr
 8008626:	4a03      	ldr	r2, [pc, #12]	; (8008634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8008628:	4801      	ldr	r0, [pc, #4]	; (8008630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800862a:	6812      	ldr	r2, [r2, #0]
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	4770      	bx	lr
 8008630:	20000160 	.word	0x20000160
 8008634:	200001d4 	.word	0x200001d4

08008638 <get_serialized_size_geometry_msgs__msg__Twist>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4604      	mov	r4, r0
 800863c:	b148      	cbz	r0, 8008652 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800863e:	460d      	mov	r5, r1
 8008640:	f000 f860 	bl	8008704 <get_serialized_size_geometry_msgs__msg__Vector3>
 8008644:	4606      	mov	r6, r0
 8008646:	1829      	adds	r1, r5, r0
 8008648:	f104 0018 	add.w	r0, r4, #24
 800864c:	f000 f85a 	bl	8008704 <get_serialized_size_geometry_msgs__msg__Vector3>
 8008650:	4430      	add	r0, r6
 8008652:	bd70      	pop	{r4, r5, r6, pc}

08008654 <_Twist__cdr_deserialize>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	460c      	mov	r4, r1
 8008658:	b189      	cbz	r1, 800867e <_Twist__cdr_deserialize+0x2a>
 800865a:	4605      	mov	r5, r0
 800865c:	f000 f8de 	bl	800881c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8008660:	6843      	ldr	r3, [r0, #4]
 8008662:	4621      	mov	r1, r4
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	4628      	mov	r0, r5
 8008668:	4798      	blx	r3
 800866a:	f000 f8d7 	bl	800881c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800866e:	6843      	ldr	r3, [r0, #4]
 8008670:	f104 0118 	add.w	r1, r4, #24
 8008674:	4628      	mov	r0, r5
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800867c:	4718      	bx	r3
 800867e:	4608      	mov	r0, r1
 8008680:	bd70      	pop	{r4, r5, r6, pc}
 8008682:	bf00      	nop

08008684 <_Twist__cdr_serialize>:
 8008684:	b510      	push	{r4, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	9101      	str	r1, [sp, #4]
 800868a:	b190      	cbz	r0, 80086b2 <_Twist__cdr_serialize+0x2e>
 800868c:	4604      	mov	r4, r0
 800868e:	f000 f8c5 	bl	800881c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8008692:	6843      	ldr	r3, [r0, #4]
 8008694:	9901      	ldr	r1, [sp, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	4620      	mov	r0, r4
 800869a:	4798      	blx	r3
 800869c:	f000 f8be 	bl	800881c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80086a0:	6843      	ldr	r3, [r0, #4]
 80086a2:	9901      	ldr	r1, [sp, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f104 0018 	add.w	r0, r4, #24
 80086aa:	b002      	add	sp, #8
 80086ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b0:	4718      	bx	r3
 80086b2:	b002      	add	sp, #8
 80086b4:	bd10      	pop	{r4, pc}
 80086b6:	bf00      	nop

080086b8 <_Twist__get_serialized_size>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4604      	mov	r4, r0
 80086bc:	b148      	cbz	r0, 80086d2 <_Twist__get_serialized_size+0x1a>
 80086be:	2100      	movs	r1, #0
 80086c0:	f000 f820 	bl	8008704 <get_serialized_size_geometry_msgs__msg__Vector3>
 80086c4:	4605      	mov	r5, r0
 80086c6:	4601      	mov	r1, r0
 80086c8:	f104 0018 	add.w	r0, r4, #24
 80086cc:	f000 f81a 	bl	8008704 <get_serialized_size_geometry_msgs__msg__Vector3>
 80086d0:	4428      	add	r0, r5
 80086d2:	bd38      	pop	{r3, r4, r5, pc}

080086d4 <_Twist__max_serialized_size>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	2301      	movs	r3, #1
 80086da:	2100      	movs	r1, #0
 80086dc:	f10d 0007 	add.w	r0, sp, #7
 80086e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80086e4:	f000 f87e 	bl	80087e4 <max_serialized_size_geometry_msgs__msg__Vector3>
 80086e8:	4604      	mov	r4, r0
 80086ea:	4601      	mov	r1, r0
 80086ec:	f10d 0007 	add.w	r0, sp, #7
 80086f0:	f000 f878 	bl	80087e4 <max_serialized_size_geometry_msgs__msg__Vector3>
 80086f4:	4420      	add	r0, r4
 80086f6:	b002      	add	sp, #8
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	bf00      	nop

080086fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80086fc:	4800      	ldr	r0, [pc, #0]	; (8008700 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 80086fe:	4770      	bx	lr
 8008700:	2000016c 	.word	0x2000016c

08008704 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8008704:	b1b8      	cbz	r0, 8008736 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8008706:	b538      	push	{r3, r4, r5, lr}
 8008708:	460d      	mov	r5, r1
 800870a:	4628      	mov	r0, r5
 800870c:	2108      	movs	r1, #8
 800870e:	f001 f9fd 	bl	8009b0c <ucdr_alignment>
 8008712:	f105 0308 	add.w	r3, r5, #8
 8008716:	181c      	adds	r4, r3, r0
 8008718:	2108      	movs	r1, #8
 800871a:	4620      	mov	r0, r4
 800871c:	f001 f9f6 	bl	8009b0c <ucdr_alignment>
 8008720:	3008      	adds	r0, #8
 8008722:	4404      	add	r4, r0
 8008724:	2108      	movs	r1, #8
 8008726:	4620      	mov	r0, r4
 8008728:	f001 f9f0 	bl	8009b0c <ucdr_alignment>
 800872c:	f1c5 0508 	rsb	r5, r5, #8
 8008730:	4428      	add	r0, r5
 8008732:	4420      	add	r0, r4
 8008734:	bd38      	pop	{r3, r4, r5, pc}
 8008736:	4770      	bx	lr

08008738 <_Vector3__cdr_deserialize>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	460c      	mov	r4, r1
 800873c:	b171      	cbz	r1, 800875c <_Vector3__cdr_deserialize+0x24>
 800873e:	4605      	mov	r5, r0
 8008740:	f001 f8c6 	bl	80098d0 <ucdr_deserialize_double>
 8008744:	f104 0108 	add.w	r1, r4, #8
 8008748:	4628      	mov	r0, r5
 800874a:	f001 f8c1 	bl	80098d0 <ucdr_deserialize_double>
 800874e:	f104 0110 	add.w	r1, r4, #16
 8008752:	4628      	mov	r0, r5
 8008754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008758:	f001 b8ba 	b.w	80098d0 <ucdr_deserialize_double>
 800875c:	4608      	mov	r0, r1
 800875e:	bd38      	pop	{r3, r4, r5, pc}

08008760 <_Vector3__cdr_serialize>:
 8008760:	b198      	cbz	r0, 800878a <_Vector3__cdr_serialize+0x2a>
 8008762:	b538      	push	{r3, r4, r5, lr}
 8008764:	ed90 0b00 	vldr	d0, [r0]
 8008768:	460d      	mov	r5, r1
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	f000 ffdf 	bl	8009730 <ucdr_serialize_double>
 8008772:	ed94 0b02 	vldr	d0, [r4, #8]
 8008776:	4628      	mov	r0, r5
 8008778:	f000 ffda 	bl	8009730 <ucdr_serialize_double>
 800877c:	ed94 0b04 	vldr	d0, [r4, #16]
 8008780:	4628      	mov	r0, r5
 8008782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008786:	f000 bfd3 	b.w	8009730 <ucdr_serialize_double>
 800878a:	4770      	bx	lr

0800878c <_Vector3__get_serialized_size>:
 800878c:	b198      	cbz	r0, 80087b6 <_Vector3__get_serialized_size+0x2a>
 800878e:	b510      	push	{r4, lr}
 8008790:	2108      	movs	r1, #8
 8008792:	2000      	movs	r0, #0
 8008794:	f001 f9ba 	bl	8009b0c <ucdr_alignment>
 8008798:	f100 0408 	add.w	r4, r0, #8
 800879c:	2108      	movs	r1, #8
 800879e:	4620      	mov	r0, r4
 80087a0:	f001 f9b4 	bl	8009b0c <ucdr_alignment>
 80087a4:	3008      	adds	r0, #8
 80087a6:	4404      	add	r4, r0
 80087a8:	2108      	movs	r1, #8
 80087aa:	4620      	mov	r0, r4
 80087ac:	f001 f9ae 	bl	8009b0c <ucdr_alignment>
 80087b0:	3008      	adds	r0, #8
 80087b2:	4420      	add	r0, r4
 80087b4:	bd10      	pop	{r4, pc}
 80087b6:	4770      	bx	lr

080087b8 <_Vector3__max_serialized_size>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	2108      	movs	r1, #8
 80087bc:	2000      	movs	r0, #0
 80087be:	f001 f9a5 	bl	8009b0c <ucdr_alignment>
 80087c2:	f100 0508 	add.w	r5, r0, #8
 80087c6:	2108      	movs	r1, #8
 80087c8:	4628      	mov	r0, r5
 80087ca:	f001 f99f 	bl	8009b0c <ucdr_alignment>
 80087ce:	f100 0408 	add.w	r4, r0, #8
 80087d2:	442c      	add	r4, r5
 80087d4:	2108      	movs	r1, #8
 80087d6:	4620      	mov	r0, r4
 80087d8:	f001 f998 	bl	8009b0c <ucdr_alignment>
 80087dc:	3008      	adds	r0, #8
 80087de:	4420      	add	r0, r4
 80087e0:	bd38      	pop	{r3, r4, r5, pc}
 80087e2:	bf00      	nop

080087e4 <max_serialized_size_geometry_msgs__msg__Vector3>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	2301      	movs	r3, #1
 80087e8:	460c      	mov	r4, r1
 80087ea:	7003      	strb	r3, [r0, #0]
 80087ec:	2108      	movs	r1, #8
 80087ee:	4620      	mov	r0, r4
 80087f0:	f001 f98c 	bl	8009b0c <ucdr_alignment>
 80087f4:	f104 0508 	add.w	r5, r4, #8
 80087f8:	1946      	adds	r6, r0, r5
 80087fa:	2108      	movs	r1, #8
 80087fc:	4630      	mov	r0, r6
 80087fe:	f001 f985 	bl	8009b0c <ucdr_alignment>
 8008802:	f100 0508 	add.w	r5, r0, #8
 8008806:	4435      	add	r5, r6
 8008808:	2108      	movs	r1, #8
 800880a:	4628      	mov	r0, r5
 800880c:	f001 f97e 	bl	8009b0c <ucdr_alignment>
 8008810:	f1c4 0408 	rsb	r4, r4, #8
 8008814:	4420      	add	r0, r4
 8008816:	4428      	add	r0, r5
 8008818:	bd70      	pop	{r4, r5, r6, pc}
 800881a:	bf00      	nop

0800881c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800881c:	4800      	ldr	r0, [pc, #0]	; (8008820 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800881e:	4770      	bx	lr
 8008820:	20000194 	.word	0x20000194

08008824 <ucdr_serialize_bool>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	460d      	mov	r5, r1
 8008828:	2101      	movs	r1, #1
 800882a:	4604      	mov	r4, r0
 800882c:	f001 f922 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008830:	b148      	cbz	r0, 8008846 <ucdr_serialize_bool+0x22>
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	701d      	strb	r5, [r3, #0]
 8008836:	68a2      	ldr	r2, [r4, #8]
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	2101      	movs	r1, #1
 800883c:	440a      	add	r2, r1
 800883e:	440b      	add	r3, r1
 8008840:	60a2      	str	r2, [r4, #8]
 8008842:	6123      	str	r3, [r4, #16]
 8008844:	7561      	strb	r1, [r4, #21]
 8008846:	7da0      	ldrb	r0, [r4, #22]
 8008848:	f080 0001 	eor.w	r0, r0, #1
 800884c:	bd38      	pop	{r3, r4, r5, pc}
 800884e:	bf00      	nop

08008850 <ucdr_deserialize_bool>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	460d      	mov	r5, r1
 8008854:	2101      	movs	r1, #1
 8008856:	4604      	mov	r4, r0
 8008858:	f001 f90c 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 800885c:	b160      	cbz	r0, 8008878 <ucdr_deserialize_bool+0x28>
 800885e:	68a2      	ldr	r2, [r4, #8]
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008866:	3900      	subs	r1, #0
 8008868:	bf18      	it	ne
 800886a:	2101      	movne	r1, #1
 800886c:	7029      	strb	r1, [r5, #0]
 800886e:	3301      	adds	r3, #1
 8008870:	2101      	movs	r1, #1
 8008872:	60a2      	str	r2, [r4, #8]
 8008874:	6123      	str	r3, [r4, #16]
 8008876:	7561      	strb	r1, [r4, #21]
 8008878:	7da0      	ldrb	r0, [r4, #22]
 800887a:	f080 0001 	eor.w	r0, r0, #1
 800887e:	bd38      	pop	{r3, r4, r5, pc}

08008880 <ucdr_serialize_uint8_t>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	460d      	mov	r5, r1
 8008884:	2101      	movs	r1, #1
 8008886:	4604      	mov	r4, r0
 8008888:	f001 f8f4 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 800888c:	b148      	cbz	r0, 80088a2 <ucdr_serialize_uint8_t+0x22>
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	701d      	strb	r5, [r3, #0]
 8008892:	68a2      	ldr	r2, [r4, #8]
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	2101      	movs	r1, #1
 8008898:	440a      	add	r2, r1
 800889a:	440b      	add	r3, r1
 800889c:	60a2      	str	r2, [r4, #8]
 800889e:	6123      	str	r3, [r4, #16]
 80088a0:	7561      	strb	r1, [r4, #21]
 80088a2:	7da0      	ldrb	r0, [r4, #22]
 80088a4:	f080 0001 	eor.w	r0, r0, #1
 80088a8:	bd38      	pop	{r3, r4, r5, pc}
 80088aa:	bf00      	nop

080088ac <ucdr_deserialize_uint8_t>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	460d      	mov	r5, r1
 80088b0:	2101      	movs	r1, #1
 80088b2:	4604      	mov	r4, r0
 80088b4:	f001 f8de 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 80088b8:	b150      	cbz	r0, 80088d0 <ucdr_deserialize_uint8_t+0x24>
 80088ba:	68a3      	ldr	r3, [r4, #8]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	702b      	strb	r3, [r5, #0]
 80088c0:	68a2      	ldr	r2, [r4, #8]
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	2101      	movs	r1, #1
 80088c6:	440a      	add	r2, r1
 80088c8:	440b      	add	r3, r1
 80088ca:	60a2      	str	r2, [r4, #8]
 80088cc:	6123      	str	r3, [r4, #16]
 80088ce:	7561      	strb	r1, [r4, #21]
 80088d0:	7da0      	ldrb	r0, [r4, #22]
 80088d2:	f080 0001 	eor.w	r0, r0, #1
 80088d6:	bd38      	pop	{r3, r4, r5, pc}

080088d8 <ucdr_serialize_uint16_t>:
 80088d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	460b      	mov	r3, r1
 80088e0:	2102      	movs	r1, #2
 80088e2:	4604      	mov	r4, r0
 80088e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80088e8:	f001 f918 	bl	8009b1c <ucdr_buffer_alignment>
 80088ec:	4601      	mov	r1, r0
 80088ee:	4620      	mov	r0, r4
 80088f0:	7d67      	ldrb	r7, [r4, #21]
 80088f2:	f001 f957 	bl	8009ba4 <ucdr_advance_buffer>
 80088f6:	2102      	movs	r1, #2
 80088f8:	4620      	mov	r0, r4
 80088fa:	f001 f8af 	bl	8009a5c <ucdr_check_buffer_available_for>
 80088fe:	bb78      	cbnz	r0, 8008960 <ucdr_serialize_uint16_t+0x88>
 8008900:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008904:	42ab      	cmp	r3, r5
 8008906:	d926      	bls.n	8008956 <ucdr_serialize_uint16_t+0x7e>
 8008908:	1b5e      	subs	r6, r3, r5
 800890a:	60a3      	str	r3, [r4, #8]
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	f1c6 0802 	rsb	r8, r6, #2
 8008912:	4433      	add	r3, r6
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	4641      	mov	r1, r8
 8008918:	4620      	mov	r0, r4
 800891a:	f001 f8ab 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 800891e:	2800      	cmp	r0, #0
 8008920:	d03b      	beq.n	800899a <ucdr_serialize_uint16_t+0xc2>
 8008922:	7d23      	ldrb	r3, [r4, #20]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d04a      	beq.n	80089be <ucdr_serialize_uint16_t+0xe6>
 8008928:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800892c:	702b      	strb	r3, [r5, #0]
 800892e:	2e00      	cmp	r6, #0
 8008930:	d040      	beq.n	80089b4 <ucdr_serialize_uint16_t+0xdc>
 8008932:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008936:	706b      	strb	r3, [r5, #1]
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	68a2      	ldr	r2, [r4, #8]
 800893c:	7da0      	ldrb	r0, [r4, #22]
 800893e:	3302      	adds	r3, #2
 8008940:	1b9e      	subs	r6, r3, r6
 8008942:	4442      	add	r2, r8
 8008944:	2302      	movs	r3, #2
 8008946:	f080 0001 	eor.w	r0, r0, #1
 800894a:	60a2      	str	r2, [r4, #8]
 800894c:	6126      	str	r6, [r4, #16]
 800894e:	7563      	strb	r3, [r4, #21]
 8008950:	b002      	add	sp, #8
 8008952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008956:	2102      	movs	r1, #2
 8008958:	4620      	mov	r0, r4
 800895a:	f001 f88b 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 800895e:	b190      	cbz	r0, 8008986 <ucdr_serialize_uint16_t+0xae>
 8008960:	7d23      	ldrb	r3, [r4, #20]
 8008962:	2b01      	cmp	r3, #1
 8008964:	68a3      	ldr	r3, [r4, #8]
 8008966:	d014      	beq.n	8008992 <ucdr_serialize_uint16_t+0xba>
 8008968:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800896c:	701a      	strb	r2, [r3, #0]
 800896e:	68a3      	ldr	r3, [r4, #8]
 8008970:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008974:	705a      	strb	r2, [r3, #1]
 8008976:	68a2      	ldr	r2, [r4, #8]
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	3202      	adds	r2, #2
 800897c:	3302      	adds	r3, #2
 800897e:	2102      	movs	r1, #2
 8008980:	60a2      	str	r2, [r4, #8]
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	7561      	strb	r1, [r4, #21]
 8008986:	7da0      	ldrb	r0, [r4, #22]
 8008988:	f080 0001 	eor.w	r0, r0, #1
 800898c:	b002      	add	sp, #8
 800898e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008992:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008996:	801a      	strh	r2, [r3, #0]
 8008998:	e7ed      	b.n	8008976 <ucdr_serialize_uint16_t+0x9e>
 800899a:	68a2      	ldr	r2, [r4, #8]
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	7da0      	ldrb	r0, [r4, #22]
 80089a0:	7567      	strb	r7, [r4, #21]
 80089a2:	1b92      	subs	r2, r2, r6
 80089a4:	1b9b      	subs	r3, r3, r6
 80089a6:	f080 0001 	eor.w	r0, r0, #1
 80089aa:	60a2      	str	r2, [r4, #8]
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	b002      	add	sp, #8
 80089b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b4:	68a3      	ldr	r3, [r4, #8]
 80089b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	e7bc      	b.n	8008938 <ucdr_serialize_uint16_t+0x60>
 80089be:	4628      	mov	r0, r5
 80089c0:	f10d 0506 	add.w	r5, sp, #6
 80089c4:	4629      	mov	r1, r5
 80089c6:	4632      	mov	r2, r6
 80089c8:	f00c fbf7 	bl	80151ba <memcpy>
 80089cc:	68a0      	ldr	r0, [r4, #8]
 80089ce:	4642      	mov	r2, r8
 80089d0:	19a9      	adds	r1, r5, r6
 80089d2:	f00c fbf2 	bl	80151ba <memcpy>
 80089d6:	e7af      	b.n	8008938 <ucdr_serialize_uint16_t+0x60>

080089d8 <ucdr_serialize_endian_uint16_t>:
 80089d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089dc:	b083      	sub	sp, #12
 80089de:	460d      	mov	r5, r1
 80089e0:	2102      	movs	r1, #2
 80089e2:	4604      	mov	r4, r0
 80089e4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80089e8:	f001 f898 	bl	8009b1c <ucdr_buffer_alignment>
 80089ec:	4601      	mov	r1, r0
 80089ee:	4620      	mov	r0, r4
 80089f0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80089f4:	f001 f8d6 	bl	8009ba4 <ucdr_advance_buffer>
 80089f8:	2102      	movs	r1, #2
 80089fa:	4620      	mov	r0, r4
 80089fc:	f001 f82e 	bl	8009a5c <ucdr_check_buffer_available_for>
 8008a00:	bb70      	cbnz	r0, 8008a60 <ucdr_serialize_endian_uint16_t+0x88>
 8008a02:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008a06:	42be      	cmp	r6, r7
 8008a08:	d925      	bls.n	8008a56 <ucdr_serialize_endian_uint16_t+0x7e>
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	60a6      	str	r6, [r4, #8]
 8008a0e:	1bf6      	subs	r6, r6, r7
 8008a10:	4433      	add	r3, r6
 8008a12:	f1c6 0902 	rsb	r9, r6, #2
 8008a16:	6123      	str	r3, [r4, #16]
 8008a18:	4649      	mov	r1, r9
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f001 f82a 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d039      	beq.n	8008a98 <ucdr_serialize_endian_uint16_t+0xc0>
 8008a24:	2d01      	cmp	r5, #1
 8008a26:	d04a      	beq.n	8008abe <ucdr_serialize_endian_uint16_t+0xe6>
 8008a28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a2c:	703b      	strb	r3, [r7, #0]
 8008a2e:	2e00      	cmp	r6, #0
 8008a30:	d040      	beq.n	8008ab4 <ucdr_serialize_endian_uint16_t+0xdc>
 8008a32:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a36:	707b      	strb	r3, [r7, #1]
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	68a2      	ldr	r2, [r4, #8]
 8008a3c:	7da0      	ldrb	r0, [r4, #22]
 8008a3e:	3302      	adds	r3, #2
 8008a40:	444a      	add	r2, r9
 8008a42:	1b9b      	subs	r3, r3, r6
 8008a44:	2102      	movs	r1, #2
 8008a46:	f080 0001 	eor.w	r0, r0, #1
 8008a4a:	60a2      	str	r2, [r4, #8]
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	7561      	strb	r1, [r4, #21]
 8008a50:	b003      	add	sp, #12
 8008a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a56:	2102      	movs	r1, #2
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f001 f80b 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008a5e:	b188      	cbz	r0, 8008a84 <ucdr_serialize_endian_uint16_t+0xac>
 8008a60:	2d01      	cmp	r5, #1
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	d014      	beq.n	8008a90 <ucdr_serialize_endian_uint16_t+0xb8>
 8008a66:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008a6a:	701a      	strb	r2, [r3, #0]
 8008a6c:	68a3      	ldr	r3, [r4, #8]
 8008a6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a72:	705a      	strb	r2, [r3, #1]
 8008a74:	68a2      	ldr	r2, [r4, #8]
 8008a76:	6923      	ldr	r3, [r4, #16]
 8008a78:	3202      	adds	r2, #2
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	2102      	movs	r1, #2
 8008a7e:	60a2      	str	r2, [r4, #8]
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	7561      	strb	r1, [r4, #21]
 8008a84:	7da0      	ldrb	r0, [r4, #22]
 8008a86:	f080 0001 	eor.w	r0, r0, #1
 8008a8a:	b003      	add	sp, #12
 8008a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008a94:	801a      	strh	r2, [r3, #0]
 8008a96:	e7ed      	b.n	8008a74 <ucdr_serialize_endian_uint16_t+0x9c>
 8008a98:	68a2      	ldr	r2, [r4, #8]
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	7da0      	ldrb	r0, [r4, #22]
 8008a9e:	f884 8015 	strb.w	r8, [r4, #21]
 8008aa2:	1b92      	subs	r2, r2, r6
 8008aa4:	1b9b      	subs	r3, r3, r6
 8008aa6:	f080 0001 	eor.w	r0, r0, #1
 8008aaa:	60a2      	str	r2, [r4, #8]
 8008aac:	6123      	str	r3, [r4, #16]
 8008aae:	b003      	add	sp, #12
 8008ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ab4:	68a3      	ldr	r3, [r4, #8]
 8008ab6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e7bc      	b.n	8008a38 <ucdr_serialize_endian_uint16_t+0x60>
 8008abe:	f10d 0506 	add.w	r5, sp, #6
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f00c fb77 	bl	80151ba <memcpy>
 8008acc:	68a0      	ldr	r0, [r4, #8]
 8008ace:	464a      	mov	r2, r9
 8008ad0:	19a9      	adds	r1, r5, r6
 8008ad2:	f00c fb72 	bl	80151ba <memcpy>
 8008ad6:	e7af      	b.n	8008a38 <ucdr_serialize_endian_uint16_t+0x60>

08008ad8 <ucdr_deserialize_uint16_t>:
 8008ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008adc:	460d      	mov	r5, r1
 8008ade:	2102      	movs	r1, #2
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	f001 f81b 	bl	8009b1c <ucdr_buffer_alignment>
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008aee:	f001 f859 	bl	8009ba4 <ucdr_advance_buffer>
 8008af2:	2102      	movs	r1, #2
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 ffb1 	bl	8009a5c <ucdr_check_buffer_available_for>
 8008afa:	bb60      	cbnz	r0, 8008b56 <ucdr_deserialize_uint16_t+0x7e>
 8008afc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008b00:	42be      	cmp	r6, r7
 8008b02:	d923      	bls.n	8008b4c <ucdr_deserialize_uint16_t+0x74>
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	60a6      	str	r6, [r4, #8]
 8008b08:	1bf6      	subs	r6, r6, r7
 8008b0a:	4433      	add	r3, r6
 8008b0c:	f1c6 0902 	rsb	r9, r6, #2
 8008b10:	6123      	str	r3, [r4, #16]
 8008b12:	4649      	mov	r1, r9
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 ffad 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d034      	beq.n	8008b88 <ucdr_deserialize_uint16_t+0xb0>
 8008b1e:	7d23      	ldrb	r3, [r4, #20]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d042      	beq.n	8008baa <ucdr_deserialize_uint16_t+0xd2>
 8008b24:	787b      	ldrb	r3, [r7, #1]
 8008b26:	702b      	strb	r3, [r5, #0]
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	d03a      	beq.n	8008ba2 <ucdr_deserialize_uint16_t+0xca>
 8008b2c:	783b      	ldrb	r3, [r7, #0]
 8008b2e:	706b      	strb	r3, [r5, #1]
 8008b30:	6923      	ldr	r3, [r4, #16]
 8008b32:	68a2      	ldr	r2, [r4, #8]
 8008b34:	7da0      	ldrb	r0, [r4, #22]
 8008b36:	2102      	movs	r1, #2
 8008b38:	3302      	adds	r3, #2
 8008b3a:	444a      	add	r2, r9
 8008b3c:	1b9b      	subs	r3, r3, r6
 8008b3e:	7561      	strb	r1, [r4, #21]
 8008b40:	60a2      	str	r2, [r4, #8]
 8008b42:	6123      	str	r3, [r4, #16]
 8008b44:	f080 0001 	eor.w	r0, r0, #1
 8008b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b4c:	2102      	movs	r1, #2
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 ff90 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008b54:	b180      	cbz	r0, 8008b78 <ucdr_deserialize_uint16_t+0xa0>
 8008b56:	7d23      	ldrb	r3, [r4, #20]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	68a3      	ldr	r3, [r4, #8]
 8008b5c:	d011      	beq.n	8008b82 <ucdr_deserialize_uint16_t+0xaa>
 8008b5e:	785b      	ldrb	r3, [r3, #1]
 8008b60:	702b      	strb	r3, [r5, #0]
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	706b      	strb	r3, [r5, #1]
 8008b68:	68a2      	ldr	r2, [r4, #8]
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	3202      	adds	r2, #2
 8008b6e:	3302      	adds	r3, #2
 8008b70:	2102      	movs	r1, #2
 8008b72:	60a2      	str	r2, [r4, #8]
 8008b74:	6123      	str	r3, [r4, #16]
 8008b76:	7561      	strb	r1, [r4, #21]
 8008b78:	7da0      	ldrb	r0, [r4, #22]
 8008b7a:	f080 0001 	eor.w	r0, r0, #1
 8008b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	802b      	strh	r3, [r5, #0]
 8008b86:	e7ef      	b.n	8008b68 <ucdr_deserialize_uint16_t+0x90>
 8008b88:	68a2      	ldr	r2, [r4, #8]
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	7da0      	ldrb	r0, [r4, #22]
 8008b8e:	f884 8015 	strb.w	r8, [r4, #21]
 8008b92:	1b92      	subs	r2, r2, r6
 8008b94:	1b9b      	subs	r3, r3, r6
 8008b96:	60a2      	str	r2, [r4, #8]
 8008b98:	6123      	str	r3, [r4, #16]
 8008b9a:	f080 0001 	eor.w	r0, r0, #1
 8008b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	706b      	strb	r3, [r5, #1]
 8008ba8:	e7c2      	b.n	8008b30 <ucdr_deserialize_uint16_t+0x58>
 8008baa:	4639      	mov	r1, r7
 8008bac:	4632      	mov	r2, r6
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f00c fb03 	bl	80151ba <memcpy>
 8008bb4:	68a1      	ldr	r1, [r4, #8]
 8008bb6:	464a      	mov	r2, r9
 8008bb8:	19a8      	adds	r0, r5, r6
 8008bba:	f00c fafe 	bl	80151ba <memcpy>
 8008bbe:	e7b7      	b.n	8008b30 <ucdr_deserialize_uint16_t+0x58>

08008bc0 <ucdr_deserialize_endian_uint16_t>:
 8008bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	460e      	mov	r6, r1
 8008bc6:	2102      	movs	r1, #2
 8008bc8:	4604      	mov	r4, r0
 8008bca:	4615      	mov	r5, r2
 8008bcc:	f000 ffa6 	bl	8009b1c <ucdr_buffer_alignment>
 8008bd0:	4601      	mov	r1, r0
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008bd8:	f000 ffe4 	bl	8009ba4 <ucdr_advance_buffer>
 8008bdc:	2102      	movs	r1, #2
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 ff3c 	bl	8009a5c <ucdr_check_buffer_available_for>
 8008be4:	bb70      	cbnz	r0, 8008c44 <ucdr_deserialize_endian_uint16_t+0x84>
 8008be6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008bea:	4547      	cmp	r7, r8
 8008bec:	d925      	bls.n	8008c3a <ucdr_deserialize_endian_uint16_t+0x7a>
 8008bee:	6923      	ldr	r3, [r4, #16]
 8008bf0:	60a7      	str	r7, [r4, #8]
 8008bf2:	eba7 0708 	sub.w	r7, r7, r8
 8008bf6:	443b      	add	r3, r7
 8008bf8:	f1c7 0a02 	rsb	sl, r7, #2
 8008bfc:	6123      	str	r3, [r4, #16]
 8008bfe:	4651      	mov	r1, sl
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 ff37 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d034      	beq.n	8008c74 <ucdr_deserialize_endian_uint16_t+0xb4>
 8008c0a:	2e01      	cmp	r6, #1
 8008c0c:	d043      	beq.n	8008c96 <ucdr_deserialize_endian_uint16_t+0xd6>
 8008c0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008c12:	702b      	strb	r3, [r5, #0]
 8008c14:	2f00      	cmp	r7, #0
 8008c16:	d03a      	beq.n	8008c8e <ucdr_deserialize_endian_uint16_t+0xce>
 8008c18:	f898 3000 	ldrb.w	r3, [r8]
 8008c1c:	706b      	strb	r3, [r5, #1]
 8008c1e:	6923      	ldr	r3, [r4, #16]
 8008c20:	68a2      	ldr	r2, [r4, #8]
 8008c22:	7da0      	ldrb	r0, [r4, #22]
 8008c24:	2102      	movs	r1, #2
 8008c26:	3302      	adds	r3, #2
 8008c28:	4452      	add	r2, sl
 8008c2a:	1bdb      	subs	r3, r3, r7
 8008c2c:	7561      	strb	r1, [r4, #21]
 8008c2e:	60a2      	str	r2, [r4, #8]
 8008c30:	6123      	str	r3, [r4, #16]
 8008c32:	f080 0001 	eor.w	r0, r0, #1
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	2102      	movs	r1, #2
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 ff19 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008c42:	b178      	cbz	r0, 8008c64 <ucdr_deserialize_endian_uint16_t+0xa4>
 8008c44:	2e01      	cmp	r6, #1
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	d011      	beq.n	8008c6e <ucdr_deserialize_endian_uint16_t+0xae>
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	702b      	strb	r3, [r5, #0]
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	706b      	strb	r3, [r5, #1]
 8008c54:	68a2      	ldr	r2, [r4, #8]
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	3202      	adds	r2, #2
 8008c5a:	3302      	adds	r3, #2
 8008c5c:	2102      	movs	r1, #2
 8008c5e:	60a2      	str	r2, [r4, #8]
 8008c60:	6123      	str	r3, [r4, #16]
 8008c62:	7561      	strb	r1, [r4, #21]
 8008c64:	7da0      	ldrb	r0, [r4, #22]
 8008c66:	f080 0001 	eor.w	r0, r0, #1
 8008c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	802b      	strh	r3, [r5, #0]
 8008c72:	e7ef      	b.n	8008c54 <ucdr_deserialize_endian_uint16_t+0x94>
 8008c74:	68a2      	ldr	r2, [r4, #8]
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	7da0      	ldrb	r0, [r4, #22]
 8008c7a:	f884 9015 	strb.w	r9, [r4, #21]
 8008c7e:	1bd2      	subs	r2, r2, r7
 8008c80:	1bdb      	subs	r3, r3, r7
 8008c82:	60a2      	str	r2, [r4, #8]
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	f080 0001 	eor.w	r0, r0, #1
 8008c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	706b      	strb	r3, [r5, #1]
 8008c94:	e7c3      	b.n	8008c1e <ucdr_deserialize_endian_uint16_t+0x5e>
 8008c96:	4641      	mov	r1, r8
 8008c98:	463a      	mov	r2, r7
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f00c fa8d 	bl	80151ba <memcpy>
 8008ca0:	68a1      	ldr	r1, [r4, #8]
 8008ca2:	4652      	mov	r2, sl
 8008ca4:	19e8      	adds	r0, r5, r7
 8008ca6:	f00c fa88 	bl	80151ba <memcpy>
 8008caa:	e7b8      	b.n	8008c1e <ucdr_deserialize_endian_uint16_t+0x5e>

08008cac <ucdr_serialize_uint32_t>:
 8008cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	9101      	str	r1, [sp, #4]
 8008cb6:	2104      	movs	r1, #4
 8008cb8:	f000 ff30 	bl	8009b1c <ucdr_buffer_alignment>
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	7d67      	ldrb	r7, [r4, #21]
 8008cc2:	f000 ff6f 	bl	8009ba4 <ucdr_advance_buffer>
 8008cc6:	2104      	movs	r1, #4
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 fec7 	bl	8009a5c <ucdr_check_buffer_available_for>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d139      	bne.n	8008d46 <ucdr_serialize_uint32_t+0x9a>
 8008cd2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008cd6:	42ab      	cmp	r3, r5
 8008cd8:	d930      	bls.n	8008d3c <ucdr_serialize_uint32_t+0x90>
 8008cda:	1b5e      	subs	r6, r3, r5
 8008cdc:	60a3      	str	r3, [r4, #8]
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	f1c6 0804 	rsb	r8, r6, #4
 8008ce4:	4433      	add	r3, r6
 8008ce6:	6123      	str	r3, [r4, #16]
 8008ce8:	4641      	mov	r1, r8
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 fec2 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d04c      	beq.n	8008d8e <ucdr_serialize_uint32_t+0xe2>
 8008cf4:	7d23      	ldrb	r3, [r4, #20]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d063      	beq.n	8008dc2 <ucdr_serialize_uint32_t+0x116>
 8008cfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008cfe:	702b      	strb	r3, [r5, #0]
 8008d00:	2e00      	cmp	r6, #0
 8008d02:	d051      	beq.n	8008da8 <ucdr_serialize_uint32_t+0xfc>
 8008d04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008d08:	706b      	strb	r3, [r5, #1]
 8008d0a:	2e01      	cmp	r6, #1
 8008d0c:	d050      	beq.n	8008db0 <ucdr_serialize_uint32_t+0x104>
 8008d0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008d12:	70ab      	strb	r3, [r5, #2]
 8008d14:	2e02      	cmp	r6, #2
 8008d16:	d04f      	beq.n	8008db8 <ucdr_serialize_uint32_t+0x10c>
 8008d18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008d1c:	70eb      	strb	r3, [r5, #3]
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	68a2      	ldr	r2, [r4, #8]
 8008d22:	7da0      	ldrb	r0, [r4, #22]
 8008d24:	3304      	adds	r3, #4
 8008d26:	1b9e      	subs	r6, r3, r6
 8008d28:	4442      	add	r2, r8
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	f080 0001 	eor.w	r0, r0, #1
 8008d30:	60a2      	str	r2, [r4, #8]
 8008d32:	6126      	str	r6, [r4, #16]
 8008d34:	7563      	strb	r3, [r4, #21]
 8008d36:	b002      	add	sp, #8
 8008d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3c:	2104      	movs	r1, #4
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 fe98 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008d44:	b1d0      	cbz	r0, 8008d7c <ucdr_serialize_uint32_t+0xd0>
 8008d46:	7d23      	ldrb	r3, [r4, #20]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	d01c      	beq.n	8008d88 <ucdr_serialize_uint32_t+0xdc>
 8008d4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008d52:	701a      	strb	r2, [r3, #0]
 8008d54:	68a3      	ldr	r3, [r4, #8]
 8008d56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008d5a:	705a      	strb	r2, [r3, #1]
 8008d5c:	68a3      	ldr	r3, [r4, #8]
 8008d5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d62:	709a      	strb	r2, [r3, #2]
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d6a:	70da      	strb	r2, [r3, #3]
 8008d6c:	68a2      	ldr	r2, [r4, #8]
 8008d6e:	6923      	ldr	r3, [r4, #16]
 8008d70:	3204      	adds	r2, #4
 8008d72:	3304      	adds	r3, #4
 8008d74:	2104      	movs	r1, #4
 8008d76:	60a2      	str	r2, [r4, #8]
 8008d78:	6123      	str	r3, [r4, #16]
 8008d7a:	7561      	strb	r1, [r4, #21]
 8008d7c:	7da0      	ldrb	r0, [r4, #22]
 8008d7e:	f080 0001 	eor.w	r0, r0, #1
 8008d82:	b002      	add	sp, #8
 8008d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d88:	9a01      	ldr	r2, [sp, #4]
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	e7ee      	b.n	8008d6c <ucdr_serialize_uint32_t+0xc0>
 8008d8e:	68a2      	ldr	r2, [r4, #8]
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	7da0      	ldrb	r0, [r4, #22]
 8008d94:	7567      	strb	r7, [r4, #21]
 8008d96:	1b92      	subs	r2, r2, r6
 8008d98:	1b9b      	subs	r3, r3, r6
 8008d9a:	f080 0001 	eor.w	r0, r0, #1
 8008d9e:	60a2      	str	r2, [r4, #8]
 8008da0:	6123      	str	r3, [r4, #16]
 8008da2:	b002      	add	sp, #8
 8008da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da8:	68a3      	ldr	r3, [r4, #8]
 8008daa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	68a3      	ldr	r3, [r4, #8]
 8008db2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	68a3      	ldr	r3, [r4, #8]
 8008dba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008dbe:	701a      	strb	r2, [r3, #0]
 8008dc0:	e7ad      	b.n	8008d1e <ucdr_serialize_uint32_t+0x72>
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	ad01      	add	r5, sp, #4
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	4632      	mov	r2, r6
 8008dca:	f00c f9f6 	bl	80151ba <memcpy>
 8008dce:	68a0      	ldr	r0, [r4, #8]
 8008dd0:	4642      	mov	r2, r8
 8008dd2:	19a9      	adds	r1, r5, r6
 8008dd4:	f00c f9f1 	bl	80151ba <memcpy>
 8008dd8:	e7a1      	b.n	8008d1e <ucdr_serialize_uint32_t+0x72>
 8008dda:	bf00      	nop

08008ddc <ucdr_serialize_endian_uint32_t>:
 8008ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de0:	b083      	sub	sp, #12
 8008de2:	460d      	mov	r5, r1
 8008de4:	2104      	movs	r1, #4
 8008de6:	4604      	mov	r4, r0
 8008de8:	9201      	str	r2, [sp, #4]
 8008dea:	f000 fe97 	bl	8009b1c <ucdr_buffer_alignment>
 8008dee:	4601      	mov	r1, r0
 8008df0:	4620      	mov	r0, r4
 8008df2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008df6:	f000 fed5 	bl	8009ba4 <ucdr_advance_buffer>
 8008dfa:	2104      	movs	r1, #4
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fe2d 	bl	8009a5c <ucdr_check_buffer_available_for>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d138      	bne.n	8008e78 <ucdr_serialize_endian_uint32_t+0x9c>
 8008e06:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008e0a:	42b7      	cmp	r7, r6
 8008e0c:	d92f      	bls.n	8008e6e <ucdr_serialize_endian_uint32_t+0x92>
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	60a7      	str	r7, [r4, #8]
 8008e12:	1bbf      	subs	r7, r7, r6
 8008e14:	443b      	add	r3, r7
 8008e16:	f1c7 0904 	rsb	r9, r7, #4
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 fe28 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d04a      	beq.n	8008ebe <ucdr_serialize_endian_uint32_t+0xe2>
 8008e28:	2d01      	cmp	r5, #1
 8008e2a:	d063      	beq.n	8008ef4 <ucdr_serialize_endian_uint32_t+0x118>
 8008e2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e30:	7033      	strb	r3, [r6, #0]
 8008e32:	2f00      	cmp	r7, #0
 8008e34:	d051      	beq.n	8008eda <ucdr_serialize_endian_uint32_t+0xfe>
 8008e36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008e3a:	7073      	strb	r3, [r6, #1]
 8008e3c:	2f01      	cmp	r7, #1
 8008e3e:	d050      	beq.n	8008ee2 <ucdr_serialize_endian_uint32_t+0x106>
 8008e40:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008e44:	70b3      	strb	r3, [r6, #2]
 8008e46:	2f02      	cmp	r7, #2
 8008e48:	d04f      	beq.n	8008eea <ucdr_serialize_endian_uint32_t+0x10e>
 8008e4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008e4e:	70f3      	strb	r3, [r6, #3]
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	68a2      	ldr	r2, [r4, #8]
 8008e54:	7da0      	ldrb	r0, [r4, #22]
 8008e56:	3304      	adds	r3, #4
 8008e58:	444a      	add	r2, r9
 8008e5a:	1bdb      	subs	r3, r3, r7
 8008e5c:	2104      	movs	r1, #4
 8008e5e:	f080 0001 	eor.w	r0, r0, #1
 8008e62:	60a2      	str	r2, [r4, #8]
 8008e64:	6123      	str	r3, [r4, #16]
 8008e66:	7561      	strb	r1, [r4, #21]
 8008e68:	b003      	add	sp, #12
 8008e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e6e:	2104      	movs	r1, #4
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 fdff 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008e76:	b1c8      	cbz	r0, 8008eac <ucdr_serialize_endian_uint32_t+0xd0>
 8008e78:	2d01      	cmp	r5, #1
 8008e7a:	68a3      	ldr	r3, [r4, #8]
 8008e7c:	d01c      	beq.n	8008eb8 <ucdr_serialize_endian_uint32_t+0xdc>
 8008e7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	68a3      	ldr	r3, [r4, #8]
 8008e86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e8a:	705a      	strb	r2, [r3, #1]
 8008e8c:	68a3      	ldr	r3, [r4, #8]
 8008e8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008e92:	709a      	strb	r2, [r3, #2]
 8008e94:	68a3      	ldr	r3, [r4, #8]
 8008e96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e9a:	70da      	strb	r2, [r3, #3]
 8008e9c:	68a2      	ldr	r2, [r4, #8]
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	3204      	adds	r2, #4
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	2104      	movs	r1, #4
 8008ea6:	60a2      	str	r2, [r4, #8]
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	7561      	strb	r1, [r4, #21]
 8008eac:	7da0      	ldrb	r0, [r4, #22]
 8008eae:	f080 0001 	eor.w	r0, r0, #1
 8008eb2:	b003      	add	sp, #12
 8008eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eb8:	9a01      	ldr	r2, [sp, #4]
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	e7ee      	b.n	8008e9c <ucdr_serialize_endian_uint32_t+0xc0>
 8008ebe:	68a2      	ldr	r2, [r4, #8]
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	7da0      	ldrb	r0, [r4, #22]
 8008ec4:	f884 8015 	strb.w	r8, [r4, #21]
 8008ec8:	1bd2      	subs	r2, r2, r7
 8008eca:	1bdb      	subs	r3, r3, r7
 8008ecc:	f080 0001 	eor.w	r0, r0, #1
 8008ed0:	60a2      	str	r2, [r4, #8]
 8008ed2:	6123      	str	r3, [r4, #16]
 8008ed4:	b003      	add	sp, #12
 8008ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e7ad      	b.n	8008e50 <ucdr_serialize_endian_uint32_t+0x74>
 8008ef4:	ad01      	add	r5, sp, #4
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	463a      	mov	r2, r7
 8008efa:	4630      	mov	r0, r6
 8008efc:	f00c f95d 	bl	80151ba <memcpy>
 8008f00:	68a0      	ldr	r0, [r4, #8]
 8008f02:	464a      	mov	r2, r9
 8008f04:	19e9      	adds	r1, r5, r7
 8008f06:	f00c f958 	bl	80151ba <memcpy>
 8008f0a:	e7a1      	b.n	8008e50 <ucdr_serialize_endian_uint32_t+0x74>

08008f0c <ucdr_deserialize_uint32_t>:
 8008f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f10:	460d      	mov	r5, r1
 8008f12:	2104      	movs	r1, #4
 8008f14:	4604      	mov	r4, r0
 8008f16:	f000 fe01 	bl	8009b1c <ucdr_buffer_alignment>
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008f22:	f000 fe3f 	bl	8009ba4 <ucdr_advance_buffer>
 8008f26:	2104      	movs	r1, #4
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fd97 	bl	8009a5c <ucdr_check_buffer_available_for>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d138      	bne.n	8008fa4 <ucdr_deserialize_uint32_t+0x98>
 8008f32:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008f36:	42b7      	cmp	r7, r6
 8008f38:	d92f      	bls.n	8008f9a <ucdr_deserialize_uint32_t+0x8e>
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	60a7      	str	r7, [r4, #8]
 8008f3e:	1bbf      	subs	r7, r7, r6
 8008f40:	443b      	add	r3, r7
 8008f42:	f1c7 0904 	rsb	r9, r7, #4
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	4649      	mov	r1, r9
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 fd92 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d046      	beq.n	8008fe2 <ucdr_deserialize_uint32_t+0xd6>
 8008f54:	7d23      	ldrb	r3, [r4, #20]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d05c      	beq.n	8009014 <ucdr_deserialize_uint32_t+0x108>
 8008f5a:	78f3      	ldrb	r3, [r6, #3]
 8008f5c:	702b      	strb	r3, [r5, #0]
 8008f5e:	2f00      	cmp	r7, #0
 8008f60:	d04c      	beq.n	8008ffc <ucdr_deserialize_uint32_t+0xf0>
 8008f62:	78b3      	ldrb	r3, [r6, #2]
 8008f64:	706b      	strb	r3, [r5, #1]
 8008f66:	2f01      	cmp	r7, #1
 8008f68:	f105 0302 	add.w	r3, r5, #2
 8008f6c:	d04a      	beq.n	8009004 <ucdr_deserialize_uint32_t+0xf8>
 8008f6e:	7873      	ldrb	r3, [r6, #1]
 8008f70:	70ab      	strb	r3, [r5, #2]
 8008f72:	2f02      	cmp	r7, #2
 8008f74:	f105 0303 	add.w	r3, r5, #3
 8008f78:	d048      	beq.n	800900c <ucdr_deserialize_uint32_t+0x100>
 8008f7a:	7833      	ldrb	r3, [r6, #0]
 8008f7c:	70eb      	strb	r3, [r5, #3]
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	68a2      	ldr	r2, [r4, #8]
 8008f82:	7da0      	ldrb	r0, [r4, #22]
 8008f84:	2104      	movs	r1, #4
 8008f86:	3304      	adds	r3, #4
 8008f88:	444a      	add	r2, r9
 8008f8a:	1bdb      	subs	r3, r3, r7
 8008f8c:	7561      	strb	r1, [r4, #21]
 8008f8e:	60a2      	str	r2, [r4, #8]
 8008f90:	6123      	str	r3, [r4, #16]
 8008f92:	f080 0001 	eor.w	r0, r0, #1
 8008f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f9a:	2104      	movs	r1, #4
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f000 fd69 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8008fa2:	b1b0      	cbz	r0, 8008fd2 <ucdr_deserialize_uint32_t+0xc6>
 8008fa4:	7d23      	ldrb	r3, [r4, #20]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	68a3      	ldr	r3, [r4, #8]
 8008faa:	d017      	beq.n	8008fdc <ucdr_deserialize_uint32_t+0xd0>
 8008fac:	78db      	ldrb	r3, [r3, #3]
 8008fae:	702b      	strb	r3, [r5, #0]
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	789b      	ldrb	r3, [r3, #2]
 8008fb4:	706b      	strb	r3, [r5, #1]
 8008fb6:	68a3      	ldr	r3, [r4, #8]
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	70ab      	strb	r3, [r5, #2]
 8008fbc:	68a3      	ldr	r3, [r4, #8]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	70eb      	strb	r3, [r5, #3]
 8008fc2:	68a2      	ldr	r2, [r4, #8]
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	3204      	adds	r2, #4
 8008fc8:	3304      	adds	r3, #4
 8008fca:	2104      	movs	r1, #4
 8008fcc:	60a2      	str	r2, [r4, #8]
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	7561      	strb	r1, [r4, #21]
 8008fd2:	7da0      	ldrb	r0, [r4, #22]
 8008fd4:	f080 0001 	eor.w	r0, r0, #1
 8008fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	602b      	str	r3, [r5, #0]
 8008fe0:	e7ef      	b.n	8008fc2 <ucdr_deserialize_uint32_t+0xb6>
 8008fe2:	68a2      	ldr	r2, [r4, #8]
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	7da0      	ldrb	r0, [r4, #22]
 8008fe8:	f884 8015 	strb.w	r8, [r4, #21]
 8008fec:	1bd2      	subs	r2, r2, r7
 8008fee:	1bdb      	subs	r3, r3, r7
 8008ff0:	60a2      	str	r2, [r4, #8]
 8008ff2:	6123      	str	r3, [r4, #16]
 8008ff4:	f080 0001 	eor.w	r0, r0, #1
 8008ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffc:	68a3      	ldr	r3, [r4, #8]
 8008ffe:	789b      	ldrb	r3, [r3, #2]
 8009000:	706b      	strb	r3, [r5, #1]
 8009002:	1cab      	adds	r3, r5, #2
 8009004:	68a2      	ldr	r2, [r4, #8]
 8009006:	7852      	ldrb	r2, [r2, #1]
 8009008:	f803 2b01 	strb.w	r2, [r3], #1
 800900c:	68a2      	ldr	r2, [r4, #8]
 800900e:	7812      	ldrb	r2, [r2, #0]
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	e7b4      	b.n	8008f7e <ucdr_deserialize_uint32_t+0x72>
 8009014:	4631      	mov	r1, r6
 8009016:	463a      	mov	r2, r7
 8009018:	4628      	mov	r0, r5
 800901a:	f00c f8ce 	bl	80151ba <memcpy>
 800901e:	68a1      	ldr	r1, [r4, #8]
 8009020:	464a      	mov	r2, r9
 8009022:	19e8      	adds	r0, r5, r7
 8009024:	f00c f8c9 	bl	80151ba <memcpy>
 8009028:	e7a9      	b.n	8008f7e <ucdr_deserialize_uint32_t+0x72>
 800902a:	bf00      	nop

0800902c <ucdr_deserialize_endian_uint32_t>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	460e      	mov	r6, r1
 8009032:	2104      	movs	r1, #4
 8009034:	4604      	mov	r4, r0
 8009036:	4615      	mov	r5, r2
 8009038:	f000 fd70 	bl	8009b1c <ucdr_buffer_alignment>
 800903c:	4601      	mov	r1, r0
 800903e:	4620      	mov	r0, r4
 8009040:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009044:	f000 fdae 	bl	8009ba4 <ucdr_advance_buffer>
 8009048:	2104      	movs	r1, #4
 800904a:	4620      	mov	r0, r4
 800904c:	f000 fd06 	bl	8009a5c <ucdr_check_buffer_available_for>
 8009050:	2800      	cmp	r0, #0
 8009052:	d13c      	bne.n	80090ce <ucdr_deserialize_endian_uint32_t+0xa2>
 8009054:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009058:	42bb      	cmp	r3, r7
 800905a:	d933      	bls.n	80090c4 <ucdr_deserialize_endian_uint32_t+0x98>
 800905c:	eba3 0807 	sub.w	r8, r3, r7
 8009060:	60a3      	str	r3, [r4, #8]
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	f1c8 0a04 	rsb	sl, r8, #4
 8009068:	4443      	add	r3, r8
 800906a:	6123      	str	r3, [r4, #16]
 800906c:	4651      	mov	r1, sl
 800906e:	4620      	mov	r0, r4
 8009070:	f000 fd00 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8009074:	2800      	cmp	r0, #0
 8009076:	d048      	beq.n	800910a <ucdr_deserialize_endian_uint32_t+0xde>
 8009078:	2e01      	cmp	r6, #1
 800907a:	d061      	beq.n	8009140 <ucdr_deserialize_endian_uint32_t+0x114>
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	702b      	strb	r3, [r5, #0]
 8009080:	f1b8 0f00 	cmp.w	r8, #0
 8009084:	d050      	beq.n	8009128 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009086:	78bb      	ldrb	r3, [r7, #2]
 8009088:	706b      	strb	r3, [r5, #1]
 800908a:	f1b8 0f01 	cmp.w	r8, #1
 800908e:	f105 0302 	add.w	r3, r5, #2
 8009092:	d04d      	beq.n	8009130 <ucdr_deserialize_endian_uint32_t+0x104>
 8009094:	787b      	ldrb	r3, [r7, #1]
 8009096:	70ab      	strb	r3, [r5, #2]
 8009098:	f1b8 0f02 	cmp.w	r8, #2
 800909c:	f105 0303 	add.w	r3, r5, #3
 80090a0:	d04a      	beq.n	8009138 <ucdr_deserialize_endian_uint32_t+0x10c>
 80090a2:	783b      	ldrb	r3, [r7, #0]
 80090a4:	70eb      	strb	r3, [r5, #3]
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	68a2      	ldr	r2, [r4, #8]
 80090aa:	7da0      	ldrb	r0, [r4, #22]
 80090ac:	2104      	movs	r1, #4
 80090ae:	3304      	adds	r3, #4
 80090b0:	4452      	add	r2, sl
 80090b2:	eba3 0308 	sub.w	r3, r3, r8
 80090b6:	7561      	strb	r1, [r4, #21]
 80090b8:	60a2      	str	r2, [r4, #8]
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	f080 0001 	eor.w	r0, r0, #1
 80090c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c4:	2104      	movs	r1, #4
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 fcd4 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 80090cc:	b1a8      	cbz	r0, 80090fa <ucdr_deserialize_endian_uint32_t+0xce>
 80090ce:	2e01      	cmp	r6, #1
 80090d0:	68a3      	ldr	r3, [r4, #8]
 80090d2:	d017      	beq.n	8009104 <ucdr_deserialize_endian_uint32_t+0xd8>
 80090d4:	78db      	ldrb	r3, [r3, #3]
 80090d6:	702b      	strb	r3, [r5, #0]
 80090d8:	68a3      	ldr	r3, [r4, #8]
 80090da:	789b      	ldrb	r3, [r3, #2]
 80090dc:	706b      	strb	r3, [r5, #1]
 80090de:	68a3      	ldr	r3, [r4, #8]
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	70ab      	strb	r3, [r5, #2]
 80090e4:	68a3      	ldr	r3, [r4, #8]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	70eb      	strb	r3, [r5, #3]
 80090ea:	68a2      	ldr	r2, [r4, #8]
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	3204      	adds	r2, #4
 80090f0:	3304      	adds	r3, #4
 80090f2:	2104      	movs	r1, #4
 80090f4:	60a2      	str	r2, [r4, #8]
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	7561      	strb	r1, [r4, #21]
 80090fa:	7da0      	ldrb	r0, [r4, #22]
 80090fc:	f080 0001 	eor.w	r0, r0, #1
 8009100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	e7ef      	b.n	80090ea <ucdr_deserialize_endian_uint32_t+0xbe>
 800910a:	68a2      	ldr	r2, [r4, #8]
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	7da0      	ldrb	r0, [r4, #22]
 8009110:	f884 9015 	strb.w	r9, [r4, #21]
 8009114:	eba2 0208 	sub.w	r2, r2, r8
 8009118:	eba3 0308 	sub.w	r3, r3, r8
 800911c:	60a2      	str	r2, [r4, #8]
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	f080 0001 	eor.w	r0, r0, #1
 8009124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009128:	68a3      	ldr	r3, [r4, #8]
 800912a:	789b      	ldrb	r3, [r3, #2]
 800912c:	706b      	strb	r3, [r5, #1]
 800912e:	1cab      	adds	r3, r5, #2
 8009130:	68a2      	ldr	r2, [r4, #8]
 8009132:	7852      	ldrb	r2, [r2, #1]
 8009134:	f803 2b01 	strb.w	r2, [r3], #1
 8009138:	68a2      	ldr	r2, [r4, #8]
 800913a:	7812      	ldrb	r2, [r2, #0]
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	e7b2      	b.n	80090a6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8009140:	4639      	mov	r1, r7
 8009142:	4642      	mov	r2, r8
 8009144:	4628      	mov	r0, r5
 8009146:	f00c f838 	bl	80151ba <memcpy>
 800914a:	68a1      	ldr	r1, [r4, #8]
 800914c:	4652      	mov	r2, sl
 800914e:	eb05 0008 	add.w	r0, r5, r8
 8009152:	f00c f832 	bl	80151ba <memcpy>
 8009156:	e7a6      	b.n	80090a6 <ucdr_deserialize_endian_uint32_t+0x7a>

08009158 <ucdr_serialize_uint64_t>:
 8009158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915c:	2108      	movs	r1, #8
 800915e:	b082      	sub	sp, #8
 8009160:	4604      	mov	r4, r0
 8009162:	e9cd 2300 	strd	r2, r3, [sp]
 8009166:	f000 fcd9 	bl	8009b1c <ucdr_buffer_alignment>
 800916a:	4601      	mov	r1, r0
 800916c:	4620      	mov	r0, r4
 800916e:	7d67      	ldrb	r7, [r4, #21]
 8009170:	f000 fd18 	bl	8009ba4 <ucdr_advance_buffer>
 8009174:	2108      	movs	r1, #8
 8009176:	4620      	mov	r0, r4
 8009178:	f000 fc70 	bl	8009a5c <ucdr_check_buffer_available_for>
 800917c:	2800      	cmp	r0, #0
 800917e:	d14e      	bne.n	800921e <ucdr_serialize_uint64_t+0xc6>
 8009180:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009184:	42ab      	cmp	r3, r5
 8009186:	d945      	bls.n	8009214 <ucdr_serialize_uint64_t+0xbc>
 8009188:	1b5e      	subs	r6, r3, r5
 800918a:	60a3      	str	r3, [r4, #8]
 800918c:	6923      	ldr	r3, [r4, #16]
 800918e:	f1c6 0808 	rsb	r8, r6, #8
 8009192:	4433      	add	r3, r6
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	4641      	mov	r1, r8
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fc6b 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d074      	beq.n	800928c <ucdr_serialize_uint64_t+0x134>
 80091a2:	7d23      	ldrb	r3, [r4, #20]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	f000 809b 	beq.w	80092e0 <ucdr_serialize_uint64_t+0x188>
 80091aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80091ae:	702b      	strb	r3, [r5, #0]
 80091b0:	2e00      	cmp	r6, #0
 80091b2:	d078      	beq.n	80092a6 <ucdr_serialize_uint64_t+0x14e>
 80091b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80091b8:	706b      	strb	r3, [r5, #1]
 80091ba:	2e01      	cmp	r6, #1
 80091bc:	d077      	beq.n	80092ae <ucdr_serialize_uint64_t+0x156>
 80091be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80091c2:	70ab      	strb	r3, [r5, #2]
 80091c4:	2e02      	cmp	r6, #2
 80091c6:	d076      	beq.n	80092b6 <ucdr_serialize_uint64_t+0x15e>
 80091c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80091cc:	70eb      	strb	r3, [r5, #3]
 80091ce:	2e03      	cmp	r6, #3
 80091d0:	d075      	beq.n	80092be <ucdr_serialize_uint64_t+0x166>
 80091d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80091d6:	712b      	strb	r3, [r5, #4]
 80091d8:	2e04      	cmp	r6, #4
 80091da:	d074      	beq.n	80092c6 <ucdr_serialize_uint64_t+0x16e>
 80091dc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80091e0:	716b      	strb	r3, [r5, #5]
 80091e2:	2e05      	cmp	r6, #5
 80091e4:	d073      	beq.n	80092ce <ucdr_serialize_uint64_t+0x176>
 80091e6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80091ea:	71ab      	strb	r3, [r5, #6]
 80091ec:	2e06      	cmp	r6, #6
 80091ee:	d072      	beq.n	80092d6 <ucdr_serialize_uint64_t+0x17e>
 80091f0:	f89d 3000 	ldrb.w	r3, [sp]
 80091f4:	71eb      	strb	r3, [r5, #7]
 80091f6:	6923      	ldr	r3, [r4, #16]
 80091f8:	68a2      	ldr	r2, [r4, #8]
 80091fa:	7da0      	ldrb	r0, [r4, #22]
 80091fc:	3308      	adds	r3, #8
 80091fe:	1b9e      	subs	r6, r3, r6
 8009200:	4442      	add	r2, r8
 8009202:	2308      	movs	r3, #8
 8009204:	f080 0001 	eor.w	r0, r0, #1
 8009208:	60a2      	str	r2, [r4, #8]
 800920a:	6126      	str	r6, [r4, #16]
 800920c:	7563      	strb	r3, [r4, #21]
 800920e:	b002      	add	sp, #8
 8009210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009214:	2108      	movs	r1, #8
 8009216:	4620      	mov	r0, r4
 8009218:	f000 fc2c 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 800921c:	b350      	cbz	r0, 8009274 <ucdr_serialize_uint64_t+0x11c>
 800921e:	7d23      	ldrb	r3, [r4, #20]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d02d      	beq.n	8009280 <ucdr_serialize_uint64_t+0x128>
 8009224:	68a3      	ldr	r3, [r4, #8]
 8009226:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800922a:	701a      	strb	r2, [r3, #0]
 800922c:	68a3      	ldr	r3, [r4, #8]
 800922e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009232:	705a      	strb	r2, [r3, #1]
 8009234:	68a3      	ldr	r3, [r4, #8]
 8009236:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800923a:	709a      	strb	r2, [r3, #2]
 800923c:	68a3      	ldr	r3, [r4, #8]
 800923e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009242:	70da      	strb	r2, [r3, #3]
 8009244:	68a3      	ldr	r3, [r4, #8]
 8009246:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800924a:	711a      	strb	r2, [r3, #4]
 800924c:	68a3      	ldr	r3, [r4, #8]
 800924e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009252:	715a      	strb	r2, [r3, #5]
 8009254:	68a3      	ldr	r3, [r4, #8]
 8009256:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800925a:	719a      	strb	r2, [r3, #6]
 800925c:	68a3      	ldr	r3, [r4, #8]
 800925e:	f89d 2000 	ldrb.w	r2, [sp]
 8009262:	71da      	strb	r2, [r3, #7]
 8009264:	68a2      	ldr	r2, [r4, #8]
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	3208      	adds	r2, #8
 800926a:	3308      	adds	r3, #8
 800926c:	2108      	movs	r1, #8
 800926e:	60a2      	str	r2, [r4, #8]
 8009270:	6123      	str	r3, [r4, #16]
 8009272:	7561      	strb	r1, [r4, #21]
 8009274:	7da0      	ldrb	r0, [r4, #22]
 8009276:	f080 0001 	eor.w	r0, r0, #1
 800927a:	b002      	add	sp, #8
 800927c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009280:	466b      	mov	r3, sp
 8009282:	cb03      	ldmia	r3!, {r0, r1}
 8009284:	68a3      	ldr	r3, [r4, #8]
 8009286:	6018      	str	r0, [r3, #0]
 8009288:	6059      	str	r1, [r3, #4]
 800928a:	e7eb      	b.n	8009264 <ucdr_serialize_uint64_t+0x10c>
 800928c:	68a2      	ldr	r2, [r4, #8]
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	7da0      	ldrb	r0, [r4, #22]
 8009292:	7567      	strb	r7, [r4, #21]
 8009294:	1b92      	subs	r2, r2, r6
 8009296:	1b9b      	subs	r3, r3, r6
 8009298:	f080 0001 	eor.w	r0, r0, #1
 800929c:	60a2      	str	r2, [r4, #8]
 800929e:	6123      	str	r3, [r4, #16]
 80092a0:	b002      	add	sp, #8
 80092a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a6:	68a3      	ldr	r3, [r4, #8]
 80092a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80092bc:	701a      	strb	r2, [r3, #0]
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80092c4:	701a      	strb	r2, [r3, #0]
 80092c6:	68a3      	ldr	r3, [r4, #8]
 80092c8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	68a3      	ldr	r3, [r4, #8]
 80092d8:	f89d 2000 	ldrb.w	r2, [sp]
 80092dc:	701a      	strb	r2, [r3, #0]
 80092de:	e78a      	b.n	80091f6 <ucdr_serialize_uint64_t+0x9e>
 80092e0:	4628      	mov	r0, r5
 80092e2:	466d      	mov	r5, sp
 80092e4:	4629      	mov	r1, r5
 80092e6:	4632      	mov	r2, r6
 80092e8:	f00b ff67 	bl	80151ba <memcpy>
 80092ec:	68a0      	ldr	r0, [r4, #8]
 80092ee:	4642      	mov	r2, r8
 80092f0:	19a9      	adds	r1, r5, r6
 80092f2:	f00b ff62 	bl	80151ba <memcpy>
 80092f6:	e77e      	b.n	80091f6 <ucdr_serialize_uint64_t+0x9e>

080092f8 <ucdr_serialize_int16_t>:
 80092f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	b082      	sub	sp, #8
 80092fe:	460b      	mov	r3, r1
 8009300:	2102      	movs	r1, #2
 8009302:	4604      	mov	r4, r0
 8009304:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009308:	f000 fc08 	bl	8009b1c <ucdr_buffer_alignment>
 800930c:	4601      	mov	r1, r0
 800930e:	4620      	mov	r0, r4
 8009310:	7d67      	ldrb	r7, [r4, #21]
 8009312:	f000 fc47 	bl	8009ba4 <ucdr_advance_buffer>
 8009316:	2102      	movs	r1, #2
 8009318:	4620      	mov	r0, r4
 800931a:	f000 fb9f 	bl	8009a5c <ucdr_check_buffer_available_for>
 800931e:	bb78      	cbnz	r0, 8009380 <ucdr_serialize_int16_t+0x88>
 8009320:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009324:	42ab      	cmp	r3, r5
 8009326:	d926      	bls.n	8009376 <ucdr_serialize_int16_t+0x7e>
 8009328:	1b5e      	subs	r6, r3, r5
 800932a:	60a3      	str	r3, [r4, #8]
 800932c:	6923      	ldr	r3, [r4, #16]
 800932e:	f1c6 0802 	rsb	r8, r6, #2
 8009332:	4433      	add	r3, r6
 8009334:	6123      	str	r3, [r4, #16]
 8009336:	4641      	mov	r1, r8
 8009338:	4620      	mov	r0, r4
 800933a:	f000 fb9b 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 800933e:	2800      	cmp	r0, #0
 8009340:	d03b      	beq.n	80093ba <ucdr_serialize_int16_t+0xc2>
 8009342:	7d23      	ldrb	r3, [r4, #20]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d04a      	beq.n	80093de <ucdr_serialize_int16_t+0xe6>
 8009348:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800934c:	702b      	strb	r3, [r5, #0]
 800934e:	2e00      	cmp	r6, #0
 8009350:	d040      	beq.n	80093d4 <ucdr_serialize_int16_t+0xdc>
 8009352:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009356:	706b      	strb	r3, [r5, #1]
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	68a2      	ldr	r2, [r4, #8]
 800935c:	7da0      	ldrb	r0, [r4, #22]
 800935e:	3302      	adds	r3, #2
 8009360:	1b9e      	subs	r6, r3, r6
 8009362:	4442      	add	r2, r8
 8009364:	2302      	movs	r3, #2
 8009366:	f080 0001 	eor.w	r0, r0, #1
 800936a:	60a2      	str	r2, [r4, #8]
 800936c:	6126      	str	r6, [r4, #16]
 800936e:	7563      	strb	r3, [r4, #21]
 8009370:	b002      	add	sp, #8
 8009372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009376:	2102      	movs	r1, #2
 8009378:	4620      	mov	r0, r4
 800937a:	f000 fb7b 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 800937e:	b190      	cbz	r0, 80093a6 <ucdr_serialize_int16_t+0xae>
 8009380:	7d23      	ldrb	r3, [r4, #20]
 8009382:	2b01      	cmp	r3, #1
 8009384:	68a3      	ldr	r3, [r4, #8]
 8009386:	d014      	beq.n	80093b2 <ucdr_serialize_int16_t+0xba>
 8009388:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800938c:	701a      	strb	r2, [r3, #0]
 800938e:	68a3      	ldr	r3, [r4, #8]
 8009390:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009394:	705a      	strb	r2, [r3, #1]
 8009396:	68a2      	ldr	r2, [r4, #8]
 8009398:	6923      	ldr	r3, [r4, #16]
 800939a:	3202      	adds	r2, #2
 800939c:	3302      	adds	r3, #2
 800939e:	2102      	movs	r1, #2
 80093a0:	60a2      	str	r2, [r4, #8]
 80093a2:	6123      	str	r3, [r4, #16]
 80093a4:	7561      	strb	r1, [r4, #21]
 80093a6:	7da0      	ldrb	r0, [r4, #22]
 80093a8:	f080 0001 	eor.w	r0, r0, #1
 80093ac:	b002      	add	sp, #8
 80093ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80093b6:	801a      	strh	r2, [r3, #0]
 80093b8:	e7ed      	b.n	8009396 <ucdr_serialize_int16_t+0x9e>
 80093ba:	68a2      	ldr	r2, [r4, #8]
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	7da0      	ldrb	r0, [r4, #22]
 80093c0:	7567      	strb	r7, [r4, #21]
 80093c2:	1b92      	subs	r2, r2, r6
 80093c4:	1b9b      	subs	r3, r3, r6
 80093c6:	f080 0001 	eor.w	r0, r0, #1
 80093ca:	60a2      	str	r2, [r4, #8]
 80093cc:	6123      	str	r3, [r4, #16]
 80093ce:	b002      	add	sp, #8
 80093d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d4:	68a3      	ldr	r3, [r4, #8]
 80093d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80093da:	701a      	strb	r2, [r3, #0]
 80093dc:	e7bc      	b.n	8009358 <ucdr_serialize_int16_t+0x60>
 80093de:	4628      	mov	r0, r5
 80093e0:	f10d 0506 	add.w	r5, sp, #6
 80093e4:	4629      	mov	r1, r5
 80093e6:	4632      	mov	r2, r6
 80093e8:	f00b fee7 	bl	80151ba <memcpy>
 80093ec:	68a0      	ldr	r0, [r4, #8]
 80093ee:	4642      	mov	r2, r8
 80093f0:	19a9      	adds	r1, r5, r6
 80093f2:	f00b fee2 	bl	80151ba <memcpy>
 80093f6:	e7af      	b.n	8009358 <ucdr_serialize_int16_t+0x60>

080093f8 <ucdr_deserialize_int16_t>:
 80093f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093fc:	460d      	mov	r5, r1
 80093fe:	2102      	movs	r1, #2
 8009400:	4604      	mov	r4, r0
 8009402:	f000 fb8b 	bl	8009b1c <ucdr_buffer_alignment>
 8009406:	4601      	mov	r1, r0
 8009408:	4620      	mov	r0, r4
 800940a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800940e:	f000 fbc9 	bl	8009ba4 <ucdr_advance_buffer>
 8009412:	2102      	movs	r1, #2
 8009414:	4620      	mov	r0, r4
 8009416:	f000 fb21 	bl	8009a5c <ucdr_check_buffer_available_for>
 800941a:	bb60      	cbnz	r0, 8009476 <ucdr_deserialize_int16_t+0x7e>
 800941c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009420:	42be      	cmp	r6, r7
 8009422:	d923      	bls.n	800946c <ucdr_deserialize_int16_t+0x74>
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	60a6      	str	r6, [r4, #8]
 8009428:	1bf6      	subs	r6, r6, r7
 800942a:	4433      	add	r3, r6
 800942c:	f1c6 0902 	rsb	r9, r6, #2
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	4649      	mov	r1, r9
 8009434:	4620      	mov	r0, r4
 8009436:	f000 fb1d 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 800943a:	2800      	cmp	r0, #0
 800943c:	d034      	beq.n	80094a8 <ucdr_deserialize_int16_t+0xb0>
 800943e:	7d23      	ldrb	r3, [r4, #20]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d042      	beq.n	80094ca <ucdr_deserialize_int16_t+0xd2>
 8009444:	787b      	ldrb	r3, [r7, #1]
 8009446:	702b      	strb	r3, [r5, #0]
 8009448:	2e00      	cmp	r6, #0
 800944a:	d03a      	beq.n	80094c2 <ucdr_deserialize_int16_t+0xca>
 800944c:	783b      	ldrb	r3, [r7, #0]
 800944e:	706b      	strb	r3, [r5, #1]
 8009450:	6923      	ldr	r3, [r4, #16]
 8009452:	68a2      	ldr	r2, [r4, #8]
 8009454:	7da0      	ldrb	r0, [r4, #22]
 8009456:	2102      	movs	r1, #2
 8009458:	3302      	adds	r3, #2
 800945a:	444a      	add	r2, r9
 800945c:	1b9b      	subs	r3, r3, r6
 800945e:	7561      	strb	r1, [r4, #21]
 8009460:	60a2      	str	r2, [r4, #8]
 8009462:	6123      	str	r3, [r4, #16]
 8009464:	f080 0001 	eor.w	r0, r0, #1
 8009468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946c:	2102      	movs	r1, #2
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fb00 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8009474:	b180      	cbz	r0, 8009498 <ucdr_deserialize_int16_t+0xa0>
 8009476:	7d23      	ldrb	r3, [r4, #20]
 8009478:	2b01      	cmp	r3, #1
 800947a:	68a3      	ldr	r3, [r4, #8]
 800947c:	d011      	beq.n	80094a2 <ucdr_deserialize_int16_t+0xaa>
 800947e:	785b      	ldrb	r3, [r3, #1]
 8009480:	702b      	strb	r3, [r5, #0]
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	706b      	strb	r3, [r5, #1]
 8009488:	68a2      	ldr	r2, [r4, #8]
 800948a:	6923      	ldr	r3, [r4, #16]
 800948c:	3202      	adds	r2, #2
 800948e:	3302      	adds	r3, #2
 8009490:	2102      	movs	r1, #2
 8009492:	60a2      	str	r2, [r4, #8]
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	7561      	strb	r1, [r4, #21]
 8009498:	7da0      	ldrb	r0, [r4, #22]
 800949a:	f080 0001 	eor.w	r0, r0, #1
 800949e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	802b      	strh	r3, [r5, #0]
 80094a6:	e7ef      	b.n	8009488 <ucdr_deserialize_int16_t+0x90>
 80094a8:	68a2      	ldr	r2, [r4, #8]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	7da0      	ldrb	r0, [r4, #22]
 80094ae:	f884 8015 	strb.w	r8, [r4, #21]
 80094b2:	1b92      	subs	r2, r2, r6
 80094b4:	1b9b      	subs	r3, r3, r6
 80094b6:	60a2      	str	r2, [r4, #8]
 80094b8:	6123      	str	r3, [r4, #16]
 80094ba:	f080 0001 	eor.w	r0, r0, #1
 80094be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c2:	68a3      	ldr	r3, [r4, #8]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	706b      	strb	r3, [r5, #1]
 80094c8:	e7c2      	b.n	8009450 <ucdr_deserialize_int16_t+0x58>
 80094ca:	4639      	mov	r1, r7
 80094cc:	4632      	mov	r2, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	f00b fe73 	bl	80151ba <memcpy>
 80094d4:	68a1      	ldr	r1, [r4, #8]
 80094d6:	464a      	mov	r2, r9
 80094d8:	19a8      	adds	r0, r5, r6
 80094da:	f00b fe6e 	bl	80151ba <memcpy>
 80094de:	e7b7      	b.n	8009450 <ucdr_deserialize_int16_t+0x58>

080094e0 <ucdr_serialize_int32_t>:
 80094e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	4604      	mov	r4, r0
 80094e8:	9101      	str	r1, [sp, #4]
 80094ea:	2104      	movs	r1, #4
 80094ec:	f000 fb16 	bl	8009b1c <ucdr_buffer_alignment>
 80094f0:	4601      	mov	r1, r0
 80094f2:	4620      	mov	r0, r4
 80094f4:	7d67      	ldrb	r7, [r4, #21]
 80094f6:	f000 fb55 	bl	8009ba4 <ucdr_advance_buffer>
 80094fa:	2104      	movs	r1, #4
 80094fc:	4620      	mov	r0, r4
 80094fe:	f000 faad 	bl	8009a5c <ucdr_check_buffer_available_for>
 8009502:	2800      	cmp	r0, #0
 8009504:	d139      	bne.n	800957a <ucdr_serialize_int32_t+0x9a>
 8009506:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800950a:	42ab      	cmp	r3, r5
 800950c:	d930      	bls.n	8009570 <ucdr_serialize_int32_t+0x90>
 800950e:	1b5e      	subs	r6, r3, r5
 8009510:	60a3      	str	r3, [r4, #8]
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	f1c6 0804 	rsb	r8, r6, #4
 8009518:	4433      	add	r3, r6
 800951a:	6123      	str	r3, [r4, #16]
 800951c:	4641      	mov	r1, r8
 800951e:	4620      	mov	r0, r4
 8009520:	f000 faa8 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8009524:	2800      	cmp	r0, #0
 8009526:	d04c      	beq.n	80095c2 <ucdr_serialize_int32_t+0xe2>
 8009528:	7d23      	ldrb	r3, [r4, #20]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d063      	beq.n	80095f6 <ucdr_serialize_int32_t+0x116>
 800952e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009532:	702b      	strb	r3, [r5, #0]
 8009534:	2e00      	cmp	r6, #0
 8009536:	d051      	beq.n	80095dc <ucdr_serialize_int32_t+0xfc>
 8009538:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800953c:	706b      	strb	r3, [r5, #1]
 800953e:	2e01      	cmp	r6, #1
 8009540:	d050      	beq.n	80095e4 <ucdr_serialize_int32_t+0x104>
 8009542:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009546:	70ab      	strb	r3, [r5, #2]
 8009548:	2e02      	cmp	r6, #2
 800954a:	d04f      	beq.n	80095ec <ucdr_serialize_int32_t+0x10c>
 800954c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009550:	70eb      	strb	r3, [r5, #3]
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	68a2      	ldr	r2, [r4, #8]
 8009556:	7da0      	ldrb	r0, [r4, #22]
 8009558:	3304      	adds	r3, #4
 800955a:	1b9e      	subs	r6, r3, r6
 800955c:	4442      	add	r2, r8
 800955e:	2304      	movs	r3, #4
 8009560:	f080 0001 	eor.w	r0, r0, #1
 8009564:	60a2      	str	r2, [r4, #8]
 8009566:	6126      	str	r6, [r4, #16]
 8009568:	7563      	strb	r3, [r4, #21]
 800956a:	b002      	add	sp, #8
 800956c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009570:	2104      	movs	r1, #4
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fa7e 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8009578:	b1d0      	cbz	r0, 80095b0 <ucdr_serialize_int32_t+0xd0>
 800957a:	7d23      	ldrb	r3, [r4, #20]
 800957c:	2b01      	cmp	r3, #1
 800957e:	68a3      	ldr	r3, [r4, #8]
 8009580:	d01c      	beq.n	80095bc <ucdr_serialize_int32_t+0xdc>
 8009582:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009586:	701a      	strb	r2, [r3, #0]
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800958e:	705a      	strb	r2, [r3, #1]
 8009590:	68a3      	ldr	r3, [r4, #8]
 8009592:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009596:	709a      	strb	r2, [r3, #2]
 8009598:	68a3      	ldr	r3, [r4, #8]
 800959a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800959e:	70da      	strb	r2, [r3, #3]
 80095a0:	68a2      	ldr	r2, [r4, #8]
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	3204      	adds	r2, #4
 80095a6:	3304      	adds	r3, #4
 80095a8:	2104      	movs	r1, #4
 80095aa:	60a2      	str	r2, [r4, #8]
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	7561      	strb	r1, [r4, #21]
 80095b0:	7da0      	ldrb	r0, [r4, #22]
 80095b2:	f080 0001 	eor.w	r0, r0, #1
 80095b6:	b002      	add	sp, #8
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	9a01      	ldr	r2, [sp, #4]
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	e7ee      	b.n	80095a0 <ucdr_serialize_int32_t+0xc0>
 80095c2:	68a2      	ldr	r2, [r4, #8]
 80095c4:	6923      	ldr	r3, [r4, #16]
 80095c6:	7da0      	ldrb	r0, [r4, #22]
 80095c8:	7567      	strb	r7, [r4, #21]
 80095ca:	1b92      	subs	r2, r2, r6
 80095cc:	1b9b      	subs	r3, r3, r6
 80095ce:	f080 0001 	eor.w	r0, r0, #1
 80095d2:	60a2      	str	r2, [r4, #8]
 80095d4:	6123      	str	r3, [r4, #16]
 80095d6:	b002      	add	sp, #8
 80095d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80095e2:	701a      	strb	r2, [r3, #0]
 80095e4:	68a3      	ldr	r3, [r4, #8]
 80095e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80095ea:	701a      	strb	r2, [r3, #0]
 80095ec:	68a3      	ldr	r3, [r4, #8]
 80095ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	e7ad      	b.n	8009552 <ucdr_serialize_int32_t+0x72>
 80095f6:	4628      	mov	r0, r5
 80095f8:	ad01      	add	r5, sp, #4
 80095fa:	4629      	mov	r1, r5
 80095fc:	4632      	mov	r2, r6
 80095fe:	f00b fddc 	bl	80151ba <memcpy>
 8009602:	68a0      	ldr	r0, [r4, #8]
 8009604:	4642      	mov	r2, r8
 8009606:	19a9      	adds	r1, r5, r6
 8009608:	f00b fdd7 	bl	80151ba <memcpy>
 800960c:	e7a1      	b.n	8009552 <ucdr_serialize_int32_t+0x72>
 800960e:	bf00      	nop

08009610 <ucdr_deserialize_int32_t>:
 8009610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009614:	460d      	mov	r5, r1
 8009616:	2104      	movs	r1, #4
 8009618:	4604      	mov	r4, r0
 800961a:	f000 fa7f 	bl	8009b1c <ucdr_buffer_alignment>
 800961e:	4601      	mov	r1, r0
 8009620:	4620      	mov	r0, r4
 8009622:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009626:	f000 fabd 	bl	8009ba4 <ucdr_advance_buffer>
 800962a:	2104      	movs	r1, #4
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fa15 	bl	8009a5c <ucdr_check_buffer_available_for>
 8009632:	2800      	cmp	r0, #0
 8009634:	d138      	bne.n	80096a8 <ucdr_deserialize_int32_t+0x98>
 8009636:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800963a:	42b7      	cmp	r7, r6
 800963c:	d92f      	bls.n	800969e <ucdr_deserialize_int32_t+0x8e>
 800963e:	6923      	ldr	r3, [r4, #16]
 8009640:	60a7      	str	r7, [r4, #8]
 8009642:	1bbf      	subs	r7, r7, r6
 8009644:	443b      	add	r3, r7
 8009646:	f1c7 0904 	rsb	r9, r7, #4
 800964a:	6123      	str	r3, [r4, #16]
 800964c:	4649      	mov	r1, r9
 800964e:	4620      	mov	r0, r4
 8009650:	f000 fa10 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8009654:	2800      	cmp	r0, #0
 8009656:	d046      	beq.n	80096e6 <ucdr_deserialize_int32_t+0xd6>
 8009658:	7d23      	ldrb	r3, [r4, #20]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d05c      	beq.n	8009718 <ucdr_deserialize_int32_t+0x108>
 800965e:	78f3      	ldrb	r3, [r6, #3]
 8009660:	702b      	strb	r3, [r5, #0]
 8009662:	2f00      	cmp	r7, #0
 8009664:	d04c      	beq.n	8009700 <ucdr_deserialize_int32_t+0xf0>
 8009666:	78b3      	ldrb	r3, [r6, #2]
 8009668:	706b      	strb	r3, [r5, #1]
 800966a:	2f01      	cmp	r7, #1
 800966c:	f105 0302 	add.w	r3, r5, #2
 8009670:	d04a      	beq.n	8009708 <ucdr_deserialize_int32_t+0xf8>
 8009672:	7873      	ldrb	r3, [r6, #1]
 8009674:	70ab      	strb	r3, [r5, #2]
 8009676:	2f02      	cmp	r7, #2
 8009678:	f105 0303 	add.w	r3, r5, #3
 800967c:	d048      	beq.n	8009710 <ucdr_deserialize_int32_t+0x100>
 800967e:	7833      	ldrb	r3, [r6, #0]
 8009680:	70eb      	strb	r3, [r5, #3]
 8009682:	6923      	ldr	r3, [r4, #16]
 8009684:	68a2      	ldr	r2, [r4, #8]
 8009686:	7da0      	ldrb	r0, [r4, #22]
 8009688:	2104      	movs	r1, #4
 800968a:	3304      	adds	r3, #4
 800968c:	444a      	add	r2, r9
 800968e:	1bdb      	subs	r3, r3, r7
 8009690:	7561      	strb	r1, [r4, #21]
 8009692:	60a2      	str	r2, [r4, #8]
 8009694:	6123      	str	r3, [r4, #16]
 8009696:	f080 0001 	eor.w	r0, r0, #1
 800969a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969e:	2104      	movs	r1, #4
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 f9e7 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 80096a6:	b1b0      	cbz	r0, 80096d6 <ucdr_deserialize_int32_t+0xc6>
 80096a8:	7d23      	ldrb	r3, [r4, #20]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	68a3      	ldr	r3, [r4, #8]
 80096ae:	d017      	beq.n	80096e0 <ucdr_deserialize_int32_t+0xd0>
 80096b0:	78db      	ldrb	r3, [r3, #3]
 80096b2:	702b      	strb	r3, [r5, #0]
 80096b4:	68a3      	ldr	r3, [r4, #8]
 80096b6:	789b      	ldrb	r3, [r3, #2]
 80096b8:	706b      	strb	r3, [r5, #1]
 80096ba:	68a3      	ldr	r3, [r4, #8]
 80096bc:	785b      	ldrb	r3, [r3, #1]
 80096be:	70ab      	strb	r3, [r5, #2]
 80096c0:	68a3      	ldr	r3, [r4, #8]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	70eb      	strb	r3, [r5, #3]
 80096c6:	68a2      	ldr	r2, [r4, #8]
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	3204      	adds	r2, #4
 80096cc:	3304      	adds	r3, #4
 80096ce:	2104      	movs	r1, #4
 80096d0:	60a2      	str	r2, [r4, #8]
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	7561      	strb	r1, [r4, #21]
 80096d6:	7da0      	ldrb	r0, [r4, #22]
 80096d8:	f080 0001 	eor.w	r0, r0, #1
 80096dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	602b      	str	r3, [r5, #0]
 80096e4:	e7ef      	b.n	80096c6 <ucdr_deserialize_int32_t+0xb6>
 80096e6:	68a2      	ldr	r2, [r4, #8]
 80096e8:	6923      	ldr	r3, [r4, #16]
 80096ea:	7da0      	ldrb	r0, [r4, #22]
 80096ec:	f884 8015 	strb.w	r8, [r4, #21]
 80096f0:	1bd2      	subs	r2, r2, r7
 80096f2:	1bdb      	subs	r3, r3, r7
 80096f4:	60a2      	str	r2, [r4, #8]
 80096f6:	6123      	str	r3, [r4, #16]
 80096f8:	f080 0001 	eor.w	r0, r0, #1
 80096fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009700:	68a3      	ldr	r3, [r4, #8]
 8009702:	789b      	ldrb	r3, [r3, #2]
 8009704:	706b      	strb	r3, [r5, #1]
 8009706:	1cab      	adds	r3, r5, #2
 8009708:	68a2      	ldr	r2, [r4, #8]
 800970a:	7852      	ldrb	r2, [r2, #1]
 800970c:	f803 2b01 	strb.w	r2, [r3], #1
 8009710:	68a2      	ldr	r2, [r4, #8]
 8009712:	7812      	ldrb	r2, [r2, #0]
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	e7b4      	b.n	8009682 <ucdr_deserialize_int32_t+0x72>
 8009718:	4631      	mov	r1, r6
 800971a:	463a      	mov	r2, r7
 800971c:	4628      	mov	r0, r5
 800971e:	f00b fd4c 	bl	80151ba <memcpy>
 8009722:	68a1      	ldr	r1, [r4, #8]
 8009724:	464a      	mov	r2, r9
 8009726:	19e8      	adds	r0, r5, r7
 8009728:	f00b fd47 	bl	80151ba <memcpy>
 800972c:	e7a9      	b.n	8009682 <ucdr_deserialize_int32_t+0x72>
 800972e:	bf00      	nop

08009730 <ucdr_serialize_double>:
 8009730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009734:	2108      	movs	r1, #8
 8009736:	b082      	sub	sp, #8
 8009738:	4604      	mov	r4, r0
 800973a:	ed8d 0b00 	vstr	d0, [sp]
 800973e:	f000 f9ed 	bl	8009b1c <ucdr_buffer_alignment>
 8009742:	4601      	mov	r1, r0
 8009744:	4620      	mov	r0, r4
 8009746:	7d67      	ldrb	r7, [r4, #21]
 8009748:	f000 fa2c 	bl	8009ba4 <ucdr_advance_buffer>
 800974c:	2108      	movs	r1, #8
 800974e:	4620      	mov	r0, r4
 8009750:	f000 f984 	bl	8009a5c <ucdr_check_buffer_available_for>
 8009754:	2800      	cmp	r0, #0
 8009756:	d14e      	bne.n	80097f6 <ucdr_serialize_double+0xc6>
 8009758:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800975c:	42ab      	cmp	r3, r5
 800975e:	d945      	bls.n	80097ec <ucdr_serialize_double+0xbc>
 8009760:	1b5e      	subs	r6, r3, r5
 8009762:	60a3      	str	r3, [r4, #8]
 8009764:	6923      	ldr	r3, [r4, #16]
 8009766:	f1c6 0808 	rsb	r8, r6, #8
 800976a:	4433      	add	r3, r6
 800976c:	6123      	str	r3, [r4, #16]
 800976e:	4641      	mov	r1, r8
 8009770:	4620      	mov	r0, r4
 8009772:	f000 f97f 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8009776:	2800      	cmp	r0, #0
 8009778:	d074      	beq.n	8009864 <ucdr_serialize_double+0x134>
 800977a:	7d23      	ldrb	r3, [r4, #20]
 800977c:	2b01      	cmp	r3, #1
 800977e:	f000 809b 	beq.w	80098b8 <ucdr_serialize_double+0x188>
 8009782:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009786:	702b      	strb	r3, [r5, #0]
 8009788:	2e00      	cmp	r6, #0
 800978a:	d078      	beq.n	800987e <ucdr_serialize_double+0x14e>
 800978c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009790:	706b      	strb	r3, [r5, #1]
 8009792:	2e01      	cmp	r6, #1
 8009794:	d077      	beq.n	8009886 <ucdr_serialize_double+0x156>
 8009796:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800979a:	70ab      	strb	r3, [r5, #2]
 800979c:	2e02      	cmp	r6, #2
 800979e:	d076      	beq.n	800988e <ucdr_serialize_double+0x15e>
 80097a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80097a4:	70eb      	strb	r3, [r5, #3]
 80097a6:	2e03      	cmp	r6, #3
 80097a8:	d075      	beq.n	8009896 <ucdr_serialize_double+0x166>
 80097aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80097ae:	712b      	strb	r3, [r5, #4]
 80097b0:	2e04      	cmp	r6, #4
 80097b2:	d074      	beq.n	800989e <ucdr_serialize_double+0x16e>
 80097b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80097b8:	716b      	strb	r3, [r5, #5]
 80097ba:	2e05      	cmp	r6, #5
 80097bc:	d073      	beq.n	80098a6 <ucdr_serialize_double+0x176>
 80097be:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80097c2:	71ab      	strb	r3, [r5, #6]
 80097c4:	2e06      	cmp	r6, #6
 80097c6:	d072      	beq.n	80098ae <ucdr_serialize_double+0x17e>
 80097c8:	f89d 3000 	ldrb.w	r3, [sp]
 80097cc:	71eb      	strb	r3, [r5, #7]
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	68a2      	ldr	r2, [r4, #8]
 80097d2:	7da0      	ldrb	r0, [r4, #22]
 80097d4:	3308      	adds	r3, #8
 80097d6:	1b9e      	subs	r6, r3, r6
 80097d8:	4442      	add	r2, r8
 80097da:	2308      	movs	r3, #8
 80097dc:	f080 0001 	eor.w	r0, r0, #1
 80097e0:	60a2      	str	r2, [r4, #8]
 80097e2:	6126      	str	r6, [r4, #16]
 80097e4:	7563      	strb	r3, [r4, #21]
 80097e6:	b002      	add	sp, #8
 80097e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ec:	2108      	movs	r1, #8
 80097ee:	4620      	mov	r0, r4
 80097f0:	f000 f940 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 80097f4:	b350      	cbz	r0, 800984c <ucdr_serialize_double+0x11c>
 80097f6:	7d23      	ldrb	r3, [r4, #20]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d02d      	beq.n	8009858 <ucdr_serialize_double+0x128>
 80097fc:	68a3      	ldr	r3, [r4, #8]
 80097fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009802:	701a      	strb	r2, [r3, #0]
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800980a:	705a      	strb	r2, [r3, #1]
 800980c:	68a3      	ldr	r3, [r4, #8]
 800980e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009812:	709a      	strb	r2, [r3, #2]
 8009814:	68a3      	ldr	r3, [r4, #8]
 8009816:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800981a:	70da      	strb	r2, [r3, #3]
 800981c:	68a3      	ldr	r3, [r4, #8]
 800981e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009822:	711a      	strb	r2, [r3, #4]
 8009824:	68a3      	ldr	r3, [r4, #8]
 8009826:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800982a:	715a      	strb	r2, [r3, #5]
 800982c:	68a3      	ldr	r3, [r4, #8]
 800982e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009832:	719a      	strb	r2, [r3, #6]
 8009834:	68a3      	ldr	r3, [r4, #8]
 8009836:	f89d 2000 	ldrb.w	r2, [sp]
 800983a:	71da      	strb	r2, [r3, #7]
 800983c:	68a2      	ldr	r2, [r4, #8]
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	3208      	adds	r2, #8
 8009842:	3308      	adds	r3, #8
 8009844:	2108      	movs	r1, #8
 8009846:	60a2      	str	r2, [r4, #8]
 8009848:	6123      	str	r3, [r4, #16]
 800984a:	7561      	strb	r1, [r4, #21]
 800984c:	7da0      	ldrb	r0, [r4, #22]
 800984e:	f080 0001 	eor.w	r0, r0, #1
 8009852:	b002      	add	sp, #8
 8009854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009858:	466b      	mov	r3, sp
 800985a:	cb03      	ldmia	r3!, {r0, r1}
 800985c:	68a3      	ldr	r3, [r4, #8]
 800985e:	6018      	str	r0, [r3, #0]
 8009860:	6059      	str	r1, [r3, #4]
 8009862:	e7eb      	b.n	800983c <ucdr_serialize_double+0x10c>
 8009864:	68a2      	ldr	r2, [r4, #8]
 8009866:	6923      	ldr	r3, [r4, #16]
 8009868:	7da0      	ldrb	r0, [r4, #22]
 800986a:	7567      	strb	r7, [r4, #21]
 800986c:	1b92      	subs	r2, r2, r6
 800986e:	1b9b      	subs	r3, r3, r6
 8009870:	f080 0001 	eor.w	r0, r0, #1
 8009874:	60a2      	str	r2, [r4, #8]
 8009876:	6123      	str	r3, [r4, #16]
 8009878:	b002      	add	sp, #8
 800987a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800987e:	68a3      	ldr	r3, [r4, #8]
 8009880:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	68a3      	ldr	r3, [r4, #8]
 8009888:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	68a3      	ldr	r3, [r4, #8]
 8009890:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009894:	701a      	strb	r2, [r3, #0]
 8009896:	68a3      	ldr	r3, [r4, #8]
 8009898:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	68a3      	ldr	r3, [r4, #8]
 80098a0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80098a4:	701a      	strb	r2, [r3, #0]
 80098a6:	68a3      	ldr	r3, [r4, #8]
 80098a8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	f89d 2000 	ldrb.w	r2, [sp]
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	e78a      	b.n	80097ce <ucdr_serialize_double+0x9e>
 80098b8:	4628      	mov	r0, r5
 80098ba:	466d      	mov	r5, sp
 80098bc:	4629      	mov	r1, r5
 80098be:	4632      	mov	r2, r6
 80098c0:	f00b fc7b 	bl	80151ba <memcpy>
 80098c4:	68a0      	ldr	r0, [r4, #8]
 80098c6:	4642      	mov	r2, r8
 80098c8:	19a9      	adds	r1, r5, r6
 80098ca:	f00b fc76 	bl	80151ba <memcpy>
 80098ce:	e77e      	b.n	80097ce <ucdr_serialize_double+0x9e>

080098d0 <ucdr_deserialize_double>:
 80098d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d4:	460d      	mov	r5, r1
 80098d6:	2108      	movs	r1, #8
 80098d8:	4604      	mov	r4, r0
 80098da:	f000 f91f 	bl	8009b1c <ucdr_buffer_alignment>
 80098de:	4601      	mov	r1, r0
 80098e0:	4620      	mov	r0, r4
 80098e2:	f894 9015 	ldrb.w	r9, [r4, #21]
 80098e6:	f000 f95d 	bl	8009ba4 <ucdr_advance_buffer>
 80098ea:	2108      	movs	r1, #8
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f8b5 	bl	8009a5c <ucdr_check_buffer_available_for>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d151      	bne.n	800999a <ucdr_deserialize_double+0xca>
 80098f6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80098fa:	42be      	cmp	r6, r7
 80098fc:	d948      	bls.n	8009990 <ucdr_deserialize_double+0xc0>
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	60a6      	str	r6, [r4, #8]
 8009902:	1bf6      	subs	r6, r6, r7
 8009904:	4433      	add	r3, r6
 8009906:	f1c6 0808 	rsb	r8, r6, #8
 800990a:	6123      	str	r3, [r4, #16]
 800990c:	4641      	mov	r1, r8
 800990e:	4620      	mov	r0, r4
 8009910:	f000 f8b0 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8009914:	2800      	cmp	r0, #0
 8009916:	d06d      	beq.n	80099f4 <ucdr_deserialize_double+0x124>
 8009918:	7d23      	ldrb	r3, [r4, #20]
 800991a:	2b01      	cmp	r3, #1
 800991c:	f000 8093 	beq.w	8009a46 <ucdr_deserialize_double+0x176>
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	702b      	strb	r3, [r5, #0]
 8009924:	2e00      	cmp	r6, #0
 8009926:	d072      	beq.n	8009a0e <ucdr_deserialize_double+0x13e>
 8009928:	79bb      	ldrb	r3, [r7, #6]
 800992a:	706b      	strb	r3, [r5, #1]
 800992c:	2e01      	cmp	r6, #1
 800992e:	f105 0302 	add.w	r3, r5, #2
 8009932:	d070      	beq.n	8009a16 <ucdr_deserialize_double+0x146>
 8009934:	797b      	ldrb	r3, [r7, #5]
 8009936:	70ab      	strb	r3, [r5, #2]
 8009938:	2e02      	cmp	r6, #2
 800993a:	f105 0303 	add.w	r3, r5, #3
 800993e:	d06e      	beq.n	8009a1e <ucdr_deserialize_double+0x14e>
 8009940:	793b      	ldrb	r3, [r7, #4]
 8009942:	70eb      	strb	r3, [r5, #3]
 8009944:	2e03      	cmp	r6, #3
 8009946:	f105 0304 	add.w	r3, r5, #4
 800994a:	d06c      	beq.n	8009a26 <ucdr_deserialize_double+0x156>
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	712b      	strb	r3, [r5, #4]
 8009950:	2e04      	cmp	r6, #4
 8009952:	f105 0305 	add.w	r3, r5, #5
 8009956:	d06a      	beq.n	8009a2e <ucdr_deserialize_double+0x15e>
 8009958:	78bb      	ldrb	r3, [r7, #2]
 800995a:	716b      	strb	r3, [r5, #5]
 800995c:	2e05      	cmp	r6, #5
 800995e:	f105 0306 	add.w	r3, r5, #6
 8009962:	d068      	beq.n	8009a36 <ucdr_deserialize_double+0x166>
 8009964:	787b      	ldrb	r3, [r7, #1]
 8009966:	71ab      	strb	r3, [r5, #6]
 8009968:	2e06      	cmp	r6, #6
 800996a:	f105 0307 	add.w	r3, r5, #7
 800996e:	d066      	beq.n	8009a3e <ucdr_deserialize_double+0x16e>
 8009970:	783b      	ldrb	r3, [r7, #0]
 8009972:	71eb      	strb	r3, [r5, #7]
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	68a2      	ldr	r2, [r4, #8]
 8009978:	7da0      	ldrb	r0, [r4, #22]
 800997a:	3308      	adds	r3, #8
 800997c:	1b9e      	subs	r6, r3, r6
 800997e:	2308      	movs	r3, #8
 8009980:	4442      	add	r2, r8
 8009982:	7563      	strb	r3, [r4, #21]
 8009984:	60a2      	str	r2, [r4, #8]
 8009986:	6126      	str	r6, [r4, #16]
 8009988:	f080 0001 	eor.w	r0, r0, #1
 800998c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009990:	2108      	movs	r1, #8
 8009992:	4620      	mov	r0, r4
 8009994:	f000 f86e 	bl	8009a74 <ucdr_check_final_buffer_behavior>
 8009998:	b310      	cbz	r0, 80099e0 <ucdr_deserialize_double+0x110>
 800999a:	7d23      	ldrb	r3, [r4, #20]
 800999c:	2b01      	cmp	r3, #1
 800999e:	68a3      	ldr	r3, [r4, #8]
 80099a0:	d023      	beq.n	80099ea <ucdr_deserialize_double+0x11a>
 80099a2:	79db      	ldrb	r3, [r3, #7]
 80099a4:	702b      	strb	r3, [r5, #0]
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	799b      	ldrb	r3, [r3, #6]
 80099aa:	706b      	strb	r3, [r5, #1]
 80099ac:	68a3      	ldr	r3, [r4, #8]
 80099ae:	795b      	ldrb	r3, [r3, #5]
 80099b0:	70ab      	strb	r3, [r5, #2]
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	791b      	ldrb	r3, [r3, #4]
 80099b6:	70eb      	strb	r3, [r5, #3]
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	78db      	ldrb	r3, [r3, #3]
 80099bc:	712b      	strb	r3, [r5, #4]
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	789b      	ldrb	r3, [r3, #2]
 80099c2:	716b      	strb	r3, [r5, #5]
 80099c4:	68a3      	ldr	r3, [r4, #8]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	71ab      	strb	r3, [r5, #6]
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	71eb      	strb	r3, [r5, #7]
 80099d0:	68a2      	ldr	r2, [r4, #8]
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	3208      	adds	r2, #8
 80099d6:	3308      	adds	r3, #8
 80099d8:	2108      	movs	r1, #8
 80099da:	60a2      	str	r2, [r4, #8]
 80099dc:	6123      	str	r3, [r4, #16]
 80099de:	7561      	strb	r1, [r4, #21]
 80099e0:	7da0      	ldrb	r0, [r4, #22]
 80099e2:	f080 0001 	eor.w	r0, r0, #1
 80099e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	606b      	str	r3, [r5, #4]
 80099f0:	602a      	str	r2, [r5, #0]
 80099f2:	e7ed      	b.n	80099d0 <ucdr_deserialize_double+0x100>
 80099f4:	68a2      	ldr	r2, [r4, #8]
 80099f6:	6923      	ldr	r3, [r4, #16]
 80099f8:	7da0      	ldrb	r0, [r4, #22]
 80099fa:	f884 9015 	strb.w	r9, [r4, #21]
 80099fe:	1b92      	subs	r2, r2, r6
 8009a00:	1b9b      	subs	r3, r3, r6
 8009a02:	60a2      	str	r2, [r4, #8]
 8009a04:	6123      	str	r3, [r4, #16]
 8009a06:	f080 0001 	eor.w	r0, r0, #1
 8009a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a0e:	68a3      	ldr	r3, [r4, #8]
 8009a10:	799b      	ldrb	r3, [r3, #6]
 8009a12:	706b      	strb	r3, [r5, #1]
 8009a14:	1cab      	adds	r3, r5, #2
 8009a16:	68a2      	ldr	r2, [r4, #8]
 8009a18:	7952      	ldrb	r2, [r2, #5]
 8009a1a:	f803 2b01 	strb.w	r2, [r3], #1
 8009a1e:	68a2      	ldr	r2, [r4, #8]
 8009a20:	7912      	ldrb	r2, [r2, #4]
 8009a22:	f803 2b01 	strb.w	r2, [r3], #1
 8009a26:	68a2      	ldr	r2, [r4, #8]
 8009a28:	78d2      	ldrb	r2, [r2, #3]
 8009a2a:	f803 2b01 	strb.w	r2, [r3], #1
 8009a2e:	68a2      	ldr	r2, [r4, #8]
 8009a30:	7892      	ldrb	r2, [r2, #2]
 8009a32:	f803 2b01 	strb.w	r2, [r3], #1
 8009a36:	68a2      	ldr	r2, [r4, #8]
 8009a38:	7852      	ldrb	r2, [r2, #1]
 8009a3a:	f803 2b01 	strb.w	r2, [r3], #1
 8009a3e:	68a2      	ldr	r2, [r4, #8]
 8009a40:	7812      	ldrb	r2, [r2, #0]
 8009a42:	701a      	strb	r2, [r3, #0]
 8009a44:	e796      	b.n	8009974 <ucdr_deserialize_double+0xa4>
 8009a46:	4639      	mov	r1, r7
 8009a48:	4632      	mov	r2, r6
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f00b fbb5 	bl	80151ba <memcpy>
 8009a50:	68a1      	ldr	r1, [r4, #8]
 8009a52:	4642      	mov	r2, r8
 8009a54:	19a8      	adds	r0, r5, r6
 8009a56:	f00b fbb0 	bl	80151ba <memcpy>
 8009a5a:	e78b      	b.n	8009974 <ucdr_deserialize_double+0xa4>

08009a5c <ucdr_check_buffer_available_for>:
 8009a5c:	7d83      	ldrb	r3, [r0, #22]
 8009a5e:	b93b      	cbnz	r3, 8009a70 <ucdr_check_buffer_available_for+0x14>
 8009a60:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009a64:	4419      	add	r1, r3
 8009a66:	4288      	cmp	r0, r1
 8009a68:	bf34      	ite	cc
 8009a6a:	2000      	movcc	r0, #0
 8009a6c:	2001      	movcs	r0, #1
 8009a6e:	4770      	bx	lr
 8009a70:	2000      	movs	r0, #0
 8009a72:	4770      	bx	lr

08009a74 <ucdr_check_final_buffer_behavior>:
 8009a74:	7d83      	ldrb	r3, [r0, #22]
 8009a76:	b943      	cbnz	r3, 8009a8a <ucdr_check_final_buffer_behavior+0x16>
 8009a78:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009a7c:	4291      	cmp	r1, r2
 8009a7e:	b510      	push	{r4, lr}
 8009a80:	4604      	mov	r4, r0
 8009a82:	d205      	bcs.n	8009a90 <ucdr_check_final_buffer_behavior+0x1c>
 8009a84:	2301      	movs	r3, #1
 8009a86:	4618      	mov	r0, r3
 8009a88:	bd10      	pop	{r4, pc}
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	4770      	bx	lr
 8009a90:	6982      	ldr	r2, [r0, #24]
 8009a92:	b13a      	cbz	r2, 8009aa4 <ucdr_check_final_buffer_behavior+0x30>
 8009a94:	69c1      	ldr	r1, [r0, #28]
 8009a96:	4790      	blx	r2
 8009a98:	f080 0301 	eor.w	r3, r0, #1
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	75a0      	strb	r0, [r4, #22]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	bd10      	pop	{r4, pc}
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	75a0      	strb	r0, [r4, #22]
 8009aa8:	e7fa      	b.n	8009aa0 <ucdr_check_final_buffer_behavior+0x2c>
 8009aaa:	bf00      	nop

08009aac <ucdr_set_on_full_buffer_callback>:
 8009aac:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop

08009ab4 <ucdr_init_buffer_origin_offset_endian>:
 8009ab4:	b410      	push	{r4}
 8009ab6:	9c01      	ldr	r4, [sp, #4]
 8009ab8:	6001      	str	r1, [r0, #0]
 8009aba:	440a      	add	r2, r1
 8009abc:	6042      	str	r2, [r0, #4]
 8009abe:	190a      	adds	r2, r1, r4
 8009ac0:	441c      	add	r4, r3
 8009ac2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8009ac6:	6082      	str	r2, [r0, #8]
 8009ac8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009acc:	7503      	strb	r3, [r0, #20]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ad8:	7542      	strb	r2, [r0, #21]
 8009ada:	7582      	strb	r2, [r0, #22]
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop

08009ae0 <ucdr_init_buffer_origin_offset>:
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	9c04      	ldr	r4, [sp, #16]
 8009ae6:	9400      	str	r4, [sp, #0]
 8009ae8:	2401      	movs	r4, #1
 8009aea:	9401      	str	r4, [sp, #4]
 8009aec:	f7ff ffe2 	bl	8009ab4 <ucdr_init_buffer_origin_offset_endian>
 8009af0:	b002      	add	sp, #8
 8009af2:	bd10      	pop	{r4, pc}

08009af4 <ucdr_init_buffer_origin>:
 8009af4:	b510      	push	{r4, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	2400      	movs	r4, #0
 8009afa:	9400      	str	r4, [sp, #0]
 8009afc:	f7ff fff0 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 8009b00:	b002      	add	sp, #8
 8009b02:	bd10      	pop	{r4, pc}

08009b04 <ucdr_init_buffer>:
 8009b04:	2300      	movs	r3, #0
 8009b06:	f7ff bff5 	b.w	8009af4 <ucdr_init_buffer_origin>
 8009b0a:	bf00      	nop

08009b0c <ucdr_alignment>:
 8009b0c:	fbb0 f3f1 	udiv	r3, r0, r1
 8009b10:	fb03 0011 	mls	r0, r3, r1, r0
 8009b14:	1a08      	subs	r0, r1, r0
 8009b16:	3901      	subs	r1, #1
 8009b18:	4008      	ands	r0, r1
 8009b1a:	4770      	bx	lr

08009b1c <ucdr_buffer_alignment>:
 8009b1c:	7d43      	ldrb	r3, [r0, #21]
 8009b1e:	428b      	cmp	r3, r1
 8009b20:	d208      	bcs.n	8009b34 <ucdr_buffer_alignment+0x18>
 8009b22:	6900      	ldr	r0, [r0, #16]
 8009b24:	fbb0 f3f1 	udiv	r3, r0, r1
 8009b28:	fb01 0013 	mls	r0, r1, r3, r0
 8009b2c:	1a08      	subs	r0, r1, r0
 8009b2e:	3901      	subs	r1, #1
 8009b30:	4008      	ands	r0, r1
 8009b32:	4770      	bx	lr
 8009b34:	2000      	movs	r0, #0
 8009b36:	4770      	bx	lr

08009b38 <ucdr_align_to>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	460d      	mov	r5, r1
 8009b3e:	f7ff ffed 	bl	8009b1c <ucdr_buffer_alignment>
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	6921      	ldr	r1, [r4, #16]
 8009b46:	7565      	strb	r5, [r4, #21]
 8009b48:	181a      	adds	r2, r3, r0
 8009b4a:	6863      	ldr	r3, [r4, #4]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	4408      	add	r0, r1
 8009b50:	bf28      	it	cs
 8009b52:	4613      	movcs	r3, r2
 8009b54:	6120      	str	r0, [r4, #16]
 8009b56:	60a3      	str	r3, [r4, #8]
 8009b58:	bd38      	pop	{r3, r4, r5, pc}
 8009b5a:	bf00      	nop

08009b5c <ucdr_buffer_length>:
 8009b5c:	6882      	ldr	r2, [r0, #8]
 8009b5e:	6800      	ldr	r0, [r0, #0]
 8009b60:	1a10      	subs	r0, r2, r0
 8009b62:	4770      	bx	lr

08009b64 <ucdr_buffer_remaining>:
 8009b64:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009b68:	1a10      	subs	r0, r2, r0
 8009b6a:	4770      	bx	lr

08009b6c <ucdr_check_final_buffer_behavior_array>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	7d83      	ldrb	r3, [r0, #22]
 8009b70:	b963      	cbnz	r3, 8009b8c <ucdr_check_final_buffer_behavior_array+0x20>
 8009b72:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	4604      	mov	r4, r0
 8009b7a:	460d      	mov	r5, r1
 8009b7c:	d308      	bcc.n	8009b90 <ucdr_check_final_buffer_behavior_array+0x24>
 8009b7e:	b139      	cbz	r1, 8009b90 <ucdr_check_final_buffer_behavior_array+0x24>
 8009b80:	6983      	ldr	r3, [r0, #24]
 8009b82:	b163      	cbz	r3, 8009b9e <ucdr_check_final_buffer_behavior_array+0x32>
 8009b84:	69c1      	ldr	r1, [r0, #28]
 8009b86:	4798      	blx	r3
 8009b88:	75a0      	strb	r0, [r4, #22]
 8009b8a:	b108      	cbz	r0, 8009b90 <ucdr_check_final_buffer_behavior_array+0x24>
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	4620      	mov	r0, r4
 8009b92:	f7ff ffe7 	bl	8009b64 <ucdr_buffer_remaining>
 8009b96:	42a8      	cmp	r0, r5
 8009b98:	bf28      	it	cs
 8009b9a:	4628      	movcs	r0, r5
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	7583      	strb	r3, [r0, #22]
 8009ba2:	e7f3      	b.n	8009b8c <ucdr_check_final_buffer_behavior_array+0x20>

08009ba4 <ucdr_advance_buffer>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	460d      	mov	r5, r1
 8009baa:	f7ff ff57 	bl	8009a5c <ucdr_check_buffer_available_for>
 8009bae:	b178      	cbz	r0, 8009bd0 <ucdr_advance_buffer+0x2c>
 8009bb0:	6923      	ldr	r3, [r4, #16]
 8009bb2:	68a2      	ldr	r2, [r4, #8]
 8009bb4:	442b      	add	r3, r5
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	442a      	add	r2, r5
 8009bbc:	7563      	strb	r3, [r4, #21]
 8009bbe:	60a2      	str	r2, [r4, #8]
 8009bc0:	bd38      	pop	{r3, r4, r5, pc}
 8009bc2:	68a2      	ldr	r2, [r4, #8]
 8009bc4:	6923      	ldr	r3, [r4, #16]
 8009bc6:	4402      	add	r2, r0
 8009bc8:	4403      	add	r3, r0
 8009bca:	1a2d      	subs	r5, r5, r0
 8009bcc:	60a2      	str	r2, [r4, #8]
 8009bce:	6123      	str	r3, [r4, #16]
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f7ff ffc9 	bl	8009b6c <ucdr_check_final_buffer_behavior_array>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d1f1      	bne.n	8009bc2 <ucdr_advance_buffer+0x1e>
 8009bde:	2301      	movs	r3, #1
 8009be0:	7563      	strb	r3, [r4, #21]
 8009be2:	bd38      	pop	{r3, r4, r5, pc}

08009be4 <rcl_get_zero_initialized_node>:
 8009be4:	4a03      	ldr	r2, [pc, #12]	; (8009bf4 <rcl_get_zero_initialized_node+0x10>)
 8009be6:	4603      	mov	r3, r0
 8009be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bec:	e883 0003 	stmia.w	r3, {r0, r1}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	4770      	bx	lr
 8009bf4:	08016230 	.word	0x08016230

08009bf8 <rcl_node_init>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	b0a9      	sub	sp, #164	; 0xa4
 8009bfe:	4604      	mov	r4, r0
 8009c00:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8009c04:	a823      	add	r0, sp, #140	; 0x8c
 8009c06:	460e      	mov	r6, r1
 8009c08:	4615      	mov	r5, r2
 8009c0a:	461f      	mov	r7, r3
 8009c0c:	f005 faf6 	bl	800f1fc <rcl_guard_condition_get_default_options>
 8009c10:	f1b8 0f00 	cmp.w	r8, #0
 8009c14:	f000 80e6 	beq.w	8009de4 <rcl_node_init+0x1ec>
 8009c18:	4640      	mov	r0, r8
 8009c1a:	f001 fa71 	bl	800b100 <rcutils_allocator_is_valid>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	f000 80e0 	beq.w	8009de4 <rcl_node_init+0x1ec>
 8009c24:	2e00      	cmp	r6, #0
 8009c26:	f000 80dd 	beq.w	8009de4 <rcl_node_init+0x1ec>
 8009c2a:	2d00      	cmp	r5, #0
 8009c2c:	f000 80da 	beq.w	8009de4 <rcl_node_init+0x1ec>
 8009c30:	2c00      	cmp	r4, #0
 8009c32:	f000 80d7 	beq.w	8009de4 <rcl_node_init+0x1ec>
 8009c36:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009c3a:	f1b9 0f00 	cmp.w	r9, #0
 8009c3e:	f040 80fd 	bne.w	8009e3c <rcl_node_init+0x244>
 8009c42:	2f00      	cmp	r7, #0
 8009c44:	f000 80ce 	beq.w	8009de4 <rcl_node_init+0x1ec>
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f005 f9e1 	bl	800f010 <rcl_context_is_valid>
 8009c4e:	4682      	mov	sl, r0
 8009c50:	2800      	cmp	r0, #0
 8009c52:	f000 80cd 	beq.w	8009df0 <rcl_node_init+0x1f8>
 8009c56:	464a      	mov	r2, r9
 8009c58:	a922      	add	r1, sp, #136	; 0x88
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8009c60:	f001 fce2 	bl	800b628 <rmw_validate_node_name>
 8009c64:	4681      	mov	r9, r0
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f040 80be 	bne.w	8009de8 <rcl_node_init+0x1f0>
 8009c6c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f040 80f0 	bne.w	8009e54 <rcl_node_init+0x25c>
 8009c74:	4628      	mov	r0, r5
 8009c76:	f7f6 fabd 	bl	80001f4 <strlen>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f040 80bb 	bne.w	8009df6 <rcl_node_init+0x1fe>
 8009c80:	4d7c      	ldr	r5, [pc, #496]	; (8009e74 <rcl_node_init+0x27c>)
 8009c82:	a922      	add	r1, sp, #136	; 0x88
 8009c84:	2200      	movs	r2, #0
 8009c86:	4628      	mov	r0, r5
 8009c88:	f001 fcb0 	bl	800b5ec <rmw_validate_namespace>
 8009c8c:	4681      	mov	r9, r0
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f040 80aa 	bne.w	8009de8 <rcl_node_init+0x1f0>
 8009c94:	4682      	mov	sl, r0
 8009c96:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	f040 80e0 	bne.w	8009e5e <rcl_node_init+0x266>
 8009c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8009ca2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009ca6:	2078      	movs	r0, #120	; 0x78
 8009ca8:	4798      	blx	r3
 8009caa:	4681      	mov	r9, r0
 8009cac:	6060      	str	r0, [r4, #4]
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f000 80ca 	beq.w	8009e48 <rcl_node_init+0x250>
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 8009cbc:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 8009cc0:	a808      	add	r0, sp, #32
 8009cc2:	f000 f939 	bl	8009f38 <rcl_node_get_default_options>
 8009cc6:	a908      	add	r1, sp, #32
 8009cc8:	4648      	mov	r0, r9
 8009cca:	2268      	movs	r2, #104	; 0x68
 8009ccc:	f00b fa75 	bl	80151ba <memcpy>
 8009cd0:	6861      	ldr	r1, [r4, #4]
 8009cd2:	6027      	str	r7, [r4, #0]
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	f000 f93d 	bl	8009f54 <rcl_node_options_copy>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d158      	bne.n	8009d90 <rcl_node_init+0x198>
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f7f6 fa88 	bl	80001f4 <strlen>
 8009ce4:	4428      	add	r0, r5
 8009ce6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8009cea:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8009cee:	2b2f      	cmp	r3, #47	; 0x2f
 8009cf0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	bf0c      	ite	eq
 8009cf8:	4b5f      	ldreq	r3, [pc, #380]	; (8009e78 <rcl_node_init+0x280>)
 8009cfa:	4b60      	ldrne	r3, [pc, #384]	; (8009e7c <rcl_node_init+0x284>)
 8009cfc:	9302      	str	r3, [sp, #8]
 8009cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d02:	9301      	str	r3, [sp, #4]
 8009d04:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8009d08:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009d0c:	f001 fa50 	bl	800b1b0 <rcutils_format_string_limit>
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	4631      	mov	r1, r6
 8009d1a:	3028      	adds	r0, #40	; 0x28
 8009d1c:	462a      	mov	r2, r5
 8009d1e:	6866      	ldr	r6, [r4, #4]
 8009d20:	f001 fd70 	bl	800b804 <rmw_create_node>
 8009d24:	6863      	ldr	r3, [r4, #4]
 8009d26:	66b0      	str	r0, [r6, #104]	; 0x68
 8009d28:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d032      	beq.n	8009d94 <rcl_node_init+0x19c>
 8009d2e:	f001 fdfd 	bl	800b92c <rmw_node_get_graph_guard_condition>
 8009d32:	4681      	mov	r9, r0
 8009d34:	b360      	cbz	r0, 8009d90 <rcl_node_init+0x198>
 8009d36:	f8d8 3000 	ldr.w	r3, [r8]
 8009d3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009d3e:	6866      	ldr	r6, [r4, #4]
 8009d40:	2008      	movs	r0, #8
 8009d42:	4798      	blx	r3
 8009d44:	6863      	ldr	r3, [r4, #4]
 8009d46:	66f0      	str	r0, [r6, #108]	; 0x6c
 8009d48:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8009d4c:	f1bb 0f00 	cmp.w	fp, #0
 8009d50:	d020      	beq.n	8009d94 <rcl_node_init+0x19c>
 8009d52:	a806      	add	r0, sp, #24
 8009d54:	f005 f9c2 	bl	800f0dc <rcl_get_zero_initialized_guard_condition>
 8009d58:	a806      	add	r0, sp, #24
 8009d5a:	c803      	ldmia	r0, {r0, r1}
 8009d5c:	6863      	ldr	r3, [r4, #4]
 8009d5e:	46c4      	mov	ip, r8
 8009d60:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8009d64:	e88b 0003 	stmia.w	fp, {r0, r1}
 8009d68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d6c:	ae23      	add	r6, sp, #140	; 0x8c
 8009d6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009d70:	f8dc 3000 	ldr.w	r3, [ip]
 8009d74:	6033      	str	r3, [r6, #0]
 8009d76:	ab28      	add	r3, sp, #160	; 0xa0
 8009d78:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009d7c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009d80:	4649      	mov	r1, r9
 8009d82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d84:	463a      	mov	r2, r7
 8009d86:	4670      	mov	r0, lr
 8009d88:	f005 f9b2 	bl	800f0f0 <rcl_guard_condition_init_from_rmw>
 8009d8c:	4681      	mov	r9, r0
 8009d8e:	b328      	cbz	r0, 8009ddc <rcl_node_init+0x1e4>
 8009d90:	6863      	ldr	r3, [r4, #4]
 8009d92:	b1f3      	cbz	r3, 8009dd2 <rcl_node_init+0x1da>
 8009d94:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009d96:	b128      	cbz	r0, 8009da4 <rcl_node_init+0x1ac>
 8009d98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d9c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009da0:	4798      	blx	r3
 8009da2:	6863      	ldr	r3, [r4, #4]
 8009da4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8009da6:	b110      	cbz	r0, 8009dae <rcl_node_init+0x1b6>
 8009da8:	f001 fd44 	bl	800b834 <rmw_destroy_node>
 8009dac:	6863      	ldr	r3, [r4, #4]
 8009dae:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009db0:	b148      	cbz	r0, 8009dc6 <rcl_node_init+0x1ce>
 8009db2:	f005 f9fd 	bl	800f1b0 <rcl_guard_condition_fini>
 8009db6:	6863      	ldr	r3, [r4, #4]
 8009db8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009dbc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009dbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dc2:	4798      	blx	r3
 8009dc4:	6863      	ldr	r3, [r4, #4]
 8009dc6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dd0:	4798      	blx	r3
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e9c4 3300 	strd	r3, r3, [r4]
 8009dd8:	f04f 0901 	mov.w	r9, #1
 8009ddc:	f1ba 0f00 	cmp.w	sl, #0
 8009de0:	d125      	bne.n	8009e2e <rcl_node_init+0x236>
 8009de2:	e001      	b.n	8009de8 <rcl_node_init+0x1f0>
 8009de4:	f04f 090b 	mov.w	r9, #11
 8009de8:	4648      	mov	r0, r9
 8009dea:	b029      	add	sp, #164	; 0xa4
 8009dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df0:	f04f 0965 	mov.w	r9, #101	; 0x65
 8009df4:	e7f8      	b.n	8009de8 <rcl_node_init+0x1f0>
 8009df6:	782b      	ldrb	r3, [r5, #0]
 8009df8:	2b2f      	cmp	r3, #47	; 0x2f
 8009dfa:	f43f af42 	beq.w	8009c82 <rcl_node_init+0x8a>
 8009dfe:	9503      	str	r5, [sp, #12]
 8009e00:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	4b1e      	ldr	r3, [pc, #120]	; (8009e80 <rcl_node_init+0x288>)
 8009e08:	9302      	str	r3, [sp, #8]
 8009e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e0e:	9301      	str	r3, [sp, #4]
 8009e10:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8009e14:	f001 f9cc 	bl	800b1b0 <rcutils_format_string_limit>
 8009e18:	4605      	mov	r5, r0
 8009e1a:	b340      	cbz	r0, 8009e6e <rcl_node_init+0x276>
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	a922      	add	r1, sp, #136	; 0x88
 8009e20:	9222      	str	r2, [sp, #136]	; 0x88
 8009e22:	f001 fbe3 	bl	800b5ec <rmw_validate_namespace>
 8009e26:	4681      	mov	r9, r0
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	f43f af34 	beq.w	8009c96 <rcl_node_init+0x9e>
 8009e2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e32:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009e36:	4628      	mov	r0, r5
 8009e38:	4798      	blx	r3
 8009e3a:	e7d5      	b.n	8009de8 <rcl_node_init+0x1f0>
 8009e3c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009e40:	4648      	mov	r0, r9
 8009e42:	b029      	add	sp, #164	; 0xa4
 8009e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e48:	f04f 090a 	mov.w	r9, #10
 8009e4c:	f1ba 0f00 	cmp.w	sl, #0
 8009e50:	d1ed      	bne.n	8009e2e <rcl_node_init+0x236>
 8009e52:	e7c9      	b.n	8009de8 <rcl_node_init+0x1f0>
 8009e54:	f001 fc3a 	bl	800b6cc <rmw_node_name_validation_result_string>
 8009e58:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8009e5c:	e7c4      	b.n	8009de8 <rcl_node_init+0x1f0>
 8009e5e:	f001 fbd7 	bl	800b610 <rmw_namespace_validation_result_string>
 8009e62:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8009e66:	f1ba 0f00 	cmp.w	sl, #0
 8009e6a:	d1e0      	bne.n	8009e2e <rcl_node_init+0x236>
 8009e6c:	e7bc      	b.n	8009de8 <rcl_node_init+0x1f0>
 8009e6e:	f04f 090a 	mov.w	r9, #10
 8009e72:	e7b9      	b.n	8009de8 <rcl_node_init+0x1f0>
 8009e74:	08016218 	.word	0x08016218
 8009e78:	08016220 	.word	0x08016220
 8009e7c:	08016228 	.word	0x08016228
 8009e80:	0801621c 	.word	0x0801621c

08009e84 <rcl_node_fini>:
 8009e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e86:	b320      	cbz	r0, 8009ed2 <rcl_node_fini+0x4e>
 8009e88:	6845      	ldr	r5, [r0, #4]
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	b1fd      	cbz	r5, 8009ece <rcl_node_fini+0x4a>
 8009e8e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8009e90:	686f      	ldr	r7, [r5, #4]
 8009e92:	692e      	ldr	r6, [r5, #16]
 8009e94:	f001 fcce 	bl	800b834 <rmw_destroy_node>
 8009e98:	6863      	ldr	r3, [r4, #4]
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009e9e:	f005 f987 	bl	800f1b0 <rcl_guard_condition_fini>
 8009ea2:	ea55 0300 	orrs.w	r3, r5, r0
 8009ea6:	6863      	ldr	r3, [r4, #4]
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009eac:	bf14      	ite	ne
 8009eae:	2501      	movne	r5, #1
 8009eb0:	2500      	moveq	r5, #0
 8009eb2:	47b8      	blx	r7
 8009eb4:	6863      	ldr	r3, [r4, #4]
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009eba:	47b8      	blx	r7
 8009ebc:	6863      	ldr	r3, [r4, #4]
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009ec2:	47b8      	blx	r7
 8009ec4:	6860      	ldr	r0, [r4, #4]
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	47b8      	blx	r7
 8009eca:	2300      	movs	r3, #0
 8009ecc:	6063      	str	r3, [r4, #4]
 8009ece:	4628      	mov	r0, r5
 8009ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ed2:	25c8      	movs	r5, #200	; 0xc8
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ed8 <rcl_node_is_valid_except_context>:
 8009ed8:	b128      	cbz	r0, 8009ee6 <rcl_node_is_valid_except_context+0xe>
 8009eda:	6840      	ldr	r0, [r0, #4]
 8009edc:	b118      	cbz	r0, 8009ee6 <rcl_node_is_valid_except_context+0xe>
 8009ede:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009ee0:	3800      	subs	r0, #0
 8009ee2:	bf18      	it	ne
 8009ee4:	2001      	movne	r0, #1
 8009ee6:	4770      	bx	lr

08009ee8 <rcl_node_is_valid>:
 8009ee8:	b130      	cbz	r0, 8009ef8 <rcl_node_is_valid+0x10>
 8009eea:	6843      	ldr	r3, [r0, #4]
 8009eec:	b123      	cbz	r3, 8009ef8 <rcl_node_is_valid+0x10>
 8009eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ef0:	b113      	cbz	r3, 8009ef8 <rcl_node_is_valid+0x10>
 8009ef2:	6800      	ldr	r0, [r0, #0]
 8009ef4:	f005 b88c 	b.w	800f010 <rcl_context_is_valid>
 8009ef8:	2000      	movs	r0, #0
 8009efa:	4770      	bx	lr

08009efc <rcl_node_get_name>:
 8009efc:	b120      	cbz	r0, 8009f08 <rcl_node_get_name+0xc>
 8009efe:	6840      	ldr	r0, [r0, #4]
 8009f00:	b110      	cbz	r0, 8009f08 <rcl_node_get_name+0xc>
 8009f02:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009f04:	b100      	cbz	r0, 8009f08 <rcl_node_get_name+0xc>
 8009f06:	6880      	ldr	r0, [r0, #8]
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop

08009f0c <rcl_node_get_namespace>:
 8009f0c:	b120      	cbz	r0, 8009f18 <rcl_node_get_namespace+0xc>
 8009f0e:	6840      	ldr	r0, [r0, #4]
 8009f10:	b110      	cbz	r0, 8009f18 <rcl_node_get_namespace+0xc>
 8009f12:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009f14:	b100      	cbz	r0, 8009f18 <rcl_node_get_namespace+0xc>
 8009f16:	68c0      	ldr	r0, [r0, #12]
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop

08009f1c <rcl_node_get_options>:
 8009f1c:	b128      	cbz	r0, 8009f2a <rcl_node_get_options+0xe>
 8009f1e:	6840      	ldr	r0, [r0, #4]
 8009f20:	b118      	cbz	r0, 8009f2a <rcl_node_get_options+0xe>
 8009f22:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	bf08      	it	eq
 8009f28:	2000      	moveq	r0, #0
 8009f2a:	4770      	bx	lr

08009f2c <rcl_node_get_rmw_handle>:
 8009f2c:	b110      	cbz	r0, 8009f34 <rcl_node_get_rmw_handle+0x8>
 8009f2e:	6840      	ldr	r0, [r0, #4]
 8009f30:	b100      	cbz	r0, 8009f34 <rcl_node_get_rmw_handle+0x8>
 8009f32:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop

08009f38 <rcl_node_get_default_options>:
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	2268      	movs	r2, #104	; 0x68
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	2100      	movs	r1, #0
 8009f40:	f00b f872 	bl	8015028 <memset>
 8009f44:	4620      	mov	r0, r4
 8009f46:	f001 f8cd 	bl	800b0e4 <rcutils_get_default_allocator>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	7523      	strb	r3, [r4, #20]
 8009f4e:	4620      	mov	r0, r4
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	bf00      	nop

08009f54 <rcl_node_options_copy>:
 8009f54:	b1d0      	cbz	r0, 8009f8c <rcl_node_options_copy+0x38>
 8009f56:	b570      	push	{r4, r5, r6, lr}
 8009f58:	460c      	mov	r4, r1
 8009f5a:	b1a9      	cbz	r1, 8009f88 <rcl_node_options_copy+0x34>
 8009f5c:	4288      	cmp	r0, r1
 8009f5e:	4684      	mov	ip, r0
 8009f60:	d012      	beq.n	8009f88 <rcl_node_options_copy+0x34>
 8009f62:	4605      	mov	r5, r0
 8009f64:	8a86      	ldrh	r6, [r0, #20]
 8009f66:	468e      	mov	lr, r1
 8009f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	f8ce 3000 	str.w	r3, [lr]
 8009f74:	f10c 0118 	add.w	r1, ip, #24
 8009f78:	2250      	movs	r2, #80	; 0x50
 8009f7a:	82a6      	strh	r6, [r4, #20]
 8009f7c:	f104 0018 	add.w	r0, r4, #24
 8009f80:	f00b f91b 	bl	80151ba <memcpy>
 8009f84:	2000      	movs	r0, #0
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	200b      	movs	r0, #11
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	200b      	movs	r0, #11
 8009f8e:	4770      	bx	lr

08009f90 <rcl_get_zero_initialized_subscription>:
 8009f90:	4b01      	ldr	r3, [pc, #4]	; (8009f98 <rcl_get_zero_initialized_subscription+0x8>)
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	08016238 	.word	0x08016238

08009f9c <rcl_subscription_init>:
 8009f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fa0:	b089      	sub	sp, #36	; 0x24
 8009fa2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009fa4:	b1d6      	cbz	r6, 8009fdc <rcl_subscription_init+0x40>
 8009fa6:	f106 0950 	add.w	r9, r6, #80	; 0x50
 8009faa:	4604      	mov	r4, r0
 8009fac:	4648      	mov	r0, r9
 8009fae:	460d      	mov	r5, r1
 8009fb0:	4690      	mov	r8, r2
 8009fb2:	461f      	mov	r7, r3
 8009fb4:	f001 f8a4 	bl	800b100 <rcutils_allocator_is_valid>
 8009fb8:	b180      	cbz	r0, 8009fdc <rcl_subscription_init+0x40>
 8009fba:	b17c      	cbz	r4, 8009fdc <rcl_subscription_init+0x40>
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f7ff ff93 	bl	8009ee8 <rcl_node_is_valid>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d054      	beq.n	800a070 <rcl_subscription_init+0xd4>
 8009fc6:	f1b8 0f00 	cmp.w	r8, #0
 8009fca:	d007      	beq.n	8009fdc <rcl_subscription_init+0x40>
 8009fcc:	b137      	cbz	r7, 8009fdc <rcl_subscription_init+0x40>
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	b14b      	cbz	r3, 8009fe6 <rcl_subscription_init+0x4a>
 8009fd2:	2764      	movs	r7, #100	; 0x64
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	b009      	add	sp, #36	; 0x24
 8009fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fdc:	270b      	movs	r7, #11
 8009fde:	4638      	mov	r0, r7
 8009fe0:	b009      	add	sp, #36	; 0x24
 8009fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fe6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009fea:	aa07      	add	r2, sp, #28
 8009fec:	9205      	str	r2, [sp, #20]
 8009fee:	9307      	str	r3, [sp, #28]
 8009ff0:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8009ff4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ff8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a002:	4628      	mov	r0, r5
 800a004:	f005 fb40 	bl	800f688 <rcl_node_resolve_name>
 800a008:	4607      	mov	r7, r0
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d15f      	bne.n	800a0ce <rcl_subscription_init+0x132>
 800a00e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800a012:	21c8      	movs	r1, #200	; 0xc8
 800a014:	2001      	movs	r0, #1
 800a016:	4798      	blx	r3
 800a018:	6020      	str	r0, [r4, #0]
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d05d      	beq.n	800a0da <rcl_subscription_init+0x13e>
 800a01e:	4628      	mov	r0, r5
 800a020:	f7ff ff84 	bl	8009f2c <rcl_node_get_rmw_handle>
 800a024:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	9a07      	ldr	r2, [sp, #28]
 800a02c:	6827      	ldr	r7, [r4, #0]
 800a02e:	4641      	mov	r1, r8
 800a030:	4633      	mov	r3, r6
 800a032:	f001 fd17 	bl	800ba64 <rmw_create_subscription>
 800a036:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800a03a:	6827      	ldr	r7, [r4, #0]
 800a03c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800a040:	b348      	cbz	r0, 800a096 <rcl_subscription_init+0xfa>
 800a042:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800a046:	f001 fdef 	bl	800bc28 <rmw_subscription_get_actual_qos>
 800a04a:	4607      	mov	r7, r0
 800a04c:	b9a8      	cbnz	r0, 800a07a <rcl_subscription_init+0xde>
 800a04e:	6820      	ldr	r0, [r4, #0]
 800a050:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 800a054:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800a058:	2270      	movs	r2, #112	; 0x70
 800a05a:	4631      	mov	r1, r6
 800a05c:	f00b f8ad 	bl	80151ba <memcpy>
 800a060:	9807      	ldr	r0, [sp, #28]
 800a062:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a064:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800a066:	4798      	blx	r3
 800a068:	4638      	mov	r0, r7
 800a06a:	b009      	add	sp, #36	; 0x24
 800a06c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a070:	27c8      	movs	r7, #200	; 0xc8
 800a072:	4638      	mov	r0, r7
 800a074:	b009      	add	sp, #36	; 0x24
 800a076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a07a:	6827      	ldr	r7, [r4, #0]
 800a07c:	b32f      	cbz	r7, 800a0ca <rcl_subscription_init+0x12e>
 800a07e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a082:	b14b      	cbz	r3, 800a098 <rcl_subscription_init+0xfc>
 800a084:	4628      	mov	r0, r5
 800a086:	f7ff ff51 	bl	8009f2c <rcl_node_get_rmw_handle>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800a090:	f001 fdda 	bl	800bc48 <rmw_destroy_subscription>
 800a094:	6827      	ldr	r7, [r4, #0]
 800a096:	b197      	cbz	r7, 800a0be <rcl_subscription_init+0x122>
 800a098:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800a09c:	4628      	mov	r0, r5
 800a09e:	f001 f82f 	bl	800b100 <rcutils_allocator_is_valid>
 800a0a2:	b158      	cbz	r0, 800a0bc <rcl_subscription_init+0x120>
 800a0a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0a6:	b148      	cbz	r0, 800a0bc <rcl_subscription_init+0x120>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	f001 fa29 	bl	800b500 <rmw_subscription_content_filter_options_fini>
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	b9b8      	cbnz	r0, 800a0e2 <rcl_subscription_init+0x146>
 800a0b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a0b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0b8:	4798      	blx	r3
 800a0ba:	66fd      	str	r5, [r7, #108]	; 0x6c
 800a0bc:	6827      	ldr	r7, [r4, #0]
 800a0be:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a0c0:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	4798      	blx	r3
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	2701      	movs	r7, #1
 800a0cc:	e7c8      	b.n	800a060 <rcl_subscription_init+0xc4>
 800a0ce:	2867      	cmp	r0, #103	; 0x67
 800a0d0:	d0c6      	beq.n	800a060 <rcl_subscription_init+0xc4>
 800a0d2:	2869      	cmp	r0, #105	; 0x69
 800a0d4:	d003      	beq.n	800a0de <rcl_subscription_init+0x142>
 800a0d6:	280a      	cmp	r0, #10
 800a0d8:	d1f7      	bne.n	800a0ca <rcl_subscription_init+0x12e>
 800a0da:	270a      	movs	r7, #10
 800a0dc:	e7c0      	b.n	800a060 <rcl_subscription_init+0xc4>
 800a0de:	2767      	movs	r7, #103	; 0x67
 800a0e0:	e7be      	b.n	800a060 <rcl_subscription_init+0xc4>
 800a0e2:	f004 ff77 	bl	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 800a0e6:	6827      	ldr	r7, [r4, #0]
 800a0e8:	e7e9      	b.n	800a0be <rcl_subscription_init+0x122>
 800a0ea:	bf00      	nop

0800a0ec <rcl_subscription_fini>:
 800a0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d039      	beq.n	800a168 <rcl_subscription_fini+0x7c>
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	4608      	mov	r0, r1
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	f7ff feed 	bl	8009ed8 <rcl_node_is_valid_except_context>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d037      	beq.n	800a172 <rcl_subscription_fini+0x86>
 800a102:	6823      	ldr	r3, [r4, #0]
 800a104:	b363      	cbz	r3, 800a160 <rcl_subscription_fini+0x74>
 800a106:	4628      	mov	r0, r5
 800a108:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 800a10a:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800a10e:	f7ff ff0d 	bl	8009f2c <rcl_node_get_rmw_handle>
 800a112:	b390      	cbz	r0, 800a17a <rcl_subscription_fini+0x8e>
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800a11a:	f001 fd95 	bl	800bc48 <rmw_destroy_subscription>
 800a11e:	6826      	ldr	r6, [r4, #0]
 800a120:	1e05      	subs	r5, r0, #0
 800a122:	bf18      	it	ne
 800a124:	2501      	movne	r5, #1
 800a126:	b37e      	cbz	r6, 800a188 <rcl_subscription_fini+0x9c>
 800a128:	f106 0950 	add.w	r9, r6, #80	; 0x50
 800a12c:	4648      	mov	r0, r9
 800a12e:	f000 ffe7 	bl	800b100 <rcutils_allocator_is_valid>
 800a132:	b358      	cbz	r0, 800a18c <rcl_subscription_fini+0xa0>
 800a134:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 800a136:	b150      	cbz	r0, 800a14e <rcl_subscription_fini+0x62>
 800a138:	4649      	mov	r1, r9
 800a13a:	f001 f9e1 	bl	800b500 <rmw_subscription_content_filter_options_fini>
 800a13e:	4681      	mov	r9, r0
 800a140:	b9e8      	cbnz	r0, 800a17e <rcl_subscription_fini+0x92>
 800a142:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a144:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800a146:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 800a148:	4798      	blx	r3
 800a14a:	f8c6 906c 	str.w	r9, [r6, #108]	; 0x6c
 800a14e:	6826      	ldr	r6, [r4, #0]
 800a150:	4630      	mov	r0, r6
 800a152:	4641      	mov	r1, r8
 800a154:	47b8      	blx	r7
 800a156:	2300      	movs	r3, #0
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	4628      	mov	r0, r5
 800a15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a160:	461d      	mov	r5, r3
 800a162:	4628      	mov	r0, r5
 800a164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a168:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800a16c:	4628      	mov	r0, r5
 800a16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a172:	25c8      	movs	r5, #200	; 0xc8
 800a174:	4628      	mov	r0, r5
 800a176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a17a:	250b      	movs	r5, #11
 800a17c:	e7f1      	b.n	800a162 <rcl_subscription_fini+0x76>
 800a17e:	f004 ff29 	bl	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 800a182:	6826      	ldr	r6, [r4, #0]
 800a184:	2800      	cmp	r0, #0
 800a186:	d0e3      	beq.n	800a150 <rcl_subscription_fini+0x64>
 800a188:	2501      	movs	r5, #1
 800a18a:	e7e1      	b.n	800a150 <rcl_subscription_fini+0x64>
 800a18c:	6826      	ldr	r6, [r4, #0]
 800a18e:	2501      	movs	r5, #1
 800a190:	e7de      	b.n	800a150 <rcl_subscription_fini+0x64>
 800a192:	bf00      	nop

0800a194 <rcl_subscription_get_default_options>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	4d14      	ldr	r5, [pc, #80]	; (800a1e8 <rcl_subscription_get_default_options+0x54>)
 800a198:	4914      	ldr	r1, [pc, #80]	; (800a1ec <rcl_subscription_get_default_options+0x58>)
 800a19a:	b08a      	sub	sp, #40	; 0x28
 800a19c:	4604      	mov	r4, r0
 800a19e:	2250      	movs	r2, #80	; 0x50
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f00b f80a 	bl	80151ba <memcpy>
 800a1a6:	a804      	add	r0, sp, #16
 800a1a8:	f000 ff9c 	bl	800b0e4 <rcutils_get_default_allocator>
 800a1ac:	f10d 0c10 	add.w	ip, sp, #16
 800a1b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a1b4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800a1b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a1bc:	466e      	mov	r6, sp
 800a1be:	f8dc 3000 	ldr.w	r3, [ip]
 800a1c2:	f8ce 3000 	str.w	r3, [lr]
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f001 f9b4 	bl	800b534 <rmw_get_default_subscription_options>
 800a1cc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a1d0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a1d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a1d8:	2270      	movs	r2, #112	; 0x70
 800a1da:	4629      	mov	r1, r5
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f00a ffec 	bl	80151ba <memcpy>
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	b00a      	add	sp, #40	; 0x28
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	20009140 	.word	0x20009140
 800a1ec:	08016240 	.word	0x08016240

0800a1f0 <rcl_take>:
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d04a      	beq.n	800a28a <rcl_take+0x9a>
 800a1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	6800      	ldr	r0, [r0, #0]
 800a1fc:	b0a4      	sub	sp, #144	; 0x90
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d03b      	beq.n	800a27a <rcl_take+0x8a>
 800a202:	461f      	mov	r7, r3
 800a204:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d036      	beq.n	800a27a <rcl_take+0x8a>
 800a20c:	460e      	mov	r6, r1
 800a20e:	2900      	cmp	r1, #0
 800a210:	d039      	beq.n	800a286 <rcl_take+0x96>
 800a212:	4615      	mov	r5, r2
 800a214:	2a00      	cmp	r2, #0
 800a216:	d03c      	beq.n	800a292 <rcl_take+0xa2>
 800a218:	a802      	add	r0, sp, #8
 800a21a:	f001 f991 	bl	800b540 <rmw_get_zero_initialized_message_info>
 800a21e:	f10d 0c08 	add.w	ip, sp, #8
 800a222:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a226:	46ae      	mov	lr, r5
 800a228:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a22c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a230:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a234:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a238:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a23c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800a240:	f04f 0800 	mov.w	r8, #0
 800a244:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800a248:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	462b      	mov	r3, r5
 800a250:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 800a254:	9700      	str	r7, [sp, #0]
 800a256:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 800a25a:	4631      	mov	r1, r6
 800a25c:	f001 fd54 	bl	800bd08 <rmw_take_with_info>
 800a260:	4603      	mov	r3, r0
 800a262:	b9c0      	cbnz	r0, 800a296 <rcl_take+0xa6>
 800a264:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 800a268:	f240 1291 	movw	r2, #401	; 0x191
 800a26c:	2900      	cmp	r1, #0
 800a26e:	bf08      	it	eq
 800a270:	4613      	moveq	r3, r2
 800a272:	4618      	mov	r0, r3
 800a274:	b024      	add	sp, #144	; 0x90
 800a276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a27a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a27e:	4618      	mov	r0, r3
 800a280:	b024      	add	sp, #144	; 0x90
 800a282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a286:	230b      	movs	r3, #11
 800a288:	e7f3      	b.n	800a272 <rcl_take+0x82>
 800a28a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a28e:	4618      	mov	r0, r3
 800a290:	4770      	bx	lr
 800a292:	ad14      	add	r5, sp, #80	; 0x50
 800a294:	e7c0      	b.n	800a218 <rcl_take+0x28>
 800a296:	f004 fe9d 	bl	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 800a29a:	4603      	mov	r3, r0
 800a29c:	e7e9      	b.n	800a272 <rcl_take+0x82>
 800a29e:	bf00      	nop

0800a2a0 <rcl_subscription_get_rmw_handle>:
 800a2a0:	b118      	cbz	r0, 800a2aa <rcl_subscription_get_rmw_handle+0xa>
 800a2a2:	6800      	ldr	r0, [r0, #0]
 800a2a4:	b108      	cbz	r0, 800a2aa <rcl_subscription_get_rmw_handle+0xa>
 800a2a6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800a2aa:	4770      	bx	lr

0800a2ac <rcl_subscription_is_valid>:
 800a2ac:	b130      	cbz	r0, 800a2bc <rcl_subscription_is_valid+0x10>
 800a2ae:	6800      	ldr	r0, [r0, #0]
 800a2b0:	b120      	cbz	r0, 800a2bc <rcl_subscription_is_valid+0x10>
 800a2b2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800a2b6:	3800      	subs	r0, #0
 800a2b8:	bf18      	it	ne
 800a2ba:	2001      	movne	r0, #1
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop

0800a2c0 <_rclc_check_for_new_data>:
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d046      	beq.n	800a352 <_rclc_check_for_new_data+0x92>
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	7802      	ldrb	r2, [r0, #0]
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2a0a      	cmp	r2, #10
 800a2ce:	d842      	bhi.n	800a356 <_rclc_check_for_new_data+0x96>
 800a2d0:	e8df f002 	tbb	[pc, r2]
 800a2d4:	14181212 	.word	0x14181212
 800a2d8:	06060614 	.word	0x06060614
 800a2dc:	2e1a      	.short	0x2e1a
 800a2de:	16          	.byte	0x16
 800a2df:	00          	.byte	0x00
 800a2e0:	6a0a      	ldr	r2, [r1, #32]
 800a2e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2e4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	1a12      	subs	r2, r2, r0
 800a2ec:	bf18      	it	ne
 800a2ee:	2201      	movne	r2, #1
 800a2f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a2f4:	b004      	add	sp, #16
 800a2f6:	bd10      	pop	{r4, pc}
 800a2f8:	680a      	ldr	r2, [r1, #0]
 800a2fa:	e7f2      	b.n	800a2e2 <_rclc_check_for_new_data+0x22>
 800a2fc:	698a      	ldr	r2, [r1, #24]
 800a2fe:	e7f0      	b.n	800a2e2 <_rclc_check_for_new_data+0x22>
 800a300:	688a      	ldr	r2, [r1, #8]
 800a302:	e7ee      	b.n	800a2e2 <_rclc_check_for_new_data+0x22>
 800a304:	690a      	ldr	r2, [r1, #16]
 800a306:	e7ec      	b.n	800a2e2 <_rclc_check_for_new_data+0x22>
 800a308:	685c      	ldr	r4, [r3, #4]
 800a30a:	4608      	mov	r0, r1
 800a30c:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800a310:	f104 0143 	add.w	r1, r4, #67	; 0x43
 800a314:	f104 0342 	add.w	r3, r4, #66	; 0x42
 800a318:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800a322:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800a326:	f104 0110 	add.w	r1, r4, #16
 800a32a:	f006 fd35 	bl	8010d98 <rcl_action_client_wait_set_get_entities_ready>
 800a32e:	e7e1      	b.n	800a2f4 <_rclc_check_for_new_data+0x34>
 800a330:	685c      	ldr	r4, [r3, #4]
 800a332:	f104 0223 	add.w	r2, r4, #35	; 0x23
 800a336:	f104 0322 	add.w	r3, r4, #34	; 0x22
 800a33a:	e9cd 3200 	strd	r3, r2, [sp]
 800a33e:	4608      	mov	r0, r1
 800a340:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800a344:	f104 0220 	add.w	r2, r4, #32
 800a348:	f104 0110 	add.w	r1, r4, #16
 800a34c:	f006 ff3a 	bl	80111c4 <rcl_action_server_wait_set_get_entities_ready>
 800a350:	e7d0      	b.n	800a2f4 <_rclc_check_for_new_data+0x34>
 800a352:	200b      	movs	r0, #11
 800a354:	4770      	bx	lr
 800a356:	2001      	movs	r0, #1
 800a358:	e7cc      	b.n	800a2f4 <_rclc_check_for_new_data+0x34>
 800a35a:	bf00      	nop

0800a35c <_rclc_take_new_data>:
 800a35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a35e:	b09b      	sub	sp, #108	; 0x6c
 800a360:	2800      	cmp	r0, #0
 800a362:	f000 8088 	beq.w	800a476 <_rclc_take_new_data+0x11a>
 800a366:	7803      	ldrb	r3, [r0, #0]
 800a368:	4604      	mov	r4, r0
 800a36a:	2b0a      	cmp	r3, #10
 800a36c:	f200 8167 	bhi.w	800a63e <_rclc_take_new_data+0x2e2>
 800a370:	e8df f003 	tbb	[pc, r3]
 800a374:	44152d2d 	.word	0x44152d2d
 800a378:	19191944 	.word	0x19191944
 800a37c:	065a      	.short	0x065a
 800a37e:	15          	.byte	0x15
 800a37f:	00          	.byte	0x00
 800a380:	6840      	ldr	r0, [r0, #4]
 800a382:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a386:	2b00      	cmp	r3, #0
 800a388:	f040 80b2 	bne.w	800a4f0 <_rclc_take_new_data+0x194>
 800a38c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800a390:	2b00      	cmp	r3, #0
 800a392:	f040 80e4 	bne.w	800a55e <_rclc_take_new_data+0x202>
 800a396:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d16f      	bne.n	800a47e <_rclc_take_new_data+0x122>
 800a39e:	2500      	movs	r5, #0
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	b01b      	add	sp, #108	; 0x6c
 800a3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a3a8:	6a0b      	ldr	r3, [r1, #32]
 800a3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0f5      	beq.n	800a39e <_rclc_take_new_data+0x42>
 800a3b2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a3b6:	f104 0110 	add.w	r1, r4, #16
 800a3ba:	f005 fb0f 	bl	800f9dc <rcl_take_request>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d0ec      	beq.n	800a39e <_rclc_take_new_data+0x42>
 800a3c4:	f240 2359 	movw	r3, #601	; 0x259
 800a3c8:	4298      	cmp	r0, r3
 800a3ca:	d013      	beq.n	800a3f4 <_rclc_take_new_data+0x98>
 800a3cc:	e029      	b.n	800a422 <_rclc_take_new_data+0xc6>
 800a3ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a3d0:	680b      	ldr	r3, [r1, #0]
 800a3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0e1      	beq.n	800a39e <_rclc_take_new_data+0x42>
 800a3da:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	aa0a      	add	r2, sp, #40	; 0x28
 800a3e2:	f7ff ff05 	bl	800a1f0 <rcl_take>
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d0d9      	beq.n	800a3a0 <_rclc_take_new_data+0x44>
 800a3ec:	f240 1391 	movw	r3, #401	; 0x191
 800a3f0:	4298      	cmp	r0, r3
 800a3f2:	d116      	bne.n	800a422 <_rclc_take_new_data+0xc6>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a3fa:	e7d1      	b.n	800a3a0 <_rclc_take_new_data+0x44>
 800a3fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a3fe:	698b      	ldr	r3, [r1, #24]
 800a400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0ca      	beq.n	800a39e <_rclc_take_new_data+0x42>
 800a408:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a40c:	f104 0110 	add.w	r1, r4, #16
 800a410:	f004 fd8e 	bl	800ef30 <rcl_take_response>
 800a414:	4605      	mov	r5, r0
 800a416:	2800      	cmp	r0, #0
 800a418:	d0c1      	beq.n	800a39e <_rclc_take_new_data+0x42>
 800a41a:	f240 13f5 	movw	r3, #501	; 0x1f5
 800a41e:	4298      	cmp	r0, r3
 800a420:	d0be      	beq.n	800a3a0 <_rclc_take_new_data+0x44>
 800a422:	f000 fea9 	bl	800b178 <rcutils_reset_error>
 800a426:	e7bb      	b.n	800a3a0 <_rclc_take_new_data+0x44>
 800a428:	6840      	ldr	r0, [r0, #4]
 800a42a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d17d      	bne.n	800a52e <_rclc_take_new_data+0x1d2>
 800a432:	69c3      	ldr	r3, [r0, #28]
 800a434:	b11b      	cbz	r3, 800a43e <_rclc_take_new_data+0xe2>
 800a436:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d144      	bne.n	800a4c8 <_rclc_take_new_data+0x16c>
 800a43e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a442:	2b00      	cmp	r3, #0
 800a444:	f040 80ac 	bne.w	800a5a0 <_rclc_take_new_data+0x244>
 800a448:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0a6      	beq.n	800a39e <_rclc_take_new_data+0x42>
 800a450:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a452:	a90a      	add	r1, sp, #40	; 0x28
 800a454:	3010      	adds	r0, #16
 800a456:	f006 fb77 	bl	8010b48 <rcl_action_take_result_response>
 800a45a:	4605      	mov	r5, r0
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d1e0      	bne.n	800a422 <_rclc_take_new_data+0xc6>
 800a460:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a464:	6860      	ldr	r0, [r4, #4]
 800a466:	f006 ffd1 	bl	801140c <rclc_action_find_handle_by_result_request_sequence_number>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d098      	beq.n	800a3a0 <_rclc_take_new_data+0x44>
 800a46e:	2301      	movs	r3, #1
 800a470:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800a474:	e794      	b.n	800a3a0 <_rclc_take_new_data+0x44>
 800a476:	250b      	movs	r5, #11
 800a478:	4628      	mov	r0, r5
 800a47a:	b01b      	add	sp, #108	; 0x6c
 800a47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a47e:	ae04      	add	r6, sp, #16
 800a480:	aa0a      	add	r2, sp, #40	; 0x28
 800a482:	3010      	adds	r0, #16
 800a484:	4631      	mov	r1, r6
 800a486:	f006 fdd1 	bl	801102c <rcl_action_take_cancel_request>
 800a48a:	4605      	mov	r5, r0
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d1c8      	bne.n	800a422 <_rclc_take_new_data+0xc6>
 800a490:	6860      	ldr	r0, [r4, #4]
 800a492:	a90a      	add	r1, sp, #40	; 0x28
 800a494:	f006 ff78 	bl	8011388 <rclc_action_find_goal_handle_by_uuid>
 800a498:	4607      	mov	r7, r0
 800a49a:	2800      	cmp	r0, #0
 800a49c:	f000 80bb 	beq.w	800a616 <_rclc_take_new_data+0x2ba>
 800a4a0:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	f006 fef9 	bl	801129c <rcl_action_transition_goal_state>
 800a4aa:	2803      	cmp	r0, #3
 800a4ac:	4684      	mov	ip, r0
 800a4ae:	f040 80a7 	bne.w	800a600 <_rclc_take_new_data+0x2a4>
 800a4b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a4b4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800a4b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a4be:	e884 0003 	stmia.w	r4, {r0, r1}
 800a4c2:	f887 c008 	strb.w	ip, [r7, #8]
 800a4c6:	e76b      	b.n	800a3a0 <_rclc_take_new_data+0x44>
 800a4c8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a4ca:	3010      	adds	r0, #16
 800a4cc:	f006 fbbc 	bl	8010c48 <rcl_action_take_feedback>
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d1a5      	bne.n	800a422 <_rclc_take_new_data+0xc6>
 800a4d6:	6860      	ldr	r0, [r4, #4]
 800a4d8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a4da:	f006 ff55 	bl	8011388 <rclc_action_find_goal_handle_by_uuid>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	f000 80a3 	beq.w	800a62c <_rclc_take_new_data+0x2d0>
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	6860      	ldr	r0, [r4, #4]
 800a4ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800a4ee:	e7a6      	b.n	800a43e <_rclc_take_new_data+0xe2>
 800a4f0:	f006 ff24 	bl	801133c <rclc_action_take_goal_handle>
 800a4f4:	4606      	mov	r6, r0
 800a4f6:	6860      	ldr	r0, [r4, #4]
 800a4f8:	2e00      	cmp	r6, #0
 800a4fa:	f43f af47 	beq.w	800a38c <_rclc_take_new_data+0x30>
 800a4fe:	6070      	str	r0, [r6, #4]
 800a500:	69f2      	ldr	r2, [r6, #28]
 800a502:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800a506:	3010      	adds	r0, #16
 800a508:	f006 fcda 	bl	8010ec0 <rcl_action_take_goal_request>
 800a50c:	4605      	mov	r5, r0
 800a50e:	2800      	cmp	r0, #0
 800a510:	f040 808e 	bne.w	800a630 <_rclc_take_new_data+0x2d4>
 800a514:	69f7      	ldr	r7, [r6, #28]
 800a516:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a518:	7235      	strb	r5, [r6, #8]
 800a51a:	f8c6 0009 	str.w	r0, [r6, #9]
 800a51e:	f8c6 100d 	str.w	r1, [r6, #13]
 800a522:	6860      	ldr	r0, [r4, #4]
 800a524:	f8c6 2011 	str.w	r2, [r6, #17]
 800a528:	f8c6 3015 	str.w	r3, [r6, #21]
 800a52c:	e72e      	b.n	800a38c <_rclc_take_new_data+0x30>
 800a52e:	aa04      	add	r2, sp, #16
 800a530:	a90a      	add	r1, sp, #40	; 0x28
 800a532:	3010      	adds	r0, #16
 800a534:	f006 fa90 	bl	8010a58 <rcl_action_take_goal_response>
 800a538:	4605      	mov	r5, r0
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f47f af71 	bne.w	800a422 <_rclc_take_new_data+0xc6>
 800a540:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a544:	6860      	ldr	r0, [r4, #4]
 800a546:	f006 ff4f 	bl	80113e8 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a54a:	b130      	cbz	r0, 800a55a <_rclc_take_new_data+0x1fe>
 800a54c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a550:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a554:	2201      	movs	r2, #1
 800a556:	f880 2020 	strb.w	r2, [r0, #32]
 800a55a:	6860      	ldr	r0, [r4, #4]
 800a55c:	e769      	b.n	800a432 <_rclc_take_new_data+0xd6>
 800a55e:	aa04      	add	r2, sp, #16
 800a560:	3010      	adds	r0, #16
 800a562:	a90a      	add	r1, sp, #40	; 0x28
 800a564:	f006 fd22 	bl	8010fac <rcl_action_take_result_request>
 800a568:	4605      	mov	r5, r0
 800a56a:	2800      	cmp	r0, #0
 800a56c:	f47f af59 	bne.w	800a422 <_rclc_take_new_data+0xc6>
 800a570:	6860      	ldr	r0, [r4, #4]
 800a572:	a904      	add	r1, sp, #16
 800a574:	f006 ff08 	bl	8011388 <rclc_action_find_goal_handle_by_uuid>
 800a578:	4607      	mov	r7, r0
 800a57a:	b160      	cbz	r0, 800a596 <_rclc_take_new_data+0x23a>
 800a57c:	ad0a      	add	r5, sp, #40	; 0x28
 800a57e:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800a582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a584:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a586:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a58a:	f04f 0c02 	mov.w	ip, #2
 800a58e:	e886 0003 	stmia.w	r6, {r0, r1}
 800a592:	f887 c008 	strb.w	ip, [r7, #8]
 800a596:	6860      	ldr	r0, [r4, #4]
 800a598:	2300      	movs	r3, #0
 800a59a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800a59e:	e6fa      	b.n	800a396 <_rclc_take_new_data+0x3a>
 800a5a0:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800a5a4:	a90a      	add	r1, sp, #40	; 0x28
 800a5a6:	3010      	adds	r0, #16
 800a5a8:	f006 fb0e 	bl	8010bc8 <rcl_action_take_cancel_response>
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f47f af37 	bne.w	800a422 <_rclc_take_new_data+0xc6>
 800a5b4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a5b8:	6860      	ldr	r0, [r4, #4]
 800a5ba:	f006 ff39 	bl	8011430 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a5be:	4606      	mov	r6, r0
 800a5c0:	6860      	ldr	r0, [r4, #4]
 800a5c2:	2e00      	cmp	r6, #0
 800a5c4:	f43f af40 	beq.w	800a448 <_rclc_take_new_data+0xec>
 800a5c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a5ca:	2701      	movs	r7, #1
 800a5cc:	84b7      	strh	r7, [r6, #36]	; 0x24
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f43f af3a 	beq.w	800a448 <_rclc_take_new_data+0xec>
 800a5d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a5d6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a5da:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a5de:	f006 fed3 	bl	8011388 <rclc_action_find_goal_handle_by_uuid>
 800a5e2:	b138      	cbz	r0, 800a5f4 <_rclc_take_new_data+0x298>
 800a5e4:	6860      	ldr	r0, [r4, #4]
 800a5e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a5e8:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	42ab      	cmp	r3, r5
 800a5f0:	d8f0      	bhi.n	800a5d4 <_rclc_take_new_data+0x278>
 800a5f2:	e729      	b.n	800a448 <_rclc_take_new_data+0xec>
 800a5f4:	6860      	ldr	r0, [r4, #4]
 800a5f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a5f8:	3501      	adds	r5, #1
 800a5fa:	42ab      	cmp	r3, r5
 800a5fc:	d8ea      	bhi.n	800a5d4 <_rclc_take_new_data+0x278>
 800a5fe:	e723      	b.n	800a448 <_rclc_take_new_data+0xec>
 800a600:	ab06      	add	r3, sp, #24
 800a602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a604:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a608:	2103      	movs	r1, #3
 800a60a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a60e:	6860      	ldr	r0, [r4, #4]
 800a610:	f006 ff82 	bl	8011518 <rclc_action_server_goal_cancel_reject>
 800a614:	e6c4      	b.n	800a3a0 <_rclc_take_new_data+0x44>
 800a616:	ab06      	add	r3, sp, #24
 800a618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a61a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a61e:	2102      	movs	r1, #2
 800a620:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a624:	6860      	ldr	r0, [r4, #4]
 800a626:	f006 ff77 	bl	8011518 <rclc_action_server_goal_cancel_reject>
 800a62a:	e6b9      	b.n	800a3a0 <_rclc_take_new_data+0x44>
 800a62c:	6860      	ldr	r0, [r4, #4]
 800a62e:	e706      	b.n	800a43e <_rclc_take_new_data+0xe2>
 800a630:	6860      	ldr	r0, [r4, #4]
 800a632:	4631      	mov	r1, r6
 800a634:	f006 fe92 	bl	801135c <rclc_action_remove_used_goal_handle>
 800a638:	f000 fd9e 	bl	800b178 <rcutils_reset_error>
 800a63c:	e6b0      	b.n	800a3a0 <_rclc_take_new_data+0x44>
 800a63e:	2501      	movs	r5, #1
 800a640:	e6ae      	b.n	800a3a0 <_rclc_take_new_data+0x44>
 800a642:	bf00      	nop

0800a644 <_rclc_execute.part.0>:
 800a644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a646:	7803      	ldrb	r3, [r0, #0]
 800a648:	b087      	sub	sp, #28
 800a64a:	4604      	mov	r4, r0
 800a64c:	2b0a      	cmp	r3, #10
 800a64e:	f200 8136 	bhi.w	800a8be <_rclc_execute.part.0+0x27a>
 800a652:	e8df f003 	tbb	[pc, r3]
 800a656:	435e      	.short	0x435e
 800a658:	06a1664f 	.word	0x06a1664f
 800a65c:	6c1e0606 	.word	0x6c1e0606
 800a660:	59          	.byte	0x59
 800a661:	00          	.byte	0x00
 800a662:	2b06      	cmp	r3, #6
 800a664:	f000 8122 	beq.w	800a8ac <_rclc_execute.part.0+0x268>
 800a668:	2b07      	cmp	r3, #7
 800a66a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a66c:	f040 8118 	bne.w	800a8a0 <_rclc_execute.part.0+0x25c>
 800a670:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800a674:	6880      	ldr	r0, [r0, #8]
 800a676:	4798      	blx	r3
 800a678:	f104 0110 	add.w	r1, r4, #16
 800a67c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a67e:	6860      	ldr	r0, [r4, #4]
 800a680:	f005 f9ec 	bl	800fa5c <rcl_send_response>
 800a684:	2800      	cmp	r0, #0
 800a686:	d033      	beq.n	800a6f0 <_rclc_execute.part.0+0xac>
 800a688:	9005      	str	r0, [sp, #20]
 800a68a:	f000 fd75 	bl	800b178 <rcutils_reset_error>
 800a68e:	9805      	ldr	r0, [sp, #20]
 800a690:	e02e      	b.n	800a6f0 <_rclc_execute.part.0+0xac>
 800a692:	6840      	ldr	r0, [r0, #4]
 800a694:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 8086 	beq.w	800a7aa <_rclc_execute.part.0+0x166>
 800a69e:	2600      	movs	r6, #0
 800a6a0:	2701      	movs	r7, #1
 800a6a2:	e004      	b.n	800a6ae <_rclc_execute.part.0+0x6a>
 800a6a4:	f006 fe24 	bl	80112f0 <rclc_action_send_result_request>
 800a6a8:	b998      	cbnz	r0, 800a6d2 <_rclc_execute.part.0+0x8e>
 800a6aa:	722f      	strb	r7, [r5, #8]
 800a6ac:	6860      	ldr	r0, [r4, #4]
 800a6ae:	f006 fed1 	bl	8011454 <rclc_action_find_first_handle_with_goal_response>
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d077      	beq.n	800a7a8 <_rclc_execute.part.0+0x164>
 800a6b8:	6863      	ldr	r3, [r4, #4]
 800a6ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800a6c2:	f885 6020 	strb.w	r6, [r5, #32]
 800a6c6:	4798      	blx	r3
 800a6c8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1e8      	bne.n	800a6a4 <_rclc_execute.part.0+0x60>
 800a6d2:	6860      	ldr	r0, [r4, #4]
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	f006 fe41 	bl	801135c <rclc_action_remove_used_goal_handle>
 800a6da:	e7e7      	b.n	800a6ac <_rclc_execute.part.0+0x68>
 800a6dc:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a6e0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800a6e4:	2d00      	cmp	r5, #0
 800a6e6:	f000 80c9 	beq.w	800a87c <_rclc_execute.part.0+0x238>
 800a6ea:	6880      	ldr	r0, [r0, #8]
 800a6ec:	4798      	blx	r3
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	b007      	add	sp, #28
 800a6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f4:	6840      	ldr	r0, [r0, #4]
 800a6f6:	f005 fa6f 	bl	800fbd8 <rcl_timer_call>
 800a6fa:	f240 3321 	movw	r3, #801	; 0x321
 800a6fe:	4298      	cmp	r0, r3
 800a700:	d004      	beq.n	800a70c <_rclc_execute.part.0+0xc8>
 800a702:	2800      	cmp	r0, #0
 800a704:	d0f4      	beq.n	800a6f0 <_rclc_execute.part.0+0xac>
 800a706:	e7bf      	b.n	800a688 <_rclc_execute.part.0+0x44>
 800a708:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a70a:	4798      	blx	r3
 800a70c:	2000      	movs	r0, #0
 800a70e:	b007      	add	sp, #28
 800a710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a712:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a716:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a718:	b925      	cbnz	r5, 800a724 <_rclc_execute.part.0+0xe0>
 800a71a:	4628      	mov	r0, r5
 800a71c:	4798      	blx	r3
 800a71e:	4628      	mov	r0, r5
 800a720:	e7e6      	b.n	800a6f0 <_rclc_execute.part.0+0xac>
 800a722:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a724:	68a0      	ldr	r0, [r4, #8]
 800a726:	4798      	blx	r3
 800a728:	2000      	movs	r0, #0
 800a72a:	b007      	add	sp, #28
 800a72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a72e:	6840      	ldr	r0, [r0, #4]
 800a730:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a734:	bb3b      	cbnz	r3, 800a786 <_rclc_execute.part.0+0x142>
 800a736:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d07b      	beq.n	800a836 <_rclc_execute.part.0+0x1f2>
 800a73e:	f640 0634 	movw	r6, #2100	; 0x834
 800a742:	2701      	movs	r7, #1
 800a744:	e007      	b.n	800a756 <_rclc_execute.part.0+0x112>
 800a746:	4628      	mov	r0, r5
 800a748:	f006 fe9c 	bl	8011484 <rclc_action_server_response_goal_request>
 800a74c:	6860      	ldr	r0, [r4, #4]
 800a74e:	4629      	mov	r1, r5
 800a750:	f006 fe04 	bl	801135c <rclc_action_remove_used_goal_handle>
 800a754:	6860      	ldr	r0, [r4, #4]
 800a756:	2100      	movs	r1, #0
 800a758:	f006 fe2e 	bl	80113b8 <rclc_action_find_first_handle_by_status>
 800a75c:	4605      	mov	r5, r0
 800a75e:	2800      	cmp	r0, #0
 800a760:	d066      	beq.n	800a830 <_rclc_execute.part.0+0x1ec>
 800a762:	6863      	ldr	r3, [r4, #4]
 800a764:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	4798      	blx	r3
 800a76a:	42b0      	cmp	r0, r6
 800a76c:	f04f 0100 	mov.w	r1, #0
 800a770:	d1e9      	bne.n	800a746 <_rclc_execute.part.0+0x102>
 800a772:	2101      	movs	r1, #1
 800a774:	4628      	mov	r0, r5
 800a776:	f006 fe85 	bl	8011484 <rclc_action_server_response_goal_request>
 800a77a:	722f      	strb	r7, [r5, #8]
 800a77c:	e7ea      	b.n	800a754 <_rclc_execute.part.0+0x110>
 800a77e:	6848      	ldr	r0, [r1, #4]
 800a780:	f006 fdec 	bl	801135c <rclc_action_remove_used_goal_handle>
 800a784:	6860      	ldr	r0, [r4, #4]
 800a786:	f006 fe23 	bl	80113d0 <rclc_action_find_first_terminated_handle>
 800a78a:	4601      	mov	r1, r0
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d1f6      	bne.n	800a77e <_rclc_execute.part.0+0x13a>
 800a790:	6860      	ldr	r0, [r4, #4]
 800a792:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800a796:	e7ce      	b.n	800a736 <_rclc_execute.part.0+0xf2>
 800a798:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a79a:	6880      	ldr	r0, [r0, #8]
 800a79c:	f104 0110 	add.w	r1, r4, #16
 800a7a0:	4798      	blx	r3
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	b007      	add	sp, #28
 800a7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7a8:	6860      	ldr	r0, [r4, #4]
 800a7aa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a7ae:	b18b      	cbz	r3, 800a7d4 <_rclc_execute.part.0+0x190>
 800a7b0:	68c5      	ldr	r5, [r0, #12]
 800a7b2:	b32d      	cbz	r5, 800a800 <_rclc_execute.part.0+0x1bc>
 800a7b4:	2600      	movs	r6, #0
 800a7b6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a7ba:	b143      	cbz	r3, 800a7ce <_rclc_execute.part.0+0x18a>
 800a7bc:	69c3      	ldr	r3, [r0, #28]
 800a7be:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800a7c2:	b123      	cbz	r3, 800a7ce <_rclc_execute.part.0+0x18a>
 800a7c4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a7c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	4798      	blx	r3
 800a7cc:	6860      	ldr	r0, [r4, #4]
 800a7ce:	682d      	ldr	r5, [r5, #0]
 800a7d0:	2d00      	cmp	r5, #0
 800a7d2:	d1f0      	bne.n	800a7b6 <_rclc_execute.part.0+0x172>
 800a7d4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a7d8:	b193      	cbz	r3, 800a800 <_rclc_execute.part.0+0x1bc>
 800a7da:	68c5      	ldr	r5, [r0, #12]
 800a7dc:	b185      	cbz	r5, 800a800 <_rclc_execute.part.0+0x1bc>
 800a7de:	2600      	movs	r6, #0
 800a7e0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800a7e4:	b14b      	cbz	r3, 800a7fa <_rclc_execute.part.0+0x1b6>
 800a7e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a7e8:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800a7ec:	b12b      	cbz	r3, 800a7fa <_rclc_execute.part.0+0x1b6>
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800a7f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a7f6:	4798      	blx	r3
 800a7f8:	6860      	ldr	r0, [r4, #4]
 800a7fa:	682d      	ldr	r5, [r5, #0]
 800a7fc:	2d00      	cmp	r5, #0
 800a7fe:	d1ef      	bne.n	800a7e0 <_rclc_execute.part.0+0x19c>
 800a800:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a804:	2b00      	cmp	r3, #0
 800a806:	d081      	beq.n	800a70c <_rclc_execute.part.0+0xc8>
 800a808:	2700      	movs	r7, #0
 800a80a:	e00b      	b.n	800a824 <_rclc_execute.part.0+0x1e0>
 800a80c:	6863      	ldr	r3, [r4, #4]
 800a80e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a812:	6a1e      	ldr	r6, [r3, #32]
 800a814:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800a818:	47b0      	blx	r6
 800a81a:	6860      	ldr	r0, [r4, #4]
 800a81c:	4629      	mov	r1, r5
 800a81e:	f006 fd9d 	bl	801135c <rclc_action_remove_used_goal_handle>
 800a822:	6860      	ldr	r0, [r4, #4]
 800a824:	f006 fe22 	bl	801146c <rclc_action_find_first_handle_with_result_response>
 800a828:	4605      	mov	r5, r0
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d1ee      	bne.n	800a80c <_rclc_execute.part.0+0x1c8>
 800a82e:	e76d      	b.n	800a70c <_rclc_execute.part.0+0xc8>
 800a830:	6860      	ldr	r0, [r4, #4]
 800a832:	f880 5020 	strb.w	r5, [r0, #32]
 800a836:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f43f af66 	beq.w	800a70c <_rclc_execute.part.0+0xc8>
 800a840:	68c5      	ldr	r5, [r0, #12]
 800a842:	b1b5      	cbz	r5, 800a872 <_rclc_execute.part.0+0x22e>
 800a844:	2602      	movs	r6, #2
 800a846:	e001      	b.n	800a84c <_rclc_execute.part.0+0x208>
 800a848:	682d      	ldr	r5, [r5, #0]
 800a84a:	b195      	cbz	r5, 800a872 <_rclc_execute.part.0+0x22e>
 800a84c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a850:	2b03      	cmp	r3, #3
 800a852:	d1f9      	bne.n	800a848 <_rclc_execute.part.0+0x204>
 800a854:	69c3      	ldr	r3, [r0, #28]
 800a856:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a858:	4628      	mov	r0, r5
 800a85a:	4798      	blx	r3
 800a85c:	4603      	mov	r3, r0
 800a85e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800a862:	4628      	mov	r0, r5
 800a864:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a868:	b163      	cbz	r3, 800a884 <_rclc_execute.part.0+0x240>
 800a86a:	f006 fe29 	bl	80114c0 <rclc_action_server_goal_cancel_accept>
 800a86e:	6860      	ldr	r0, [r4, #4]
 800a870:	e7ea      	b.n	800a848 <_rclc_execute.part.0+0x204>
 800a872:	2300      	movs	r3, #0
 800a874:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a878:	4618      	mov	r0, r3
 800a87a:	e739      	b.n	800a6f0 <_rclc_execute.part.0+0xac>
 800a87c:	4628      	mov	r0, r5
 800a87e:	4798      	blx	r3
 800a880:	4628      	mov	r0, r5
 800a882:	e735      	b.n	800a6f0 <_rclc_execute.part.0+0xac>
 800a884:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a886:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a88a:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800a88e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a892:	6860      	ldr	r0, [r4, #4]
 800a894:	2101      	movs	r1, #1
 800a896:	f006 fe3f 	bl	8011518 <rclc_action_server_goal_cancel_reject>
 800a89a:	722e      	strb	r6, [r5, #8]
 800a89c:	6860      	ldr	r0, [r4, #4]
 800a89e:	e7d3      	b.n	800a848 <_rclc_execute.part.0+0x204>
 800a8a0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a8a2:	6880      	ldr	r0, [r0, #8]
 800a8a4:	4798      	blx	r3
 800a8a6:	f104 0110 	add.w	r1, r4, #16
 800a8aa:	e6e7      	b.n	800a67c <_rclc_execute.part.0+0x38>
 800a8ac:	f100 0110 	add.w	r1, r0, #16
 800a8b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a8b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a8b4:	6880      	ldr	r0, [r0, #8]
 800a8b6:	9105      	str	r1, [sp, #20]
 800a8b8:	4798      	blx	r3
 800a8ba:	9905      	ldr	r1, [sp, #20]
 800a8bc:	e6de      	b.n	800a67c <_rclc_execute.part.0+0x38>
 800a8be:	2001      	movs	r0, #1
 800a8c0:	e716      	b.n	800a6f0 <_rclc_execute.part.0+0xac>
 800a8c2:	bf00      	nop

0800a8c4 <rclc_executor_trigger_any>:
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d03f      	beq.n	800a948 <rclc_executor_trigger_any+0x84>
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	d03e      	beq.n	800a94a <rclc_executor_trigger_any+0x86>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d037      	beq.n	800a948 <rclc_executor_trigger_any+0x84>
 800a8d8:	b430      	push	{r4, r5}
 800a8da:	f893 c000 	ldrb.w	ip, [r3]
 800a8de:	f1bc 0f08 	cmp.w	ip, #8
 800a8e2:	d11e      	bne.n	800a922 <rclc_executor_trigger_any+0x5e>
 800a8e4:	685c      	ldr	r4, [r3, #4]
 800a8e6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800a8e8:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800a8ec:	d105      	bne.n	800a8fa <rclc_executor_trigger_any+0x36>
 800a8ee:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800a8f2:	b910      	cbnz	r0, 800a8fa <rclc_executor_trigger_any+0x36>
 800a8f4:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800a8f8:	b128      	cbz	r0, 800a906 <rclc_executor_trigger_any+0x42>
 800a8fa:	bc30      	pop	{r4, r5}
 800a8fc:	4770      	bx	lr
 800a8fe:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a902:	2800      	cmp	r0, #0
 800a904:	d1f9      	bne.n	800a8fa <rclc_executor_trigger_any+0x36>
 800a906:	3201      	adds	r2, #1
 800a908:	4291      	cmp	r1, r2
 800a90a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a90e:	d018      	beq.n	800a942 <rclc_executor_trigger_any+0x7e>
 800a910:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a914:	2800      	cmp	r0, #0
 800a916:	d0f0      	beq.n	800a8fa <rclc_executor_trigger_any+0x36>
 800a918:	f893 c000 	ldrb.w	ip, [r3]
 800a91c:	f1bc 0f08 	cmp.w	ip, #8
 800a920:	d0e0      	beq.n	800a8e4 <rclc_executor_trigger_any+0x20>
 800a922:	f1bc 0f09 	cmp.w	ip, #9
 800a926:	d1ea      	bne.n	800a8fe <rclc_executor_trigger_any+0x3a>
 800a928:	685c      	ldr	r4, [r3, #4]
 800a92a:	6a25      	ldr	r5, [r4, #32]
 800a92c:	2d00      	cmp	r5, #0
 800a92e:	d1e4      	bne.n	800a8fa <rclc_executor_trigger_any+0x36>
 800a930:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800a934:	2800      	cmp	r0, #0
 800a936:	d1e0      	bne.n	800a8fa <rclc_executor_trigger_any+0x36>
 800a938:	3201      	adds	r2, #1
 800a93a:	4291      	cmp	r1, r2
 800a93c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a940:	d1e6      	bne.n	800a910 <rclc_executor_trigger_any+0x4c>
 800a942:	2000      	movs	r0, #0
 800a944:	bc30      	pop	{r4, r5}
 800a946:	4770      	bx	lr
 800a948:	4770      	bx	lr
 800a94a:	4608      	mov	r0, r1
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop

0800a950 <rclc_executor_get_zero_initialized_executor>:
 800a950:	b510      	push	{r4, lr}
 800a952:	4903      	ldr	r1, [pc, #12]	; (800a960 <rclc_executor_get_zero_initialized_executor+0x10>)
 800a954:	4604      	mov	r4, r0
 800a956:	2288      	movs	r2, #136	; 0x88
 800a958:	f00a fc2f 	bl	80151ba <memcpy>
 800a95c:	4620      	mov	r0, r4
 800a95e:	bd10      	pop	{r4, pc}
 800a960:	08016290 	.word	0x08016290
 800a964:	00000000 	.word	0x00000000

0800a968 <rclc_executor_init>:
 800a968:	2800      	cmp	r0, #0
 800a96a:	d05f      	beq.n	800aa2c <rclc_executor_init+0xc4>
 800a96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a970:	460c      	mov	r4, r1
 800a972:	b0b0      	sub	sp, #192	; 0xc0
 800a974:	2900      	cmp	r1, #0
 800a976:	d051      	beq.n	800aa1c <rclc_executor_init+0xb4>
 800a978:	4605      	mov	r5, r0
 800a97a:	4618      	mov	r0, r3
 800a97c:	4616      	mov	r6, r2
 800a97e:	461f      	mov	r7, r3
 800a980:	f000 fbbe 	bl	800b100 <rcutils_allocator_is_valid>
 800a984:	2800      	cmp	r0, #0
 800a986:	d049      	beq.n	800aa1c <rclc_executor_init+0xb4>
 800a988:	2e00      	cmp	r6, #0
 800a98a:	d047      	beq.n	800aa1c <rclc_executor_init+0xb4>
 800a98c:	492c      	ldr	r1, [pc, #176]	; (800aa40 <rclc_executor_init+0xd8>)
 800a98e:	2288      	movs	r2, #136	; 0x88
 800a990:	a80e      	add	r0, sp, #56	; 0x38
 800a992:	f00a fc12 	bl	80151ba <memcpy>
 800a996:	a90e      	add	r1, sp, #56	; 0x38
 800a998:	2288      	movs	r2, #136	; 0x88
 800a99a:	4628      	mov	r0, r5
 800a99c:	f00a fc0d 	bl	80151ba <memcpy>
 800a9a0:	602c      	str	r4, [r5, #0]
 800a9a2:	4668      	mov	r0, sp
 800a9a4:	60ae      	str	r6, [r5, #8]
 800a9a6:	466c      	mov	r4, sp
 800a9a8:	f005 fa88 	bl	800febc <rcl_get_zero_initialized_wait_set>
 800a9ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9ae:	f105 0c14 	add.w	ip, r5, #20
 800a9b2:	f8d7 8000 	ldr.w	r8, [r7]
 800a9b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9c6:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 800aa38 <rclc_executor_init+0xd0>
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	f8cc 3000 	str.w	r3, [ip]
 800a9d0:	6939      	ldr	r1, [r7, #16]
 800a9d2:	612f      	str	r7, [r5, #16]
 800a9d4:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800a9d8:	01b0      	lsls	r0, r6, #6
 800a9da:	47c0      	blx	r8
 800a9dc:	6068      	str	r0, [r5, #4]
 800a9de:	b338      	cbz	r0, 800aa30 <rclc_executor_init+0xc8>
 800a9e0:	2400      	movs	r4, #0
 800a9e2:	e000      	b.n	800a9e6 <rclc_executor_init+0x7e>
 800a9e4:	6868      	ldr	r0, [r5, #4]
 800a9e6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	3401      	adds	r4, #1
 800a9ee:	f000 fa73 	bl	800aed8 <rclc_executor_handle_init>
 800a9f2:	42a6      	cmp	r6, r4
 800a9f4:	d1f6      	bne.n	800a9e4 <rclc_executor_init+0x7c>
 800a9f6:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800a9fa:	f000 fa63 	bl	800aec4 <rclc_executor_handle_counters_zero_init>
 800a9fe:	4a11      	ldr	r2, [pc, #68]	; (800aa44 <rclc_executor_init+0xdc>)
 800aa00:	686b      	ldr	r3, [r5, #4]
 800aa02:	2000      	movs	r0, #0
 800aa04:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 800aa08:	b163      	cbz	r3, 800aa24 <rclc_executor_init+0xbc>
 800aa0a:	692b      	ldr	r3, [r5, #16]
 800aa0c:	b153      	cbz	r3, 800aa24 <rclc_executor_init+0xbc>
 800aa0e:	68ab      	ldr	r3, [r5, #8]
 800aa10:	b143      	cbz	r3, 800aa24 <rclc_executor_init+0xbc>
 800aa12:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 800aa16:	b030      	add	sp, #192	; 0xc0
 800aa18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa1c:	200b      	movs	r0, #11
 800aa1e:	b030      	add	sp, #192	; 0xc0
 800aa20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa24:	4618      	mov	r0, r3
 800aa26:	b030      	add	sp, #192	; 0xc0
 800aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa2c:	200b      	movs	r0, #11
 800aa2e:	4770      	bx	lr
 800aa30:	200a      	movs	r0, #10
 800aa32:	e7f4      	b.n	800aa1e <rclc_executor_init+0xb6>
 800aa34:	f3af 8000 	nop.w
 800aa38:	3b9aca00 	.word	0x3b9aca00
 800aa3c:	00000000 	.word	0x00000000
 800aa40:	08016290 	.word	0x08016290
 800aa44:	0800a8c5 	.word	0x0800a8c5

0800aa48 <rclc_executor_add_subscription>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800aa4e:	b338      	cbz	r0, 800aaa0 <rclc_executor_add_subscription+0x58>
 800aa50:	b331      	cbz	r1, 800aaa0 <rclc_executor_add_subscription+0x58>
 800aa52:	b32a      	cbz	r2, 800aaa0 <rclc_executor_add_subscription+0x58>
 800aa54:	b323      	cbz	r3, 800aaa0 <rclc_executor_add_subscription+0x58>
 800aa56:	4604      	mov	r4, r0
 800aa58:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800aa5c:	42a8      	cmp	r0, r5
 800aa5e:	d301      	bcc.n	800aa64 <rclc_executor_add_subscription+0x1c>
 800aa60:	2001      	movs	r0, #1
 800aa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa64:	6866      	ldr	r6, [r4, #4]
 800aa66:	0187      	lsls	r7, r0, #6
 800aa68:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800aa6c:	2500      	movs	r5, #0
 800aa6e:	55f5      	strb	r5, [r6, r7]
 800aa70:	3001      	adds	r0, #1
 800aa72:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 800aa76:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	f104 0514 	add.w	r5, r4, #20
 800aa80:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800aa84:	f88c e001 	strb.w	lr, [ip, #1]
 800aa88:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 800aa8c:	60e0      	str	r0, [r4, #12]
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f005 fa28 	bl	800fee4 <rcl_wait_set_is_valid>
 800aa94:	b930      	cbnz	r0, 800aaa4 <rclc_executor_add_subscription+0x5c>
 800aa96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800aa98:	3301      	adds	r3, #1
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa0:	200b      	movs	r0, #11
 800aaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f005 fa23 	bl	800fef0 <rcl_wait_set_fini>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d0f3      	beq.n	800aa96 <rclc_executor_add_subscription+0x4e>
 800aaae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aab0 <rclc_executor_prepare>:
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d044      	beq.n	800ab3e <rclc_executor_prepare+0x8e>
 800aab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aab6:	f100 0514 	add.w	r5, r0, #20
 800aaba:	b09b      	sub	sp, #108	; 0x6c
 800aabc:	4604      	mov	r4, r0
 800aabe:	4628      	mov	r0, r5
 800aac0:	f005 fa10 	bl	800fee4 <rcl_wait_set_is_valid>
 800aac4:	b110      	cbz	r0, 800aacc <rclc_executor_prepare+0x1c>
 800aac6:	2000      	movs	r0, #0
 800aac8:	b01b      	add	sp, #108	; 0x6c
 800aaca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aacc:	4628      	mov	r0, r5
 800aace:	f005 fa0f 	bl	800fef0 <rcl_wait_set_fini>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d130      	bne.n	800ab38 <rclc_executor_prepare+0x88>
 800aad6:	a80c      	add	r0, sp, #48	; 0x30
 800aad8:	f005 f9f0 	bl	800febc <rcl_get_zero_initialized_wait_set>
 800aadc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800aae0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aae4:	46ae      	mov	lr, r5
 800aae6:	6927      	ldr	r7, [r4, #16]
 800aae8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aaec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aaf0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aaf4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aaf8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aafc:	f8dc 3000 	ldr.w	r3, [ip]
 800ab00:	f8ce 3000 	str.w	r3, [lr]
 800ab04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ab06:	ae04      	add	r6, sp, #16
 800ab08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	6822      	ldr	r2, [r4, #0]
 800ab0e:	6033      	str	r3, [r6, #0]
 800ab10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab12:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ab14:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ab18:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800ab1c:	e9cd 2100 	strd	r2, r1, [sp]
 800ab20:	4628      	mov	r0, r5
 800ab22:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ab24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab26:	f005 fce1 	bl	80104ec <rcl_wait_set_init>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d0cc      	beq.n	800aac8 <rclc_executor_prepare+0x18>
 800ab2e:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab30:	f000 fb22 	bl	800b178 <rcutils_reset_error>
 800ab34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab36:	e7c7      	b.n	800aac8 <rclc_executor_prepare+0x18>
 800ab38:	f000 fb1e 	bl	800b178 <rcutils_reset_error>
 800ab3c:	e7cb      	b.n	800aad6 <rclc_executor_prepare+0x26>
 800ab3e:	200b      	movs	r0, #11
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop

0800ab44 <rclc_executor_spin_some.part.0>:
 800ab44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab48:	f100 0614 	add.w	r6, r0, #20
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	4691      	mov	r9, r2
 800ab50:	4698      	mov	r8, r3
 800ab52:	4605      	mov	r5, r0
 800ab54:	f7ff ffac 	bl	800aab0 <rclc_executor_prepare>
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f005 fa95 	bl	8010088 <rcl_wait_set_clear>
 800ab5e:	4607      	mov	r7, r0
 800ab60:	2800      	cmp	r0, #0
 800ab62:	f040 80ed 	bne.w	800ad40 <rclc_executor_spin_some.part.0+0x1fc>
 800ab66:	68ab      	ldr	r3, [r5, #8]
 800ab68:	4604      	mov	r4, r0
 800ab6a:	b303      	cbz	r3, 800abae <rclc_executor_spin_some.part.0+0x6a>
 800ab6c:	6869      	ldr	r1, [r5, #4]
 800ab6e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ab72:	01a2      	lsls	r2, r4, #6
 800ab74:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800ab78:	b1cb      	cbz	r3, 800abae <rclc_executor_spin_some.part.0+0x6a>
 800ab7a:	5c8b      	ldrb	r3, [r1, r2]
 800ab7c:	2b0a      	cmp	r3, #10
 800ab7e:	f200 80d8 	bhi.w	800ad32 <rclc_executor_spin_some.part.0+0x1ee>
 800ab82:	e8df f003 	tbb	[pc, r3]
 800ab86:	9c9c      	.short	0x9c9c
 800ab88:	068c8ca7 	.word	0x068c8ca7
 800ab8c:	bdc90606 	.word	0xbdc90606
 800ab90:	b2          	.byte	0xb2
 800ab91:	00          	.byte	0x00
 800ab92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab96:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f005 fdbc 	bl	8010718 <rcl_wait_set_add_service>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f040 8086 	bne.w	800acb2 <rclc_executor_spin_some.part.0+0x16e>
 800aba6:	68ab      	ldr	r3, [r5, #8]
 800aba8:	3401      	adds	r4, #1
 800abaa:	429c      	cmp	r4, r3
 800abac:	d3de      	bcc.n	800ab6c <rclc_executor_spin_some.part.0+0x28>
 800abae:	4643      	mov	r3, r8
 800abb0:	464a      	mov	r2, r9
 800abb2:	4630      	mov	r0, r6
 800abb4:	f005 fddc 	bl	8010770 <rcl_wait>
 800abb8:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 80c7 	beq.w	800ad50 <rclc_executor_spin_some.part.0+0x20c>
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	f040 80b5 	bne.w	800ad32 <rclc_executor_spin_some.part.0+0x1ee>
 800abc8:	68ab      	ldr	r3, [r5, #8]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 8159 	beq.w	800ae82 <rclc_executor_spin_some.part.0+0x33e>
 800abd0:	2400      	movs	r4, #0
 800abd2:	46a0      	mov	r8, r4
 800abd4:	f240 1991 	movw	r9, #401	; 0x191
 800abd8:	e00a      	b.n	800abf0 <rclc_executor_spin_some.part.0+0xac>
 800abda:	f7ff fb71 	bl	800a2c0 <_rclc_check_for_new_data>
 800abde:	4604      	mov	r4, r0
 800abe0:	b110      	cbz	r0, 800abe8 <rclc_executor_spin_some.part.0+0xa4>
 800abe2:	4548      	cmp	r0, r9
 800abe4:	f040 80b2 	bne.w	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800abe8:	68ab      	ldr	r3, [r5, #8]
 800abea:	4598      	cmp	r8, r3
 800abec:	f080 8126 	bcs.w	800ae3c <rclc_executor_spin_some.part.0+0x2f8>
 800abf0:	686a      	ldr	r2, [r5, #4]
 800abf2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800abf6:	4631      	mov	r1, r6
 800abf8:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800abfc:	f108 0801 	add.w	r8, r8, #1
 800ac00:	f1bc 0f00 	cmp.w	ip, #0
 800ac04:	d1e9      	bne.n	800abda <rclc_executor_spin_some.part.0+0x96>
 800ac06:	4619      	mov	r1, r3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800ac0e:	4798      	blx	r3
 800ac10:	2800      	cmp	r0, #0
 800ac12:	f000 809b 	beq.w	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800ac16:	68ab      	ldr	r3, [r5, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 8097 	beq.w	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	f240 1991 	movw	r9, #401	; 0x191
 800ac26:	e009      	b.n	800ac3c <rclc_executor_spin_some.part.0+0xf8>
 800ac28:	f7ff fb98 	bl	800a35c <_rclc_take_new_data>
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	b110      	cbz	r0, 800ac36 <rclc_executor_spin_some.part.0+0xf2>
 800ac30:	4548      	cmp	r0, r9
 800ac32:	f040 808b 	bne.w	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800ac36:	68ab      	ldr	r3, [r5, #8]
 800ac38:	4598      	cmp	r8, r3
 800ac3a:	d209      	bcs.n	800ac50 <rclc_executor_spin_some.part.0+0x10c>
 800ac3c:	6868      	ldr	r0, [r5, #4]
 800ac3e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ac42:	4631      	mov	r1, r6
 800ac44:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800ac48:	f108 0801 	add.w	r8, r8, #1
 800ac4c:	2a00      	cmp	r2, #0
 800ac4e:	d1eb      	bne.n	800ac28 <rclc_executor_spin_some.part.0+0xe4>
 800ac50:	2600      	movs	r6, #0
 800ac52:	b97b      	cbnz	r3, 800ac74 <rclc_executor_spin_some.part.0+0x130>
 800ac54:	e07a      	b.n	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800ac56:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ac5a:	2a08      	cmp	r2, #8
 800ac5c:	f000 80fd 	beq.w	800ae5a <rclc_executor_spin_some.part.0+0x316>
 800ac60:	2a09      	cmp	r2, #9
 800ac62:	f000 80ef 	beq.w	800ae44 <rclc_executor_spin_some.part.0+0x300>
 800ac66:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800ac6a:	b98a      	cbnz	r2, 800ac90 <rclc_executor_spin_some.part.0+0x14c>
 800ac6c:	3601      	adds	r6, #1
 800ac6e:	429e      	cmp	r6, r3
 800ac70:	d262      	bcs.n	800ad38 <rclc_executor_spin_some.part.0+0x1f4>
 800ac72:	2400      	movs	r4, #0
 800ac74:	686a      	ldr	r2, [r5, #4]
 800ac76:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ac7a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ac7e:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800ac82:	2900      	cmp	r1, #0
 800ac84:	d062      	beq.n	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800ac86:	7841      	ldrb	r1, [r0, #1]
 800ac88:	2900      	cmp	r1, #0
 800ac8a:	d0e4      	beq.n	800ac56 <rclc_executor_spin_some.part.0+0x112>
 800ac8c:	2901      	cmp	r1, #1
 800ac8e:	d1ed      	bne.n	800ac6c <rclc_executor_spin_some.part.0+0x128>
 800ac90:	f7ff fcd8 	bl	800a644 <_rclc_execute.part.0>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f040 80b6 	bne.w	800ae06 <rclc_executor_spin_some.part.0+0x2c2>
 800ac9a:	68ab      	ldr	r3, [r5, #8]
 800ac9c:	e7e6      	b.n	800ac6c <rclc_executor_spin_some.part.0+0x128>
 800ac9e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800aca2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800aca6:	4630      	mov	r0, r6
 800aca8:	f005 fd0a 	bl	80106c0 <rcl_wait_set_add_client>
 800acac:	2800      	cmp	r0, #0
 800acae:	f43f af7a 	beq.w	800aba6 <rclc_executor_spin_some.part.0+0x62>
 800acb2:	9001      	str	r0, [sp, #4]
 800acb4:	f000 fa60 	bl	800b178 <rcutils_reset_error>
 800acb8:	9801      	ldr	r0, [sp, #4]
 800acba:	4607      	mov	r7, r0
 800acbc:	e03c      	b.n	800ad38 <rclc_executor_spin_some.part.0+0x1f4>
 800acbe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800acc2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800acc6:	4630      	mov	r0, r6
 800acc8:	f005 f9b2 	bl	8010030 <rcl_wait_set_add_subscription>
 800accc:	2800      	cmp	r0, #0
 800acce:	f43f af6a 	beq.w	800aba6 <rclc_executor_spin_some.part.0+0x62>
 800acd2:	e7ee      	b.n	800acb2 <rclc_executor_spin_some.part.0+0x16e>
 800acd4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800acd8:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800acdc:	4630      	mov	r0, r6
 800acde:	f005 fcbf 	bl	8010660 <rcl_wait_set_add_timer>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	f43f af5f 	beq.w	800aba6 <rclc_executor_spin_some.part.0+0x62>
 800ace8:	e7e3      	b.n	800acb2 <rclc_executor_spin_some.part.0+0x16e>
 800acea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800acee:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800acf2:	4630      	mov	r0, r6
 800acf4:	f005 fc88 	bl	8010608 <rcl_wait_set_add_guard_condition>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	f43f af54 	beq.w	800aba6 <rclc_executor_spin_some.part.0+0x62>
 800acfe:	e7d8      	b.n	800acb2 <rclc_executor_spin_some.part.0+0x16e>
 800ad00:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ad04:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ad08:	3110      	adds	r1, #16
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f006 fa06 	bl	801111c <rcl_action_wait_set_add_action_server>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	f43f af48 	beq.w	800aba6 <rclc_executor_spin_some.part.0+0x62>
 800ad16:	e7cc      	b.n	800acb2 <rclc_executor_spin_some.part.0+0x16e>
 800ad18:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ad1c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ad20:	3110      	adds	r1, #16
 800ad22:	2300      	movs	r3, #0
 800ad24:	4630      	mov	r0, r6
 800ad26:	f005 ffd3 	bl	8010cd0 <rcl_action_wait_set_add_action_client>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f43f af3b 	beq.w	800aba6 <rclc_executor_spin_some.part.0+0x62>
 800ad30:	e7bf      	b.n	800acb2 <rclc_executor_spin_some.part.0+0x16e>
 800ad32:	f000 fa21 	bl	800b178 <rcutils_reset_error>
 800ad36:	2701      	movs	r7, #1
 800ad38:	4638      	mov	r0, r7
 800ad3a:	b003      	add	sp, #12
 800ad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad40:	f000 fa1a 	bl	800b178 <rcutils_reset_error>
 800ad44:	4638      	mov	r0, r7
 800ad46:	b003      	add	sp, #12
 800ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4c:	4627      	mov	r7, r4
 800ad4e:	e7f3      	b.n	800ad38 <rclc_executor_spin_some.part.0+0x1f4>
 800ad50:	68ab      	ldr	r3, [r5, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f000 8092 	beq.w	800ae7c <rclc_executor_spin_some.part.0+0x338>
 800ad58:	2400      	movs	r4, #0
 800ad5a:	46a0      	mov	r8, r4
 800ad5c:	f240 1991 	movw	r9, #401	; 0x191
 800ad60:	e008      	b.n	800ad74 <rclc_executor_spin_some.part.0+0x230>
 800ad62:	f7ff faad 	bl	800a2c0 <_rclc_check_for_new_data>
 800ad66:	4604      	mov	r4, r0
 800ad68:	b108      	cbz	r0, 800ad6e <rclc_executor_spin_some.part.0+0x22a>
 800ad6a:	4548      	cmp	r0, r9
 800ad6c:	d1ee      	bne.n	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800ad6e:	68ab      	ldr	r3, [r5, #8]
 800ad70:	4598      	cmp	r8, r3
 800ad72:	d265      	bcs.n	800ae40 <rclc_executor_spin_some.part.0+0x2fc>
 800ad74:	686a      	ldr	r2, [r5, #4]
 800ad76:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800ad80:	f108 0801 	add.w	r8, r8, #1
 800ad84:	f1bc 0f00 	cmp.w	ip, #0
 800ad88:	d1eb      	bne.n	800ad62 <rclc_executor_spin_some.part.0+0x21e>
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	4610      	mov	r0, r2
 800ad8e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800ad92:	4798      	blx	r3
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d0d9      	beq.n	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800ad98:	68ab      	ldr	r3, [r5, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0d6      	beq.n	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800ad9e:	f04f 0800 	mov.w	r8, #0
 800ada2:	f240 1991 	movw	r9, #401	; 0x191
 800ada6:	f240 2a59 	movw	sl, #601	; 0x259
 800adaa:	e00e      	b.n	800adca <rclc_executor_spin_some.part.0+0x286>
 800adac:	f813 300b 	ldrb.w	r3, [r3, fp]
 800adb0:	2b08      	cmp	r3, #8
 800adb2:	d033      	beq.n	800ae1c <rclc_executor_spin_some.part.0+0x2d8>
 800adb4:	2b09      	cmp	r3, #9
 800adb6:	d028      	beq.n	800ae0a <rclc_executor_spin_some.part.0+0x2c6>
 800adb8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800adbc:	b9fb      	cbnz	r3, 800adfe <rclc_executor_spin_some.part.0+0x2ba>
 800adbe:	68ab      	ldr	r3, [r5, #8]
 800adc0:	f108 0801 	add.w	r8, r8, #1
 800adc4:	4598      	cmp	r8, r3
 800adc6:	d2b7      	bcs.n	800ad38 <rclc_executor_spin_some.part.0+0x1f4>
 800adc8:	2400      	movs	r4, #0
 800adca:	6868      	ldr	r0, [r5, #4]
 800adcc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800add0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800add4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0b7      	beq.n	800ad4c <rclc_executor_spin_some.part.0+0x208>
 800addc:	4631      	mov	r1, r6
 800adde:	f7ff fabd 	bl	800a35c <_rclc_take_new_data>
 800ade2:	b118      	cbz	r0, 800adec <rclc_executor_spin_some.part.0+0x2a8>
 800ade4:	4548      	cmp	r0, r9
 800ade6:	d001      	beq.n	800adec <rclc_executor_spin_some.part.0+0x2a8>
 800ade8:	4550      	cmp	r0, sl
 800adea:	d10c      	bne.n	800ae06 <rclc_executor_spin_some.part.0+0x2c2>
 800adec:	686b      	ldr	r3, [r5, #4]
 800adee:	eb13 000b 	adds.w	r0, r3, fp
 800adf2:	d021      	beq.n	800ae38 <rclc_executor_spin_some.part.0+0x2f4>
 800adf4:	7842      	ldrb	r2, [r0, #1]
 800adf6:	2a00      	cmp	r2, #0
 800adf8:	d0d8      	beq.n	800adac <rclc_executor_spin_some.part.0+0x268>
 800adfa:	2a01      	cmp	r2, #1
 800adfc:	d1df      	bne.n	800adbe <rclc_executor_spin_some.part.0+0x27a>
 800adfe:	f7ff fc21 	bl	800a644 <_rclc_execute.part.0>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d0db      	beq.n	800adbe <rclc_executor_spin_some.part.0+0x27a>
 800ae06:	4607      	mov	r7, r0
 800ae08:	e796      	b.n	800ad38 <rclc_executor_spin_some.part.0+0x1f4>
 800ae0a:	6843      	ldr	r3, [r0, #4]
 800ae0c:	6a1a      	ldr	r2, [r3, #32]
 800ae0e:	2a00      	cmp	r2, #0
 800ae10:	d1f5      	bne.n	800adfe <rclc_executor_spin_some.part.0+0x2ba>
 800ae12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0d1      	beq.n	800adbe <rclc_executor_spin_some.part.0+0x27a>
 800ae1a:	e7f0      	b.n	800adfe <rclc_executor_spin_some.part.0+0x2ba>
 800ae1c:	6843      	ldr	r3, [r0, #4]
 800ae1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae20:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800ae24:	d1eb      	bne.n	800adfe <rclc_executor_spin_some.part.0+0x2ba>
 800ae26:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ae2a:	2a00      	cmp	r2, #0
 800ae2c:	d1e7      	bne.n	800adfe <rclc_executor_spin_some.part.0+0x2ba>
 800ae2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0c3      	beq.n	800adbe <rclc_executor_spin_some.part.0+0x27a>
 800ae36:	e7e2      	b.n	800adfe <rclc_executor_spin_some.part.0+0x2ba>
 800ae38:	270b      	movs	r7, #11
 800ae3a:	e77d      	b.n	800ad38 <rclc_executor_spin_some.part.0+0x1f4>
 800ae3c:	686a      	ldr	r2, [r5, #4]
 800ae3e:	e6e2      	b.n	800ac06 <rclc_executor_spin_some.part.0+0xc2>
 800ae40:	686a      	ldr	r2, [r5, #4]
 800ae42:	e7a2      	b.n	800ad8a <rclc_executor_spin_some.part.0+0x246>
 800ae44:	6842      	ldr	r2, [r0, #4]
 800ae46:	6a11      	ldr	r1, [r2, #32]
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	f47f af21 	bne.w	800ac90 <rclc_executor_spin_some.part.0+0x14c>
 800ae4e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ae52:	2a00      	cmp	r2, #0
 800ae54:	f43f af0a 	beq.w	800ac6c <rclc_executor_spin_some.part.0+0x128>
 800ae58:	e71a      	b.n	800ac90 <rclc_executor_spin_some.part.0+0x14c>
 800ae5a:	6842      	ldr	r2, [r0, #4]
 800ae5c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ae5e:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800ae62:	f47f af15 	bne.w	800ac90 <rclc_executor_spin_some.part.0+0x14c>
 800ae66:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800ae6a:	2900      	cmp	r1, #0
 800ae6c:	f47f af10 	bne.w	800ac90 <rclc_executor_spin_some.part.0+0x14c>
 800ae70:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800ae74:	2a00      	cmp	r2, #0
 800ae76:	f43f aef9 	beq.w	800ac6c <rclc_executor_spin_some.part.0+0x128>
 800ae7a:	e709      	b.n	800ac90 <rclc_executor_spin_some.part.0+0x14c>
 800ae7c:	686a      	ldr	r2, [r5, #4]
 800ae7e:	461c      	mov	r4, r3
 800ae80:	e783      	b.n	800ad8a <rclc_executor_spin_some.part.0+0x246>
 800ae82:	686a      	ldr	r2, [r5, #4]
 800ae84:	461c      	mov	r4, r3
 800ae86:	e6be      	b.n	800ac06 <rclc_executor_spin_some.part.0+0xc2>

0800ae88 <rclc_executor_spin>:
 800ae88:	b1d0      	cbz	r0, 800aec0 <rclc_executor_spin+0x38>
 800ae8a:	b510      	push	{r4, lr}
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	b082      	sub	sp, #8
 800ae90:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 800ae94:	6820      	ldr	r0, [r4, #0]
 800ae96:	e9cd 2300 	strd	r2, r3, [sp]
 800ae9a:	f004 f8b9 	bl	800f010 <rcl_context_is_valid>
 800ae9e:	4601      	mov	r1, r0
 800aea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea4:	4620      	mov	r0, r4
 800aea6:	b131      	cbz	r1, 800aeb6 <rclc_executor_spin+0x2e>
 800aea8:	f7ff fe4c 	bl	800ab44 <rclc_executor_spin_some.part.0>
 800aeac:	f030 0302 	bics.w	r3, r0, #2
 800aeb0:	d0ee      	beq.n	800ae90 <rclc_executor_spin+0x8>
 800aeb2:	b002      	add	sp, #8
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	f000 f95f 	bl	800b178 <rcutils_reset_error>
 800aeba:	2001      	movs	r0, #1
 800aebc:	b002      	add	sp, #8
 800aebe:	bd10      	pop	{r4, pc}
 800aec0:	200b      	movs	r0, #11
 800aec2:	4770      	bx	lr

0800aec4 <rclc_executor_handle_counters_zero_init>:
 800aec4:	b130      	cbz	r0, 800aed4 <rclc_executor_handle_counters_zero_init+0x10>
 800aec6:	b508      	push	{r3, lr}
 800aec8:	2220      	movs	r2, #32
 800aeca:	2100      	movs	r1, #0
 800aecc:	f00a f8ac 	bl	8015028 <memset>
 800aed0:	2000      	movs	r0, #0
 800aed2:	bd08      	pop	{r3, pc}
 800aed4:	200b      	movs	r0, #11
 800aed6:	4770      	bx	lr

0800aed8 <rclc_executor_handle_init>:
 800aed8:	b168      	cbz	r0, 800aef6 <rclc_executor_handle_init+0x1e>
 800aeda:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800af00 <rclc_executor_handle_init+0x28>
 800aede:	2300      	movs	r3, #0
 800aee0:	220b      	movs	r2, #11
 800aee2:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800aee6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800aeea:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800aeee:	8002      	strh	r2, [r0, #0]
 800aef0:	8703      	strh	r3, [r0, #56]	; 0x38
 800aef2:	4618      	mov	r0, r3
 800aef4:	4770      	bx	lr
 800aef6:	200b      	movs	r0, #11
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	f3af 8000 	nop.w
	...

0800af08 <rclc_support_init>:
 800af08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af0c:	b086      	sub	sp, #24
 800af0e:	b3b8      	cbz	r0, 800af80 <rclc_support_init+0x78>
 800af10:	461c      	mov	r4, r3
 800af12:	b3ab      	cbz	r3, 800af80 <rclc_support_init+0x78>
 800af14:	460f      	mov	r7, r1
 800af16:	4690      	mov	r8, r2
 800af18:	4606      	mov	r6, r0
 800af1a:	f004 fa95 	bl	800f448 <rcl_get_zero_initialized_init_options>
 800af1e:	f104 030c 	add.w	r3, r4, #12
 800af22:	9005      	str	r0, [sp, #20]
 800af24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af28:	e88d 0003 	stmia.w	sp, {r0, r1}
 800af2c:	a805      	add	r0, sp, #20
 800af2e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800af32:	f004 fa8b 	bl	800f44c <rcl_init_options_init>
 800af36:	4605      	mov	r5, r0
 800af38:	b9e0      	cbnz	r0, 800af74 <rclc_support_init+0x6c>
 800af3a:	ad02      	add	r5, sp, #8
 800af3c:	4628      	mov	r0, r5
 800af3e:	f004 f85d 	bl	800effc <rcl_get_zero_initialized_context>
 800af42:	e895 0003 	ldmia.w	r5, {r0, r1}
 800af46:	4633      	mov	r3, r6
 800af48:	e886 0003 	stmia.w	r6, {r0, r1}
 800af4c:	aa05      	add	r2, sp, #20
 800af4e:	4641      	mov	r1, r8
 800af50:	4638      	mov	r0, r7
 800af52:	f004 f975 	bl	800f240 <rcl_init>
 800af56:	4605      	mov	r5, r0
 800af58:	b9b8      	cbnz	r0, 800af8a <rclc_support_init+0x82>
 800af5a:	60b4      	str	r4, [r6, #8]
 800af5c:	4622      	mov	r2, r4
 800af5e:	f106 010c 	add.w	r1, r6, #12
 800af62:	2003      	movs	r0, #3
 800af64:	f004 fdb4 	bl	800fad0 <rcl_clock_init>
 800af68:	4605      	mov	r5, r0
 800af6a:	b970      	cbnz	r0, 800af8a <rclc_support_init+0x82>
 800af6c:	a805      	add	r0, sp, #20
 800af6e:	f004 fad3 	bl	800f518 <rcl_init_options_fini>
 800af72:	b108      	cbz	r0, 800af78 <rclc_support_init+0x70>
 800af74:	f000 f900 	bl	800b178 <rcutils_reset_error>
 800af78:	4628      	mov	r0, r5
 800af7a:	b006      	add	sp, #24
 800af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af80:	250b      	movs	r5, #11
 800af82:	4628      	mov	r0, r5
 800af84:	b006      	add	sp, #24
 800af86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af8a:	f000 f8f5 	bl	800b178 <rcutils_reset_error>
 800af8e:	a805      	add	r0, sp, #20
 800af90:	f004 fac2 	bl	800f518 <rcl_init_options_fini>
 800af94:	2800      	cmp	r0, #0
 800af96:	d0ef      	beq.n	800af78 <rclc_support_init+0x70>
 800af98:	e7ec      	b.n	800af74 <rclc_support_init+0x6c>
 800af9a:	bf00      	nop

0800af9c <rclc_node_init_default>:
 800af9c:	b3b8      	cbz	r0, 800b00e <rclc_node_init_default+0x72>
 800af9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afa2:	460d      	mov	r5, r1
 800afa4:	b0a1      	sub	sp, #132	; 0x84
 800afa6:	b329      	cbz	r1, 800aff4 <rclc_node_init_default+0x58>
 800afa8:	4616      	mov	r6, r2
 800afaa:	b31a      	cbz	r2, 800aff4 <rclc_node_init_default+0x58>
 800afac:	461f      	mov	r7, r3
 800afae:	b30b      	cbz	r3, 800aff4 <rclc_node_init_default+0x58>
 800afb0:	f10d 0810 	add.w	r8, sp, #16
 800afb4:	4604      	mov	r4, r0
 800afb6:	4640      	mov	r0, r8
 800afb8:	f7fe fe14 	bl	8009be4 <rcl_get_zero_initialized_node>
 800afbc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800afc0:	f10d 0918 	add.w	r9, sp, #24
 800afc4:	e884 0003 	stmia.w	r4, {r0, r1}
 800afc8:	4648      	mov	r0, r9
 800afca:	f7fe ffb5 	bl	8009f38 <rcl_node_get_default_options>
 800afce:	4640      	mov	r0, r8
 800afd0:	f7fe fe08 	bl	8009be4 <rcl_get_zero_initialized_node>
 800afd4:	f8cd 9000 	str.w	r9, [sp]
 800afd8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800afdc:	463b      	mov	r3, r7
 800afde:	e884 0003 	stmia.w	r4, {r0, r1}
 800afe2:	4632      	mov	r2, r6
 800afe4:	4629      	mov	r1, r5
 800afe6:	4620      	mov	r0, r4
 800afe8:	f7fe fe06 	bl	8009bf8 <rcl_node_init>
 800afec:	b930      	cbnz	r0, 800affc <rclc_node_init_default+0x60>
 800afee:	b021      	add	sp, #132	; 0x84
 800aff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aff4:	200b      	movs	r0, #11
 800aff6:	b021      	add	sp, #132	; 0x84
 800aff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800affc:	9003      	str	r0, [sp, #12]
 800affe:	f000 f8bb 	bl	800b178 <rcutils_reset_error>
 800b002:	f000 f8b9 	bl	800b178 <rcutils_reset_error>
 800b006:	9803      	ldr	r0, [sp, #12]
 800b008:	b021      	add	sp, #132	; 0x84
 800b00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b00e:	200b      	movs	r0, #11
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop

0800b014 <rclc_subscription_init_default>:
 800b014:	b368      	cbz	r0, 800b072 <rclc_subscription_init_default+0x5e>
 800b016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b01a:	460d      	mov	r5, r1
 800b01c:	b0a0      	sub	sp, #128	; 0x80
 800b01e:	b321      	cbz	r1, 800b06a <rclc_subscription_init_default+0x56>
 800b020:	4616      	mov	r6, r2
 800b022:	b312      	cbz	r2, 800b06a <rclc_subscription_init_default+0x56>
 800b024:	461f      	mov	r7, r3
 800b026:	b303      	cbz	r3, 800b06a <rclc_subscription_init_default+0x56>
 800b028:	4604      	mov	r4, r0
 800b02a:	f7fe ffb1 	bl	8009f90 <rcl_get_zero_initialized_subscription>
 800b02e:	f10d 0810 	add.w	r8, sp, #16
 800b032:	6020      	str	r0, [r4, #0]
 800b034:	4640      	mov	r0, r8
 800b036:	f7ff f8ad 	bl	800a194 <rcl_subscription_get_default_options>
 800b03a:	490f      	ldr	r1, [pc, #60]	; (800b078 <rclc_subscription_init_default+0x64>)
 800b03c:	2250      	movs	r2, #80	; 0x50
 800b03e:	4640      	mov	r0, r8
 800b040:	f00a f8bb 	bl	80151ba <memcpy>
 800b044:	f8cd 8000 	str.w	r8, [sp]
 800b048:	463b      	mov	r3, r7
 800b04a:	4632      	mov	r2, r6
 800b04c:	4629      	mov	r1, r5
 800b04e:	4620      	mov	r0, r4
 800b050:	f7fe ffa4 	bl	8009f9c <rcl_subscription_init>
 800b054:	b910      	cbnz	r0, 800b05c <rclc_subscription_init_default+0x48>
 800b056:	b020      	add	sp, #128	; 0x80
 800b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05c:	9003      	str	r0, [sp, #12]
 800b05e:	f000 f88b 	bl	800b178 <rcutils_reset_error>
 800b062:	9803      	ldr	r0, [sp, #12]
 800b064:	b020      	add	sp, #128	; 0x80
 800b066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b06a:	200b      	movs	r0, #11
 800b06c:	b020      	add	sp, #128	; 0x80
 800b06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b072:	200b      	movs	r0, #11
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	08016318 	.word	0x08016318

0800b07c <__default_zero_allocate>:
 800b07c:	f009 bbe4 	b.w	8014848 <calloc>

0800b080 <__default_reallocate>:
 800b080:	f009 bd70 	b.w	8014b64 <realloc>

0800b084 <__default_deallocate>:
 800b084:	f009 bc4e 	b.w	8014924 <free>

0800b088 <__default_allocate>:
 800b088:	f009 bc44 	b.w	8014914 <malloc>

0800b08c <rcutils_get_zero_initialized_allocator>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	4c05      	ldr	r4, [pc, #20]	; (800b0a4 <rcutils_get_zero_initialized_allocator+0x18>)
 800b090:	4686      	mov	lr, r0
 800b092:	4684      	mov	ip, r0
 800b094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	f8cc 3000 	str.w	r3, [ip]
 800b0a0:	4670      	mov	r0, lr
 800b0a2:	bd10      	pop	{r4, pc}
 800b0a4:	08016368 	.word	0x08016368

0800b0a8 <rcutils_set_default_allocator>:
 800b0a8:	b1a8      	cbz	r0, 800b0d6 <rcutils_set_default_allocator+0x2e>
 800b0aa:	6802      	ldr	r2, [r0, #0]
 800b0ac:	b1a2      	cbz	r2, 800b0d8 <rcutils_set_default_allocator+0x30>
 800b0ae:	6841      	ldr	r1, [r0, #4]
 800b0b0:	b1a1      	cbz	r1, 800b0dc <rcutils_set_default_allocator+0x34>
 800b0b2:	b410      	push	{r4}
 800b0b4:	68c4      	ldr	r4, [r0, #12]
 800b0b6:	b164      	cbz	r4, 800b0d2 <rcutils_set_default_allocator+0x2a>
 800b0b8:	6880      	ldr	r0, [r0, #8]
 800b0ba:	b138      	cbz	r0, 800b0cc <rcutils_set_default_allocator+0x24>
 800b0bc:	4b08      	ldr	r3, [pc, #32]	; (800b0e0 <rcutils_set_default_allocator+0x38>)
 800b0be:	601a      	str	r2, [r3, #0]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b0c6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	e7fa      	b.n	800b0cc <rcutils_set_default_allocator+0x24>
 800b0d6:	4770      	bx	lr
 800b0d8:	4610      	mov	r0, r2
 800b0da:	4770      	bx	lr
 800b0dc:	4608      	mov	r0, r1
 800b0de:	4770      	bx	lr
 800b0e0:	200001bc 	.word	0x200001bc

0800b0e4 <rcutils_get_default_allocator>:
 800b0e4:	b510      	push	{r4, lr}
 800b0e6:	4c05      	ldr	r4, [pc, #20]	; (800b0fc <rcutils_get_default_allocator+0x18>)
 800b0e8:	4686      	mov	lr, r0
 800b0ea:	4684      	mov	ip, r0
 800b0ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	f8cc 3000 	str.w	r3, [ip]
 800b0f8:	4670      	mov	r0, lr
 800b0fa:	bd10      	pop	{r4, pc}
 800b0fc:	200001bc 	.word	0x200001bc

0800b100 <rcutils_allocator_is_valid>:
 800b100:	b158      	cbz	r0, 800b11a <rcutils_allocator_is_valid+0x1a>
 800b102:	6803      	ldr	r3, [r0, #0]
 800b104:	b143      	cbz	r3, 800b118 <rcutils_allocator_is_valid+0x18>
 800b106:	6843      	ldr	r3, [r0, #4]
 800b108:	b133      	cbz	r3, 800b118 <rcutils_allocator_is_valid+0x18>
 800b10a:	68c3      	ldr	r3, [r0, #12]
 800b10c:	b123      	cbz	r3, 800b118 <rcutils_allocator_is_valid+0x18>
 800b10e:	6880      	ldr	r0, [r0, #8]
 800b110:	3800      	subs	r0, #0
 800b112:	bf18      	it	ne
 800b114:	2001      	movne	r0, #1
 800b116:	4770      	bx	lr
 800b118:	4618      	mov	r0, r3
 800b11a:	4770      	bx	lr

0800b11c <rcutils_get_env>:
 800b11c:	b168      	cbz	r0, 800b13a <rcutils_get_env+0x1e>
 800b11e:	b510      	push	{r4, lr}
 800b120:	460c      	mov	r4, r1
 800b122:	b129      	cbz	r1, 800b130 <rcutils_get_env+0x14>
 800b124:	f009 fbae 	bl	8014884 <getenv>
 800b128:	b120      	cbz	r0, 800b134 <rcutils_get_env+0x18>
 800b12a:	6020      	str	r0, [r4, #0]
 800b12c:	2000      	movs	r0, #0
 800b12e:	bd10      	pop	{r4, pc}
 800b130:	4803      	ldr	r0, [pc, #12]	; (800b140 <rcutils_get_env+0x24>)
 800b132:	bd10      	pop	{r4, pc}
 800b134:	4b03      	ldr	r3, [pc, #12]	; (800b144 <rcutils_get_env+0x28>)
 800b136:	6023      	str	r3, [r4, #0]
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	4803      	ldr	r0, [pc, #12]	; (800b148 <rcutils_get_env+0x2c>)
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	08016398 	.word	0x08016398
 800b144:	080164c0 	.word	0x080164c0
 800b148:	0801637c 	.word	0x0801637c

0800b14c <rcutils_get_error_string>:
 800b14c:	4b06      	ldr	r3, [pc, #24]	; (800b168 <rcutils_get_error_string+0x1c>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	b13b      	cbz	r3, 800b162 <rcutils_get_error_string+0x16>
 800b152:	4b06      	ldr	r3, [pc, #24]	; (800b16c <rcutils_get_error_string+0x20>)
 800b154:	781a      	ldrb	r2, [r3, #0]
 800b156:	b90a      	cbnz	r2, 800b15c <rcutils_get_error_string+0x10>
 800b158:	2201      	movs	r2, #1
 800b15a:	701a      	strb	r2, [r3, #0]
 800b15c:	4b04      	ldr	r3, [pc, #16]	; (800b170 <rcutils_get_error_string+0x24>)
 800b15e:	7818      	ldrb	r0, [r3, #0]
 800b160:	4770      	bx	lr
 800b162:	4b04      	ldr	r3, [pc, #16]	; (800b174 <rcutils_get_error_string+0x28>)
 800b164:	7818      	ldrb	r0, [r3, #0]
 800b166:	4770      	bx	lr
 800b168:	200091b0 	.word	0x200091b0
 800b16c:	200091c9 	.word	0x200091c9
 800b170:	200091c8 	.word	0x200091c8
 800b174:	080163b4 	.word	0x080163b4

0800b178 <rcutils_reset_error>:
 800b178:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800b198 <rcutils_reset_error+0x20>
 800b17c:	4a08      	ldr	r2, [pc, #32]	; (800b1a0 <rcutils_reset_error+0x28>)
 800b17e:	4809      	ldr	r0, [pc, #36]	; (800b1a4 <rcutils_reset_error+0x2c>)
 800b180:	4909      	ldr	r1, [pc, #36]	; (800b1a8 <rcutils_reset_error+0x30>)
 800b182:	2300      	movs	r3, #0
 800b184:	8013      	strh	r3, [r2, #0]
 800b186:	ed82 7b02 	vstr	d7, [r2, #8]
 800b18a:	4a08      	ldr	r2, [pc, #32]	; (800b1ac <rcutils_reset_error+0x34>)
 800b18c:	7003      	strb	r3, [r0, #0]
 800b18e:	700b      	strb	r3, [r1, #0]
 800b190:	7013      	strb	r3, [r2, #0]
 800b192:	4770      	bx	lr
 800b194:	f3af 8000 	nop.w
	...
 800b1a0:	200091b8 	.word	0x200091b8
 800b1a4:	200091c9 	.word	0x200091c9
 800b1a8:	200091c8 	.word	0x200091c8
 800b1ac:	200091b0 	.word	0x200091b0

0800b1b0 <rcutils_format_string_limit>:
 800b1b0:	b40f      	push	{r0, r1, r2, r3}
 800b1b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	ac08      	add	r4, sp, #32
 800b1b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b1ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b1be:	b34e      	cbz	r6, 800b214 <rcutils_format_string_limit+0x64>
 800b1c0:	a808      	add	r0, sp, #32
 800b1c2:	f7ff ff9d 	bl	800b100 <rcutils_allocator_is_valid>
 800b1c6:	b328      	cbz	r0, 800b214 <rcutils_format_string_limit+0x64>
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	ab0f      	add	r3, sp, #60	; 0x3c
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	e9cd 3300 	strd	r3, r3, [sp]
 800b1d4:	f000 f8f4 	bl	800b3c0 <rcutils_vsnprintf>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	4605      	mov	r5, r0
 800b1dc:	d01a      	beq.n	800b214 <rcutils_format_string_limit+0x64>
 800b1de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b1e2:	1c47      	adds	r7, r0, #1
 800b1e4:	429f      	cmp	r7, r3
 800b1e6:	bf84      	itt	hi
 800b1e8:	461f      	movhi	r7, r3
 800b1ea:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	9b08      	ldr	r3, [sp, #32]
 800b1f2:	4798      	blx	r3
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	b168      	cbz	r0, 800b214 <rcutils_format_string_limit+0x64>
 800b1f8:	9b01      	ldr	r3, [sp, #4]
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	f000 f8df 	bl	800b3c0 <rcutils_vsnprintf>
 800b202:	2800      	cmp	r0, #0
 800b204:	db02      	blt.n	800b20c <rcutils_format_string_limit+0x5c>
 800b206:	2300      	movs	r3, #0
 800b208:	5563      	strb	r3, [r4, r5]
 800b20a:	e004      	b.n	800b216 <rcutils_format_string_limit+0x66>
 800b20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b20e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b210:	4620      	mov	r0, r4
 800b212:	4798      	blx	r3
 800b214:	2400      	movs	r4, #0
 800b216:	4620      	mov	r0, r4
 800b218:	b003      	add	sp, #12
 800b21a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b21e:	b004      	add	sp, #16
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop

0800b224 <rcutils_repl_str>:
 800b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b228:	ed2d 8b02 	vpush	{d8}
 800b22c:	b087      	sub	sp, #28
 800b22e:	4680      	mov	r8, r0
 800b230:	4608      	mov	r0, r1
 800b232:	f8cd 8004 	str.w	r8, [sp, #4]
 800b236:	ee08 2a10 	vmov	s16, r2
 800b23a:	468a      	mov	sl, r1
 800b23c:	4699      	mov	r9, r3
 800b23e:	f7f4 ffd9 	bl	80001f4 <strlen>
 800b242:	2600      	movs	r6, #0
 800b244:	4647      	mov	r7, r8
 800b246:	9002      	str	r0, [sp, #8]
 800b248:	46b3      	mov	fp, r6
 800b24a:	2510      	movs	r5, #16
 800b24c:	46b0      	mov	r8, r6
 800b24e:	e01d      	b.n	800b28c <rcutils_repl_str+0x68>
 800b250:	f10b 0b01 	add.w	fp, fp, #1
 800b254:	455e      	cmp	r6, fp
 800b256:	d211      	bcs.n	800b27c <rcutils_repl_str+0x58>
 800b258:	442e      	add	r6, r5
 800b25a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b25e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b262:	00b1      	lsls	r1, r6, #2
 800b264:	4798      	blx	r3
 800b266:	2800      	cmp	r0, #0
 800b268:	f000 8088 	beq.w	800b37c <rcutils_repl_str+0x158>
 800b26c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b270:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800b274:	4680      	mov	r8, r0
 800b276:	bf28      	it	cs
 800b278:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800b27c:	9a01      	ldr	r2, [sp, #4]
 800b27e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800b282:	1aa2      	subs	r2, r4, r2
 800b284:	f843 2c04 	str.w	r2, [r3, #-4]
 800b288:	9b02      	ldr	r3, [sp, #8]
 800b28a:	18e7      	adds	r7, r4, r3
 800b28c:	4651      	mov	r1, sl
 800b28e:	4638      	mov	r0, r7
 800b290:	f009 fef1 	bl	8015076 <strstr>
 800b294:	4604      	mov	r4, r0
 800b296:	4640      	mov	r0, r8
 800b298:	2c00      	cmp	r4, #0
 800b29a:	d1d9      	bne.n	800b250 <rcutils_repl_str+0x2c>
 800b29c:	46b8      	mov	r8, r7
 800b29e:	4607      	mov	r7, r0
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	f7f4 ffa7 	bl	80001f4 <strlen>
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	eba8 0303 	sub.w	r3, r8, r3
 800b2ac:	181c      	adds	r4, r3, r0
 800b2ae:	9404      	str	r4, [sp, #16]
 800b2b0:	f1bb 0f00 	cmp.w	fp, #0
 800b2b4:	d04a      	beq.n	800b34c <rcutils_repl_str+0x128>
 800b2b6:	ee18 0a10 	vmov	r0, s16
 800b2ba:	f7f4 ff9b 	bl	80001f4 <strlen>
 800b2be:	9b02      	ldr	r3, [sp, #8]
 800b2c0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b2c4:	1ac3      	subs	r3, r0, r3
 800b2c6:	fb0b 4303 	mla	r3, fp, r3, r4
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	9305      	str	r3, [sp, #20]
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	f8d9 3000 	ldr.w	r3, [r9]
 800b2d4:	1c50      	adds	r0, r2, #1
 800b2d6:	4798      	blx	r3
 800b2d8:	9003      	str	r0, [sp, #12]
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d04f      	beq.n	800b37e <rcutils_repl_str+0x15a>
 800b2de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	4641      	mov	r1, r8
 800b2e6:	f009 ff68 	bl	80151ba <memcpy>
 800b2ea:	683d      	ldr	r5, [r7, #0]
 800b2ec:	9b03      	ldr	r3, [sp, #12]
 800b2ee:	9701      	str	r7, [sp, #4]
 800b2f0:	46ba      	mov	sl, r7
 800b2f2:	441d      	add	r5, r3
 800b2f4:	9f02      	ldr	r7, [sp, #8]
 800b2f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b2fa:	2401      	movs	r4, #1
 800b2fc:	46d1      	mov	r9, sl
 800b2fe:	ee18 aa10 	vmov	sl, s16
 800b302:	e00a      	b.n	800b31a <rcutils_repl_str+0xf6>
 800b304:	f8d9 5000 	ldr.w	r5, [r9]
 800b308:	1aaa      	subs	r2, r5, r2
 800b30a:	1885      	adds	r5, r0, r2
 800b30c:	f009 ff55 	bl	80151ba <memcpy>
 800b310:	45a3      	cmp	fp, r4
 800b312:	f104 0201 	add.w	r2, r4, #1
 800b316:	d935      	bls.n	800b384 <rcutils_repl_str+0x160>
 800b318:	4614      	mov	r4, r2
 800b31a:	4632      	mov	r2, r6
 800b31c:	4651      	mov	r1, sl
 800b31e:	4628      	mov	r0, r5
 800b320:	f009 ff4b 	bl	80151ba <memcpy>
 800b324:	f859 2b04 	ldr.w	r2, [r9], #4
 800b328:	45a3      	cmp	fp, r4
 800b32a:	443a      	add	r2, r7
 800b32c:	eb05 0006 	add.w	r0, r5, r6
 800b330:	eb08 0102 	add.w	r1, r8, r2
 800b334:	d1e6      	bne.n	800b304 <rcutils_repl_str+0xe0>
 800b336:	9b04      	ldr	r3, [sp, #16]
 800b338:	1a9a      	subs	r2, r3, r2
 800b33a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800b33e:	f009 ff3c 	bl	80151ba <memcpy>
 800b342:	9a03      	ldr	r2, [sp, #12]
 800b344:	9905      	ldr	r1, [sp, #20]
 800b346:	2300      	movs	r3, #0
 800b348:	5453      	strb	r3, [r2, r1]
 800b34a:	e00b      	b.n	800b364 <rcutils_repl_str+0x140>
 800b34c:	4620      	mov	r0, r4
 800b34e:	f8d9 3000 	ldr.w	r3, [r9]
 800b352:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b356:	3001      	adds	r0, #1
 800b358:	4798      	blx	r3
 800b35a:	9003      	str	r0, [sp, #12]
 800b35c:	b110      	cbz	r0, 800b364 <rcutils_repl_str+0x140>
 800b35e:	9901      	ldr	r1, [sp, #4]
 800b360:	f009 ff23 	bl	80151aa <strcpy>
 800b364:	4638      	mov	r0, r7
 800b366:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b36a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b36e:	4798      	blx	r3
 800b370:	9803      	ldr	r0, [sp, #12]
 800b372:	b007      	add	sp, #28
 800b374:	ecbd 8b02 	vpop	{d8}
 800b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	4647      	mov	r7, r8
 800b37e:	2300      	movs	r3, #0
 800b380:	9303      	str	r3, [sp, #12]
 800b382:	e7ef      	b.n	800b364 <rcutils_repl_str+0x140>
 800b384:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800b388:	e7db      	b.n	800b342 <rcutils_repl_str+0x11e>
 800b38a:	bf00      	nop

0800b38c <rcutils_snprintf>:
 800b38c:	b40c      	push	{r2, r3}
 800b38e:	b530      	push	{r4, r5, lr}
 800b390:	b083      	sub	sp, #12
 800b392:	ab06      	add	r3, sp, #24
 800b394:	f853 2b04 	ldr.w	r2, [r3], #4
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	b152      	cbz	r2, 800b3b2 <rcutils_snprintf+0x26>
 800b39c:	b138      	cbz	r0, 800b3ae <rcutils_snprintf+0x22>
 800b39e:	b141      	cbz	r1, 800b3b2 <rcutils_snprintf+0x26>
 800b3a0:	f009 fe0a 	bl	8014fb8 <vsniprintf>
 800b3a4:	b003      	add	sp, #12
 800b3a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3aa:	b002      	add	sp, #8
 800b3ac:	4770      	bx	lr
 800b3ae:	2900      	cmp	r1, #0
 800b3b0:	d0f6      	beq.n	800b3a0 <rcutils_snprintf+0x14>
 800b3b2:	f009 fecd 	bl	8015150 <__errno>
 800b3b6:	2316      	movs	r3, #22
 800b3b8:	6003      	str	r3, [r0, #0]
 800b3ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3be:	e7f1      	b.n	800b3a4 <rcutils_snprintf+0x18>

0800b3c0 <rcutils_vsnprintf>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	b13a      	cbz	r2, 800b3d4 <rcutils_vsnprintf+0x14>
 800b3c4:	b120      	cbz	r0, 800b3d0 <rcutils_vsnprintf+0x10>
 800b3c6:	b129      	cbz	r1, 800b3d4 <rcutils_vsnprintf+0x14>
 800b3c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3cc:	f009 bdf4 	b.w	8014fb8 <vsniprintf>
 800b3d0:	2900      	cmp	r1, #0
 800b3d2:	d0f9      	beq.n	800b3c8 <rcutils_vsnprintf+0x8>
 800b3d4:	f009 febc 	bl	8015150 <__errno>
 800b3d8:	2316      	movs	r3, #22
 800b3da:	6003      	str	r3, [r0, #0]
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
 800b3e2:	bf00      	nop

0800b3e4 <rcutils_strdup>:
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	b570      	push	{r4, r5, r6, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	ac07      	add	r4, sp, #28
 800b3ec:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	b1b0      	cbz	r0, 800b422 <rcutils_strdup+0x3e>
 800b3f4:	f7f4 fefe 	bl	80001f4 <strlen>
 800b3f8:	1c42      	adds	r2, r0, #1
 800b3fa:	9b07      	ldr	r3, [sp, #28]
 800b3fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3fe:	9201      	str	r2, [sp, #4]
 800b400:	4606      	mov	r6, r0
 800b402:	4610      	mov	r0, r2
 800b404:	4798      	blx	r3
 800b406:	4604      	mov	r4, r0
 800b408:	b128      	cbz	r0, 800b416 <rcutils_strdup+0x32>
 800b40a:	9a01      	ldr	r2, [sp, #4]
 800b40c:	4629      	mov	r1, r5
 800b40e:	f009 fed4 	bl	80151ba <memcpy>
 800b412:	2300      	movs	r3, #0
 800b414:	55a3      	strb	r3, [r4, r6]
 800b416:	4620      	mov	r0, r4
 800b418:	b002      	add	sp, #8
 800b41a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b41e:	b004      	add	sp, #16
 800b420:	4770      	bx	lr
 800b422:	4604      	mov	r4, r0
 800b424:	e7f7      	b.n	800b416 <rcutils_strdup+0x32>
 800b426:	bf00      	nop

0800b428 <rcutils_strndup>:
 800b428:	b082      	sub	sp, #8
 800b42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42c:	ac06      	add	r4, sp, #24
 800b42e:	e884 000c 	stmia.w	r4, {r2, r3}
 800b432:	4605      	mov	r5, r0
 800b434:	b188      	cbz	r0, 800b45a <rcutils_strndup+0x32>
 800b436:	1c4f      	adds	r7, r1, #1
 800b438:	460e      	mov	r6, r1
 800b43a:	4638      	mov	r0, r7
 800b43c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b43e:	4790      	blx	r2
 800b440:	4604      	mov	r4, r0
 800b442:	b128      	cbz	r0, 800b450 <rcutils_strndup+0x28>
 800b444:	463a      	mov	r2, r7
 800b446:	4629      	mov	r1, r5
 800b448:	f009 feb7 	bl	80151ba <memcpy>
 800b44c:	2300      	movs	r3, #0
 800b44e:	55a3      	strb	r3, [r4, r6]
 800b450:	4620      	mov	r0, r4
 800b452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b456:	b002      	add	sp, #8
 800b458:	4770      	bx	lr
 800b45a:	4604      	mov	r4, r0
 800b45c:	e7f8      	b.n	800b450 <rcutils_strndup+0x28>
 800b45e:	bf00      	nop

0800b460 <rcutils_system_time_now>:
 800b460:	b308      	cbz	r0, 800b4a6 <rcutils_system_time_now+0x46>
 800b462:	b570      	push	{r4, r5, r6, lr}
 800b464:	b084      	sub	sp, #16
 800b466:	4604      	mov	r4, r0
 800b468:	4669      	mov	r1, sp
 800b46a:	2001      	movs	r0, #1
 800b46c:	f7f6 fb20 	bl	8001ab0 <clock_gettime>
 800b470:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b474:	2d00      	cmp	r5, #0
 800b476:	db13      	blt.n	800b4a0 <rcutils_system_time_now+0x40>
 800b478:	9902      	ldr	r1, [sp, #8]
 800b47a:	2900      	cmp	r1, #0
 800b47c:	db0d      	blt.n	800b49a <rcutils_system_time_now+0x3a>
 800b47e:	4e0b      	ldr	r6, [pc, #44]	; (800b4ac <rcutils_system_time_now+0x4c>)
 800b480:	fba3 3206 	umull	r3, r2, r3, r6
 800b484:	185b      	adds	r3, r3, r1
 800b486:	fb06 2205 	mla	r2, r6, r5, r2
 800b48a:	f04f 0000 	mov.w	r0, #0
 800b48e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b492:	e9c4 3200 	strd	r3, r2, [r4]
 800b496:	b004      	add	sp, #16
 800b498:	bd70      	pop	{r4, r5, r6, pc}
 800b49a:	ea53 0205 	orrs.w	r2, r3, r5
 800b49e:	d1ee      	bne.n	800b47e <rcutils_system_time_now+0x1e>
 800b4a0:	2002      	movs	r0, #2
 800b4a2:	b004      	add	sp, #16
 800b4a4:	bd70      	pop	{r4, r5, r6, pc}
 800b4a6:	200b      	movs	r0, #11
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	3b9aca00 	.word	0x3b9aca00

0800b4b0 <rcutils_steady_time_now>:
 800b4b0:	b308      	cbz	r0, 800b4f6 <rcutils_steady_time_now+0x46>
 800b4b2:	b570      	push	{r4, r5, r6, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4669      	mov	r1, sp
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	f7f6 faf8 	bl	8001ab0 <clock_gettime>
 800b4c0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b4c4:	2d00      	cmp	r5, #0
 800b4c6:	db13      	blt.n	800b4f0 <rcutils_steady_time_now+0x40>
 800b4c8:	9902      	ldr	r1, [sp, #8]
 800b4ca:	2900      	cmp	r1, #0
 800b4cc:	db0d      	blt.n	800b4ea <rcutils_steady_time_now+0x3a>
 800b4ce:	4e0b      	ldr	r6, [pc, #44]	; (800b4fc <rcutils_steady_time_now+0x4c>)
 800b4d0:	fba3 3206 	umull	r3, r2, r3, r6
 800b4d4:	185b      	adds	r3, r3, r1
 800b4d6:	fb06 2205 	mla	r2, r6, r5, r2
 800b4da:	f04f 0000 	mov.w	r0, #0
 800b4de:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b4e2:	e9c4 3200 	strd	r3, r2, [r4]
 800b4e6:	b004      	add	sp, #16
 800b4e8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ea:	ea53 0205 	orrs.w	r2, r3, r5
 800b4ee:	d1ee      	bne.n	800b4ce <rcutils_steady_time_now+0x1e>
 800b4f0:	2002      	movs	r0, #2
 800b4f2:	b004      	add	sp, #16
 800b4f4:	bd70      	pop	{r4, r5, r6, pc}
 800b4f6:	200b      	movs	r0, #11
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	3b9aca00 	.word	0x3b9aca00

0800b500 <rmw_subscription_content_filter_options_fini>:
 800b500:	b1b0      	cbz	r0, 800b530 <rmw_subscription_content_filter_options_fini+0x30>
 800b502:	b538      	push	{r3, r4, r5, lr}
 800b504:	4604      	mov	r4, r0
 800b506:	4608      	mov	r0, r1
 800b508:	460d      	mov	r5, r1
 800b50a:	f7ff fdf9 	bl	800b100 <rcutils_allocator_is_valid>
 800b50e:	b168      	cbz	r0, 800b52c <rmw_subscription_content_filter_options_fini+0x2c>
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	b120      	cbz	r0, 800b51e <rmw_subscription_content_filter_options_fini+0x1e>
 800b514:	686b      	ldr	r3, [r5, #4]
 800b516:	6929      	ldr	r1, [r5, #16]
 800b518:	4798      	blx	r3
 800b51a:	2300      	movs	r3, #0
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	1d20      	adds	r0, r4, #4
 800b520:	f006 f8ce 	bl	80116c0 <rcutils_string_array_fini>
 800b524:	3800      	subs	r0, #0
 800b526:	bf18      	it	ne
 800b528:	2001      	movne	r0, #1
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	200b      	movs	r0, #11
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	200b      	movs	r0, #11
 800b532:	4770      	bx	lr

0800b534 <rmw_get_default_subscription_options>:
 800b534:	2200      	movs	r2, #0
 800b536:	e9c0 2200 	strd	r2, r2, [r0]
 800b53a:	6082      	str	r2, [r0, #8]
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop

0800b540 <rmw_get_zero_initialized_message_info>:
 800b540:	b510      	push	{r4, lr}
 800b542:	2240      	movs	r2, #64	; 0x40
 800b544:	4604      	mov	r4, r0
 800b546:	2100      	movs	r1, #0
 800b548:	f009 fd6e 	bl	8015028 <memset>
 800b54c:	4620      	mov	r0, r4
 800b54e:	bd10      	pop	{r4, pc}

0800b550 <rmw_validate_namespace_with_size>:
 800b550:	b340      	cbz	r0, 800b5a4 <rmw_validate_namespace_with_size+0x54>
 800b552:	b570      	push	{r4, r5, r6, lr}
 800b554:	4614      	mov	r4, r2
 800b556:	b0c2      	sub	sp, #264	; 0x108
 800b558:	b332      	cbz	r2, 800b5a8 <rmw_validate_namespace_with_size+0x58>
 800b55a:	2901      	cmp	r1, #1
 800b55c:	460d      	mov	r5, r1
 800b55e:	461e      	mov	r6, r3
 800b560:	d102      	bne.n	800b568 <rmw_validate_namespace_with_size+0x18>
 800b562:	7803      	ldrb	r3, [r0, #0]
 800b564:	2b2f      	cmp	r3, #47	; 0x2f
 800b566:	d012      	beq.n	800b58e <rmw_validate_namespace_with_size+0x3e>
 800b568:	aa01      	add	r2, sp, #4
 800b56a:	4669      	mov	r1, sp
 800b56c:	f006 faa4 	bl	8011ab8 <rmw_validate_full_topic_name>
 800b570:	b978      	cbnz	r0, 800b592 <rmw_validate_namespace_with_size+0x42>
 800b572:	9b00      	ldr	r3, [sp, #0]
 800b574:	b14b      	cbz	r3, 800b58a <rmw_validate_namespace_with_size+0x3a>
 800b576:	2b07      	cmp	r3, #7
 800b578:	d007      	beq.n	800b58a <rmw_validate_namespace_with_size+0x3a>
 800b57a:	1e5a      	subs	r2, r3, #1
 800b57c:	2a05      	cmp	r2, #5
 800b57e:	d82b      	bhi.n	800b5d8 <rmw_validate_namespace_with_size+0x88>
 800b580:	e8df f002 	tbb	[pc, r2]
 800b584:	1e212427 	.word	0x1e212427
 800b588:	141b      	.short	0x141b
 800b58a:	2df5      	cmp	r5, #245	; 0xf5
 800b58c:	d803      	bhi.n	800b596 <rmw_validate_namespace_with_size+0x46>
 800b58e:	2000      	movs	r0, #0
 800b590:	6020      	str	r0, [r4, #0]
 800b592:	b042      	add	sp, #264	; 0x108
 800b594:	bd70      	pop	{r4, r5, r6, pc}
 800b596:	2307      	movs	r3, #7
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	2e00      	cmp	r6, #0
 800b59c:	d0f9      	beq.n	800b592 <rmw_validate_namespace_with_size+0x42>
 800b59e:	23f4      	movs	r3, #244	; 0xf4
 800b5a0:	6033      	str	r3, [r6, #0]
 800b5a2:	e7f6      	b.n	800b592 <rmw_validate_namespace_with_size+0x42>
 800b5a4:	200b      	movs	r0, #11
 800b5a6:	4770      	bx	lr
 800b5a8:	200b      	movs	r0, #11
 800b5aa:	e7f2      	b.n	800b592 <rmw_validate_namespace_with_size+0x42>
 800b5ac:	2306      	movs	r3, #6
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	2e00      	cmp	r6, #0
 800b5b2:	d0ee      	beq.n	800b592 <rmw_validate_namespace_with_size+0x42>
 800b5b4:	9b01      	ldr	r3, [sp, #4]
 800b5b6:	6033      	str	r3, [r6, #0]
 800b5b8:	e7eb      	b.n	800b592 <rmw_validate_namespace_with_size+0x42>
 800b5ba:	2305      	movs	r3, #5
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	e7f7      	b.n	800b5b0 <rmw_validate_namespace_with_size+0x60>
 800b5c0:	2304      	movs	r3, #4
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	e7f4      	b.n	800b5b0 <rmw_validate_namespace_with_size+0x60>
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	e7f1      	b.n	800b5b0 <rmw_validate_namespace_with_size+0x60>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	6023      	str	r3, [r4, #0]
 800b5d0:	e7ee      	b.n	800b5b0 <rmw_validate_namespace_with_size+0x60>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	e7eb      	b.n	800b5b0 <rmw_validate_namespace_with_size+0x60>
 800b5d8:	4a03      	ldr	r2, [pc, #12]	; (800b5e8 <rmw_validate_namespace_with_size+0x98>)
 800b5da:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b5de:	a802      	add	r0, sp, #8
 800b5e0:	f7ff fed4 	bl	800b38c <rcutils_snprintf>
 800b5e4:	2001      	movs	r0, #1
 800b5e6:	e7d4      	b.n	800b592 <rmw_validate_namespace_with_size+0x42>
 800b5e8:	080163b8 	.word	0x080163b8

0800b5ec <rmw_validate_namespace>:
 800b5ec:	b168      	cbz	r0, 800b60a <rmw_validate_namespace+0x1e>
 800b5ee:	b570      	push	{r4, r5, r6, lr}
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	4616      	mov	r6, r2
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	f7f4 fdfd 	bl	80001f4 <strlen>
 800b5fa:	4633      	mov	r3, r6
 800b5fc:	4601      	mov	r1, r0
 800b5fe:	462a      	mov	r2, r5
 800b600:	4620      	mov	r0, r4
 800b602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b606:	f7ff bfa3 	b.w	800b550 <rmw_validate_namespace_with_size>
 800b60a:	200b      	movs	r0, #11
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop

0800b610 <rmw_namespace_validation_result_string>:
 800b610:	2807      	cmp	r0, #7
 800b612:	bf9a      	itte	ls
 800b614:	4b02      	ldrls	r3, [pc, #8]	; (800b620 <rmw_namespace_validation_result_string+0x10>)
 800b616:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b61a:	4802      	ldrhi	r0, [pc, #8]	; (800b624 <rmw_namespace_validation_result_string+0x14>)
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	080165b0 	.word	0x080165b0
 800b624:	08016408 	.word	0x08016408

0800b628 <rmw_validate_node_name>:
 800b628:	2800      	cmp	r0, #0
 800b62a:	d03b      	beq.n	800b6a4 <rmw_validate_node_name+0x7c>
 800b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b630:	460d      	mov	r5, r1
 800b632:	2900      	cmp	r1, #0
 800b634:	d038      	beq.n	800b6a8 <rmw_validate_node_name+0x80>
 800b636:	4616      	mov	r6, r2
 800b638:	4604      	mov	r4, r0
 800b63a:	f7f4 fddb 	bl	80001f4 <strlen>
 800b63e:	b1e0      	cbz	r0, 800b67a <rmw_validate_node_name+0x52>
 800b640:	1e63      	subs	r3, r4, #1
 800b642:	eb03 0800 	add.w	r8, r3, r0
 800b646:	f1c4 0101 	rsb	r1, r4, #1
 800b64a:	18cf      	adds	r7, r1, r3
 800b64c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800b650:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800b654:	f02e 0c20 	bic.w	ip, lr, #32
 800b658:	2a09      	cmp	r2, #9
 800b65a:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800b65e:	d914      	bls.n	800b68a <rmw_validate_node_name+0x62>
 800b660:	f1bc 0f19 	cmp.w	ip, #25
 800b664:	d911      	bls.n	800b68a <rmw_validate_node_name+0x62>
 800b666:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800b66a:	d00e      	beq.n	800b68a <rmw_validate_node_name+0x62>
 800b66c:	2302      	movs	r3, #2
 800b66e:	602b      	str	r3, [r5, #0]
 800b670:	b106      	cbz	r6, 800b674 <rmw_validate_node_name+0x4c>
 800b672:	6037      	str	r7, [r6, #0]
 800b674:	2000      	movs	r0, #0
 800b676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67a:	2301      	movs	r3, #1
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	2e00      	cmp	r6, #0
 800b680:	d0f8      	beq.n	800b674 <rmw_validate_node_name+0x4c>
 800b682:	2000      	movs	r0, #0
 800b684:	6030      	str	r0, [r6, #0]
 800b686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68a:	4543      	cmp	r3, r8
 800b68c:	d1dd      	bne.n	800b64a <rmw_validate_node_name+0x22>
 800b68e:	7822      	ldrb	r2, [r4, #0]
 800b690:	4b0d      	ldr	r3, [pc, #52]	; (800b6c8 <rmw_validate_node_name+0xa0>)
 800b692:	5cd3      	ldrb	r3, [r2, r3]
 800b694:	f013 0304 	ands.w	r3, r3, #4
 800b698:	d110      	bne.n	800b6bc <rmw_validate_node_name+0x94>
 800b69a:	28ff      	cmp	r0, #255	; 0xff
 800b69c:	d806      	bhi.n	800b6ac <rmw_validate_node_name+0x84>
 800b69e:	602b      	str	r3, [r5, #0]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	e7e8      	b.n	800b676 <rmw_validate_node_name+0x4e>
 800b6a4:	200b      	movs	r0, #11
 800b6a6:	4770      	bx	lr
 800b6a8:	200b      	movs	r0, #11
 800b6aa:	e7e4      	b.n	800b676 <rmw_validate_node_name+0x4e>
 800b6ac:	2204      	movs	r2, #4
 800b6ae:	602a      	str	r2, [r5, #0]
 800b6b0:	2e00      	cmp	r6, #0
 800b6b2:	d0df      	beq.n	800b674 <rmw_validate_node_name+0x4c>
 800b6b4:	22fe      	movs	r2, #254	; 0xfe
 800b6b6:	6032      	str	r2, [r6, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	e7dc      	b.n	800b676 <rmw_validate_node_name+0x4e>
 800b6bc:	2303      	movs	r3, #3
 800b6be:	602b      	str	r3, [r5, #0]
 800b6c0:	2e00      	cmp	r6, #0
 800b6c2:	d1de      	bne.n	800b682 <rmw_validate_node_name+0x5a>
 800b6c4:	e7d6      	b.n	800b674 <rmw_validate_node_name+0x4c>
 800b6c6:	bf00      	nop
 800b6c8:	08016bb0 	.word	0x08016bb0

0800b6cc <rmw_node_name_validation_result_string>:
 800b6cc:	2804      	cmp	r0, #4
 800b6ce:	bf9a      	itte	ls
 800b6d0:	4b02      	ldrls	r3, [pc, #8]	; (800b6dc <rmw_node_name_validation_result_string+0x10>)
 800b6d2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b6d6:	4802      	ldrhi	r0, [pc, #8]	; (800b6e0 <rmw_node_name_validation_result_string+0x14>)
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	080166bc 	.word	0x080166bc
 800b6e0:	080165d0 	.word	0x080165d0

0800b6e4 <rmw_uros_set_custom_transport>:
 800b6e4:	b470      	push	{r4, r5, r6}
 800b6e6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b6ea:	b162      	cbz	r2, 800b706 <rmw_uros_set_custom_transport+0x22>
 800b6ec:	b15b      	cbz	r3, 800b706 <rmw_uros_set_custom_transport+0x22>
 800b6ee:	b155      	cbz	r5, 800b706 <rmw_uros_set_custom_transport+0x22>
 800b6f0:	b14e      	cbz	r6, 800b706 <rmw_uros_set_custom_transport+0x22>
 800b6f2:	4c06      	ldr	r4, [pc, #24]	; (800b70c <rmw_uros_set_custom_transport+0x28>)
 800b6f4:	7020      	strb	r0, [r4, #0]
 800b6f6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b6fa:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b6fe:	6166      	str	r6, [r4, #20]
 800b700:	2000      	movs	r0, #0
 800b702:	bc70      	pop	{r4, r5, r6}
 800b704:	4770      	bx	lr
 800b706:	200b      	movs	r0, #11
 800b708:	bc70      	pop	{r4, r5, r6}
 800b70a:	4770      	bx	lr
 800b70c:	200091cc 	.word	0x200091cc

0800b710 <create_node>:
 800b710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b714:	b083      	sub	sp, #12
 800b716:	2b00      	cmp	r3, #0
 800b718:	d05f      	beq.n	800b7da <create_node+0xca>
 800b71a:	4606      	mov	r6, r0
 800b71c:	4835      	ldr	r0, [pc, #212]	; (800b7f4 <create_node+0xe4>)
 800b71e:	460f      	mov	r7, r1
 800b720:	4690      	mov	r8, r2
 800b722:	461d      	mov	r5, r3
 800b724:	f006 fa3e 	bl	8011ba4 <get_memory>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d056      	beq.n	800b7da <create_node+0xca>
 800b72c:	6884      	ldr	r4, [r0, #8]
 800b72e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b730:	6123      	str	r3, [r4, #16]
 800b732:	f006 fa9f 	bl	8011c74 <rmw_get_implementation_identifier>
 800b736:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800b73a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b73e:	f8c4 9020 	str.w	r9, [r4, #32]
 800b742:	4630      	mov	r0, r6
 800b744:	f7f4 fd56 	bl	80001f4 <strlen>
 800b748:	1c42      	adds	r2, r0, #1
 800b74a:	2a3c      	cmp	r2, #60	; 0x3c
 800b74c:	f104 0518 	add.w	r5, r4, #24
 800b750:	d840      	bhi.n	800b7d4 <create_node+0xc4>
 800b752:	4648      	mov	r0, r9
 800b754:	4631      	mov	r1, r6
 800b756:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800b75a:	f009 fd2e 	bl	80151ba <memcpy>
 800b75e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800b762:	4638      	mov	r0, r7
 800b764:	f7f4 fd46 	bl	80001f4 <strlen>
 800b768:	1c42      	adds	r2, r0, #1
 800b76a:	2a3c      	cmp	r2, #60	; 0x3c
 800b76c:	d832      	bhi.n	800b7d4 <create_node+0xc4>
 800b76e:	4639      	mov	r1, r7
 800b770:	4648      	mov	r0, r9
 800b772:	f009 fd22 	bl	80151ba <memcpy>
 800b776:	6923      	ldr	r3, [r4, #16]
 800b778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b77c:	2101      	movs	r1, #1
 800b77e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800b782:	1842      	adds	r2, r0, r1
 800b784:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800b788:	f001 f842 	bl	800c810 <uxr_object_id>
 800b78c:	6160      	str	r0, [r4, #20]
 800b78e:	783b      	ldrb	r3, [r7, #0]
 800b790:	2b2f      	cmp	r3, #47	; 0x2f
 800b792:	d127      	bne.n	800b7e4 <create_node+0xd4>
 800b794:	787b      	ldrb	r3, [r7, #1]
 800b796:	bb2b      	cbnz	r3, 800b7e4 <create_node+0xd4>
 800b798:	4a17      	ldr	r2, [pc, #92]	; (800b7f8 <create_node+0xe8>)
 800b79a:	4818      	ldr	r0, [pc, #96]	; (800b7fc <create_node+0xec>)
 800b79c:	4633      	mov	r3, r6
 800b79e:	213c      	movs	r1, #60	; 0x3c
 800b7a0:	f009 fb68 	bl	8014e74 <sniprintf>
 800b7a4:	6920      	ldr	r0, [r4, #16]
 800b7a6:	4915      	ldr	r1, [pc, #84]	; (800b7fc <create_node+0xec>)
 800b7a8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800b7ac:	9100      	str	r1, [sp, #0]
 800b7ae:	2106      	movs	r1, #6
 800b7b0:	9101      	str	r1, [sp, #4]
 800b7b2:	6811      	ldr	r1, [r2, #0]
 800b7b4:	6962      	ldr	r2, [r4, #20]
 800b7b6:	fa1f f388 	uxth.w	r3, r8
 800b7ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b7be:	f000 ff17 	bl	800c5f0 <uxr_buffer_create_participant_bin>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	6920      	ldr	r0, [r4, #16]
 800b7c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b7ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b7ce:	f000 fdc5 	bl	800c35c <run_xrce_session>
 800b7d2:	b918      	cbnz	r0, 800b7dc <create_node+0xcc>
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	f000 fc51 	bl	800c07c <rmw_uxrce_fini_node_memory>
 800b7da:	2500      	movs	r5, #0
 800b7dc:	4628      	mov	r0, r5
 800b7de:	b003      	add	sp, #12
 800b7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7e4:	4a06      	ldr	r2, [pc, #24]	; (800b800 <create_node+0xf0>)
 800b7e6:	9600      	str	r6, [sp, #0]
 800b7e8:	463b      	mov	r3, r7
 800b7ea:	213c      	movs	r1, #60	; 0x3c
 800b7ec:	4803      	ldr	r0, [pc, #12]	; (800b7fc <create_node+0xec>)
 800b7ee:	f009 fb41 	bl	8014e74 <sniprintf>
 800b7f2:	e7d7      	b.n	800b7a4 <create_node+0x94>
 800b7f4:	2000daf4 	.word	0x2000daf4
 800b7f8:	080166e0 	.word	0x080166e0
 800b7fc:	200091e8 	.word	0x200091e8
 800b800:	08016228 	.word	0x08016228

0800b804 <rmw_create_node>:
 800b804:	b199      	cbz	r1, 800b82e <rmw_create_node+0x2a>
 800b806:	780b      	ldrb	r3, [r1, #0]
 800b808:	468c      	mov	ip, r1
 800b80a:	b183      	cbz	r3, 800b82e <rmw_create_node+0x2a>
 800b80c:	b410      	push	{r4}
 800b80e:	4614      	mov	r4, r2
 800b810:	b14a      	cbz	r2, 800b826 <rmw_create_node+0x22>
 800b812:	7813      	ldrb	r3, [r2, #0]
 800b814:	b13b      	cbz	r3, 800b826 <rmw_create_node+0x22>
 800b816:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800b818:	4603      	mov	r3, r0
 800b81a:	4621      	mov	r1, r4
 800b81c:	4660      	mov	r0, ip
 800b81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b822:	f7ff bf75 	b.w	800b710 <create_node>
 800b826:	2000      	movs	r0, #0
 800b828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	2000      	movs	r0, #0
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop

0800b834 <rmw_destroy_node>:
 800b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b836:	b328      	cbz	r0, 800b884 <rmw_destroy_node+0x50>
 800b838:	4607      	mov	r7, r0
 800b83a:	6800      	ldr	r0, [r0, #0]
 800b83c:	b120      	cbz	r0, 800b848 <rmw_destroy_node+0x14>
 800b83e:	4b36      	ldr	r3, [pc, #216]	; (800b918 <rmw_destroy_node+0xe4>)
 800b840:	6819      	ldr	r1, [r3, #0]
 800b842:	f7f4 fccd 	bl	80001e0 <strcmp>
 800b846:	b9e8      	cbnz	r0, 800b884 <rmw_destroy_node+0x50>
 800b848:	687d      	ldr	r5, [r7, #4]
 800b84a:	b1dd      	cbz	r5, 800b884 <rmw_destroy_node+0x50>
 800b84c:	4b33      	ldr	r3, [pc, #204]	; (800b91c <rmw_destroy_node+0xe8>)
 800b84e:	681c      	ldr	r4, [r3, #0]
 800b850:	2c00      	cmp	r4, #0
 800b852:	d05f      	beq.n	800b914 <rmw_destroy_node+0xe0>
 800b854:	2600      	movs	r6, #0
 800b856:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b85a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800b85e:	429d      	cmp	r5, r3
 800b860:	d013      	beq.n	800b88a <rmw_destroy_node+0x56>
 800b862:	2c00      	cmp	r4, #0
 800b864:	d1f7      	bne.n	800b856 <rmw_destroy_node+0x22>
 800b866:	4b2e      	ldr	r3, [pc, #184]	; (800b920 <rmw_destroy_node+0xec>)
 800b868:	681c      	ldr	r4, [r3, #0]
 800b86a:	b1c4      	cbz	r4, 800b89e <rmw_destroy_node+0x6a>
 800b86c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b870:	6a0b      	ldr	r3, [r1, #32]
 800b872:	429d      	cmp	r5, r3
 800b874:	d1f9      	bne.n	800b86a <rmw_destroy_node+0x36>
 800b876:	317c      	adds	r1, #124	; 0x7c
 800b878:	4638      	mov	r0, r7
 800b87a:	f000 f9e5 	bl	800bc48 <rmw_destroy_subscription>
 800b87e:	2801      	cmp	r0, #1
 800b880:	4606      	mov	r6, r0
 800b882:	d1f2      	bne.n	800b86a <rmw_destroy_node+0x36>
 800b884:	2601      	movs	r6, #1
 800b886:	4630      	mov	r0, r6
 800b888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b88a:	3184      	adds	r1, #132	; 0x84
 800b88c:	4638      	mov	r0, r7
 800b88e:	f000 f853 	bl	800b938 <rmw_destroy_publisher>
 800b892:	2801      	cmp	r0, #1
 800b894:	4606      	mov	r6, r0
 800b896:	d0f5      	beq.n	800b884 <rmw_destroy_node+0x50>
 800b898:	2c00      	cmp	r4, #0
 800b89a:	d1dc      	bne.n	800b856 <rmw_destroy_node+0x22>
 800b89c:	e7e3      	b.n	800b866 <rmw_destroy_node+0x32>
 800b89e:	4b21      	ldr	r3, [pc, #132]	; (800b924 <rmw_destroy_node+0xf0>)
 800b8a0:	681c      	ldr	r4, [r3, #0]
 800b8a2:	b16c      	cbz	r4, 800b8c0 <rmw_destroy_node+0x8c>
 800b8a4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b8a8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800b8aa:	429d      	cmp	r5, r3
 800b8ac:	d1f9      	bne.n	800b8a2 <rmw_destroy_node+0x6e>
 800b8ae:	317c      	adds	r1, #124	; 0x7c
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	f000 f893 	bl	800b9dc <rmw_destroy_service>
 800b8b6:	2801      	cmp	r0, #1
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	d0e3      	beq.n	800b884 <rmw_destroy_node+0x50>
 800b8bc:	2c00      	cmp	r4, #0
 800b8be:	d1f1      	bne.n	800b8a4 <rmw_destroy_node+0x70>
 800b8c0:	4b19      	ldr	r3, [pc, #100]	; (800b928 <rmw_destroy_node+0xf4>)
 800b8c2:	681c      	ldr	r4, [r3, #0]
 800b8c4:	b16c      	cbz	r4, 800b8e2 <rmw_destroy_node+0xae>
 800b8c6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b8ca:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800b8cc:	429d      	cmp	r5, r3
 800b8ce:	d1f9      	bne.n	800b8c4 <rmw_destroy_node+0x90>
 800b8d0:	317c      	adds	r1, #124	; 0x7c
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	f006 f98a 	bl	8011bec <rmw_destroy_client>
 800b8d8:	2801      	cmp	r0, #1
 800b8da:	4606      	mov	r6, r0
 800b8dc:	d0d2      	beq.n	800b884 <rmw_destroy_node+0x50>
 800b8de:	2c00      	cmp	r4, #0
 800b8e0:	d1f1      	bne.n	800b8c6 <rmw_destroy_node+0x92>
 800b8e2:	6928      	ldr	r0, [r5, #16]
 800b8e4:	696a      	ldr	r2, [r5, #20]
 800b8e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b8ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b8ee:	6819      	ldr	r1, [r3, #0]
 800b8f0:	f000 fe32 	bl	800c558 <uxr_buffer_delete_entity>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	6928      	ldr	r0, [r5, #16]
 800b8f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b8fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b900:	f000 fd2c 	bl	800c35c <run_xrce_session>
 800b904:	2800      	cmp	r0, #0
 800b906:	bf08      	it	eq
 800b908:	2602      	moveq	r6, #2
 800b90a:	4638      	mov	r0, r7
 800b90c:	f000 fbb6 	bl	800c07c <rmw_uxrce_fini_node_memory>
 800b910:	4630      	mov	r0, r6
 800b912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b914:	4626      	mov	r6, r4
 800b916:	e7a6      	b.n	800b866 <rmw_destroy_node+0x32>
 800b918:	08016908 	.word	0x08016908
 800b91c:	2000db04 	.word	0x2000db04
 800b920:	2000db44 	.word	0x2000db44
 800b924:	2000db14 	.word	0x2000db14
 800b928:	20009224 	.word	0x20009224

0800b92c <rmw_node_get_graph_guard_condition>:
 800b92c:	6843      	ldr	r3, [r0, #4]
 800b92e:	6918      	ldr	r0, [r3, #16]
 800b930:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop

0800b938 <rmw_destroy_publisher>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	b128      	cbz	r0, 800b948 <rmw_destroy_publisher+0x10>
 800b93c:	4604      	mov	r4, r0
 800b93e:	6800      	ldr	r0, [r0, #0]
 800b940:	460d      	mov	r5, r1
 800b942:	f000 fd8b 	bl	800c45c <is_uxrce_rmw_identifier_valid>
 800b946:	b910      	cbnz	r0, 800b94e <rmw_destroy_publisher+0x16>
 800b948:	2401      	movs	r4, #1
 800b94a:	4620      	mov	r0, r4
 800b94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b94e:	6863      	ldr	r3, [r4, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0f9      	beq.n	800b948 <rmw_destroy_publisher+0x10>
 800b954:	2d00      	cmp	r5, #0
 800b956:	d0f7      	beq.n	800b948 <rmw_destroy_publisher+0x10>
 800b958:	6828      	ldr	r0, [r5, #0]
 800b95a:	f000 fd7f 	bl	800c45c <is_uxrce_rmw_identifier_valid>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d0f2      	beq.n	800b948 <rmw_destroy_publisher+0x10>
 800b962:	686c      	ldr	r4, [r5, #4]
 800b964:	2c00      	cmp	r4, #0
 800b966:	d0ef      	beq.n	800b948 <rmw_destroy_publisher+0x10>
 800b968:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b96a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800b96e:	f006 fc5f 	bl	8012230 <destroy_topic>
 800b972:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b976:	6962      	ldr	r2, [r4, #20]
 800b978:	6918      	ldr	r0, [r3, #16]
 800b97a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b97e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b982:	6819      	ldr	r1, [r3, #0]
 800b984:	f000 fde8 	bl	800c558 <uxr_buffer_delete_entity>
 800b988:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b98c:	6922      	ldr	r2, [r4, #16]
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800b994:	4604      	mov	r4, r0
 800b996:	6809      	ldr	r1, [r1, #0]
 800b998:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b99c:	f000 fddc 	bl	800c558 <uxr_buffer_delete_entity>
 800b9a0:	693e      	ldr	r6, [r7, #16]
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800b9a8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f000 fcd4 	bl	800c35c <run_xrce_session>
 800b9b4:	693e      	ldr	r6, [r7, #16]
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800b9bc:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f000 fcca 	bl	800c35c <run_xrce_session>
 800b9c8:	b12c      	cbz	r4, 800b9d6 <rmw_destroy_publisher+0x9e>
 800b9ca:	b120      	cbz	r0, 800b9d6 <rmw_destroy_publisher+0x9e>
 800b9cc:	2400      	movs	r4, #0
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 fb6c 	bl	800c0ac <rmw_uxrce_fini_publisher_memory>
 800b9d4:	e7b9      	b.n	800b94a <rmw_destroy_publisher+0x12>
 800b9d6:	2402      	movs	r4, #2
 800b9d8:	e7f9      	b.n	800b9ce <rmw_destroy_publisher+0x96>
 800b9da:	bf00      	nop

0800b9dc <rmw_destroy_service>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	b128      	cbz	r0, 800b9ec <rmw_destroy_service+0x10>
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	6800      	ldr	r0, [r0, #0]
 800b9e4:	460d      	mov	r5, r1
 800b9e6:	f000 fd39 	bl	800c45c <is_uxrce_rmw_identifier_valid>
 800b9ea:	b910      	cbnz	r0, 800b9f2 <rmw_destroy_service+0x16>
 800b9ec:	2401      	movs	r4, #1
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	bd70      	pop	{r4, r5, r6, pc}
 800b9f2:	6863      	ldr	r3, [r4, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d0f9      	beq.n	800b9ec <rmw_destroy_service+0x10>
 800b9f8:	2d00      	cmp	r5, #0
 800b9fa:	d0f7      	beq.n	800b9ec <rmw_destroy_service+0x10>
 800b9fc:	6828      	ldr	r0, [r5, #0]
 800b9fe:	f000 fd2d 	bl	800c45c <is_uxrce_rmw_identifier_valid>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d0f2      	beq.n	800b9ec <rmw_destroy_service+0x10>
 800ba06:	686e      	ldr	r6, [r5, #4]
 800ba08:	2e00      	cmp	r6, #0
 800ba0a:	d0ef      	beq.n	800b9ec <rmw_destroy_service+0x10>
 800ba0c:	6864      	ldr	r4, [r4, #4]
 800ba0e:	6932      	ldr	r2, [r6, #16]
 800ba10:	6920      	ldr	r0, [r4, #16]
 800ba12:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ba16:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ba1a:	6819      	ldr	r1, [r3, #0]
 800ba1c:	f000 ff62 	bl	800c8e4 <uxr_buffer_cancel_data>
 800ba20:	4602      	mov	r2, r0
 800ba22:	6920      	ldr	r0, [r4, #16]
 800ba24:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ba28:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ba2c:	f000 fc96 	bl	800c35c <run_xrce_session>
 800ba30:	6920      	ldr	r0, [r4, #16]
 800ba32:	6932      	ldr	r2, [r6, #16]
 800ba34:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ba38:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ba3c:	6819      	ldr	r1, [r3, #0]
 800ba3e:	f000 fd8b 	bl	800c558 <uxr_buffer_delete_entity>
 800ba42:	4602      	mov	r2, r0
 800ba44:	6920      	ldr	r0, [r4, #16]
 800ba46:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ba4a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ba4e:	f000 fc85 	bl	800c35c <run_xrce_session>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	4628      	mov	r0, r5
 800ba56:	bf14      	ite	ne
 800ba58:	2400      	movne	r4, #0
 800ba5a:	2402      	moveq	r4, #2
 800ba5c:	f000 fb52 	bl	800c104 <rmw_uxrce_fini_service_memory>
 800ba60:	e7c5      	b.n	800b9ee <rmw_destroy_service+0x12>
 800ba62:	bf00      	nop

0800ba64 <rmw_create_subscription>:
 800ba64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	b08d      	sub	sp, #52	; 0x34
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	f000 80d1 	beq.w	800bc12 <rmw_create_subscription+0x1ae>
 800ba70:	460e      	mov	r6, r1
 800ba72:	2900      	cmp	r1, #0
 800ba74:	f000 80cd 	beq.w	800bc12 <rmw_create_subscription+0x1ae>
 800ba78:	4604      	mov	r4, r0
 800ba7a:	6800      	ldr	r0, [r0, #0]
 800ba7c:	4615      	mov	r5, r2
 800ba7e:	4698      	mov	r8, r3
 800ba80:	f000 fcec 	bl	800c45c <is_uxrce_rmw_identifier_valid>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	f000 80c4 	beq.w	800bc12 <rmw_create_subscription+0x1ae>
 800ba8a:	2d00      	cmp	r5, #0
 800ba8c:	f000 80c1 	beq.w	800bc12 <rmw_create_subscription+0x1ae>
 800ba90:	782b      	ldrb	r3, [r5, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 80bd 	beq.w	800bc12 <rmw_create_subscription+0x1ae>
 800ba98:	f1b8 0f00 	cmp.w	r8, #0
 800ba9c:	f000 80b9 	beq.w	800bc12 <rmw_create_subscription+0x1ae>
 800baa0:	485e      	ldr	r0, [pc, #376]	; (800bc1c <rmw_create_subscription+0x1b8>)
 800baa2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800baa6:	f006 f87d 	bl	8011ba4 <get_memory>
 800baaa:	4604      	mov	r4, r0
 800baac:	2800      	cmp	r0, #0
 800baae:	f000 80b1 	beq.w	800bc14 <rmw_create_subscription+0x1b0>
 800bab2:	6887      	ldr	r7, [r0, #8]
 800bab4:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800bab8:	f006 f8dc 	bl	8011c74 <rmw_get_implementation_identifier>
 800babc:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 800bac0:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bac2:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800bac6:	4628      	mov	r0, r5
 800bac8:	f7f4 fb94 	bl	80001f4 <strlen>
 800bacc:	3001      	adds	r0, #1
 800bace:	283c      	cmp	r0, #60	; 0x3c
 800bad0:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800bad4:	f200 8096 	bhi.w	800bc04 <rmw_create_subscription+0x1a0>
 800bad8:	4a51      	ldr	r2, [pc, #324]	; (800bc20 <rmw_create_subscription+0x1bc>)
 800bada:	462b      	mov	r3, r5
 800badc:	213c      	movs	r1, #60	; 0x3c
 800bade:	4650      	mov	r0, sl
 800bae0:	f009 f9c8 	bl	8014e74 <sniprintf>
 800bae4:	4641      	mov	r1, r8
 800bae6:	f8c7 9020 	str.w	r9, [r7, #32]
 800baea:	2250      	movs	r2, #80	; 0x50
 800baec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800baf0:	f009 fb63 	bl	80151ba <memcpy>
 800baf4:	494b      	ldr	r1, [pc, #300]	; (800bc24 <rmw_create_subscription+0x1c0>)
 800baf6:	4630      	mov	r0, r6
 800baf8:	f000 fcbe 	bl	800c478 <get_message_typesupport_handle>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	f000 8081 	beq.w	800bc04 <rmw_create_subscription+0x1a0>
 800bb02:	6842      	ldr	r2, [r0, #4]
 800bb04:	61ba      	str	r2, [r7, #24]
 800bb06:	2a00      	cmp	r2, #0
 800bb08:	d07c      	beq.n	800bc04 <rmw_create_subscription+0x1a0>
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	4643      	mov	r3, r8
 800bb0e:	4648      	mov	r0, r9
 800bb10:	f006 fb3e 	bl	8012190 <create_topic>
 800bb14:	61f8      	str	r0, [r7, #28]
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d078      	beq.n	800bc0c <rmw_create_subscription+0x1a8>
 800bb1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb22:	2104      	movs	r1, #4
 800bb24:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 800bb28:	1c42      	adds	r2, r0, #1
 800bb2a:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 800bb2e:	f000 fe6f 	bl	800c810 <uxr_object_id>
 800bb32:	6138      	str	r0, [r7, #16]
 800bb34:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bb38:	2506      	movs	r5, #6
 800bb3a:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800bb3e:	9500      	str	r5, [sp, #0]
 800bb40:	6819      	ldr	r1, [r3, #0]
 800bb42:	693a      	ldr	r2, [r7, #16]
 800bb44:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bb48:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bb4c:	f000 fdb8 	bl	800c6c0 <uxr_buffer_create_subscriber_bin>
 800bb50:	4602      	mov	r2, r0
 800bb52:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bb56:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800bb5a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bb5e:	f000 fbfd 	bl	800c35c <run_xrce_session>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d04e      	beq.n	800bc04 <rmw_create_subscription+0x1a0>
 800bb66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb6e:	4629      	mov	r1, r5
 800bb70:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 800bb74:	1c42      	adds	r2, r0, #1
 800bb76:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 800bb7a:	f000 fe49 	bl	800c810 <uxr_object_id>
 800bb7e:	ae08      	add	r6, sp, #32
 800bb80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	6178      	str	r0, [r7, #20]
 800bb88:	4641      	mov	r1, r8
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	f000 fbff 	bl	800c394 <convert_qos_profile>
 800bb96:	9503      	str	r5, [sp, #12]
 800bb98:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bb9c:	9b05      	ldr	r3, [sp, #20]
 800bb9e:	9001      	str	r0, [sp, #4]
 800bba0:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800bbac:	f8db 1000 	ldr.w	r1, [fp]
 800bbb0:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800bbb4:	f000 fdb4 	bl	800c720 <uxr_buffer_create_datareader_bin>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bbbe:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800bbc2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bbc6:	f000 fbc9 	bl	800c35c <run_xrce_session>
 800bbca:	b1d8      	cbz	r0, 800bc04 <rmw_create_subscription+0x1a0>
 800bbcc:	f898 3008 	ldrb.w	r3, [r8, #8]
 800bbd0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	bf0c      	ite	eq
 800bbd8:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800bbdc:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800bbe0:	9307      	str	r3, [sp, #28]
 800bbe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800bbec:	ab0a      	add	r3, sp, #40	; 0x28
 800bbee:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	9b07      	ldr	r3, [sp, #28]
 800bbf8:	6809      	ldr	r1, [r1, #0]
 800bbfa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bbfe:	f000 fe37 	bl	800c870 <uxr_buffer_request_data>
 800bc02:	e007      	b.n	800bc14 <rmw_create_subscription+0x1b0>
 800bc04:	69f8      	ldr	r0, [r7, #28]
 800bc06:	b108      	cbz	r0, 800bc0c <rmw_create_subscription+0x1a8>
 800bc08:	f000 faa8 	bl	800c15c <rmw_uxrce_fini_topic_memory>
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f000 fa63 	bl	800c0d8 <rmw_uxrce_fini_subscription_memory>
 800bc12:	2400      	movs	r4, #0
 800bc14:	4620      	mov	r0, r4
 800bc16:	b00d      	add	sp, #52	; 0x34
 800bc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1c:	2000db44 	.word	0x2000db44
 800bc20:	080166e0 	.word	0x080166e0
 800bc24:	08016148 	.word	0x08016148

0800bc28 <rmw_subscription_get_actual_qos>:
 800bc28:	b150      	cbz	r0, 800bc40 <rmw_subscription_get_actual_qos+0x18>
 800bc2a:	b508      	push	{r3, lr}
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	b149      	cbz	r1, 800bc44 <rmw_subscription_get_actual_qos+0x1c>
 800bc30:	6841      	ldr	r1, [r0, #4]
 800bc32:	2250      	movs	r2, #80	; 0x50
 800bc34:	3128      	adds	r1, #40	; 0x28
 800bc36:	4618      	mov	r0, r3
 800bc38:	f009 fabf 	bl	80151ba <memcpy>
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	bd08      	pop	{r3, pc}
 800bc40:	200b      	movs	r0, #11
 800bc42:	4770      	bx	lr
 800bc44:	200b      	movs	r0, #11
 800bc46:	bd08      	pop	{r3, pc}

0800bc48 <rmw_destroy_subscription>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	b128      	cbz	r0, 800bc58 <rmw_destroy_subscription+0x10>
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	6800      	ldr	r0, [r0, #0]
 800bc50:	460d      	mov	r5, r1
 800bc52:	f000 fc03 	bl	800c45c <is_uxrce_rmw_identifier_valid>
 800bc56:	b910      	cbnz	r0, 800bc5e <rmw_destroy_subscription+0x16>
 800bc58:	2401      	movs	r4, #1
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc5e:	6863      	ldr	r3, [r4, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0f9      	beq.n	800bc58 <rmw_destroy_subscription+0x10>
 800bc64:	2d00      	cmp	r5, #0
 800bc66:	d0f7      	beq.n	800bc58 <rmw_destroy_subscription+0x10>
 800bc68:	6828      	ldr	r0, [r5, #0]
 800bc6a:	f000 fbf7 	bl	800c45c <is_uxrce_rmw_identifier_valid>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d0f2      	beq.n	800bc58 <rmw_destroy_subscription+0x10>
 800bc72:	686c      	ldr	r4, [r5, #4]
 800bc74:	2c00      	cmp	r4, #0
 800bc76:	d0ef      	beq.n	800bc58 <rmw_destroy_subscription+0x10>
 800bc78:	6a26      	ldr	r6, [r4, #32]
 800bc7a:	6962      	ldr	r2, [r4, #20]
 800bc7c:	6930      	ldr	r0, [r6, #16]
 800bc7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bc82:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bc86:	6819      	ldr	r1, [r3, #0]
 800bc88:	f000 fe2c 	bl	800c8e4 <uxr_buffer_cancel_data>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	6930      	ldr	r0, [r6, #16]
 800bc90:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bc94:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bc98:	f000 fb60 	bl	800c35c <run_xrce_session>
 800bc9c:	69e0      	ldr	r0, [r4, #28]
 800bc9e:	f006 fac7 	bl	8012230 <destroy_topic>
 800bca2:	6a23      	ldr	r3, [r4, #32]
 800bca4:	6962      	ldr	r2, [r4, #20]
 800bca6:	6918      	ldr	r0, [r3, #16]
 800bca8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bcac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bcb0:	6819      	ldr	r1, [r3, #0]
 800bcb2:	f000 fc51 	bl	800c558 <uxr_buffer_delete_entity>
 800bcb6:	6a23      	ldr	r3, [r4, #32]
 800bcb8:	6922      	ldr	r2, [r4, #16]
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	6809      	ldr	r1, [r1, #0]
 800bcc4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800bcc8:	f000 fc46 	bl	800c558 <uxr_buffer_delete_entity>
 800bccc:	6937      	ldr	r7, [r6, #16]
 800bcce:	4622      	mov	r2, r4
 800bcd0:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800bcd4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800bcd8:	4604      	mov	r4, r0
 800bcda:	4638      	mov	r0, r7
 800bcdc:	f000 fb3e 	bl	800c35c <run_xrce_session>
 800bce0:	6936      	ldr	r6, [r6, #16]
 800bce2:	4622      	mov	r2, r4
 800bce4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800bce8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800bcec:	4604      	mov	r4, r0
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f000 fb34 	bl	800c35c <run_xrce_session>
 800bcf4:	b12c      	cbz	r4, 800bd02 <rmw_destroy_subscription+0xba>
 800bcf6:	b120      	cbz	r0, 800bd02 <rmw_destroy_subscription+0xba>
 800bcf8:	2400      	movs	r4, #0
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	f000 f9ec 	bl	800c0d8 <rmw_uxrce_fini_subscription_memory>
 800bd00:	e7ab      	b.n	800bc5a <rmw_destroy_subscription+0x12>
 800bd02:	2402      	movs	r4, #2
 800bd04:	e7f9      	b.n	800bcfa <rmw_destroy_subscription+0xb2>
 800bd06:	bf00      	nop

0800bd08 <rmw_take_with_info>:
 800bd08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	6800      	ldr	r0, [r0, #0]
 800bd0e:	b089      	sub	sp, #36	; 0x24
 800bd10:	460f      	mov	r7, r1
 800bd12:	4615      	mov	r5, r2
 800bd14:	b128      	cbz	r0, 800bd22 <rmw_take_with_info+0x1a>
 800bd16:	4b24      	ldr	r3, [pc, #144]	; (800bda8 <rmw_take_with_info+0xa0>)
 800bd18:	6819      	ldr	r1, [r3, #0]
 800bd1a:	f7f4 fa61 	bl	80001e0 <strcmp>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d13e      	bne.n	800bda0 <rmw_take_with_info+0x98>
 800bd22:	b305      	cbz	r5, 800bd66 <rmw_take_with_info+0x5e>
 800bd24:	6864      	ldr	r4, [r4, #4]
 800bd26:	2300      	movs	r3, #0
 800bd28:	702b      	strb	r3, [r5, #0]
 800bd2a:	f000 fa99 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 fa70 	bl	800c214 <rmw_uxrce_find_static_input_buffer_by_owner>
 800bd34:	4606      	mov	r6, r0
 800bd36:	b1f0      	cbz	r0, 800bd76 <rmw_take_with_info+0x6e>
 800bd38:	6881      	ldr	r1, [r0, #8]
 800bd3a:	4668      	mov	r0, sp
 800bd3c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800bd40:	3110      	adds	r1, #16
 800bd42:	f7fd fedf 	bl	8009b04 <ucdr_init_buffer>
 800bd46:	69a3      	ldr	r3, [r4, #24]
 800bd48:	4639      	mov	r1, r7
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	4668      	mov	r0, sp
 800bd4e:	4798      	blx	r3
 800bd50:	4631      	mov	r1, r6
 800bd52:	4604      	mov	r4, r0
 800bd54:	4815      	ldr	r0, [pc, #84]	; (800bdac <rmw_take_with_info+0xa4>)
 800bd56:	f005 ff35 	bl	8011bc4 <put_memory>
 800bd5a:	702c      	strb	r4, [r5, #0]
 800bd5c:	f084 0001 	eor.w	r0, r4, #1
 800bd60:	b2c0      	uxtb	r0, r0
 800bd62:	b009      	add	sp, #36	; 0x24
 800bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd66:	6864      	ldr	r4, [r4, #4]
 800bd68:	f000 fa7a 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 fa51 	bl	800c214 <rmw_uxrce_find_static_input_buffer_by_owner>
 800bd72:	4605      	mov	r5, r0
 800bd74:	b910      	cbnz	r0, 800bd7c <rmw_take_with_info+0x74>
 800bd76:	2001      	movs	r0, #1
 800bd78:	b009      	add	sp, #36	; 0x24
 800bd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd7c:	68a9      	ldr	r1, [r5, #8]
 800bd7e:	4668      	mov	r0, sp
 800bd80:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800bd84:	3110      	adds	r1, #16
 800bd86:	f7fd febd 	bl	8009b04 <ucdr_init_buffer>
 800bd8a:	69a3      	ldr	r3, [r4, #24]
 800bd8c:	4639      	mov	r1, r7
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	4668      	mov	r0, sp
 800bd92:	4798      	blx	r3
 800bd94:	4629      	mov	r1, r5
 800bd96:	4604      	mov	r4, r0
 800bd98:	4804      	ldr	r0, [pc, #16]	; (800bdac <rmw_take_with_info+0xa4>)
 800bd9a:	f005 ff13 	bl	8011bc4 <put_memory>
 800bd9e:	e7dd      	b.n	800bd5c <rmw_take_with_info+0x54>
 800bda0:	200c      	movs	r0, #12
 800bda2:	b009      	add	sp, #36	; 0x24
 800bda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bda6:	bf00      	nop
 800bda8:	08016908 	.word	0x08016908
 800bdac:	2000db34 	.word	0x2000db34

0800bdb0 <rmw_uxrce_init_service_memory>:
 800bdb0:	b1e2      	cbz	r2, 800bdec <rmw_uxrce_init_service_memory+0x3c>
 800bdb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb6:	7b05      	ldrb	r5, [r0, #12]
 800bdb8:	4606      	mov	r6, r0
 800bdba:	b9ad      	cbnz	r5, 800bde8 <rmw_uxrce_init_service_memory+0x38>
 800bdbc:	23c8      	movs	r3, #200	; 0xc8
 800bdbe:	e9c0 5500 	strd	r5, r5, [r0]
 800bdc2:	6083      	str	r3, [r0, #8]
 800bdc4:	f240 1301 	movw	r3, #257	; 0x101
 800bdc8:	4617      	mov	r7, r2
 800bdca:	8183      	strh	r3, [r0, #12]
 800bdcc:	460c      	mov	r4, r1
 800bdce:	46a8      	mov	r8, r5
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	3501      	adds	r5, #1
 800bdd6:	f005 fef5 	bl	8011bc4 <put_memory>
 800bdda:	42af      	cmp	r7, r5
 800bddc:	60a4      	str	r4, [r4, #8]
 800bdde:	f884 800c 	strb.w	r8, [r4, #12]
 800bde2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800bde6:	d1f3      	bne.n	800bdd0 <rmw_uxrce_init_service_memory+0x20>
 800bde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop

0800bdf0 <rmw_uxrce_init_client_memory>:
 800bdf0:	b1e2      	cbz	r2, 800be2c <rmw_uxrce_init_client_memory+0x3c>
 800bdf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf6:	7b05      	ldrb	r5, [r0, #12]
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	b9ad      	cbnz	r5, 800be28 <rmw_uxrce_init_client_memory+0x38>
 800bdfc:	23c8      	movs	r3, #200	; 0xc8
 800bdfe:	e9c0 5500 	strd	r5, r5, [r0]
 800be02:	6083      	str	r3, [r0, #8]
 800be04:	f240 1301 	movw	r3, #257	; 0x101
 800be08:	4617      	mov	r7, r2
 800be0a:	8183      	strh	r3, [r0, #12]
 800be0c:	460c      	mov	r4, r1
 800be0e:	46a8      	mov	r8, r5
 800be10:	4621      	mov	r1, r4
 800be12:	4630      	mov	r0, r6
 800be14:	3501      	adds	r5, #1
 800be16:	f005 fed5 	bl	8011bc4 <put_memory>
 800be1a:	42af      	cmp	r7, r5
 800be1c:	60a4      	str	r4, [r4, #8]
 800be1e:	f884 800c 	strb.w	r8, [r4, #12]
 800be22:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800be26:	d1f3      	bne.n	800be10 <rmw_uxrce_init_client_memory+0x20>
 800be28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop

0800be30 <rmw_uxrce_init_publisher_memory>:
 800be30:	b1e2      	cbz	r2, 800be6c <rmw_uxrce_init_publisher_memory+0x3c>
 800be32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be36:	7b05      	ldrb	r5, [r0, #12]
 800be38:	4606      	mov	r6, r0
 800be3a:	b9ad      	cbnz	r5, 800be68 <rmw_uxrce_init_publisher_memory+0x38>
 800be3c:	23d8      	movs	r3, #216	; 0xd8
 800be3e:	e9c0 5500 	strd	r5, r5, [r0]
 800be42:	6083      	str	r3, [r0, #8]
 800be44:	f240 1301 	movw	r3, #257	; 0x101
 800be48:	4617      	mov	r7, r2
 800be4a:	8183      	strh	r3, [r0, #12]
 800be4c:	460c      	mov	r4, r1
 800be4e:	46a8      	mov	r8, r5
 800be50:	4621      	mov	r1, r4
 800be52:	4630      	mov	r0, r6
 800be54:	3501      	adds	r5, #1
 800be56:	f005 feb5 	bl	8011bc4 <put_memory>
 800be5a:	42af      	cmp	r7, r5
 800be5c:	60a4      	str	r4, [r4, #8]
 800be5e:	f884 800c 	strb.w	r8, [r4, #12]
 800be62:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800be66:	d1f3      	bne.n	800be50 <rmw_uxrce_init_publisher_memory+0x20>
 800be68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop

0800be70 <rmw_uxrce_init_subscription_memory>:
 800be70:	b1e2      	cbz	r2, 800beac <rmw_uxrce_init_subscription_memory+0x3c>
 800be72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be76:	7b05      	ldrb	r5, [r0, #12]
 800be78:	4606      	mov	r6, r0
 800be7a:	b9ad      	cbnz	r5, 800bea8 <rmw_uxrce_init_subscription_memory+0x38>
 800be7c:	23d8      	movs	r3, #216	; 0xd8
 800be7e:	e9c0 5500 	strd	r5, r5, [r0]
 800be82:	6083      	str	r3, [r0, #8]
 800be84:	f240 1301 	movw	r3, #257	; 0x101
 800be88:	4617      	mov	r7, r2
 800be8a:	8183      	strh	r3, [r0, #12]
 800be8c:	460c      	mov	r4, r1
 800be8e:	46a8      	mov	r8, r5
 800be90:	4621      	mov	r1, r4
 800be92:	4630      	mov	r0, r6
 800be94:	3501      	adds	r5, #1
 800be96:	f005 fe95 	bl	8011bc4 <put_memory>
 800be9a:	42af      	cmp	r7, r5
 800be9c:	60a4      	str	r4, [r4, #8]
 800be9e:	f884 800c 	strb.w	r8, [r4, #12]
 800bea2:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800bea6:	d1f3      	bne.n	800be90 <rmw_uxrce_init_subscription_memory+0x20>
 800bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop

0800beb0 <rmw_uxrce_init_node_memory>:
 800beb0:	b1e2      	cbz	r2, 800beec <rmw_uxrce_init_node_memory+0x3c>
 800beb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb6:	7b05      	ldrb	r5, [r0, #12]
 800beb8:	4606      	mov	r6, r0
 800beba:	b9ad      	cbnz	r5, 800bee8 <rmw_uxrce_init_node_memory+0x38>
 800bebc:	23a4      	movs	r3, #164	; 0xa4
 800bebe:	e9c0 5500 	strd	r5, r5, [r0]
 800bec2:	6083      	str	r3, [r0, #8]
 800bec4:	f240 1301 	movw	r3, #257	; 0x101
 800bec8:	4617      	mov	r7, r2
 800beca:	8183      	strh	r3, [r0, #12]
 800becc:	460c      	mov	r4, r1
 800bece:	46a8      	mov	r8, r5
 800bed0:	4621      	mov	r1, r4
 800bed2:	4630      	mov	r0, r6
 800bed4:	3501      	adds	r5, #1
 800bed6:	f005 fe75 	bl	8011bc4 <put_memory>
 800beda:	42af      	cmp	r7, r5
 800bedc:	60a4      	str	r4, [r4, #8]
 800bede:	f884 800c 	strb.w	r8, [r4, #12]
 800bee2:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800bee6:	d1f3      	bne.n	800bed0 <rmw_uxrce_init_node_memory+0x20>
 800bee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop

0800bef0 <rmw_uxrce_init_session_memory>:
 800bef0:	b1ea      	cbz	r2, 800bf2e <rmw_uxrce_init_session_memory+0x3e>
 800bef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bef6:	7b05      	ldrb	r5, [r0, #12]
 800bef8:	4606      	mov	r6, r0
 800befa:	b9b5      	cbnz	r5, 800bf2a <rmw_uxrce_init_session_memory+0x3a>
 800befc:	e9c0 5500 	strd	r5, r5, [r0]
 800bf00:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800bf04:	f240 1301 	movw	r3, #257	; 0x101
 800bf08:	4617      	mov	r7, r2
 800bf0a:	f8c0 8008 	str.w	r8, [r0, #8]
 800bf0e:	460c      	mov	r4, r1
 800bf10:	8183      	strh	r3, [r0, #12]
 800bf12:	46a9      	mov	r9, r5
 800bf14:	4621      	mov	r1, r4
 800bf16:	4630      	mov	r0, r6
 800bf18:	3501      	adds	r5, #1
 800bf1a:	f005 fe53 	bl	8011bc4 <put_memory>
 800bf1e:	42af      	cmp	r7, r5
 800bf20:	60a4      	str	r4, [r4, #8]
 800bf22:	f884 900c 	strb.w	r9, [r4, #12]
 800bf26:	4444      	add	r4, r8
 800bf28:	d1f4      	bne.n	800bf14 <rmw_uxrce_init_session_memory+0x24>
 800bf2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf2e:	4770      	bx	lr

0800bf30 <rmw_uxrce_init_topic_memory>:
 800bf30:	b1e2      	cbz	r2, 800bf6c <rmw_uxrce_init_topic_memory+0x3c>
 800bf32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf36:	7b05      	ldrb	r5, [r0, #12]
 800bf38:	4606      	mov	r6, r0
 800bf3a:	b9ad      	cbnz	r5, 800bf68 <rmw_uxrce_init_topic_memory+0x38>
 800bf3c:	231c      	movs	r3, #28
 800bf3e:	e9c0 5500 	strd	r5, r5, [r0]
 800bf42:	6083      	str	r3, [r0, #8]
 800bf44:	f240 1301 	movw	r3, #257	; 0x101
 800bf48:	4617      	mov	r7, r2
 800bf4a:	8183      	strh	r3, [r0, #12]
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	46a8      	mov	r8, r5
 800bf50:	4621      	mov	r1, r4
 800bf52:	4630      	mov	r0, r6
 800bf54:	3501      	adds	r5, #1
 800bf56:	f005 fe35 	bl	8011bc4 <put_memory>
 800bf5a:	42af      	cmp	r7, r5
 800bf5c:	60a4      	str	r4, [r4, #8]
 800bf5e:	f884 800c 	strb.w	r8, [r4, #12]
 800bf62:	f104 041c 	add.w	r4, r4, #28
 800bf66:	d1f3      	bne.n	800bf50 <rmw_uxrce_init_topic_memory+0x20>
 800bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop

0800bf70 <rmw_uxrce_init_static_input_buffer_memory>:
 800bf70:	b1ea      	cbz	r2, 800bfae <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800bf72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf76:	7b05      	ldrb	r5, [r0, #12]
 800bf78:	4606      	mov	r6, r0
 800bf7a:	b9b5      	cbnz	r5, 800bfaa <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800bf7c:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800bf80:	e9c0 5500 	strd	r5, r5, [r0]
 800bf84:	6083      	str	r3, [r0, #8]
 800bf86:	f240 1301 	movw	r3, #257	; 0x101
 800bf8a:	4617      	mov	r7, r2
 800bf8c:	8183      	strh	r3, [r0, #12]
 800bf8e:	460c      	mov	r4, r1
 800bf90:	46a8      	mov	r8, r5
 800bf92:	4621      	mov	r1, r4
 800bf94:	4630      	mov	r0, r6
 800bf96:	3501      	adds	r5, #1
 800bf98:	f005 fe14 	bl	8011bc4 <put_memory>
 800bf9c:	42af      	cmp	r7, r5
 800bf9e:	60a4      	str	r4, [r4, #8]
 800bfa0:	f884 800c 	strb.w	r8, [r4, #12]
 800bfa4:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800bfa8:	d1f3      	bne.n	800bf92 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800bfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfae:	4770      	bx	lr

0800bfb0 <rmw_uxrce_init_init_options_impl_memory>:
 800bfb0:	b1e2      	cbz	r2, 800bfec <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800bfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb6:	7b05      	ldrb	r5, [r0, #12]
 800bfb8:	4606      	mov	r6, r0
 800bfba:	b9ad      	cbnz	r5, 800bfe8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800bfbc:	232c      	movs	r3, #44	; 0x2c
 800bfbe:	e9c0 5500 	strd	r5, r5, [r0]
 800bfc2:	6083      	str	r3, [r0, #8]
 800bfc4:	f240 1301 	movw	r3, #257	; 0x101
 800bfc8:	4617      	mov	r7, r2
 800bfca:	8183      	strh	r3, [r0, #12]
 800bfcc:	460c      	mov	r4, r1
 800bfce:	46a8      	mov	r8, r5
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	3501      	adds	r5, #1
 800bfd6:	f005 fdf5 	bl	8011bc4 <put_memory>
 800bfda:	42af      	cmp	r7, r5
 800bfdc:	60a4      	str	r4, [r4, #8]
 800bfde:	f884 800c 	strb.w	r8, [r4, #12]
 800bfe2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800bfe6:	d1f3      	bne.n	800bfd0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800bfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop

0800bff0 <rmw_uxrce_init_wait_set_memory>:
 800bff0:	b1e2      	cbz	r2, 800c02c <rmw_uxrce_init_wait_set_memory+0x3c>
 800bff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff6:	7b05      	ldrb	r5, [r0, #12]
 800bff8:	4606      	mov	r6, r0
 800bffa:	b9ad      	cbnz	r5, 800c028 <rmw_uxrce_init_wait_set_memory+0x38>
 800bffc:	231c      	movs	r3, #28
 800bffe:	e9c0 5500 	strd	r5, r5, [r0]
 800c002:	6083      	str	r3, [r0, #8]
 800c004:	f240 1301 	movw	r3, #257	; 0x101
 800c008:	4617      	mov	r7, r2
 800c00a:	8183      	strh	r3, [r0, #12]
 800c00c:	460c      	mov	r4, r1
 800c00e:	46a8      	mov	r8, r5
 800c010:	4621      	mov	r1, r4
 800c012:	4630      	mov	r0, r6
 800c014:	3501      	adds	r5, #1
 800c016:	f005 fdd5 	bl	8011bc4 <put_memory>
 800c01a:	42af      	cmp	r7, r5
 800c01c:	60a4      	str	r4, [r4, #8]
 800c01e:	f884 800c 	strb.w	r8, [r4, #12]
 800c022:	f104 041c 	add.w	r4, r4, #28
 800c026:	d1f3      	bne.n	800c010 <rmw_uxrce_init_wait_set_memory+0x20>
 800c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop

0800c030 <rmw_uxrce_init_guard_condition_memory>:
 800c030:	b1e2      	cbz	r2, 800c06c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c036:	7b05      	ldrb	r5, [r0, #12]
 800c038:	4606      	mov	r6, r0
 800c03a:	b9ad      	cbnz	r5, 800c068 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c03c:	2320      	movs	r3, #32
 800c03e:	e9c0 5500 	strd	r5, r5, [r0]
 800c042:	6083      	str	r3, [r0, #8]
 800c044:	f240 1301 	movw	r3, #257	; 0x101
 800c048:	4617      	mov	r7, r2
 800c04a:	8183      	strh	r3, [r0, #12]
 800c04c:	460c      	mov	r4, r1
 800c04e:	46a8      	mov	r8, r5
 800c050:	4621      	mov	r1, r4
 800c052:	4630      	mov	r0, r6
 800c054:	3501      	adds	r5, #1
 800c056:	f005 fdb5 	bl	8011bc4 <put_memory>
 800c05a:	42af      	cmp	r7, r5
 800c05c:	60a4      	str	r4, [r4, #8]
 800c05e:	f884 800c 	strb.w	r8, [r4, #12]
 800c062:	f104 0420 	add.w	r4, r4, #32
 800c066:	d1f3      	bne.n	800c050 <rmw_uxrce_init_guard_condition_memory+0x20>
 800c068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop

0800c070 <rmw_uxrce_fini_session_memory>:
 800c070:	4601      	mov	r1, r0
 800c072:	4801      	ldr	r0, [pc, #4]	; (800c078 <rmw_uxrce_fini_session_memory+0x8>)
 800c074:	f005 bda6 	b.w	8011bc4 <put_memory>
 800c078:	2000db24 	.word	0x2000db24

0800c07c <rmw_uxrce_fini_node_memory>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4604      	mov	r4, r0
 800c080:	6800      	ldr	r0, [r0, #0]
 800c082:	b128      	cbz	r0, 800c090 <rmw_uxrce_fini_node_memory+0x14>
 800c084:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <rmw_uxrce_fini_node_memory+0x28>)
 800c086:	6819      	ldr	r1, [r3, #0]
 800c088:	f7f4 f8aa 	bl	80001e0 <strcmp>
 800c08c:	b940      	cbnz	r0, 800c0a0 <rmw_uxrce_fini_node_memory+0x24>
 800c08e:	6020      	str	r0, [r4, #0]
 800c090:	6861      	ldr	r1, [r4, #4]
 800c092:	b129      	cbz	r1, 800c0a0 <rmw_uxrce_fini_node_memory+0x24>
 800c094:	2500      	movs	r5, #0
 800c096:	4804      	ldr	r0, [pc, #16]	; (800c0a8 <rmw_uxrce_fini_node_memory+0x2c>)
 800c098:	610d      	str	r5, [r1, #16]
 800c09a:	f005 fd93 	bl	8011bc4 <put_memory>
 800c09e:	6065      	str	r5, [r4, #4]
 800c0a0:	bd38      	pop	{r3, r4, r5, pc}
 800c0a2:	bf00      	nop
 800c0a4:	08016908 	.word	0x08016908
 800c0a8:	2000daf4 	.word	0x2000daf4

0800c0ac <rmw_uxrce_fini_publisher_memory>:
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	6800      	ldr	r0, [r0, #0]
 800c0b2:	b128      	cbz	r0, 800c0c0 <rmw_uxrce_fini_publisher_memory+0x14>
 800c0b4:	4b06      	ldr	r3, [pc, #24]	; (800c0d0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c0b6:	6819      	ldr	r1, [r3, #0]
 800c0b8:	f7f4 f892 	bl	80001e0 <strcmp>
 800c0bc:	b938      	cbnz	r0, 800c0ce <rmw_uxrce_fini_publisher_memory+0x22>
 800c0be:	6020      	str	r0, [r4, #0]
 800c0c0:	6861      	ldr	r1, [r4, #4]
 800c0c2:	b121      	cbz	r1, 800c0ce <rmw_uxrce_fini_publisher_memory+0x22>
 800c0c4:	4803      	ldr	r0, [pc, #12]	; (800c0d4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c0c6:	f005 fd7d 	bl	8011bc4 <put_memory>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	6063      	str	r3, [r4, #4]
 800c0ce:	bd10      	pop	{r4, pc}
 800c0d0:	08016908 	.word	0x08016908
 800c0d4:	2000db04 	.word	0x2000db04

0800c0d8 <rmw_uxrce_fini_subscription_memory>:
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	4604      	mov	r4, r0
 800c0dc:	6800      	ldr	r0, [r0, #0]
 800c0de:	b128      	cbz	r0, 800c0ec <rmw_uxrce_fini_subscription_memory+0x14>
 800c0e0:	4b06      	ldr	r3, [pc, #24]	; (800c0fc <rmw_uxrce_fini_subscription_memory+0x24>)
 800c0e2:	6819      	ldr	r1, [r3, #0]
 800c0e4:	f7f4 f87c 	bl	80001e0 <strcmp>
 800c0e8:	b938      	cbnz	r0, 800c0fa <rmw_uxrce_fini_subscription_memory+0x22>
 800c0ea:	6020      	str	r0, [r4, #0]
 800c0ec:	6861      	ldr	r1, [r4, #4]
 800c0ee:	b121      	cbz	r1, 800c0fa <rmw_uxrce_fini_subscription_memory+0x22>
 800c0f0:	4803      	ldr	r0, [pc, #12]	; (800c100 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c0f2:	f005 fd67 	bl	8011bc4 <put_memory>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	6063      	str	r3, [r4, #4]
 800c0fa:	bd10      	pop	{r4, pc}
 800c0fc:	08016908 	.word	0x08016908
 800c100:	2000db44 	.word	0x2000db44

0800c104 <rmw_uxrce_fini_service_memory>:
 800c104:	b510      	push	{r4, lr}
 800c106:	4604      	mov	r4, r0
 800c108:	6800      	ldr	r0, [r0, #0]
 800c10a:	b128      	cbz	r0, 800c118 <rmw_uxrce_fini_service_memory+0x14>
 800c10c:	4b06      	ldr	r3, [pc, #24]	; (800c128 <rmw_uxrce_fini_service_memory+0x24>)
 800c10e:	6819      	ldr	r1, [r3, #0]
 800c110:	f7f4 f866 	bl	80001e0 <strcmp>
 800c114:	b938      	cbnz	r0, 800c126 <rmw_uxrce_fini_service_memory+0x22>
 800c116:	6020      	str	r0, [r4, #0]
 800c118:	6861      	ldr	r1, [r4, #4]
 800c11a:	b121      	cbz	r1, 800c126 <rmw_uxrce_fini_service_memory+0x22>
 800c11c:	4803      	ldr	r0, [pc, #12]	; (800c12c <rmw_uxrce_fini_service_memory+0x28>)
 800c11e:	f005 fd51 	bl	8011bc4 <put_memory>
 800c122:	2300      	movs	r3, #0
 800c124:	6063      	str	r3, [r4, #4]
 800c126:	bd10      	pop	{r4, pc}
 800c128:	08016908 	.word	0x08016908
 800c12c:	2000db14 	.word	0x2000db14

0800c130 <rmw_uxrce_fini_client_memory>:
 800c130:	b510      	push	{r4, lr}
 800c132:	4604      	mov	r4, r0
 800c134:	6800      	ldr	r0, [r0, #0]
 800c136:	b128      	cbz	r0, 800c144 <rmw_uxrce_fini_client_memory+0x14>
 800c138:	4b06      	ldr	r3, [pc, #24]	; (800c154 <rmw_uxrce_fini_client_memory+0x24>)
 800c13a:	6819      	ldr	r1, [r3, #0]
 800c13c:	f7f4 f850 	bl	80001e0 <strcmp>
 800c140:	b938      	cbnz	r0, 800c152 <rmw_uxrce_fini_client_memory+0x22>
 800c142:	6020      	str	r0, [r4, #0]
 800c144:	6861      	ldr	r1, [r4, #4]
 800c146:	b121      	cbz	r1, 800c152 <rmw_uxrce_fini_client_memory+0x22>
 800c148:	4803      	ldr	r0, [pc, #12]	; (800c158 <rmw_uxrce_fini_client_memory+0x28>)
 800c14a:	f005 fd3b 	bl	8011bc4 <put_memory>
 800c14e:	2300      	movs	r3, #0
 800c150:	6063      	str	r3, [r4, #4]
 800c152:	bd10      	pop	{r4, pc}
 800c154:	08016908 	.word	0x08016908
 800c158:	20009224 	.word	0x20009224

0800c15c <rmw_uxrce_fini_topic_memory>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	4604      	mov	r4, r0
 800c160:	4621      	mov	r1, r4
 800c162:	4803      	ldr	r0, [pc, #12]	; (800c170 <rmw_uxrce_fini_topic_memory+0x14>)
 800c164:	f005 fd2e 	bl	8011bc4 <put_memory>
 800c168:	2300      	movs	r3, #0
 800c16a:	61a3      	str	r3, [r4, #24]
 800c16c:	bd10      	pop	{r4, pc}
 800c16e:	bf00      	nop
 800c170:	2000db54 	.word	0x2000db54

0800c174 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c174:	b082      	sub	sp, #8
 800c176:	b530      	push	{r4, r5, lr}
 800c178:	4925      	ldr	r1, [pc, #148]	; (800c210 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c17a:	680d      	ldr	r5, [r1, #0]
 800c17c:	ac03      	add	r4, sp, #12
 800c17e:	e884 000c 	stmia.w	r4, {r2, r3}
 800c182:	461c      	mov	r4, r3
 800c184:	2d00      	cmp	r5, #0
 800c186:	d041      	beq.n	800c20c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c188:	462b      	mov	r3, r5
 800c18a:	2100      	movs	r1, #0
 800c18c:	689a      	ldr	r2, [r3, #8]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800c194:	4290      	cmp	r0, r2
 800c196:	bf08      	it	eq
 800c198:	3101      	addeq	r1, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1f6      	bne.n	800c18c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c19e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d029      	beq.n	800c1fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c1a6:	d907      	bls.n	800c1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d005      	beq.n	800c1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1b2:	4608      	mov	r0, r1
 800c1b4:	b002      	add	sp, #8
 800c1b6:	4770      	bx	lr
 800c1b8:	b314      	cbz	r4, 800c200 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c1ba:	428c      	cmp	r4, r1
 800c1bc:	d820      	bhi.n	800c200 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c1be:	2d00      	cmp	r5, #0
 800c1c0:	d0f4      	beq.n	800c1ac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c1c8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c1cc:	e002      	b.n	800c1d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c1ce:	686d      	ldr	r5, [r5, #4]
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	d0ec      	beq.n	800c1ae <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c1d4:	68ab      	ldr	r3, [r5, #8]
 800c1d6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800c1da:	4290      	cmp	r0, r2
 800c1dc:	d1f7      	bne.n	800c1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c1de:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800c1e2:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800c1e6:	4562      	cmp	r2, ip
 800c1e8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c1ec:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c1f0:	daed      	bge.n	800c1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c1f2:	4694      	mov	ip, r2
 800c1f4:	461c      	mov	r4, r3
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	e7e9      	b.n	800c1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c1fa:	b10c      	cbz	r4, 800c200 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c1fc:	428c      	cmp	r4, r1
 800c1fe:	d9d5      	bls.n	800c1ac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c204:	4802      	ldr	r0, [pc, #8]	; (800c210 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c206:	b002      	add	sp, #8
 800c208:	f005 bccc 	b.w	8011ba4 <get_memory>
 800c20c:	4629      	mov	r1, r5
 800c20e:	e7c6      	b.n	800c19e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c210:	2000db34 	.word	0x2000db34

0800c214 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c214:	4b11      	ldr	r3, [pc, #68]	; (800c25c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	b530      	push	{r4, r5, lr}
 800c21a:	b1e3      	cbz	r3, 800c256 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c21c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c220:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800c224:	2400      	movs	r4, #0
 800c226:	e001      	b.n	800c22c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	b193      	cbz	r3, 800c252 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c22c:	689a      	ldr	r2, [r3, #8]
 800c22e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800c232:	4288      	cmp	r0, r1
 800c234:	d1f8      	bne.n	800c228 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c236:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800c23a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800c23e:	4571      	cmp	r1, lr
 800c240:	eb72 050c 	sbcs.w	r5, r2, ip
 800c244:	daf0      	bge.n	800c228 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c246:	461c      	mov	r4, r3
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	468e      	mov	lr, r1
 800c24c:	4694      	mov	ip, r2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1ec      	bne.n	800c22c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c252:	4620      	mov	r0, r4
 800c254:	bd30      	pop	{r4, r5, pc}
 800c256:	461c      	mov	r4, r3
 800c258:	4620      	mov	r0, r4
 800c25a:	bd30      	pop	{r4, r5, pc}
 800c25c:	2000db34 	.word	0x2000db34

0800c260 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	4b3c      	ldr	r3, [pc, #240]	; (800c358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c266:	ed2d 8b06 	vpush	{d8-d10}
 800c26a:	681f      	ldr	r7, [r3, #0]
 800c26c:	b08d      	sub	sp, #52	; 0x34
 800c26e:	f006 fb01 	bl	8012874 <rmw_uros_epoch_nanos>
 800c272:	2f00      	cmp	r7, #0
 800c274:	d05d      	beq.n	800c332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c276:	46b8      	mov	r8, r7
 800c278:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800c340 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c27c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c280:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800c284:	2b04      	cmp	r3, #4
 800c286:	ed9f ab30 	vldr	d10, [pc, #192]	; 800c348 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c28a:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800c350 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c28e:	4681      	mov	r9, r0
 800c290:	468a      	mov	sl, r1
 800c292:	ac04      	add	r4, sp, #16
 800c294:	d03f      	beq.n	800c316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c296:	2b05      	cmp	r3, #5
 800c298:	d044      	beq.n	800c324 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d03b      	beq.n	800c316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c29e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c2a2:	ed8d ab06 	vstr	d10, [sp, #24]
 800c2a6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c2aa:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800c2ae:	ab08      	add	r3, sp, #32
 800c2b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c2b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c2b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c2ba:	f005 fb79 	bl	80119b0 <rmw_time_equal>
 800c2be:	b118      	cbz	r0, 800c2c8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c2c0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c2c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c2c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c2cc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800c2d0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800c2d4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c2d8:	f005 fbbe 	bl	8011a58 <rmw_time_total_nsec>
 800c2dc:	1830      	adds	r0, r6, r0
 800c2de:	eb47 0101 	adc.w	r1, r7, r1
 800c2e2:	4548      	cmp	r0, r9
 800c2e4:	eb71 030a 	sbcs.w	r3, r1, sl
 800c2e8:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800c2ec:	db05      	blt.n	800c2fa <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c2ee:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c2f2:	4591      	cmp	r9, r2
 800c2f4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c2f8:	da03      	bge.n	800c302 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c2fa:	4817      	ldr	r0, [pc, #92]	; (800c358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	f005 fc61 	bl	8011bc4 <put_memory>
 800c302:	f1bb 0f00 	cmp.w	fp, #0
 800c306:	d014      	beq.n	800c332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c308:	46d8      	mov	r8, fp
 800c30a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c30e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800c312:	2b04      	cmp	r3, #4
 800c314:	d1bf      	bne.n	800c296 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c316:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800c31a:	3340      	adds	r3, #64	; 0x40
 800c31c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c31e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c322:	e7c0      	b.n	800c2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c324:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800c328:	3348      	adds	r3, #72	; 0x48
 800c32a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c32c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c330:	e7b9      	b.n	800c2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c332:	b00d      	add	sp, #52	; 0x34
 800c334:	ecbd 8b06 	vpop	{d8-d10}
 800c338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33c:	f3af 8000 	nop.w
	...
 800c348:	00000001 	.word	0x00000001
 800c34c:	00000000 	.word	0x00000000
 800c350:	0000001e 	.word	0x0000001e
 800c354:	00000000 	.word	0x00000000
 800c358:	2000db34 	.word	0x2000db34

0800c35c <run_xrce_session>:
 800c35c:	b510      	push	{r4, lr}
 800c35e:	788c      	ldrb	r4, [r1, #2]
 800c360:	b086      	sub	sp, #24
 800c362:	2c01      	cmp	r4, #1
 800c364:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c368:	d00c      	beq.n	800c384 <run_xrce_session+0x28>
 800c36a:	4619      	mov	r1, r3
 800c36c:	2301      	movs	r3, #1
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	f10d 020e 	add.w	r2, sp, #14
 800c374:	f10d 0317 	add.w	r3, sp, #23
 800c378:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c37c:	f001 f8ae 	bl	800d4dc <uxr_run_session_until_all_status>
 800c380:	b006      	add	sp, #24
 800c382:	bd10      	pop	{r4, pc}
 800c384:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c388:	f000 fcc2 	bl	800cd10 <uxr_flash_output_streams>
 800c38c:	4620      	mov	r0, r4
 800c38e:	b006      	add	sp, #24
 800c390:	bd10      	pop	{r4, pc}
 800c392:	bf00      	nop

0800c394 <convert_qos_profile>:
 800c394:	7a4a      	ldrb	r2, [r1, #9]
 800c396:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c39a:	2a02      	cmp	r2, #2
 800c39c:	bf18      	it	ne
 800c39e:	2200      	movne	r2, #0
 800c3a0:	7002      	strb	r2, [r0, #0]
 800c3a2:	780a      	ldrb	r2, [r1, #0]
 800c3a4:	8889      	ldrh	r1, [r1, #4]
 800c3a6:	8081      	strh	r1, [r0, #4]
 800c3a8:	f1ac 0c02 	sub.w	ip, ip, #2
 800c3ac:	f1a2 0202 	sub.w	r2, r2, #2
 800c3b0:	fabc fc8c 	clz	ip, ip
 800c3b4:	fab2 f282 	clz	r2, r2
 800c3b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c3bc:	0952      	lsrs	r2, r2, #5
 800c3be:	f880 c001 	strb.w	ip, [r0, #1]
 800c3c2:	7082      	strb	r2, [r0, #2]
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop

0800c3c8 <generate_type_name>:
 800c3c8:	b530      	push	{r4, r5, lr}
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	700b      	strb	r3, [r1, #0]
 800c3ce:	6803      	ldr	r3, [r0, #0]
 800c3d0:	b087      	sub	sp, #28
 800c3d2:	4614      	mov	r4, r2
 800c3d4:	b1d3      	cbz	r3, 800c40c <generate_type_name+0x44>
 800c3d6:	4a0f      	ldr	r2, [pc, #60]	; (800c414 <generate_type_name+0x4c>)
 800c3d8:	4615      	mov	r5, r2
 800c3da:	9203      	str	r2, [sp, #12]
 800c3dc:	9500      	str	r5, [sp, #0]
 800c3de:	6842      	ldr	r2, [r0, #4]
 800c3e0:	480d      	ldr	r0, [pc, #52]	; (800c418 <generate_type_name+0x50>)
 800c3e2:	9001      	str	r0, [sp, #4]
 800c3e4:	4608      	mov	r0, r1
 800c3e6:	490d      	ldr	r1, [pc, #52]	; (800c41c <generate_type_name+0x54>)
 800c3e8:	9204      	str	r2, [sp, #16]
 800c3ea:	9105      	str	r1, [sp, #20]
 800c3ec:	9102      	str	r1, [sp, #8]
 800c3ee:	4a0c      	ldr	r2, [pc, #48]	; (800c420 <generate_type_name+0x58>)
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	f008 fd3f 	bl	8014e74 <sniprintf>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	db05      	blt.n	800c406 <generate_type_name+0x3e>
 800c3fa:	4284      	cmp	r4, r0
 800c3fc:	bfd4      	ite	le
 800c3fe:	2000      	movle	r0, #0
 800c400:	2001      	movgt	r0, #1
 800c402:	b007      	add	sp, #28
 800c404:	bd30      	pop	{r4, r5, pc}
 800c406:	2000      	movs	r0, #0
 800c408:	b007      	add	sp, #28
 800c40a:	bd30      	pop	{r4, r5, pc}
 800c40c:	4b05      	ldr	r3, [pc, #20]	; (800c424 <generate_type_name+0x5c>)
 800c40e:	4a01      	ldr	r2, [pc, #4]	; (800c414 <generate_type_name+0x4c>)
 800c410:	461d      	mov	r5, r3
 800c412:	e7e2      	b.n	800c3da <generate_type_name+0x12>
 800c414:	080166d0 	.word	0x080166d0
 800c418:	080166e8 	.word	0x080166e8
 800c41c:	080166e4 	.word	0x080166e4
 800c420:	080166d4 	.word	0x080166d4
 800c424:	080164c0 	.word	0x080164c0

0800c428 <generate_topic_name>:
 800c428:	b510      	push	{r4, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	4614      	mov	r4, r2
 800c42e:	9000      	str	r0, [sp, #0]
 800c430:	4b08      	ldr	r3, [pc, #32]	; (800c454 <generate_topic_name+0x2c>)
 800c432:	4a09      	ldr	r2, [pc, #36]	; (800c458 <generate_topic_name+0x30>)
 800c434:	4608      	mov	r0, r1
 800c436:	4621      	mov	r1, r4
 800c438:	f008 fd1c 	bl	8014e74 <sniprintf>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	db05      	blt.n	800c44c <generate_topic_name+0x24>
 800c440:	4284      	cmp	r4, r0
 800c442:	bfd4      	ite	le
 800c444:	2000      	movle	r0, #0
 800c446:	2001      	movgt	r0, #1
 800c448:	b002      	add	sp, #8
 800c44a:	bd10      	pop	{r4, pc}
 800c44c:	2000      	movs	r0, #0
 800c44e:	b002      	add	sp, #8
 800c450:	bd10      	pop	{r4, pc}
 800c452:	bf00      	nop
 800c454:	080166ec 	.word	0x080166ec
 800c458:	08016220 	.word	0x08016220

0800c45c <is_uxrce_rmw_identifier_valid>:
 800c45c:	b510      	push	{r4, lr}
 800c45e:	4604      	mov	r4, r0
 800c460:	b140      	cbz	r0, 800c474 <is_uxrce_rmw_identifier_valid+0x18>
 800c462:	f005 fc07 	bl	8011c74 <rmw_get_implementation_identifier>
 800c466:	4601      	mov	r1, r0
 800c468:	4620      	mov	r0, r4
 800c46a:	f7f3 feb9 	bl	80001e0 <strcmp>
 800c46e:	fab0 f080 	clz	r0, r0
 800c472:	0940      	lsrs	r0, r0, #5
 800c474:	bd10      	pop	{r4, pc}
 800c476:	bf00      	nop

0800c478 <get_message_typesupport_handle>:
 800c478:	6883      	ldr	r3, [r0, #8]
 800c47a:	4718      	bx	r3

0800c47c <get_message_typesupport_handle_function>:
 800c47c:	b510      	push	{r4, lr}
 800c47e:	4604      	mov	r4, r0
 800c480:	6800      	ldr	r0, [r0, #0]
 800c482:	f7f3 fead 	bl	80001e0 <strcmp>
 800c486:	2800      	cmp	r0, #0
 800c488:	bf0c      	ite	eq
 800c48a:	4620      	moveq	r0, r4
 800c48c:	2000      	movne	r0, #0
 800c48e:	bd10      	pop	{r4, pc}

0800c490 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c494:	6805      	ldr	r5, [r0, #0]
 800c496:	4604      	mov	r4, r0
 800c498:	4628      	mov	r0, r5
 800c49a:	460e      	mov	r6, r1
 800c49c:	f7f3 fea0 	bl	80001e0 <strcmp>
 800c4a0:	b1c8      	cbz	r0, 800c4d6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c4a2:	4b11      	ldr	r3, [pc, #68]	; (800c4e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	429d      	cmp	r5, r3
 800c4a8:	d112      	bne.n	800c4d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c4aa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c4ae:	f8d8 4000 	ldr.w	r4, [r8]
 800c4b2:	b16c      	cbz	r4, 800c4d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c4b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c4b8:	2700      	movs	r7, #0
 800c4ba:	3d04      	subs	r5, #4
 800c4bc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c4c0:	4631      	mov	r1, r6
 800c4c2:	f7f3 fe8d 	bl	80001e0 <strcmp>
 800c4c6:	00bb      	lsls	r3, r7, #2
 800c4c8:	b140      	cbz	r0, 800c4dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c4ca:	3701      	adds	r7, #1
 800c4cc:	42bc      	cmp	r4, r7
 800c4ce:	d1f5      	bne.n	800c4bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e4:	58d3      	ldr	r3, [r2, r3]
 800c4e6:	4718      	bx	r3
 800c4e8:	200001d0 	.word	0x200001d0

0800c4ec <geometry_msgs__msg__Twist__init>:
 800c4ec:	b570      	push	{r4, r5, r6, lr}
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	b1a8      	cbz	r0, 800c51e <geometry_msgs__msg__Twist__init+0x32>
 800c4f2:	f000 f82b 	bl	800c54c <geometry_msgs__msg__Vector3__init>
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	b140      	cbz	r0, 800c50c <geometry_msgs__msg__Twist__init+0x20>
 800c4fa:	f105 0618 	add.w	r6, r5, #24
 800c4fe:	4630      	mov	r0, r6
 800c500:	f000 f824 	bl	800c54c <geometry_msgs__msg__Vector3__init>
 800c504:	4604      	mov	r4, r0
 800c506:	b168      	cbz	r0, 800c524 <geometry_msgs__msg__Twist__init+0x38>
 800c508:	4620      	mov	r0, r4
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	4628      	mov	r0, r5
 800c50e:	f000 f821 	bl	800c554 <geometry_msgs__msg__Vector3__fini>
 800c512:	f105 0018 	add.w	r0, r5, #24
 800c516:	f000 f81d 	bl	800c554 <geometry_msgs__msg__Vector3__fini>
 800c51a:	4620      	mov	r0, r4
 800c51c:	bd70      	pop	{r4, r5, r6, pc}
 800c51e:	4604      	mov	r4, r0
 800c520:	4620      	mov	r0, r4
 800c522:	bd70      	pop	{r4, r5, r6, pc}
 800c524:	4628      	mov	r0, r5
 800c526:	f000 f815 	bl	800c554 <geometry_msgs__msg__Vector3__fini>
 800c52a:	4630      	mov	r0, r6
 800c52c:	f000 f812 	bl	800c554 <geometry_msgs__msg__Vector3__fini>
 800c530:	e7ea      	b.n	800c508 <geometry_msgs__msg__Twist__init+0x1c>
 800c532:	bf00      	nop

0800c534 <geometry_msgs__msg__Twist__fini>:
 800c534:	b148      	cbz	r0, 800c54a <geometry_msgs__msg__Twist__fini+0x16>
 800c536:	b510      	push	{r4, lr}
 800c538:	4604      	mov	r4, r0
 800c53a:	f000 f80b 	bl	800c554 <geometry_msgs__msg__Vector3__fini>
 800c53e:	f104 0018 	add.w	r0, r4, #24
 800c542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c546:	f000 b805 	b.w	800c554 <geometry_msgs__msg__Vector3__fini>
 800c54a:	4770      	bx	lr

0800c54c <geometry_msgs__msg__Vector3__init>:
 800c54c:	3800      	subs	r0, #0
 800c54e:	bf18      	it	ne
 800c550:	2001      	movne	r0, #1
 800c552:	4770      	bx	lr

0800c554 <geometry_msgs__msg__Vector3__fini>:
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop

0800c558 <uxr_buffer_delete_entity>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	2300      	movs	r3, #0
 800c55c:	b08e      	sub	sp, #56	; 0x38
 800c55e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c562:	2303      	movs	r3, #3
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	2204      	movs	r2, #4
 800c568:	ab06      	add	r3, sp, #24
 800c56a:	4604      	mov	r4, r0
 800c56c:	9103      	str	r1, [sp, #12]
 800c56e:	f001 f9dd 	bl	800d92c <uxr_prepare_stream_to_write_submessage>
 800c572:	b918      	cbnz	r0, 800c57c <uxr_buffer_delete_entity+0x24>
 800c574:	4604      	mov	r4, r0
 800c576:	4620      	mov	r0, r4
 800c578:	b00e      	add	sp, #56	; 0x38
 800c57a:	bd10      	pop	{r4, pc}
 800c57c:	9902      	ldr	r1, [sp, #8]
 800c57e:	aa05      	add	r2, sp, #20
 800c580:	4620      	mov	r0, r4
 800c582:	f001 fb09 	bl	800db98 <uxr_init_base_object_request>
 800c586:	a905      	add	r1, sp, #20
 800c588:	4604      	mov	r4, r0
 800c58a:	a806      	add	r0, sp, #24
 800c58c:	f002 fafa 	bl	800eb84 <uxr_serialize_DELETE_Payload>
 800c590:	4620      	mov	r0, r4
 800c592:	b00e      	add	sp, #56	; 0x38
 800c594:	bd10      	pop	{r4, pc}
 800c596:	bf00      	nop

0800c598 <uxr_common_create_entity>:
 800c598:	b510      	push	{r4, lr}
 800c59a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c59e:	b08c      	sub	sp, #48	; 0x30
 800c5a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c5a4:	f1bc 0f01 	cmp.w	ip, #1
 800c5a8:	bf0c      	ite	eq
 800c5aa:	f003 0201 	andeq.w	r2, r3, #1
 800c5ae:	2200      	movne	r2, #0
 800c5b0:	330e      	adds	r3, #14
 800c5b2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c5b6:	9101      	str	r1, [sp, #4]
 800c5b8:	441a      	add	r2, r3
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	9903      	ldr	r1, [sp, #12]
 800c5c0:	ab04      	add	r3, sp, #16
 800c5c2:	b292      	uxth	r2, r2
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	f001 f9b1 	bl	800d92c <uxr_prepare_stream_to_write_submessage>
 800c5ca:	b918      	cbnz	r0, 800c5d4 <uxr_common_create_entity+0x3c>
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	b00c      	add	sp, #48	; 0x30
 800c5d2:	bd10      	pop	{r4, pc}
 800c5d4:	9902      	ldr	r1, [sp, #8]
 800c5d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f001 fadd 	bl	800db98 <uxr_init_base_object_request>
 800c5de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	a804      	add	r0, sp, #16
 800c5e4:	f002 fa2a 	bl	800ea3c <uxr_serialize_CREATE_Payload>
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	b00c      	add	sp, #48	; 0x30
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	bf00      	nop

0800c5f0 <uxr_buffer_create_participant_bin>:
 800c5f0:	b570      	push	{r4, r5, r6, lr}
 800c5f2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800c5f6:	ac11      	add	r4, sp, #68	; 0x44
 800c5f8:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c602:	7223      	strb	r3, [r4, #8]
 800c604:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800c606:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800c60a:	2201      	movs	r2, #1
 800c60c:	2100      	movs	r1, #0
 800c60e:	4605      	mov	r5, r0
 800c610:	7122      	strb	r2, [r4, #4]
 800c612:	f88d 1014 	strb.w	r1, [sp, #20]
 800c616:	b1cb      	cbz	r3, 800c64c <uxr_buffer_create_participant_bin+0x5c>
 800c618:	f88d 201c 	strb.w	r2, [sp, #28]
 800c61c:	9308      	str	r3, [sp, #32]
 800c61e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c622:	a915      	add	r1, sp, #84	; 0x54
 800c624:	a809      	add	r0, sp, #36	; 0x24
 800c626:	f7fd fa6d 	bl	8009b04 <ucdr_init_buffer>
 800c62a:	a905      	add	r1, sp, #20
 800c62c:	a809      	add	r0, sp, #36	; 0x24
 800c62e:	f001 fec3 	bl	800e3b8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c634:	9600      	str	r6, [sp, #0]
 800c636:	9401      	str	r4, [sp, #4]
 800c638:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c63c:	60e3      	str	r3, [r4, #12]
 800c63e:	4628      	mov	r0, r5
 800c640:	b29b      	uxth	r3, r3
 800c642:	f7ff ffa9 	bl	800c598 <uxr_common_create_entity>
 800c646:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	f88d 301c 	strb.w	r3, [sp, #28]
 800c650:	e7e5      	b.n	800c61e <uxr_buffer_create_participant_bin+0x2e>
 800c652:	bf00      	nop

0800c654 <uxr_buffer_create_topic_bin>:
 800c654:	b570      	push	{r4, r5, r6, lr}
 800c656:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800c65a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c65e:	9105      	str	r1, [sp, #20]
 800c660:	4605      	mov	r5, r0
 800c662:	a997      	add	r1, sp, #604	; 0x25c
 800c664:	4618      	mov	r0, r3
 800c666:	2302      	movs	r3, #2
 800c668:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800c66c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800c670:	f000 f8f0 	bl	800c854 <uxr_object_id_to_raw>
 800c674:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800c676:	9306      	str	r3, [sp, #24]
 800c678:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800c67a:	930a      	str	r3, [sp, #40]	; 0x28
 800c67c:	2303      	movs	r3, #3
 800c67e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c682:	2301      	movs	r3, #1
 800c684:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c688:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c68c:	a917      	add	r1, sp, #92	; 0x5c
 800c68e:	2300      	movs	r3, #0
 800c690:	a80b      	add	r0, sp, #44	; 0x2c
 800c692:	f88d 301c 	strb.w	r3, [sp, #28]
 800c696:	f7fd fa35 	bl	8009b04 <ucdr_init_buffer>
 800c69a:	a906      	add	r1, sp, #24
 800c69c:	a80b      	add	r0, sp, #44	; 0x2c
 800c69e:	f001 fead 	bl	800e3fc <uxr_serialize_OBJK_Topic_Binary>
 800c6a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6a4:	9316      	str	r3, [sp, #88]	; 0x58
 800c6a6:	ac13      	add	r4, sp, #76	; 0x4c
 800c6a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c6ac:	9600      	str	r6, [sp, #0]
 800c6ae:	9401      	str	r4, [sp, #4]
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f7ff ff70 	bl	800c598 <uxr_common_create_entity>
 800c6b8:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800c6bc:	bd70      	pop	{r4, r5, r6, pc}
 800c6be:	bf00      	nop

0800c6c0 <uxr_buffer_create_subscriber_bin>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800c6c6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c6ca:	9105      	str	r1, [sp, #20]
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	a992      	add	r1, sp, #584	; 0x248
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	2304      	movs	r3, #4
 800c6d4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800c6d8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800c6dc:	f000 f8ba 	bl	800c854 <uxr_object_id_to_raw>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6e6:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800c6ea:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800c6ee:	a912      	add	r1, sp, #72	; 0x48
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	a806      	add	r0, sp, #24
 800c6f4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800c6f8:	f7fd fa04 	bl	8009b04 <ucdr_init_buffer>
 800c6fc:	a993      	add	r1, sp, #588	; 0x24c
 800c6fe:	a806      	add	r0, sp, #24
 800c700:	f001 ff30 	bl	800e564 <uxr_serialize_OBJK_Subscriber_Binary>
 800c704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c706:	9311      	str	r3, [sp, #68]	; 0x44
 800c708:	ac0e      	add	r4, sp, #56	; 0x38
 800c70a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c70e:	9600      	str	r6, [sp, #0]
 800c710:	9401      	str	r4, [sp, #4]
 800c712:	b29b      	uxth	r3, r3
 800c714:	4628      	mov	r0, r5
 800c716:	f7ff ff3f 	bl	800c598 <uxr_common_create_entity>
 800c71a:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800c71e:	bd70      	pop	{r4, r5, r6, pc}

0800c720 <uxr_buffer_create_datareader_bin>:
 800c720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c724:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800c728:	ac1f      	add	r4, sp, #124	; 0x7c
 800c72a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c72e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800c732:	9105      	str	r1, [sp, #20]
 800c734:	4606      	mov	r6, r0
 800c736:	a9a3      	add	r1, sp, #652	; 0x28c
 800c738:	4618      	mov	r0, r3
 800c73a:	2306      	movs	r3, #6
 800c73c:	7123      	strb	r3, [r4, #4]
 800c73e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800c742:	2703      	movs	r7, #3
 800c744:	f000 f886 	bl	800c854 <uxr_object_id_to_raw>
 800c748:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800c74a:	7227      	strb	r7, [r4, #8]
 800c74c:	a90e      	add	r1, sp, #56	; 0x38
 800c74e:	f000 f881 	bl	800c854 <uxr_object_id_to_raw>
 800c752:	2300      	movs	r3, #0
 800c754:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800c758:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800c75c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800c760:	3d00      	subs	r5, #0
 800c762:	bf18      	it	ne
 800c764:	2501      	movne	r5, #1
 800c766:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800c76a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800c76e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800c772:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c776:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c77a:	2301      	movs	r3, #1
 800c77c:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800c780:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800c784:	bb8a      	cbnz	r2, 800c7ea <uxr_buffer_create_datareader_bin+0xca>
 800c786:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c78a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800c78e:	f04f 0c13 	mov.w	ip, #19
 800c792:	250b      	movs	r5, #11
 800c794:	2221      	movs	r2, #33	; 0x21
 800c796:	2111      	movs	r1, #17
 800c798:	2009      	movs	r0, #9
 800c79a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800c79e:	b923      	cbnz	r3, 800c7aa <uxr_buffer_create_datareader_bin+0x8a>
 800c7a0:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800c7a4:	4672      	mov	r2, lr
 800c7a6:	4661      	mov	r1, ip
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d025      	beq.n	800c7fe <uxr_buffer_create_datareader_bin+0xde>
 800c7b2:	2b03      	cmp	r3, #3
 800c7b4:	d029      	beq.n	800c80a <uxr_buffer_create_datareader_bin+0xea>
 800c7b6:	b32b      	cbz	r3, 800c804 <uxr_buffer_create_datareader_bin+0xe4>
 800c7b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7bc:	a923      	add	r1, sp, #140	; 0x8c
 800c7be:	a806      	add	r0, sp, #24
 800c7c0:	f7fd f9a0 	bl	8009b04 <ucdr_init_buffer>
 800c7c4:	a90e      	add	r1, sp, #56	; 0x38
 800c7c6:	a806      	add	r0, sp, #24
 800c7c8:	f001 ff42 	bl	800e650 <uxr_serialize_OBJK_DataReader_Binary>
 800c7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ce:	f8cd 8000 	str.w	r8, [sp]
 800c7d2:	9401      	str	r4, [sp, #4]
 800c7d4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c7d8:	60e3      	str	r3, [r4, #12]
 800c7da:	4630      	mov	r0, r6
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	f7ff fedb 	bl	800c598 <uxr_common_create_entity>
 800c7e2:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800c7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ea:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800c7ee:	f04f 0c12 	mov.w	ip, #18
 800c7f2:	250a      	movs	r5, #10
 800c7f4:	2220      	movs	r2, #32
 800c7f6:	2110      	movs	r1, #16
 800c7f8:	2008      	movs	r0, #8
 800c7fa:	2702      	movs	r7, #2
 800c7fc:	e7cd      	b.n	800c79a <uxr_buffer_create_datareader_bin+0x7a>
 800c7fe:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800c802:	e7d9      	b.n	800c7b8 <uxr_buffer_create_datareader_bin+0x98>
 800c804:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800c808:	e7d6      	b.n	800c7b8 <uxr_buffer_create_datareader_bin+0x98>
 800c80a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800c80e:	e7d3      	b.n	800c7b8 <uxr_buffer_create_datareader_bin+0x98>

0800c810 <uxr_object_id>:
 800c810:	b082      	sub	sp, #8
 800c812:	2300      	movs	r3, #0
 800c814:	f88d 1006 	strb.w	r1, [sp, #6]
 800c818:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c81c:	f360 030f 	bfi	r3, r0, #0, #16
 800c820:	f362 431f 	bfi	r3, r2, #16, #16
 800c824:	4618      	mov	r0, r3
 800c826:	b002      	add	sp, #8
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop

0800c82c <uxr_object_id_from_raw>:
 800c82c:	7843      	ldrb	r3, [r0, #1]
 800c82e:	7801      	ldrb	r1, [r0, #0]
 800c830:	b082      	sub	sp, #8
 800c832:	f003 020f 	and.w	r2, r3, #15
 800c836:	f88d 2006 	strb.w	r2, [sp, #6]
 800c83a:	091b      	lsrs	r3, r3, #4
 800c83c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c840:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c844:	2000      	movs	r0, #0
 800c846:	f363 000f 	bfi	r0, r3, #0, #16
 800c84a:	f362 401f 	bfi	r0, r2, #16, #16
 800c84e:	b002      	add	sp, #8
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop

0800c854 <uxr_object_id_to_raw>:
 800c854:	4602      	mov	r2, r0
 800c856:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c85a:	b082      	sub	sp, #8
 800c85c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800c860:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c864:	f881 c000 	strb.w	ip, [r1]
 800c868:	7048      	strb	r0, [r1, #1]
 800c86a:	b002      	add	sp, #8
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop

0800c870 <uxr_buffer_request_data>:
 800c870:	b530      	push	{r4, r5, lr}
 800c872:	b095      	sub	sp, #84	; 0x54
 800c874:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800c878:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c87a:	9303      	str	r3, [sp, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	2d00      	cmp	r5, #0
 800c880:	bf14      	ite	ne
 800c882:	2101      	movne	r1, #1
 800c884:	4611      	moveq	r1, r2
 800c886:	4604      	mov	r4, r0
 800c888:	f88d 301c 	strb.w	r3, [sp, #28]
 800c88c:	f88d 201d 	strb.w	r2, [sp, #29]
 800c890:	f88d 201e 	strb.w	r2, [sp, #30]
 800c894:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800c898:	d021      	beq.n	800c8de <uxr_buffer_request_data+0x6e>
 800c89a:	682a      	ldr	r2, [r5, #0]
 800c89c:	686b      	ldr	r3, [r5, #4]
 800c89e:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 800c8a2:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800c8a6:	2210      	movs	r2, #16
 800c8a8:	2308      	movs	r3, #8
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	e9cd 3100 	strd	r3, r1, [sp]
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	9905      	ldr	r1, [sp, #20]
 800c8b4:	ab0c      	add	r3, sp, #48	; 0x30
 800c8b6:	f001 f839 	bl	800d92c <uxr_prepare_stream_to_write_submessage>
 800c8ba:	b918      	cbnz	r0, 800c8c4 <uxr_buffer_request_data+0x54>
 800c8bc:	4604      	mov	r4, r0
 800c8be:	4620      	mov	r0, r4
 800c8c0:	b015      	add	sp, #84	; 0x54
 800c8c2:	bd30      	pop	{r4, r5, pc}
 800c8c4:	9904      	ldr	r1, [sp, #16]
 800c8c6:	aa06      	add	r2, sp, #24
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f001 f965 	bl	800db98 <uxr_init_base_object_request>
 800c8ce:	a906      	add	r1, sp, #24
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	a80c      	add	r0, sp, #48	; 0x30
 800c8d4:	f002 fa00 	bl	800ecd8 <uxr_serialize_READ_DATA_Payload>
 800c8d8:	4620      	mov	r0, r4
 800c8da:	b015      	add	sp, #84	; 0x54
 800c8dc:	bd30      	pop	{r4, r5, pc}
 800c8de:	2208      	movs	r2, #8
 800c8e0:	e7e2      	b.n	800c8a8 <uxr_buffer_request_data+0x38>
 800c8e2:	bf00      	nop

0800c8e4 <uxr_buffer_cancel_data>:
 800c8e4:	b510      	push	{r4, lr}
 800c8e6:	b094      	sub	sp, #80	; 0x50
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	9202      	str	r2, [sp, #8]
 800c8ec:	9205      	str	r2, [sp, #20]
 800c8ee:	9301      	str	r3, [sp, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c8f6:	f88d 301e 	strb.w	r3, [sp, #30]
 800c8fa:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800c8fe:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800c902:	2308      	movs	r3, #8
 800c904:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	2210      	movs	r2, #16
 800c90c:	ab0c      	add	r3, sp, #48	; 0x30
 800c90e:	4604      	mov	r4, r0
 800c910:	9103      	str	r1, [sp, #12]
 800c912:	f001 f80b 	bl	800d92c <uxr_prepare_stream_to_write_submessage>
 800c916:	b918      	cbnz	r0, 800c920 <uxr_buffer_cancel_data+0x3c>
 800c918:	4604      	mov	r4, r0
 800c91a:	4620      	mov	r0, r4
 800c91c:	b014      	add	sp, #80	; 0x50
 800c91e:	bd10      	pop	{r4, pc}
 800c920:	9905      	ldr	r1, [sp, #20]
 800c922:	aa06      	add	r2, sp, #24
 800c924:	4620      	mov	r0, r4
 800c926:	f001 f937 	bl	800db98 <uxr_init_base_object_request>
 800c92a:	a906      	add	r1, sp, #24
 800c92c:	4604      	mov	r4, r0
 800c92e:	a80c      	add	r0, sp, #48	; 0x30
 800c930:	f002 f9d2 	bl	800ecd8 <uxr_serialize_READ_DATA_Payload>
 800c934:	4620      	mov	r0, r4
 800c936:	b014      	add	sp, #80	; 0x50
 800c938:	bd10      	pop	{r4, pc}
 800c93a:	bf00      	nop

0800c93c <read_submessage_format>:
 800c93c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c940:	b095      	sub	sp, #84	; 0x54
 800c942:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 800c946:	b113      	cbz	r3, 800c94e <read_submessage_format+0x12>
 800c948:	b015      	add	sp, #84	; 0x54
 800c94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c94e:	460c      	mov	r4, r1
 800c950:	4615      	mov	r5, r2
 800c952:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800c956:	4607      	mov	r7, r0
 800c958:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c95a:	9004      	str	r0, [sp, #16]
 800c95c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c95e:	9005      	str	r0, [sp, #20]
 800c960:	1a52      	subs	r2, r2, r1
 800c962:	a80c      	add	r0, sp, #48	; 0x30
 800c964:	4699      	mov	r9, r3
 800c966:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800c96a:	f7fd f8cb 	bl	8009b04 <ucdr_init_buffer>
 800c96e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c972:	a80c      	add	r0, sp, #48	; 0x30
 800c974:	f7fd f89a 	bl	8009aac <ucdr_set_on_full_buffer_callback>
 800c978:	69e2      	ldr	r2, [r4, #28]
 800c97a:	b19a      	cbz	r2, 800c9a4 <read_submessage_format+0x68>
 800c97c:	f1b8 0f07 	cmp.w	r8, #7
 800c980:	f882 9014 	strb.w	r9, [r2, #20]
 800c984:	d040      	beq.n	800ca08 <read_submessage_format+0xcc>
 800c986:	f1b8 0f08 	cmp.w	r8, #8
 800c98a:	d02e      	beq.n	800c9ea <read_submessage_format+0xae>
 800c98c:	f1b8 0f06 	cmp.w	r8, #6
 800c990:	d011      	beq.n	800c9b6 <read_submessage_format+0x7a>
 800c992:	2301      	movs	r3, #1
 800c994:	7513      	strb	r3, [r2, #20]
 800c996:	4629      	mov	r1, r5
 800c998:	4620      	mov	r0, r4
 800c99a:	f7fd f903 	bl	8009ba4 <ucdr_advance_buffer>
 800c99e:	b015      	add	sp, #84	; 0x54
 800c9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9a4:	f1b8 0f07 	cmp.w	r8, #7
 800c9a8:	d02e      	beq.n	800ca08 <read_submessage_format+0xcc>
 800c9aa:	f1b8 0f08 	cmp.w	r8, #8
 800c9ae:	d01c      	beq.n	800c9ea <read_submessage_format+0xae>
 800c9b0:	f1b8 0f06 	cmp.w	r8, #6
 800c9b4:	d1ef      	bne.n	800c996 <read_submessage_format+0x5a>
 800c9b6:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 800c9ba:	f1b8 0f00 	cmp.w	r8, #0
 800c9be:	d011      	beq.n	800c9e4 <read_submessage_format+0xa8>
 800c9c0:	ab0c      	add	r3, sp, #48	; 0x30
 800c9c2:	e9cd 3500 	strd	r3, r5, [sp]
 800c9c6:	2306      	movs	r3, #6
 800c9c8:	f88d 3016 	strb.w	r3, [sp, #22]
 800c9cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9d0:	9302      	str	r3, [sp, #8]
 800c9d2:	4632      	mov	r2, r6
 800c9d4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800c9d8:	4638      	mov	r0, r7
 800c9da:	47c0      	blx	r8
 800c9dc:	2301      	movs	r3, #1
 800c9de:	69e2      	ldr	r2, [r4, #28]
 800c9e0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800c9e4:	2a00      	cmp	r2, #0
 800c9e6:	d1d4      	bne.n	800c992 <read_submessage_format+0x56>
 800c9e8:	e7d5      	b.n	800c996 <read_submessage_format+0x5a>
 800c9ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d0f8      	beq.n	800c9e4 <read_submessage_format+0xa8>
 800c9f2:	a906      	add	r1, sp, #24
 800c9f4:	a80c      	add	r0, sp, #48	; 0x30
 800c9f6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c9fa:	f002 fa33 	bl	800ee64 <uxr_deserialize_SampleIdentity>
 800c9fe:	b9a0      	cbnz	r0, 800ca2a <read_submessage_format+0xee>
 800ca00:	69e2      	ldr	r2, [r4, #28]
 800ca02:	2a00      	cmp	r2, #0
 800ca04:	d1c5      	bne.n	800c992 <read_submessage_format+0x56>
 800ca06:	e7c6      	b.n	800c996 <read_submessage_format+0x5a>
 800ca08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca0c:	b13b      	cbz	r3, 800ca1e <read_submessage_format+0xe2>
 800ca0e:	a906      	add	r1, sp, #24
 800ca10:	a80c      	add	r0, sp, #48	; 0x30
 800ca12:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800ca16:	f001 fef9 	bl	800e80c <uxr_deserialize_BaseObjectRequest>
 800ca1a:	bb60      	cbnz	r0, 800ca76 <read_submessage_format+0x13a>
 800ca1c:	69e2      	ldr	r2, [r4, #28]
 800ca1e:	68a3      	ldr	r3, [r4, #8]
 800ca20:	442b      	add	r3, r5
 800ca22:	60a3      	str	r3, [r4, #8]
 800ca24:	2a00      	cmp	r2, #0
 800ca26:	d1b4      	bne.n	800c992 <read_submessage_format+0x56>
 800ca28:	e7b5      	b.n	800c996 <read_submessage_format+0x5a>
 800ca2a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ca2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca30:	1a52      	subs	r2, r2, r1
 800ca32:	eba8 0803 	sub.w	r8, r8, r3
 800ca36:	a80c      	add	r0, sp, #48	; 0x30
 800ca38:	f7fd f864 	bl	8009b04 <ucdr_init_buffer>
 800ca3c:	44a8      	add	r8, r5
 800ca3e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ca42:	a80c      	add	r0, sp, #48	; 0x30
 800ca44:	f7fd f832 	bl	8009aac <ucdr_set_on_full_buffer_callback>
 800ca48:	fa1f f888 	uxth.w	r8, r8
 800ca4c:	ab0c      	add	r3, sp, #48	; 0x30
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	f8cd 8004 	str.w	r8, [sp, #4]
 800ca54:	2108      	movs	r1, #8
 800ca56:	f88d 1016 	strb.w	r1, [sp, #22]
 800ca5a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800ca5e:	9102      	str	r1, [sp, #8]
 800ca60:	ab06      	add	r3, sp, #24
 800ca62:	4632      	mov	r2, r6
 800ca64:	9905      	ldr	r1, [sp, #20]
 800ca66:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	47b0      	blx	r6
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800ca74:	e7c4      	b.n	800ca00 <read_submessage_format+0xc4>
 800ca76:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ca7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca7c:	1a52      	subs	r2, r2, r1
 800ca7e:	a80c      	add	r0, sp, #48	; 0x30
 800ca80:	eba8 0803 	sub.w	r8, r8, r3
 800ca84:	f7fd f83e 	bl	8009b04 <ucdr_init_buffer>
 800ca88:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ca8c:	a80c      	add	r0, sp, #48	; 0x30
 800ca8e:	f7fd f80d 	bl	8009aac <ucdr_set_on_full_buffer_callback>
 800ca92:	ab0c      	add	r3, sp, #48	; 0x30
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ca9a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ca9e:	44a8      	add	r8, r5
 800caa0:	fa1f f888 	uxth.w	r8, r8
 800caa4:	f8cd 8004 	str.w	r8, [sp, #4]
 800caa8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800caac:	2107      	movs	r1, #7
 800caae:	f88d 1016 	strb.w	r1, [sp, #22]
 800cab2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800cab6:	9102      	str	r1, [sp, #8]
 800cab8:	4632      	mov	r2, r6
 800caba:	b29b      	uxth	r3, r3
 800cabc:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 800cac0:	9905      	ldr	r1, [sp, #20]
 800cac2:	4638      	mov	r0, r7
 800cac4:	47b0      	blx	r6
 800cac6:	2301      	movs	r3, #1
 800cac8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800cacc:	e7a6      	b.n	800ca1c <read_submessage_format+0xe0>
 800cace:	bf00      	nop

0800cad0 <on_get_fragmentation_info>:
 800cad0:	b500      	push	{lr}
 800cad2:	b08b      	sub	sp, #44	; 0x2c
 800cad4:	4601      	mov	r1, r0
 800cad6:	2204      	movs	r2, #4
 800cad8:	a802      	add	r0, sp, #8
 800cada:	f7fd f813 	bl	8009b04 <ucdr_init_buffer>
 800cade:	f10d 0305 	add.w	r3, sp, #5
 800cae2:	f10d 0206 	add.w	r2, sp, #6
 800cae6:	a901      	add	r1, sp, #4
 800cae8:	a802      	add	r0, sp, #8
 800caea:	f001 f9d7 	bl	800de9c <uxr_read_submessage_header>
 800caee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800caf2:	2b0d      	cmp	r3, #13
 800caf4:	d003      	beq.n	800cafe <on_get_fragmentation_info+0x2e>
 800caf6:	2000      	movs	r0, #0
 800caf8:	b00b      	add	sp, #44	; 0x2c
 800cafa:	f85d fb04 	ldr.w	pc, [sp], #4
 800cafe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cb02:	f013 0f02 	tst.w	r3, #2
 800cb06:	bf14      	ite	ne
 800cb08:	2002      	movne	r0, #2
 800cb0a:	2001      	moveq	r0, #1
 800cb0c:	b00b      	add	sp, #44	; 0x2c
 800cb0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb12:	bf00      	nop

0800cb14 <read_submessage_get_info>:
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	2500      	movs	r5, #0
 800cb18:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	f44f 7224 	mov.w	r2, #656	; 0x290
 800cb22:	460e      	mov	r6, r1
 800cb24:	a810      	add	r0, sp, #64	; 0x40
 800cb26:	4629      	mov	r1, r5
 800cb28:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800cb2c:	f008 fa7c 	bl	8015028 <memset>
 800cb30:	a903      	add	r1, sp, #12
 800cb32:	4630      	mov	r0, r6
 800cb34:	f002 f812 	bl	800eb5c <uxr_deserialize_GET_INFO_Payload>
 800cb38:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cb3c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cb40:	4620      	mov	r0, r4
 800cb42:	f001 f821 	bl	800db88 <uxr_session_header_offset>
 800cb46:	462b      	mov	r3, r5
 800cb48:	9000      	str	r0, [sp, #0]
 800cb4a:	220c      	movs	r2, #12
 800cb4c:	a905      	add	r1, sp, #20
 800cb4e:	a808      	add	r0, sp, #32
 800cb50:	f7fc ffc6 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 800cb54:	a910      	add	r1, sp, #64	; 0x40
 800cb56:	a808      	add	r0, sp, #32
 800cb58:	f002 f872 	bl	800ec40 <uxr_serialize_INFO_Payload>
 800cb5c:	9b08      	ldr	r3, [sp, #32]
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4629      	mov	r1, r5
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 ffba 	bl	800dadc <uxr_stamp_session_header>
 800cb68:	a808      	add	r0, sp, #32
 800cb6a:	f7fc fff7 	bl	8009b5c <ucdr_buffer_length>
 800cb6e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cb70:	4602      	mov	r2, r0
 800cb72:	a905      	add	r1, sp, #20
 800cb74:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cb78:	47a0      	blx	r4
 800cb7a:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}

0800cb80 <write_submessage_acknack.isra.0>:
 800cb80:	b570      	push	{r4, r5, r6, lr}
 800cb82:	b092      	sub	sp, #72	; 0x48
 800cb84:	4605      	mov	r5, r0
 800cb86:	460e      	mov	r6, r1
 800cb88:	4614      	mov	r4, r2
 800cb8a:	f000 fffd 	bl	800db88 <uxr_session_header_offset>
 800cb8e:	a905      	add	r1, sp, #20
 800cb90:	9000      	str	r0, [sp, #0]
 800cb92:	2300      	movs	r3, #0
 800cb94:	a80a      	add	r0, sp, #40	; 0x28
 800cb96:	2211      	movs	r2, #17
 800cb98:	f7fc ffa2 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 800cb9c:	2218      	movs	r2, #24
 800cb9e:	fb02 5404 	mla	r4, r2, r4, r5
 800cba2:	2300      	movs	r3, #0
 800cba4:	2205      	movs	r2, #5
 800cba6:	3450      	adds	r4, #80	; 0x50
 800cba8:	210a      	movs	r1, #10
 800cbaa:	a80a      	add	r0, sp, #40	; 0x28
 800cbac:	f001 f95c 	bl	800de68 <uxr_buffer_submessage_header>
 800cbb0:	a903      	add	r1, sp, #12
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f006 fa6c 	bl	8013090 <uxr_compute_acknack>
 800cbb8:	ba40      	rev16	r0, r0
 800cbba:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cbbe:	a903      	add	r1, sp, #12
 800cbc0:	a80a      	add	r0, sp, #40	; 0x28
 800cbc2:	f88d 6010 	strb.w	r6, [sp, #16]
 800cbc6:	f002 f8ab 	bl	800ed20 <uxr_serialize_ACKNACK_Payload>
 800cbca:	2200      	movs	r2, #0
 800cbcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbce:	4611      	mov	r1, r2
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	f000 ff83 	bl	800dadc <uxr_stamp_session_header>
 800cbd6:	a80a      	add	r0, sp, #40	; 0x28
 800cbd8:	f7fc ffc0 	bl	8009b5c <ucdr_buffer_length>
 800cbdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800cbde:	4602      	mov	r2, r0
 800cbe0:	a905      	add	r1, sp, #20
 800cbe2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cbe6:	47a0      	blx	r4
 800cbe8:	b012      	add	sp, #72	; 0x48
 800cbea:	bd70      	pop	{r4, r5, r6, pc}
 800cbec:	0000      	movs	r0, r0
	...

0800cbf0 <uxr_init_session>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800cc28 <uxr_init_session+0x38>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800cc02:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800cc06:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800cc0a:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800cc0e:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800cc12:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800cc16:	2181      	movs	r1, #129	; 0x81
 800cc18:	f000 fecc 	bl	800d9b4 <uxr_init_session_info>
 800cc1c:	f104 0008 	add.w	r0, r4, #8
 800cc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc24:	f001 b83c 	b.w	800dca0 <uxr_init_stream_storage>
	...

0800cc30 <uxr_set_status_callback>:
 800cc30:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop

0800cc38 <uxr_set_topic_callback>:
 800cc38:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop

0800cc40 <uxr_set_request_callback>:
 800cc40:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop

0800cc48 <uxr_set_reply_callback>:
 800cc48:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop

0800cc50 <uxr_create_output_best_effort_stream>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	e9cd 2100 	strd	r2, r1, [sp]
 800cc58:	4604      	mov	r4, r0
 800cc5a:	f000 ff95 	bl	800db88 <uxr_session_header_offset>
 800cc5e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cc62:	4603      	mov	r3, r0
 800cc64:	f104 0008 	add.w	r0, r4, #8
 800cc68:	b004      	add	sp, #16
 800cc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc6e:	f001 b861 	b.w	800dd34 <uxr_add_output_best_effort_buffer>
 800cc72:	bf00      	nop

0800cc74 <uxr_create_output_reliable_stream>:
 800cc74:	b510      	push	{r4, lr}
 800cc76:	b088      	sub	sp, #32
 800cc78:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	9303      	str	r3, [sp, #12]
 800cc80:	f000 ff82 	bl	800db88 <uxr_session_header_offset>
 800cc84:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cc88:	9000      	str	r0, [sp, #0]
 800cc8a:	9905      	ldr	r1, [sp, #20]
 800cc8c:	f104 0008 	add.w	r0, r4, #8
 800cc90:	f001 f864 	bl	800dd5c <uxr_add_output_reliable_buffer>
 800cc94:	2200      	movs	r2, #0
 800cc96:	b2c3      	uxtb	r3, r0
 800cc98:	f363 0207 	bfi	r2, r3, #0, #8
 800cc9c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cca0:	f363 220f 	bfi	r2, r3, #8, #8
 800cca4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cca8:	f363 4217 	bfi	r2, r3, #16, #8
 800ccac:	0e03      	lsrs	r3, r0, #24
 800ccae:	f363 621f 	bfi	r2, r3, #24, #8
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	b008      	add	sp, #32
 800ccb6:	bd10      	pop	{r4, pc}

0800ccb8 <uxr_create_input_best_effort_stream>:
 800ccb8:	b082      	sub	sp, #8
 800ccba:	3008      	adds	r0, #8
 800ccbc:	b002      	add	sp, #8
 800ccbe:	f001 b867 	b.w	800dd90 <uxr_add_input_best_effort_buffer>
 800ccc2:	bf00      	nop

0800ccc4 <uxr_create_input_reliable_stream>:
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	4c0b      	ldr	r4, [pc, #44]	; (800ccf8 <uxr_create_input_reliable_stream+0x34>)
 800ccca:	9400      	str	r4, [sp, #0]
 800cccc:	3008      	adds	r0, #8
 800ccce:	f001 f875 	bl	800ddbc <uxr_add_input_reliable_buffer>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	b2c3      	uxtb	r3, r0
 800ccd6:	f363 0207 	bfi	r2, r3, #0, #8
 800ccda:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ccde:	f363 220f 	bfi	r2, r3, #8, #8
 800cce2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cce6:	f363 4217 	bfi	r2, r3, #16, #8
 800ccea:	0e03      	lsrs	r3, r0, #24
 800ccec:	f363 621f 	bfi	r2, r3, #24, #8
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	b004      	add	sp, #16
 800ccf4:	bd10      	pop	{r4, pc}
 800ccf6:	bf00      	nop
 800ccf8:	0800cad1 	.word	0x0800cad1

0800ccfc <uxr_epoch_nanos>:
 800ccfc:	b510      	push	{r4, lr}
 800ccfe:	4604      	mov	r4, r0
 800cd00:	f001 f912 	bl	800df28 <uxr_nanos>
 800cd04:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800cd08:	1ac0      	subs	r0, r0, r3
 800cd0a:	eb61 0102 	sbc.w	r1, r1, r2
 800cd0e:	bd10      	pop	{r4, pc}

0800cd10 <uxr_flash_output_streams>:
 800cd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd14:	7e03      	ldrb	r3, [r0, #24]
 800cd16:	b084      	sub	sp, #16
 800cd18:	4604      	mov	r4, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d035      	beq.n	800cd8a <uxr_flash_output_streams+0x7a>
 800cd1e:	f04f 0900 	mov.w	r9, #0
 800cd22:	4648      	mov	r0, r9
 800cd24:	f10d 0802 	add.w	r8, sp, #2
 800cd28:	af03      	add	r7, sp, #12
 800cd2a:	ae02      	add	r6, sp, #8
 800cd2c:	e006      	b.n	800cd3c <uxr_flash_output_streams+0x2c>
 800cd2e:	7e23      	ldrb	r3, [r4, #24]
 800cd30:	f109 0901 	add.w	r9, r9, #1
 800cd34:	fa5f f089 	uxtb.w	r0, r9
 800cd38:	4283      	cmp	r3, r0
 800cd3a:	d926      	bls.n	800cd8a <uxr_flash_output_streams+0x7a>
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	4611      	mov	r1, r2
 800cd40:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800cd44:	f000 ff58 	bl	800dbf8 <uxr_stream_id>
 800cd48:	3508      	adds	r5, #8
 800cd4a:	4684      	mov	ip, r0
 800cd4c:	4643      	mov	r3, r8
 800cd4e:	463a      	mov	r2, r7
 800cd50:	4631      	mov	r1, r6
 800cd52:	4628      	mov	r0, r5
 800cd54:	f8cd c004 	str.w	ip, [sp, #4]
 800cd58:	f006 fa20 	bl	801319c <uxr_prepare_best_effort_buffer_to_send>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d0e6      	beq.n	800cd2e <uxr_flash_output_streams+0x1e>
 800cd60:	9b02      	ldr	r3, [sp, #8]
 800cd62:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cd66:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f000 feb6 	bl	800dadc <uxr_stamp_session_header>
 800cd70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd72:	9a03      	ldr	r2, [sp, #12]
 800cd74:	685d      	ldr	r5, [r3, #4]
 800cd76:	6818      	ldr	r0, [r3, #0]
 800cd78:	9902      	ldr	r1, [sp, #8]
 800cd7a:	47a8      	blx	r5
 800cd7c:	f109 0901 	add.w	r9, r9, #1
 800cd80:	7e23      	ldrb	r3, [r4, #24]
 800cd82:	fa5f f089 	uxtb.w	r0, r9
 800cd86:	4283      	cmp	r3, r0
 800cd88:	d8d8      	bhi.n	800cd3c <uxr_flash_output_streams+0x2c>
 800cd8a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800cd8e:	b38b      	cbz	r3, 800cdf4 <uxr_flash_output_streams+0xe4>
 800cd90:	f04f 0900 	mov.w	r9, #0
 800cd94:	f10d 0802 	add.w	r8, sp, #2
 800cd98:	af03      	add	r7, sp, #12
 800cd9a:	ae02      	add	r6, sp, #8
 800cd9c:	4648      	mov	r0, r9
 800cd9e:	2201      	movs	r2, #1
 800cda0:	2102      	movs	r1, #2
 800cda2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800cda6:	f000 ff27 	bl	800dbf8 <uxr_stream_id>
 800cdaa:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800cdae:	3520      	adds	r5, #32
 800cdb0:	9001      	str	r0, [sp, #4]
 800cdb2:	e00d      	b.n	800cdd0 <uxr_flash_output_streams+0xc0>
 800cdb4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cdb8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cdbc:	9b02      	ldr	r3, [sp, #8]
 800cdbe:	f000 fe8d 	bl	800dadc <uxr_stamp_session_header>
 800cdc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cdc4:	9a03      	ldr	r2, [sp, #12]
 800cdc6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800cdca:	9902      	ldr	r1, [sp, #8]
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	47d0      	blx	sl
 800cdd0:	4643      	mov	r3, r8
 800cdd2:	463a      	mov	r2, r7
 800cdd4:	4631      	mov	r1, r6
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f006 fbfe 	bl	80135d8 <uxr_prepare_next_reliable_buffer_to_send>
 800cddc:	4603      	mov	r3, r0
 800cdde:	4620      	mov	r0, r4
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1e7      	bne.n	800cdb4 <uxr_flash_output_streams+0xa4>
 800cde4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800cde8:	f109 0901 	add.w	r9, r9, #1
 800cdec:	fa5f f089 	uxtb.w	r0, r9
 800cdf0:	4283      	cmp	r3, r0
 800cdf2:	d8d4      	bhi.n	800cd9e <uxr_flash_output_streams+0x8e>
 800cdf4:	b004      	add	sp, #16
 800cdf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdfa:	bf00      	nop

0800cdfc <read_submessage_info>:
 800cdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce00:	460d      	mov	r5, r1
 800ce02:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800ce06:	4669      	mov	r1, sp
 800ce08:	4607      	mov	r7, r0
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	f001 fdb4 	bl	800e978 <uxr_deserialize_BaseObjectReply>
 800ce10:	a902      	add	r1, sp, #8
 800ce12:	4604      	mov	r4, r0
 800ce14:	4628      	mov	r0, r5
 800ce16:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ce1a:	f7fb fd19 	bl	8008850 <ucdr_deserialize_bool>
 800ce1e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ce22:	4004      	ands	r4, r0
 800ce24:	b2e4      	uxtb	r4, r4
 800ce26:	b95b      	cbnz	r3, 800ce40 <read_submessage_info+0x44>
 800ce28:	a987      	add	r1, sp, #540	; 0x21c
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	f7fb fd10 	bl	8008850 <ucdr_deserialize_bool>
 800ce30:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800ce34:	4606      	mov	r6, r0
 800ce36:	b94b      	cbnz	r3, 800ce4c <read_submessage_info+0x50>
 800ce38:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800ce3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce40:	a903      	add	r1, sp, #12
 800ce42:	4628      	mov	r0, r5
 800ce44:	f001 fc40 	bl	800e6c8 <uxr_deserialize_ObjectVariant>
 800ce48:	4004      	ands	r4, r0
 800ce4a:	e7ed      	b.n	800ce28 <read_submessage_info+0x2c>
 800ce4c:	a988      	add	r1, sp, #544	; 0x220
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f7fb fd2c 	bl	80088ac <ucdr_deserialize_uint8_t>
 800ce54:	4234      	tst	r4, r6
 800ce56:	d0ef      	beq.n	800ce38 <read_submessage_info+0x3c>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d0ed      	beq.n	800ce38 <read_submessage_info+0x3c>
 800ce5c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800ce60:	2b0d      	cmp	r3, #13
 800ce62:	d1e9      	bne.n	800ce38 <read_submessage_info+0x3c>
 800ce64:	a98a      	add	r1, sp, #552	; 0x228
 800ce66:	4628      	mov	r0, r5
 800ce68:	f7fc fac6 	bl	80093f8 <ucdr_deserialize_int16_t>
 800ce6c:	b140      	cbz	r0, 800ce80 <read_submessage_info+0x84>
 800ce6e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	dd07      	ble.n	800ce86 <read_submessage_info+0x8a>
 800ce76:	f1b8 0f00 	cmp.w	r8, #0
 800ce7a:	bf14      	ite	ne
 800ce7c:	2001      	movne	r0, #1
 800ce7e:	2002      	moveq	r0, #2
 800ce80:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800ce84:	e7d8      	b.n	800ce38 <read_submessage_info+0x3c>
 800ce86:	2000      	movs	r0, #0
 800ce88:	e7fa      	b.n	800ce80 <read_submessage_info+0x84>
 800ce8a:	bf00      	nop

0800ce8c <read_submessage_list>:
 800ce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce90:	b097      	sub	sp, #92	; 0x5c
 800ce92:	4ec1      	ldr	r6, [pc, #772]	; (800d198 <read_submessage_list+0x30c>)
 800ce94:	9209      	str	r2, [sp, #36]	; 0x24
 800ce96:	4604      	mov	r4, r0
 800ce98:	460d      	mov	r5, r1
 800ce9a:	f04f 0801 	mov.w	r8, #1
 800ce9e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800cea2:	aa0c      	add	r2, sp, #48	; 0x30
 800cea4:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800cea8:	4628      	mov	r0, r5
 800ceaa:	f000 fff7 	bl	800de9c <uxr_read_submessage_header>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	f000 813e 	beq.w	800d130 <read_submessage_list+0x2a4>
 800ceb4:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800ceb8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800cebc:	3b02      	subs	r3, #2
 800cebe:	2b0d      	cmp	r3, #13
 800cec0:	d8ed      	bhi.n	800ce9e <read_submessage_list+0x12>
 800cec2:	a101      	add	r1, pc, #4	; (adr r1, 800cec8 <read_submessage_list+0x3c>)
 800cec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cec8:	0800d127 	.word	0x0800d127
 800cecc:	0800ce9f 	.word	0x0800ce9f
 800ced0:	0800d117 	.word	0x0800d117
 800ced4:	0800d0b5 	.word	0x0800d0b5
 800ced8:	0800d0ab 	.word	0x0800d0ab
 800cedc:	0800ce9f 	.word	0x0800ce9f
 800cee0:	0800ce9f 	.word	0x0800ce9f
 800cee4:	0800d00b 	.word	0x0800d00b
 800cee8:	0800cf9b 	.word	0x0800cf9b
 800ceec:	0800cf5b 	.word	0x0800cf5b
 800cef0:	0800ce9f 	.word	0x0800ce9f
 800cef4:	0800ce9f 	.word	0x0800ce9f
 800cef8:	0800ce9f 	.word	0x0800ce9f
 800cefc:	0800cf01 	.word	0x0800cf01
 800cf00:	a910      	add	r1, sp, #64	; 0x40
 800cf02:	4628      	mov	r0, r5
 800cf04:	f001 ff5c 	bl	800edc0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800cf08:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800cf0c:	f1b9 0f00 	cmp.w	r9, #0
 800cf10:	f000 8116 	beq.w	800d140 <read_submessage_list+0x2b4>
 800cf14:	f001 f808 	bl	800df28 <uxr_nanos>
 800cf18:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cf20:	2100      	movs	r1, #0
 800cf22:	468c      	mov	ip, r1
 800cf24:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800cf28:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800cf2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cf2e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800cf30:	468c      	mov	ip, r1
 800cf32:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800cf36:	46e2      	mov	sl, ip
 800cf38:	46bc      	mov	ip, r7
 800cf3a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800cf3e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800cf42:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800cf46:	e9cd 7100 	strd	r7, r1, [sp]
 800cf4a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800cf4e:	9106      	str	r1, [sp, #24]
 800cf50:	4620      	mov	r0, r4
 800cf52:	47c8      	blx	r9
 800cf54:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800cf58:	e7a1      	b.n	800ce9e <read_submessage_list+0x12>
 800cf5a:	a910      	add	r1, sp, #64	; 0x40
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	f001 ff1d 	bl	800ed9c <uxr_deserialize_HEARTBEAT_Payload>
 800cf62:	2100      	movs	r1, #0
 800cf64:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800cf68:	f000 fe70 	bl	800dc4c <uxr_stream_id_from_raw>
 800cf6c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800cf70:	900f      	str	r0, [sp, #60]	; 0x3c
 800cf72:	4639      	mov	r1, r7
 800cf74:	f104 0008 	add.w	r0, r4, #8
 800cf78:	f000 ff56 	bl	800de28 <uxr_get_input_reliable_stream>
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d08e      	beq.n	800ce9e <read_submessage_list+0x12>
 800cf80:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800cf84:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800cf88:	f006 f876 	bl	8013078 <uxr_process_heartbeat>
 800cf8c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800cf90:	463a      	mov	r2, r7
 800cf92:	4620      	mov	r0, r4
 800cf94:	f7ff fdf4 	bl	800cb80 <write_submessage_acknack.isra.0>
 800cf98:	e781      	b.n	800ce9e <read_submessage_list+0x12>
 800cf9a:	a910      	add	r1, sp, #64	; 0x40
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f001 fed5 	bl	800ed4c <uxr_deserialize_ACKNACK_Payload>
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800cfa8:	f000 fe50 	bl	800dc4c <uxr_stream_id_from_raw>
 800cfac:	900d      	str	r0, [sp, #52]	; 0x34
 800cfae:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800cfb2:	f104 0008 	add.w	r0, r4, #8
 800cfb6:	f000 ff23 	bl	800de00 <uxr_get_output_reliable_stream>
 800cfba:	4607      	mov	r7, r0
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	f43f af6e 	beq.w	800ce9e <read_submessage_list+0x12>
 800cfc2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800cfc6:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800cfca:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800cfce:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800cfd2:	b289      	uxth	r1, r1
 800cfd4:	f006 fbaa 	bl	801372c <uxr_process_acknack>
 800cfd8:	4638      	mov	r0, r7
 800cfda:	f006 fb67 	bl	80136ac <uxr_begin_output_nack_buffer_it>
 800cfde:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800cfe2:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800cfe6:	e006      	b.n	800cff6 <read_submessage_list+0x16a>
 800cfe8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cfea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cfec:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800cff0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cff2:	6818      	ldr	r0, [r3, #0]
 800cff4:	47c8      	blx	r9
 800cff6:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800cffa:	aa0f      	add	r2, sp, #60	; 0x3c
 800cffc:	4651      	mov	r1, sl
 800cffe:	4638      	mov	r0, r7
 800d000:	f006 fb56 	bl	80136b0 <uxr_next_reliable_nack_buffer_to_send>
 800d004:	2800      	cmp	r0, #0
 800d006:	d1ef      	bne.n	800cfe8 <read_submessage_list+0x15c>
 800d008:	e749      	b.n	800ce9e <read_submessage_list+0x12>
 800d00a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800d00e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800d012:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d016:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800d01a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800d01e:	4651      	mov	r1, sl
 800d020:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d024:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800d028:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800d02c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800d030:	4628      	mov	r0, r5
 800d032:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800d036:	f001 fbe9 	bl	800e80c <uxr_deserialize_BaseObjectRequest>
 800d03a:	4650      	mov	r0, sl
 800d03c:	a90f      	add	r1, sp, #60	; 0x3c
 800d03e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d042:	f000 fdc7 	bl	800dbd4 <uxr_parse_base_object_request>
 800d046:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800d04a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d04c:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800d050:	9110      	str	r1, [sp, #64]	; 0x40
 800d052:	3f04      	subs	r7, #4
 800d054:	f009 090e 	and.w	r9, r9, #14
 800d058:	b2bf      	uxth	r7, r7
 800d05a:	f1bb 0f00 	cmp.w	fp, #0
 800d05e:	d006      	beq.n	800d06e <read_submessage_list+0x1e2>
 800d060:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	4652      	mov	r2, sl
 800d068:	2300      	movs	r3, #0
 800d06a:	4620      	mov	r0, r4
 800d06c:	47d8      	blx	fp
 800d06e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d070:	b16a      	cbz	r2, 800d08e <read_submessage_list+0x202>
 800d072:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d074:	2100      	movs	r1, #0
 800d076:	3802      	subs	r0, #2
 800d078:	e002      	b.n	800d080 <read_submessage_list+0x1f4>
 800d07a:	3101      	adds	r1, #1
 800d07c:	4291      	cmp	r1, r2
 800d07e:	d006      	beq.n	800d08e <read_submessage_list+0x202>
 800d080:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d084:	4553      	cmp	r3, sl
 800d086:	d1f8      	bne.n	800d07a <read_submessage_list+0x1ee>
 800d088:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d08a:	2200      	movs	r2, #0
 800d08c:	545a      	strb	r2, [r3, r1]
 800d08e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800d092:	9102      	str	r1, [sp, #8]
 800d094:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d096:	9101      	str	r1, [sp, #4]
 800d098:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d09a:	9100      	str	r1, [sp, #0]
 800d09c:	464b      	mov	r3, r9
 800d09e:	463a      	mov	r2, r7
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f7ff fc4a 	bl	800c93c <read_submessage_format>
 800d0a8:	e6f9      	b.n	800ce9e <read_submessage_list+0x12>
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	f7ff fea5 	bl	800cdfc <read_submessage_info>
 800d0b2:	e6f4      	b.n	800ce9e <read_submessage_list+0x12>
 800d0b4:	2a00      	cmp	r2, #0
 800d0b6:	d03e      	beq.n	800d136 <read_submessage_list+0x2aa>
 800d0b8:	a910      	add	r1, sp, #64	; 0x40
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f001 fda2 	bl	800ec04 <uxr_deserialize_STATUS_Payload>
 800d0c0:	a90e      	add	r1, sp, #56	; 0x38
 800d0c2:	aa0d      	add	r2, sp, #52	; 0x34
 800d0c4:	a810      	add	r0, sp, #64	; 0x40
 800d0c6:	f000 fd85 	bl	800dbd4 <uxr_parse_base_object_request>
 800d0ca:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800d0ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d0d0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800d0d4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800d0d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d0da:	f1ba 0f00 	cmp.w	sl, #0
 800d0de:	d006      	beq.n	800d0ee <read_submessage_list+0x262>
 800d0e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	463a      	mov	r2, r7
 800d0e8:	464b      	mov	r3, r9
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	47d0      	blx	sl
 800d0ee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d0f0:	2a00      	cmp	r2, #0
 800d0f2:	f43f aed4 	beq.w	800ce9e <read_submessage_list+0x12>
 800d0f6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	3802      	subs	r0, #2
 800d0fc:	e003      	b.n	800d106 <read_submessage_list+0x27a>
 800d0fe:	3101      	adds	r1, #1
 800d100:	4291      	cmp	r1, r2
 800d102:	f43f aecc 	beq.w	800ce9e <read_submessage_list+0x12>
 800d106:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d10a:	42bb      	cmp	r3, r7
 800d10c:	d1f7      	bne.n	800d0fe <read_submessage_list+0x272>
 800d10e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d110:	f803 9001 	strb.w	r9, [r3, r1]
 800d114:	e6c3      	b.n	800ce9e <read_submessage_list+0x12>
 800d116:	2a00      	cmp	r2, #0
 800d118:	f47f aec1 	bne.w	800ce9e <read_submessage_list+0x12>
 800d11c:	4629      	mov	r1, r5
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 fc9e 	bl	800da60 <uxr_read_create_session_status>
 800d124:	e6bb      	b.n	800ce9e <read_submessage_list+0x12>
 800d126:	4629      	mov	r1, r5
 800d128:	4620      	mov	r0, r4
 800d12a:	f7ff fcf3 	bl	800cb14 <read_submessage_get_info>
 800d12e:	e6b6      	b.n	800ce9e <read_submessage_list+0x12>
 800d130:	b017      	add	sp, #92	; 0x5c
 800d132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d136:	4629      	mov	r1, r5
 800d138:	4620      	mov	r0, r4
 800d13a:	f000 fc9d 	bl	800da78 <uxr_read_delete_session_status>
 800d13e:	e6ae      	b.n	800ce9e <read_submessage_list+0x12>
 800d140:	f000 fef2 	bl	800df28 <uxr_nanos>
 800d144:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d148:	464f      	mov	r7, r9
 800d14a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d14e:	1812      	adds	r2, r2, r0
 800d150:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d152:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d154:	eb47 0101 	adc.w	r1, r7, r1
 800d158:	464f      	mov	r7, r9
 800d15a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d15e:	463b      	mov	r3, r7
 800d160:	4684      	mov	ip, r0
 800d162:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800d166:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d16a:	eb1c 0c00 	adds.w	ip, ip, r0
 800d16e:	464f      	mov	r7, r9
 800d170:	eb43 0307 	adc.w	r3, r3, r7
 800d174:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d178:	eb61 0303 	sbc.w	r3, r1, r3
 800d17c:	0fda      	lsrs	r2, r3, #31
 800d17e:	eb12 020c 	adds.w	r2, r2, ip
 800d182:	f143 0300 	adc.w	r3, r3, #0
 800d186:	0852      	lsrs	r2, r2, #1
 800d188:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d18c:	105b      	asrs	r3, r3, #1
 800d18e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800d192:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800d196:	e6dd      	b.n	800cf54 <read_submessage_list+0xc8>
 800d198:	3b9aca00 	.word	0x3b9aca00

0800d19c <listen_message_reliably>:
 800d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a0:	1e0b      	subs	r3, r1, #0
 800d1a2:	b09d      	sub	sp, #116	; 0x74
 800d1a4:	bfb8      	it	lt
 800d1a6:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800d1aa:	4680      	mov	r8, r0
 800d1ac:	9305      	str	r3, [sp, #20]
 800d1ae:	f000 fea1 	bl	800def4 <uxr_millis>
 800d1b2:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800d1b6:	4681      	mov	r9, r0
 800d1b8:	2a00      	cmp	r2, #0
 800d1ba:	f000 80a1 	beq.w	800d300 <listen_message_reliably+0x164>
 800d1be:	2600      	movs	r6, #0
 800d1c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d1c4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d1c8:	9303      	str	r3, [sp, #12]
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	460f      	mov	r7, r1
 800d1ce:	e00f      	b.n	800d1f0 <listen_message_reliably+0x54>
 800d1d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d1d4:	9903      	ldr	r1, [sp, #12]
 800d1d6:	455a      	cmp	r2, fp
 800d1d8:	f106 0601 	add.w	r6, r6, #1
 800d1dc:	eb73 0101 	sbcs.w	r1, r3, r1
 800d1e0:	b2f0      	uxtb	r0, r6
 800d1e2:	da01      	bge.n	800d1e8 <listen_message_reliably+0x4c>
 800d1e4:	4693      	mov	fp, r2
 800d1e6:	9303      	str	r3, [sp, #12]
 800d1e8:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d1ec:	4283      	cmp	r3, r0
 800d1ee:	d960      	bls.n	800d2b2 <listen_message_reliably+0x116>
 800d1f0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d1f4:	2102      	movs	r1, #2
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f000 fcfe 	bl	800dbf8 <uxr_stream_id>
 800d1fc:	00e4      	lsls	r4, r4, #3
 800d1fe:	f104 0520 	add.w	r5, r4, #32
 800d202:	4445      	add	r5, r8
 800d204:	4601      	mov	r1, r0
 800d206:	463b      	mov	r3, r7
 800d208:	464a      	mov	r2, r9
 800d20a:	4628      	mov	r0, r5
 800d20c:	9109      	str	r1, [sp, #36]	; 0x24
 800d20e:	f006 fa23 	bl	8013658 <uxr_update_output_stream_heartbeat_timestamp>
 800d212:	eb08 0304 	add.w	r3, r8, r4
 800d216:	2800      	cmp	r0, #0
 800d218:	d0da      	beq.n	800d1d0 <listen_message_reliably+0x34>
 800d21a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d21e:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800d222:	9304      	str	r3, [sp, #16]
 800d224:	4640      	mov	r0, r8
 800d226:	f000 fcaf 	bl	800db88 <uxr_session_header_offset>
 800d22a:	3501      	adds	r5, #1
 800d22c:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800d230:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d234:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d238:	2300      	movs	r3, #0
 800d23a:	2211      	movs	r2, #17
 800d23c:	9000      	str	r0, [sp, #0]
 800d23e:	a90c      	add	r1, sp, #48	; 0x30
 800d240:	4650      	mov	r0, sl
 800d242:	f7fc fc4d 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 800d246:	2300      	movs	r3, #0
 800d248:	2205      	movs	r2, #5
 800d24a:	210b      	movs	r1, #11
 800d24c:	4650      	mov	r0, sl
 800d24e:	f000 fe0b 	bl	800de68 <uxr_buffer_submessage_header>
 800d252:	8968      	ldrh	r0, [r5, #10]
 800d254:	2101      	movs	r1, #1
 800d256:	f006 faa1 	bl	801379c <uxr_seq_num_add>
 800d25a:	892b      	ldrh	r3, [r5, #8]
 800d25c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d260:	4602      	mov	r2, r0
 800d262:	9b04      	ldr	r3, [sp, #16]
 800d264:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d268:	a90a      	add	r1, sp, #40	; 0x28
 800d26a:	4650      	mov	r0, sl
 800d26c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d270:	f001 fd80 	bl	800ed74 <uxr_serialize_HEARTBEAT_Payload>
 800d274:	2200      	movs	r2, #0
 800d276:	4611      	mov	r1, r2
 800d278:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d27a:	4640      	mov	r0, r8
 800d27c:	f000 fc2e 	bl	800dadc <uxr_stamp_session_header>
 800d280:	4650      	mov	r0, sl
 800d282:	f7fc fc6b 	bl	8009b5c <ucdr_buffer_length>
 800d286:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800d28a:	4602      	mov	r2, r0
 800d28c:	a90c      	add	r1, sp, #48	; 0x30
 800d28e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d292:	4444      	add	r4, r8
 800d294:	47a8      	blx	r5
 800d296:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800d29a:	9903      	ldr	r1, [sp, #12]
 800d29c:	455a      	cmp	r2, fp
 800d29e:	f106 0601 	add.w	r6, r6, #1
 800d2a2:	eb73 0101 	sbcs.w	r1, r3, r1
 800d2a6:	b2f0      	uxtb	r0, r6
 800d2a8:	db9c      	blt.n	800d1e4 <listen_message_reliably+0x48>
 800d2aa:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d2ae:	4283      	cmp	r3, r0
 800d2b0:	d89e      	bhi.n	800d1f0 <listen_message_reliably+0x54>
 800d2b2:	9a03      	ldr	r2, [sp, #12]
 800d2b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	bf08      	it	eq
 800d2bc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800d2c0:	d01e      	beq.n	800d300 <listen_message_reliably+0x164>
 800d2c2:	ebab 0309 	sub.w	r3, fp, r9
 800d2c6:	9905      	ldr	r1, [sp, #20]
 800d2c8:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	bf08      	it	eq
 800d2d0:	2301      	moveq	r3, #1
 800d2d2:	4299      	cmp	r1, r3
 800d2d4:	bfa8      	it	ge
 800d2d6:	4619      	movge	r1, r3
 800d2d8:	6894      	ldr	r4, [r2, #8]
 800d2da:	6810      	ldr	r0, [r2, #0]
 800d2dc:	4689      	mov	r9, r1
 800d2de:	460b      	mov	r3, r1
 800d2e0:	aa08      	add	r2, sp, #32
 800d2e2:	a907      	add	r1, sp, #28
 800d2e4:	47a0      	blx	r4
 800d2e6:	b968      	cbnz	r0, 800d304 <listen_message_reliably+0x168>
 800d2e8:	9b05      	ldr	r3, [sp, #20]
 800d2ea:	eba3 0309 	sub.w	r3, r3, r9
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	9305      	str	r3, [sp, #20]
 800d2f2:	f73f af5c 	bgt.w	800d1ae <listen_message_reliably+0x12>
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	b01d      	add	sp, #116	; 0x74
 800d2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d300:	9b05      	ldr	r3, [sp, #20]
 800d302:	e7e0      	b.n	800d2c6 <listen_message_reliably+0x12a>
 800d304:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d308:	4604      	mov	r4, r0
 800d30a:	a80c      	add	r0, sp, #48	; 0x30
 800d30c:	f7fc fbfa 	bl	8009b04 <ucdr_init_buffer>
 800d310:	2500      	movs	r5, #0
 800d312:	f10d 031a 	add.w	r3, sp, #26
 800d316:	aa06      	add	r2, sp, #24
 800d318:	a90c      	add	r1, sp, #48	; 0x30
 800d31a:	4640      	mov	r0, r8
 800d31c:	f88d 5018 	strb.w	r5, [sp, #24]
 800d320:	f000 fbf0 	bl	800db04 <uxr_read_session_header>
 800d324:	b918      	cbnz	r0, 800d32e <listen_message_reliably+0x192>
 800d326:	4620      	mov	r0, r4
 800d328:	b01d      	add	sp, #116	; 0x74
 800d32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32e:	4629      	mov	r1, r5
 800d330:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d334:	f000 fc8a 	bl	800dc4c <uxr_stream_id_from_raw>
 800d338:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d33c:	2d01      	cmp	r5, #1
 800d33e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d342:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d346:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d34a:	d04b      	beq.n	800d3e4 <listen_message_reliably+0x248>
 800d34c:	2d02      	cmp	r5, #2
 800d34e:	d00f      	beq.n	800d370 <listen_message_reliably+0x1d4>
 800d350:	2d00      	cmp	r5, #0
 800d352:	d1e8      	bne.n	800d326 <listen_message_reliably+0x18a>
 800d354:	4629      	mov	r1, r5
 800d356:	4628      	mov	r0, r5
 800d358:	f000 fc78 	bl	800dc4c <uxr_stream_id_from_raw>
 800d35c:	a90c      	add	r1, sp, #48	; 0x30
 800d35e:	4602      	mov	r2, r0
 800d360:	4640      	mov	r0, r8
 800d362:	920a      	str	r2, [sp, #40]	; 0x28
 800d364:	f7ff fd92 	bl	800ce8c <read_submessage_list>
 800d368:	4620      	mov	r0, r4
 800d36a:	b01d      	add	sp, #116	; 0x74
 800d36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d370:	4631      	mov	r1, r6
 800d372:	f108 0008 	add.w	r0, r8, #8
 800d376:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d37a:	f000 fd55 	bl	800de28 <uxr_get_input_reliable_stream>
 800d37e:	4607      	mov	r7, r0
 800d380:	b338      	cbz	r0, 800d3d2 <listen_message_reliably+0x236>
 800d382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d384:	9203      	str	r2, [sp, #12]
 800d386:	a80c      	add	r0, sp, #48	; 0x30
 800d388:	f7fc fbec 	bl	8009b64 <ucdr_buffer_remaining>
 800d38c:	4603      	mov	r3, r0
 800d38e:	f10d 0019 	add.w	r0, sp, #25
 800d392:	9000      	str	r0, [sp, #0]
 800d394:	9a03      	ldr	r2, [sp, #12]
 800d396:	4651      	mov	r1, sl
 800d398:	4638      	mov	r0, r7
 800d39a:	f005 fd73 	bl	8012e84 <uxr_receive_reliable_message>
 800d39e:	b1c0      	cbz	r0, 800d3d2 <listen_message_reliably+0x236>
 800d3a0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d3a4:	b393      	cbz	r3, 800d40c <listen_message_reliably+0x270>
 800d3a6:	ad14      	add	r5, sp, #80	; 0x50
 800d3a8:	f04f 0a02 	mov.w	sl, #2
 800d3ac:	e00a      	b.n	800d3c4 <listen_message_reliably+0x228>
 800d3ae:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800d3b2:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800d3b6:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800d3ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3bc:	4629      	mov	r1, r5
 800d3be:	4640      	mov	r0, r8
 800d3c0:	f7ff fd64 	bl	800ce8c <read_submessage_list>
 800d3c4:	2204      	movs	r2, #4
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4638      	mov	r0, r7
 800d3ca:	f005 fddb 	bl	8012f84 <uxr_next_input_reliable_buffer_available>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d1ed      	bne.n	800d3ae <listen_message_reliably+0x212>
 800d3d2:	4640      	mov	r0, r8
 800d3d4:	4632      	mov	r2, r6
 800d3d6:	4649      	mov	r1, r9
 800d3d8:	f7ff fbd2 	bl	800cb80 <write_submessage_acknack.isra.0>
 800d3dc:	4620      	mov	r0, r4
 800d3de:	b01d      	add	sp, #116	; 0x74
 800d3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e4:	4631      	mov	r1, r6
 800d3e6:	f108 0008 	add.w	r0, r8, #8
 800d3ea:	f000 fd13 	bl	800de14 <uxr_get_input_best_effort_stream>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d099      	beq.n	800d326 <listen_message_reliably+0x18a>
 800d3f2:	4651      	mov	r1, sl
 800d3f4:	f005 fcb2 	bl	8012d5c <uxr_receive_best_effort_message>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d094      	beq.n	800d326 <listen_message_reliably+0x18a>
 800d3fc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800d400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d402:	a90c      	add	r1, sp, #48	; 0x30
 800d404:	4640      	mov	r0, r8
 800d406:	f7ff fd41 	bl	800ce8c <read_submessage_list>
 800d40a:	e78c      	b.n	800d326 <listen_message_reliably+0x18a>
 800d40c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800d410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d412:	a90c      	add	r1, sp, #48	; 0x30
 800d414:	4640      	mov	r0, r8
 800d416:	f7ff fd39 	bl	800ce8c <read_submessage_list>
 800d41a:	e7c4      	b.n	800d3a6 <listen_message_reliably+0x20a>

0800d41c <uxr_run_session_timeout>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	4604      	mov	r4, r0
 800d420:	460d      	mov	r5, r1
 800d422:	f000 fd67 	bl	800def4 <uxr_millis>
 800d426:	4606      	mov	r6, r0
 800d428:	4620      	mov	r0, r4
 800d42a:	f7ff fc71 	bl	800cd10 <uxr_flash_output_streams>
 800d42e:	4629      	mov	r1, r5
 800d430:	4620      	mov	r0, r4
 800d432:	f7ff feb3 	bl	800d19c <listen_message_reliably>
 800d436:	f000 fd5d 	bl	800def4 <uxr_millis>
 800d43a:	1b83      	subs	r3, r0, r6
 800d43c:	1ae9      	subs	r1, r5, r3
 800d43e:	2900      	cmp	r1, #0
 800d440:	dcf6      	bgt.n	800d430 <uxr_run_session_timeout+0x14>
 800d442:	f104 0008 	add.w	r0, r4, #8
 800d446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d44a:	f000 bcf7 	b.w	800de3c <uxr_output_streams_confirmed>
 800d44e:	bf00      	nop

0800d450 <uxr_run_session_until_data>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	4604      	mov	r4, r0
 800d454:	460d      	mov	r5, r1
 800d456:	f000 fd4d 	bl	800def4 <uxr_millis>
 800d45a:	4606      	mov	r6, r0
 800d45c:	4620      	mov	r0, r4
 800d45e:	f7ff fc57 	bl	800cd10 <uxr_flash_output_streams>
 800d462:	2300      	movs	r3, #0
 800d464:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800d468:	4629      	mov	r1, r5
 800d46a:	e005      	b.n	800d478 <uxr_run_session_until_data+0x28>
 800d46c:	f000 fd42 	bl	800def4 <uxr_millis>
 800d470:	1b83      	subs	r3, r0, r6
 800d472:	1ae9      	subs	r1, r5, r3
 800d474:	2900      	cmp	r1, #0
 800d476:	dd07      	ble.n	800d488 <uxr_run_session_until_data+0x38>
 800d478:	4620      	mov	r0, r4
 800d47a:	f7ff fe8f 	bl	800d19c <listen_message_reliably>
 800d47e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d482:	2800      	cmp	r0, #0
 800d484:	d0f2      	beq.n	800d46c <uxr_run_session_until_data+0x1c>
 800d486:	bd70      	pop	{r4, r5, r6, pc}
 800d488:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d48c:	bd70      	pop	{r4, r5, r6, pc}
 800d48e:	bf00      	nop

0800d490 <uxr_run_session_until_confirm_delivery>:
 800d490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d494:	4606      	mov	r6, r0
 800d496:	460d      	mov	r5, r1
 800d498:	f000 fd2c 	bl	800def4 <uxr_millis>
 800d49c:	4607      	mov	r7, r0
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f7ff fc36 	bl	800cd10 <uxr_flash_output_streams>
 800d4a4:	2d00      	cmp	r5, #0
 800d4a6:	f106 0808 	add.w	r8, r6, #8
 800d4aa:	bfa8      	it	ge
 800d4ac:	462c      	movge	r4, r5
 800d4ae:	da07      	bge.n	800d4c0 <uxr_run_session_until_confirm_delivery+0x30>
 800d4b0:	e00e      	b.n	800d4d0 <uxr_run_session_until_confirm_delivery+0x40>
 800d4b2:	f7ff fe73 	bl	800d19c <listen_message_reliably>
 800d4b6:	f000 fd1d 	bl	800def4 <uxr_millis>
 800d4ba:	1bc3      	subs	r3, r0, r7
 800d4bc:	1aec      	subs	r4, r5, r3
 800d4be:	d407      	bmi.n	800d4d0 <uxr_run_session_until_confirm_delivery+0x40>
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	f000 fcbb 	bl	800de3c <uxr_output_streams_confirmed>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d0f0      	beq.n	800d4b2 <uxr_run_session_until_confirm_delivery+0x22>
 800d4d0:	4640      	mov	r0, r8
 800d4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d6:	f000 bcb1 	b.w	800de3c <uxr_output_streams_confirmed>
 800d4da:	bf00      	nop

0800d4dc <uxr_run_session_until_all_status>:
 800d4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e0:	9c08      	ldr	r4, [sp, #32]
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	460f      	mov	r7, r1
 800d4e6:	4691      	mov	r9, r2
 800d4e8:	461d      	mov	r5, r3
 800d4ea:	f7ff fc11 	bl	800cd10 <uxr_flash_output_streams>
 800d4ee:	b124      	cbz	r4, 800d4fa <uxr_run_session_until_all_status+0x1e>
 800d4f0:	4622      	mov	r2, r4
 800d4f2:	21ff      	movs	r1, #255	; 0xff
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f007 fd97 	bl	8015028 <memset>
 800d4fa:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800d4fe:	67f4      	str	r4, [r6, #124]	; 0x7c
 800d500:	f000 fcf8 	bl	800def4 <uxr_millis>
 800d504:	3d01      	subs	r5, #1
 800d506:	f1a9 0902 	sub.w	r9, r9, #2
 800d50a:	4680      	mov	r8, r0
 800d50c:	4639      	mov	r1, r7
 800d50e:	4630      	mov	r0, r6
 800d510:	f7ff fe44 	bl	800d19c <listen_message_reliably>
 800d514:	f000 fcee 	bl	800def4 <uxr_millis>
 800d518:	eba0 0008 	sub.w	r0, r0, r8
 800d51c:	1a39      	subs	r1, r7, r0
 800d51e:	b344      	cbz	r4, 800d572 <uxr_run_session_until_all_status+0x96>
 800d520:	4628      	mov	r0, r5
 800d522:	46ac      	mov	ip, r5
 800d524:	2301      	movs	r3, #1
 800d526:	e002      	b.n	800d52e <uxr_run_session_until_all_status+0x52>
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d20d      	bcs.n	800d548 <uxr_run_session_until_all_status+0x6c>
 800d52c:	3301      	adds	r3, #1
 800d52e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d532:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800d536:	d1f7      	bne.n	800d528 <uxr_run_session_until_all_status+0x4c>
 800d538:	42a3      	cmp	r3, r4
 800d53a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d53e:	d213      	bcs.n	800d568 <uxr_run_session_until_all_status+0x8c>
 800d540:	2a00      	cmp	r2, #0
 800d542:	d0f3      	beq.n	800d52c <uxr_run_session_until_all_status+0x50>
 800d544:	2900      	cmp	r1, #0
 800d546:	dce2      	bgt.n	800d50e <uxr_run_session_until_all_status+0x32>
 800d548:	2300      	movs	r3, #0
 800d54a:	67f3      	str	r3, [r6, #124]	; 0x7c
 800d54c:	442c      	add	r4, r5
 800d54e:	e001      	b.n	800d554 <uxr_run_session_until_all_status+0x78>
 800d550:	2b01      	cmp	r3, #1
 800d552:	d812      	bhi.n	800d57a <uxr_run_session_until_all_status+0x9e>
 800d554:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d558:	4284      	cmp	r4, r0
 800d55a:	d1f9      	bne.n	800d550 <uxr_run_session_until_all_status+0x74>
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	bf8c      	ite	hi
 800d560:	2000      	movhi	r0, #0
 800d562:	2001      	movls	r0, #1
 800d564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d568:	2900      	cmp	r1, #0
 800d56a:	dded      	ble.n	800d548 <uxr_run_session_until_all_status+0x6c>
 800d56c:	2a00      	cmp	r2, #0
 800d56e:	d1ce      	bne.n	800d50e <uxr_run_session_until_all_status+0x32>
 800d570:	e7ea      	b.n	800d548 <uxr_run_session_until_all_status+0x6c>
 800d572:	67f4      	str	r4, [r6, #124]	; 0x7c
 800d574:	2001      	movs	r0, #1
 800d576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d57a:	2000      	movs	r0, #0
 800d57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d580 <wait_session_status>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	4604      	mov	r4, r0
 800d586:	b09d      	sub	sp, #116	; 0x74
 800d588:	20ff      	movs	r0, #255	; 0xff
 800d58a:	7160      	strb	r0, [r4, #5]
 800d58c:	9303      	str	r3, [sp, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f000 80b6 	beq.w	800d700 <wait_session_status+0x180>
 800d594:	468a      	mov	sl, r1
 800d596:	4691      	mov	r9, r2
 800d598:	f04f 0b00 	mov.w	fp, #0
 800d59c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d59e:	464a      	mov	r2, r9
 800d5a0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d5a4:	4651      	mov	r1, sl
 800d5a6:	47a8      	blx	r5
 800d5a8:	f000 fca4 	bl	800def4 <uxr_millis>
 800d5ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	e009      	b.n	800d5c8 <wait_session_status+0x48>
 800d5b4:	f000 fc9e 	bl	800def4 <uxr_millis>
 800d5b8:	1b40      	subs	r0, r0, r5
 800d5ba:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	dd40      	ble.n	800d644 <wait_session_status+0xc4>
 800d5c2:	7960      	ldrb	r0, [r4, #5]
 800d5c4:	28ff      	cmp	r0, #255	; 0xff
 800d5c6:	d145      	bne.n	800d654 <wait_session_status+0xd4>
 800d5c8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d5ca:	a908      	add	r1, sp, #32
 800d5cc:	6896      	ldr	r6, [r2, #8]
 800d5ce:	6810      	ldr	r0, [r2, #0]
 800d5d0:	aa09      	add	r2, sp, #36	; 0x24
 800d5d2:	47b0      	blx	r6
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d0ed      	beq.n	800d5b4 <wait_session_status+0x34>
 800d5d8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d5dc:	a80c      	add	r0, sp, #48	; 0x30
 800d5de:	f7fc fa91 	bl	8009b04 <ucdr_init_buffer>
 800d5e2:	2600      	movs	r6, #0
 800d5e4:	f10d 031e 	add.w	r3, sp, #30
 800d5e8:	aa07      	add	r2, sp, #28
 800d5ea:	a90c      	add	r1, sp, #48	; 0x30
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f88d 601c 	strb.w	r6, [sp, #28]
 800d5f2:	f000 fa87 	bl	800db04 <uxr_read_session_header>
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d0dc      	beq.n	800d5b4 <wait_session_status+0x34>
 800d5fa:	4631      	mov	r1, r6
 800d5fc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d600:	f000 fb24 	bl	800dc4c <uxr_stream_id_from_raw>
 800d604:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d608:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d60c:	9302      	str	r3, [sp, #8]
 800d60e:	2f01      	cmp	r7, #1
 800d610:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800d614:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d618:	d05c      	beq.n	800d6d4 <wait_session_status+0x154>
 800d61a:	2f02      	cmp	r7, #2
 800d61c:	d020      	beq.n	800d660 <wait_session_status+0xe0>
 800d61e:	2f00      	cmp	r7, #0
 800d620:	d1c8      	bne.n	800d5b4 <wait_session_status+0x34>
 800d622:	4639      	mov	r1, r7
 800d624:	4638      	mov	r0, r7
 800d626:	f000 fb11 	bl	800dc4c <uxr_stream_id_from_raw>
 800d62a:	a90c      	add	r1, sp, #48	; 0x30
 800d62c:	4602      	mov	r2, r0
 800d62e:	900b      	str	r0, [sp, #44]	; 0x2c
 800d630:	4620      	mov	r0, r4
 800d632:	f7ff fc2b 	bl	800ce8c <read_submessage_list>
 800d636:	f000 fc5d 	bl	800def4 <uxr_millis>
 800d63a:	1b40      	subs	r0, r0, r5
 800d63c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d640:	2b00      	cmp	r3, #0
 800d642:	dcbe      	bgt.n	800d5c2 <wait_session_status+0x42>
 800d644:	9b03      	ldr	r3, [sp, #12]
 800d646:	7960      	ldrb	r0, [r4, #5]
 800d648:	f10b 0b01 	add.w	fp, fp, #1
 800d64c:	455b      	cmp	r3, fp
 800d64e:	d001      	beq.n	800d654 <wait_session_status+0xd4>
 800d650:	28ff      	cmp	r0, #255	; 0xff
 800d652:	d0a3      	beq.n	800d59c <wait_session_status+0x1c>
 800d654:	38ff      	subs	r0, #255	; 0xff
 800d656:	bf18      	it	ne
 800d658:	2001      	movne	r0, #1
 800d65a:	b01d      	add	sp, #116	; 0x74
 800d65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d660:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d664:	9304      	str	r3, [sp, #16]
 800d666:	4631      	mov	r1, r6
 800d668:	f104 0008 	add.w	r0, r4, #8
 800d66c:	f000 fbdc 	bl	800de28 <uxr_get_input_reliable_stream>
 800d670:	4680      	mov	r8, r0
 800d672:	b348      	cbz	r0, 800d6c8 <wait_session_status+0x148>
 800d674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d676:	9205      	str	r2, [sp, #20]
 800d678:	a80c      	add	r0, sp, #48	; 0x30
 800d67a:	f7fc fa73 	bl	8009b64 <ucdr_buffer_remaining>
 800d67e:	4603      	mov	r3, r0
 800d680:	f10d 001d 	add.w	r0, sp, #29
 800d684:	9000      	str	r0, [sp, #0]
 800d686:	9a05      	ldr	r2, [sp, #20]
 800d688:	9902      	ldr	r1, [sp, #8]
 800d68a:	4640      	mov	r0, r8
 800d68c:	f005 fbfa 	bl	8012e84 <uxr_receive_reliable_message>
 800d690:	b1d0      	cbz	r0, 800d6c8 <wait_session_status+0x148>
 800d692:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d03a      	beq.n	800d710 <wait_session_status+0x190>
 800d69a:	9f04      	ldr	r7, [sp, #16]
 800d69c:	e00a      	b.n	800d6b4 <wait_session_status+0x134>
 800d69e:	f04f 0302 	mov.w	r3, #2
 800d6a2:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800d6a6:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800d6aa:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800d6ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6b0:	f7ff fbec 	bl	800ce8c <read_submessage_list>
 800d6b4:	a914      	add	r1, sp, #80	; 0x50
 800d6b6:	2204      	movs	r2, #4
 800d6b8:	4640      	mov	r0, r8
 800d6ba:	f005 fc63 	bl	8012f84 <uxr_next_input_reliable_buffer_available>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	a914      	add	r1, sp, #80	; 0x50
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1ea      	bne.n	800d69e <wait_session_status+0x11e>
 800d6c8:	9904      	ldr	r1, [sp, #16]
 800d6ca:	4632      	mov	r2, r6
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f7ff fa57 	bl	800cb80 <write_submessage_acknack.isra.0>
 800d6d2:	e76f      	b.n	800d5b4 <wait_session_status+0x34>
 800d6d4:	4631      	mov	r1, r6
 800d6d6:	f104 0008 	add.w	r0, r4, #8
 800d6da:	f000 fb9b 	bl	800de14 <uxr_get_input_best_effort_stream>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	f43f af68 	beq.w	800d5b4 <wait_session_status+0x34>
 800d6e4:	9902      	ldr	r1, [sp, #8]
 800d6e6:	f005 fb39 	bl	8012d5c <uxr_receive_best_effort_message>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	f43f af62 	beq.w	800d5b4 <wait_session_status+0x34>
 800d6f0:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d6f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6f6:	a90c      	add	r1, sp, #48	; 0x30
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f7ff fbc7 	bl	800ce8c <read_submessage_list>
 800d6fe:	e759      	b.n	800d5b4 <wait_session_status+0x34>
 800d700:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d702:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d706:	47a0      	blx	r4
 800d708:	2001      	movs	r0, #1
 800d70a:	b01d      	add	sp, #116	; 0x74
 800d70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d710:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d714:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d716:	a90c      	add	r1, sp, #48	; 0x30
 800d718:	4620      	mov	r0, r4
 800d71a:	f7ff fbb7 	bl	800ce8c <read_submessage_list>
 800d71e:	e7bc      	b.n	800d69a <wait_session_status+0x11a>

0800d720 <uxr_delete_session_retries>:
 800d720:	b530      	push	{r4, r5, lr}
 800d722:	b08f      	sub	sp, #60	; 0x3c
 800d724:	4604      	mov	r4, r0
 800d726:	460d      	mov	r5, r1
 800d728:	f000 fa2e 	bl	800db88 <uxr_session_header_offset>
 800d72c:	2300      	movs	r3, #0
 800d72e:	2210      	movs	r2, #16
 800d730:	9000      	str	r0, [sp, #0]
 800d732:	a902      	add	r1, sp, #8
 800d734:	a806      	add	r0, sp, #24
 800d736:	f7fc f9d3 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 800d73a:	a906      	add	r1, sp, #24
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 f973 	bl	800da28 <uxr_buffer_delete_session>
 800d742:	2200      	movs	r2, #0
 800d744:	4611      	mov	r1, r2
 800d746:	9b06      	ldr	r3, [sp, #24]
 800d748:	4620      	mov	r0, r4
 800d74a:	f000 f9c7 	bl	800dadc <uxr_stamp_session_header>
 800d74e:	a806      	add	r0, sp, #24
 800d750:	f7fc fa04 	bl	8009b5c <ucdr_buffer_length>
 800d754:	462b      	mov	r3, r5
 800d756:	4602      	mov	r2, r0
 800d758:	a902      	add	r1, sp, #8
 800d75a:	4620      	mov	r0, r4
 800d75c:	f7ff ff10 	bl	800d580 <wait_session_status>
 800d760:	b118      	cbz	r0, 800d76a <uxr_delete_session_retries+0x4a>
 800d762:	7960      	ldrb	r0, [r4, #5]
 800d764:	fab0 f080 	clz	r0, r0
 800d768:	0940      	lsrs	r0, r0, #5
 800d76a:	b00f      	add	sp, #60	; 0x3c
 800d76c:	bd30      	pop	{r4, r5, pc}
 800d76e:	bf00      	nop

0800d770 <uxr_create_session>:
 800d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d774:	f100 0b08 	add.w	fp, r0, #8
 800d778:	b0ab      	sub	sp, #172	; 0xac
 800d77a:	4604      	mov	r4, r0
 800d77c:	4658      	mov	r0, fp
 800d77e:	f000 fa99 	bl	800dcb4 <uxr_reset_stream_storage>
 800d782:	4620      	mov	r0, r4
 800d784:	f000 fa00 	bl	800db88 <uxr_session_header_offset>
 800d788:	2300      	movs	r3, #0
 800d78a:	9000      	str	r0, [sp, #0]
 800d78c:	221c      	movs	r2, #28
 800d78e:	a90b      	add	r1, sp, #44	; 0x2c
 800d790:	a812      	add	r0, sp, #72	; 0x48
 800d792:	f7fc f9a5 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 800d796:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d798:	8a1a      	ldrh	r2, [r3, #16]
 800d79a:	3a04      	subs	r2, #4
 800d79c:	b292      	uxth	r2, r2
 800d79e:	a912      	add	r1, sp, #72	; 0x48
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f000 f917 	bl	800d9d4 <uxr_buffer_create_session>
 800d7a6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f000 f983 	bl	800dab4 <uxr_stamp_create_session_header>
 800d7ae:	a812      	add	r0, sp, #72	; 0x48
 800d7b0:	f7fc f9d4 	bl	8009b5c <ucdr_buffer_length>
 800d7b4:	23ff      	movs	r3, #255	; 0xff
 800d7b6:	7163      	strb	r3, [r4, #5]
 800d7b8:	230a      	movs	r3, #10
 800d7ba:	46da      	mov	sl, fp
 800d7bc:	9303      	str	r3, [sp, #12]
 800d7be:	4683      	mov	fp, r0
 800d7c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d7c2:	465a      	mov	r2, fp
 800d7c4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d7c8:	a90b      	add	r1, sp, #44	; 0x2c
 800d7ca:	47a8      	blx	r5
 800d7cc:	f000 fb92 	bl	800def4 <uxr_millis>
 800d7d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d7d4:	4605      	mov	r5, r0
 800d7d6:	e009      	b.n	800d7ec <uxr_create_session+0x7c>
 800d7d8:	f000 fb8c 	bl	800def4 <uxr_millis>
 800d7dc:	1b40      	subs	r0, r0, r5
 800d7de:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	7962      	ldrb	r2, [r4, #5]
 800d7e6:	dd38      	ble.n	800d85a <uxr_create_session+0xea>
 800d7e8:	2aff      	cmp	r2, #255	; 0xff
 800d7ea:	d13c      	bne.n	800d866 <uxr_create_session+0xf6>
 800d7ec:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d7ee:	a907      	add	r1, sp, #28
 800d7f0:	6896      	ldr	r6, [r2, #8]
 800d7f2:	6810      	ldr	r0, [r2, #0]
 800d7f4:	aa08      	add	r2, sp, #32
 800d7f6:	47b0      	blx	r6
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d0ed      	beq.n	800d7d8 <uxr_create_session+0x68>
 800d7fc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d800:	a81a      	add	r0, sp, #104	; 0x68
 800d802:	f7fc f97f 	bl	8009b04 <ucdr_init_buffer>
 800d806:	2600      	movs	r6, #0
 800d808:	f10d 031a 	add.w	r3, sp, #26
 800d80c:	aa06      	add	r2, sp, #24
 800d80e:	a91a      	add	r1, sp, #104	; 0x68
 800d810:	4620      	mov	r0, r4
 800d812:	f88d 6018 	strb.w	r6, [sp, #24]
 800d816:	f000 f975 	bl	800db04 <uxr_read_session_header>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d0dc      	beq.n	800d7d8 <uxr_create_session+0x68>
 800d81e:	4631      	mov	r1, r6
 800d820:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d824:	f000 fa12 	bl	800dc4c <uxr_stream_id_from_raw>
 800d828:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d82c:	2e01      	cmp	r6, #1
 800d82e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d832:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d836:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d83a:	d053      	beq.n	800d8e4 <uxr_create_session+0x174>
 800d83c:	2e02      	cmp	r6, #2
 800d83e:	d018      	beq.n	800d872 <uxr_create_session+0x102>
 800d840:	2e00      	cmp	r6, #0
 800d842:	d1c9      	bne.n	800d7d8 <uxr_create_session+0x68>
 800d844:	4631      	mov	r1, r6
 800d846:	4630      	mov	r0, r6
 800d848:	f000 fa00 	bl	800dc4c <uxr_stream_id_from_raw>
 800d84c:	a91a      	add	r1, sp, #104	; 0x68
 800d84e:	4602      	mov	r2, r0
 800d850:	900a      	str	r0, [sp, #40]	; 0x28
 800d852:	4620      	mov	r0, r4
 800d854:	f7ff fb1a 	bl	800ce8c <read_submessage_list>
 800d858:	e7be      	b.n	800d7d8 <uxr_create_session+0x68>
 800d85a:	9b03      	ldr	r3, [sp, #12]
 800d85c:	3b01      	subs	r3, #1
 800d85e:	9303      	str	r3, [sp, #12]
 800d860:	d001      	beq.n	800d866 <uxr_create_session+0xf6>
 800d862:	2aff      	cmp	r2, #255	; 0xff
 800d864:	d0ac      	beq.n	800d7c0 <uxr_create_session+0x50>
 800d866:	2a00      	cmp	r2, #0
 800d868:	d051      	beq.n	800d90e <uxr_create_session+0x19e>
 800d86a:	2000      	movs	r0, #0
 800d86c:	b02b      	add	sp, #172	; 0xac
 800d86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d872:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d876:	9304      	str	r3, [sp, #16]
 800d878:	4639      	mov	r1, r7
 800d87a:	4650      	mov	r0, sl
 800d87c:	f000 fad4 	bl	800de28 <uxr_get_input_reliable_stream>
 800d880:	4680      	mov	r8, r0
 800d882:	b348      	cbz	r0, 800d8d8 <uxr_create_session+0x168>
 800d884:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d886:	9205      	str	r2, [sp, #20]
 800d888:	a81a      	add	r0, sp, #104	; 0x68
 800d88a:	f7fc f96b 	bl	8009b64 <ucdr_buffer_remaining>
 800d88e:	4603      	mov	r3, r0
 800d890:	f10d 0019 	add.w	r0, sp, #25
 800d894:	9000      	str	r0, [sp, #0]
 800d896:	9a05      	ldr	r2, [sp, #20]
 800d898:	4649      	mov	r1, r9
 800d89a:	4640      	mov	r0, r8
 800d89c:	f005 faf2 	bl	8012e84 <uxr_receive_reliable_message>
 800d8a0:	b1d0      	cbz	r0, 800d8d8 <uxr_create_session+0x168>
 800d8a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d038      	beq.n	800d91c <uxr_create_session+0x1ac>
 800d8aa:	9e04      	ldr	r6, [sp, #16]
 800d8ac:	e00a      	b.n	800d8c4 <uxr_create_session+0x154>
 800d8ae:	f04f 0302 	mov.w	r3, #2
 800d8b2:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800d8b6:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800d8ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8c0:	f7ff fae4 	bl	800ce8c <read_submessage_list>
 800d8c4:	a922      	add	r1, sp, #136	; 0x88
 800d8c6:	2204      	movs	r2, #4
 800d8c8:	4640      	mov	r0, r8
 800d8ca:	f005 fb5b 	bl	8012f84 <uxr_next_input_reliable_buffer_available>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	a922      	add	r1, sp, #136	; 0x88
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1ea      	bne.n	800d8ae <uxr_create_session+0x13e>
 800d8d8:	9904      	ldr	r1, [sp, #16]
 800d8da:	463a      	mov	r2, r7
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f7ff f94f 	bl	800cb80 <write_submessage_acknack.isra.0>
 800d8e2:	e779      	b.n	800d7d8 <uxr_create_session+0x68>
 800d8e4:	4639      	mov	r1, r7
 800d8e6:	4650      	mov	r0, sl
 800d8e8:	f000 fa94 	bl	800de14 <uxr_get_input_best_effort_stream>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	f43f af73 	beq.w	800d7d8 <uxr_create_session+0x68>
 800d8f2:	4649      	mov	r1, r9
 800d8f4:	f005 fa32 	bl	8012d5c <uxr_receive_best_effort_message>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	f43f af6d 	beq.w	800d7d8 <uxr_create_session+0x68>
 800d8fe:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d904:	a91a      	add	r1, sp, #104	; 0x68
 800d906:	4620      	mov	r0, r4
 800d908:	f7ff fac0 	bl	800ce8c <read_submessage_list>
 800d90c:	e764      	b.n	800d7d8 <uxr_create_session+0x68>
 800d90e:	4650      	mov	r0, sl
 800d910:	f000 f9d0 	bl	800dcb4 <uxr_reset_stream_storage>
 800d914:	2001      	movs	r0, #1
 800d916:	b02b      	add	sp, #172	; 0xac
 800d918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91c:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d922:	a91a      	add	r1, sp, #104	; 0x68
 800d924:	4620      	mov	r0, r4
 800d926:	f7ff fab1 	bl	800ce8c <read_submessage_list>
 800d92a:	e7be      	b.n	800d8aa <uxr_create_session+0x13a>

0800d92c <uxr_prepare_stream_to_write_submessage>:
 800d92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d930:	b082      	sub	sp, #8
 800d932:	4682      	mov	sl, r0
 800d934:	4610      	mov	r0, r2
 800d936:	4615      	mov	r5, r2
 800d938:	461e      	mov	r6, r3
 800d93a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800d93e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800d942:	9101      	str	r1, [sp, #4]
 800d944:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d948:	f000 face 	bl	800dee8 <uxr_submessage_padding>
 800d94c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d950:	f105 0904 	add.w	r9, r5, #4
 800d954:	2b01      	cmp	r3, #1
 800d956:	4481      	add	r9, r0
 800d958:	d01d      	beq.n	800d996 <uxr_prepare_stream_to_write_submessage+0x6a>
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d116      	bne.n	800d98c <uxr_prepare_stream_to_write_submessage+0x60>
 800d95e:	4621      	mov	r1, r4
 800d960:	f10a 0008 	add.w	r0, sl, #8
 800d964:	f000 fa4c 	bl	800de00 <uxr_get_output_reliable_stream>
 800d968:	4604      	mov	r4, r0
 800d96a:	b158      	cbz	r0, 800d984 <uxr_prepare_stream_to_write_submessage+0x58>
 800d96c:	4649      	mov	r1, r9
 800d96e:	4632      	mov	r2, r6
 800d970:	f005 fcc4 	bl	80132fc <uxr_prepare_reliable_buffer_to_write>
 800d974:	4604      	mov	r4, r0
 800d976:	b12c      	cbz	r4, 800d984 <uxr_prepare_stream_to_write_submessage+0x58>
 800d978:	4643      	mov	r3, r8
 800d97a:	b2aa      	uxth	r2, r5
 800d97c:	4639      	mov	r1, r7
 800d97e:	4630      	mov	r0, r6
 800d980:	f000 fa72 	bl	800de68 <uxr_buffer_submessage_header>
 800d984:	4620      	mov	r0, r4
 800d986:	b002      	add	sp, #8
 800d988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d98c:	2400      	movs	r4, #0
 800d98e:	4620      	mov	r0, r4
 800d990:	b002      	add	sp, #8
 800d992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d996:	4621      	mov	r1, r4
 800d998:	f10a 0008 	add.w	r0, sl, #8
 800d99c:	f000 fa28 	bl	800ddf0 <uxr_get_output_best_effort_stream>
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d0ee      	beq.n	800d984 <uxr_prepare_stream_to_write_submessage+0x58>
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	4632      	mov	r2, r6
 800d9aa:	f005 fbd7 	bl	801315c <uxr_prepare_best_effort_buffer_to_write>
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	e7e1      	b.n	800d976 <uxr_prepare_stream_to_write_submessage+0x4a>
 800d9b2:	bf00      	nop

0800d9b4 <uxr_init_session_info>:
 800d9b4:	0e13      	lsrs	r3, r2, #24
 800d9b6:	7043      	strb	r3, [r0, #1]
 800d9b8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d9bc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d9c0:	7001      	strb	r1, [r0, #0]
 800d9c2:	70c3      	strb	r3, [r0, #3]
 800d9c4:	2109      	movs	r1, #9
 800d9c6:	23ff      	movs	r3, #255	; 0xff
 800d9c8:	f880 c002 	strb.w	ip, [r0, #2]
 800d9cc:	7102      	strb	r2, [r0, #4]
 800d9ce:	80c1      	strh	r1, [r0, #6]
 800d9d0:	7143      	strb	r3, [r0, #5]
 800d9d2:	4770      	bx	lr

0800d9d4 <uxr_buffer_create_session>:
 800d9d4:	b530      	push	{r4, r5, lr}
 800d9d6:	b089      	sub	sp, #36	; 0x24
 800d9d8:	2300      	movs	r3, #0
 800d9da:	4d12      	ldr	r5, [pc, #72]	; (800da24 <uxr_buffer_create_session+0x50>)
 800d9dc:	9307      	str	r3, [sp, #28]
 800d9de:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	9301      	str	r3, [sp, #4]
 800d9e6:	80c2      	strh	r2, [r0, #6]
 800d9e8:	f88d 2004 	strb.w	r2, [sp, #4]
 800d9ec:	682a      	ldr	r2, [r5, #0]
 800d9ee:	9200      	str	r2, [sp, #0]
 800d9f0:	88aa      	ldrh	r2, [r5, #4]
 800d9f2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d9f6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800d9fa:	9202      	str	r2, [sp, #8]
 800d9fc:	460c      	mov	r4, r1
 800d9fe:	7802      	ldrb	r2, [r0, #0]
 800da00:	9303      	str	r3, [sp, #12]
 800da02:	4619      	mov	r1, r3
 800da04:	f88d 200c 	strb.w	r2, [sp, #12]
 800da08:	4620      	mov	r0, r4
 800da0a:	2210      	movs	r2, #16
 800da0c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800da10:	9306      	str	r3, [sp, #24]
 800da12:	f000 fa29 	bl	800de68 <uxr_buffer_submessage_header>
 800da16:	4669      	mov	r1, sp
 800da18:	4620      	mov	r0, r4
 800da1a:	f001 f80d 	bl	800ea38 <uxr_serialize_CREATE_CLIENT_Payload>
 800da1e:	b009      	add	sp, #36	; 0x24
 800da20:	bd30      	pop	{r4, r5, pc}
 800da22:	bf00      	nop
 800da24:	08015ff4 	.word	0x08015ff4

0800da28 <uxr_buffer_delete_session>:
 800da28:	b510      	push	{r4, lr}
 800da2a:	4b0c      	ldr	r3, [pc, #48]	; (800da5c <uxr_buffer_delete_session+0x34>)
 800da2c:	b082      	sub	sp, #8
 800da2e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800da32:	f8ad c006 	strh.w	ip, [sp, #6]
 800da36:	460c      	mov	r4, r1
 800da38:	2202      	movs	r2, #2
 800da3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da3e:	80c2      	strh	r2, [r0, #6]
 800da40:	f8ad 3004 	strh.w	r3, [sp, #4]
 800da44:	2204      	movs	r2, #4
 800da46:	2300      	movs	r3, #0
 800da48:	2103      	movs	r1, #3
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 fa0c 	bl	800de68 <uxr_buffer_submessage_header>
 800da50:	a901      	add	r1, sp, #4
 800da52:	4620      	mov	r0, r4
 800da54:	f001 f896 	bl	800eb84 <uxr_serialize_DELETE_Payload>
 800da58:	b002      	add	sp, #8
 800da5a:	bd10      	pop	{r4, pc}
 800da5c:	08015ff4 	.word	0x08015ff4

0800da60 <uxr_read_create_session_status>:
 800da60:	b510      	push	{r4, lr}
 800da62:	b088      	sub	sp, #32
 800da64:	4604      	mov	r4, r0
 800da66:	4608      	mov	r0, r1
 800da68:	a901      	add	r1, sp, #4
 800da6a:	f001 f89b 	bl	800eba4 <uxr_deserialize_STATUS_AGENT_Payload>
 800da6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da72:	7163      	strb	r3, [r4, #5]
 800da74:	b008      	add	sp, #32
 800da76:	bd10      	pop	{r4, pc}

0800da78 <uxr_read_delete_session_status>:
 800da78:	b510      	push	{r4, lr}
 800da7a:	4604      	mov	r4, r0
 800da7c:	b084      	sub	sp, #16
 800da7e:	4608      	mov	r0, r1
 800da80:	a902      	add	r1, sp, #8
 800da82:	f001 f8bf 	bl	800ec04 <uxr_deserialize_STATUS_Payload>
 800da86:	88e3      	ldrh	r3, [r4, #6]
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d001      	beq.n	800da90 <uxr_read_delete_session_status+0x18>
 800da8c:	b004      	add	sp, #16
 800da8e:	bd10      	pop	{r4, pc}
 800da90:	f10d 000a 	add.w	r0, sp, #10
 800da94:	f7fe feca 	bl	800c82c <uxr_object_id_from_raw>
 800da98:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800da9c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800daa0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	bf04      	itt	eq
 800daaa:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800daae:	7163      	strbeq	r3, [r4, #5]
 800dab0:	b004      	add	sp, #16
 800dab2:	bd10      	pop	{r4, pc}

0800dab4 <uxr_stamp_create_session_header>:
 800dab4:	b510      	push	{r4, lr}
 800dab6:	2208      	movs	r2, #8
 800dab8:	b08a      	sub	sp, #40	; 0x28
 800daba:	4604      	mov	r4, r0
 800dabc:	eb0d 0002 	add.w	r0, sp, r2
 800dac0:	f7fc f820 	bl	8009b04 <ucdr_init_buffer>
 800dac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac8:	9400      	str	r4, [sp, #0]
 800daca:	2300      	movs	r3, #0
 800dacc:	461a      	mov	r2, r3
 800dace:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800dad2:	a802      	add	r0, sp, #8
 800dad4:	f000 fa3e 	bl	800df54 <uxr_serialize_message_header>
 800dad8:	b00a      	add	sp, #40	; 0x28
 800dada:	bd10      	pop	{r4, pc}

0800dadc <uxr_stamp_session_header>:
 800dadc:	b530      	push	{r4, r5, lr}
 800dade:	b08d      	sub	sp, #52	; 0x34
 800dae0:	4604      	mov	r4, r0
 800dae2:	460d      	mov	r5, r1
 800dae4:	9203      	str	r2, [sp, #12]
 800dae6:	4619      	mov	r1, r3
 800dae8:	a804      	add	r0, sp, #16
 800daea:	2208      	movs	r2, #8
 800daec:	f7fc f80a 	bl	8009b04 <ucdr_init_buffer>
 800daf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daf4:	9b03      	ldr	r3, [sp, #12]
 800daf6:	9400      	str	r4, [sp, #0]
 800daf8:	462a      	mov	r2, r5
 800dafa:	a804      	add	r0, sp, #16
 800dafc:	f000 fa2a 	bl	800df54 <uxr_serialize_message_header>
 800db00:	b00d      	add	sp, #52	; 0x34
 800db02:	bd30      	pop	{r4, r5, pc}

0800db04 <uxr_read_session_header>:
 800db04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db08:	4607      	mov	r7, r0
 800db0a:	b084      	sub	sp, #16
 800db0c:	4608      	mov	r0, r1
 800db0e:	460c      	mov	r4, r1
 800db10:	4615      	mov	r5, r2
 800db12:	461e      	mov	r6, r3
 800db14:	f7fc f826 	bl	8009b64 <ucdr_buffer_remaining>
 800db18:	2808      	cmp	r0, #8
 800db1a:	d803      	bhi.n	800db24 <uxr_read_session_header+0x20>
 800db1c:	2000      	movs	r0, #0
 800db1e:	b004      	add	sp, #16
 800db20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db24:	f10d 080c 	add.w	r8, sp, #12
 800db28:	4633      	mov	r3, r6
 800db2a:	462a      	mov	r2, r5
 800db2c:	f8cd 8000 	str.w	r8, [sp]
 800db30:	4620      	mov	r0, r4
 800db32:	f10d 010b 	add.w	r1, sp, #11
 800db36:	f000 fa2b 	bl	800df90 <uxr_deserialize_message_header>
 800db3a:	783a      	ldrb	r2, [r7, #0]
 800db3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800db40:	4293      	cmp	r3, r2
 800db42:	d1eb      	bne.n	800db1c <uxr_read_session_header+0x18>
 800db44:	061b      	lsls	r3, r3, #24
 800db46:	d41c      	bmi.n	800db82 <uxr_read_session_header+0x7e>
 800db48:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800db4c:	787b      	ldrb	r3, [r7, #1]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d003      	beq.n	800db5a <uxr_read_session_header+0x56>
 800db52:	2001      	movs	r0, #1
 800db54:	f080 0001 	eor.w	r0, r0, #1
 800db58:	e7e1      	b.n	800db1e <uxr_read_session_header+0x1a>
 800db5a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800db5e:	78bb      	ldrb	r3, [r7, #2]
 800db60:	429a      	cmp	r2, r3
 800db62:	f107 0102 	add.w	r1, r7, #2
 800db66:	d1f4      	bne.n	800db52 <uxr_read_session_header+0x4e>
 800db68:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800db6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db70:	429a      	cmp	r2, r3
 800db72:	d1ee      	bne.n	800db52 <uxr_read_session_header+0x4e>
 800db74:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800db78:	784b      	ldrb	r3, [r1, #1]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d1e9      	bne.n	800db52 <uxr_read_session_header+0x4e>
 800db7e:	2000      	movs	r0, #0
 800db80:	e7e8      	b.n	800db54 <uxr_read_session_header+0x50>
 800db82:	2001      	movs	r0, #1
 800db84:	e7cb      	b.n	800db1e <uxr_read_session_header+0x1a>
 800db86:	bf00      	nop

0800db88 <uxr_session_header_offset>:
 800db88:	f990 3000 	ldrsb.w	r3, [r0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	bfac      	ite	ge
 800db90:	2008      	movge	r0, #8
 800db92:	2004      	movlt	r0, #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop

0800db98 <uxr_init_base_object_request>:
 800db98:	b510      	push	{r4, lr}
 800db9a:	88c3      	ldrh	r3, [r0, #6]
 800db9c:	b082      	sub	sp, #8
 800db9e:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800dba2:	9101      	str	r1, [sp, #4]
 800dba4:	f1a3 010a 	sub.w	r1, r3, #10
 800dba8:	b289      	uxth	r1, r1
 800dbaa:	42a1      	cmp	r1, r4
 800dbac:	d80e      	bhi.n	800dbcc <uxr_init_base_object_request+0x34>
 800dbae:	3301      	adds	r3, #1
 800dbb0:	b29c      	uxth	r4, r3
 800dbb2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	80c4      	strh	r4, [r0, #6]
 800dbba:	9801      	ldr	r0, [sp, #4]
 800dbbc:	7011      	strb	r1, [r2, #0]
 800dbbe:	7053      	strb	r3, [r2, #1]
 800dbc0:	1c91      	adds	r1, r2, #2
 800dbc2:	f7fe fe47 	bl	800c854 <uxr_object_id_to_raw>
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	b002      	add	sp, #8
 800dbca:	bd10      	pop	{r4, pc}
 800dbcc:	230a      	movs	r3, #10
 800dbce:	2100      	movs	r1, #0
 800dbd0:	461c      	mov	r4, r3
 800dbd2:	e7f1      	b.n	800dbb8 <uxr_init_base_object_request+0x20>

0800dbd4 <uxr_parse_base_object_request>:
 800dbd4:	b570      	push	{r4, r5, r6, lr}
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	3002      	adds	r0, #2
 800dbda:	460d      	mov	r5, r1
 800dbdc:	4616      	mov	r6, r2
 800dbde:	f7fe fe25 	bl	800c82c <uxr_object_id_from_raw>
 800dbe2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800dbe6:	8028      	strh	r0, [r5, #0]
 800dbe8:	806b      	strh	r3, [r5, #2]
 800dbea:	7822      	ldrb	r2, [r4, #0]
 800dbec:	7863      	ldrb	r3, [r4, #1]
 800dbee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dbf2:	8033      	strh	r3, [r6, #0]
 800dbf4:	bd70      	pop	{r4, r5, r6, pc}
 800dbf6:	bf00      	nop

0800dbf8 <uxr_stream_id>:
 800dbf8:	2901      	cmp	r1, #1
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	d01d      	beq.n	800dc3a <uxr_stream_id+0x42>
 800dbfe:	2902      	cmp	r1, #2
 800dc00:	f04f 0c00 	mov.w	ip, #0
 800dc04:	d01e      	beq.n	800dc44 <uxr_stream_id+0x4c>
 800dc06:	2300      	movs	r3, #0
 800dc08:	f36c 0307 	bfi	r3, ip, #0, #8
 800dc0c:	f360 230f 	bfi	r3, r0, #8, #8
 800dc10:	f361 4317 	bfi	r3, r1, #16, #8
 800dc14:	f362 631f 	bfi	r3, r2, #24, #8
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	f362 0007 	bfi	r0, r2, #0, #8
 800dc20:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dc24:	f362 200f 	bfi	r0, r2, #8, #8
 800dc28:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dc2c:	f362 4017 	bfi	r0, r2, #16, #8
 800dc30:	0e1b      	lsrs	r3, r3, #24
 800dc32:	f363 601f 	bfi	r0, r3, #24, #8
 800dc36:	b002      	add	sp, #8
 800dc38:	4770      	bx	lr
 800dc3a:	f100 0c01 	add.w	ip, r0, #1
 800dc3e:	fa5f fc8c 	uxtb.w	ip, ip
 800dc42:	e7e0      	b.n	800dc06 <uxr_stream_id+0xe>
 800dc44:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800dc48:	e7dd      	b.n	800dc06 <uxr_stream_id+0xe>
 800dc4a:	bf00      	nop

0800dc4c <uxr_stream_id_from_raw>:
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	b130      	cbz	r0, 800dc5e <uxr_stream_id_from_raw+0x12>
 800dc50:	0603      	lsls	r3, r0, #24
 800dc52:	d420      	bmi.n	800dc96 <uxr_stream_id_from_raw+0x4a>
 800dc54:	1e42      	subs	r2, r0, #1
 800dc56:	b2d2      	uxtb	r2, r2
 800dc58:	f04f 0c01 	mov.w	ip, #1
 800dc5c:	e001      	b.n	800dc62 <uxr_stream_id_from_raw+0x16>
 800dc5e:	4684      	mov	ip, r0
 800dc60:	4602      	mov	r2, r0
 800dc62:	2300      	movs	r3, #0
 800dc64:	f360 0307 	bfi	r3, r0, #0, #8
 800dc68:	f362 230f 	bfi	r3, r2, #8, #8
 800dc6c:	f36c 4317 	bfi	r3, ip, #16, #8
 800dc70:	f361 631f 	bfi	r3, r1, #24, #8
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	2000      	movs	r0, #0
 800dc78:	f362 0007 	bfi	r0, r2, #0, #8
 800dc7c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dc80:	f362 200f 	bfi	r0, r2, #8, #8
 800dc84:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dc88:	f362 4017 	bfi	r0, r2, #16, #8
 800dc8c:	0e1b      	lsrs	r3, r3, #24
 800dc8e:	f363 601f 	bfi	r0, r3, #24, #8
 800dc92:	b002      	add	sp, #8
 800dc94:	4770      	bx	lr
 800dc96:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800dc9a:	f04f 0c02 	mov.w	ip, #2
 800dc9e:	e7e0      	b.n	800dc62 <uxr_stream_id_from_raw+0x16>

0800dca0 <uxr_init_stream_storage>:
 800dca0:	2300      	movs	r3, #0
 800dca2:	7403      	strb	r3, [r0, #16]
 800dca4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800dca8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800dcac:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop

0800dcb4 <uxr_reset_stream_storage>:
 800dcb4:	b570      	push	{r4, r5, r6, lr}
 800dcb6:	7c03      	ldrb	r3, [r0, #16]
 800dcb8:	4604      	mov	r4, r0
 800dcba:	b153      	cbz	r3, 800dcd2 <uxr_reset_stream_storage+0x1e>
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	2500      	movs	r5, #0
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f005 fa45 	bl	8013150 <uxr_reset_output_best_effort_stream>
 800dcc6:	7c23      	ldrb	r3, [r4, #16]
 800dcc8:	3501      	adds	r5, #1
 800dcca:	42ab      	cmp	r3, r5
 800dccc:	f106 0610 	add.w	r6, r6, #16
 800dcd0:	d8f6      	bhi.n	800dcc0 <uxr_reset_stream_storage+0xc>
 800dcd2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dcd6:	b163      	cbz	r3, 800dcf2 <uxr_reset_stream_storage+0x3e>
 800dcd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dcdc:	2500      	movs	r5, #0
 800dcde:	4630      	mov	r0, r6
 800dce0:	f005 f838 	bl	8012d54 <uxr_reset_input_best_effort_stream>
 800dce4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dce8:	3501      	adds	r5, #1
 800dcea:	42ab      	cmp	r3, r5
 800dcec:	f106 0602 	add.w	r6, r6, #2
 800dcf0:	d8f5      	bhi.n	800dcde <uxr_reset_stream_storage+0x2a>
 800dcf2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dcf6:	b163      	cbz	r3, 800dd12 <uxr_reset_stream_storage+0x5e>
 800dcf8:	f104 0618 	add.w	r6, r4, #24
 800dcfc:	2500      	movs	r5, #0
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f005 fad2 	bl	80132a8 <uxr_reset_output_reliable_stream>
 800dd04:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dd08:	3501      	adds	r5, #1
 800dd0a:	42ab      	cmp	r3, r5
 800dd0c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800dd10:	d8f5      	bhi.n	800dcfe <uxr_reset_stream_storage+0x4a>
 800dd12:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800dd16:	b163      	cbz	r3, 800dd32 <uxr_reset_stream_storage+0x7e>
 800dd18:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800dd1c:	2500      	movs	r5, #0
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f005 f88c 	bl	8012e3c <uxr_reset_input_reliable_stream>
 800dd24:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800dd28:	3501      	adds	r5, #1
 800dd2a:	42ab      	cmp	r3, r5
 800dd2c:	f106 0618 	add.w	r6, r6, #24
 800dd30:	d8f5      	bhi.n	800dd1e <uxr_reset_stream_storage+0x6a>
 800dd32:	bd70      	pop	{r4, r5, r6, pc}

0800dd34 <uxr_add_output_best_effort_buffer>:
 800dd34:	b510      	push	{r4, lr}
 800dd36:	7c04      	ldrb	r4, [r0, #16]
 800dd38:	f104 0c01 	add.w	ip, r4, #1
 800dd3c:	b082      	sub	sp, #8
 800dd3e:	f880 c010 	strb.w	ip, [r0, #16]
 800dd42:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800dd46:	f005 f9f9 	bl	801313c <uxr_init_output_best_effort_stream>
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	4620      	mov	r0, r4
 800dd50:	b002      	add	sp, #8
 800dd52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd56:	f7ff bf4f 	b.w	800dbf8 <uxr_stream_id>
 800dd5a:	bf00      	nop

0800dd5c <uxr_add_output_reliable_buffer>:
 800dd5c:	b510      	push	{r4, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	4684      	mov	ip, r0
 800dd62:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dd66:	9000      	str	r0, [sp, #0]
 800dd68:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800dd6c:	2028      	movs	r0, #40	; 0x28
 800dd6e:	fb00 c004 	mla	r0, r0, r4, ip
 800dd72:	f104 0e01 	add.w	lr, r4, #1
 800dd76:	3018      	adds	r0, #24
 800dd78:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800dd7c:	f005 fa5c 	bl	8013238 <uxr_init_output_reliable_stream>
 800dd80:	2201      	movs	r2, #1
 800dd82:	2102      	movs	r1, #2
 800dd84:	4620      	mov	r0, r4
 800dd86:	b004      	add	sp, #16
 800dd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd8c:	f7ff bf34 	b.w	800dbf8 <uxr_stream_id>

0800dd90 <uxr_add_input_best_effort_buffer>:
 800dd90:	b510      	push	{r4, lr}
 800dd92:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800dd96:	4603      	mov	r3, r0
 800dd98:	1c62      	adds	r2, r4, #1
 800dd9a:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800dd9e:	b082      	sub	sp, #8
 800dda0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800dda4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dda8:	f004 ffd0 	bl	8012d4c <uxr_init_input_best_effort_stream>
 800ddac:	2200      	movs	r2, #0
 800ddae:	2101      	movs	r1, #1
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	b002      	add	sp, #8
 800ddb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddb8:	f7ff bf1e 	b.w	800dbf8 <uxr_stream_id>

0800ddbc <uxr_add_input_reliable_buffer>:
 800ddbc:	b510      	push	{r4, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	4684      	mov	ip, r0
 800ddc2:	9806      	ldr	r0, [sp, #24]
 800ddc4:	9000      	str	r0, [sp, #0]
 800ddc6:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800ddca:	2018      	movs	r0, #24
 800ddcc:	fb00 c004 	mla	r0, r0, r4, ip
 800ddd0:	f104 0e01 	add.w	lr, r4, #1
 800ddd4:	3048      	adds	r0, #72	; 0x48
 800ddd6:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800ddda:	f005 f803 	bl	8012de4 <uxr_init_input_reliable_stream>
 800ddde:	2200      	movs	r2, #0
 800dde0:	2102      	movs	r1, #2
 800dde2:	4620      	mov	r0, r4
 800dde4:	b004      	add	sp, #16
 800dde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddea:	f7ff bf05 	b.w	800dbf8 <uxr_stream_id>
 800ddee:	bf00      	nop

0800ddf0 <uxr_get_output_best_effort_stream>:
 800ddf0:	7c03      	ldrb	r3, [r0, #16]
 800ddf2:	428b      	cmp	r3, r1
 800ddf4:	bf8c      	ite	hi
 800ddf6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ddfa:	2000      	movls	r0, #0
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop

0800de00 <uxr_get_output_reliable_stream>:
 800de00:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800de04:	428b      	cmp	r3, r1
 800de06:	bf83      	ittte	hi
 800de08:	2328      	movhi	r3, #40	; 0x28
 800de0a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800de0e:	3018      	addhi	r0, #24
 800de10:	2000      	movls	r0, #0
 800de12:	4770      	bx	lr

0800de14 <uxr_get_input_best_effort_stream>:
 800de14:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800de18:	428b      	cmp	r3, r1
 800de1a:	bf86      	itte	hi
 800de1c:	3121      	addhi	r1, #33	; 0x21
 800de1e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800de22:	2000      	movls	r0, #0
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop

0800de28 <uxr_get_input_reliable_stream>:
 800de28:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800de2c:	428b      	cmp	r3, r1
 800de2e:	bf83      	ittte	hi
 800de30:	2318      	movhi	r3, #24
 800de32:	fb03 0001 	mlahi	r0, r3, r1, r0
 800de36:	3048      	addhi	r0, #72	; 0x48
 800de38:	2000      	movls	r0, #0
 800de3a:	4770      	bx	lr

0800de3c <uxr_output_streams_confirmed>:
 800de3c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800de40:	b183      	cbz	r3, 800de64 <uxr_output_streams_confirmed+0x28>
 800de42:	b570      	push	{r4, r5, r6, lr}
 800de44:	4606      	mov	r6, r0
 800de46:	f100 0518 	add.w	r5, r0, #24
 800de4a:	2400      	movs	r4, #0
 800de4c:	e001      	b.n	800de52 <uxr_output_streams_confirmed+0x16>
 800de4e:	3528      	adds	r5, #40	; 0x28
 800de50:	b138      	cbz	r0, 800de62 <uxr_output_streams_confirmed+0x26>
 800de52:	4628      	mov	r0, r5
 800de54:	f005 fc98 	bl	8013788 <uxr_is_output_up_to_date>
 800de58:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800de5c:	3401      	adds	r4, #1
 800de5e:	42a3      	cmp	r3, r4
 800de60:	d8f5      	bhi.n	800de4e <uxr_output_streams_confirmed+0x12>
 800de62:	bd70      	pop	{r4, r5, r6, pc}
 800de64:	2001      	movs	r0, #1
 800de66:	4770      	bx	lr

0800de68 <uxr_buffer_submessage_header>:
 800de68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6a:	4604      	mov	r4, r0
 800de6c:	460e      	mov	r6, r1
 800de6e:	2104      	movs	r1, #4
 800de70:	4615      	mov	r5, r2
 800de72:	461f      	mov	r7, r3
 800de74:	f7fb fe60 	bl	8009b38 <ucdr_align_to>
 800de78:	2301      	movs	r3, #1
 800de7a:	ea47 0203 	orr.w	r2, r7, r3
 800de7e:	4631      	mov	r1, r6
 800de80:	7523      	strb	r3, [r4, #20]
 800de82:	4620      	mov	r0, r4
 800de84:	462b      	mov	r3, r5
 800de86:	f000 f8a3 	bl	800dfd0 <uxr_serialize_submessage_header>
 800de8a:	4620      	mov	r0, r4
 800de8c:	f7fb fe6a 	bl	8009b64 <ucdr_buffer_remaining>
 800de90:	42a8      	cmp	r0, r5
 800de92:	bf34      	ite	cc
 800de94:	2000      	movcc	r0, #0
 800de96:	2001      	movcs	r0, #1
 800de98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de9a:	bf00      	nop

0800de9c <uxr_read_submessage_header>:
 800de9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	4604      	mov	r4, r0
 800dea2:	460d      	mov	r5, r1
 800dea4:	2104      	movs	r1, #4
 800dea6:	4616      	mov	r6, r2
 800dea8:	4698      	mov	r8, r3
 800deaa:	f7fb fe45 	bl	8009b38 <ucdr_align_to>
 800deae:	4620      	mov	r0, r4
 800deb0:	f7fb fe58 	bl	8009b64 <ucdr_buffer_remaining>
 800deb4:	2803      	cmp	r0, #3
 800deb6:	bf8c      	ite	hi
 800deb8:	2701      	movhi	r7, #1
 800deba:	2700      	movls	r7, #0
 800debc:	d802      	bhi.n	800dec4 <uxr_read_submessage_header+0x28>
 800debe:	4638      	mov	r0, r7
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec4:	4633      	mov	r3, r6
 800dec6:	4642      	mov	r2, r8
 800dec8:	4620      	mov	r0, r4
 800deca:	4629      	mov	r1, r5
 800decc:	f000 f894 	bl	800dff8 <uxr_deserialize_submessage_header>
 800ded0:	f898 3000 	ldrb.w	r3, [r8]
 800ded4:	f003 0201 	and.w	r2, r3, #1
 800ded8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800dedc:	f888 3000 	strb.w	r3, [r8]
 800dee0:	7522      	strb	r2, [r4, #20]
 800dee2:	4638      	mov	r0, r7
 800dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dee8 <uxr_submessage_padding>:
 800dee8:	f010 0003 	ands.w	r0, r0, #3
 800deec:	bf18      	it	ne
 800deee:	f1c0 0004 	rsbne	r0, r0, #4
 800def2:	4770      	bx	lr

0800def4 <uxr_millis>:
 800def4:	b510      	push	{r4, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	4669      	mov	r1, sp
 800defa:	2001      	movs	r0, #1
 800defc:	f7f3 fdd8 	bl	8001ab0 <clock_gettime>
 800df00:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800df04:	4906      	ldr	r1, [pc, #24]	; (800df20 <uxr_millis+0x2c>)
 800df06:	fba0 0301 	umull	r0, r3, r0, r1
 800df0a:	1900      	adds	r0, r0, r4
 800df0c:	fb01 3102 	mla	r1, r1, r2, r3
 800df10:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800df14:	4a03      	ldr	r2, [pc, #12]	; (800df24 <uxr_millis+0x30>)
 800df16:	2300      	movs	r3, #0
 800df18:	f7f2 fd58 	bl	80009cc <__aeabi_ldivmod>
 800df1c:	b004      	add	sp, #16
 800df1e:	bd10      	pop	{r4, pc}
 800df20:	3b9aca00 	.word	0x3b9aca00
 800df24:	000f4240 	.word	0x000f4240

0800df28 <uxr_nanos>:
 800df28:	b510      	push	{r4, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	4669      	mov	r1, sp
 800df2e:	2001      	movs	r0, #1
 800df30:	f7f3 fdbe 	bl	8001ab0 <clock_gettime>
 800df34:	4a06      	ldr	r2, [pc, #24]	; (800df50 <uxr_nanos+0x28>)
 800df36:	9800      	ldr	r0, [sp, #0]
 800df38:	9902      	ldr	r1, [sp, #8]
 800df3a:	9c01      	ldr	r4, [sp, #4]
 800df3c:	fba0 0302 	umull	r0, r3, r0, r2
 800df40:	1840      	adds	r0, r0, r1
 800df42:	fb02 3304 	mla	r3, r2, r4, r3
 800df46:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800df4a:	b004      	add	sp, #16
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	bf00      	nop
 800df50:	3b9aca00 	.word	0x3b9aca00

0800df54 <uxr_serialize_message_header>:
 800df54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df56:	b083      	sub	sp, #12
 800df58:	4616      	mov	r6, r2
 800df5a:	4604      	mov	r4, r0
 800df5c:	9301      	str	r3, [sp, #4]
 800df5e:	460d      	mov	r5, r1
 800df60:	9f08      	ldr	r7, [sp, #32]
 800df62:	f7fa fc8d 	bl	8008880 <ucdr_serialize_uint8_t>
 800df66:	4631      	mov	r1, r6
 800df68:	4620      	mov	r0, r4
 800df6a:	f7fa fc89 	bl	8008880 <ucdr_serialize_uint8_t>
 800df6e:	9a01      	ldr	r2, [sp, #4]
 800df70:	2101      	movs	r1, #1
 800df72:	4620      	mov	r0, r4
 800df74:	f7fa fd30 	bl	80089d8 <ucdr_serialize_endian_uint16_t>
 800df78:	062b      	lsls	r3, r5, #24
 800df7a:	d501      	bpl.n	800df80 <uxr_serialize_message_header+0x2c>
 800df7c:	b003      	add	sp, #12
 800df7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df80:	2204      	movs	r2, #4
 800df82:	4639      	mov	r1, r7
 800df84:	4620      	mov	r0, r4
 800df86:	b003      	add	sp, #12
 800df88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df8c:	f004 bce4 	b.w	8012958 <ucdr_serialize_array_uint8_t>

0800df90 <uxr_deserialize_message_header>:
 800df90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df92:	b083      	sub	sp, #12
 800df94:	4616      	mov	r6, r2
 800df96:	4604      	mov	r4, r0
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	460d      	mov	r5, r1
 800df9c:	9f08      	ldr	r7, [sp, #32]
 800df9e:	f7fa fc85 	bl	80088ac <ucdr_deserialize_uint8_t>
 800dfa2:	4631      	mov	r1, r6
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f7fa fc81 	bl	80088ac <ucdr_deserialize_uint8_t>
 800dfaa:	9a01      	ldr	r2, [sp, #4]
 800dfac:	2101      	movs	r1, #1
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f7fa fe06 	bl	8008bc0 <ucdr_deserialize_endian_uint16_t>
 800dfb4:	f995 3000 	ldrsb.w	r3, [r5]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	da01      	bge.n	800dfc0 <uxr_deserialize_message_header+0x30>
 800dfbc:	b003      	add	sp, #12
 800dfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfc0:	2204      	movs	r2, #4
 800dfc2:	4639      	mov	r1, r7
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	b003      	add	sp, #12
 800dfc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dfcc:	f004 bd28 	b.w	8012a20 <ucdr_deserialize_array_uint8_t>

0800dfd0 <uxr_serialize_submessage_header>:
 800dfd0:	b530      	push	{r4, r5, lr}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	4615      	mov	r5, r2
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	9301      	str	r3, [sp, #4]
 800dfda:	f7fa fc51 	bl	8008880 <ucdr_serialize_uint8_t>
 800dfde:	4629      	mov	r1, r5
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f7fa fc4d 	bl	8008880 <ucdr_serialize_uint8_t>
 800dfe6:	9a01      	ldr	r2, [sp, #4]
 800dfe8:	2101      	movs	r1, #1
 800dfea:	4620      	mov	r0, r4
 800dfec:	b003      	add	sp, #12
 800dfee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dff2:	f7fa bcf1 	b.w	80089d8 <ucdr_serialize_endian_uint16_t>
 800dff6:	bf00      	nop

0800dff8 <uxr_deserialize_submessage_header>:
 800dff8:	b530      	push	{r4, r5, lr}
 800dffa:	b083      	sub	sp, #12
 800dffc:	4615      	mov	r5, r2
 800dffe:	4604      	mov	r4, r0
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	f7fa fc53 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e006:	4629      	mov	r1, r5
 800e008:	4620      	mov	r0, r4
 800e00a:	f7fa fc4f 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e00e:	9a01      	ldr	r2, [sp, #4]
 800e010:	2101      	movs	r1, #1
 800e012:	4620      	mov	r0, r4
 800e014:	b003      	add	sp, #12
 800e016:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e01a:	f7fa bdd1 	b.w	8008bc0 <ucdr_deserialize_endian_uint16_t>
 800e01e:	bf00      	nop

0800e020 <uxr_serialize_CLIENT_Representation>:
 800e020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e024:	2204      	movs	r2, #4
 800e026:	460e      	mov	r6, r1
 800e028:	4605      	mov	r5, r0
 800e02a:	f004 fc95 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e02e:	2202      	movs	r2, #2
 800e030:	4607      	mov	r7, r0
 800e032:	1d31      	adds	r1, r6, #4
 800e034:	4628      	mov	r0, r5
 800e036:	f004 fc8f 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e03a:	4038      	ands	r0, r7
 800e03c:	2202      	movs	r2, #2
 800e03e:	1db1      	adds	r1, r6, #6
 800e040:	b2c7      	uxtb	r7, r0
 800e042:	4628      	mov	r0, r5
 800e044:	f004 fc88 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e048:	2204      	movs	r2, #4
 800e04a:	4007      	ands	r7, r0
 800e04c:	f106 0108 	add.w	r1, r6, #8
 800e050:	4628      	mov	r0, r5
 800e052:	f004 fc81 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e056:	7b31      	ldrb	r1, [r6, #12]
 800e058:	4007      	ands	r7, r0
 800e05a:	4628      	mov	r0, r5
 800e05c:	f7fa fc10 	bl	8008880 <ucdr_serialize_uint8_t>
 800e060:	7b71      	ldrb	r1, [r6, #13]
 800e062:	4007      	ands	r7, r0
 800e064:	4628      	mov	r0, r5
 800e066:	f7fa fbdd 	bl	8008824 <ucdr_serialize_bool>
 800e06a:	7b73      	ldrb	r3, [r6, #13]
 800e06c:	ea07 0800 	and.w	r8, r7, r0
 800e070:	b93b      	cbnz	r3, 800e082 <uxr_serialize_CLIENT_Representation+0x62>
 800e072:	8bb1      	ldrh	r1, [r6, #28]
 800e074:	4628      	mov	r0, r5
 800e076:	f7fa fc2f 	bl	80088d8 <ucdr_serialize_uint16_t>
 800e07a:	ea08 0000 	and.w	r0, r8, r0
 800e07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e082:	6931      	ldr	r1, [r6, #16]
 800e084:	4628      	mov	r0, r5
 800e086:	f7fa fe11 	bl	8008cac <ucdr_serialize_uint32_t>
 800e08a:	6933      	ldr	r3, [r6, #16]
 800e08c:	b1e3      	cbz	r3, 800e0c8 <uxr_serialize_CLIENT_Representation+0xa8>
 800e08e:	b1c0      	cbz	r0, 800e0c2 <uxr_serialize_CLIENT_Representation+0xa2>
 800e090:	4637      	mov	r7, r6
 800e092:	f04f 0900 	mov.w	r9, #0
 800e096:	e001      	b.n	800e09c <uxr_serialize_CLIENT_Representation+0x7c>
 800e098:	3708      	adds	r7, #8
 800e09a:	b194      	cbz	r4, 800e0c2 <uxr_serialize_CLIENT_Representation+0xa2>
 800e09c:	6979      	ldr	r1, [r7, #20]
 800e09e:	4628      	mov	r0, r5
 800e0a0:	f004 fd7a 	bl	8012b98 <ucdr_serialize_string>
 800e0a4:	69b9      	ldr	r1, [r7, #24]
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	f004 fd75 	bl	8012b98 <ucdr_serialize_string>
 800e0ae:	6933      	ldr	r3, [r6, #16]
 800e0b0:	f109 0901 	add.w	r9, r9, #1
 800e0b4:	4004      	ands	r4, r0
 800e0b6:	4599      	cmp	r9, r3
 800e0b8:	b2e4      	uxtb	r4, r4
 800e0ba:	d3ed      	bcc.n	800e098 <uxr_serialize_CLIENT_Representation+0x78>
 800e0bc:	ea08 0804 	and.w	r8, r8, r4
 800e0c0:	e7d7      	b.n	800e072 <uxr_serialize_CLIENT_Representation+0x52>
 800e0c2:	f04f 0800 	mov.w	r8, #0
 800e0c6:	e7d4      	b.n	800e072 <uxr_serialize_CLIENT_Representation+0x52>
 800e0c8:	ea08 0800 	and.w	r8, r8, r0
 800e0cc:	e7d1      	b.n	800e072 <uxr_serialize_CLIENT_Representation+0x52>
 800e0ce:	bf00      	nop

0800e0d0 <uxr_deserialize_CLIENT_Representation>:
 800e0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0d4:	2204      	movs	r2, #4
 800e0d6:	460c      	mov	r4, r1
 800e0d8:	4605      	mov	r5, r0
 800e0da:	f004 fca1 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e0de:	2202      	movs	r2, #2
 800e0e0:	4607      	mov	r7, r0
 800e0e2:	1d21      	adds	r1, r4, #4
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	f004 fc9b 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e0ea:	4038      	ands	r0, r7
 800e0ec:	2202      	movs	r2, #2
 800e0ee:	1da1      	adds	r1, r4, #6
 800e0f0:	b2c6      	uxtb	r6, r0
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	f004 fc94 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e0f8:	2204      	movs	r2, #4
 800e0fa:	4006      	ands	r6, r0
 800e0fc:	f104 0108 	add.w	r1, r4, #8
 800e100:	4628      	mov	r0, r5
 800e102:	f004 fc8d 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e106:	f104 010c 	add.w	r1, r4, #12
 800e10a:	4006      	ands	r6, r0
 800e10c:	4628      	mov	r0, r5
 800e10e:	f7fa fbcd 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e112:	f104 010d 	add.w	r1, r4, #13
 800e116:	ea06 0700 	and.w	r7, r6, r0
 800e11a:	4628      	mov	r0, r5
 800e11c:	f7fa fb98 	bl	8008850 <ucdr_deserialize_bool>
 800e120:	7b63      	ldrb	r3, [r4, #13]
 800e122:	4007      	ands	r7, r0
 800e124:	b93b      	cbnz	r3, 800e136 <uxr_deserialize_CLIENT_Representation+0x66>
 800e126:	f104 011c 	add.w	r1, r4, #28
 800e12a:	4628      	mov	r0, r5
 800e12c:	f7fa fcd4 	bl	8008ad8 <ucdr_deserialize_uint16_t>
 800e130:	4038      	ands	r0, r7
 800e132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e136:	f104 0110 	add.w	r1, r4, #16
 800e13a:	4628      	mov	r0, r5
 800e13c:	f7fa fee6 	bl	8008f0c <ucdr_deserialize_uint32_t>
 800e140:	6923      	ldr	r3, [r4, #16]
 800e142:	2b01      	cmp	r3, #1
 800e144:	d903      	bls.n	800e14e <uxr_deserialize_CLIENT_Representation+0x7e>
 800e146:	2301      	movs	r3, #1
 800e148:	75ab      	strb	r3, [r5, #22]
 800e14a:	2700      	movs	r7, #0
 800e14c:	e7eb      	b.n	800e126 <uxr_deserialize_CLIENT_Representation+0x56>
 800e14e:	b30b      	cbz	r3, 800e194 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e150:	2800      	cmp	r0, #0
 800e152:	d0fa      	beq.n	800e14a <uxr_deserialize_CLIENT_Representation+0x7a>
 800e154:	46a0      	mov	r8, r4
 800e156:	f04f 0900 	mov.w	r9, #0
 800e15a:	e001      	b.n	800e160 <uxr_deserialize_CLIENT_Representation+0x90>
 800e15c:	2e00      	cmp	r6, #0
 800e15e:	d0f4      	beq.n	800e14a <uxr_deserialize_CLIENT_Representation+0x7a>
 800e160:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e164:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e168:	4628      	mov	r0, r5
 800e16a:	f004 fd25 	bl	8012bb8 <ucdr_deserialize_string>
 800e16e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e172:	4606      	mov	r6, r0
 800e174:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e178:	4628      	mov	r0, r5
 800e17a:	f004 fd1d 	bl	8012bb8 <ucdr_deserialize_string>
 800e17e:	6923      	ldr	r3, [r4, #16]
 800e180:	f109 0901 	add.w	r9, r9, #1
 800e184:	4006      	ands	r6, r0
 800e186:	4599      	cmp	r9, r3
 800e188:	f108 0808 	add.w	r8, r8, #8
 800e18c:	b2f6      	uxtb	r6, r6
 800e18e:	d3e5      	bcc.n	800e15c <uxr_deserialize_CLIENT_Representation+0x8c>
 800e190:	4037      	ands	r7, r6
 800e192:	e7c8      	b.n	800e126 <uxr_deserialize_CLIENT_Representation+0x56>
 800e194:	4007      	ands	r7, r0
 800e196:	e7c6      	b.n	800e126 <uxr_deserialize_CLIENT_Representation+0x56>

0800e198 <uxr_serialize_AGENT_Representation>:
 800e198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e19c:	2204      	movs	r2, #4
 800e19e:	460f      	mov	r7, r1
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	f004 fbd9 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e1a6:	2202      	movs	r2, #2
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	1d39      	adds	r1, r7, #4
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	f004 fbd3 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e1b2:	4020      	ands	r0, r4
 800e1b4:	2202      	movs	r2, #2
 800e1b6:	1db9      	adds	r1, r7, #6
 800e1b8:	b2c4      	uxtb	r4, r0
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f004 fbcc 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e1c0:	7a39      	ldrb	r1, [r7, #8]
 800e1c2:	4004      	ands	r4, r0
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	f7fa fb2d 	bl	8008824 <ucdr_serialize_bool>
 800e1ca:	7a3b      	ldrb	r3, [r7, #8]
 800e1cc:	ea00 0804 	and.w	r8, r0, r4
 800e1d0:	b913      	cbnz	r3, 800e1d8 <uxr_serialize_AGENT_Representation+0x40>
 800e1d2:	4640      	mov	r0, r8
 800e1d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d8:	68f9      	ldr	r1, [r7, #12]
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f7fa fd66 	bl	8008cac <ucdr_serialize_uint32_t>
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	b303      	cbz	r3, 800e226 <uxr_serialize_AGENT_Representation+0x8e>
 800e1e4:	b1d0      	cbz	r0, 800e21c <uxr_serialize_AGENT_Representation+0x84>
 800e1e6:	463e      	mov	r6, r7
 800e1e8:	f04f 0900 	mov.w	r9, #0
 800e1ec:	e001      	b.n	800e1f2 <uxr_serialize_AGENT_Representation+0x5a>
 800e1ee:	3608      	adds	r6, #8
 800e1f0:	b1a4      	cbz	r4, 800e21c <uxr_serialize_AGENT_Representation+0x84>
 800e1f2:	6931      	ldr	r1, [r6, #16]
 800e1f4:	4628      	mov	r0, r5
 800e1f6:	f004 fccf 	bl	8012b98 <ucdr_serialize_string>
 800e1fa:	6971      	ldr	r1, [r6, #20]
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	4628      	mov	r0, r5
 800e200:	f004 fcca 	bl	8012b98 <ucdr_serialize_string>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f109 0901 	add.w	r9, r9, #1
 800e20a:	4004      	ands	r4, r0
 800e20c:	4599      	cmp	r9, r3
 800e20e:	b2e4      	uxtb	r4, r4
 800e210:	d3ed      	bcc.n	800e1ee <uxr_serialize_AGENT_Representation+0x56>
 800e212:	ea08 0804 	and.w	r8, r8, r4
 800e216:	4640      	mov	r0, r8
 800e218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e21c:	f04f 0800 	mov.w	r8, #0
 800e220:	4640      	mov	r0, r8
 800e222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e226:	ea08 0800 	and.w	r8, r8, r0
 800e22a:	e7d2      	b.n	800e1d2 <uxr_serialize_AGENT_Representation+0x3a>

0800e22c <uxr_serialize_DATAWRITER_Representation>:
 800e22c:	b570      	push	{r4, r5, r6, lr}
 800e22e:	460d      	mov	r5, r1
 800e230:	7809      	ldrb	r1, [r1, #0]
 800e232:	4606      	mov	r6, r0
 800e234:	f7fa fb24 	bl	8008880 <ucdr_serialize_uint8_t>
 800e238:	4604      	mov	r4, r0
 800e23a:	b130      	cbz	r0, 800e24a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e23c:	782b      	ldrb	r3, [r5, #0]
 800e23e:	2b02      	cmp	r3, #2
 800e240:	d00c      	beq.n	800e25c <uxr_serialize_DATAWRITER_Representation+0x30>
 800e242:	2b03      	cmp	r3, #3
 800e244:	d010      	beq.n	800e268 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e246:	2b01      	cmp	r3, #1
 800e248:	d008      	beq.n	800e25c <uxr_serialize_DATAWRITER_Representation+0x30>
 800e24a:	2202      	movs	r2, #2
 800e24c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800e250:	4630      	mov	r0, r6
 800e252:	f004 fb81 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e256:	4020      	ands	r0, r4
 800e258:	b2c0      	uxtb	r0, r0
 800e25a:	bd70      	pop	{r4, r5, r6, pc}
 800e25c:	6869      	ldr	r1, [r5, #4]
 800e25e:	4630      	mov	r0, r6
 800e260:	f004 fc9a 	bl	8012b98 <ucdr_serialize_string>
 800e264:	4604      	mov	r4, r0
 800e266:	e7f0      	b.n	800e24a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e268:	4629      	mov	r1, r5
 800e26a:	4630      	mov	r0, r6
 800e26c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e270:	3104      	adds	r1, #4
 800e272:	f004 fc65 	bl	8012b40 <ucdr_serialize_sequence_uint8_t>
 800e276:	4604      	mov	r4, r0
 800e278:	e7e7      	b.n	800e24a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e27a:	bf00      	nop

0800e27c <uxr_serialize_ObjectVariant.part.0>:
 800e27c:	b570      	push	{r4, r5, r6, lr}
 800e27e:	780b      	ldrb	r3, [r1, #0]
 800e280:	3b01      	subs	r3, #1
 800e282:	460c      	mov	r4, r1
 800e284:	4605      	mov	r5, r0
 800e286:	2b0d      	cmp	r3, #13
 800e288:	d854      	bhi.n	800e334 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e28a:	e8df f003 	tbb	[pc, r3]
 800e28e:	0730      	.short	0x0730
 800e290:	07071b1b 	.word	0x07071b1b
 800e294:	0c530707 	.word	0x0c530707
 800e298:	494e0c0c 	.word	0x494e0c0c
 800e29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2a0:	3104      	adds	r1, #4
 800e2a2:	f7ff bfc3 	b.w	800e22c <uxr_serialize_DATAWRITER_Representation>
 800e2a6:	7909      	ldrb	r1, [r1, #4]
 800e2a8:	f7fa faea 	bl	8008880 <ucdr_serialize_uint8_t>
 800e2ac:	b1e8      	cbz	r0, 800e2ea <uxr_serialize_ObjectVariant.part.0+0x6e>
 800e2ae:	7923      	ldrb	r3, [r4, #4]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d001      	beq.n	800e2b8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	d13d      	bne.n	800e334 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e2b8:	68a1      	ldr	r1, [r4, #8]
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2c0:	f004 bc6a 	b.w	8012b98 <ucdr_serialize_string>
 800e2c4:	7909      	ldrb	r1, [r1, #4]
 800e2c6:	f7fa fadb 	bl	8008880 <ucdr_serialize_uint8_t>
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	b120      	cbz	r0, 800e2d8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e2ce:	7923      	ldrb	r3, [r4, #4]
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d039      	beq.n	800e348 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e2d4:	2b03      	cmp	r3, #3
 800e2d6:	d02f      	beq.n	800e338 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e2d8:	2202      	movs	r2, #2
 800e2da:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f004 fb3a 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e2e4:	4030      	ands	r0, r6
 800e2e6:	b2c0      	uxtb	r0, r0
 800e2e8:	bd70      	pop	{r4, r5, r6, pc}
 800e2ea:	2000      	movs	r0, #0
 800e2ec:	bd70      	pop	{r4, r5, r6, pc}
 800e2ee:	7909      	ldrb	r1, [r1, #4]
 800e2f0:	f7fa fac6 	bl	8008880 <ucdr_serialize_uint8_t>
 800e2f4:	4606      	mov	r6, r0
 800e2f6:	b158      	cbz	r0, 800e310 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e2f8:	7923      	ldrb	r3, [r4, #4]
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	d003      	beq.n	800e306 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	d028      	beq.n	800e354 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e302:	2b01      	cmp	r3, #1
 800e304:	d104      	bne.n	800e310 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e306:	68a1      	ldr	r1, [r4, #8]
 800e308:	4628      	mov	r0, r5
 800e30a:	f004 fc45 	bl	8012b98 <ucdr_serialize_string>
 800e30e:	4606      	mov	r6, r0
 800e310:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800e314:	4628      	mov	r0, r5
 800e316:	f7fa ffef 	bl	80092f8 <ucdr_serialize_int16_t>
 800e31a:	4030      	ands	r0, r6
 800e31c:	b2c0      	uxtb	r0, r0
 800e31e:	bd70      	pop	{r4, r5, r6, pc}
 800e320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e324:	3104      	adds	r1, #4
 800e326:	f7ff be7b 	b.w	800e020 <uxr_serialize_CLIENT_Representation>
 800e32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e32e:	3104      	adds	r1, #4
 800e330:	f7ff bf32 	b.w	800e198 <uxr_serialize_AGENT_Representation>
 800e334:	2001      	movs	r0, #1
 800e336:	bd70      	pop	{r4, r5, r6, pc}
 800e338:	68a2      	ldr	r2, [r4, #8]
 800e33a:	f104 010c 	add.w	r1, r4, #12
 800e33e:	4628      	mov	r0, r5
 800e340:	f004 fbfe 	bl	8012b40 <ucdr_serialize_sequence_uint8_t>
 800e344:	4606      	mov	r6, r0
 800e346:	e7c7      	b.n	800e2d8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e348:	68a1      	ldr	r1, [r4, #8]
 800e34a:	4628      	mov	r0, r5
 800e34c:	f004 fc24 	bl	8012b98 <ucdr_serialize_string>
 800e350:	4606      	mov	r6, r0
 800e352:	e7c1      	b.n	800e2d8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e354:	68a2      	ldr	r2, [r4, #8]
 800e356:	f104 010c 	add.w	r1, r4, #12
 800e35a:	4628      	mov	r0, r5
 800e35c:	f004 fbf0 	bl	8012b40 <ucdr_serialize_sequence_uint8_t>
 800e360:	4606      	mov	r6, r0
 800e362:	e7d5      	b.n	800e310 <uxr_serialize_ObjectVariant.part.0+0x94>

0800e364 <uxr_deserialize_DATAWRITER_Representation>:
 800e364:	b570      	push	{r4, r5, r6, lr}
 800e366:	4606      	mov	r6, r0
 800e368:	460d      	mov	r5, r1
 800e36a:	f7fa fa9f 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e36e:	4604      	mov	r4, r0
 800e370:	b130      	cbz	r0, 800e380 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e372:	782b      	ldrb	r3, [r5, #0]
 800e374:	2b02      	cmp	r3, #2
 800e376:	d00c      	beq.n	800e392 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e378:	2b03      	cmp	r3, #3
 800e37a:	d012      	beq.n	800e3a2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d008      	beq.n	800e392 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e380:	2202      	movs	r2, #2
 800e382:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800e386:	4630      	mov	r0, r6
 800e388:	f004 fb4a 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e38c:	4020      	ands	r0, r4
 800e38e:	b2c0      	uxtb	r0, r0
 800e390:	bd70      	pop	{r4, r5, r6, pc}
 800e392:	6869      	ldr	r1, [r5, #4]
 800e394:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e398:	4630      	mov	r0, r6
 800e39a:	f004 fc0d 	bl	8012bb8 <ucdr_deserialize_string>
 800e39e:	4604      	mov	r4, r0
 800e3a0:	e7ee      	b.n	800e380 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e3a2:	1d2b      	adds	r3, r5, #4
 800e3a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3a8:	f105 0108 	add.w	r1, r5, #8
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f004 fbd9 	bl	8012b64 <ucdr_deserialize_sequence_uint8_t>
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	e7e4      	b.n	800e380 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e3b6:	bf00      	nop

0800e3b8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	460d      	mov	r5, r1
 800e3bc:	7809      	ldrb	r1, [r1, #0]
 800e3be:	4606      	mov	r6, r0
 800e3c0:	f7fa fa30 	bl	8008824 <ucdr_serialize_bool>
 800e3c4:	782b      	ldrb	r3, [r5, #0]
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	b94b      	cbnz	r3, 800e3de <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e3ca:	7a29      	ldrb	r1, [r5, #8]
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7fa fa29 	bl	8008824 <ucdr_serialize_bool>
 800e3d2:	7a2b      	ldrb	r3, [r5, #8]
 800e3d4:	4004      	ands	r4, r0
 800e3d6:	b2e4      	uxtb	r4, r4
 800e3d8:	b943      	cbnz	r3, 800e3ec <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e3da:	4620      	mov	r0, r4
 800e3dc:	bd70      	pop	{r4, r5, r6, pc}
 800e3de:	6869      	ldr	r1, [r5, #4]
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f004 fbd9 	bl	8012b98 <ucdr_serialize_string>
 800e3e6:	4004      	ands	r4, r0
 800e3e8:	b2e4      	uxtb	r4, r4
 800e3ea:	e7ee      	b.n	800e3ca <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e3ec:	68e9      	ldr	r1, [r5, #12]
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	f004 fbd2 	bl	8012b98 <ucdr_serialize_string>
 800e3f4:	4004      	ands	r4, r0
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	bd70      	pop	{r4, r5, r6, pc}
 800e3fa:	bf00      	nop

0800e3fc <uxr_serialize_OBJK_Topic_Binary>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	460d      	mov	r5, r1
 800e400:	6809      	ldr	r1, [r1, #0]
 800e402:	4606      	mov	r6, r0
 800e404:	f004 fbc8 	bl	8012b98 <ucdr_serialize_string>
 800e408:	7929      	ldrb	r1, [r5, #4]
 800e40a:	4604      	mov	r4, r0
 800e40c:	4630      	mov	r0, r6
 800e40e:	f7fa fa09 	bl	8008824 <ucdr_serialize_bool>
 800e412:	792b      	ldrb	r3, [r5, #4]
 800e414:	4004      	ands	r4, r0
 800e416:	b2e4      	uxtb	r4, r4
 800e418:	b943      	cbnz	r3, 800e42c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800e41a:	7b29      	ldrb	r1, [r5, #12]
 800e41c:	4630      	mov	r0, r6
 800e41e:	f7fa fa01 	bl	8008824 <ucdr_serialize_bool>
 800e422:	7b2b      	ldrb	r3, [r5, #12]
 800e424:	4004      	ands	r4, r0
 800e426:	b93b      	cbnz	r3, 800e438 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800e428:	4620      	mov	r0, r4
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
 800e42c:	68a9      	ldr	r1, [r5, #8]
 800e42e:	4630      	mov	r0, r6
 800e430:	f004 fbb2 	bl	8012b98 <ucdr_serialize_string>
 800e434:	4004      	ands	r4, r0
 800e436:	e7f0      	b.n	800e41a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800e438:	6929      	ldr	r1, [r5, #16]
 800e43a:	4630      	mov	r0, r6
 800e43c:	f004 fbac 	bl	8012b98 <ucdr_serialize_string>
 800e440:	4004      	ands	r4, r0
 800e442:	b2e4      	uxtb	r4, r4
 800e444:	4620      	mov	r0, r4
 800e446:	bd70      	pop	{r4, r5, r6, pc}

0800e448 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800e448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e44c:	460c      	mov	r4, r1
 800e44e:	7809      	ldrb	r1, [r1, #0]
 800e450:	4606      	mov	r6, r0
 800e452:	f7fa f9e7 	bl	8008824 <ucdr_serialize_bool>
 800e456:	7823      	ldrb	r3, [r4, #0]
 800e458:	4605      	mov	r5, r0
 800e45a:	b96b      	cbnz	r3, 800e478 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800e45c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800e460:	4630      	mov	r0, r6
 800e462:	f7fa f9df 	bl	8008824 <ucdr_serialize_bool>
 800e466:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e46a:	4005      	ands	r5, r0
 800e46c:	b2ed      	uxtb	r5, r5
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d169      	bne.n	800e546 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800e472:	4628      	mov	r0, r5
 800e474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e478:	6861      	ldr	r1, [r4, #4]
 800e47a:	4630      	mov	r0, r6
 800e47c:	f7fa fc16 	bl	8008cac <ucdr_serialize_uint32_t>
 800e480:	6863      	ldr	r3, [r4, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d06b      	beq.n	800e55e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800e486:	2800      	cmp	r0, #0
 800e488:	d067      	beq.n	800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e48a:	68a1      	ldr	r1, [r4, #8]
 800e48c:	4630      	mov	r0, r6
 800e48e:	f004 fb83 	bl	8012b98 <ucdr_serialize_string>
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	2b01      	cmp	r3, #1
 800e496:	d953      	bls.n	800e540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e498:	2800      	cmp	r0, #0
 800e49a:	d05e      	beq.n	800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e49c:	68e1      	ldr	r1, [r4, #12]
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f004 fb7a 	bl	8012b98 <ucdr_serialize_string>
 800e4a4:	6863      	ldr	r3, [r4, #4]
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	d94a      	bls.n	800e540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d055      	beq.n	800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e4ae:	6921      	ldr	r1, [r4, #16]
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f004 fb71 	bl	8012b98 <ucdr_serialize_string>
 800e4b6:	6863      	ldr	r3, [r4, #4]
 800e4b8:	2b03      	cmp	r3, #3
 800e4ba:	d941      	bls.n	800e540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d04c      	beq.n	800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e4c0:	6961      	ldr	r1, [r4, #20]
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f004 fb68 	bl	8012b98 <ucdr_serialize_string>
 800e4c8:	6863      	ldr	r3, [r4, #4]
 800e4ca:	2b04      	cmp	r3, #4
 800e4cc:	d938      	bls.n	800e540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d043      	beq.n	800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e4d2:	69a1      	ldr	r1, [r4, #24]
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	f004 fb5f 	bl	8012b98 <ucdr_serialize_string>
 800e4da:	6863      	ldr	r3, [r4, #4]
 800e4dc:	2b05      	cmp	r3, #5
 800e4de:	d92f      	bls.n	800e540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	d03a      	beq.n	800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e4e4:	69e1      	ldr	r1, [r4, #28]
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f004 fb56 	bl	8012b98 <ucdr_serialize_string>
 800e4ec:	6863      	ldr	r3, [r4, #4]
 800e4ee:	2b06      	cmp	r3, #6
 800e4f0:	d926      	bls.n	800e540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e4f2:	b390      	cbz	r0, 800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e4f4:	6a21      	ldr	r1, [r4, #32]
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	f004 fb4e 	bl	8012b98 <ucdr_serialize_string>
 800e4fc:	6863      	ldr	r3, [r4, #4]
 800e4fe:	2b07      	cmp	r3, #7
 800e500:	d91e      	bls.n	800e540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e502:	b350      	cbz	r0, 800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e504:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e506:	4630      	mov	r0, r6
 800e508:	f004 fb46 	bl	8012b98 <ucdr_serialize_string>
 800e50c:	6863      	ldr	r3, [r4, #4]
 800e50e:	2b08      	cmp	r3, #8
 800e510:	d916      	bls.n	800e540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e512:	b310      	cbz	r0, 800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e514:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e516:	4630      	mov	r0, r6
 800e518:	f004 fb3e 	bl	8012b98 <ucdr_serialize_string>
 800e51c:	6863      	ldr	r3, [r4, #4]
 800e51e:	2b09      	cmp	r3, #9
 800e520:	d90e      	bls.n	800e540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e522:	b1d0      	cbz	r0, 800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e524:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800e528:	2709      	movs	r7, #9
 800e52a:	e000      	b.n	800e52e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800e52c:	b1a8      	cbz	r0, 800e55a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e52e:	f858 1b04 	ldr.w	r1, [r8], #4
 800e532:	4630      	mov	r0, r6
 800e534:	f004 fb30 	bl	8012b98 <ucdr_serialize_string>
 800e538:	6862      	ldr	r2, [r4, #4]
 800e53a:	3701      	adds	r7, #1
 800e53c:	4297      	cmp	r7, r2
 800e53e:	d3f5      	bcc.n	800e52c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800e540:	4005      	ands	r5, r0
 800e542:	b2ed      	uxtb	r5, r5
 800e544:	e78a      	b.n	800e45c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e546:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e548:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800e54c:	4630      	mov	r0, r6
 800e54e:	f004 faf7 	bl	8012b40 <ucdr_serialize_sequence_uint8_t>
 800e552:	4005      	ands	r5, r0
 800e554:	4628      	mov	r0, r5
 800e556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e55a:	2500      	movs	r5, #0
 800e55c:	e77e      	b.n	800e45c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e55e:	4028      	ands	r0, r5
 800e560:	b2c5      	uxtb	r5, r0
 800e562:	e77b      	b.n	800e45c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800e564 <uxr_serialize_OBJK_Subscriber_Binary>:
 800e564:	b570      	push	{r4, r5, r6, lr}
 800e566:	460d      	mov	r5, r1
 800e568:	7809      	ldrb	r1, [r1, #0]
 800e56a:	4606      	mov	r6, r0
 800e56c:	f7fa f95a 	bl	8008824 <ucdr_serialize_bool>
 800e570:	782b      	ldrb	r3, [r5, #0]
 800e572:	4604      	mov	r4, r0
 800e574:	b94b      	cbnz	r3, 800e58a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800e576:	7a29      	ldrb	r1, [r5, #8]
 800e578:	4630      	mov	r0, r6
 800e57a:	f7fa f953 	bl	8008824 <ucdr_serialize_bool>
 800e57e:	7a2b      	ldrb	r3, [r5, #8]
 800e580:	4004      	ands	r4, r0
 800e582:	b2e4      	uxtb	r4, r4
 800e584:	b943      	cbnz	r3, 800e598 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800e586:	4620      	mov	r0, r4
 800e588:	bd70      	pop	{r4, r5, r6, pc}
 800e58a:	6869      	ldr	r1, [r5, #4]
 800e58c:	4630      	mov	r0, r6
 800e58e:	f004 fb03 	bl	8012b98 <ucdr_serialize_string>
 800e592:	4004      	ands	r4, r0
 800e594:	b2e4      	uxtb	r4, r4
 800e596:	e7ee      	b.n	800e576 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800e598:	f105 010c 	add.w	r1, r5, #12
 800e59c:	4630      	mov	r0, r6
 800e59e:	f7ff ff53 	bl	800e448 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800e5a2:	4004      	ands	r4, r0
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	bd70      	pop	{r4, r5, r6, pc}

0800e5a8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800e5a8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800e5ac:	4688      	mov	r8, r1
 800e5ae:	8809      	ldrh	r1, [r1, #0]
 800e5b0:	4681      	mov	r9, r0
 800e5b2:	f7fa f991 	bl	80088d8 <ucdr_serialize_uint16_t>
 800e5b6:	f898 1002 	ldrb.w	r1, [r8, #2]
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	4648      	mov	r0, r9
 800e5be:	f7fa f931 	bl	8008824 <ucdr_serialize_bool>
 800e5c2:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e5c6:	4006      	ands	r6, r0
 800e5c8:	b2f5      	uxtb	r5, r6
 800e5ca:	b9eb      	cbnz	r3, 800e608 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800e5cc:	f898 1006 	ldrb.w	r1, [r8, #6]
 800e5d0:	4648      	mov	r0, r9
 800e5d2:	f7fa f927 	bl	8008824 <ucdr_serialize_bool>
 800e5d6:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e5da:	4005      	ands	r5, r0
 800e5dc:	bb7b      	cbnz	r3, 800e63e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800e5de:	f898 100c 	ldrb.w	r1, [r8, #12]
 800e5e2:	4648      	mov	r0, r9
 800e5e4:	f7fa f91e 	bl	8008824 <ucdr_serialize_bool>
 800e5e8:	f898 300c 	ldrb.w	r3, [r8, #12]
 800e5ec:	4005      	ands	r5, r0
 800e5ee:	b9f3      	cbnz	r3, 800e62e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800e5f0:	f898 1014 	ldrb.w	r1, [r8, #20]
 800e5f4:	4648      	mov	r0, r9
 800e5f6:	f7fa f915 	bl	8008824 <ucdr_serialize_bool>
 800e5fa:	f898 3014 	ldrb.w	r3, [r8, #20]
 800e5fe:	4005      	ands	r5, r0
 800e600:	b94b      	cbnz	r3, 800e616 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800e602:	4628      	mov	r0, r5
 800e604:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800e608:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800e60c:	4648      	mov	r0, r9
 800e60e:	f7fa f963 	bl	80088d8 <ucdr_serialize_uint16_t>
 800e612:	4005      	ands	r5, r0
 800e614:	e7da      	b.n	800e5cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800e616:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800e61a:	f108 011c 	add.w	r1, r8, #28
 800e61e:	4648      	mov	r0, r9
 800e620:	f004 fa8e 	bl	8012b40 <ucdr_serialize_sequence_uint8_t>
 800e624:	4028      	ands	r0, r5
 800e626:	b2c5      	uxtb	r5, r0
 800e628:	4628      	mov	r0, r5
 800e62a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800e62e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e632:	4648      	mov	r0, r9
 800e634:	f7fa fb3a 	bl	8008cac <ucdr_serialize_uint32_t>
 800e638:	4028      	ands	r0, r5
 800e63a:	b2c5      	uxtb	r5, r0
 800e63c:	e7d8      	b.n	800e5f0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800e63e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e642:	4648      	mov	r0, r9
 800e644:	f7fa fb32 	bl	8008cac <ucdr_serialize_uint32_t>
 800e648:	4028      	ands	r0, r5
 800e64a:	b2c5      	uxtb	r5, r0
 800e64c:	e7c7      	b.n	800e5de <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800e64e:	bf00      	nop

0800e650 <uxr_serialize_OBJK_DataReader_Binary>:
 800e650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e652:	2202      	movs	r2, #2
 800e654:	460c      	mov	r4, r1
 800e656:	4606      	mov	r6, r0
 800e658:	f004 f97e 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e65c:	78a1      	ldrb	r1, [r4, #2]
 800e65e:	4605      	mov	r5, r0
 800e660:	4630      	mov	r0, r6
 800e662:	f7fa f8df 	bl	8008824 <ucdr_serialize_bool>
 800e666:	78a3      	ldrb	r3, [r4, #2]
 800e668:	4005      	ands	r5, r0
 800e66a:	b2ed      	uxtb	r5, r5
 800e66c:	b90b      	cbnz	r3, 800e672 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800e66e:	4628      	mov	r0, r5
 800e670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e672:	f104 0108 	add.w	r1, r4, #8
 800e676:	4630      	mov	r0, r6
 800e678:	f7ff ff96 	bl	800e5a8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800e67c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800e680:	4607      	mov	r7, r0
 800e682:	4630      	mov	r0, r6
 800e684:	f7fa f8ce 	bl	8008824 <ucdr_serialize_bool>
 800e688:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e68c:	4038      	ands	r0, r7
 800e68e:	b2c7      	uxtb	r7, r0
 800e690:	b95b      	cbnz	r3, 800e6aa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800e692:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800e696:	4630      	mov	r0, r6
 800e698:	f7fa f8c4 	bl	8008824 <ucdr_serialize_bool>
 800e69c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e6a0:	4007      	ands	r7, r0
 800e6a2:	b94b      	cbnz	r3, 800e6b8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800e6a4:	403d      	ands	r5, r7
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6aa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f7fa fd52 	bl	8009158 <ucdr_serialize_uint64_t>
 800e6b4:	4007      	ands	r7, r0
 800e6b6:	e7ec      	b.n	800e692 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800e6b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f004 fa6c 	bl	8012b98 <ucdr_serialize_string>
 800e6c0:	4007      	ands	r7, r0
 800e6c2:	b2ff      	uxtb	r7, r7
 800e6c4:	e7ee      	b.n	800e6a4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800e6c6:	bf00      	nop

0800e6c8 <uxr_deserialize_ObjectVariant>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	4605      	mov	r5, r0
 800e6cc:	460e      	mov	r6, r1
 800e6ce:	f7fa f8ed 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e6d2:	b168      	cbz	r0, 800e6f0 <uxr_deserialize_ObjectVariant+0x28>
 800e6d4:	7833      	ldrb	r3, [r6, #0]
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	4604      	mov	r4, r0
 800e6da:	2b0d      	cmp	r3, #13
 800e6dc:	d809      	bhi.n	800e6f2 <uxr_deserialize_ObjectVariant+0x2a>
 800e6de:	e8df f003 	tbb	[pc, r3]
 800e6e2:	0a41      	.short	0x0a41
 800e6e4:	0a0a2323 	.word	0x0a0a2323
 800e6e8:	10080a0a 	.word	0x10080a0a
 800e6ec:	565c1010 	.word	0x565c1010
 800e6f0:	2400      	movs	r4, #0
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	bd70      	pop	{r4, r5, r6, pc}
 800e6f6:	1d31      	adds	r1, r6, #4
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6fe:	f7ff be31 	b.w	800e364 <uxr_deserialize_DATAWRITER_Representation>
 800e702:	1d31      	adds	r1, r6, #4
 800e704:	4628      	mov	r0, r5
 800e706:	f7fa f8d1 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d0f0      	beq.n	800e6f0 <uxr_deserialize_ObjectVariant+0x28>
 800e70e:	7933      	ldrb	r3, [r6, #4]
 800e710:	2b01      	cmp	r3, #1
 800e712:	d001      	beq.n	800e718 <uxr_deserialize_ObjectVariant+0x50>
 800e714:	2b02      	cmp	r3, #2
 800e716:	d1ec      	bne.n	800e6f2 <uxr_deserialize_ObjectVariant+0x2a>
 800e718:	68b1      	ldr	r1, [r6, #8]
 800e71a:	4628      	mov	r0, r5
 800e71c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e724:	f004 ba48 	b.w	8012bb8 <ucdr_deserialize_string>
 800e728:	1d31      	adds	r1, r6, #4
 800e72a:	4628      	mov	r0, r5
 800e72c:	f7fa f8be 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e730:	4604      	mov	r4, r0
 800e732:	b170      	cbz	r0, 800e752 <uxr_deserialize_ObjectVariant+0x8a>
 800e734:	7933      	ldrb	r3, [r6, #4]
 800e736:	2b02      	cmp	r3, #2
 800e738:	d04c      	beq.n	800e7d4 <uxr_deserialize_ObjectVariant+0x10c>
 800e73a:	2b03      	cmp	r3, #3
 800e73c:	d109      	bne.n	800e752 <uxr_deserialize_ObjectVariant+0x8a>
 800e73e:	f106 0308 	add.w	r3, r6, #8
 800e742:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e746:	f106 010c 	add.w	r1, r6, #12
 800e74a:	4628      	mov	r0, r5
 800e74c:	f004 fa0a 	bl	8012b64 <ucdr_deserialize_sequence_uint8_t>
 800e750:	4604      	mov	r4, r0
 800e752:	2202      	movs	r2, #2
 800e754:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800e758:	4628      	mov	r0, r5
 800e75a:	f004 f961 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e75e:	4020      	ands	r0, r4
 800e760:	b2c4      	uxtb	r4, r0
 800e762:	e7c6      	b.n	800e6f2 <uxr_deserialize_ObjectVariant+0x2a>
 800e764:	1d31      	adds	r1, r6, #4
 800e766:	4628      	mov	r0, r5
 800e768:	f7fa f8a0 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e76c:	4604      	mov	r4, r0
 800e76e:	b130      	cbz	r0, 800e77e <uxr_deserialize_ObjectVariant+0xb6>
 800e770:	7933      	ldrb	r3, [r6, #4]
 800e772:	2b02      	cmp	r3, #2
 800e774:	d036      	beq.n	800e7e4 <uxr_deserialize_ObjectVariant+0x11c>
 800e776:	2b03      	cmp	r3, #3
 800e778:	d03c      	beq.n	800e7f4 <uxr_deserialize_ObjectVariant+0x12c>
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d032      	beq.n	800e7e4 <uxr_deserialize_ObjectVariant+0x11c>
 800e77e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800e782:	4628      	mov	r0, r5
 800e784:	f7fa fe38 	bl	80093f8 <ucdr_deserialize_int16_t>
 800e788:	4020      	ands	r0, r4
 800e78a:	b2c4      	uxtb	r4, r0
 800e78c:	e7b1      	b.n	800e6f2 <uxr_deserialize_ObjectVariant+0x2a>
 800e78e:	1d31      	adds	r1, r6, #4
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e796:	f7ff bc9b 	b.w	800e0d0 <uxr_deserialize_CLIENT_Representation>
 800e79a:	2204      	movs	r2, #4
 800e79c:	18b1      	adds	r1, r6, r2
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f004 f93e 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e7a4:	2202      	movs	r2, #2
 800e7a6:	f106 0108 	add.w	r1, r6, #8
 800e7aa:	4604      	mov	r4, r0
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	f004 f937 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e7b2:	2202      	movs	r2, #2
 800e7b4:	4004      	ands	r4, r0
 800e7b6:	f106 010a 	add.w	r1, r6, #10
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	f004 f930 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e7c0:	b2e4      	uxtb	r4, r4
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	f106 010c 	add.w	r1, r6, #12
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	401c      	ands	r4, r3
 800e7cc:	f7fa f840 	bl	8008850 <ucdr_deserialize_bool>
 800e7d0:	4004      	ands	r4, r0
 800e7d2:	e78e      	b.n	800e6f2 <uxr_deserialize_ObjectVariant+0x2a>
 800e7d4:	68b1      	ldr	r1, [r6, #8]
 800e7d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f004 f9ec 	bl	8012bb8 <ucdr_deserialize_string>
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	e7b6      	b.n	800e752 <uxr_deserialize_ObjectVariant+0x8a>
 800e7e4:	68b1      	ldr	r1, [r6, #8]
 800e7e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	f004 f9e4 	bl	8012bb8 <ucdr_deserialize_string>
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	e7c4      	b.n	800e77e <uxr_deserialize_ObjectVariant+0xb6>
 800e7f4:	f106 0308 	add.w	r3, r6, #8
 800e7f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7fc:	f106 010c 	add.w	r1, r6, #12
 800e800:	4628      	mov	r0, r5
 800e802:	f004 f9af 	bl	8012b64 <ucdr_deserialize_sequence_uint8_t>
 800e806:	4604      	mov	r4, r0
 800e808:	e7b9      	b.n	800e77e <uxr_deserialize_ObjectVariant+0xb6>
 800e80a:	bf00      	nop

0800e80c <uxr_deserialize_BaseObjectRequest>:
 800e80c:	b570      	push	{r4, r5, r6, lr}
 800e80e:	2202      	movs	r2, #2
 800e810:	4605      	mov	r5, r0
 800e812:	460e      	mov	r6, r1
 800e814:	f004 f904 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e818:	2202      	movs	r2, #2
 800e81a:	4604      	mov	r4, r0
 800e81c:	18b1      	adds	r1, r6, r2
 800e81e:	4628      	mov	r0, r5
 800e820:	f004 f8fe 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e824:	4020      	ands	r0, r4
 800e826:	b2c0      	uxtb	r0, r0
 800e828:	bd70      	pop	{r4, r5, r6, pc}
 800e82a:	bf00      	nop

0800e82c <uxr_serialize_ActivityInfoVariant>:
 800e82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e830:	460d      	mov	r5, r1
 800e832:	7809      	ldrb	r1, [r1, #0]
 800e834:	4607      	mov	r7, r0
 800e836:	f7fa f823 	bl	8008880 <ucdr_serialize_uint8_t>
 800e83a:	4681      	mov	r9, r0
 800e83c:	b138      	cbz	r0, 800e84e <uxr_serialize_ActivityInfoVariant+0x22>
 800e83e:	782b      	ldrb	r3, [r5, #0]
 800e840:	2b06      	cmp	r3, #6
 800e842:	f000 8082 	beq.w	800e94a <uxr_serialize_ActivityInfoVariant+0x11e>
 800e846:	2b0d      	cmp	r3, #13
 800e848:	d016      	beq.n	800e878 <uxr_serialize_ActivityInfoVariant+0x4c>
 800e84a:	2b05      	cmp	r3, #5
 800e84c:	d002      	beq.n	800e854 <uxr_serialize_ActivityInfoVariant+0x28>
 800e84e:	4648      	mov	r0, r9
 800e850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e854:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e858:	4638      	mov	r0, r7
 800e85a:	f7fa fd4d 	bl	80092f8 <ucdr_serialize_int16_t>
 800e85e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800e862:	4681      	mov	r9, r0
 800e864:	4638      	mov	r0, r7
 800e866:	f7fa fc77 	bl	8009158 <ucdr_serialize_uint64_t>
 800e86a:	ea09 0000 	and.w	r0, r9, r0
 800e86e:	fa5f f980 	uxtb.w	r9, r0
 800e872:	4648      	mov	r0, r9
 800e874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e878:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e87c:	4638      	mov	r0, r7
 800e87e:	f7fa fd3b 	bl	80092f8 <ucdr_serialize_int16_t>
 800e882:	68e9      	ldr	r1, [r5, #12]
 800e884:	4681      	mov	r9, r0
 800e886:	4638      	mov	r0, r7
 800e888:	f7fa fa10 	bl	8008cac <ucdr_serialize_uint32_t>
 800e88c:	68eb      	ldr	r3, [r5, #12]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d0eb      	beq.n	800e86a <uxr_serialize_ActivityInfoVariant+0x3e>
 800e892:	b320      	cbz	r0, 800e8de <uxr_serialize_ActivityInfoVariant+0xb2>
 800e894:	f105 080c 	add.w	r8, r5, #12
 800e898:	2600      	movs	r6, #0
 800e89a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800e89e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800e8a2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800e8a6:	4638      	mov	r0, r7
 800e8a8:	f7f9 ffea 	bl	8008880 <ucdr_serialize_uint8_t>
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	d053      	beq.n	800e958 <uxr_serialize_ActivityInfoVariant+0x12c>
 800e8b0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800e8b4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800e8b8:	0074      	lsls	r4, r6, #1
 800e8ba:	00c9      	lsls	r1, r1, #3
 800e8bc:	2b03      	cmp	r3, #3
 800e8be:	d854      	bhi.n	800e96a <uxr_serialize_ActivityInfoVariant+0x13e>
 800e8c0:	e8df f003 	tbb	[pc, r3]
 800e8c4:	02102132 	.word	0x02102132
 800e8c8:	4441      	add	r1, r8
 800e8ca:	4638      	mov	r0, r7
 800e8cc:	6889      	ldr	r1, [r1, #8]
 800e8ce:	f004 f963 	bl	8012b98 <ucdr_serialize_string>
 800e8d2:	68ea      	ldr	r2, [r5, #12]
 800e8d4:	3601      	adds	r6, #1
 800e8d6:	4296      	cmp	r6, r2
 800e8d8:	d242      	bcs.n	800e960 <uxr_serialize_ActivityInfoVariant+0x134>
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d1dd      	bne.n	800e89a <uxr_serialize_ActivityInfoVariant+0x6e>
 800e8de:	f04f 0900 	mov.w	r9, #0
 800e8e2:	e7b4      	b.n	800e84e <uxr_serialize_ActivityInfoVariant+0x22>
 800e8e4:	3108      	adds	r1, #8
 800e8e6:	4441      	add	r1, r8
 800e8e8:	2210      	movs	r2, #16
 800e8ea:	4638      	mov	r0, r7
 800e8ec:	f004 f834 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e8f0:	4434      	add	r4, r6
 800e8f2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	f7fa f9d6 	bl	8008cac <ucdr_serialize_uint32_t>
 800e900:	4020      	ands	r0, r4
 800e902:	b2c0      	uxtb	r0, r0
 800e904:	e7e5      	b.n	800e8d2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800e906:	3108      	adds	r1, #8
 800e908:	4441      	add	r1, r8
 800e90a:	2204      	movs	r2, #4
 800e90c:	4638      	mov	r0, r7
 800e90e:	f004 f823 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e912:	4434      	add	r4, r6
 800e914:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e918:	4604      	mov	r4, r0
 800e91a:	8b19      	ldrh	r1, [r3, #24]
 800e91c:	4638      	mov	r0, r7
 800e91e:	f7f9 ffdb 	bl	80088d8 <ucdr_serialize_uint16_t>
 800e922:	4020      	ands	r0, r4
 800e924:	b2c0      	uxtb	r0, r0
 800e926:	e7d4      	b.n	800e8d2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800e928:	3108      	adds	r1, #8
 800e92a:	4441      	add	r1, r8
 800e92c:	2202      	movs	r2, #2
 800e92e:	4638      	mov	r0, r7
 800e930:	f004 f812 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800e934:	4434      	add	r4, r6
 800e936:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e93a:	4604      	mov	r4, r0
 800e93c:	7d99      	ldrb	r1, [r3, #22]
 800e93e:	4638      	mov	r0, r7
 800e940:	f7f9 ff9e 	bl	8008880 <ucdr_serialize_uint8_t>
 800e944:	4020      	ands	r0, r4
 800e946:	b2c0      	uxtb	r0, r0
 800e948:	e7c3      	b.n	800e8d2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800e94a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e94e:	4638      	mov	r0, r7
 800e950:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e954:	f7fa bcd0 	b.w	80092f8 <ucdr_serialize_int16_t>
 800e958:	68ea      	ldr	r2, [r5, #12]
 800e95a:	3601      	adds	r6, #1
 800e95c:	42b2      	cmp	r2, r6
 800e95e:	d8be      	bhi.n	800e8de <uxr_serialize_ActivityInfoVariant+0xb2>
 800e960:	ea09 0900 	and.w	r9, r9, r0
 800e964:	fa5f f989 	uxtb.w	r9, r9
 800e968:	e771      	b.n	800e84e <uxr_serialize_ActivityInfoVariant+0x22>
 800e96a:	68eb      	ldr	r3, [r5, #12]
 800e96c:	3601      	adds	r6, #1
 800e96e:	429e      	cmp	r6, r3
 800e970:	f10a 0a18 	add.w	sl, sl, #24
 800e974:	d395      	bcc.n	800e8a2 <uxr_serialize_ActivityInfoVariant+0x76>
 800e976:	e76a      	b.n	800e84e <uxr_serialize_ActivityInfoVariant+0x22>

0800e978 <uxr_deserialize_BaseObjectReply>:
 800e978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e97c:	2202      	movs	r2, #2
 800e97e:	4606      	mov	r6, r0
 800e980:	460f      	mov	r7, r1
 800e982:	f004 f84d 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e986:	2202      	movs	r2, #2
 800e988:	18b9      	adds	r1, r7, r2
 800e98a:	4605      	mov	r5, r0
 800e98c:	4630      	mov	r0, r6
 800e98e:	f004 f847 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800e992:	1d39      	adds	r1, r7, #4
 800e994:	4680      	mov	r8, r0
 800e996:	4630      	mov	r0, r6
 800e998:	f7f9 ff88 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e99c:	1d79      	adds	r1, r7, #5
 800e99e:	4604      	mov	r4, r0
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	f7f9 ff83 	bl	80088ac <ucdr_deserialize_uint8_t>
 800e9a6:	ea05 0508 	and.w	r5, r5, r8
 800e9aa:	402c      	ands	r4, r5
 800e9ac:	4020      	ands	r0, r4
 800e9ae:	b2c0      	uxtb	r0, r0
 800e9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e9b4 <uxr_serialize_ReadSpecification>:
 800e9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b8:	460e      	mov	r6, r1
 800e9ba:	7809      	ldrb	r1, [r1, #0]
 800e9bc:	4607      	mov	r7, r0
 800e9be:	f7f9 ff5f 	bl	8008880 <ucdr_serialize_uint8_t>
 800e9c2:	7871      	ldrb	r1, [r6, #1]
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	f7f9 ff5a 	bl	8008880 <ucdr_serialize_uint8_t>
 800e9cc:	78b1      	ldrb	r1, [r6, #2]
 800e9ce:	4004      	ands	r4, r0
 800e9d0:	4638      	mov	r0, r7
 800e9d2:	f7f9 ff27 	bl	8008824 <ucdr_serialize_bool>
 800e9d6:	78b3      	ldrb	r3, [r6, #2]
 800e9d8:	b2e4      	uxtb	r4, r4
 800e9da:	4004      	ands	r4, r0
 800e9dc:	b94b      	cbnz	r3, 800e9f2 <uxr_serialize_ReadSpecification+0x3e>
 800e9de:	7a31      	ldrb	r1, [r6, #8]
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	f7f9 ff1f 	bl	8008824 <ucdr_serialize_bool>
 800e9e6:	7a33      	ldrb	r3, [r6, #8]
 800e9e8:	4004      	ands	r4, r0
 800e9ea:	b943      	cbnz	r3, 800e9fe <uxr_serialize_ReadSpecification+0x4a>
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f2:	6871      	ldr	r1, [r6, #4]
 800e9f4:	4638      	mov	r0, r7
 800e9f6:	f004 f8cf 	bl	8012b98 <ucdr_serialize_string>
 800e9fa:	4004      	ands	r4, r0
 800e9fc:	e7ef      	b.n	800e9de <uxr_serialize_ReadSpecification+0x2a>
 800e9fe:	8971      	ldrh	r1, [r6, #10]
 800ea00:	4638      	mov	r0, r7
 800ea02:	f7f9 ff69 	bl	80088d8 <ucdr_serialize_uint16_t>
 800ea06:	89b1      	ldrh	r1, [r6, #12]
 800ea08:	4605      	mov	r5, r0
 800ea0a:	4638      	mov	r0, r7
 800ea0c:	f7f9 ff64 	bl	80088d8 <ucdr_serialize_uint16_t>
 800ea10:	89f1      	ldrh	r1, [r6, #14]
 800ea12:	4005      	ands	r5, r0
 800ea14:	4638      	mov	r0, r7
 800ea16:	f7f9 ff5f 	bl	80088d8 <ucdr_serialize_uint16_t>
 800ea1a:	8a31      	ldrh	r1, [r6, #16]
 800ea1c:	4680      	mov	r8, r0
 800ea1e:	4638      	mov	r0, r7
 800ea20:	f7f9 ff5a 	bl	80088d8 <ucdr_serialize_uint16_t>
 800ea24:	b2ed      	uxtb	r5, r5
 800ea26:	4025      	ands	r5, r4
 800ea28:	ea08 0505 	and.w	r5, r8, r5
 800ea2c:	ea00 0405 	and.w	r4, r0, r5
 800ea30:	4620      	mov	r0, r4
 800ea32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea36:	bf00      	nop

0800ea38 <uxr_serialize_CREATE_CLIENT_Payload>:
 800ea38:	f7ff baf2 	b.w	800e020 <uxr_serialize_CLIENT_Representation>

0800ea3c <uxr_serialize_CREATE_Payload>:
 800ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3e:	2202      	movs	r2, #2
 800ea40:	4607      	mov	r7, r0
 800ea42:	460e      	mov	r6, r1
 800ea44:	f003 ff88 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ea48:	2202      	movs	r2, #2
 800ea4a:	18b1      	adds	r1, r6, r2
 800ea4c:	4605      	mov	r5, r0
 800ea4e:	4638      	mov	r0, r7
 800ea50:	f003 ff82 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ea54:	7931      	ldrb	r1, [r6, #4]
 800ea56:	4604      	mov	r4, r0
 800ea58:	4638      	mov	r0, r7
 800ea5a:	f7f9 ff11 	bl	8008880 <ucdr_serialize_uint8_t>
 800ea5e:	b170      	cbz	r0, 800ea7e <uxr_serialize_CREATE_Payload+0x42>
 800ea60:	7933      	ldrb	r3, [r6, #4]
 800ea62:	402c      	ands	r4, r5
 800ea64:	3b01      	subs	r3, #1
 800ea66:	b2e4      	uxtb	r4, r4
 800ea68:	2b0d      	cmp	r3, #13
 800ea6a:	d809      	bhi.n	800ea80 <uxr_serialize_CREATE_Payload+0x44>
 800ea6c:	e8df f003 	tbb	[pc, r3]
 800ea70:	23230a4c 	.word	0x23230a4c
 800ea74:	0a0a0a0a 	.word	0x0a0a0a0a
 800ea78:	12121208 	.word	0x12121208
 800ea7c:	3e45      	.short	0x3e45
 800ea7e:	2400      	movs	r4, #0
 800ea80:	4620      	mov	r0, r4
 800ea82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea84:	f106 0108 	add.w	r1, r6, #8
 800ea88:	4638      	mov	r0, r7
 800ea8a:	f7ff fbcf 	bl	800e22c <uxr_serialize_DATAWRITER_Representation>
 800ea8e:	4004      	ands	r4, r0
 800ea90:	4620      	mov	r0, r4
 800ea92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea94:	7a31      	ldrb	r1, [r6, #8]
 800ea96:	4638      	mov	r0, r7
 800ea98:	f7f9 fef2 	bl	8008880 <ucdr_serialize_uint8_t>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d0ee      	beq.n	800ea7e <uxr_serialize_CREATE_Payload+0x42>
 800eaa0:	7a33      	ldrb	r3, [r6, #8]
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d001      	beq.n	800eaaa <uxr_serialize_CREATE_Payload+0x6e>
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d1ea      	bne.n	800ea80 <uxr_serialize_CREATE_Payload+0x44>
 800eaaa:	68f1      	ldr	r1, [r6, #12]
 800eaac:	4638      	mov	r0, r7
 800eaae:	f004 f873 	bl	8012b98 <ucdr_serialize_string>
 800eab2:	4004      	ands	r4, r0
 800eab4:	e7e4      	b.n	800ea80 <uxr_serialize_CREATE_Payload+0x44>
 800eab6:	7a31      	ldrb	r1, [r6, #8]
 800eab8:	4638      	mov	r0, r7
 800eaba:	f7f9 fee1 	bl	8008880 <ucdr_serialize_uint8_t>
 800eabe:	4605      	mov	r5, r0
 800eac0:	b158      	cbz	r0, 800eada <uxr_serialize_CREATE_Payload+0x9e>
 800eac2:	7a33      	ldrb	r3, [r6, #8]
 800eac4:	2b02      	cmp	r3, #2
 800eac6:	d034      	beq.n	800eb32 <uxr_serialize_CREATE_Payload+0xf6>
 800eac8:	2b03      	cmp	r3, #3
 800eaca:	d106      	bne.n	800eada <uxr_serialize_CREATE_Payload+0x9e>
 800eacc:	68f2      	ldr	r2, [r6, #12]
 800eace:	f106 0110 	add.w	r1, r6, #16
 800ead2:	4638      	mov	r0, r7
 800ead4:	f004 f834 	bl	8012b40 <ucdr_serialize_sequence_uint8_t>
 800ead8:	4605      	mov	r5, r0
 800eada:	2202      	movs	r2, #2
 800eadc:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800eae0:	4638      	mov	r0, r7
 800eae2:	f003 ff39 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800eae6:	4028      	ands	r0, r5
 800eae8:	4004      	ands	r4, r0
 800eaea:	e7c9      	b.n	800ea80 <uxr_serialize_CREATE_Payload+0x44>
 800eaec:	f106 0108 	add.w	r1, r6, #8
 800eaf0:	4638      	mov	r0, r7
 800eaf2:	f7ff fa95 	bl	800e020 <uxr_serialize_CLIENT_Representation>
 800eaf6:	4004      	ands	r4, r0
 800eaf8:	e7c2      	b.n	800ea80 <uxr_serialize_CREATE_Payload+0x44>
 800eafa:	f106 0108 	add.w	r1, r6, #8
 800eafe:	4638      	mov	r0, r7
 800eb00:	f7ff fb4a 	bl	800e198 <uxr_serialize_AGENT_Representation>
 800eb04:	4004      	ands	r4, r0
 800eb06:	e7bb      	b.n	800ea80 <uxr_serialize_CREATE_Payload+0x44>
 800eb08:	7a31      	ldrb	r1, [r6, #8]
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	f7f9 feb8 	bl	8008880 <ucdr_serialize_uint8_t>
 800eb10:	4605      	mov	r5, r0
 800eb12:	b130      	cbz	r0, 800eb22 <uxr_serialize_CREATE_Payload+0xe6>
 800eb14:	7a33      	ldrb	r3, [r6, #8]
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d011      	beq.n	800eb3e <uxr_serialize_CREATE_Payload+0x102>
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d015      	beq.n	800eb4a <uxr_serialize_CREATE_Payload+0x10e>
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d00d      	beq.n	800eb3e <uxr_serialize_CREATE_Payload+0x102>
 800eb22:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800eb26:	4638      	mov	r0, r7
 800eb28:	f7fa fbe6 	bl	80092f8 <ucdr_serialize_int16_t>
 800eb2c:	4028      	ands	r0, r5
 800eb2e:	4004      	ands	r4, r0
 800eb30:	e7a6      	b.n	800ea80 <uxr_serialize_CREATE_Payload+0x44>
 800eb32:	68f1      	ldr	r1, [r6, #12]
 800eb34:	4638      	mov	r0, r7
 800eb36:	f004 f82f 	bl	8012b98 <ucdr_serialize_string>
 800eb3a:	4605      	mov	r5, r0
 800eb3c:	e7cd      	b.n	800eada <uxr_serialize_CREATE_Payload+0x9e>
 800eb3e:	68f1      	ldr	r1, [r6, #12]
 800eb40:	4638      	mov	r0, r7
 800eb42:	f004 f829 	bl	8012b98 <ucdr_serialize_string>
 800eb46:	4605      	mov	r5, r0
 800eb48:	e7eb      	b.n	800eb22 <uxr_serialize_CREATE_Payload+0xe6>
 800eb4a:	68f2      	ldr	r2, [r6, #12]
 800eb4c:	f106 0110 	add.w	r1, r6, #16
 800eb50:	4638      	mov	r0, r7
 800eb52:	f003 fff5 	bl	8012b40 <ucdr_serialize_sequence_uint8_t>
 800eb56:	4605      	mov	r5, r0
 800eb58:	e7e3      	b.n	800eb22 <uxr_serialize_CREATE_Payload+0xe6>
 800eb5a:	bf00      	nop

0800eb5c <uxr_deserialize_GET_INFO_Payload>:
 800eb5c:	b570      	push	{r4, r5, r6, lr}
 800eb5e:	2202      	movs	r2, #2
 800eb60:	4605      	mov	r5, r0
 800eb62:	460e      	mov	r6, r1
 800eb64:	f003 ff5c 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800eb68:	2202      	movs	r2, #2
 800eb6a:	18b1      	adds	r1, r6, r2
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	4628      	mov	r0, r5
 800eb70:	f003 ff56 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800eb74:	1d31      	adds	r1, r6, #4
 800eb76:	4004      	ands	r4, r0
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f7fa f9c7 	bl	8008f0c <ucdr_deserialize_uint32_t>
 800eb7e:	b2e4      	uxtb	r4, r4
 800eb80:	4020      	ands	r0, r4
 800eb82:	bd70      	pop	{r4, r5, r6, pc}

0800eb84 <uxr_serialize_DELETE_Payload>:
 800eb84:	b570      	push	{r4, r5, r6, lr}
 800eb86:	2202      	movs	r2, #2
 800eb88:	4605      	mov	r5, r0
 800eb8a:	460e      	mov	r6, r1
 800eb8c:	f003 fee4 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800eb90:	2202      	movs	r2, #2
 800eb92:	4604      	mov	r4, r0
 800eb94:	18b1      	adds	r1, r6, r2
 800eb96:	4628      	mov	r0, r5
 800eb98:	f003 fede 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800eb9c:	4020      	ands	r0, r4
 800eb9e:	b2c0      	uxtb	r0, r0
 800eba0:	bd70      	pop	{r4, r5, r6, pc}
 800eba2:	bf00      	nop

0800eba4 <uxr_deserialize_STATUS_AGENT_Payload>:
 800eba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eba8:	4605      	mov	r5, r0
 800ebaa:	460e      	mov	r6, r1
 800ebac:	f7f9 fe7e 	bl	80088ac <ucdr_deserialize_uint8_t>
 800ebb0:	1c71      	adds	r1, r6, #1
 800ebb2:	4604      	mov	r4, r0
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	f7f9 fe79 	bl	80088ac <ucdr_deserialize_uint8_t>
 800ebba:	2204      	movs	r2, #4
 800ebbc:	18b1      	adds	r1, r6, r2
 800ebbe:	4680      	mov	r8, r0
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	f003 ff2d 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800ebc6:	f106 0108 	add.w	r1, r6, #8
 800ebca:	4607      	mov	r7, r0
 800ebcc:	2202      	movs	r2, #2
 800ebce:	4628      	mov	r0, r5
 800ebd0:	f003 ff26 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800ebd4:	ea04 0308 	and.w	r3, r4, r8
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	ea03 0407 	and.w	r4, r3, r7
 800ebde:	2202      	movs	r2, #2
 800ebe0:	4607      	mov	r7, r0
 800ebe2:	f106 010a 	add.w	r1, r6, #10
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f003 ff1a 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800ebec:	f106 010c 	add.w	r1, r6, #12
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	461d      	mov	r5, r3
 800ebf6:	f7f9 fe2b 	bl	8008850 <ucdr_deserialize_bool>
 800ebfa:	403c      	ands	r4, r7
 800ebfc:	4025      	ands	r5, r4
 800ebfe:	4028      	ands	r0, r5
 800ec00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec04 <uxr_deserialize_STATUS_Payload>:
 800ec04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec08:	2202      	movs	r2, #2
 800ec0a:	4606      	mov	r6, r0
 800ec0c:	460f      	mov	r7, r1
 800ec0e:	f003 ff07 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800ec12:	2202      	movs	r2, #2
 800ec14:	18b9      	adds	r1, r7, r2
 800ec16:	4605      	mov	r5, r0
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f003 ff01 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800ec1e:	1d39      	adds	r1, r7, #4
 800ec20:	4680      	mov	r8, r0
 800ec22:	4630      	mov	r0, r6
 800ec24:	f7f9 fe42 	bl	80088ac <ucdr_deserialize_uint8_t>
 800ec28:	1d79      	adds	r1, r7, #5
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f7f9 fe3d 	bl	80088ac <ucdr_deserialize_uint8_t>
 800ec32:	ea05 0508 	and.w	r5, r5, r8
 800ec36:	402c      	ands	r4, r5
 800ec38:	4020      	ands	r0, r4
 800ec3a:	b2c0      	uxtb	r0, r0
 800ec3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec40 <uxr_serialize_INFO_Payload>:
 800ec40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec44:	2202      	movs	r2, #2
 800ec46:	460c      	mov	r4, r1
 800ec48:	4605      	mov	r5, r0
 800ec4a:	f003 fe85 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ec4e:	2202      	movs	r2, #2
 800ec50:	18a1      	adds	r1, r4, r2
 800ec52:	4680      	mov	r8, r0
 800ec54:	4628      	mov	r0, r5
 800ec56:	f003 fe7f 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ec5a:	7921      	ldrb	r1, [r4, #4]
 800ec5c:	4607      	mov	r7, r0
 800ec5e:	4628      	mov	r0, r5
 800ec60:	f7f9 fe0e 	bl	8008880 <ucdr_serialize_uint8_t>
 800ec64:	7961      	ldrb	r1, [r4, #5]
 800ec66:	4606      	mov	r6, r0
 800ec68:	4628      	mov	r0, r5
 800ec6a:	f7f9 fe09 	bl	8008880 <ucdr_serialize_uint8_t>
 800ec6e:	ea08 0807 	and.w	r8, r8, r7
 800ec72:	ea06 0608 	and.w	r6, r6, r8
 800ec76:	4006      	ands	r6, r0
 800ec78:	7a21      	ldrb	r1, [r4, #8]
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	f7f9 fdd2 	bl	8008824 <ucdr_serialize_bool>
 800ec80:	7a23      	ldrb	r3, [r4, #8]
 800ec82:	b2f7      	uxtb	r7, r6
 800ec84:	4606      	mov	r6, r0
 800ec86:	b96b      	cbnz	r3, 800eca4 <uxr_serialize_INFO_Payload+0x64>
 800ec88:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	f7f9 fdc9 	bl	8008824 <ucdr_serialize_bool>
 800ec92:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800ec96:	4030      	ands	r0, r6
 800ec98:	b2c6      	uxtb	r6, r0
 800ec9a:	b983      	cbnz	r3, 800ecbe <uxr_serialize_INFO_Payload+0x7e>
 800ec9c:	ea06 0007 	and.w	r0, r6, r7
 800eca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca4:	7b21      	ldrb	r1, [r4, #12]
 800eca6:	4628      	mov	r0, r5
 800eca8:	f7f9 fdea 	bl	8008880 <ucdr_serialize_uint8_t>
 800ecac:	b188      	cbz	r0, 800ecd2 <uxr_serialize_INFO_Payload+0x92>
 800ecae:	f104 010c 	add.w	r1, r4, #12
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f7ff fae2 	bl	800e27c <uxr_serialize_ObjectVariant.part.0>
 800ecb8:	4030      	ands	r0, r6
 800ecba:	b2c6      	uxtb	r6, r0
 800ecbc:	e7e4      	b.n	800ec88 <uxr_serialize_INFO_Payload+0x48>
 800ecbe:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	f7ff fdb2 	bl	800e82c <uxr_serialize_ActivityInfoVariant>
 800ecc8:	4006      	ands	r6, r0
 800ecca:	ea06 0007 	and.w	r0, r6, r7
 800ecce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd2:	4606      	mov	r6, r0
 800ecd4:	e7d8      	b.n	800ec88 <uxr_serialize_INFO_Payload+0x48>
 800ecd6:	bf00      	nop

0800ecd8 <uxr_serialize_READ_DATA_Payload>:
 800ecd8:	b570      	push	{r4, r5, r6, lr}
 800ecda:	2202      	movs	r2, #2
 800ecdc:	4605      	mov	r5, r0
 800ecde:	460e      	mov	r6, r1
 800ece0:	f003 fe3a 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ece4:	2202      	movs	r2, #2
 800ece6:	18b1      	adds	r1, r6, r2
 800ece8:	4604      	mov	r4, r0
 800ecea:	4628      	mov	r0, r5
 800ecec:	f003 fe34 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ecf0:	1d31      	adds	r1, r6, #4
 800ecf2:	4004      	ands	r4, r0
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	f7ff fe5d 	bl	800e9b4 <uxr_serialize_ReadSpecification>
 800ecfa:	b2e4      	uxtb	r4, r4
 800ecfc:	4020      	ands	r0, r4
 800ecfe:	bd70      	pop	{r4, r5, r6, pc}

0800ed00 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	2202      	movs	r2, #2
 800ed04:	4605      	mov	r5, r0
 800ed06:	460e      	mov	r6, r1
 800ed08:	f003 fe26 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ed0c:	2202      	movs	r2, #2
 800ed0e:	4604      	mov	r4, r0
 800ed10:	18b1      	adds	r1, r6, r2
 800ed12:	4628      	mov	r0, r5
 800ed14:	f003 fe20 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ed18:	4020      	ands	r0, r4
 800ed1a:	b2c0      	uxtb	r0, r0
 800ed1c:	bd70      	pop	{r4, r5, r6, pc}
 800ed1e:	bf00      	nop

0800ed20 <uxr_serialize_ACKNACK_Payload>:
 800ed20:	b570      	push	{r4, r5, r6, lr}
 800ed22:	460c      	mov	r4, r1
 800ed24:	460e      	mov	r6, r1
 800ed26:	f834 1b02 	ldrh.w	r1, [r4], #2
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	f7f9 fdd4 	bl	80088d8 <ucdr_serialize_uint16_t>
 800ed30:	2202      	movs	r2, #2
 800ed32:	4621      	mov	r1, r4
 800ed34:	4604      	mov	r4, r0
 800ed36:	4628      	mov	r0, r5
 800ed38:	f003 fe0e 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ed3c:	7931      	ldrb	r1, [r6, #4]
 800ed3e:	4004      	ands	r4, r0
 800ed40:	4628      	mov	r0, r5
 800ed42:	f7f9 fd9d 	bl	8008880 <ucdr_serialize_uint8_t>
 800ed46:	b2e4      	uxtb	r4, r4
 800ed48:	4020      	ands	r0, r4
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}

0800ed4c <uxr_deserialize_ACKNACK_Payload>:
 800ed4c:	b570      	push	{r4, r5, r6, lr}
 800ed4e:	4605      	mov	r5, r0
 800ed50:	460e      	mov	r6, r1
 800ed52:	f7f9 fec1 	bl	8008ad8 <ucdr_deserialize_uint16_t>
 800ed56:	2202      	movs	r2, #2
 800ed58:	18b1      	adds	r1, r6, r2
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	f003 fe5f 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800ed62:	1d31      	adds	r1, r6, #4
 800ed64:	4004      	ands	r4, r0
 800ed66:	4628      	mov	r0, r5
 800ed68:	f7f9 fda0 	bl	80088ac <ucdr_deserialize_uint8_t>
 800ed6c:	b2e4      	uxtb	r4, r4
 800ed6e:	4020      	ands	r0, r4
 800ed70:	bd70      	pop	{r4, r5, r6, pc}
 800ed72:	bf00      	nop

0800ed74 <uxr_serialize_HEARTBEAT_Payload>:
 800ed74:	b570      	push	{r4, r5, r6, lr}
 800ed76:	460d      	mov	r5, r1
 800ed78:	8809      	ldrh	r1, [r1, #0]
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	f7f9 fdac 	bl	80088d8 <ucdr_serialize_uint16_t>
 800ed80:	8869      	ldrh	r1, [r5, #2]
 800ed82:	4604      	mov	r4, r0
 800ed84:	4630      	mov	r0, r6
 800ed86:	f7f9 fda7 	bl	80088d8 <ucdr_serialize_uint16_t>
 800ed8a:	7929      	ldrb	r1, [r5, #4]
 800ed8c:	4004      	ands	r4, r0
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f7f9 fd76 	bl	8008880 <ucdr_serialize_uint8_t>
 800ed94:	b2e4      	uxtb	r4, r4
 800ed96:	4020      	ands	r0, r4
 800ed98:	bd70      	pop	{r4, r5, r6, pc}
 800ed9a:	bf00      	nop

0800ed9c <uxr_deserialize_HEARTBEAT_Payload>:
 800ed9c:	b570      	push	{r4, r5, r6, lr}
 800ed9e:	4605      	mov	r5, r0
 800eda0:	460e      	mov	r6, r1
 800eda2:	f7f9 fe99 	bl	8008ad8 <ucdr_deserialize_uint16_t>
 800eda6:	1cb1      	adds	r1, r6, #2
 800eda8:	4604      	mov	r4, r0
 800edaa:	4628      	mov	r0, r5
 800edac:	f7f9 fe94 	bl	8008ad8 <ucdr_deserialize_uint16_t>
 800edb0:	1d31      	adds	r1, r6, #4
 800edb2:	4004      	ands	r4, r0
 800edb4:	4628      	mov	r0, r5
 800edb6:	f7f9 fd79 	bl	80088ac <ucdr_deserialize_uint8_t>
 800edba:	b2e4      	uxtb	r4, r4
 800edbc:	4020      	ands	r0, r4
 800edbe:	bd70      	pop	{r4, r5, r6, pc}

0800edc0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800edc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc4:	4605      	mov	r5, r0
 800edc6:	460e      	mov	r6, r1
 800edc8:	f7fa fc22 	bl	8009610 <ucdr_deserialize_int32_t>
 800edcc:	1d31      	adds	r1, r6, #4
 800edce:	4607      	mov	r7, r0
 800edd0:	4628      	mov	r0, r5
 800edd2:	f7fa f89b 	bl	8008f0c <ucdr_deserialize_uint32_t>
 800edd6:	f106 0108 	add.w	r1, r6, #8
 800edda:	4680      	mov	r8, r0
 800eddc:	4628      	mov	r0, r5
 800edde:	f7fa fc17 	bl	8009610 <ucdr_deserialize_int32_t>
 800ede2:	f106 010c 	add.w	r1, r6, #12
 800ede6:	4604      	mov	r4, r0
 800ede8:	4628      	mov	r0, r5
 800edea:	f7fa f88f 	bl	8008f0c <ucdr_deserialize_uint32_t>
 800edee:	ea07 0708 	and.w	r7, r7, r8
 800edf2:	403c      	ands	r4, r7
 800edf4:	f106 0110 	add.w	r1, r6, #16
 800edf8:	4004      	ands	r4, r0
 800edfa:	4628      	mov	r0, r5
 800edfc:	f7fa fc08 	bl	8009610 <ucdr_deserialize_int32_t>
 800ee00:	f106 0114 	add.w	r1, r6, #20
 800ee04:	4607      	mov	r7, r0
 800ee06:	4628      	mov	r0, r5
 800ee08:	f7fa f880 	bl	8008f0c <ucdr_deserialize_uint32_t>
 800ee0c:	b2e4      	uxtb	r4, r4
 800ee0e:	403c      	ands	r4, r7
 800ee10:	4020      	ands	r0, r4
 800ee12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee16:	bf00      	nop

0800ee18 <uxr_serialize_SampleIdentity>:
 800ee18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1c:	220c      	movs	r2, #12
 800ee1e:	4604      	mov	r4, r0
 800ee20:	460d      	mov	r5, r1
 800ee22:	f003 fd99 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ee26:	2203      	movs	r2, #3
 800ee28:	f105 010c 	add.w	r1, r5, #12
 800ee2c:	4607      	mov	r7, r0
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f003 fd92 	bl	8012958 <ucdr_serialize_array_uint8_t>
 800ee34:	7be9      	ldrb	r1, [r5, #15]
 800ee36:	4680      	mov	r8, r0
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f7f9 fd21 	bl	8008880 <ucdr_serialize_uint8_t>
 800ee3e:	6929      	ldr	r1, [r5, #16]
 800ee40:	4606      	mov	r6, r0
 800ee42:	4620      	mov	r0, r4
 800ee44:	f7fa fb4c 	bl	80094e0 <ucdr_serialize_int32_t>
 800ee48:	6969      	ldr	r1, [r5, #20]
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	ea07 0708 	and.w	r7, r7, r8
 800ee52:	461c      	mov	r4, r3
 800ee54:	f7f9 ff2a 	bl	8008cac <ucdr_serialize_uint32_t>
 800ee58:	403e      	ands	r6, r7
 800ee5a:	4034      	ands	r4, r6
 800ee5c:	4020      	ands	r0, r4
 800ee5e:	b2c0      	uxtb	r0, r0
 800ee60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee64 <uxr_deserialize_SampleIdentity>:
 800ee64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee68:	220c      	movs	r2, #12
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	460d      	mov	r5, r1
 800ee6e:	f003 fdd7 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800ee72:	2203      	movs	r2, #3
 800ee74:	f105 010c 	add.w	r1, r5, #12
 800ee78:	4607      	mov	r7, r0
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f003 fdd0 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 800ee80:	f105 010f 	add.w	r1, r5, #15
 800ee84:	4680      	mov	r8, r0
 800ee86:	4620      	mov	r0, r4
 800ee88:	f7f9 fd10 	bl	80088ac <ucdr_deserialize_uint8_t>
 800ee8c:	f105 0110 	add.w	r1, r5, #16
 800ee90:	4606      	mov	r6, r0
 800ee92:	4620      	mov	r0, r4
 800ee94:	f7fa fbbc 	bl	8009610 <ucdr_deserialize_int32_t>
 800ee98:	f105 0114 	add.w	r1, r5, #20
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	4620      	mov	r0, r4
 800eea0:	ea07 0708 	and.w	r7, r7, r8
 800eea4:	461c      	mov	r4, r3
 800eea6:	f7fa f831 	bl	8008f0c <ucdr_deserialize_uint32_t>
 800eeaa:	403e      	ands	r6, r7
 800eeac:	4034      	ands	r4, r6
 800eeae:	4020      	ands	r0, r4
 800eeb0:	b2c0      	uxtb	r0, r0
 800eeb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb6:	bf00      	nop

0800eeb8 <rcl_client_get_rmw_handle>:
 800eeb8:	b118      	cbz	r0, 800eec2 <rcl_client_get_rmw_handle+0xa>
 800eeba:	6800      	ldr	r0, [r0, #0]
 800eebc:	b108      	cbz	r0, 800eec2 <rcl_client_get_rmw_handle+0xa>
 800eebe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800eec2:	4770      	bx	lr

0800eec4 <rcl_send_request>:
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	b1e8      	cbz	r0, 800ef06 <rcl_send_request+0x42>
 800eeca:	4604      	mov	r4, r0
 800eecc:	6800      	ldr	r0, [r0, #0]
 800eece:	b1d0      	cbz	r0, 800ef06 <rcl_send_request+0x42>
 800eed0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800eed4:	b1bb      	cbz	r3, 800ef06 <rcl_send_request+0x42>
 800eed6:	460e      	mov	r6, r1
 800eed8:	b1d1      	cbz	r1, 800ef10 <rcl_send_request+0x4c>
 800eeda:	4615      	mov	r5, r2
 800eedc:	b1c2      	cbz	r2, 800ef10 <rcl_send_request+0x4c>
 800eede:	2105      	movs	r1, #5
 800eee0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800eee4:	f002 fb38 	bl	8011558 <__atomic_load_8>
 800eee8:	6823      	ldr	r3, [r4, #0]
 800eeea:	e9c5 0100 	strd	r0, r1, [r5]
 800eeee:	462a      	mov	r2, r5
 800eef0:	4631      	mov	r1, r6
 800eef2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800eef6:	f003 f9bd 	bl	8012274 <rmw_send_request>
 800eefa:	4606      	mov	r6, r0
 800eefc:	b160      	cbz	r0, 800ef18 <rcl_send_request+0x54>
 800eefe:	2601      	movs	r6, #1
 800ef00:	4630      	mov	r0, r6
 800ef02:	b002      	add	sp, #8
 800ef04:	bd70      	pop	{r4, r5, r6, pc}
 800ef06:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	b002      	add	sp, #8
 800ef0e:	bd70      	pop	{r4, r5, r6, pc}
 800ef10:	260b      	movs	r6, #11
 800ef12:	4630      	mov	r0, r6
 800ef14:	b002      	add	sp, #8
 800ef16:	bd70      	pop	{r4, r5, r6, pc}
 800ef18:	6820      	ldr	r0, [r4, #0]
 800ef1a:	2105      	movs	r1, #5
 800ef1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef20:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800ef24:	9100      	str	r1, [sp, #0]
 800ef26:	f002 fb83 	bl	8011630 <__atomic_exchange_8>
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	b002      	add	sp, #8
 800ef2e:	bd70      	pop	{r4, r5, r6, pc}

0800ef30 <rcl_take_response>:
 800ef30:	b570      	push	{r4, r5, r6, lr}
 800ef32:	468e      	mov	lr, r1
 800ef34:	460c      	mov	r4, r1
 800ef36:	4616      	mov	r6, r2
 800ef38:	4605      	mov	r5, r0
 800ef3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef3e:	b08c      	sub	sp, #48	; 0x30
 800ef40:	f10d 0c18 	add.w	ip, sp, #24
 800ef44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ef4c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ef50:	b35d      	cbz	r5, 800efaa <rcl_take_response+0x7a>
 800ef52:	682b      	ldr	r3, [r5, #0]
 800ef54:	b34b      	cbz	r3, 800efaa <rcl_take_response+0x7a>
 800ef56:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ef5a:	b330      	cbz	r0, 800efaa <rcl_take_response+0x7a>
 800ef5c:	b346      	cbz	r6, 800efb0 <rcl_take_response+0x80>
 800ef5e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800efb8 <rcl_take_response+0x88>
 800ef62:	2300      	movs	r3, #0
 800ef64:	f88d 3007 	strb.w	r3, [sp, #7]
 800ef68:	4632      	mov	r2, r6
 800ef6a:	f10d 0307 	add.w	r3, sp, #7
 800ef6e:	a902      	add	r1, sp, #8
 800ef70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef74:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ef78:	f003 fa84 	bl	8012484 <rmw_take_response>
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	b9c8      	cbnz	r0, 800efb4 <rcl_take_response+0x84>
 800ef80:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ef84:	f240 13f5 	movw	r3, #501	; 0x1f5
 800ef88:	2a00      	cmp	r2, #0
 800ef8a:	bf08      	it	eq
 800ef8c:	461d      	moveq	r5, r3
 800ef8e:	f10d 0e18 	add.w	lr, sp, #24
 800ef92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef96:	46a4      	mov	ip, r4
 800ef98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef9c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800efa0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800efa4:	4628      	mov	r0, r5
 800efa6:	b00c      	add	sp, #48	; 0x30
 800efa8:	bd70      	pop	{r4, r5, r6, pc}
 800efaa:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800efae:	e7ee      	b.n	800ef8e <rcl_take_response+0x5e>
 800efb0:	250b      	movs	r5, #11
 800efb2:	e7ec      	b.n	800ef8e <rcl_take_response+0x5e>
 800efb4:	2501      	movs	r5, #1
 800efb6:	e7ea      	b.n	800ef8e <rcl_take_response+0x5e>
	...

0800efc0 <rcl_client_is_valid>:
 800efc0:	b130      	cbz	r0, 800efd0 <rcl_client_is_valid+0x10>
 800efc2:	6800      	ldr	r0, [r0, #0]
 800efc4:	b120      	cbz	r0, 800efd0 <rcl_client_is_valid+0x10>
 800efc6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800efca:	3800      	subs	r0, #0
 800efcc:	bf18      	it	ne
 800efce:	2001      	movne	r0, #1
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop

0800efd4 <rcl_convert_rmw_ret_to_rcl_ret>:
 800efd4:	280b      	cmp	r0, #11
 800efd6:	dc0d      	bgt.n	800eff4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800efd8:	2800      	cmp	r0, #0
 800efda:	db09      	blt.n	800eff0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800efdc:	280b      	cmp	r0, #11
 800efde:	d807      	bhi.n	800eff0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800efe0:	e8df f000 	tbb	[pc, r0]
 800efe4:	07060607 	.word	0x07060607
 800efe8:	06060606 	.word	0x06060606
 800efec:	07070606 	.word	0x07070606
 800eff0:	2001      	movs	r0, #1
 800eff2:	4770      	bx	lr
 800eff4:	28cb      	cmp	r0, #203	; 0xcb
 800eff6:	bf18      	it	ne
 800eff8:	2001      	movne	r0, #1
 800effa:	4770      	bx	lr

0800effc <rcl_get_zero_initialized_context>:
 800effc:	4a03      	ldr	r2, [pc, #12]	; (800f00c <rcl_get_zero_initialized_context+0x10>)
 800effe:	4603      	mov	r3, r0
 800f000:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f004:	e883 0003 	stmia.w	r3, {r0, r1}
 800f008:	4618      	mov	r0, r3
 800f00a:	4770      	bx	lr
 800f00c:	08016708 	.word	0x08016708

0800f010 <rcl_context_is_valid>:
 800f010:	b118      	cbz	r0, 800f01a <rcl_context_is_valid+0xa>
 800f012:	6840      	ldr	r0, [r0, #4]
 800f014:	3800      	subs	r0, #0
 800f016:	bf18      	it	ne
 800f018:	2001      	movne	r0, #1
 800f01a:	4770      	bx	lr

0800f01c <__cleanup_context>:
 800f01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f020:	4606      	mov	r6, r0
 800f022:	6800      	ldr	r0, [r0, #0]
 800f024:	2300      	movs	r3, #0
 800f026:	6073      	str	r3, [r6, #4]
 800f028:	2800      	cmp	r0, #0
 800f02a:	d049      	beq.n	800f0c0 <__cleanup_context+0xa4>
 800f02c:	6947      	ldr	r7, [r0, #20]
 800f02e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f032:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f036:	b137      	cbz	r7, 800f046 <__cleanup_context+0x2a>
 800f038:	3014      	adds	r0, #20
 800f03a:	f000 fa6d 	bl	800f518 <rcl_init_options_fini>
 800f03e:	4607      	mov	r7, r0
 800f040:	2800      	cmp	r0, #0
 800f042:	d144      	bne.n	800f0ce <__cleanup_context+0xb2>
 800f044:	6830      	ldr	r0, [r6, #0]
 800f046:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f048:	b143      	cbz	r3, 800f05c <__cleanup_context+0x40>
 800f04a:	3028      	adds	r0, #40	; 0x28
 800f04c:	f003 f86e 	bl	801212c <rmw_context_fini>
 800f050:	b118      	cbz	r0, 800f05a <__cleanup_context+0x3e>
 800f052:	2f00      	cmp	r7, #0
 800f054:	d03e      	beq.n	800f0d4 <__cleanup_context+0xb8>
 800f056:	f7fc f88f 	bl	800b178 <rcutils_reset_error>
 800f05a:	6830      	ldr	r0, [r6, #0]
 800f05c:	6a03      	ldr	r3, [r0, #32]
 800f05e:	b1db      	cbz	r3, 800f098 <__cleanup_context+0x7c>
 800f060:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f064:	2a01      	cmp	r2, #1
 800f066:	f17c 0100 	sbcs.w	r1, ip, #0
 800f06a:	db11      	blt.n	800f090 <__cleanup_context+0x74>
 800f06c:	2400      	movs	r4, #0
 800f06e:	4625      	mov	r5, r4
 800f070:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f074:	4649      	mov	r1, r9
 800f076:	b1b8      	cbz	r0, 800f0a8 <__cleanup_context+0x8c>
 800f078:	47c0      	blx	r8
 800f07a:	6833      	ldr	r3, [r6, #0]
 800f07c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f080:	3401      	adds	r4, #1
 800f082:	f145 0500 	adc.w	r5, r5, #0
 800f086:	4294      	cmp	r4, r2
 800f088:	eb75 010c 	sbcs.w	r1, r5, ip
 800f08c:	6a1b      	ldr	r3, [r3, #32]
 800f08e:	dbef      	blt.n	800f070 <__cleanup_context+0x54>
 800f090:	4618      	mov	r0, r3
 800f092:	4649      	mov	r1, r9
 800f094:	47c0      	blx	r8
 800f096:	6830      	ldr	r0, [r6, #0]
 800f098:	4649      	mov	r1, r9
 800f09a:	47c0      	blx	r8
 800f09c:	2300      	movs	r3, #0
 800f09e:	e9c6 3300 	strd	r3, r3, [r6]
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0a8:	3401      	adds	r4, #1
 800f0aa:	f145 0500 	adc.w	r5, r5, #0
 800f0ae:	4294      	cmp	r4, r2
 800f0b0:	eb75 010c 	sbcs.w	r1, r5, ip
 800f0b4:	dbdc      	blt.n	800f070 <__cleanup_context+0x54>
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	47c0      	blx	r8
 800f0bc:	6830      	ldr	r0, [r6, #0]
 800f0be:	e7eb      	b.n	800f098 <__cleanup_context+0x7c>
 800f0c0:	4607      	mov	r7, r0
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e9c6 3300 	strd	r3, r3, [r6]
 800f0c8:	4638      	mov	r0, r7
 800f0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ce:	f7fc f853 	bl	800b178 <rcutils_reset_error>
 800f0d2:	e7b7      	b.n	800f044 <__cleanup_context+0x28>
 800f0d4:	f7ff ff7e 	bl	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f0d8:	4607      	mov	r7, r0
 800f0da:	e7bc      	b.n	800f056 <__cleanup_context+0x3a>

0800f0dc <rcl_get_zero_initialized_guard_condition>:
 800f0dc:	4a03      	ldr	r2, [pc, #12]	; (800f0ec <rcl_get_zero_initialized_guard_condition+0x10>)
 800f0de:	4603      	mov	r3, r0
 800f0e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0e4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	4770      	bx	lr
 800f0ec:	08016710 	.word	0x08016710

0800f0f0 <rcl_guard_condition_init_from_rmw>:
 800f0f0:	b082      	sub	sp, #8
 800f0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	f84c 3f04 	str.w	r3, [ip, #4]!
 800f102:	460e      	mov	r6, r1
 800f104:	4617      	mov	r7, r2
 800f106:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f10a:	f10d 0e04 	add.w	lr, sp, #4
 800f10e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f112:	f8dc 3000 	ldr.w	r3, [ip]
 800f116:	f8ce 3000 	str.w	r3, [lr]
 800f11a:	a801      	add	r0, sp, #4
 800f11c:	f7fb fff0 	bl	800b100 <rcutils_allocator_is_valid>
 800f120:	b350      	cbz	r0, 800f178 <rcl_guard_condition_init_from_rmw+0x88>
 800f122:	b34c      	cbz	r4, 800f178 <rcl_guard_condition_init_from_rmw+0x88>
 800f124:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f128:	f1b8 0f00 	cmp.w	r8, #0
 800f12c:	d11e      	bne.n	800f16c <rcl_guard_condition_init_from_rmw+0x7c>
 800f12e:	b31f      	cbz	r7, 800f178 <rcl_guard_condition_init_from_rmw+0x88>
 800f130:	4638      	mov	r0, r7
 800f132:	f7ff ff6d 	bl	800f010 <rcl_context_is_valid>
 800f136:	b328      	cbz	r0, 800f184 <rcl_guard_condition_init_from_rmw+0x94>
 800f138:	9b01      	ldr	r3, [sp, #4]
 800f13a:	9905      	ldr	r1, [sp, #20]
 800f13c:	201c      	movs	r0, #28
 800f13e:	4798      	blx	r3
 800f140:	4605      	mov	r5, r0
 800f142:	6060      	str	r0, [r4, #4]
 800f144:	b358      	cbz	r0, 800f19e <rcl_guard_condition_init_from_rmw+0xae>
 800f146:	b1fe      	cbz	r6, 800f188 <rcl_guard_condition_init_from_rmw+0x98>
 800f148:	6006      	str	r6, [r0, #0]
 800f14a:	f880 8004 	strb.w	r8, [r0, #4]
 800f14e:	ac01      	add	r4, sp, #4
 800f150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f152:	f105 0c08 	add.w	ip, r5, #8
 800f156:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	f8cc 3000 	str.w	r3, [ip]
 800f160:	2000      	movs	r0, #0
 800f162:	b006      	add	sp, #24
 800f164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f168:	b002      	add	sp, #8
 800f16a:	4770      	bx	lr
 800f16c:	2064      	movs	r0, #100	; 0x64
 800f16e:	b006      	add	sp, #24
 800f170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f174:	b002      	add	sp, #8
 800f176:	4770      	bx	lr
 800f178:	200b      	movs	r0, #11
 800f17a:	b006      	add	sp, #24
 800f17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f180:	b002      	add	sp, #8
 800f182:	4770      	bx	lr
 800f184:	2065      	movs	r0, #101	; 0x65
 800f186:	e7f2      	b.n	800f16e <rcl_guard_condition_init_from_rmw+0x7e>
 800f188:	6838      	ldr	r0, [r7, #0]
 800f18a:	3028      	adds	r0, #40	; 0x28
 800f18c:	f002 fd78 	bl	8011c80 <rmw_create_guard_condition>
 800f190:	6028      	str	r0, [r5, #0]
 800f192:	6865      	ldr	r5, [r4, #4]
 800f194:	682e      	ldr	r6, [r5, #0]
 800f196:	b126      	cbz	r6, 800f1a2 <rcl_guard_condition_init_from_rmw+0xb2>
 800f198:	2301      	movs	r3, #1
 800f19a:	712b      	strb	r3, [r5, #4]
 800f19c:	e7d7      	b.n	800f14e <rcl_guard_condition_init_from_rmw+0x5e>
 800f19e:	200a      	movs	r0, #10
 800f1a0:	e7e5      	b.n	800f16e <rcl_guard_condition_init_from_rmw+0x7e>
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	9b02      	ldr	r3, [sp, #8]
 800f1a6:	9905      	ldr	r1, [sp, #20]
 800f1a8:	4798      	blx	r3
 800f1aa:	6066      	str	r6, [r4, #4]
 800f1ac:	2001      	movs	r0, #1
 800f1ae:	e7de      	b.n	800f16e <rcl_guard_condition_init_from_rmw+0x7e>

0800f1b0 <rcl_guard_condition_fini>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	b1f0      	cbz	r0, 800f1f4 <rcl_guard_condition_fini+0x44>
 800f1b6:	6843      	ldr	r3, [r0, #4]
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	b163      	cbz	r3, 800f1d6 <rcl_guard_condition_fini+0x26>
 800f1bc:	6818      	ldr	r0, [r3, #0]
 800f1be:	68de      	ldr	r6, [r3, #12]
 800f1c0:	6999      	ldr	r1, [r3, #24]
 800f1c2:	b160      	cbz	r0, 800f1de <rcl_guard_condition_fini+0x2e>
 800f1c4:	791d      	ldrb	r5, [r3, #4]
 800f1c6:	b965      	cbnz	r5, 800f1e2 <rcl_guard_condition_fini+0x32>
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	47b0      	blx	r6
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	6063      	str	r3, [r4, #4]
 800f1d2:	b002      	add	sp, #8
 800f1d4:	bd70      	pop	{r4, r5, r6, pc}
 800f1d6:	461d      	mov	r5, r3
 800f1d8:	4628      	mov	r0, r5
 800f1da:	b002      	add	sp, #8
 800f1dc:	bd70      	pop	{r4, r5, r6, pc}
 800f1de:	4605      	mov	r5, r0
 800f1e0:	e7f2      	b.n	800f1c8 <rcl_guard_condition_fini+0x18>
 800f1e2:	9101      	str	r1, [sp, #4]
 800f1e4:	f002 fd60 	bl	8011ca8 <rmw_destroy_guard_condition>
 800f1e8:	1e05      	subs	r5, r0, #0
 800f1ea:	6863      	ldr	r3, [r4, #4]
 800f1ec:	9901      	ldr	r1, [sp, #4]
 800f1ee:	bf18      	it	ne
 800f1f0:	2501      	movne	r5, #1
 800f1f2:	e7e9      	b.n	800f1c8 <rcl_guard_condition_fini+0x18>
 800f1f4:	250b      	movs	r5, #11
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	b002      	add	sp, #8
 800f1fa:	bd70      	pop	{r4, r5, r6, pc}

0800f1fc <rcl_guard_condition_get_default_options>:
 800f1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1fe:	b087      	sub	sp, #28
 800f200:	4606      	mov	r6, r0
 800f202:	4668      	mov	r0, sp
 800f204:	f7fb ff6e 	bl	800b0e4 <rcutils_get_default_allocator>
 800f208:	4b09      	ldr	r3, [pc, #36]	; (800f230 <rcl_guard_condition_get_default_options+0x34>)
 800f20a:	46ee      	mov	lr, sp
 800f20c:	469c      	mov	ip, r3
 800f20e:	461d      	mov	r5, r3
 800f210:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f214:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f21a:	4634      	mov	r4, r6
 800f21c:	f8de 7000 	ldr.w	r7, [lr]
 800f220:	f8cc 7000 	str.w	r7, [ip]
 800f224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f226:	4630      	mov	r0, r6
 800f228:	6027      	str	r7, [r4, #0]
 800f22a:	b007      	add	sp, #28
 800f22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f22e:	bf00      	nop
 800f230:	2000db74 	.word	0x2000db74

0800f234 <rcl_guard_condition_get_rmw_handle>:
 800f234:	b110      	cbz	r0, 800f23c <rcl_guard_condition_get_rmw_handle+0x8>
 800f236:	6840      	ldr	r0, [r0, #4]
 800f238:	b100      	cbz	r0, 800f23c <rcl_guard_condition_get_rmw_handle+0x8>
 800f23a:	6800      	ldr	r0, [r0, #0]
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop

0800f240 <rcl_init>:
 800f240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f244:	1e05      	subs	r5, r0, #0
 800f246:	b09e      	sub	sp, #120	; 0x78
 800f248:	460e      	mov	r6, r1
 800f24a:	4690      	mov	r8, r2
 800f24c:	461f      	mov	r7, r3
 800f24e:	f340 809c 	ble.w	800f38a <rcl_init+0x14a>
 800f252:	2900      	cmp	r1, #0
 800f254:	f000 809c 	beq.w	800f390 <rcl_init+0x150>
 800f258:	f1a1 0e04 	sub.w	lr, r1, #4
 800f25c:	f04f 0c00 	mov.w	ip, #0
 800f260:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f264:	f10c 0c01 	add.w	ip, ip, #1
 800f268:	2c00      	cmp	r4, #0
 800f26a:	f000 8091 	beq.w	800f390 <rcl_init+0x150>
 800f26e:	4565      	cmp	r5, ip
 800f270:	d1f6      	bne.n	800f260 <rcl_init+0x20>
 800f272:	f1b8 0f00 	cmp.w	r8, #0
 800f276:	f000 808b 	beq.w	800f390 <rcl_init+0x150>
 800f27a:	f8d8 4000 	ldr.w	r4, [r8]
 800f27e:	2c00      	cmp	r4, #0
 800f280:	f000 8086 	beq.w	800f390 <rcl_init+0x150>
 800f284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f286:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f28a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f28e:	6823      	ldr	r3, [r4, #0]
 800f290:	f8cc 3000 	str.w	r3, [ip]
 800f294:	a819      	add	r0, sp, #100	; 0x64
 800f296:	f7fb ff33 	bl	800b100 <rcutils_allocator_is_valid>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d078      	beq.n	800f390 <rcl_init+0x150>
 800f29e:	2f00      	cmp	r7, #0
 800f2a0:	d076      	beq.n	800f390 <rcl_init+0x150>
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d178      	bne.n	800f39a <rcl_init+0x15a>
 800f2a8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800f2ac:	2178      	movs	r1, #120	; 0x78
 800f2ae:	2001      	movs	r0, #1
 800f2b0:	4798      	blx	r3
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	6038      	str	r0, [r7, #0]
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f000 80b6 	beq.w	800f428 <rcl_init+0x1e8>
 800f2bc:	a802      	add	r0, sp, #8
 800f2be:	f002 fb53 	bl	8011968 <rmw_get_zero_initialized_context>
 800f2c2:	a902      	add	r1, sp, #8
 800f2c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f2c8:	2250      	movs	r2, #80	; 0x50
 800f2ca:	ac19      	add	r4, sp, #100	; 0x64
 800f2cc:	f005 ff75 	bl	80151ba <memcpy>
 800f2d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2d2:	f8d7 e000 	ldr.w	lr, [r7]
 800f2d6:	46f4      	mov	ip, lr
 800f2d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	f8cc 3000 	str.w	r3, [ip]
 800f2e2:	f10e 0114 	add.w	r1, lr, #20
 800f2e6:	4640      	mov	r0, r8
 800f2e8:	f000 f940 	bl	800f56c <rcl_init_options_copy>
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d144      	bne.n	800f37c <rcl_init+0x13c>
 800f2f2:	f8d7 9000 	ldr.w	r9, [r7]
 800f2f6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f2fa:	f8c9 0020 	str.w	r0, [r9, #32]
 800f2fe:	f8c9 5018 	str.w	r5, [r9, #24]
 800f302:	f8c9 801c 	str.w	r8, [r9, #28]
 800f306:	2d00      	cmp	r5, #0
 800f308:	d04e      	beq.n	800f3a8 <rcl_init+0x168>
 800f30a:	2e00      	cmp	r6, #0
 800f30c:	d04c      	beq.n	800f3a8 <rcl_init+0x168>
 800f30e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800f312:	2104      	movs	r1, #4
 800f314:	4628      	mov	r0, r5
 800f316:	4798      	blx	r3
 800f318:	f8c9 0020 	str.w	r0, [r9, #32]
 800f31c:	f8d7 9000 	ldr.w	r9, [r7]
 800f320:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f324:	46ca      	mov	sl, r9
 800f326:	b343      	cbz	r3, 800f37a <rcl_init+0x13a>
 800f328:	2d01      	cmp	r5, #1
 800f32a:	f178 0300 	sbcs.w	r3, r8, #0
 800f32e:	db3b      	blt.n	800f3a8 <rcl_init+0x168>
 800f330:	2400      	movs	r4, #0
 800f332:	3e04      	subs	r6, #4
 800f334:	46a1      	mov	r9, r4
 800f336:	e00b      	b.n	800f350 <rcl_init+0x110>
 800f338:	6831      	ldr	r1, [r6, #0]
 800f33a:	f005 ff3e 	bl	80151ba <memcpy>
 800f33e:	3401      	adds	r4, #1
 800f340:	f149 0900 	adc.w	r9, r9, #0
 800f344:	45c8      	cmp	r8, r9
 800f346:	bf08      	it	eq
 800f348:	42a5      	cmpeq	r5, r4
 800f34a:	d02b      	beq.n	800f3a4 <rcl_init+0x164>
 800f34c:	f8d7 a000 	ldr.w	sl, [r7]
 800f350:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f354:	f7f0 ff4e 	bl	80001f4 <strlen>
 800f358:	1c42      	adds	r2, r0, #1
 800f35a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f35c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f35e:	f8da a020 	ldr.w	sl, [sl, #32]
 800f362:	9201      	str	r2, [sp, #4]
 800f364:	4610      	mov	r0, r2
 800f366:	4798      	blx	r3
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800f36e:	6a1b      	ldr	r3, [r3, #32]
 800f370:	9a01      	ldr	r2, [sp, #4]
 800f372:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f376:	2800      	cmp	r0, #0
 800f378:	d1de      	bne.n	800f338 <rcl_init+0xf8>
 800f37a:	240a      	movs	r4, #10
 800f37c:	4638      	mov	r0, r7
 800f37e:	f7ff fe4d 	bl	800f01c <__cleanup_context>
 800f382:	4620      	mov	r0, r4
 800f384:	b01e      	add	sp, #120	; 0x78
 800f386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38a:	2900      	cmp	r1, #0
 800f38c:	f43f af71 	beq.w	800f272 <rcl_init+0x32>
 800f390:	240b      	movs	r4, #11
 800f392:	4620      	mov	r0, r4
 800f394:	b01e      	add	sp, #120	; 0x78
 800f396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f39a:	2464      	movs	r4, #100	; 0x64
 800f39c:	4620      	mov	r0, r4
 800f39e:	b01e      	add	sp, #120	; 0x78
 800f3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a4:	f8d7 9000 	ldr.w	r9, [r7]
 800f3a8:	4926      	ldr	r1, [pc, #152]	; (800f444 <rcl_init+0x204>)
 800f3aa:	680b      	ldr	r3, [r1, #0]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	d036      	beq.n	800f41e <rcl_init+0x1de>
 800f3b0:	600b      	str	r3, [r1, #0]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	2400      	movs	r4, #0
 800f3b6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f3ba:	607b      	str	r3, [r7, #4]
 800f3bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f3be:	3301      	adds	r3, #1
 800f3c0:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800f3c4:	d034      	beq.n	800f430 <rcl_init+0x1f0>
 800f3c6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f3ca:	b93b      	cbnz	r3, 800f3dc <rcl_init+0x19c>
 800f3cc:	3030      	adds	r0, #48	; 0x30
 800f3ce:	f000 f939 	bl	800f644 <rcl_get_localhost_only>
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d1d1      	bne.n	800f37c <rcl_init+0x13c>
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	6958      	ldr	r0, [r3, #20]
 800f3dc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800f3de:	aa18      	add	r2, sp, #96	; 0x60
 800f3e0:	a917      	add	r1, sp, #92	; 0x5c
 800f3e2:	f000 fd59 	bl	800fe98 <rcl_validate_enclave_name>
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	d1c7      	bne.n	800f37c <rcl_init+0x13c>
 800f3ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3ee:	b9eb      	cbnz	r3, 800f42c <rcl_init+0x1ec>
 800f3f0:	6839      	ldr	r1, [r7, #0]
 800f3f2:	694b      	ldr	r3, [r1, #20]
 800f3f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f3f6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f3fa:	f000 fa99 	bl	800f930 <rcl_get_security_options_from_environment>
 800f3fe:	4604      	mov	r4, r0
 800f400:	2800      	cmp	r0, #0
 800f402:	d1bb      	bne.n	800f37c <rcl_init+0x13c>
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6948      	ldr	r0, [r1, #20]
 800f408:	3128      	adds	r1, #40	; 0x28
 800f40a:	3018      	adds	r0, #24
 800f40c:	f002 fd58 	bl	8011ec0 <rmw_init>
 800f410:	4604      	mov	r4, r0
 800f412:	2800      	cmp	r0, #0
 800f414:	d0bd      	beq.n	800f392 <rcl_init+0x152>
 800f416:	f7ff fddd 	bl	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f41a:	4604      	mov	r4, r0
 800f41c:	e7ae      	b.n	800f37c <rcl_init+0x13c>
 800f41e:	2201      	movs	r2, #1
 800f420:	461c      	mov	r4, r3
 800f422:	600a      	str	r2, [r1, #0]
 800f424:	4613      	mov	r3, r2
 800f426:	e7c6      	b.n	800f3b6 <rcl_init+0x176>
 800f428:	240a      	movs	r4, #10
 800f42a:	e7b2      	b.n	800f392 <rcl_init+0x152>
 800f42c:	2401      	movs	r4, #1
 800f42e:	e7a5      	b.n	800f37c <rcl_init+0x13c>
 800f430:	3024      	adds	r0, #36	; 0x24
 800f432:	f004 fe95 	bl	8014160 <rcl_get_default_domain_id>
 800f436:	4604      	mov	r4, r0
 800f438:	2800      	cmp	r0, #0
 800f43a:	d19f      	bne.n	800f37c <rcl_init+0x13c>
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	6958      	ldr	r0, [r3, #20]
 800f440:	e7c1      	b.n	800f3c6 <rcl_init+0x186>
 800f442:	bf00      	nop
 800f444:	2000db88 	.word	0x2000db88

0800f448 <rcl_get_zero_initialized_init_options>:
 800f448:	2000      	movs	r0, #0
 800f44a:	4770      	bx	lr

0800f44c <rcl_init_options_init>:
 800f44c:	b084      	sub	sp, #16
 800f44e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f450:	b097      	sub	sp, #92	; 0x5c
 800f452:	ae1d      	add	r6, sp, #116	; 0x74
 800f454:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f458:	2800      	cmp	r0, #0
 800f45a:	d058      	beq.n	800f50e <rcl_init_options_init+0xc2>
 800f45c:	6803      	ldr	r3, [r0, #0]
 800f45e:	4605      	mov	r5, r0
 800f460:	b133      	cbz	r3, 800f470 <rcl_init_options_init+0x24>
 800f462:	2464      	movs	r4, #100	; 0x64
 800f464:	4620      	mov	r0, r4
 800f466:	b017      	add	sp, #92	; 0x5c
 800f468:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f46c:	b004      	add	sp, #16
 800f46e:	4770      	bx	lr
 800f470:	4630      	mov	r0, r6
 800f472:	f7fb fe45 	bl	800b100 <rcutils_allocator_is_valid>
 800f476:	2800      	cmp	r0, #0
 800f478:	d049      	beq.n	800f50e <rcl_init_options_init+0xc2>
 800f47a:	46b4      	mov	ip, r6
 800f47c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f480:	ac11      	add	r4, sp, #68	; 0x44
 800f482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f484:	f8dc 3000 	ldr.w	r3, [ip]
 800f488:	6023      	str	r3, [r4, #0]
 800f48a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f48c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f48e:	2050      	movs	r0, #80	; 0x50
 800f490:	4798      	blx	r3
 800f492:	4604      	mov	r4, r0
 800f494:	6028      	str	r0, [r5, #0]
 800f496:	2800      	cmp	r0, #0
 800f498:	d03b      	beq.n	800f512 <rcl_init_options_init+0xc6>
 800f49a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800f49e:	4686      	mov	lr, r0
 800f4a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f4a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f4a8:	f8dc 3000 	ldr.w	r3, [ip]
 800f4ac:	f8ce 3000 	str.w	r3, [lr]
 800f4b0:	a802      	add	r0, sp, #8
 800f4b2:	f002 fa69 	bl	8011988 <rmw_get_zero_initialized_init_options>
 800f4b6:	f10d 0e08 	add.w	lr, sp, #8
 800f4ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4be:	f104 0c18 	add.w	ip, r4, #24
 800f4c2:	682f      	ldr	r7, [r5, #0]
 800f4c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f4dc:	ac20      	add	r4, sp, #128	; 0x80
 800f4de:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f4e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f4e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f4ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f4ee:	f107 0018 	add.w	r0, r7, #24
 800f4f2:	f002 fbed 	bl	8011cd0 <rmw_init_options_init>
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d0b3      	beq.n	800f464 <rcl_init_options_init+0x18>
 800f4fc:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f4fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f500:	6828      	ldr	r0, [r5, #0]
 800f502:	4798      	blx	r3
 800f504:	4620      	mov	r0, r4
 800f506:	f7ff fd65 	bl	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f50a:	4604      	mov	r4, r0
 800f50c:	e7aa      	b.n	800f464 <rcl_init_options_init+0x18>
 800f50e:	240b      	movs	r4, #11
 800f510:	e7a8      	b.n	800f464 <rcl_init_options_init+0x18>
 800f512:	240a      	movs	r4, #10
 800f514:	e7a6      	b.n	800f464 <rcl_init_options_init+0x18>
 800f516:	bf00      	nop

0800f518 <rcl_init_options_fini>:
 800f518:	b530      	push	{r4, r5, lr}
 800f51a:	b087      	sub	sp, #28
 800f51c:	b1f0      	cbz	r0, 800f55c <rcl_init_options_fini+0x44>
 800f51e:	6803      	ldr	r3, [r0, #0]
 800f520:	4604      	mov	r4, r0
 800f522:	b1db      	cbz	r3, 800f55c <rcl_init_options_fini+0x44>
 800f524:	469c      	mov	ip, r3
 800f526:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f52a:	f10d 0e04 	add.w	lr, sp, #4
 800f52e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f532:	f8dc 3000 	ldr.w	r3, [ip]
 800f536:	f8ce 3000 	str.w	r3, [lr]
 800f53a:	a801      	add	r0, sp, #4
 800f53c:	f7fb fde0 	bl	800b100 <rcutils_allocator_is_valid>
 800f540:	b160      	cbz	r0, 800f55c <rcl_init_options_fini+0x44>
 800f542:	6820      	ldr	r0, [r4, #0]
 800f544:	3018      	adds	r0, #24
 800f546:	f002 fc73 	bl	8011e30 <rmw_init_options_fini>
 800f54a:	4605      	mov	r5, r0
 800f54c:	b950      	cbnz	r0, 800f564 <rcl_init_options_fini+0x4c>
 800f54e:	6820      	ldr	r0, [r4, #0]
 800f550:	9b02      	ldr	r3, [sp, #8]
 800f552:	9905      	ldr	r1, [sp, #20]
 800f554:	4798      	blx	r3
 800f556:	4628      	mov	r0, r5
 800f558:	b007      	add	sp, #28
 800f55a:	bd30      	pop	{r4, r5, pc}
 800f55c:	250b      	movs	r5, #11
 800f55e:	4628      	mov	r0, r5
 800f560:	b007      	add	sp, #28
 800f562:	bd30      	pop	{r4, r5, pc}
 800f564:	f7ff fd36 	bl	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f568:	4605      	mov	r5, r0
 800f56a:	e7f8      	b.n	800f55e <rcl_init_options_fini+0x46>

0800f56c <rcl_init_options_copy>:
 800f56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f570:	b094      	sub	sp, #80	; 0x50
 800f572:	2800      	cmp	r0, #0
 800f574:	d058      	beq.n	800f628 <rcl_init_options_copy+0xbc>
 800f576:	4604      	mov	r4, r0
 800f578:	6800      	ldr	r0, [r0, #0]
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d054      	beq.n	800f628 <rcl_init_options_copy+0xbc>
 800f57e:	460e      	mov	r6, r1
 800f580:	f7fb fdbe 	bl	800b100 <rcutils_allocator_is_valid>
 800f584:	2800      	cmp	r0, #0
 800f586:	d04f      	beq.n	800f628 <rcl_init_options_copy+0xbc>
 800f588:	2e00      	cmp	r6, #0
 800f58a:	d04d      	beq.n	800f628 <rcl_init_options_copy+0xbc>
 800f58c:	6833      	ldr	r3, [r6, #0]
 800f58e:	b123      	cbz	r3, 800f59a <rcl_init_options_copy+0x2e>
 800f590:	2464      	movs	r4, #100	; 0x64
 800f592:	4620      	mov	r0, r4
 800f594:	b014      	add	sp, #80	; 0x50
 800f596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f59a:	6827      	ldr	r7, [r4, #0]
 800f59c:	46bc      	mov	ip, r7
 800f59e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5a2:	ad0f      	add	r5, sp, #60	; 0x3c
 800f5a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f5a6:	f8dc 3000 	ldr.w	r3, [ip]
 800f5aa:	f8d7 8000 	ldr.w	r8, [r7]
 800f5ae:	602b      	str	r3, [r5, #0]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	2050      	movs	r0, #80	; 0x50
 800f5b4:	47c0      	blx	r8
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	6030      	str	r0, [r6, #0]
 800f5ba:	b3d0      	cbz	r0, 800f632 <rcl_init_options_copy+0xc6>
 800f5bc:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800f5c0:	4686      	mov	lr, r0
 800f5c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f5ca:	f8dc 3000 	ldr.w	r3, [ip]
 800f5ce:	f8ce 3000 	str.w	r3, [lr]
 800f5d2:	4668      	mov	r0, sp
 800f5d4:	f002 f9d8 	bl	8011988 <rmw_get_zero_initialized_init_options>
 800f5d8:	46ee      	mov	lr, sp
 800f5da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5de:	f105 0c18 	add.w	ip, r5, #24
 800f5e2:	6824      	ldr	r4, [r4, #0]
 800f5e4:	6835      	ldr	r5, [r6, #0]
 800f5e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5fa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f5fe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f602:	f104 0018 	add.w	r0, r4, #24
 800f606:	f105 0118 	add.w	r1, r5, #24
 800f60a:	f002 fbc9 	bl	8011da0 <rmw_init_options_copy>
 800f60e:	4604      	mov	r4, r0
 800f610:	2800      	cmp	r0, #0
 800f612:	d0be      	beq.n	800f592 <rcl_init_options_copy+0x26>
 800f614:	f7fb fd9a 	bl	800b14c <rcutils_get_error_string>
 800f618:	f7fb fdae 	bl	800b178 <rcutils_reset_error>
 800f61c:	4630      	mov	r0, r6
 800f61e:	f7ff ff7b 	bl	800f518 <rcl_init_options_fini>
 800f622:	b140      	cbz	r0, 800f636 <rcl_init_options_copy+0xca>
 800f624:	4604      	mov	r4, r0
 800f626:	e7b4      	b.n	800f592 <rcl_init_options_copy+0x26>
 800f628:	240b      	movs	r4, #11
 800f62a:	4620      	mov	r0, r4
 800f62c:	b014      	add	sp, #80	; 0x50
 800f62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f632:	240a      	movs	r4, #10
 800f634:	e7ad      	b.n	800f592 <rcl_init_options_copy+0x26>
 800f636:	4620      	mov	r0, r4
 800f638:	b014      	add	sp, #80	; 0x50
 800f63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f63e:	f7ff bcc9 	b.w	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f642:	bf00      	nop

0800f644 <rcl_get_localhost_only>:
 800f644:	b510      	push	{r4, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	2300      	movs	r3, #0
 800f64a:	9301      	str	r3, [sp, #4]
 800f64c:	b1b8      	cbz	r0, 800f67e <rcl_get_localhost_only+0x3a>
 800f64e:	4604      	mov	r4, r0
 800f650:	a901      	add	r1, sp, #4
 800f652:	480c      	ldr	r0, [pc, #48]	; (800f684 <rcl_get_localhost_only+0x40>)
 800f654:	f7fb fd62 	bl	800b11c <rcutils_get_env>
 800f658:	b110      	cbz	r0, 800f660 <rcl_get_localhost_only+0x1c>
 800f65a:	2001      	movs	r0, #1
 800f65c:	b002      	add	sp, #8
 800f65e:	bd10      	pop	{r4, pc}
 800f660:	9b01      	ldr	r3, [sp, #4]
 800f662:	b113      	cbz	r3, 800f66a <rcl_get_localhost_only+0x26>
 800f664:	781a      	ldrb	r2, [r3, #0]
 800f666:	2a31      	cmp	r2, #49	; 0x31
 800f668:	d004      	beq.n	800f674 <rcl_get_localhost_only+0x30>
 800f66a:	2302      	movs	r3, #2
 800f66c:	2000      	movs	r0, #0
 800f66e:	7023      	strb	r3, [r4, #0]
 800f670:	b002      	add	sp, #8
 800f672:	bd10      	pop	{r4, pc}
 800f674:	785b      	ldrb	r3, [r3, #1]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d1f7      	bne.n	800f66a <rcl_get_localhost_only+0x26>
 800f67a:	2301      	movs	r3, #1
 800f67c:	e7f6      	b.n	800f66c <rcl_get_localhost_only+0x28>
 800f67e:	200b      	movs	r0, #11
 800f680:	b002      	add	sp, #8
 800f682:	bd10      	pop	{r4, pc}
 800f684:	08016718 	.word	0x08016718

0800f688 <rcl_node_resolve_name>:
 800f688:	b082      	sub	sp, #8
 800f68a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68e:	b091      	sub	sp, #68	; 0x44
 800f690:	ac1a      	add	r4, sp, #104	; 0x68
 800f692:	e884 000c 	stmia.w	r4, {r2, r3}
 800f696:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800f69a:	2800      	cmp	r0, #0
 800f69c:	d03b      	beq.n	800f716 <rcl_node_resolve_name+0x8e>
 800f69e:	460c      	mov	r4, r1
 800f6a0:	4605      	mov	r5, r0
 800f6a2:	f7fa fc3b 	bl	8009f1c <rcl_node_get_options>
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	d037      	beq.n	800f71a <rcl_node_resolve_name+0x92>
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f7fa fc26 	bl	8009efc <rcl_node_get_name>
 800f6b0:	4606      	mov	r6, r0
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	f7fa fc2a 	bl	8009f0c <rcl_node_get_namespace>
 800f6b8:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800f6bc:	4681      	mov	r9, r0
 800f6be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f6c2:	ad0b      	add	r5, sp, #44	; 0x2c
 800f6c4:	46ac      	mov	ip, r5
 800f6c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6ca:	f8de 3000 	ldr.w	r3, [lr]
 800f6ce:	f8cc 3000 	str.w	r3, [ip]
 800f6d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6d4:	b1fb      	cbz	r3, 800f716 <rcl_node_resolve_name+0x8e>
 800f6d6:	468a      	mov	sl, r1
 800f6d8:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800f6dc:	f002 f818 	bl	8011710 <rcutils_get_zero_initialized_string_map>
 800f6e0:	ab10      	add	r3, sp, #64	; 0x40
 800f6e2:	9008      	str	r0, [sp, #32]
 800f6e4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800f6e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f6f2:	a808      	add	r0, sp, #32
 800f6f4:	f002 f884 	bl	8011800 <rcutils_string_map_init>
 800f6f8:	4607      	mov	r7, r0
 800f6fa:	b180      	cbz	r0, 800f71e <rcl_node_resolve_name+0x96>
 800f6fc:	f7fb fd26 	bl	800b14c <rcutils_get_error_string>
 800f700:	f7fb fd3a 	bl	800b178 <rcutils_reset_error>
 800f704:	2f0a      	cmp	r7, #10
 800f706:	bf18      	it	ne
 800f708:	2701      	movne	r7, #1
 800f70a:	4638      	mov	r0, r7
 800f70c:	b011      	add	sp, #68	; 0x44
 800f70e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f712:	b002      	add	sp, #8
 800f714:	4770      	bx	lr
 800f716:	270b      	movs	r7, #11
 800f718:	e7f7      	b.n	800f70a <rcl_node_resolve_name+0x82>
 800f71a:	2701      	movs	r7, #1
 800f71c:	e7f5      	b.n	800f70a <rcl_node_resolve_name+0x82>
 800f71e:	9009      	str	r0, [sp, #36]	; 0x24
 800f720:	9007      	str	r0, [sp, #28]
 800f722:	a808      	add	r0, sp, #32
 800f724:	f004 feae 	bl	8014484 <rcl_get_default_topic_name_substitutions>
 800f728:	4607      	mov	r7, r0
 800f72a:	b1a8      	cbz	r0, 800f758 <rcl_node_resolve_name+0xd0>
 800f72c:	280a      	cmp	r0, #10
 800f72e:	9c07      	ldr	r4, [sp, #28]
 800f730:	d000      	beq.n	800f734 <rcl_node_resolve_name+0xac>
 800f732:	2701      	movs	r7, #1
 800f734:	a808      	add	r0, sp, #32
 800f736:	f002 f8a3 	bl	8011880 <rcutils_string_map_fini>
 800f73a:	2800      	cmp	r0, #0
 800f73c:	d13d      	bne.n	800f7ba <rcl_node_resolve_name+0x132>
 800f73e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f740:	4659      	mov	r1, fp
 800f742:	47d0      	blx	sl
 800f744:	4659      	mov	r1, fp
 800f746:	4620      	mov	r0, r4
 800f748:	47d0      	blx	sl
 800f74a:	f1b8 0f00 	cmp.w	r8, #0
 800f74e:	d0dc      	beq.n	800f70a <rcl_node_resolve_name+0x82>
 800f750:	2f67      	cmp	r7, #103	; 0x67
 800f752:	bf08      	it	eq
 800f754:	2768      	moveq	r7, #104	; 0x68
 800f756:	e7d8      	b.n	800f70a <rcl_node_resolve_name+0x82>
 800f758:	ab09      	add	r3, sp, #36	; 0x24
 800f75a:	9305      	str	r3, [sp, #20]
 800f75c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f75e:	46ec      	mov	ip, sp
 800f760:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f764:	682b      	ldr	r3, [r5, #0]
 800f766:	f8cc 3000 	str.w	r3, [ip]
 800f76a:	464a      	mov	r2, r9
 800f76c:	4631      	mov	r1, r6
 800f76e:	4620      	mov	r0, r4
 800f770:	ab08      	add	r3, sp, #32
 800f772:	f004 fd29 	bl	80141c8 <rcl_expand_topic_name>
 800f776:	4607      	mov	r7, r0
 800f778:	b9b8      	cbnz	r0, 800f7aa <rcl_node_resolve_name+0x122>
 800f77a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f77c:	9009      	str	r0, [sp, #36]	; 0x24
 800f77e:	4602      	mov	r2, r0
 800f780:	a90a      	add	r1, sp, #40	; 0x28
 800f782:	4620      	mov	r0, r4
 800f784:	f002 f998 	bl	8011ab8 <rmw_validate_full_topic_name>
 800f788:	b988      	cbnz	r0, 800f7ae <rcl_node_resolve_name+0x126>
 800f78a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f78c:	b9d5      	cbnz	r5, 800f7c4 <rcl_node_resolve_name+0x13c>
 800f78e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f790:	a808      	add	r0, sp, #32
 800f792:	601c      	str	r4, [r3, #0]
 800f794:	f002 f874 	bl	8011880 <rcutils_string_map_fini>
 800f798:	4607      	mov	r7, r0
 800f79a:	b1a8      	cbz	r0, 800f7c8 <rcl_node_resolve_name+0x140>
 800f79c:	f7fb fcd6 	bl	800b14c <rcutils_get_error_string>
 800f7a0:	462c      	mov	r4, r5
 800f7a2:	f7fb fce9 	bl	800b178 <rcutils_reset_error>
 800f7a6:	2701      	movs	r7, #1
 800f7a8:	e7c9      	b.n	800f73e <rcl_node_resolve_name+0xb6>
 800f7aa:	9c07      	ldr	r4, [sp, #28]
 800f7ac:	e7c2      	b.n	800f734 <rcl_node_resolve_name+0xac>
 800f7ae:	f7fb fccd 	bl	800b14c <rcutils_get_error_string>
 800f7b2:	2701      	movs	r7, #1
 800f7b4:	f7fb fce0 	bl	800b178 <rcutils_reset_error>
 800f7b8:	e7bc      	b.n	800f734 <rcl_node_resolve_name+0xac>
 800f7ba:	f7fb fcc7 	bl	800b14c <rcutils_get_error_string>
 800f7be:	f7fb fcdb 	bl	800b178 <rcutils_reset_error>
 800f7c2:	e7bc      	b.n	800f73e <rcl_node_resolve_name+0xb6>
 800f7c4:	2767      	movs	r7, #103	; 0x67
 800f7c6:	e7b5      	b.n	800f734 <rcl_node_resolve_name+0xac>
 800f7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7ca:	4659      	mov	r1, fp
 800f7cc:	47d0      	blx	sl
 800f7ce:	4659      	mov	r1, fp
 800f7d0:	4638      	mov	r0, r7
 800f7d2:	47d0      	blx	sl
 800f7d4:	e799      	b.n	800f70a <rcl_node_resolve_name+0x82>
 800f7d6:	bf00      	nop

0800f7d8 <exact_match_lookup>:
 800f7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7da:	f102 0708 	add.w	r7, r2, #8
 800f7de:	460b      	mov	r3, r1
 800f7e0:	4614      	mov	r4, r2
 800f7e2:	4606      	mov	r6, r0
 800f7e4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f7e8:	b085      	sub	sp, #20
 800f7ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	4919      	ldr	r1, [pc, #100]	; (800f858 <exact_match_lookup+0x80>)
 800f7f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f7f6:	f001 ff55 	bl	80116a4 <rcutils_join_path>
 800f7fa:	7833      	ldrb	r3, [r6, #0]
 800f7fc:	2b2f      	cmp	r3, #47	; 0x2f
 800f7fe:	4605      	mov	r5, r0
 800f800:	d023      	beq.n	800f84a <exact_match_lookup+0x72>
 800f802:	f104 030c 	add.w	r3, r4, #12
 800f806:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f80a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f80e:	1c70      	adds	r0, r6, #1
 800f810:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f814:	f001 ff4c 	bl	80116b0 <rcutils_to_native_path>
 800f818:	4606      	mov	r6, r0
 800f81a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f81e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f822:	4631      	mov	r1, r6
 800f824:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f828:	4628      	mov	r0, r5
 800f82a:	f001 ff3b 	bl	80116a4 <rcutils_join_path>
 800f82e:	6862      	ldr	r2, [r4, #4]
 800f830:	6921      	ldr	r1, [r4, #16]
 800f832:	4603      	mov	r3, r0
 800f834:	4630      	mov	r0, r6
 800f836:	461e      	mov	r6, r3
 800f838:	4790      	blx	r2
 800f83a:	4628      	mov	r0, r5
 800f83c:	6863      	ldr	r3, [r4, #4]
 800f83e:	6921      	ldr	r1, [r4, #16]
 800f840:	4798      	blx	r3
 800f842:	4635      	mov	r5, r6
 800f844:	4628      	mov	r0, r5
 800f846:	b005      	add	sp, #20
 800f848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f84a:	7873      	ldrb	r3, [r6, #1]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1d8      	bne.n	800f802 <exact_match_lookup+0x2a>
 800f850:	4628      	mov	r0, r5
 800f852:	b005      	add	sp, #20
 800f854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f856:	bf00      	nop
 800f858:	08016768 	.word	0x08016768

0800f85c <rcl_get_secure_root>:
 800f85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f860:	b085      	sub	sp, #20
 800f862:	b168      	cbz	r0, 800f880 <rcl_get_secure_root+0x24>
 800f864:	4607      	mov	r7, r0
 800f866:	4608      	mov	r0, r1
 800f868:	460c      	mov	r4, r1
 800f86a:	f7fb fc49 	bl	800b100 <rcutils_allocator_is_valid>
 800f86e:	b138      	cbz	r0, 800f880 <rcl_get_secure_root+0x24>
 800f870:	2300      	movs	r3, #0
 800f872:	482d      	ldr	r0, [pc, #180]	; (800f928 <rcl_get_secure_root+0xcc>)
 800f874:	9303      	str	r3, [sp, #12]
 800f876:	a903      	add	r1, sp, #12
 800f878:	f7fb fc50 	bl	800b11c <rcutils_get_env>
 800f87c:	4605      	mov	r5, r0
 800f87e:	b120      	cbz	r0, 800f88a <rcl_get_secure_root+0x2e>
 800f880:	2500      	movs	r5, #0
 800f882:	4628      	mov	r0, r5
 800f884:	b005      	add	sp, #20
 800f886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f88a:	9b03      	ldr	r3, [sp, #12]
 800f88c:	781a      	ldrb	r2, [r3, #0]
 800f88e:	2a00      	cmp	r2, #0
 800f890:	d0f6      	beq.n	800f880 <rcl_get_secure_root+0x24>
 800f892:	f104 090c 	add.w	r9, r4, #12
 800f896:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f89a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f8a4:	f7fb fd9e 	bl	800b3e4 <rcutils_strdup>
 800f8a8:	4680      	mov	r8, r0
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	d0e8      	beq.n	800f880 <rcl_get_secure_root+0x24>
 800f8ae:	481f      	ldr	r0, [pc, #124]	; (800f92c <rcl_get_secure_root+0xd0>)
 800f8b0:	9503      	str	r5, [sp, #12]
 800f8b2:	a903      	add	r1, sp, #12
 800f8b4:	f7fb fc32 	bl	800b11c <rcutils_get_env>
 800f8b8:	b160      	cbz	r0, 800f8d4 <rcl_get_secure_root+0x78>
 800f8ba:	2600      	movs	r6, #0
 800f8bc:	6863      	ldr	r3, [r4, #4]
 800f8be:	6921      	ldr	r1, [r4, #16]
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	4798      	blx	r3
 800f8c4:	4640      	mov	r0, r8
 800f8c6:	6863      	ldr	r3, [r4, #4]
 800f8c8:	6921      	ldr	r1, [r4, #16]
 800f8ca:	4798      	blx	r3
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	b005      	add	sp, #20
 800f8d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8d4:	9b03      	ldr	r3, [sp, #12]
 800f8d6:	781e      	ldrb	r6, [r3, #0]
 800f8d8:	b1f6      	cbz	r6, 800f918 <rcl_get_secure_root+0xbc>
 800f8da:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f8de:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f8e8:	f7fb fd7c 	bl	800b3e4 <rcutils_strdup>
 800f8ec:	4606      	mov	r6, r0
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	d0e3      	beq.n	800f8ba <rcl_get_secure_root+0x5e>
 800f8f2:	4622      	mov	r2, r4
 800f8f4:	4641      	mov	r1, r8
 800f8f6:	f7ff ff6f 	bl	800f7d8 <exact_match_lookup>
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	2d00      	cmp	r5, #0
 800f8fe:	d0dd      	beq.n	800f8bc <rcl_get_secure_root+0x60>
 800f900:	4628      	mov	r0, r5
 800f902:	f001 fecd 	bl	80116a0 <rcutils_is_directory>
 800f906:	4603      	mov	r3, r0
 800f908:	2800      	cmp	r0, #0
 800f90a:	d1d7      	bne.n	800f8bc <rcl_get_secure_root+0x60>
 800f90c:	4628      	mov	r0, r5
 800f90e:	6921      	ldr	r1, [r4, #16]
 800f910:	461d      	mov	r5, r3
 800f912:	6863      	ldr	r3, [r4, #4]
 800f914:	4798      	blx	r3
 800f916:	e7d1      	b.n	800f8bc <rcl_get_secure_root+0x60>
 800f918:	4622      	mov	r2, r4
 800f91a:	4638      	mov	r0, r7
 800f91c:	4641      	mov	r1, r8
 800f91e:	f7ff ff5b 	bl	800f7d8 <exact_match_lookup>
 800f922:	4605      	mov	r5, r0
 800f924:	e7ea      	b.n	800f8fc <rcl_get_secure_root+0xa0>
 800f926:	bf00      	nop
 800f928:	08016774 	.word	0x08016774
 800f92c:	0801678c 	.word	0x0801678c

0800f930 <rcl_get_security_options_from_environment>:
 800f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f934:	b082      	sub	sp, #8
 800f936:	2300      	movs	r3, #0
 800f938:	4606      	mov	r6, r0
 800f93a:	460f      	mov	r7, r1
 800f93c:	4820      	ldr	r0, [pc, #128]	; (800f9c0 <rcl_get_security_options_from_environment+0x90>)
 800f93e:	9301      	str	r3, [sp, #4]
 800f940:	a901      	add	r1, sp, #4
 800f942:	4690      	mov	r8, r2
 800f944:	f7fb fbea 	bl	800b11c <rcutils_get_env>
 800f948:	b120      	cbz	r0, 800f954 <rcl_get_security_options_from_environment+0x24>
 800f94a:	2501      	movs	r5, #1
 800f94c:	4628      	mov	r0, r5
 800f94e:	b002      	add	sp, #8
 800f950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f954:	491b      	ldr	r1, [pc, #108]	; (800f9c4 <rcl_get_security_options_from_environment+0x94>)
 800f956:	4604      	mov	r4, r0
 800f958:	9801      	ldr	r0, [sp, #4]
 800f95a:	f7f0 fc41 	bl	80001e0 <strcmp>
 800f95e:	4605      	mov	r5, r0
 800f960:	b9e8      	cbnz	r0, 800f99e <rcl_get_security_options_from_environment+0x6e>
 800f962:	9001      	str	r0, [sp, #4]
 800f964:	f1b8 0f00 	cmp.w	r8, #0
 800f968:	d020      	beq.n	800f9ac <rcl_get_security_options_from_environment+0x7c>
 800f96a:	4817      	ldr	r0, [pc, #92]	; (800f9c8 <rcl_get_security_options_from_environment+0x98>)
 800f96c:	a901      	add	r1, sp, #4
 800f96e:	f7fb fbd5 	bl	800b11c <rcutils_get_env>
 800f972:	2800      	cmp	r0, #0
 800f974:	d1e9      	bne.n	800f94a <rcl_get_security_options_from_environment+0x1a>
 800f976:	4915      	ldr	r1, [pc, #84]	; (800f9cc <rcl_get_security_options_from_environment+0x9c>)
 800f978:	9801      	ldr	r0, [sp, #4]
 800f97a:	f7f0 fc31 	bl	80001e0 <strcmp>
 800f97e:	fab0 f080 	clz	r0, r0
 800f982:	0940      	lsrs	r0, r0, #5
 800f984:	f888 0000 	strb.w	r0, [r8]
 800f988:	4639      	mov	r1, r7
 800f98a:	4630      	mov	r0, r6
 800f98c:	f7ff ff66 	bl	800f85c <rcl_get_secure_root>
 800f990:	b170      	cbz	r0, 800f9b0 <rcl_get_security_options_from_environment+0x80>
 800f992:	f8c8 0004 	str.w	r0, [r8, #4]
 800f996:	4628      	mov	r0, r5
 800f998:	b002      	add	sp, #8
 800f99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f99e:	4625      	mov	r5, r4
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	f888 4000 	strb.w	r4, [r8]
 800f9a6:	b002      	add	sp, #8
 800f9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ac:	250b      	movs	r5, #11
 800f9ae:	e7cd      	b.n	800f94c <rcl_get_security_options_from_environment+0x1c>
 800f9b0:	f898 5000 	ldrb.w	r5, [r8]
 800f9b4:	f1a5 0501 	sub.w	r5, r5, #1
 800f9b8:	fab5 f585 	clz	r5, r5
 800f9bc:	096d      	lsrs	r5, r5, #5
 800f9be:	e7c5      	b.n	800f94c <rcl_get_security_options_from_environment+0x1c>
 800f9c0:	0801672c 	.word	0x0801672c
 800f9c4:	08016740 	.word	0x08016740
 800f9c8:	08016748 	.word	0x08016748
 800f9cc:	08016760 	.word	0x08016760

0800f9d0 <rcl_service_get_rmw_handle>:
 800f9d0:	b118      	cbz	r0, 800f9da <rcl_service_get_rmw_handle+0xa>
 800f9d2:	6800      	ldr	r0, [r0, #0]
 800f9d4:	b108      	cbz	r0, 800f9da <rcl_service_get_rmw_handle+0xa>
 800f9d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f9da:	4770      	bx	lr

0800f9dc <rcl_take_request>:
 800f9dc:	b570      	push	{r4, r5, r6, lr}
 800f9de:	468e      	mov	lr, r1
 800f9e0:	460c      	mov	r4, r1
 800f9e2:	4616      	mov	r6, r2
 800f9e4:	4605      	mov	r5, r0
 800f9e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f9ea:	b08c      	sub	sp, #48	; 0x30
 800f9ec:	f10d 0c18 	add.w	ip, sp, #24
 800f9f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f9f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f9f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f9fc:	b30d      	cbz	r5, 800fa42 <rcl_take_request+0x66>
 800f9fe:	682b      	ldr	r3, [r5, #0]
 800fa00:	b1fb      	cbz	r3, 800fa42 <rcl_take_request+0x66>
 800fa02:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fa06:	b1e0      	cbz	r0, 800fa42 <rcl_take_request+0x66>
 800fa08:	b336      	cbz	r6, 800fa58 <rcl_take_request+0x7c>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	f88d 3007 	strb.w	r3, [sp, #7]
 800fa10:	4632      	mov	r2, r6
 800fa12:	f10d 0307 	add.w	r3, sp, #7
 800fa16:	a902      	add	r1, sp, #8
 800fa18:	f002 fc7a 	bl	8012310 <rmw_take_request>
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	b198      	cbz	r0, 800fa48 <rcl_take_request+0x6c>
 800fa20:	280a      	cmp	r0, #10
 800fa22:	bf18      	it	ne
 800fa24:	2501      	movne	r5, #1
 800fa26:	f10d 0e18 	add.w	lr, sp, #24
 800fa2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa2e:	46a4      	mov	ip, r4
 800fa30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa34:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fa38:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	b00c      	add	sp, #48	; 0x30
 800fa40:	bd70      	pop	{r4, r5, r6, pc}
 800fa42:	f44f 7516 	mov.w	r5, #600	; 0x258
 800fa46:	e7ee      	b.n	800fa26 <rcl_take_request+0x4a>
 800fa48:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fa4c:	f240 2359 	movw	r3, #601	; 0x259
 800fa50:	2a00      	cmp	r2, #0
 800fa52:	bf08      	it	eq
 800fa54:	461d      	moveq	r5, r3
 800fa56:	e7e6      	b.n	800fa26 <rcl_take_request+0x4a>
 800fa58:	250b      	movs	r5, #11
 800fa5a:	e7e4      	b.n	800fa26 <rcl_take_request+0x4a>

0800fa5c <rcl_send_response>:
 800fa5c:	b170      	cbz	r0, 800fa7c <rcl_send_response+0x20>
 800fa5e:	6800      	ldr	r0, [r0, #0]
 800fa60:	b160      	cbz	r0, 800fa7c <rcl_send_response+0x20>
 800fa62:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fa66:	b148      	cbz	r0, 800fa7c <rcl_send_response+0x20>
 800fa68:	b159      	cbz	r1, 800fa82 <rcl_send_response+0x26>
 800fa6a:	b510      	push	{r4, lr}
 800fa6c:	b15a      	cbz	r2, 800fa86 <rcl_send_response+0x2a>
 800fa6e:	f002 fcad 	bl	80123cc <rmw_send_response>
 800fa72:	b110      	cbz	r0, 800fa7a <rcl_send_response+0x1e>
 800fa74:	2802      	cmp	r0, #2
 800fa76:	bf18      	it	ne
 800fa78:	2001      	movne	r0, #1
 800fa7a:	bd10      	pop	{r4, pc}
 800fa7c:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fa80:	4770      	bx	lr
 800fa82:	200b      	movs	r0, #11
 800fa84:	4770      	bx	lr
 800fa86:	200b      	movs	r0, #11
 800fa88:	bd10      	pop	{r4, pc}
 800fa8a:	bf00      	nop

0800fa8c <rcl_service_is_valid>:
 800fa8c:	b130      	cbz	r0, 800fa9c <rcl_service_is_valid+0x10>
 800fa8e:	6800      	ldr	r0, [r0, #0]
 800fa90:	b120      	cbz	r0, 800fa9c <rcl_service_is_valid+0x10>
 800fa92:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fa96:	3800      	subs	r0, #0
 800fa98:	bf18      	it	ne
 800fa9a:	2001      	movne	r0, #1
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop

0800faa0 <rcl_get_system_time>:
 800faa0:	4608      	mov	r0, r1
 800faa2:	f7fb bcdd 	b.w	800b460 <rcutils_system_time_now>
 800faa6:	bf00      	nop

0800faa8 <rcl_get_steady_time>:
 800faa8:	4608      	mov	r0, r1
 800faaa:	f7fb bd01 	b.w	800b4b0 <rcutils_steady_time_now>
 800faae:	bf00      	nop

0800fab0 <rcl_get_ros_time>:
 800fab0:	7a03      	ldrb	r3, [r0, #8]
 800fab2:	b510      	push	{r4, lr}
 800fab4:	460c      	mov	r4, r1
 800fab6:	b133      	cbz	r3, 800fac6 <rcl_get_ros_time+0x16>
 800fab8:	2105      	movs	r1, #5
 800faba:	f001 fd4d 	bl	8011558 <__atomic_load_8>
 800fabe:	e9c4 0100 	strd	r0, r1, [r4]
 800fac2:	2000      	movs	r0, #0
 800fac4:	bd10      	pop	{r4, pc}
 800fac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faca:	4608      	mov	r0, r1
 800facc:	f7fb bcc8 	b.w	800b460 <rcutils_system_time_now>

0800fad0 <rcl_clock_init>:
 800fad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fad2:	4605      	mov	r5, r0
 800fad4:	4610      	mov	r0, r2
 800fad6:	4614      	mov	r4, r2
 800fad8:	460e      	mov	r6, r1
 800fada:	f7fb fb11 	bl	800b100 <rcutils_allocator_is_valid>
 800fade:	b128      	cbz	r0, 800faec <rcl_clock_init+0x1c>
 800fae0:	2d03      	cmp	r5, #3
 800fae2:	d803      	bhi.n	800faec <rcl_clock_init+0x1c>
 800fae4:	e8df f005 	tbb	[pc, r5]
 800fae8:	06532e1d 	.word	0x06532e1d
 800faec:	f04f 0c0b 	mov.w	ip, #11
 800faf0:	4660      	mov	r0, ip
 800faf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faf4:	2e00      	cmp	r6, #0
 800faf6:	d0f9      	beq.n	800faec <rcl_clock_init+0x1c>
 800faf8:	2c00      	cmp	r4, #0
 800fafa:	d0f7      	beq.n	800faec <rcl_clock_init+0x1c>
 800fafc:	2300      	movs	r3, #0
 800fafe:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800fb02:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800fbb8 <rcl_clock_init+0xe8>
 800fb06:	6133      	str	r3, [r6, #16]
 800fb08:	f106 0514 	add.w	r5, r6, #20
 800fb0c:	469c      	mov	ip, r3
 800fb0e:	2703      	movs	r7, #3
 800fb10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fb14:	6823      	ldr	r3, [r4, #0]
 800fb16:	602b      	str	r3, [r5, #0]
 800fb18:	7037      	strb	r7, [r6, #0]
 800fb1a:	f8c6 e00c 	str.w	lr, [r6, #12]
 800fb1e:	4660      	mov	r0, ip
 800fb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb22:	2e00      	cmp	r6, #0
 800fb24:	d0e2      	beq.n	800faec <rcl_clock_init+0x1c>
 800fb26:	2300      	movs	r3, #0
 800fb28:	7033      	strb	r3, [r6, #0]
 800fb2a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800fb2e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800fb32:	469c      	mov	ip, r3
 800fb34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb36:	f106 0514 	add.w	r5, r6, #20
 800fb3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	602b      	str	r3, [r5, #0]
 800fb40:	4660      	mov	r0, ip
 800fb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb44:	2e00      	cmp	r6, #0
 800fb46:	d0d1      	beq.n	800faec <rcl_clock_init+0x1c>
 800fb48:	2c00      	cmp	r4, #0
 800fb4a:	d0cf      	beq.n	800faec <rcl_clock_init+0x1c>
 800fb4c:	2700      	movs	r7, #0
 800fb4e:	7037      	strb	r7, [r6, #0]
 800fb50:	46a4      	mov	ip, r4
 800fb52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb56:	f106 0514 	add.w	r5, r6, #20
 800fb5a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800fb5e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800fb62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fb64:	f8dc 3000 	ldr.w	r3, [ip]
 800fb68:	602b      	str	r3, [r5, #0]
 800fb6a:	6921      	ldr	r1, [r4, #16]
 800fb6c:	6823      	ldr	r3, [r4, #0]
 800fb6e:	2010      	movs	r0, #16
 800fb70:	4798      	blx	r3
 800fb72:	6130      	str	r0, [r6, #16]
 800fb74:	b1d0      	cbz	r0, 800fbac <rcl_clock_init+0xdc>
 800fb76:	2200      	movs	r2, #0
 800fb78:	2300      	movs	r3, #0
 800fb7a:	e9c0 2300 	strd	r2, r3, [r0]
 800fb7e:	2301      	movs	r3, #1
 800fb80:	7207      	strb	r7, [r0, #8]
 800fb82:	4a0c      	ldr	r2, [pc, #48]	; (800fbb4 <rcl_clock_init+0xe4>)
 800fb84:	7033      	strb	r3, [r6, #0]
 800fb86:	46bc      	mov	ip, r7
 800fb88:	60f2      	str	r2, [r6, #12]
 800fb8a:	4660      	mov	r0, ip
 800fb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb8e:	2e00      	cmp	r6, #0
 800fb90:	d0ac      	beq.n	800faec <rcl_clock_init+0x1c>
 800fb92:	2c00      	cmp	r4, #0
 800fb94:	d0aa      	beq.n	800faec <rcl_clock_init+0x1c>
 800fb96:	2300      	movs	r3, #0
 800fb98:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800fb9c:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800fbbc <rcl_clock_init+0xec>
 800fba0:	6133      	str	r3, [r6, #16]
 800fba2:	f106 0514 	add.w	r5, r6, #20
 800fba6:	469c      	mov	ip, r3
 800fba8:	2702      	movs	r7, #2
 800fbaa:	e7b1      	b.n	800fb10 <rcl_clock_init+0x40>
 800fbac:	f04f 0c0a 	mov.w	ip, #10
 800fbb0:	e79e      	b.n	800faf0 <rcl_clock_init+0x20>
 800fbb2:	bf00      	nop
 800fbb4:	0800fab1 	.word	0x0800fab1
 800fbb8:	0800faa9 	.word	0x0800faa9
 800fbbc:	0800faa1 	.word	0x0800faa1

0800fbc0 <rcl_clock_get_now>:
 800fbc0:	b140      	cbz	r0, 800fbd4 <rcl_clock_get_now+0x14>
 800fbc2:	b139      	cbz	r1, 800fbd4 <rcl_clock_get_now+0x14>
 800fbc4:	7803      	ldrb	r3, [r0, #0]
 800fbc6:	b11b      	cbz	r3, 800fbd0 <rcl_clock_get_now+0x10>
 800fbc8:	68c3      	ldr	r3, [r0, #12]
 800fbca:	b10b      	cbz	r3, 800fbd0 <rcl_clock_get_now+0x10>
 800fbcc:	6900      	ldr	r0, [r0, #16]
 800fbce:	4718      	bx	r3
 800fbd0:	2001      	movs	r0, #1
 800fbd2:	4770      	bx	lr
 800fbd4:	200b      	movs	r0, #11
 800fbd6:	4770      	bx	lr

0800fbd8 <rcl_timer_call>:
 800fbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbdc:	b087      	sub	sp, #28
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d06d      	beq.n	800fcbe <rcl_timer_call+0xe6>
 800fbe2:	6803      	ldr	r3, [r0, #0]
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d063      	beq.n	800fcb2 <rcl_timer_call+0xda>
 800fbea:	f3bf 8f5b 	dmb	ish
 800fbee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fbf2:	f3bf 8f5b 	dmb	ish
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d150      	bne.n	800fc9c <rcl_timer_call+0xc4>
 800fbfa:	6803      	ldr	r3, [r0, #0]
 800fbfc:	a904      	add	r1, sp, #16
 800fbfe:	6818      	ldr	r0, [r3, #0]
 800fc00:	f7ff ffde 	bl	800fbc0 <rcl_clock_get_now>
 800fc04:	4605      	mov	r5, r0
 800fc06:	2800      	cmp	r0, #0
 800fc08:	d14a      	bne.n	800fca0 <rcl_timer_call+0xc8>
 800fc0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	db4a      	blt.n	800fca8 <rcl_timer_call+0xd0>
 800fc12:	6820      	ldr	r0, [r4, #0]
 800fc14:	f04f 0a05 	mov.w	sl, #5
 800fc18:	f8cd a000 	str.w	sl, [sp]
 800fc1c:	3020      	adds	r0, #32
 800fc1e:	f001 fd07 	bl	8011630 <__atomic_exchange_8>
 800fc22:	6823      	ldr	r3, [r4, #0]
 800fc24:	f3bf 8f5b 	dmb	ish
 800fc28:	4680      	mov	r8, r0
 800fc2a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800fc2e:	f3bf 8f5b 	dmb	ish
 800fc32:	6820      	ldr	r0, [r4, #0]
 800fc34:	4689      	mov	r9, r1
 800fc36:	3028      	adds	r0, #40	; 0x28
 800fc38:	4651      	mov	r1, sl
 800fc3a:	f001 fc8d 	bl	8011558 <__atomic_load_8>
 800fc3e:	4606      	mov	r6, r0
 800fc40:	6820      	ldr	r0, [r4, #0]
 800fc42:	460f      	mov	r7, r1
 800fc44:	3018      	adds	r0, #24
 800fc46:	4651      	mov	r1, sl
 800fc48:	f001 fc86 	bl	8011558 <__atomic_load_8>
 800fc4c:	1836      	adds	r6, r6, r0
 800fc4e:	4602      	mov	r2, r0
 800fc50:	4682      	mov	sl, r0
 800fc52:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800fc56:	eb47 0701 	adc.w	r7, r7, r1
 800fc5a:	4286      	cmp	r6, r0
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	eb77 010c 	sbcs.w	r1, r7, ip
 800fc62:	da04      	bge.n	800fc6e <rcl_timer_call+0x96>
 800fc64:	ea53 0102 	orrs.w	r1, r3, r2
 800fc68:	d12e      	bne.n	800fcc8 <rcl_timer_call+0xf0>
 800fc6a:	4606      	mov	r6, r0
 800fc6c:	4667      	mov	r7, ip
 800fc6e:	6820      	ldr	r0, [r4, #0]
 800fc70:	2105      	movs	r1, #5
 800fc72:	4632      	mov	r2, r6
 800fc74:	463b      	mov	r3, r7
 800fc76:	3028      	adds	r0, #40	; 0x28
 800fc78:	9100      	str	r1, [sp, #0]
 800fc7a:	f001 fca3 	bl	80115c4 <__atomic_store_8>
 800fc7e:	f1bb 0f00 	cmp.w	fp, #0
 800fc82:	d00d      	beq.n	800fca0 <rcl_timer_call+0xc8>
 800fc84:	9a04      	ldr	r2, [sp, #16]
 800fc86:	9b05      	ldr	r3, [sp, #20]
 800fc88:	ebb2 0208 	subs.w	r2, r2, r8
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	eb63 0309 	sbc.w	r3, r3, r9
 800fc92:	47d8      	blx	fp
 800fc94:	4628      	mov	r0, r5
 800fc96:	b007      	add	sp, #28
 800fc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9c:	f240 3521 	movw	r5, #801	; 0x321
 800fca0:	4628      	mov	r0, r5
 800fca2:	b007      	add	sp, #28
 800fca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca8:	2501      	movs	r5, #1
 800fcaa:	4628      	mov	r0, r5
 800fcac:	b007      	add	sp, #28
 800fcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb2:	f44f 7548 	mov.w	r5, #800	; 0x320
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	b007      	add	sp, #28
 800fcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcbe:	250b      	movs	r5, #11
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	b007      	add	sp, #28
 800fcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc8:	1b80      	subs	r0, r0, r6
 800fcca:	eb6c 0107 	sbc.w	r1, ip, r7
 800fcce:	3801      	subs	r0, #1
 800fcd0:	f161 0100 	sbc.w	r1, r1, #0
 800fcd4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800fcd8:	f7f0 fe78 	bl	80009cc <__aeabi_ldivmod>
 800fcdc:	9b02      	ldr	r3, [sp, #8]
 800fcde:	3001      	adds	r0, #1
 800fce0:	f141 0100 	adc.w	r1, r1, #0
 800fce4:	fb00 f303 	mul.w	r3, r0, r3
 800fce8:	fb01 330a 	mla	r3, r1, sl, r3
 800fcec:	fba0 0a0a 	umull	r0, sl, r0, sl
 800fcf0:	1986      	adds	r6, r0, r6
 800fcf2:	4453      	add	r3, sl
 800fcf4:	eb43 0707 	adc.w	r7, r3, r7
 800fcf8:	e7b9      	b.n	800fc6e <rcl_timer_call+0x96>
 800fcfa:	bf00      	nop

0800fcfc <rcl_timer_is_ready>:
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	b378      	cbz	r0, 800fd62 <rcl_timer_is_ready+0x66>
 800fd02:	6803      	ldr	r3, [r0, #0]
 800fd04:	4604      	mov	r4, r0
 800fd06:	b383      	cbz	r3, 800fd6a <rcl_timer_is_ready+0x6e>
 800fd08:	460d      	mov	r5, r1
 800fd0a:	b351      	cbz	r1, 800fd62 <rcl_timer_is_ready+0x66>
 800fd0c:	f3bf 8f5b 	dmb	ish
 800fd10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd14:	f3bf 8f5b 	dmb	ish
 800fd18:	b953      	cbnz	r3, 800fd30 <rcl_timer_is_ready+0x34>
 800fd1a:	6803      	ldr	r3, [r0, #0]
 800fd1c:	4669      	mov	r1, sp
 800fd1e:	6818      	ldr	r0, [r3, #0]
 800fd20:	f7ff ff4e 	bl	800fbc0 <rcl_clock_get_now>
 800fd24:	4606      	mov	r6, r0
 800fd26:	b140      	cbz	r0, 800fd3a <rcl_timer_is_ready+0x3e>
 800fd28:	f240 3321 	movw	r3, #801	; 0x321
 800fd2c:	4298      	cmp	r0, r3
 800fd2e:	d101      	bne.n	800fd34 <rcl_timer_is_ready+0x38>
 800fd30:	2600      	movs	r6, #0
 800fd32:	702e      	strb	r6, [r5, #0]
 800fd34:	4630      	mov	r0, r6
 800fd36:	b002      	add	sp, #8
 800fd38:	bd70      	pop	{r4, r5, r6, pc}
 800fd3a:	6820      	ldr	r0, [r4, #0]
 800fd3c:	2105      	movs	r1, #5
 800fd3e:	3028      	adds	r0, #40	; 0x28
 800fd40:	f001 fc0a 	bl	8011558 <__atomic_load_8>
 800fd44:	9b00      	ldr	r3, [sp, #0]
 800fd46:	1ac0      	subs	r0, r0, r3
 800fd48:	9b01      	ldr	r3, [sp, #4]
 800fd4a:	eb61 0103 	sbc.w	r1, r1, r3
 800fd4e:	2801      	cmp	r0, #1
 800fd50:	f171 0300 	sbcs.w	r3, r1, #0
 800fd54:	bfb4      	ite	lt
 800fd56:	2301      	movlt	r3, #1
 800fd58:	2300      	movge	r3, #0
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	702b      	strb	r3, [r5, #0]
 800fd5e:	b002      	add	sp, #8
 800fd60:	bd70      	pop	{r4, r5, r6, pc}
 800fd62:	260b      	movs	r6, #11
 800fd64:	4630      	mov	r0, r6
 800fd66:	b002      	add	sp, #8
 800fd68:	bd70      	pop	{r4, r5, r6, pc}
 800fd6a:	f44f 7648 	mov.w	r6, #800	; 0x320
 800fd6e:	e7e1      	b.n	800fd34 <rcl_timer_is_ready+0x38>

0800fd70 <rcl_timer_get_time_until_next_call>:
 800fd70:	b570      	push	{r4, r5, r6, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	b330      	cbz	r0, 800fdc4 <rcl_timer_get_time_until_next_call+0x54>
 800fd76:	6803      	ldr	r3, [r0, #0]
 800fd78:	4604      	mov	r4, r0
 800fd7a:	b33b      	cbz	r3, 800fdcc <rcl_timer_get_time_until_next_call+0x5c>
 800fd7c:	460d      	mov	r5, r1
 800fd7e:	b309      	cbz	r1, 800fdc4 <rcl_timer_get_time_until_next_call+0x54>
 800fd80:	f3bf 8f5b 	dmb	ish
 800fd84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd88:	f3bf 8f5b 	dmb	ish
 800fd8c:	b9ab      	cbnz	r3, 800fdba <rcl_timer_get_time_until_next_call+0x4a>
 800fd8e:	6803      	ldr	r3, [r0, #0]
 800fd90:	4669      	mov	r1, sp
 800fd92:	6818      	ldr	r0, [r3, #0]
 800fd94:	f7ff ff14 	bl	800fbc0 <rcl_clock_get_now>
 800fd98:	4606      	mov	r6, r0
 800fd9a:	b958      	cbnz	r0, 800fdb4 <rcl_timer_get_time_until_next_call+0x44>
 800fd9c:	6820      	ldr	r0, [r4, #0]
 800fd9e:	2105      	movs	r1, #5
 800fda0:	3028      	adds	r0, #40	; 0x28
 800fda2:	f001 fbd9 	bl	8011558 <__atomic_load_8>
 800fda6:	9b00      	ldr	r3, [sp, #0]
 800fda8:	1ac0      	subs	r0, r0, r3
 800fdaa:	9b01      	ldr	r3, [sp, #4]
 800fdac:	6028      	str	r0, [r5, #0]
 800fdae:	eb61 0103 	sbc.w	r1, r1, r3
 800fdb2:	6069      	str	r1, [r5, #4]
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	b002      	add	sp, #8
 800fdb8:	bd70      	pop	{r4, r5, r6, pc}
 800fdba:	f240 3621 	movw	r6, #801	; 0x321
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	b002      	add	sp, #8
 800fdc2:	bd70      	pop	{r4, r5, r6, pc}
 800fdc4:	260b      	movs	r6, #11
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	b002      	add	sp, #8
 800fdca:	bd70      	pop	{r4, r5, r6, pc}
 800fdcc:	f44f 7648 	mov.w	r6, #800	; 0x320
 800fdd0:	e7f0      	b.n	800fdb4 <rcl_timer_get_time_until_next_call+0x44>
 800fdd2:	bf00      	nop

0800fdd4 <rcl_timer_get_guard_condition>:
 800fdd4:	b130      	cbz	r0, 800fde4 <rcl_timer_get_guard_condition+0x10>
 800fdd6:	6800      	ldr	r0, [r0, #0]
 800fdd8:	b120      	cbz	r0, 800fde4 <rcl_timer_get_guard_condition+0x10>
 800fdda:	68c3      	ldr	r3, [r0, #12]
 800fddc:	b10b      	cbz	r3, 800fde2 <rcl_timer_get_guard_condition+0xe>
 800fdde:	3008      	adds	r0, #8
 800fde0:	4770      	bx	lr
 800fde2:	4618      	mov	r0, r3
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop

0800fde8 <rcl_validate_enclave_name_with_size>:
 800fde8:	b378      	cbz	r0, 800fe4a <rcl_validate_enclave_name_with_size+0x62>
 800fdea:	b570      	push	{r4, r5, r6, lr}
 800fdec:	4615      	mov	r5, r2
 800fdee:	b0c2      	sub	sp, #264	; 0x108
 800fdf0:	b302      	cbz	r2, 800fe34 <rcl_validate_enclave_name_with_size+0x4c>
 800fdf2:	461e      	mov	r6, r3
 800fdf4:	466a      	mov	r2, sp
 800fdf6:	ab01      	add	r3, sp, #4
 800fdf8:	460c      	mov	r4, r1
 800fdfa:	f7fb fba9 	bl	800b550 <rmw_validate_namespace_with_size>
 800fdfe:	4684      	mov	ip, r0
 800fe00:	b9e8      	cbnz	r0, 800fe3e <rcl_validate_enclave_name_with_size+0x56>
 800fe02:	9b00      	ldr	r3, [sp, #0]
 800fe04:	b923      	cbnz	r3, 800fe10 <rcl_validate_enclave_name_with_size+0x28>
 800fe06:	2300      	movs	r3, #0
 800fe08:	602b      	str	r3, [r5, #0]
 800fe0a:	4660      	mov	r0, ip
 800fe0c:	b042      	add	sp, #264	; 0x108
 800fe0e:	bd70      	pop	{r4, r5, r6, pc}
 800fe10:	2b07      	cmp	r3, #7
 800fe12:	d007      	beq.n	800fe24 <rcl_validate_enclave_name_with_size+0x3c>
 800fe14:	1e5a      	subs	r2, r3, #1
 800fe16:	2a05      	cmp	r2, #5
 800fe18:	d833      	bhi.n	800fe82 <rcl_validate_enclave_name_with_size+0x9a>
 800fe1a:	e8df f002 	tbb	[pc, r2]
 800fe1e:	2c2f      	.short	0x2c2f
 800fe20:	1a232629 	.word	0x1a232629
 800fe24:	2cff      	cmp	r4, #255	; 0xff
 800fe26:	d9ee      	bls.n	800fe06 <rcl_validate_enclave_name_with_size+0x1e>
 800fe28:	602b      	str	r3, [r5, #0]
 800fe2a:	2e00      	cmp	r6, #0
 800fe2c:	d0ed      	beq.n	800fe0a <rcl_validate_enclave_name_with_size+0x22>
 800fe2e:	23fe      	movs	r3, #254	; 0xfe
 800fe30:	6033      	str	r3, [r6, #0]
 800fe32:	e7ea      	b.n	800fe0a <rcl_validate_enclave_name_with_size+0x22>
 800fe34:	f04f 0c0b 	mov.w	ip, #11
 800fe38:	4660      	mov	r0, ip
 800fe3a:	b042      	add	sp, #264	; 0x108
 800fe3c:	bd70      	pop	{r4, r5, r6, pc}
 800fe3e:	f7ff f8c9 	bl	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 800fe42:	4684      	mov	ip, r0
 800fe44:	4660      	mov	r0, ip
 800fe46:	b042      	add	sp, #264	; 0x108
 800fe48:	bd70      	pop	{r4, r5, r6, pc}
 800fe4a:	f04f 0c0b 	mov.w	ip, #11
 800fe4e:	4660      	mov	r0, ip
 800fe50:	4770      	bx	lr
 800fe52:	2306      	movs	r3, #6
 800fe54:	602b      	str	r3, [r5, #0]
 800fe56:	2e00      	cmp	r6, #0
 800fe58:	d0d7      	beq.n	800fe0a <rcl_validate_enclave_name_with_size+0x22>
 800fe5a:	9b01      	ldr	r3, [sp, #4]
 800fe5c:	6033      	str	r3, [r6, #0]
 800fe5e:	4660      	mov	r0, ip
 800fe60:	b042      	add	sp, #264	; 0x108
 800fe62:	bd70      	pop	{r4, r5, r6, pc}
 800fe64:	2305      	movs	r3, #5
 800fe66:	602b      	str	r3, [r5, #0]
 800fe68:	e7f5      	b.n	800fe56 <rcl_validate_enclave_name_with_size+0x6e>
 800fe6a:	2304      	movs	r3, #4
 800fe6c:	602b      	str	r3, [r5, #0]
 800fe6e:	e7f2      	b.n	800fe56 <rcl_validate_enclave_name_with_size+0x6e>
 800fe70:	2303      	movs	r3, #3
 800fe72:	602b      	str	r3, [r5, #0]
 800fe74:	e7ef      	b.n	800fe56 <rcl_validate_enclave_name_with_size+0x6e>
 800fe76:	2302      	movs	r3, #2
 800fe78:	602b      	str	r3, [r5, #0]
 800fe7a:	e7ec      	b.n	800fe56 <rcl_validate_enclave_name_with_size+0x6e>
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	602b      	str	r3, [r5, #0]
 800fe80:	e7e9      	b.n	800fe56 <rcl_validate_enclave_name_with_size+0x6e>
 800fe82:	4a04      	ldr	r2, [pc, #16]	; (800fe94 <rcl_validate_enclave_name_with_size+0xac>)
 800fe84:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fe88:	a802      	add	r0, sp, #8
 800fe8a:	f7fb fa7f 	bl	800b38c <rcutils_snprintf>
 800fe8e:	f04f 0c01 	mov.w	ip, #1
 800fe92:	e7ba      	b.n	800fe0a <rcl_validate_enclave_name_with_size+0x22>
 800fe94:	080167ac 	.word	0x080167ac

0800fe98 <rcl_validate_enclave_name>:
 800fe98:	b168      	cbz	r0, 800feb6 <rcl_validate_enclave_name+0x1e>
 800fe9a:	b570      	push	{r4, r5, r6, lr}
 800fe9c:	460d      	mov	r5, r1
 800fe9e:	4616      	mov	r6, r2
 800fea0:	4604      	mov	r4, r0
 800fea2:	f7f0 f9a7 	bl	80001f4 <strlen>
 800fea6:	4633      	mov	r3, r6
 800fea8:	4601      	mov	r1, r0
 800feaa:	462a      	mov	r2, r5
 800feac:	4620      	mov	r0, r4
 800feae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800feb2:	f7ff bf99 	b.w	800fde8 <rcl_validate_enclave_name_with_size>
 800feb6:	200b      	movs	r0, #11
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop

0800febc <rcl_get_zero_initialized_wait_set>:
 800febc:	b510      	push	{r4, lr}
 800febe:	4c08      	ldr	r4, [pc, #32]	; (800fee0 <rcl_get_zero_initialized_wait_set+0x24>)
 800fec0:	4686      	mov	lr, r0
 800fec2:	4684      	mov	ip, r0
 800fec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fec6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800feca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fecc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fed2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	f8cc 3000 	str.w	r3, [ip]
 800fedc:	4670      	mov	r0, lr
 800fede:	bd10      	pop	{r4, pc}
 800fee0:	0801680c 	.word	0x0801680c

0800fee4 <rcl_wait_set_is_valid>:
 800fee4:	b118      	cbz	r0, 800feee <rcl_wait_set_is_valid+0xa>
 800fee6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800fee8:	3800      	subs	r0, #0
 800feea:	bf18      	it	ne
 800feec:	2001      	movne	r0, #1
 800feee:	4770      	bx	lr

0800fef0 <rcl_wait_set_fini>:
 800fef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef4:	b082      	sub	sp, #8
 800fef6:	2800      	cmp	r0, #0
 800fef8:	f000 8095 	beq.w	8010026 <rcl_wait_set_fini+0x136>
 800fefc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800fefe:	4604      	mov	r4, r0
 800ff00:	2e00      	cmp	r6, #0
 800ff02:	f000 808c 	beq.w	801001e <rcl_wait_set_fini+0x12e>
 800ff06:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800ff08:	f002 fca0 	bl	801284c <rmw_destroy_wait_set>
 800ff0c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ff0e:	1e06      	subs	r6, r0, #0
 800ff10:	bf18      	it	ne
 800ff12:	f44f 7661 	movne.w	r6, #900	; 0x384
 800ff16:	2d00      	cmp	r5, #0
 800ff18:	f000 8081 	beq.w	801001e <rcl_wait_set_fini+0x12e>
 800ff1c:	6820      	ldr	r0, [r4, #0]
 800ff1e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800ff22:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ff24:	2700      	movs	r7, #0
 800ff26:	6067      	str	r7, [r4, #4]
 800ff28:	602f      	str	r7, [r5, #0]
 800ff2a:	b120      	cbz	r0, 800ff36 <rcl_wait_set_fini+0x46>
 800ff2c:	9101      	str	r1, [sp, #4]
 800ff2e:	47c0      	blx	r8
 800ff30:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ff32:	9901      	ldr	r1, [sp, #4]
 800ff34:	6027      	str	r7, [r4, #0]
 800ff36:	68a8      	ldr	r0, [r5, #8]
 800ff38:	b120      	cbz	r0, 800ff44 <rcl_wait_set_fini+0x54>
 800ff3a:	47c0      	blx	r8
 800ff3c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ff3e:	2300      	movs	r3, #0
 800ff40:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800ff44:	68a0      	ldr	r0, [r4, #8]
 800ff46:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800ff48:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ff4a:	f04f 0800 	mov.w	r8, #0
 800ff4e:	f8c4 800c 	str.w	r8, [r4, #12]
 800ff52:	f8c5 800c 	str.w	r8, [r5, #12]
 800ff56:	b128      	cbz	r0, 800ff64 <rcl_wait_set_fini+0x74>
 800ff58:	47b8      	blx	r7
 800ff5a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ff5c:	f8c4 8008 	str.w	r8, [r4, #8]
 800ff60:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800ff62:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ff64:	6968      	ldr	r0, [r5, #20]
 800ff66:	f04f 0800 	mov.w	r8, #0
 800ff6a:	f8c5 8010 	str.w	r8, [r5, #16]
 800ff6e:	b128      	cbz	r0, 800ff7c <rcl_wait_set_fini+0x8c>
 800ff70:	47b8      	blx	r7
 800ff72:	f8c5 8014 	str.w	r8, [r5, #20]
 800ff76:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ff78:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800ff7a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ff7c:	6920      	ldr	r0, [r4, #16]
 800ff7e:	f04f 0800 	mov.w	r8, #0
 800ff82:	f8c4 8014 	str.w	r8, [r4, #20]
 800ff86:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 800ff8a:	b128      	cbz	r0, 800ff98 <rcl_wait_set_fini+0xa8>
 800ff8c:	47b8      	blx	r7
 800ff8e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ff90:	f8c4 8010 	str.w	r8, [r4, #16]
 800ff94:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800ff96:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ff98:	69a0      	ldr	r0, [r4, #24]
 800ff9a:	f04f 0800 	mov.w	r8, #0
 800ff9e:	f8c4 801c 	str.w	r8, [r4, #28]
 800ffa2:	f8c5 8018 	str.w	r8, [r5, #24]
 800ffa6:	b128      	cbz	r0, 800ffb4 <rcl_wait_set_fini+0xc4>
 800ffa8:	9101      	str	r1, [sp, #4]
 800ffaa:	47b8      	blx	r7
 800ffac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ffae:	9901      	ldr	r1, [sp, #4]
 800ffb0:	f8c4 8018 	str.w	r8, [r4, #24]
 800ffb4:	6a28      	ldr	r0, [r5, #32]
 800ffb6:	b120      	cbz	r0, 800ffc2 <rcl_wait_set_fini+0xd2>
 800ffb8:	47b8      	blx	r7
 800ffba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800ffc2:	6a20      	ldr	r0, [r4, #32]
 800ffc4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800ffc8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ffca:	2700      	movs	r7, #0
 800ffcc:	6267      	str	r7, [r4, #36]	; 0x24
 800ffce:	626f      	str	r7, [r5, #36]	; 0x24
 800ffd0:	b120      	cbz	r0, 800ffdc <rcl_wait_set_fini+0xec>
 800ffd2:	9101      	str	r1, [sp, #4]
 800ffd4:	47c0      	blx	r8
 800ffd6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ffd8:	9901      	ldr	r1, [sp, #4]
 800ffda:	6227      	str	r7, [r4, #32]
 800ffdc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800ffde:	b120      	cbz	r0, 800ffea <rcl_wait_set_fini+0xfa>
 800ffe0:	47c0      	blx	r8
 800ffe2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800ffea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ffec:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800fff0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800fff2:	2700      	movs	r7, #0
 800fff4:	62e7      	str	r7, [r4, #44]	; 0x2c
 800fff6:	632f      	str	r7, [r5, #48]	; 0x30
 800fff8:	b120      	cbz	r0, 8010004 <rcl_wait_set_fini+0x114>
 800fffa:	9101      	str	r1, [sp, #4]
 800fffc:	47c0      	blx	r8
 800fffe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010000:	9901      	ldr	r1, [sp, #4]
 8010002:	62a7      	str	r7, [r4, #40]	; 0x28
 8010004:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8010006:	b120      	cbz	r0, 8010012 <rcl_wait_set_fini+0x122>
 8010008:	47c0      	blx	r8
 801000a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801000c:	2300      	movs	r3, #0
 801000e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8010012:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8010014:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010016:	4628      	mov	r0, r5
 8010018:	4798      	blx	r3
 801001a:	2300      	movs	r3, #0
 801001c:	6323      	str	r3, [r4, #48]	; 0x30
 801001e:	4630      	mov	r0, r6
 8010020:	b002      	add	sp, #8
 8010022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010026:	260b      	movs	r6, #11
 8010028:	4630      	mov	r0, r6
 801002a:	b002      	add	sp, #8
 801002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010030 <rcl_wait_set_add_subscription>:
 8010030:	b318      	cbz	r0, 801007a <rcl_wait_set_add_subscription+0x4a>
 8010032:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010034:	b570      	push	{r4, r5, r6, lr}
 8010036:	4604      	mov	r4, r0
 8010038:	b30b      	cbz	r3, 801007e <rcl_wait_set_add_subscription+0x4e>
 801003a:	b319      	cbz	r1, 8010084 <rcl_wait_set_add_subscription+0x54>
 801003c:	681d      	ldr	r5, [r3, #0]
 801003e:	6840      	ldr	r0, [r0, #4]
 8010040:	4285      	cmp	r5, r0
 8010042:	d217      	bcs.n	8010074 <rcl_wait_set_add_subscription+0x44>
 8010044:	6820      	ldr	r0, [r4, #0]
 8010046:	1c6e      	adds	r6, r5, #1
 8010048:	601e      	str	r6, [r3, #0]
 801004a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801004e:	b102      	cbz	r2, 8010052 <rcl_wait_set_add_subscription+0x22>
 8010050:	6015      	str	r5, [r2, #0]
 8010052:	4608      	mov	r0, r1
 8010054:	f7fa f924 	bl	800a2a0 <rcl_subscription_get_rmw_handle>
 8010058:	b150      	cbz	r0, 8010070 <rcl_wait_set_add_subscription+0x40>
 801005a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801005c:	6842      	ldr	r2, [r0, #4]
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010064:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010066:	6853      	ldr	r3, [r2, #4]
 8010068:	3301      	adds	r3, #1
 801006a:	2000      	movs	r0, #0
 801006c:	6053      	str	r3, [r2, #4]
 801006e:	bd70      	pop	{r4, r5, r6, pc}
 8010070:	2001      	movs	r0, #1
 8010072:	bd70      	pop	{r4, r5, r6, pc}
 8010074:	f240 3086 	movw	r0, #902	; 0x386
 8010078:	bd70      	pop	{r4, r5, r6, pc}
 801007a:	200b      	movs	r0, #11
 801007c:	4770      	bx	lr
 801007e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010082:	bd70      	pop	{r4, r5, r6, pc}
 8010084:	200b      	movs	r0, #11
 8010086:	bd70      	pop	{r4, r5, r6, pc}

08010088 <rcl_wait_set_clear>:
 8010088:	2800      	cmp	r0, #0
 801008a:	d073      	beq.n	8010174 <rcl_wait_set_clear+0xec>
 801008c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801008e:	b510      	push	{r4, lr}
 8010090:	4604      	mov	r4, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d070      	beq.n	8010178 <rcl_wait_set_clear+0xf0>
 8010096:	6800      	ldr	r0, [r0, #0]
 8010098:	b138      	cbz	r0, 80100aa <rcl_wait_set_clear+0x22>
 801009a:	6862      	ldr	r2, [r4, #4]
 801009c:	2100      	movs	r1, #0
 801009e:	0092      	lsls	r2, r2, #2
 80100a0:	f004 ffc2 	bl	8015028 <memset>
 80100a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80100a6:	2200      	movs	r2, #0
 80100a8:	601a      	str	r2, [r3, #0]
 80100aa:	68a0      	ldr	r0, [r4, #8]
 80100ac:	b138      	cbz	r0, 80100be <rcl_wait_set_clear+0x36>
 80100ae:	68e2      	ldr	r2, [r4, #12]
 80100b0:	2100      	movs	r1, #0
 80100b2:	0092      	lsls	r2, r2, #2
 80100b4:	f004 ffb8 	bl	8015028 <memset>
 80100b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80100ba:	2200      	movs	r2, #0
 80100bc:	60da      	str	r2, [r3, #12]
 80100be:	69a0      	ldr	r0, [r4, #24]
 80100c0:	b138      	cbz	r0, 80100d2 <rcl_wait_set_clear+0x4a>
 80100c2:	69e2      	ldr	r2, [r4, #28]
 80100c4:	2100      	movs	r1, #0
 80100c6:	0092      	lsls	r2, r2, #2
 80100c8:	f004 ffae 	bl	8015028 <memset>
 80100cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80100ce:	2200      	movs	r2, #0
 80100d0:	619a      	str	r2, [r3, #24]
 80100d2:	6a20      	ldr	r0, [r4, #32]
 80100d4:	b138      	cbz	r0, 80100e6 <rcl_wait_set_clear+0x5e>
 80100d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80100d8:	2100      	movs	r1, #0
 80100da:	0092      	lsls	r2, r2, #2
 80100dc:	f004 ffa4 	bl	8015028 <memset>
 80100e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80100e2:	2200      	movs	r2, #0
 80100e4:	625a      	str	r2, [r3, #36]	; 0x24
 80100e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80100e8:	b138      	cbz	r0, 80100fa <rcl_wait_set_clear+0x72>
 80100ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80100ec:	2100      	movs	r1, #0
 80100ee:	0092      	lsls	r2, r2, #2
 80100f0:	f004 ff9a 	bl	8015028 <memset>
 80100f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80100f6:	2200      	movs	r2, #0
 80100f8:	631a      	str	r2, [r3, #48]	; 0x30
 80100fa:	6920      	ldr	r0, [r4, #16]
 80100fc:	b138      	cbz	r0, 801010e <rcl_wait_set_clear+0x86>
 80100fe:	6962      	ldr	r2, [r4, #20]
 8010100:	2100      	movs	r1, #0
 8010102:	0092      	lsls	r2, r2, #2
 8010104:	f004 ff90 	bl	8015028 <memset>
 8010108:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801010a:	2200      	movs	r2, #0
 801010c:	641a      	str	r2, [r3, #64]	; 0x40
 801010e:	6898      	ldr	r0, [r3, #8]
 8010110:	b138      	cbz	r0, 8010122 <rcl_wait_set_clear+0x9a>
 8010112:	685a      	ldr	r2, [r3, #4]
 8010114:	2100      	movs	r1, #0
 8010116:	0092      	lsls	r2, r2, #2
 8010118:	f004 ff86 	bl	8015028 <memset>
 801011c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801011e:	2200      	movs	r2, #0
 8010120:	605a      	str	r2, [r3, #4]
 8010122:	6958      	ldr	r0, [r3, #20]
 8010124:	b138      	cbz	r0, 8010136 <rcl_wait_set_clear+0xae>
 8010126:	691a      	ldr	r2, [r3, #16]
 8010128:	2100      	movs	r1, #0
 801012a:	0092      	lsls	r2, r2, #2
 801012c:	f004 ff7c 	bl	8015028 <memset>
 8010130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010132:	2200      	movs	r2, #0
 8010134:	611a      	str	r2, [r3, #16]
 8010136:	6a18      	ldr	r0, [r3, #32]
 8010138:	b138      	cbz	r0, 801014a <rcl_wait_set_clear+0xc2>
 801013a:	69da      	ldr	r2, [r3, #28]
 801013c:	2100      	movs	r1, #0
 801013e:	0092      	lsls	r2, r2, #2
 8010140:	f004 ff72 	bl	8015028 <memset>
 8010144:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010146:	2200      	movs	r2, #0
 8010148:	61da      	str	r2, [r3, #28]
 801014a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801014c:	b138      	cbz	r0, 801015e <rcl_wait_set_clear+0xd6>
 801014e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010150:	2100      	movs	r1, #0
 8010152:	0092      	lsls	r2, r2, #2
 8010154:	f004 ff68 	bl	8015028 <memset>
 8010158:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801015a:	2200      	movs	r2, #0
 801015c:	629a      	str	r2, [r3, #40]	; 0x28
 801015e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010160:	b138      	cbz	r0, 8010172 <rcl_wait_set_clear+0xea>
 8010162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010164:	2100      	movs	r1, #0
 8010166:	0092      	lsls	r2, r2, #2
 8010168:	f004 ff5e 	bl	8015028 <memset>
 801016c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801016e:	2000      	movs	r0, #0
 8010170:	6358      	str	r0, [r3, #52]	; 0x34
 8010172:	bd10      	pop	{r4, pc}
 8010174:	200b      	movs	r0, #11
 8010176:	4770      	bx	lr
 8010178:	f44f 7061 	mov.w	r0, #900	; 0x384
 801017c:	bd10      	pop	{r4, pc}
 801017e:	bf00      	nop

08010180 <rcl_wait_set_resize>:
 8010180:	2800      	cmp	r0, #0
 8010182:	f000 8185 	beq.w	8010490 <rcl_wait_set_resize+0x310>
 8010186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801018a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801018c:	b083      	sub	sp, #12
 801018e:	4605      	mov	r5, r0
 8010190:	2c00      	cmp	r4, #0
 8010192:	f000 817f 	beq.w	8010494 <rcl_wait_set_resize+0x314>
 8010196:	f04f 0900 	mov.w	r9, #0
 801019a:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801019e:	461f      	mov	r7, r3
 80101a0:	4688      	mov	r8, r1
 80101a2:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80101a6:	4616      	mov	r6, r2
 80101a8:	f8c0 9004 	str.w	r9, [r0, #4]
 80101ac:	f8c4 9000 	str.w	r9, [r4]
 80101b0:	2900      	cmp	r1, #0
 80101b2:	f000 80bd 	beq.w	8010330 <rcl_wait_set_resize+0x1b0>
 80101b6:	008c      	lsls	r4, r1, #2
 80101b8:	6800      	ldr	r0, [r0, #0]
 80101ba:	9301      	str	r3, [sp, #4]
 80101bc:	4652      	mov	r2, sl
 80101be:	4621      	mov	r1, r4
 80101c0:	4798      	blx	r3
 80101c2:	9b01      	ldr	r3, [sp, #4]
 80101c4:	6028      	str	r0, [r5, #0]
 80101c6:	2800      	cmp	r0, #0
 80101c8:	f000 80cb 	beq.w	8010362 <rcl_wait_set_resize+0x1e2>
 80101cc:	4622      	mov	r2, r4
 80101ce:	4649      	mov	r1, r9
 80101d0:	9301      	str	r3, [sp, #4]
 80101d2:	f004 ff29 	bl	8015028 <memset>
 80101d6:	f8c5 8004 	str.w	r8, [r5, #4]
 80101da:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80101de:	9b01      	ldr	r3, [sp, #4]
 80101e0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80101e4:	f8c8 9004 	str.w	r9, [r8, #4]
 80101e8:	4652      	mov	r2, sl
 80101ea:	4621      	mov	r1, r4
 80101ec:	4798      	blx	r3
 80101ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80101f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	f000 80ac 	beq.w	8010354 <rcl_wait_set_resize+0x1d4>
 80101fc:	4622      	mov	r2, r4
 80101fe:	4649      	mov	r1, r9
 8010200:	4618      	mov	r0, r3
 8010202:	f004 ff11 	bl	8015028 <memset>
 8010206:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010208:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801020c:	f04f 0800 	mov.w	r8, #0
 8010210:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8010214:	f8c5 800c 	str.w	r8, [r5, #12]
 8010218:	f8c4 800c 	str.w	r8, [r4, #12]
 801021c:	2e00      	cmp	r6, #0
 801021e:	f040 80a4 	bne.w	801036a <rcl_wait_set_resize+0x1ea>
 8010222:	68a8      	ldr	r0, [r5, #8]
 8010224:	b128      	cbz	r0, 8010232 <rcl_wait_set_resize+0xb2>
 8010226:	4649      	mov	r1, r9
 8010228:	4790      	blx	r2
 801022a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801022c:	60ae      	str	r6, [r5, #8]
 801022e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010232:	f04f 0800 	mov.w	r8, #0
 8010236:	19f6      	adds	r6, r6, r7
 8010238:	f8c4 8010 	str.w	r8, [r4, #16]
 801023c:	f040 80ac 	bne.w	8010398 <rcl_wait_set_resize+0x218>
 8010240:	6960      	ldr	r0, [r4, #20]
 8010242:	b130      	cbz	r0, 8010252 <rcl_wait_set_resize+0xd2>
 8010244:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010246:	4649      	mov	r1, r9
 8010248:	4798      	blx	r3
 801024a:	6166      	str	r6, [r4, #20]
 801024c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801024e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010252:	2600      	movs	r6, #0
 8010254:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010258:	616e      	str	r6, [r5, #20]
 801025a:	6426      	str	r6, [r4, #64]	; 0x40
 801025c:	2f00      	cmp	r7, #0
 801025e:	f040 80ad 	bne.w	80103bc <rcl_wait_set_resize+0x23c>
 8010262:	6928      	ldr	r0, [r5, #16]
 8010264:	b138      	cbz	r0, 8010276 <rcl_wait_set_resize+0xf6>
 8010266:	4649      	mov	r1, r9
 8010268:	47d0      	blx	sl
 801026a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801026c:	612f      	str	r7, [r5, #16]
 801026e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010272:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010278:	2600      	movs	r6, #0
 801027a:	61ee      	str	r6, [r5, #28]
 801027c:	61a6      	str	r6, [r4, #24]
 801027e:	2b00      	cmp	r3, #0
 8010280:	f040 80af 	bne.w	80103e2 <rcl_wait_set_resize+0x262>
 8010284:	69a8      	ldr	r0, [r5, #24]
 8010286:	b120      	cbz	r0, 8010292 <rcl_wait_set_resize+0x112>
 8010288:	4649      	mov	r1, r9
 801028a:	47d0      	blx	sl
 801028c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801028e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010290:	61ab      	str	r3, [r5, #24]
 8010292:	6a20      	ldr	r0, [r4, #32]
 8010294:	b128      	cbz	r0, 80102a2 <rcl_wait_set_resize+0x122>
 8010296:	4649      	mov	r1, r9
 8010298:	47d0      	blx	sl
 801029a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801029c:	2300      	movs	r3, #0
 801029e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80102a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102a4:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80102a6:	2600      	movs	r6, #0
 80102a8:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80102ac:	626e      	str	r6, [r5, #36]	; 0x24
 80102ae:	6266      	str	r6, [r4, #36]	; 0x24
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f000 80b6 	beq.w	8010422 <rcl_wait_set_resize+0x2a2>
 80102b6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80102ba:	6a28      	ldr	r0, [r5, #32]
 80102bc:	463a      	mov	r2, r7
 80102be:	4651      	mov	r1, sl
 80102c0:	47c8      	blx	r9
 80102c2:	6228      	str	r0, [r5, #32]
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d04c      	beq.n	8010362 <rcl_wait_set_resize+0x1e2>
 80102c8:	4652      	mov	r2, sl
 80102ca:	4631      	mov	r1, r6
 80102cc:	f004 feac 	bl	8015028 <memset>
 80102d0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80102d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102d4:	626b      	str	r3, [r5, #36]	; 0x24
 80102d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80102d8:	62a6      	str	r6, [r4, #40]	; 0x28
 80102da:	463a      	mov	r2, r7
 80102dc:	4651      	mov	r1, sl
 80102de:	47c8      	blx	r9
 80102e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80102e2:	62e0      	str	r0, [r4, #44]	; 0x2c
 80102e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80102e6:	2c00      	cmp	r4, #0
 80102e8:	f000 80f0 	beq.w	80104cc <rcl_wait_set_resize+0x34c>
 80102ec:	4620      	mov	r0, r4
 80102ee:	4652      	mov	r2, sl
 80102f0:	4631      	mov	r1, r6
 80102f2:	f004 fe99 	bl	8015028 <memset>
 80102f6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80102f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102fa:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80102fc:	2600      	movs	r6, #0
 80102fe:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8010302:	62ee      	str	r6, [r5, #44]	; 0x2c
 8010304:	6326      	str	r6, [r4, #48]	; 0x30
 8010306:	2b00      	cmp	r3, #0
 8010308:	f040 809d 	bne.w	8010446 <rcl_wait_set_resize+0x2c6>
 801030c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801030e:	b120      	cbz	r0, 801031a <rcl_wait_set_resize+0x19a>
 8010310:	4639      	mov	r1, r7
 8010312:	47c0      	blx	r8
 8010314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010316:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010318:	62ab      	str	r3, [r5, #40]	; 0x28
 801031a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801031c:	b310      	cbz	r0, 8010364 <rcl_wait_set_resize+0x1e4>
 801031e:	4639      	mov	r1, r7
 8010320:	47c0      	blx	r8
 8010322:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010324:	2000      	movs	r0, #0
 8010326:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 801032a:	b003      	add	sp, #12
 801032c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010330:	6800      	ldr	r0, [r0, #0]
 8010332:	b120      	cbz	r0, 801033e <rcl_wait_set_resize+0x1be>
 8010334:	4651      	mov	r1, sl
 8010336:	47d8      	blx	fp
 8010338:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801033a:	f8c5 8000 	str.w	r8, [r5]
 801033e:	68a0      	ldr	r0, [r4, #8]
 8010340:	2800      	cmp	r0, #0
 8010342:	f43f af61 	beq.w	8010208 <rcl_wait_set_resize+0x88>
 8010346:	4651      	mov	r1, sl
 8010348:	47d8      	blx	fp
 801034a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801034c:	2300      	movs	r3, #0
 801034e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010352:	e759      	b.n	8010208 <rcl_wait_set_resize+0x88>
 8010354:	6828      	ldr	r0, [r5, #0]
 8010356:	9301      	str	r3, [sp, #4]
 8010358:	4651      	mov	r1, sl
 801035a:	47d8      	blx	fp
 801035c:	9b01      	ldr	r3, [sp, #4]
 801035e:	e9c5 3300 	strd	r3, r3, [r5]
 8010362:	200a      	movs	r0, #10
 8010364:	b003      	add	sp, #12
 8010366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801036a:	00b4      	lsls	r4, r6, #2
 801036c:	68a8      	ldr	r0, [r5, #8]
 801036e:	464a      	mov	r2, r9
 8010370:	4621      	mov	r1, r4
 8010372:	4798      	blx	r3
 8010374:	60a8      	str	r0, [r5, #8]
 8010376:	2800      	cmp	r0, #0
 8010378:	d0f3      	beq.n	8010362 <rcl_wait_set_resize+0x1e2>
 801037a:	4622      	mov	r2, r4
 801037c:	4641      	mov	r1, r8
 801037e:	f004 fe53 	bl	8015028 <memset>
 8010382:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010384:	60ee      	str	r6, [r5, #12]
 8010386:	f04f 0800 	mov.w	r8, #0
 801038a:	19f6      	adds	r6, r6, r7
 801038c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010390:	f8c4 8010 	str.w	r8, [r4, #16]
 8010394:	f43f af54 	beq.w	8010240 <rcl_wait_set_resize+0xc0>
 8010398:	00b6      	lsls	r6, r6, #2
 801039a:	464a      	mov	r2, r9
 801039c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801039e:	6960      	ldr	r0, [r4, #20]
 80103a0:	4631      	mov	r1, r6
 80103a2:	4798      	blx	r3
 80103a4:	4681      	mov	r9, r0
 80103a6:	6160      	str	r0, [r4, #20]
 80103a8:	2800      	cmp	r0, #0
 80103aa:	d076      	beq.n	801049a <rcl_wait_set_resize+0x31a>
 80103ac:	4632      	mov	r2, r6
 80103ae:	4641      	mov	r1, r8
 80103b0:	f004 fe3a 	bl	8015028 <memset>
 80103b4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80103b6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80103ba:	e74a      	b.n	8010252 <rcl_wait_set_resize+0xd2>
 80103bc:	00bc      	lsls	r4, r7, #2
 80103be:	6928      	ldr	r0, [r5, #16]
 80103c0:	464a      	mov	r2, r9
 80103c2:	4621      	mov	r1, r4
 80103c4:	47c0      	blx	r8
 80103c6:	6128      	str	r0, [r5, #16]
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d0ca      	beq.n	8010362 <rcl_wait_set_resize+0x1e2>
 80103cc:	4622      	mov	r2, r4
 80103ce:	4631      	mov	r1, r6
 80103d0:	f004 fe2a 	bl	8015028 <memset>
 80103d4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80103d6:	616f      	str	r7, [r5, #20]
 80103d8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80103dc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80103e0:	e749      	b.n	8010276 <rcl_wait_set_resize+0xf6>
 80103e2:	009c      	lsls	r4, r3, #2
 80103e4:	69a8      	ldr	r0, [r5, #24]
 80103e6:	464a      	mov	r2, r9
 80103e8:	4621      	mov	r1, r4
 80103ea:	47c0      	blx	r8
 80103ec:	61a8      	str	r0, [r5, #24]
 80103ee:	2800      	cmp	r0, #0
 80103f0:	d0b7      	beq.n	8010362 <rcl_wait_set_resize+0x1e2>
 80103f2:	4622      	mov	r2, r4
 80103f4:	4631      	mov	r1, r6
 80103f6:	f004 fe17 	bl	8015028 <memset>
 80103fa:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80103fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103fe:	61eb      	str	r3, [r5, #28]
 8010400:	6a38      	ldr	r0, [r7, #32]
 8010402:	61fe      	str	r6, [r7, #28]
 8010404:	464a      	mov	r2, r9
 8010406:	4621      	mov	r1, r4
 8010408:	47c0      	blx	r8
 801040a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801040c:	6238      	str	r0, [r7, #32]
 801040e:	6a1f      	ldr	r7, [r3, #32]
 8010410:	2f00      	cmp	r7, #0
 8010412:	d054      	beq.n	80104be <rcl_wait_set_resize+0x33e>
 8010414:	4622      	mov	r2, r4
 8010416:	4631      	mov	r1, r6
 8010418:	4638      	mov	r0, r7
 801041a:	f004 fe05 	bl	8015028 <memset>
 801041e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010420:	e73f      	b.n	80102a2 <rcl_wait_set_resize+0x122>
 8010422:	6a28      	ldr	r0, [r5, #32]
 8010424:	b120      	cbz	r0, 8010430 <rcl_wait_set_resize+0x2b0>
 8010426:	4639      	mov	r1, r7
 8010428:	47c0      	blx	r8
 801042a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801042c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801042e:	622b      	str	r3, [r5, #32]
 8010430:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010432:	2800      	cmp	r0, #0
 8010434:	f43f af60 	beq.w	80102f8 <rcl_wait_set_resize+0x178>
 8010438:	4639      	mov	r1, r7
 801043a:	47c0      	blx	r8
 801043c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801043e:	2300      	movs	r3, #0
 8010440:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8010444:	e758      	b.n	80102f8 <rcl_wait_set_resize+0x178>
 8010446:	009c      	lsls	r4, r3, #2
 8010448:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801044a:	463a      	mov	r2, r7
 801044c:	4621      	mov	r1, r4
 801044e:	47c8      	blx	r9
 8010450:	62a8      	str	r0, [r5, #40]	; 0x28
 8010452:	2800      	cmp	r0, #0
 8010454:	d085      	beq.n	8010362 <rcl_wait_set_resize+0x1e2>
 8010456:	4622      	mov	r2, r4
 8010458:	4631      	mov	r1, r6
 801045a:	f004 fde5 	bl	8015028 <memset>
 801045e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010464:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010466:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801046a:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801046e:	463a      	mov	r2, r7
 8010470:	4621      	mov	r1, r4
 8010472:	47c8      	blx	r9
 8010474:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010476:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801047a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801047c:	b36b      	cbz	r3, 80104da <rcl_wait_set_resize+0x35a>
 801047e:	4622      	mov	r2, r4
 8010480:	4631      	mov	r1, r6
 8010482:	4618      	mov	r0, r3
 8010484:	f004 fdd0 	bl	8015028 <memset>
 8010488:	4630      	mov	r0, r6
 801048a:	b003      	add	sp, #12
 801048c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010490:	200b      	movs	r0, #11
 8010492:	4770      	bx	lr
 8010494:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010498:	e764      	b.n	8010364 <rcl_wait_set_resize+0x1e4>
 801049a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801049c:	68a8      	ldr	r0, [r5, #8]
 801049e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80104a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104a2:	4798      	blx	r3
 80104a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80104a6:	6928      	ldr	r0, [r5, #16]
 80104a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104aa:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80104ac:	f8c5 900c 	str.w	r9, [r5, #12]
 80104b0:	f8c5 9008 	str.w	r9, [r5, #8]
 80104b4:	4790      	blx	r2
 80104b6:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80104ba:	200a      	movs	r0, #10
 80104bc:	e752      	b.n	8010364 <rcl_wait_set_resize+0x1e4>
 80104be:	69a8      	ldr	r0, [r5, #24]
 80104c0:	4649      	mov	r1, r9
 80104c2:	47d0      	blx	sl
 80104c4:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80104c8:	200a      	movs	r0, #10
 80104ca:	e74b      	b.n	8010364 <rcl_wait_set_resize+0x1e4>
 80104cc:	6a28      	ldr	r0, [r5, #32]
 80104ce:	4639      	mov	r1, r7
 80104d0:	47c0      	blx	r8
 80104d2:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80104d6:	200a      	movs	r0, #10
 80104d8:	e744      	b.n	8010364 <rcl_wait_set_resize+0x1e4>
 80104da:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80104dc:	9301      	str	r3, [sp, #4]
 80104de:	4639      	mov	r1, r7
 80104e0:	47c0      	blx	r8
 80104e2:	9b01      	ldr	r3, [sp, #4]
 80104e4:	200a      	movs	r0, #10
 80104e6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80104ea:	e73b      	b.n	8010364 <rcl_wait_set_resize+0x1e4>

080104ec <rcl_wait_set_init>:
 80104ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104f0:	b084      	sub	sp, #16
 80104f2:	4604      	mov	r4, r0
 80104f4:	a810      	add	r0, sp, #64	; 0x40
 80104f6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80104fa:	460f      	mov	r7, r1
 80104fc:	4690      	mov	r8, r2
 80104fe:	4699      	mov	r9, r3
 8010500:	f7fa fdfe 	bl	800b100 <rcutils_allocator_is_valid>
 8010504:	2800      	cmp	r0, #0
 8010506:	d06b      	beq.n	80105e0 <rcl_wait_set_init+0xf4>
 8010508:	2c00      	cmp	r4, #0
 801050a:	d069      	beq.n	80105e0 <rcl_wait_set_init+0xf4>
 801050c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801050e:	b125      	cbz	r5, 801051a <rcl_wait_set_init+0x2e>
 8010510:	2564      	movs	r5, #100	; 0x64
 8010512:	4628      	mov	r0, r5
 8010514:	b004      	add	sp, #16
 8010516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801051a:	f1ba 0f00 	cmp.w	sl, #0
 801051e:	d05f      	beq.n	80105e0 <rcl_wait_set_init+0xf4>
 8010520:	4650      	mov	r0, sl
 8010522:	f7fe fd75 	bl	800f010 <rcl_context_is_valid>
 8010526:	2800      	cmp	r0, #0
 8010528:	d067      	beq.n	80105fa <rcl_wait_set_init+0x10e>
 801052a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801052c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801052e:	205c      	movs	r0, #92	; 0x5c
 8010530:	4798      	blx	r3
 8010532:	6320      	str	r0, [r4, #48]	; 0x30
 8010534:	2800      	cmp	r0, #0
 8010536:	d062      	beq.n	80105fe <rcl_wait_set_init+0x112>
 8010538:	4629      	mov	r1, r5
 801053a:	225c      	movs	r2, #92	; 0x5c
 801053c:	f004 fd74 	bl	8015028 <memset>
 8010540:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8010544:	eb03 0e02 	add.w	lr, r3, r2
 8010548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801054a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801054c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8010550:	449e      	add	lr, r3
 8010552:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010556:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801055a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801055e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8010562:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8010566:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801056a:	f106 0548 	add.w	r5, r6, #72	; 0x48
 801056e:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8010572:	f8da a000 	ldr.w	sl, [sl]
 8010576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010578:	44c6      	add	lr, r8
 801057a:	f8dc 3000 	ldr.w	r3, [ip]
 801057e:	602b      	str	r3, [r5, #0]
 8010580:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8010584:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 8010588:	f002 f956 	bl	8012838 <rmw_create_wait_set>
 801058c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801058e:	63f0      	str	r0, [r6, #60]	; 0x3c
 8010590:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010592:	b350      	cbz	r0, 80105ea <rcl_wait_set_init+0xfe>
 8010594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010596:	9302      	str	r3, [sp, #8]
 8010598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801059a:	9301      	str	r3, [sp, #4]
 801059c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	4642      	mov	r2, r8
 80105a2:	464b      	mov	r3, r9
 80105a4:	4639      	mov	r1, r7
 80105a6:	4620      	mov	r0, r4
 80105a8:	f7ff fdea 	bl	8010180 <rcl_wait_set_resize>
 80105ac:	4605      	mov	r5, r0
 80105ae:	2800      	cmp	r0, #0
 80105b0:	d0af      	beq.n	8010512 <rcl_wait_set_init+0x26>
 80105b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80105b4:	bb2b      	cbnz	r3, 8010602 <rcl_wait_set_init+0x116>
 80105b6:	2600      	movs	r6, #0
 80105b8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80105bc:	9600      	str	r6, [sp, #0]
 80105be:	4633      	mov	r3, r6
 80105c0:	4632      	mov	r2, r6
 80105c2:	4631      	mov	r1, r6
 80105c4:	4620      	mov	r0, r4
 80105c6:	f7ff fddb 	bl	8010180 <rcl_wait_set_resize>
 80105ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d0a0      	beq.n	8010512 <rcl_wait_set_init+0x26>
 80105d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80105d2:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80105d4:	4798      	blx	r3
 80105d6:	4628      	mov	r0, r5
 80105d8:	6326      	str	r6, [r4, #48]	; 0x30
 80105da:	b004      	add	sp, #16
 80105dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e0:	250b      	movs	r5, #11
 80105e2:	4628      	mov	r0, r5
 80105e4:	b004      	add	sp, #16
 80105e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105ea:	2501      	movs	r5, #1
 80105ec:	f002 f92e 	bl	801284c <rmw_destroy_wait_set>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	bf18      	it	ne
 80105f4:	f44f 7561 	movne.w	r5, #900	; 0x384
 80105f8:	e7dd      	b.n	80105b6 <rcl_wait_set_init+0xca>
 80105fa:	2565      	movs	r5, #101	; 0x65
 80105fc:	e789      	b.n	8010512 <rcl_wait_set_init+0x26>
 80105fe:	250a      	movs	r5, #10
 8010600:	e787      	b.n	8010512 <rcl_wait_set_init+0x26>
 8010602:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010604:	e7f2      	b.n	80105ec <rcl_wait_set_init+0x100>
 8010606:	bf00      	nop

08010608 <rcl_wait_set_add_guard_condition>:
 8010608:	b318      	cbz	r0, 8010652 <rcl_wait_set_add_guard_condition+0x4a>
 801060a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801060c:	b570      	push	{r4, r5, r6, lr}
 801060e:	4604      	mov	r4, r0
 8010610:	b30b      	cbz	r3, 8010656 <rcl_wait_set_add_guard_condition+0x4e>
 8010612:	b319      	cbz	r1, 801065c <rcl_wait_set_add_guard_condition+0x54>
 8010614:	68dd      	ldr	r5, [r3, #12]
 8010616:	68c0      	ldr	r0, [r0, #12]
 8010618:	4285      	cmp	r5, r0
 801061a:	d217      	bcs.n	801064c <rcl_wait_set_add_guard_condition+0x44>
 801061c:	68a0      	ldr	r0, [r4, #8]
 801061e:	1c6e      	adds	r6, r5, #1
 8010620:	60de      	str	r6, [r3, #12]
 8010622:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010626:	b102      	cbz	r2, 801062a <rcl_wait_set_add_guard_condition+0x22>
 8010628:	6015      	str	r5, [r2, #0]
 801062a:	4608      	mov	r0, r1
 801062c:	f7fe fe02 	bl	800f234 <rcl_guard_condition_get_rmw_handle>
 8010630:	b150      	cbz	r0, 8010648 <rcl_wait_set_add_guard_condition+0x40>
 8010632:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010634:	6842      	ldr	r2, [r0, #4]
 8010636:	695b      	ldr	r3, [r3, #20]
 8010638:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801063c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801063e:	6913      	ldr	r3, [r2, #16]
 8010640:	3301      	adds	r3, #1
 8010642:	2000      	movs	r0, #0
 8010644:	6113      	str	r3, [r2, #16]
 8010646:	bd70      	pop	{r4, r5, r6, pc}
 8010648:	2001      	movs	r0, #1
 801064a:	bd70      	pop	{r4, r5, r6, pc}
 801064c:	f240 3086 	movw	r0, #902	; 0x386
 8010650:	bd70      	pop	{r4, r5, r6, pc}
 8010652:	200b      	movs	r0, #11
 8010654:	4770      	bx	lr
 8010656:	f44f 7061 	mov.w	r0, #900	; 0x384
 801065a:	bd70      	pop	{r4, r5, r6, pc}
 801065c:	200b      	movs	r0, #11
 801065e:	bd70      	pop	{r4, r5, r6, pc}

08010660 <rcl_wait_set_add_timer>:
 8010660:	b328      	cbz	r0, 80106ae <rcl_wait_set_add_timer+0x4e>
 8010662:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010664:	b570      	push	{r4, r5, r6, lr}
 8010666:	4604      	mov	r4, r0
 8010668:	b31b      	cbz	r3, 80106b2 <rcl_wait_set_add_timer+0x52>
 801066a:	b329      	cbz	r1, 80106b8 <rcl_wait_set_add_timer+0x58>
 801066c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801066e:	6965      	ldr	r5, [r4, #20]
 8010670:	42a8      	cmp	r0, r5
 8010672:	d219      	bcs.n	80106a8 <rcl_wait_set_add_timer+0x48>
 8010674:	6925      	ldr	r5, [r4, #16]
 8010676:	1c46      	adds	r6, r0, #1
 8010678:	641e      	str	r6, [r3, #64]	; 0x40
 801067a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801067e:	b102      	cbz	r2, 8010682 <rcl_wait_set_add_timer+0x22>
 8010680:	6010      	str	r0, [r2, #0]
 8010682:	4608      	mov	r0, r1
 8010684:	f7ff fba6 	bl	800fdd4 <rcl_timer_get_guard_condition>
 8010688:	b168      	cbz	r0, 80106a6 <rcl_wait_set_add_timer+0x46>
 801068a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801068c:	68e3      	ldr	r3, [r4, #12]
 801068e:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8010690:	3b01      	subs	r3, #1
 8010692:	441d      	add	r5, r3
 8010694:	f7fe fdce 	bl	800f234 <rcl_guard_condition_get_rmw_handle>
 8010698:	b180      	cbz	r0, 80106bc <rcl_wait_set_add_timer+0x5c>
 801069a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801069c:	6842      	ldr	r2, [r0, #4]
 801069e:	695b      	ldr	r3, [r3, #20]
 80106a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106a4:	2000      	movs	r0, #0
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
 80106a8:	f240 3086 	movw	r0, #902	; 0x386
 80106ac:	bd70      	pop	{r4, r5, r6, pc}
 80106ae:	200b      	movs	r0, #11
 80106b0:	4770      	bx	lr
 80106b2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80106b6:	bd70      	pop	{r4, r5, r6, pc}
 80106b8:	200b      	movs	r0, #11
 80106ba:	bd70      	pop	{r4, r5, r6, pc}
 80106bc:	2001      	movs	r0, #1
 80106be:	bd70      	pop	{r4, r5, r6, pc}

080106c0 <rcl_wait_set_add_client>:
 80106c0:	b318      	cbz	r0, 801070a <rcl_wait_set_add_client+0x4a>
 80106c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80106c4:	b570      	push	{r4, r5, r6, lr}
 80106c6:	4604      	mov	r4, r0
 80106c8:	b30b      	cbz	r3, 801070e <rcl_wait_set_add_client+0x4e>
 80106ca:	b319      	cbz	r1, 8010714 <rcl_wait_set_add_client+0x54>
 80106cc:	699d      	ldr	r5, [r3, #24]
 80106ce:	69c0      	ldr	r0, [r0, #28]
 80106d0:	4285      	cmp	r5, r0
 80106d2:	d217      	bcs.n	8010704 <rcl_wait_set_add_client+0x44>
 80106d4:	69a0      	ldr	r0, [r4, #24]
 80106d6:	1c6e      	adds	r6, r5, #1
 80106d8:	619e      	str	r6, [r3, #24]
 80106da:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80106de:	b102      	cbz	r2, 80106e2 <rcl_wait_set_add_client+0x22>
 80106e0:	6015      	str	r5, [r2, #0]
 80106e2:	4608      	mov	r0, r1
 80106e4:	f7fe fbe8 	bl	800eeb8 <rcl_client_get_rmw_handle>
 80106e8:	b150      	cbz	r0, 8010700 <rcl_wait_set_add_client+0x40>
 80106ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80106ec:	6842      	ldr	r2, [r0, #4]
 80106ee:	6a1b      	ldr	r3, [r3, #32]
 80106f0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80106f6:	69d3      	ldr	r3, [r2, #28]
 80106f8:	3301      	adds	r3, #1
 80106fa:	2000      	movs	r0, #0
 80106fc:	61d3      	str	r3, [r2, #28]
 80106fe:	bd70      	pop	{r4, r5, r6, pc}
 8010700:	2001      	movs	r0, #1
 8010702:	bd70      	pop	{r4, r5, r6, pc}
 8010704:	f240 3086 	movw	r0, #902	; 0x386
 8010708:	bd70      	pop	{r4, r5, r6, pc}
 801070a:	200b      	movs	r0, #11
 801070c:	4770      	bx	lr
 801070e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010712:	bd70      	pop	{r4, r5, r6, pc}
 8010714:	200b      	movs	r0, #11
 8010716:	bd70      	pop	{r4, r5, r6, pc}

08010718 <rcl_wait_set_add_service>:
 8010718:	b318      	cbz	r0, 8010762 <rcl_wait_set_add_service+0x4a>
 801071a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801071c:	b570      	push	{r4, r5, r6, lr}
 801071e:	4604      	mov	r4, r0
 8010720:	b30b      	cbz	r3, 8010766 <rcl_wait_set_add_service+0x4e>
 8010722:	b319      	cbz	r1, 801076c <rcl_wait_set_add_service+0x54>
 8010724:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010726:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010728:	4285      	cmp	r5, r0
 801072a:	d217      	bcs.n	801075c <rcl_wait_set_add_service+0x44>
 801072c:	6a20      	ldr	r0, [r4, #32]
 801072e:	1c6e      	adds	r6, r5, #1
 8010730:	625e      	str	r6, [r3, #36]	; 0x24
 8010732:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010736:	b102      	cbz	r2, 801073a <rcl_wait_set_add_service+0x22>
 8010738:	6015      	str	r5, [r2, #0]
 801073a:	4608      	mov	r0, r1
 801073c:	f7ff f948 	bl	800f9d0 <rcl_service_get_rmw_handle>
 8010740:	b150      	cbz	r0, 8010758 <rcl_wait_set_add_service+0x40>
 8010742:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010744:	6842      	ldr	r2, [r0, #4]
 8010746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010748:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801074c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801074e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010750:	3301      	adds	r3, #1
 8010752:	2000      	movs	r0, #0
 8010754:	6293      	str	r3, [r2, #40]	; 0x28
 8010756:	bd70      	pop	{r4, r5, r6, pc}
 8010758:	2001      	movs	r0, #1
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f240 3086 	movw	r0, #902	; 0x386
 8010760:	bd70      	pop	{r4, r5, r6, pc}
 8010762:	200b      	movs	r0, #11
 8010764:	4770      	bx	lr
 8010766:	f44f 7061 	mov.w	r0, #900	; 0x384
 801076a:	bd70      	pop	{r4, r5, r6, pc}
 801076c:	200b      	movs	r0, #11
 801076e:	bd70      	pop	{r4, r5, r6, pc}

08010770 <rcl_wait>:
 8010770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010774:	ed2d 8b02 	vpush	{d8}
 8010778:	b08d      	sub	sp, #52	; 0x34
 801077a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801077e:	2800      	cmp	r0, #0
 8010780:	f000 8143 	beq.w	8010a0a <rcl_wait+0x29a>
 8010784:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010786:	4605      	mov	r5, r0
 8010788:	2e00      	cmp	r6, #0
 801078a:	f000 8112 	beq.w	80109b2 <rcl_wait+0x242>
 801078e:	6843      	ldr	r3, [r0, #4]
 8010790:	b983      	cbnz	r3, 80107b4 <rcl_wait+0x44>
 8010792:	68eb      	ldr	r3, [r5, #12]
 8010794:	b973      	cbnz	r3, 80107b4 <rcl_wait+0x44>
 8010796:	696b      	ldr	r3, [r5, #20]
 8010798:	b963      	cbnz	r3, 80107b4 <rcl_wait+0x44>
 801079a:	69eb      	ldr	r3, [r5, #28]
 801079c:	b953      	cbnz	r3, 80107b4 <rcl_wait+0x44>
 801079e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80107a0:	b943      	cbnz	r3, 80107b4 <rcl_wait+0x44>
 80107a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80107a4:	b933      	cbnz	r3, 80107b4 <rcl_wait+0x44>
 80107a6:	f240 3085 	movw	r0, #901	; 0x385
 80107aa:	b00d      	add	sp, #52	; 0x34
 80107ac:	ecbd 8b02 	vpop	{d8}
 80107b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b4:	9b04      	ldr	r3, [sp, #16]
 80107b6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	9b05      	ldr	r3, [sp, #20]
 80107bc:	f173 0300 	sbcs.w	r3, r3, #0
 80107c0:	f2c0 80f0 	blt.w	80109a4 <rcl_wait+0x234>
 80107c4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80107c8:	4643      	mov	r3, r8
 80107ca:	2a00      	cmp	r2, #0
 80107cc:	f000 8133 	beq.w	8010a36 <rcl_wait+0x2c6>
 80107d0:	2400      	movs	r4, #0
 80107d2:	4613      	mov	r3, r2
 80107d4:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8010a48 <rcl_wait+0x2d8>
 80107d8:	46a2      	mov	sl, r4
 80107da:	46a3      	mov	fp, r4
 80107dc:	f240 3921 	movw	r9, #801	; 0x321
 80107e0:	4632      	mov	r2, r6
 80107e2:	e014      	b.n	801080e <rcl_wait+0x9e>
 80107e4:	2800      	cmp	r0, #0
 80107e6:	d1e0      	bne.n	80107aa <rcl_wait+0x3a>
 80107e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80107ec:	4542      	cmp	r2, r8
 80107ee:	eb73 0107 	sbcs.w	r1, r3, r7
 80107f2:	da03      	bge.n	80107fc <rcl_wait+0x8c>
 80107f4:	4690      	mov	r8, r2
 80107f6:	461f      	mov	r7, r3
 80107f8:	f04f 0b01 	mov.w	fp, #1
 80107fc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80107fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010800:	3401      	adds	r4, #1
 8010802:	f14a 0a00 	adc.w	sl, sl, #0
 8010806:	429c      	cmp	r4, r3
 8010808:	f17a 0100 	sbcs.w	r1, sl, #0
 801080c:	d228      	bcs.n	8010860 <rcl_wait+0xf0>
 801080e:	6928      	ldr	r0, [r5, #16]
 8010810:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010814:	a908      	add	r1, sp, #32
 8010816:	00a6      	lsls	r6, r4, #2
 8010818:	2800      	cmp	r0, #0
 801081a:	d0f1      	beq.n	8010800 <rcl_wait+0x90>
 801081c:	68eb      	ldr	r3, [r5, #12]
 801081e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010822:	4423      	add	r3, r4
 8010824:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010828:	f1be 0f00 	cmp.w	lr, #0
 801082c:	d006      	beq.n	801083c <rcl_wait+0xcc>
 801082e:	6913      	ldr	r3, [r2, #16]
 8010830:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010834:	3301      	adds	r3, #1
 8010836:	6113      	str	r3, [r2, #16]
 8010838:	692b      	ldr	r3, [r5, #16]
 801083a:	5998      	ldr	r0, [r3, r6]
 801083c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010840:	f7ff fa96 	bl	800fd70 <rcl_timer_get_time_until_next_call>
 8010844:	4548      	cmp	r0, r9
 8010846:	d1cd      	bne.n	80107e4 <rcl_wait+0x74>
 8010848:	692b      	ldr	r3, [r5, #16]
 801084a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801084c:	2100      	movs	r1, #0
 801084e:	5199      	str	r1, [r3, r6]
 8010850:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010852:	3401      	adds	r4, #1
 8010854:	f14a 0a00 	adc.w	sl, sl, #0
 8010858:	429c      	cmp	r4, r3
 801085a:	f17a 0100 	sbcs.w	r1, sl, #0
 801085e:	d3d6      	bcc.n	801080e <rcl_wait+0x9e>
 8010860:	4616      	mov	r6, r2
 8010862:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010866:	4313      	orrs	r3, r2
 8010868:	46d9      	mov	r9, fp
 801086a:	f040 80a9 	bne.w	80109c0 <rcl_wait+0x250>
 801086e:	2300      	movs	r3, #0
 8010870:	2200      	movs	r2, #0
 8010872:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010876:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801087a:	ab08      	add	r3, sp, #32
 801087c:	9302      	str	r3, [sp, #8]
 801087e:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8010880:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8010884:	e9cd 3200 	strd	r3, r2, [sp]
 8010888:	f106 0110 	add.w	r1, r6, #16
 801088c:	f106 031c 	add.w	r3, r6, #28
 8010890:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8010894:	1d30      	adds	r0, r6, #4
 8010896:	f001 fe57 	bl	8012548 <rmw_wait>
 801089a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801089c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801089e:	4680      	mov	r8, r0
 80108a0:	b1ca      	cbz	r2, 80108d6 <rcl_wait+0x166>
 80108a2:	2400      	movs	r4, #0
 80108a4:	4627      	mov	r7, r4
 80108a6:	692a      	ldr	r2, [r5, #16]
 80108a8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80108ac:	f10d 011f 	add.w	r1, sp, #31
 80108b0:	00a6      	lsls	r6, r4, #2
 80108b2:	b160      	cbz	r0, 80108ce <rcl_wait+0x15e>
 80108b4:	f88d 701f 	strb.w	r7, [sp, #31]
 80108b8:	f7ff fa20 	bl	800fcfc <rcl_timer_is_ready>
 80108bc:	2800      	cmp	r0, #0
 80108be:	f47f af74 	bne.w	80107aa <rcl_wait+0x3a>
 80108c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80108c6:	b90b      	cbnz	r3, 80108cc <rcl_wait+0x15c>
 80108c8:	692a      	ldr	r2, [r5, #16]
 80108ca:	5193      	str	r3, [r2, r6]
 80108cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80108ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80108d0:	3401      	adds	r4, #1
 80108d2:	42a2      	cmp	r2, r4
 80108d4:	d8e7      	bhi.n	80108a6 <rcl_wait+0x136>
 80108d6:	f038 0002 	bics.w	r0, r8, #2
 80108da:	f040 8090 	bne.w	80109fe <rcl_wait+0x28e>
 80108de:	686e      	ldr	r6, [r5, #4]
 80108e0:	4602      	mov	r2, r0
 80108e2:	b91e      	cbnz	r6, 80108ec <rcl_wait+0x17c>
 80108e4:	e00d      	b.n	8010902 <rcl_wait+0x192>
 80108e6:	3201      	adds	r2, #1
 80108e8:	42b2      	cmp	r2, r6
 80108ea:	d00a      	beq.n	8010902 <rcl_wait+0x192>
 80108ec:	6899      	ldr	r1, [r3, #8]
 80108ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80108f2:	2900      	cmp	r1, #0
 80108f4:	d1f7      	bne.n	80108e6 <rcl_wait+0x176>
 80108f6:	682c      	ldr	r4, [r5, #0]
 80108f8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80108fc:	3201      	adds	r2, #1
 80108fe:	42b2      	cmp	r2, r6
 8010900:	d1f4      	bne.n	80108ec <rcl_wait+0x17c>
 8010902:	68ee      	ldr	r6, [r5, #12]
 8010904:	2200      	movs	r2, #0
 8010906:	b91e      	cbnz	r6, 8010910 <rcl_wait+0x1a0>
 8010908:	e00d      	b.n	8010926 <rcl_wait+0x1b6>
 801090a:	3201      	adds	r2, #1
 801090c:	42b2      	cmp	r2, r6
 801090e:	d00a      	beq.n	8010926 <rcl_wait+0x1b6>
 8010910:	6959      	ldr	r1, [r3, #20]
 8010912:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010916:	2900      	cmp	r1, #0
 8010918:	d1f7      	bne.n	801090a <rcl_wait+0x19a>
 801091a:	68ac      	ldr	r4, [r5, #8]
 801091c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010920:	3201      	adds	r2, #1
 8010922:	42b2      	cmp	r2, r6
 8010924:	d1f4      	bne.n	8010910 <rcl_wait+0x1a0>
 8010926:	69ee      	ldr	r6, [r5, #28]
 8010928:	2200      	movs	r2, #0
 801092a:	b91e      	cbnz	r6, 8010934 <rcl_wait+0x1c4>
 801092c:	e00d      	b.n	801094a <rcl_wait+0x1da>
 801092e:	3201      	adds	r2, #1
 8010930:	42b2      	cmp	r2, r6
 8010932:	d00a      	beq.n	801094a <rcl_wait+0x1da>
 8010934:	6a19      	ldr	r1, [r3, #32]
 8010936:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801093a:	2900      	cmp	r1, #0
 801093c:	d1f7      	bne.n	801092e <rcl_wait+0x1be>
 801093e:	69ac      	ldr	r4, [r5, #24]
 8010940:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010944:	3201      	adds	r2, #1
 8010946:	42b2      	cmp	r2, r6
 8010948:	d1f4      	bne.n	8010934 <rcl_wait+0x1c4>
 801094a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 801094c:	2200      	movs	r2, #0
 801094e:	b91e      	cbnz	r6, 8010958 <rcl_wait+0x1e8>
 8010950:	e00d      	b.n	801096e <rcl_wait+0x1fe>
 8010952:	3201      	adds	r2, #1
 8010954:	4296      	cmp	r6, r2
 8010956:	d00a      	beq.n	801096e <rcl_wait+0x1fe>
 8010958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801095a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801095e:	2900      	cmp	r1, #0
 8010960:	d1f7      	bne.n	8010952 <rcl_wait+0x1e2>
 8010962:	6a2c      	ldr	r4, [r5, #32]
 8010964:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010968:	3201      	adds	r2, #1
 801096a:	4296      	cmp	r6, r2
 801096c:	d1f4      	bne.n	8010958 <rcl_wait+0x1e8>
 801096e:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8010970:	2200      	movs	r2, #0
 8010972:	b91e      	cbnz	r6, 801097c <rcl_wait+0x20c>
 8010974:	e00d      	b.n	8010992 <rcl_wait+0x222>
 8010976:	3201      	adds	r2, #1
 8010978:	42b2      	cmp	r2, r6
 801097a:	d00a      	beq.n	8010992 <rcl_wait+0x222>
 801097c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801097e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010982:	2900      	cmp	r1, #0
 8010984:	d1f7      	bne.n	8010976 <rcl_wait+0x206>
 8010986:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8010988:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801098c:	3201      	adds	r2, #1
 801098e:	42b2      	cmp	r2, r6
 8010990:	d1f4      	bne.n	801097c <rcl_wait+0x20c>
 8010992:	f1b8 0f02 	cmp.w	r8, #2
 8010996:	f47f af08 	bne.w	80107aa <rcl_wait+0x3a>
 801099a:	464b      	mov	r3, r9
 801099c:	2b00      	cmp	r3, #0
 801099e:	bf08      	it	eq
 80109a0:	2002      	moveq	r0, #2
 80109a2:	e702      	b.n	80107aa <rcl_wait+0x3a>
 80109a4:	2a00      	cmp	r2, #0
 80109a6:	d03a      	beq.n	8010a1e <rcl_wait+0x2ae>
 80109a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80109ac:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80109b0:	e70e      	b.n	80107d0 <rcl_wait+0x60>
 80109b2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80109b6:	b00d      	add	sp, #52	; 0x34
 80109b8:	ecbd 8b02 	vpop	{d8}
 80109bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c0:	9b04      	ldr	r3, [sp, #16]
 80109c2:	2b01      	cmp	r3, #1
 80109c4:	9b05      	ldr	r3, [sp, #20]
 80109c6:	f173 0300 	sbcs.w	r3, r3, #0
 80109ca:	db24      	blt.n	8010a16 <rcl_wait+0x2a6>
 80109cc:	2f00      	cmp	r7, #0
 80109ce:	bfbc      	itt	lt
 80109d0:	f04f 0800 	movlt.w	r8, #0
 80109d4:	4647      	movlt	r7, r8
 80109d6:	a31e      	add	r3, pc, #120	; (adr r3, 8010a50 <rcl_wait+0x2e0>)
 80109d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109dc:	4640      	mov	r0, r8
 80109de:	4639      	mov	r1, r7
 80109e0:	f7ef fff4 	bl	80009cc <__aeabi_ldivmod>
 80109e4:	a31a      	add	r3, pc, #104	; (adr r3, 8010a50 <rcl_wait+0x2e0>)
 80109e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80109ee:	4640      	mov	r0, r8
 80109f0:	4639      	mov	r1, r7
 80109f2:	f7ef ffeb 	bl	80009cc <__aeabi_ldivmod>
 80109f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80109fa:	ab08      	add	r3, sp, #32
 80109fc:	e73e      	b.n	801087c <rcl_wait+0x10c>
 80109fe:	2001      	movs	r0, #1
 8010a00:	b00d      	add	sp, #52	; 0x34
 8010a02:	ecbd 8b02 	vpop	{d8}
 8010a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a0a:	200b      	movs	r0, #11
 8010a0c:	b00d      	add	sp, #52	; 0x34
 8010a0e:	ecbd 8b02 	vpop	{d8}
 8010a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a16:	465b      	mov	r3, fp
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d1d7      	bne.n	80109cc <rcl_wait+0x25c>
 8010a1c:	e72e      	b.n	801087c <rcl_wait+0x10c>
 8010a1e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010a22:	430b      	orrs	r3, r1
 8010a24:	bf08      	it	eq
 8010a26:	4691      	moveq	r9, r2
 8010a28:	f43f af21 	beq.w	801086e <rcl_wait+0xfe>
 8010a2c:	9b04      	ldr	r3, [sp, #16]
 8010a2e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010a32:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010a36:	2b01      	cmp	r3, #1
 8010a38:	9b05      	ldr	r3, [sp, #20]
 8010a3a:	f173 0300 	sbcs.w	r3, r3, #0
 8010a3e:	f04f 0300 	mov.w	r3, #0
 8010a42:	4699      	mov	r9, r3
 8010a44:	dac2      	bge.n	80109cc <rcl_wait+0x25c>
 8010a46:	e719      	b.n	801087c <rcl_wait+0x10c>
 8010a48:	ffffffff 	.word	0xffffffff
 8010a4c:	7fffffff 	.word	0x7fffffff
 8010a50:	3b9aca00 	.word	0x3b9aca00
 8010a54:	00000000 	.word	0x00000000

08010a58 <rcl_action_take_goal_response>:
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d039      	beq.n	8010ad0 <rcl_action_take_goal_response+0x78>
 8010a5c:	b570      	push	{r4, r5, r6, lr}
 8010a5e:	4604      	mov	r4, r0
 8010a60:	6800      	ldr	r0, [r0, #0]
 8010a62:	b380      	cbz	r0, 8010ac6 <rcl_action_take_goal_response+0x6e>
 8010a64:	460d      	mov	r5, r1
 8010a66:	4616      	mov	r6, r2
 8010a68:	f7fe faaa 	bl	800efc0 <rcl_client_is_valid>
 8010a6c:	b330      	cbz	r0, 8010abc <rcl_action_take_goal_response+0x64>
 8010a6e:	6820      	ldr	r0, [r4, #0]
 8010a70:	3004      	adds	r0, #4
 8010a72:	f7fe faa5 	bl	800efc0 <rcl_client_is_valid>
 8010a76:	b308      	cbz	r0, 8010abc <rcl_action_take_goal_response+0x64>
 8010a78:	6820      	ldr	r0, [r4, #0]
 8010a7a:	3008      	adds	r0, #8
 8010a7c:	f7fe faa0 	bl	800efc0 <rcl_client_is_valid>
 8010a80:	b1e0      	cbz	r0, 8010abc <rcl_action_take_goal_response+0x64>
 8010a82:	6820      	ldr	r0, [r4, #0]
 8010a84:	300c      	adds	r0, #12
 8010a86:	f7f9 fc11 	bl	800a2ac <rcl_subscription_is_valid>
 8010a8a:	b1b8      	cbz	r0, 8010abc <rcl_action_take_goal_response+0x64>
 8010a8c:	6820      	ldr	r0, [r4, #0]
 8010a8e:	3010      	adds	r0, #16
 8010a90:	f7f9 fc0c 	bl	800a2ac <rcl_subscription_is_valid>
 8010a94:	b190      	cbz	r0, 8010abc <rcl_action_take_goal_response+0x64>
 8010a96:	b1cd      	cbz	r5, 8010acc <rcl_action_take_goal_response+0x74>
 8010a98:	b1c6      	cbz	r6, 8010acc <rcl_action_take_goal_response+0x74>
 8010a9a:	6820      	ldr	r0, [r4, #0]
 8010a9c:	4632      	mov	r2, r6
 8010a9e:	4629      	mov	r1, r5
 8010aa0:	f7fe fa46 	bl	800ef30 <rcl_take_response>
 8010aa4:	b148      	cbz	r0, 8010aba <rcl_action_take_goal_response+0x62>
 8010aa6:	280a      	cmp	r0, #10
 8010aa8:	d007      	beq.n	8010aba <rcl_action_take_goal_response+0x62>
 8010aaa:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010aae:	f640 0337 	movw	r3, #2103	; 0x837
 8010ab2:	4290      	cmp	r0, r2
 8010ab4:	bf0c      	ite	eq
 8010ab6:	4618      	moveq	r0, r3
 8010ab8:	2001      	movne	r0, #1
 8010aba:	bd70      	pop	{r4, r5, r6, pc}
 8010abc:	f7fa fb5c 	bl	800b178 <rcutils_reset_error>
 8010ac0:	f640 0036 	movw	r0, #2102	; 0x836
 8010ac4:	bd70      	pop	{r4, r5, r6, pc}
 8010ac6:	f640 0036 	movw	r0, #2102	; 0x836
 8010aca:	bd70      	pop	{r4, r5, r6, pc}
 8010acc:	200b      	movs	r0, #11
 8010ace:	bd70      	pop	{r4, r5, r6, pc}
 8010ad0:	f640 0036 	movw	r0, #2102	; 0x836
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <rcl_action_send_result_request>:
 8010ad8:	b390      	cbz	r0, 8010b40 <rcl_action_send_result_request+0x68>
 8010ada:	b570      	push	{r4, r5, r6, lr}
 8010adc:	4604      	mov	r4, r0
 8010ade:	6800      	ldr	r0, [r0, #0]
 8010ae0:	b348      	cbz	r0, 8010b36 <rcl_action_send_result_request+0x5e>
 8010ae2:	460d      	mov	r5, r1
 8010ae4:	4616      	mov	r6, r2
 8010ae6:	f7fe fa6b 	bl	800efc0 <rcl_client_is_valid>
 8010aea:	b1f8      	cbz	r0, 8010b2c <rcl_action_send_result_request+0x54>
 8010aec:	6820      	ldr	r0, [r4, #0]
 8010aee:	3004      	adds	r0, #4
 8010af0:	f7fe fa66 	bl	800efc0 <rcl_client_is_valid>
 8010af4:	b1d0      	cbz	r0, 8010b2c <rcl_action_send_result_request+0x54>
 8010af6:	6820      	ldr	r0, [r4, #0]
 8010af8:	3008      	adds	r0, #8
 8010afa:	f7fe fa61 	bl	800efc0 <rcl_client_is_valid>
 8010afe:	b1a8      	cbz	r0, 8010b2c <rcl_action_send_result_request+0x54>
 8010b00:	6820      	ldr	r0, [r4, #0]
 8010b02:	300c      	adds	r0, #12
 8010b04:	f7f9 fbd2 	bl	800a2ac <rcl_subscription_is_valid>
 8010b08:	b180      	cbz	r0, 8010b2c <rcl_action_send_result_request+0x54>
 8010b0a:	6820      	ldr	r0, [r4, #0]
 8010b0c:	3010      	adds	r0, #16
 8010b0e:	f7f9 fbcd 	bl	800a2ac <rcl_subscription_is_valid>
 8010b12:	b158      	cbz	r0, 8010b2c <rcl_action_send_result_request+0x54>
 8010b14:	b195      	cbz	r5, 8010b3c <rcl_action_send_result_request+0x64>
 8010b16:	b18e      	cbz	r6, 8010b3c <rcl_action_send_result_request+0x64>
 8010b18:	6820      	ldr	r0, [r4, #0]
 8010b1a:	4632      	mov	r2, r6
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	3008      	adds	r0, #8
 8010b20:	f7fe f9d0 	bl	800eec4 <rcl_send_request>
 8010b24:	3800      	subs	r0, #0
 8010b26:	bf18      	it	ne
 8010b28:	2001      	movne	r0, #1
 8010b2a:	bd70      	pop	{r4, r5, r6, pc}
 8010b2c:	f7fa fb24 	bl	800b178 <rcutils_reset_error>
 8010b30:	f640 0036 	movw	r0, #2102	; 0x836
 8010b34:	bd70      	pop	{r4, r5, r6, pc}
 8010b36:	f640 0036 	movw	r0, #2102	; 0x836
 8010b3a:	bd70      	pop	{r4, r5, r6, pc}
 8010b3c:	200b      	movs	r0, #11
 8010b3e:	bd70      	pop	{r4, r5, r6, pc}
 8010b40:	f640 0036 	movw	r0, #2102	; 0x836
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop

08010b48 <rcl_action_take_result_response>:
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d03a      	beq.n	8010bc2 <rcl_action_take_result_response+0x7a>
 8010b4c:	b570      	push	{r4, r5, r6, lr}
 8010b4e:	4604      	mov	r4, r0
 8010b50:	6800      	ldr	r0, [r0, #0]
 8010b52:	b388      	cbz	r0, 8010bb8 <rcl_action_take_result_response+0x70>
 8010b54:	460d      	mov	r5, r1
 8010b56:	4616      	mov	r6, r2
 8010b58:	f7fe fa32 	bl	800efc0 <rcl_client_is_valid>
 8010b5c:	b338      	cbz	r0, 8010bae <rcl_action_take_result_response+0x66>
 8010b5e:	6820      	ldr	r0, [r4, #0]
 8010b60:	3004      	adds	r0, #4
 8010b62:	f7fe fa2d 	bl	800efc0 <rcl_client_is_valid>
 8010b66:	b310      	cbz	r0, 8010bae <rcl_action_take_result_response+0x66>
 8010b68:	6820      	ldr	r0, [r4, #0]
 8010b6a:	3008      	adds	r0, #8
 8010b6c:	f7fe fa28 	bl	800efc0 <rcl_client_is_valid>
 8010b70:	b1e8      	cbz	r0, 8010bae <rcl_action_take_result_response+0x66>
 8010b72:	6820      	ldr	r0, [r4, #0]
 8010b74:	300c      	adds	r0, #12
 8010b76:	f7f9 fb99 	bl	800a2ac <rcl_subscription_is_valid>
 8010b7a:	b1c0      	cbz	r0, 8010bae <rcl_action_take_result_response+0x66>
 8010b7c:	6820      	ldr	r0, [r4, #0]
 8010b7e:	3010      	adds	r0, #16
 8010b80:	f7f9 fb94 	bl	800a2ac <rcl_subscription_is_valid>
 8010b84:	b198      	cbz	r0, 8010bae <rcl_action_take_result_response+0x66>
 8010b86:	b1d5      	cbz	r5, 8010bbe <rcl_action_take_result_response+0x76>
 8010b88:	b1ce      	cbz	r6, 8010bbe <rcl_action_take_result_response+0x76>
 8010b8a:	6820      	ldr	r0, [r4, #0]
 8010b8c:	4632      	mov	r2, r6
 8010b8e:	4629      	mov	r1, r5
 8010b90:	3008      	adds	r0, #8
 8010b92:	f7fe f9cd 	bl	800ef30 <rcl_take_response>
 8010b96:	b148      	cbz	r0, 8010bac <rcl_action_take_result_response+0x64>
 8010b98:	280a      	cmp	r0, #10
 8010b9a:	d007      	beq.n	8010bac <rcl_action_take_result_response+0x64>
 8010b9c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010ba0:	f640 0337 	movw	r3, #2103	; 0x837
 8010ba4:	4290      	cmp	r0, r2
 8010ba6:	bf0c      	ite	eq
 8010ba8:	4618      	moveq	r0, r3
 8010baa:	2001      	movne	r0, #1
 8010bac:	bd70      	pop	{r4, r5, r6, pc}
 8010bae:	f7fa fae3 	bl	800b178 <rcutils_reset_error>
 8010bb2:	f640 0036 	movw	r0, #2102	; 0x836
 8010bb6:	bd70      	pop	{r4, r5, r6, pc}
 8010bb8:	f640 0036 	movw	r0, #2102	; 0x836
 8010bbc:	bd70      	pop	{r4, r5, r6, pc}
 8010bbe:	200b      	movs	r0, #11
 8010bc0:	bd70      	pop	{r4, r5, r6, pc}
 8010bc2:	f640 0036 	movw	r0, #2102	; 0x836
 8010bc6:	4770      	bx	lr

08010bc8 <rcl_action_take_cancel_response>:
 8010bc8:	2800      	cmp	r0, #0
 8010bca:	d03a      	beq.n	8010c42 <rcl_action_take_cancel_response+0x7a>
 8010bcc:	b570      	push	{r4, r5, r6, lr}
 8010bce:	4604      	mov	r4, r0
 8010bd0:	6800      	ldr	r0, [r0, #0]
 8010bd2:	b388      	cbz	r0, 8010c38 <rcl_action_take_cancel_response+0x70>
 8010bd4:	460d      	mov	r5, r1
 8010bd6:	4616      	mov	r6, r2
 8010bd8:	f7fe f9f2 	bl	800efc0 <rcl_client_is_valid>
 8010bdc:	b338      	cbz	r0, 8010c2e <rcl_action_take_cancel_response+0x66>
 8010bde:	6820      	ldr	r0, [r4, #0]
 8010be0:	3004      	adds	r0, #4
 8010be2:	f7fe f9ed 	bl	800efc0 <rcl_client_is_valid>
 8010be6:	b310      	cbz	r0, 8010c2e <rcl_action_take_cancel_response+0x66>
 8010be8:	6820      	ldr	r0, [r4, #0]
 8010bea:	3008      	adds	r0, #8
 8010bec:	f7fe f9e8 	bl	800efc0 <rcl_client_is_valid>
 8010bf0:	b1e8      	cbz	r0, 8010c2e <rcl_action_take_cancel_response+0x66>
 8010bf2:	6820      	ldr	r0, [r4, #0]
 8010bf4:	300c      	adds	r0, #12
 8010bf6:	f7f9 fb59 	bl	800a2ac <rcl_subscription_is_valid>
 8010bfa:	b1c0      	cbz	r0, 8010c2e <rcl_action_take_cancel_response+0x66>
 8010bfc:	6820      	ldr	r0, [r4, #0]
 8010bfe:	3010      	adds	r0, #16
 8010c00:	f7f9 fb54 	bl	800a2ac <rcl_subscription_is_valid>
 8010c04:	b198      	cbz	r0, 8010c2e <rcl_action_take_cancel_response+0x66>
 8010c06:	b1d5      	cbz	r5, 8010c3e <rcl_action_take_cancel_response+0x76>
 8010c08:	b1ce      	cbz	r6, 8010c3e <rcl_action_take_cancel_response+0x76>
 8010c0a:	6820      	ldr	r0, [r4, #0]
 8010c0c:	4632      	mov	r2, r6
 8010c0e:	4629      	mov	r1, r5
 8010c10:	3004      	adds	r0, #4
 8010c12:	f7fe f98d 	bl	800ef30 <rcl_take_response>
 8010c16:	b148      	cbz	r0, 8010c2c <rcl_action_take_cancel_response+0x64>
 8010c18:	280a      	cmp	r0, #10
 8010c1a:	d007      	beq.n	8010c2c <rcl_action_take_cancel_response+0x64>
 8010c1c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010c20:	f640 0337 	movw	r3, #2103	; 0x837
 8010c24:	4290      	cmp	r0, r2
 8010c26:	bf0c      	ite	eq
 8010c28:	4618      	moveq	r0, r3
 8010c2a:	2001      	movne	r0, #1
 8010c2c:	bd70      	pop	{r4, r5, r6, pc}
 8010c2e:	f7fa faa3 	bl	800b178 <rcutils_reset_error>
 8010c32:	f640 0036 	movw	r0, #2102	; 0x836
 8010c36:	bd70      	pop	{r4, r5, r6, pc}
 8010c38:	f640 0036 	movw	r0, #2102	; 0x836
 8010c3c:	bd70      	pop	{r4, r5, r6, pc}
 8010c3e:	200b      	movs	r0, #11
 8010c40:	bd70      	pop	{r4, r5, r6, pc}
 8010c42:	f640 0036 	movw	r0, #2102	; 0x836
 8010c46:	4770      	bx	lr

08010c48 <rcl_action_take_feedback>:
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	d038      	beq.n	8010cbe <rcl_action_take_feedback+0x76>
 8010c4c:	b530      	push	{r4, r5, lr}
 8010c4e:	4604      	mov	r4, r0
 8010c50:	6800      	ldr	r0, [r0, #0]
 8010c52:	b091      	sub	sp, #68	; 0x44
 8010c54:	b378      	cbz	r0, 8010cb6 <rcl_action_take_feedback+0x6e>
 8010c56:	460d      	mov	r5, r1
 8010c58:	f7fe f9b2 	bl	800efc0 <rcl_client_is_valid>
 8010c5c:	b328      	cbz	r0, 8010caa <rcl_action_take_feedback+0x62>
 8010c5e:	6820      	ldr	r0, [r4, #0]
 8010c60:	3004      	adds	r0, #4
 8010c62:	f7fe f9ad 	bl	800efc0 <rcl_client_is_valid>
 8010c66:	b300      	cbz	r0, 8010caa <rcl_action_take_feedback+0x62>
 8010c68:	6820      	ldr	r0, [r4, #0]
 8010c6a:	3008      	adds	r0, #8
 8010c6c:	f7fe f9a8 	bl	800efc0 <rcl_client_is_valid>
 8010c70:	b1d8      	cbz	r0, 8010caa <rcl_action_take_feedback+0x62>
 8010c72:	6820      	ldr	r0, [r4, #0]
 8010c74:	300c      	adds	r0, #12
 8010c76:	f7f9 fb19 	bl	800a2ac <rcl_subscription_is_valid>
 8010c7a:	b1b0      	cbz	r0, 8010caa <rcl_action_take_feedback+0x62>
 8010c7c:	6820      	ldr	r0, [r4, #0]
 8010c7e:	3010      	adds	r0, #16
 8010c80:	f7f9 fb14 	bl	800a2ac <rcl_subscription_is_valid>
 8010c84:	b188      	cbz	r0, 8010caa <rcl_action_take_feedback+0x62>
 8010c86:	b1ed      	cbz	r5, 8010cc4 <rcl_action_take_feedback+0x7c>
 8010c88:	6820      	ldr	r0, [r4, #0]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	466a      	mov	r2, sp
 8010c8e:	4629      	mov	r1, r5
 8010c90:	300c      	adds	r0, #12
 8010c92:	f7f9 faad 	bl	800a1f0 <rcl_take>
 8010c96:	b160      	cbz	r0, 8010cb2 <rcl_action_take_feedback+0x6a>
 8010c98:	f240 1391 	movw	r3, #401	; 0x191
 8010c9c:	4298      	cmp	r0, r3
 8010c9e:	d014      	beq.n	8010cca <rcl_action_take_feedback+0x82>
 8010ca0:	280a      	cmp	r0, #10
 8010ca2:	bf18      	it	ne
 8010ca4:	2001      	movne	r0, #1
 8010ca6:	b011      	add	sp, #68	; 0x44
 8010ca8:	bd30      	pop	{r4, r5, pc}
 8010caa:	f7fa fa65 	bl	800b178 <rcutils_reset_error>
 8010cae:	f640 0036 	movw	r0, #2102	; 0x836
 8010cb2:	b011      	add	sp, #68	; 0x44
 8010cb4:	bd30      	pop	{r4, r5, pc}
 8010cb6:	f640 0036 	movw	r0, #2102	; 0x836
 8010cba:	b011      	add	sp, #68	; 0x44
 8010cbc:	bd30      	pop	{r4, r5, pc}
 8010cbe:	f640 0036 	movw	r0, #2102	; 0x836
 8010cc2:	4770      	bx	lr
 8010cc4:	200b      	movs	r0, #11
 8010cc6:	b011      	add	sp, #68	; 0x44
 8010cc8:	bd30      	pop	{r4, r5, pc}
 8010cca:	f640 0037 	movw	r0, #2103	; 0x837
 8010cce:	e7f0      	b.n	8010cb2 <rcl_action_take_feedback+0x6a>

08010cd0 <rcl_action_wait_set_add_action_client>:
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d048      	beq.n	8010d66 <rcl_action_wait_set_add_action_client+0x96>
 8010cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	2900      	cmp	r1, #0
 8010cda:	d03c      	beq.n	8010d56 <rcl_action_wait_set_add_action_client+0x86>
 8010cdc:	4605      	mov	r5, r0
 8010cde:	6808      	ldr	r0, [r1, #0]
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d038      	beq.n	8010d56 <rcl_action_wait_set_add_action_client+0x86>
 8010ce4:	4617      	mov	r7, r2
 8010ce6:	461e      	mov	r6, r3
 8010ce8:	f7fe f96a 	bl	800efc0 <rcl_client_is_valid>
 8010cec:	b3b0      	cbz	r0, 8010d5c <rcl_action_wait_set_add_action_client+0x8c>
 8010cee:	6820      	ldr	r0, [r4, #0]
 8010cf0:	3004      	adds	r0, #4
 8010cf2:	f7fe f965 	bl	800efc0 <rcl_client_is_valid>
 8010cf6:	b388      	cbz	r0, 8010d5c <rcl_action_wait_set_add_action_client+0x8c>
 8010cf8:	6820      	ldr	r0, [r4, #0]
 8010cfa:	3008      	adds	r0, #8
 8010cfc:	f7fe f960 	bl	800efc0 <rcl_client_is_valid>
 8010d00:	b360      	cbz	r0, 8010d5c <rcl_action_wait_set_add_action_client+0x8c>
 8010d02:	6820      	ldr	r0, [r4, #0]
 8010d04:	300c      	adds	r0, #12
 8010d06:	f7f9 fad1 	bl	800a2ac <rcl_subscription_is_valid>
 8010d0a:	b338      	cbz	r0, 8010d5c <rcl_action_wait_set_add_action_client+0x8c>
 8010d0c:	6820      	ldr	r0, [r4, #0]
 8010d0e:	3010      	adds	r0, #16
 8010d10:	f7f9 facc 	bl	800a2ac <rcl_subscription_is_valid>
 8010d14:	b310      	cbz	r0, 8010d5c <rcl_action_wait_set_add_action_client+0x8c>
 8010d16:	6821      	ldr	r1, [r4, #0]
 8010d18:	4628      	mov	r0, r5
 8010d1a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8010d1e:	f7ff fccf 	bl	80106c0 <rcl_wait_set_add_client>
 8010d22:	b9b8      	cbnz	r0, 8010d54 <rcl_action_wait_set_add_action_client+0x84>
 8010d24:	6821      	ldr	r1, [r4, #0]
 8010d26:	4628      	mov	r0, r5
 8010d28:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8010d2c:	3104      	adds	r1, #4
 8010d2e:	f7ff fcc7 	bl	80106c0 <rcl_wait_set_add_client>
 8010d32:	b978      	cbnz	r0, 8010d54 <rcl_action_wait_set_add_action_client+0x84>
 8010d34:	6821      	ldr	r1, [r4, #0]
 8010d36:	4628      	mov	r0, r5
 8010d38:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8010d3c:	3108      	adds	r1, #8
 8010d3e:	f7ff fcbf 	bl	80106c0 <rcl_wait_set_add_client>
 8010d42:	b938      	cbnz	r0, 8010d54 <rcl_action_wait_set_add_action_client+0x84>
 8010d44:	6821      	ldr	r1, [r4, #0]
 8010d46:	4628      	mov	r0, r5
 8010d48:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8010d4c:	310c      	adds	r1, #12
 8010d4e:	f7ff f96f 	bl	8010030 <rcl_wait_set_add_subscription>
 8010d52:	b158      	cbz	r0, 8010d6c <rcl_action_wait_set_add_action_client+0x9c>
 8010d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d56:	f640 0036 	movw	r0, #2102	; 0x836
 8010d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d5c:	f7fa fa0c 	bl	800b178 <rcutils_reset_error>
 8010d60:	f640 0036 	movw	r0, #2102	; 0x836
 8010d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d66:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010d6a:	4770      	bx	lr
 8010d6c:	6821      	ldr	r1, [r4, #0]
 8010d6e:	4628      	mov	r0, r5
 8010d70:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8010d74:	3110      	adds	r1, #16
 8010d76:	f7ff f95b 	bl	8010030 <rcl_wait_set_add_subscription>
 8010d7a:	2800      	cmp	r0, #0
 8010d7c:	d1ea      	bne.n	8010d54 <rcl_action_wait_set_add_action_client+0x84>
 8010d7e:	b11f      	cbz	r7, 8010d88 <rcl_action_wait_set_add_action_client+0xb8>
 8010d80:	6823      	ldr	r3, [r4, #0]
 8010d82:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8010d86:	603b      	str	r3, [r7, #0]
 8010d88:	2e00      	cmp	r6, #0
 8010d8a:	d0e3      	beq.n	8010d54 <rcl_action_wait_set_add_action_client+0x84>
 8010d8c:	6823      	ldr	r3, [r4, #0]
 8010d8e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8010d92:	6033      	str	r3, [r6, #0]
 8010d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d96:	bf00      	nop

08010d98 <rcl_action_client_wait_set_get_entities_ready>:
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	f000 808d 	beq.w	8010eb8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8010d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da2:	460c      	mov	r4, r1
 8010da4:	2900      	cmp	r1, #0
 8010da6:	d077      	beq.n	8010e98 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010da8:	4605      	mov	r5, r0
 8010daa:	6808      	ldr	r0, [r1, #0]
 8010dac:	2800      	cmp	r0, #0
 8010dae:	d073      	beq.n	8010e98 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010db0:	4616      	mov	r6, r2
 8010db2:	461f      	mov	r7, r3
 8010db4:	f7fe f904 	bl	800efc0 <rcl_client_is_valid>
 8010db8:	2800      	cmp	r0, #0
 8010dba:	d071      	beq.n	8010ea0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010dbc:	6820      	ldr	r0, [r4, #0]
 8010dbe:	3004      	adds	r0, #4
 8010dc0:	f7fe f8fe 	bl	800efc0 <rcl_client_is_valid>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d06b      	beq.n	8010ea0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010dc8:	6820      	ldr	r0, [r4, #0]
 8010dca:	3008      	adds	r0, #8
 8010dcc:	f7fe f8f8 	bl	800efc0 <rcl_client_is_valid>
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d065      	beq.n	8010ea0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010dd4:	6820      	ldr	r0, [r4, #0]
 8010dd6:	300c      	adds	r0, #12
 8010dd8:	f7f9 fa68 	bl	800a2ac <rcl_subscription_is_valid>
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	d05f      	beq.n	8010ea0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010de0:	6820      	ldr	r0, [r4, #0]
 8010de2:	3010      	adds	r0, #16
 8010de4:	f7f9 fa62 	bl	800a2ac <rcl_subscription_is_valid>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d059      	beq.n	8010ea0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010dec:	2e00      	cmp	r6, #0
 8010dee:	d060      	beq.n	8010eb2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010df0:	2f00      	cmp	r7, #0
 8010df2:	d05e      	beq.n	8010eb2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010df4:	9b06      	ldr	r3, [sp, #24]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d05b      	beq.n	8010eb2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010dfa:	9b07      	ldr	r3, [sp, #28]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d058      	beq.n	8010eb2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010e00:	9b08      	ldr	r3, [sp, #32]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d055      	beq.n	8010eb2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010e06:	6823      	ldr	r3, [r4, #0]
 8010e08:	686a      	ldr	r2, [r5, #4]
 8010e0a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 8010e0e:	428a      	cmp	r2, r1
 8010e10:	d94c      	bls.n	8010eac <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010e12:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8010e16:	4282      	cmp	r2, r0
 8010e18:	d948      	bls.n	8010eac <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010e1a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 8010e1e:	69ea      	ldr	r2, [r5, #28]
 8010e20:	42a2      	cmp	r2, r4
 8010e22:	d943      	bls.n	8010eac <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010e24:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8010e28:	4562      	cmp	r2, ip
 8010e2a:	d93f      	bls.n	8010eac <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010e2c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8010e30:	4572      	cmp	r2, lr
 8010e32:	d93b      	bls.n	8010eac <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010e34:	69aa      	ldr	r2, [r5, #24]
 8010e36:	682d      	ldr	r5, [r5, #0]
 8010e38:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8010e3c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8010e40:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8010e44:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8010e48:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8010e4c:	f103 0c0c 	add.w	ip, r3, #12
 8010e50:	eba5 050c 	sub.w	r5, r5, ip
 8010e54:	fab5 f585 	clz	r5, r5
 8010e58:	096d      	lsrs	r5, r5, #5
 8010e5a:	7035      	strb	r5, [r6, #0]
 8010e5c:	f103 0510 	add.w	r5, r3, #16
 8010e60:	1b64      	subs	r4, r4, r5
 8010e62:	fab4 f484 	clz	r4, r4
 8010e66:	0964      	lsrs	r4, r4, #5
 8010e68:	703c      	strb	r4, [r7, #0]
 8010e6a:	eba3 0008 	sub.w	r0, r3, r8
 8010e6e:	1d1c      	adds	r4, r3, #4
 8010e70:	3308      	adds	r3, #8
 8010e72:	1ad3      	subs	r3, r2, r3
 8010e74:	fab0 f080 	clz	r0, r0
 8010e78:	9a06      	ldr	r2, [sp, #24]
 8010e7a:	0940      	lsrs	r0, r0, #5
 8010e7c:	1b09      	subs	r1, r1, r4
 8010e7e:	7010      	strb	r0, [r2, #0]
 8010e80:	fab1 f181 	clz	r1, r1
 8010e84:	9a07      	ldr	r2, [sp, #28]
 8010e86:	0949      	lsrs	r1, r1, #5
 8010e88:	7011      	strb	r1, [r2, #0]
 8010e8a:	fab3 f383 	clz	r3, r3
 8010e8e:	9a08      	ldr	r2, [sp, #32]
 8010e90:	095b      	lsrs	r3, r3, #5
 8010e92:	2000      	movs	r0, #0
 8010e94:	7013      	strb	r3, [r2, #0]
 8010e96:	e001      	b.n	8010e9c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8010e98:	f640 0036 	movw	r0, #2102	; 0x836
 8010e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea0:	f7fa f96a 	bl	800b178 <rcutils_reset_error>
 8010ea4:	f640 0036 	movw	r0, #2102	; 0x836
 8010ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eac:	2001      	movs	r0, #1
 8010eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eb2:	200b      	movs	r0, #11
 8010eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eb8:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop

08010ec0 <rcl_action_take_goal_request>:
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	d039      	beq.n	8010f38 <rcl_action_take_goal_request+0x78>
 8010ec4:	b570      	push	{r4, r5, r6, lr}
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	6800      	ldr	r0, [r0, #0]
 8010eca:	b380      	cbz	r0, 8010f2e <rcl_action_take_goal_request+0x6e>
 8010ecc:	460d      	mov	r5, r1
 8010ece:	4616      	mov	r6, r2
 8010ed0:	f7fe fddc 	bl	800fa8c <rcl_service_is_valid>
 8010ed4:	b330      	cbz	r0, 8010f24 <rcl_action_take_goal_request+0x64>
 8010ed6:	6820      	ldr	r0, [r4, #0]
 8010ed8:	3004      	adds	r0, #4
 8010eda:	f7fe fdd7 	bl	800fa8c <rcl_service_is_valid>
 8010ede:	b308      	cbz	r0, 8010f24 <rcl_action_take_goal_request+0x64>
 8010ee0:	6820      	ldr	r0, [r4, #0]
 8010ee2:	3008      	adds	r0, #8
 8010ee4:	f7fe fdd2 	bl	800fa8c <rcl_service_is_valid>
 8010ee8:	b1e0      	cbz	r0, 8010f24 <rcl_action_take_goal_request+0x64>
 8010eea:	6820      	ldr	r0, [r4, #0]
 8010eec:	300c      	adds	r0, #12
 8010eee:	f003 facf 	bl	8014490 <rcl_publisher_is_valid>
 8010ef2:	b1b8      	cbz	r0, 8010f24 <rcl_action_take_goal_request+0x64>
 8010ef4:	6820      	ldr	r0, [r4, #0]
 8010ef6:	3010      	adds	r0, #16
 8010ef8:	f003 faca 	bl	8014490 <rcl_publisher_is_valid>
 8010efc:	b190      	cbz	r0, 8010f24 <rcl_action_take_goal_request+0x64>
 8010efe:	b1cd      	cbz	r5, 8010f34 <rcl_action_take_goal_request+0x74>
 8010f00:	b1c6      	cbz	r6, 8010f34 <rcl_action_take_goal_request+0x74>
 8010f02:	6820      	ldr	r0, [r4, #0]
 8010f04:	4632      	mov	r2, r6
 8010f06:	4629      	mov	r1, r5
 8010f08:	f7fe fd68 	bl	800f9dc <rcl_take_request>
 8010f0c:	b148      	cbz	r0, 8010f22 <rcl_action_take_goal_request+0x62>
 8010f0e:	280a      	cmp	r0, #10
 8010f10:	d007      	beq.n	8010f22 <rcl_action_take_goal_request+0x62>
 8010f12:	f240 2259 	movw	r2, #601	; 0x259
 8010f16:	f640 0399 	movw	r3, #2201	; 0x899
 8010f1a:	4290      	cmp	r0, r2
 8010f1c:	bf0c      	ite	eq
 8010f1e:	4618      	moveq	r0, r3
 8010f20:	2001      	movne	r0, #1
 8010f22:	bd70      	pop	{r4, r5, r6, pc}
 8010f24:	f7fa f928 	bl	800b178 <rcutils_reset_error>
 8010f28:	f640 0098 	movw	r0, #2200	; 0x898
 8010f2c:	bd70      	pop	{r4, r5, r6, pc}
 8010f2e:	f640 0098 	movw	r0, #2200	; 0x898
 8010f32:	bd70      	pop	{r4, r5, r6, pc}
 8010f34:	200b      	movs	r0, #11
 8010f36:	bd70      	pop	{r4, r5, r6, pc}
 8010f38:	f640 0098 	movw	r0, #2200	; 0x898
 8010f3c:	4770      	bx	lr
 8010f3e:	bf00      	nop

08010f40 <rcl_action_send_goal_response>:
 8010f40:	b388      	cbz	r0, 8010fa6 <rcl_action_send_goal_response+0x66>
 8010f42:	b570      	push	{r4, r5, r6, lr}
 8010f44:	4604      	mov	r4, r0
 8010f46:	6800      	ldr	r0, [r0, #0]
 8010f48:	b340      	cbz	r0, 8010f9c <rcl_action_send_goal_response+0x5c>
 8010f4a:	460d      	mov	r5, r1
 8010f4c:	4616      	mov	r6, r2
 8010f4e:	f7fe fd9d 	bl	800fa8c <rcl_service_is_valid>
 8010f52:	b1f0      	cbz	r0, 8010f92 <rcl_action_send_goal_response+0x52>
 8010f54:	6820      	ldr	r0, [r4, #0]
 8010f56:	3004      	adds	r0, #4
 8010f58:	f7fe fd98 	bl	800fa8c <rcl_service_is_valid>
 8010f5c:	b1c8      	cbz	r0, 8010f92 <rcl_action_send_goal_response+0x52>
 8010f5e:	6820      	ldr	r0, [r4, #0]
 8010f60:	3008      	adds	r0, #8
 8010f62:	f7fe fd93 	bl	800fa8c <rcl_service_is_valid>
 8010f66:	b1a0      	cbz	r0, 8010f92 <rcl_action_send_goal_response+0x52>
 8010f68:	6820      	ldr	r0, [r4, #0]
 8010f6a:	300c      	adds	r0, #12
 8010f6c:	f003 fa90 	bl	8014490 <rcl_publisher_is_valid>
 8010f70:	b178      	cbz	r0, 8010f92 <rcl_action_send_goal_response+0x52>
 8010f72:	6820      	ldr	r0, [r4, #0]
 8010f74:	3010      	adds	r0, #16
 8010f76:	f003 fa8b 	bl	8014490 <rcl_publisher_is_valid>
 8010f7a:	b150      	cbz	r0, 8010f92 <rcl_action_send_goal_response+0x52>
 8010f7c:	b18d      	cbz	r5, 8010fa2 <rcl_action_send_goal_response+0x62>
 8010f7e:	b186      	cbz	r6, 8010fa2 <rcl_action_send_goal_response+0x62>
 8010f80:	6820      	ldr	r0, [r4, #0]
 8010f82:	4632      	mov	r2, r6
 8010f84:	4629      	mov	r1, r5
 8010f86:	f7fe fd69 	bl	800fa5c <rcl_send_response>
 8010f8a:	3800      	subs	r0, #0
 8010f8c:	bf18      	it	ne
 8010f8e:	2001      	movne	r0, #1
 8010f90:	bd70      	pop	{r4, r5, r6, pc}
 8010f92:	f7fa f8f1 	bl	800b178 <rcutils_reset_error>
 8010f96:	f640 0098 	movw	r0, #2200	; 0x898
 8010f9a:	bd70      	pop	{r4, r5, r6, pc}
 8010f9c:	f640 0098 	movw	r0, #2200	; 0x898
 8010fa0:	bd70      	pop	{r4, r5, r6, pc}
 8010fa2:	200b      	movs	r0, #11
 8010fa4:	bd70      	pop	{r4, r5, r6, pc}
 8010fa6:	f640 0098 	movw	r0, #2200	; 0x898
 8010faa:	4770      	bx	lr

08010fac <rcl_action_take_result_request>:
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d03a      	beq.n	8011026 <rcl_action_take_result_request+0x7a>
 8010fb0:	b570      	push	{r4, r5, r6, lr}
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	6800      	ldr	r0, [r0, #0]
 8010fb6:	b388      	cbz	r0, 801101c <rcl_action_take_result_request+0x70>
 8010fb8:	460d      	mov	r5, r1
 8010fba:	4616      	mov	r6, r2
 8010fbc:	f7fe fd66 	bl	800fa8c <rcl_service_is_valid>
 8010fc0:	b338      	cbz	r0, 8011012 <rcl_action_take_result_request+0x66>
 8010fc2:	6820      	ldr	r0, [r4, #0]
 8010fc4:	3004      	adds	r0, #4
 8010fc6:	f7fe fd61 	bl	800fa8c <rcl_service_is_valid>
 8010fca:	b310      	cbz	r0, 8011012 <rcl_action_take_result_request+0x66>
 8010fcc:	6820      	ldr	r0, [r4, #0]
 8010fce:	3008      	adds	r0, #8
 8010fd0:	f7fe fd5c 	bl	800fa8c <rcl_service_is_valid>
 8010fd4:	b1e8      	cbz	r0, 8011012 <rcl_action_take_result_request+0x66>
 8010fd6:	6820      	ldr	r0, [r4, #0]
 8010fd8:	300c      	adds	r0, #12
 8010fda:	f003 fa59 	bl	8014490 <rcl_publisher_is_valid>
 8010fde:	b1c0      	cbz	r0, 8011012 <rcl_action_take_result_request+0x66>
 8010fe0:	6820      	ldr	r0, [r4, #0]
 8010fe2:	3010      	adds	r0, #16
 8010fe4:	f003 fa54 	bl	8014490 <rcl_publisher_is_valid>
 8010fe8:	b198      	cbz	r0, 8011012 <rcl_action_take_result_request+0x66>
 8010fea:	b1d5      	cbz	r5, 8011022 <rcl_action_take_result_request+0x76>
 8010fec:	b1ce      	cbz	r6, 8011022 <rcl_action_take_result_request+0x76>
 8010fee:	6820      	ldr	r0, [r4, #0]
 8010ff0:	4632      	mov	r2, r6
 8010ff2:	4629      	mov	r1, r5
 8010ff4:	3008      	adds	r0, #8
 8010ff6:	f7fe fcf1 	bl	800f9dc <rcl_take_request>
 8010ffa:	b148      	cbz	r0, 8011010 <rcl_action_take_result_request+0x64>
 8010ffc:	280a      	cmp	r0, #10
 8010ffe:	d007      	beq.n	8011010 <rcl_action_take_result_request+0x64>
 8011000:	f240 2259 	movw	r2, #601	; 0x259
 8011004:	f640 0399 	movw	r3, #2201	; 0x899
 8011008:	4290      	cmp	r0, r2
 801100a:	bf0c      	ite	eq
 801100c:	4618      	moveq	r0, r3
 801100e:	2001      	movne	r0, #1
 8011010:	bd70      	pop	{r4, r5, r6, pc}
 8011012:	f7fa f8b1 	bl	800b178 <rcutils_reset_error>
 8011016:	f640 0098 	movw	r0, #2200	; 0x898
 801101a:	bd70      	pop	{r4, r5, r6, pc}
 801101c:	f640 0098 	movw	r0, #2200	; 0x898
 8011020:	bd70      	pop	{r4, r5, r6, pc}
 8011022:	200b      	movs	r0, #11
 8011024:	bd70      	pop	{r4, r5, r6, pc}
 8011026:	f640 0098 	movw	r0, #2200	; 0x898
 801102a:	4770      	bx	lr

0801102c <rcl_action_take_cancel_request>:
 801102c:	2800      	cmp	r0, #0
 801102e:	d03a      	beq.n	80110a6 <rcl_action_take_cancel_request+0x7a>
 8011030:	b570      	push	{r4, r5, r6, lr}
 8011032:	4604      	mov	r4, r0
 8011034:	6800      	ldr	r0, [r0, #0]
 8011036:	b388      	cbz	r0, 801109c <rcl_action_take_cancel_request+0x70>
 8011038:	460d      	mov	r5, r1
 801103a:	4616      	mov	r6, r2
 801103c:	f7fe fd26 	bl	800fa8c <rcl_service_is_valid>
 8011040:	b338      	cbz	r0, 8011092 <rcl_action_take_cancel_request+0x66>
 8011042:	6820      	ldr	r0, [r4, #0]
 8011044:	3004      	adds	r0, #4
 8011046:	f7fe fd21 	bl	800fa8c <rcl_service_is_valid>
 801104a:	b310      	cbz	r0, 8011092 <rcl_action_take_cancel_request+0x66>
 801104c:	6820      	ldr	r0, [r4, #0]
 801104e:	3008      	adds	r0, #8
 8011050:	f7fe fd1c 	bl	800fa8c <rcl_service_is_valid>
 8011054:	b1e8      	cbz	r0, 8011092 <rcl_action_take_cancel_request+0x66>
 8011056:	6820      	ldr	r0, [r4, #0]
 8011058:	300c      	adds	r0, #12
 801105a:	f003 fa19 	bl	8014490 <rcl_publisher_is_valid>
 801105e:	b1c0      	cbz	r0, 8011092 <rcl_action_take_cancel_request+0x66>
 8011060:	6820      	ldr	r0, [r4, #0]
 8011062:	3010      	adds	r0, #16
 8011064:	f003 fa14 	bl	8014490 <rcl_publisher_is_valid>
 8011068:	b198      	cbz	r0, 8011092 <rcl_action_take_cancel_request+0x66>
 801106a:	b1d5      	cbz	r5, 80110a2 <rcl_action_take_cancel_request+0x76>
 801106c:	b1ce      	cbz	r6, 80110a2 <rcl_action_take_cancel_request+0x76>
 801106e:	6820      	ldr	r0, [r4, #0]
 8011070:	4632      	mov	r2, r6
 8011072:	4629      	mov	r1, r5
 8011074:	3004      	adds	r0, #4
 8011076:	f7fe fcb1 	bl	800f9dc <rcl_take_request>
 801107a:	b148      	cbz	r0, 8011090 <rcl_action_take_cancel_request+0x64>
 801107c:	280a      	cmp	r0, #10
 801107e:	d007      	beq.n	8011090 <rcl_action_take_cancel_request+0x64>
 8011080:	f240 2259 	movw	r2, #601	; 0x259
 8011084:	f640 0399 	movw	r3, #2201	; 0x899
 8011088:	4290      	cmp	r0, r2
 801108a:	bf0c      	ite	eq
 801108c:	4618      	moveq	r0, r3
 801108e:	2001      	movne	r0, #1
 8011090:	bd70      	pop	{r4, r5, r6, pc}
 8011092:	f7fa f871 	bl	800b178 <rcutils_reset_error>
 8011096:	f640 0098 	movw	r0, #2200	; 0x898
 801109a:	bd70      	pop	{r4, r5, r6, pc}
 801109c:	f640 0098 	movw	r0, #2200	; 0x898
 80110a0:	bd70      	pop	{r4, r5, r6, pc}
 80110a2:	200b      	movs	r0, #11
 80110a4:	bd70      	pop	{r4, r5, r6, pc}
 80110a6:	f640 0098 	movw	r0, #2200	; 0x898
 80110aa:	4770      	bx	lr

080110ac <rcl_action_send_cancel_response>:
 80110ac:	b390      	cbz	r0, 8011114 <rcl_action_send_cancel_response+0x68>
 80110ae:	b570      	push	{r4, r5, r6, lr}
 80110b0:	4604      	mov	r4, r0
 80110b2:	6800      	ldr	r0, [r0, #0]
 80110b4:	b348      	cbz	r0, 801110a <rcl_action_send_cancel_response+0x5e>
 80110b6:	460d      	mov	r5, r1
 80110b8:	4616      	mov	r6, r2
 80110ba:	f7fe fce7 	bl	800fa8c <rcl_service_is_valid>
 80110be:	b1f8      	cbz	r0, 8011100 <rcl_action_send_cancel_response+0x54>
 80110c0:	6820      	ldr	r0, [r4, #0]
 80110c2:	3004      	adds	r0, #4
 80110c4:	f7fe fce2 	bl	800fa8c <rcl_service_is_valid>
 80110c8:	b1d0      	cbz	r0, 8011100 <rcl_action_send_cancel_response+0x54>
 80110ca:	6820      	ldr	r0, [r4, #0]
 80110cc:	3008      	adds	r0, #8
 80110ce:	f7fe fcdd 	bl	800fa8c <rcl_service_is_valid>
 80110d2:	b1a8      	cbz	r0, 8011100 <rcl_action_send_cancel_response+0x54>
 80110d4:	6820      	ldr	r0, [r4, #0]
 80110d6:	300c      	adds	r0, #12
 80110d8:	f003 f9da 	bl	8014490 <rcl_publisher_is_valid>
 80110dc:	b180      	cbz	r0, 8011100 <rcl_action_send_cancel_response+0x54>
 80110de:	6820      	ldr	r0, [r4, #0]
 80110e0:	3010      	adds	r0, #16
 80110e2:	f003 f9d5 	bl	8014490 <rcl_publisher_is_valid>
 80110e6:	b158      	cbz	r0, 8011100 <rcl_action_send_cancel_response+0x54>
 80110e8:	b195      	cbz	r5, 8011110 <rcl_action_send_cancel_response+0x64>
 80110ea:	b18e      	cbz	r6, 8011110 <rcl_action_send_cancel_response+0x64>
 80110ec:	6820      	ldr	r0, [r4, #0]
 80110ee:	4632      	mov	r2, r6
 80110f0:	4629      	mov	r1, r5
 80110f2:	3004      	adds	r0, #4
 80110f4:	f7fe fcb2 	bl	800fa5c <rcl_send_response>
 80110f8:	3800      	subs	r0, #0
 80110fa:	bf18      	it	ne
 80110fc:	2001      	movne	r0, #1
 80110fe:	bd70      	pop	{r4, r5, r6, pc}
 8011100:	f7fa f83a 	bl	800b178 <rcutils_reset_error>
 8011104:	f640 0098 	movw	r0, #2200	; 0x898
 8011108:	bd70      	pop	{r4, r5, r6, pc}
 801110a:	f640 0098 	movw	r0, #2200	; 0x898
 801110e:	bd70      	pop	{r4, r5, r6, pc}
 8011110:	200b      	movs	r0, #11
 8011112:	bd70      	pop	{r4, r5, r6, pc}
 8011114:	f640 0098 	movw	r0, #2200	; 0x898
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop

0801111c <rcl_action_wait_set_add_action_server>:
 801111c:	2800      	cmp	r0, #0
 801111e:	d04d      	beq.n	80111bc <rcl_action_wait_set_add_action_server+0xa0>
 8011120:	b570      	push	{r4, r5, r6, lr}
 8011122:	460c      	mov	r4, r1
 8011124:	b159      	cbz	r1, 801113e <rcl_action_wait_set_add_action_server+0x22>
 8011126:	4605      	mov	r5, r0
 8011128:	6808      	ldr	r0, [r1, #0]
 801112a:	b140      	cbz	r0, 801113e <rcl_action_wait_set_add_action_server+0x22>
 801112c:	4616      	mov	r6, r2
 801112e:	f7fe fcad 	bl	800fa8c <rcl_service_is_valid>
 8011132:	b120      	cbz	r0, 801113e <rcl_action_wait_set_add_action_server+0x22>
 8011134:	6820      	ldr	r0, [r4, #0]
 8011136:	3004      	adds	r0, #4
 8011138:	f7fe fca8 	bl	800fa8c <rcl_service_is_valid>
 801113c:	b910      	cbnz	r0, 8011144 <rcl_action_wait_set_add_action_server+0x28>
 801113e:	f640 0098 	movw	r0, #2200	; 0x898
 8011142:	bd70      	pop	{r4, r5, r6, pc}
 8011144:	6820      	ldr	r0, [r4, #0]
 8011146:	3008      	adds	r0, #8
 8011148:	f7fe fca0 	bl	800fa8c <rcl_service_is_valid>
 801114c:	2800      	cmp	r0, #0
 801114e:	d0f6      	beq.n	801113e <rcl_action_wait_set_add_action_server+0x22>
 8011150:	6820      	ldr	r0, [r4, #0]
 8011152:	300c      	adds	r0, #12
 8011154:	f003 f9b4 	bl	80144c0 <rcl_publisher_is_valid_except_context>
 8011158:	2800      	cmp	r0, #0
 801115a:	d0f0      	beq.n	801113e <rcl_action_wait_set_add_action_server+0x22>
 801115c:	6820      	ldr	r0, [r4, #0]
 801115e:	3010      	adds	r0, #16
 8011160:	f003 f9ae 	bl	80144c0 <rcl_publisher_is_valid_except_context>
 8011164:	2800      	cmp	r0, #0
 8011166:	d0ea      	beq.n	801113e <rcl_action_wait_set_add_action_server+0x22>
 8011168:	6821      	ldr	r1, [r4, #0]
 801116a:	4628      	mov	r0, r5
 801116c:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8011170:	f7ff fad2 	bl	8010718 <rcl_wait_set_add_service>
 8011174:	2800      	cmp	r0, #0
 8011176:	d1e4      	bne.n	8011142 <rcl_action_wait_set_add_action_server+0x26>
 8011178:	6821      	ldr	r1, [r4, #0]
 801117a:	4628      	mov	r0, r5
 801117c:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8011180:	3104      	adds	r1, #4
 8011182:	f7ff fac9 	bl	8010718 <rcl_wait_set_add_service>
 8011186:	2800      	cmp	r0, #0
 8011188:	d1db      	bne.n	8011142 <rcl_action_wait_set_add_action_server+0x26>
 801118a:	6821      	ldr	r1, [r4, #0]
 801118c:	4628      	mov	r0, r5
 801118e:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8011192:	3108      	adds	r1, #8
 8011194:	f7ff fac0 	bl	8010718 <rcl_wait_set_add_service>
 8011198:	2800      	cmp	r0, #0
 801119a:	d1d2      	bne.n	8011142 <rcl_action_wait_set_add_action_server+0x26>
 801119c:	6821      	ldr	r1, [r4, #0]
 801119e:	4628      	mov	r0, r5
 80111a0:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80111a4:	3114      	adds	r1, #20
 80111a6:	f7ff fa5b 	bl	8010660 <rcl_wait_set_add_timer>
 80111aa:	2800      	cmp	r0, #0
 80111ac:	d1c9      	bne.n	8011142 <rcl_action_wait_set_add_action_server+0x26>
 80111ae:	2e00      	cmp	r6, #0
 80111b0:	d0c7      	beq.n	8011142 <rcl_action_wait_set_add_action_server+0x26>
 80111b2:	6823      	ldr	r3, [r4, #0]
 80111b4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80111b8:	6033      	str	r3, [r6, #0]
 80111ba:	bd70      	pop	{r4, r5, r6, pc}
 80111bc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop

080111c4 <rcl_action_server_wait_set_get_entities_ready>:
 80111c4:	2800      	cmp	r0, #0
 80111c6:	d05a      	beq.n	801127e <rcl_action_server_wait_set_get_entities_ready+0xba>
 80111c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ca:	460c      	mov	r4, r1
 80111cc:	b161      	cbz	r1, 80111e8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80111ce:	4605      	mov	r5, r0
 80111d0:	6808      	ldr	r0, [r1, #0]
 80111d2:	b148      	cbz	r0, 80111e8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80111d4:	4616      	mov	r6, r2
 80111d6:	461f      	mov	r7, r3
 80111d8:	f7fe fc58 	bl	800fa8c <rcl_service_is_valid>
 80111dc:	b120      	cbz	r0, 80111e8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80111de:	6820      	ldr	r0, [r4, #0]
 80111e0:	3004      	adds	r0, #4
 80111e2:	f7fe fc53 	bl	800fa8c <rcl_service_is_valid>
 80111e6:	b910      	cbnz	r0, 80111ee <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80111e8:	f640 0098 	movw	r0, #2200	; 0x898
 80111ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111ee:	6820      	ldr	r0, [r4, #0]
 80111f0:	3008      	adds	r0, #8
 80111f2:	f7fe fc4b 	bl	800fa8c <rcl_service_is_valid>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d0f6      	beq.n	80111e8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80111fa:	6820      	ldr	r0, [r4, #0]
 80111fc:	300c      	adds	r0, #12
 80111fe:	f003 f95f 	bl	80144c0 <rcl_publisher_is_valid_except_context>
 8011202:	2800      	cmp	r0, #0
 8011204:	d0f0      	beq.n	80111e8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011206:	6820      	ldr	r0, [r4, #0]
 8011208:	3010      	adds	r0, #16
 801120a:	f003 f959 	bl	80144c0 <rcl_publisher_is_valid_except_context>
 801120e:	2800      	cmp	r0, #0
 8011210:	d0ea      	beq.n	80111e8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011212:	b3be      	cbz	r6, 8011284 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011214:	b3b7      	cbz	r7, 8011284 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011216:	9b06      	ldr	r3, [sp, #24]
 8011218:	b3a3      	cbz	r3, 8011284 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801121a:	9b07      	ldr	r3, [sp, #28]
 801121c:	b393      	cbz	r3, 8011284 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801121e:	6821      	ldr	r1, [r4, #0]
 8011220:	692a      	ldr	r2, [r5, #16]
 8011222:	6a2c      	ldr	r4, [r5, #32]
 8011224:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 8011228:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801122c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8011230:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 8011234:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 8011238:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801123c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011240:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011244:	1a64      	subs	r4, r4, r1
 8011246:	fab4 f484 	clz	r4, r4
 801124a:	0964      	lsrs	r4, r4, #5
 801124c:	7034      	strb	r4, [r6, #0]
 801124e:	1d0c      	adds	r4, r1, #4
 8011250:	1b1b      	subs	r3, r3, r4
 8011252:	fab3 f383 	clz	r3, r3
 8011256:	095b      	lsrs	r3, r3, #5
 8011258:	f101 0408 	add.w	r4, r1, #8
 801125c:	703b      	strb	r3, [r7, #0]
 801125e:	f101 0314 	add.w	r3, r1, #20
 8011262:	1b01      	subs	r1, r0, r4
 8011264:	1ad3      	subs	r3, r2, r3
 8011266:	fab1 f181 	clz	r1, r1
 801126a:	9a06      	ldr	r2, [sp, #24]
 801126c:	0949      	lsrs	r1, r1, #5
 801126e:	7011      	strb	r1, [r2, #0]
 8011270:	fab3 f383 	clz	r3, r3
 8011274:	9a07      	ldr	r2, [sp, #28]
 8011276:	095b      	lsrs	r3, r3, #5
 8011278:	2000      	movs	r0, #0
 801127a:	7013      	strb	r3, [r2, #0]
 801127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801127e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011282:	4770      	bx	lr
 8011284:	200b      	movs	r0, #11
 8011286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011288 <_execute_event_handler>:
 8011288:	2002      	movs	r0, #2
 801128a:	4770      	bx	lr

0801128c <_cancel_goal_event_handler>:
 801128c:	2003      	movs	r0, #3
 801128e:	4770      	bx	lr

08011290 <_succeed_event_handler>:
 8011290:	2004      	movs	r0, #4
 8011292:	4770      	bx	lr

08011294 <_abort_event_handler>:
 8011294:	2006      	movs	r0, #6
 8011296:	4770      	bx	lr

08011298 <_canceled_event_handler>:
 8011298:	2005      	movs	r0, #5
 801129a:	4770      	bx	lr

0801129c <rcl_action_transition_goal_state>:
 801129c:	b2c2      	uxtb	r2, r0
 801129e:	2a06      	cmp	r2, #6
 80112a0:	d80c      	bhi.n	80112bc <rcl_action_transition_goal_state+0x20>
 80112a2:	2904      	cmp	r1, #4
 80112a4:	d80a      	bhi.n	80112bc <rcl_action_transition_goal_state+0x20>
 80112a6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80112aa:	b410      	push	{r4}
 80112ac:	1853      	adds	r3, r2, r1
 80112ae:	4c06      	ldr	r4, [pc, #24]	; (80112c8 <rcl_action_transition_goal_state+0x2c>)
 80112b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80112b4:	b123      	cbz	r3, 80112c0 <rcl_action_transition_goal_state+0x24>
 80112b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112ba:	4718      	bx	r3
 80112bc:	2000      	movs	r0, #0
 80112be:	4770      	bx	lr
 80112c0:	2000      	movs	r0, #0
 80112c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	08016840 	.word	0x08016840

080112cc <rcl_action_get_zero_initialized_cancel_response>:
 80112cc:	b510      	push	{r4, lr}
 80112ce:	4c07      	ldr	r4, [pc, #28]	; (80112ec <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80112d0:	4686      	mov	lr, r0
 80112d2:	4684      	mov	ip, r0
 80112d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112e0:	6823      	ldr	r3, [r4, #0]
 80112e2:	f8cc 3000 	str.w	r3, [ip]
 80112e6:	4670      	mov	r0, lr
 80112e8:	bd10      	pop	{r4, pc}
 80112ea:	bf00      	nop
 80112ec:	080168cc 	.word	0x080168cc

080112f0 <rclc_action_send_result_request>:
 80112f0:	b1d0      	cbz	r0, 8011328 <rclc_action_send_result_request+0x38>
 80112f2:	b500      	push	{lr}
 80112f4:	4684      	mov	ip, r0
 80112f6:	b087      	sub	sp, #28
 80112f8:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80112fc:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011300:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011304:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011308:	f10d 0e08 	add.w	lr, sp, #8
 801130c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011310:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011314:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8011318:	a902      	add	r1, sp, #8
 801131a:	3010      	adds	r0, #16
 801131c:	f7ff fbdc 	bl	8010ad8 <rcl_action_send_result_request>
 8011320:	b920      	cbnz	r0, 801132c <rclc_action_send_result_request+0x3c>
 8011322:	b007      	add	sp, #28
 8011324:	f85d fb04 	ldr.w	pc, [sp], #4
 8011328:	200b      	movs	r0, #11
 801132a:	4770      	bx	lr
 801132c:	9001      	str	r0, [sp, #4]
 801132e:	f7f9 ff23 	bl	800b178 <rcutils_reset_error>
 8011332:	9801      	ldr	r0, [sp, #4]
 8011334:	b007      	add	sp, #28
 8011336:	f85d fb04 	ldr.w	pc, [sp], #4
 801133a:	bf00      	nop

0801133c <rclc_action_take_goal_handle>:
 801133c:	b160      	cbz	r0, 8011358 <rclc_action_take_goal_handle+0x1c>
 801133e:	6883      	ldr	r3, [r0, #8]
 8011340:	b143      	cbz	r3, 8011354 <rclc_action_take_goal_handle+0x18>
 8011342:	6819      	ldr	r1, [r3, #0]
 8011344:	6081      	str	r1, [r0, #8]
 8011346:	2200      	movs	r2, #0
 8011348:	721a      	strb	r2, [r3, #8]
 801134a:	68c1      	ldr	r1, [r0, #12]
 801134c:	6019      	str	r1, [r3, #0]
 801134e:	621a      	str	r2, [r3, #32]
 8011350:	849a      	strh	r2, [r3, #36]	; 0x24
 8011352:	60c3      	str	r3, [r0, #12]
 8011354:	4618      	mov	r0, r3
 8011356:	4770      	bx	lr
 8011358:	4603      	mov	r3, r0
 801135a:	e7fb      	b.n	8011354 <rclc_action_take_goal_handle+0x18>

0801135c <rclc_action_remove_used_goal_handle>:
 801135c:	b180      	cbz	r0, 8011380 <rclc_action_remove_used_goal_handle+0x24>
 801135e:	b179      	cbz	r1, 8011380 <rclc_action_remove_used_goal_handle+0x24>
 8011360:	68c3      	ldr	r3, [r0, #12]
 8011362:	4299      	cmp	r1, r3
 8011364:	d00d      	beq.n	8011382 <rclc_action_remove_used_goal_handle+0x26>
 8011366:	b12b      	cbz	r3, 8011374 <rclc_action_remove_used_goal_handle+0x18>
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	4291      	cmp	r1, r2
 801136c:	d003      	beq.n	8011376 <rclc_action_remove_used_goal_handle+0x1a>
 801136e:	4613      	mov	r3, r2
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1f9      	bne.n	8011368 <rclc_action_remove_used_goal_handle+0xc>
 8011374:	4770      	bx	lr
 8011376:	680a      	ldr	r2, [r1, #0]
 8011378:	601a      	str	r2, [r3, #0]
 801137a:	6883      	ldr	r3, [r0, #8]
 801137c:	600b      	str	r3, [r1, #0]
 801137e:	6081      	str	r1, [r0, #8]
 8011380:	4770      	bx	lr
 8011382:	680b      	ldr	r3, [r1, #0]
 8011384:	60c3      	str	r3, [r0, #12]
 8011386:	e7f8      	b.n	801137a <rclc_action_remove_used_goal_handle+0x1e>

08011388 <rclc_action_find_goal_handle_by_uuid>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	b180      	cbz	r0, 80113ae <rclc_action_find_goal_handle_by_uuid+0x26>
 801138c:	460d      	mov	r5, r1
 801138e:	b181      	cbz	r1, 80113b2 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8011390:	68c4      	ldr	r4, [r0, #12]
 8011392:	b914      	cbnz	r4, 801139a <rclc_action_find_goal_handle_by_uuid+0x12>
 8011394:	e009      	b.n	80113aa <rclc_action_find_goal_handle_by_uuid+0x22>
 8011396:	6824      	ldr	r4, [r4, #0]
 8011398:	b13c      	cbz	r4, 80113aa <rclc_action_find_goal_handle_by_uuid+0x22>
 801139a:	f104 0009 	add.w	r0, r4, #9
 801139e:	2210      	movs	r2, #16
 80113a0:	4629      	mov	r1, r5
 80113a2:	f003 fe17 	bl	8014fd4 <memcmp>
 80113a6:	2800      	cmp	r0, #0
 80113a8:	d1f5      	bne.n	8011396 <rclc_action_find_goal_handle_by_uuid+0xe>
 80113aa:	4620      	mov	r0, r4
 80113ac:	bd38      	pop	{r3, r4, r5, pc}
 80113ae:	4604      	mov	r4, r0
 80113b0:	e7fb      	b.n	80113aa <rclc_action_find_goal_handle_by_uuid+0x22>
 80113b2:	460c      	mov	r4, r1
 80113b4:	e7f9      	b.n	80113aa <rclc_action_find_goal_handle_by_uuid+0x22>
 80113b6:	bf00      	nop

080113b8 <rclc_action_find_first_handle_by_status>:
 80113b8:	b140      	cbz	r0, 80113cc <rclc_action_find_first_handle_by_status+0x14>
 80113ba:	68c0      	ldr	r0, [r0, #12]
 80113bc:	b910      	cbnz	r0, 80113c4 <rclc_action_find_first_handle_by_status+0xc>
 80113be:	e005      	b.n	80113cc <rclc_action_find_first_handle_by_status+0x14>
 80113c0:	6800      	ldr	r0, [r0, #0]
 80113c2:	b118      	cbz	r0, 80113cc <rclc_action_find_first_handle_by_status+0x14>
 80113c4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80113c8:	428b      	cmp	r3, r1
 80113ca:	d1f9      	bne.n	80113c0 <rclc_action_find_first_handle_by_status+0x8>
 80113cc:	4770      	bx	lr
 80113ce:	bf00      	nop

080113d0 <rclc_action_find_first_terminated_handle>:
 80113d0:	b140      	cbz	r0, 80113e4 <rclc_action_find_first_terminated_handle+0x14>
 80113d2:	68c0      	ldr	r0, [r0, #12]
 80113d4:	b910      	cbnz	r0, 80113dc <rclc_action_find_first_terminated_handle+0xc>
 80113d6:	e005      	b.n	80113e4 <rclc_action_find_first_terminated_handle+0x14>
 80113d8:	6800      	ldr	r0, [r0, #0]
 80113da:	b118      	cbz	r0, 80113e4 <rclc_action_find_first_terminated_handle+0x14>
 80113dc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80113e0:	2b03      	cmp	r3, #3
 80113e2:	ddf9      	ble.n	80113d8 <rclc_action_find_first_terminated_handle+0x8>
 80113e4:	4770      	bx	lr
 80113e6:	bf00      	nop

080113e8 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80113e8:	b170      	cbz	r0, 8011408 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80113ea:	68c0      	ldr	r0, [r0, #12]
 80113ec:	b160      	cbz	r0, 8011408 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80113ee:	b410      	push	{r4}
 80113f0:	e001      	b.n	80113f6 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80113f2:	6800      	ldr	r0, [r0, #0]
 80113f4:	b128      	cbz	r0, 8011402 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80113f6:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 80113fa:	4299      	cmp	r1, r3
 80113fc:	bf08      	it	eq
 80113fe:	4294      	cmpeq	r4, r2
 8011400:	d1f7      	bne.n	80113f2 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011406:	4770      	bx	lr
 8011408:	4770      	bx	lr
 801140a:	bf00      	nop

0801140c <rclc_action_find_handle_by_result_request_sequence_number>:
 801140c:	b170      	cbz	r0, 801142c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801140e:	68c0      	ldr	r0, [r0, #12]
 8011410:	b160      	cbz	r0, 801142c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011412:	b410      	push	{r4}
 8011414:	e001      	b.n	801141a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011416:	6800      	ldr	r0, [r0, #0]
 8011418:	b128      	cbz	r0, 8011426 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801141a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801141e:	4299      	cmp	r1, r3
 8011420:	bf08      	it	eq
 8011422:	4294      	cmpeq	r4, r2
 8011424:	d1f7      	bne.n	8011416 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011426:	f85d 4b04 	ldr.w	r4, [sp], #4
 801142a:	4770      	bx	lr
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop

08011430 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011430:	b170      	cbz	r0, 8011450 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011432:	68c0      	ldr	r0, [r0, #12]
 8011434:	b160      	cbz	r0, 8011450 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011436:	b410      	push	{r4}
 8011438:	e001      	b.n	801143e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801143a:	6800      	ldr	r0, [r0, #0]
 801143c:	b128      	cbz	r0, 801144a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801143e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8011442:	4299      	cmp	r1, r3
 8011444:	bf08      	it	eq
 8011446:	4294      	cmpeq	r4, r2
 8011448:	d1f7      	bne.n	801143a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801144a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801144e:	4770      	bx	lr
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop

08011454 <rclc_action_find_first_handle_with_goal_response>:
 8011454:	b140      	cbz	r0, 8011468 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011456:	68c0      	ldr	r0, [r0, #12]
 8011458:	b910      	cbnz	r0, 8011460 <rclc_action_find_first_handle_with_goal_response+0xc>
 801145a:	e005      	b.n	8011468 <rclc_action_find_first_handle_with_goal_response+0x14>
 801145c:	6800      	ldr	r0, [r0, #0]
 801145e:	b118      	cbz	r0, 8011468 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011460:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d0f9      	beq.n	801145c <rclc_action_find_first_handle_with_goal_response+0x8>
 8011468:	4770      	bx	lr
 801146a:	bf00      	nop

0801146c <rclc_action_find_first_handle_with_result_response>:
 801146c:	b140      	cbz	r0, 8011480 <rclc_action_find_first_handle_with_result_response+0x14>
 801146e:	68c0      	ldr	r0, [r0, #12]
 8011470:	b910      	cbnz	r0, 8011478 <rclc_action_find_first_handle_with_result_response+0xc>
 8011472:	e005      	b.n	8011480 <rclc_action_find_first_handle_with_result_response+0x14>
 8011474:	6800      	ldr	r0, [r0, #0]
 8011476:	b118      	cbz	r0, 8011480 <rclc_action_find_first_handle_with_result_response+0x14>
 8011478:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801147c:	2b00      	cmp	r3, #0
 801147e:	d0f9      	beq.n	8011474 <rclc_action_find_first_handle_with_result_response+0x8>
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop

08011484 <rclc_action_server_response_goal_request>:
 8011484:	b198      	cbz	r0, 80114ae <rclc_action_server_response_goal_request+0x2a>
 8011486:	b510      	push	{r4, lr}
 8011488:	6844      	ldr	r4, [r0, #4]
 801148a:	b086      	sub	sp, #24
 801148c:	2200      	movs	r2, #0
 801148e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011492:	460b      	mov	r3, r1
 8011494:	9205      	str	r2, [sp, #20]
 8011496:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801149a:	aa03      	add	r2, sp, #12
 801149c:	f104 0010 	add.w	r0, r4, #16
 80114a0:	f88d 300c 	strb.w	r3, [sp, #12]
 80114a4:	f7ff fd4c 	bl	8010f40 <rcl_action_send_goal_response>
 80114a8:	b918      	cbnz	r0, 80114b2 <rclc_action_server_response_goal_request+0x2e>
 80114aa:	b006      	add	sp, #24
 80114ac:	bd10      	pop	{r4, pc}
 80114ae:	200b      	movs	r0, #11
 80114b0:	4770      	bx	lr
 80114b2:	9001      	str	r0, [sp, #4]
 80114b4:	f7f9 fe60 	bl	800b178 <rcutils_reset_error>
 80114b8:	9801      	ldr	r0, [sp, #4]
 80114ba:	b006      	add	sp, #24
 80114bc:	bd10      	pop	{r4, pc}
 80114be:	bf00      	nop

080114c0 <rclc_action_server_goal_cancel_accept>:
 80114c0:	b310      	cbz	r0, 8011508 <rclc_action_server_goal_cancel_accept+0x48>
 80114c2:	b510      	push	{r4, lr}
 80114c4:	b090      	sub	sp, #64	; 0x40
 80114c6:	4604      	mov	r4, r0
 80114c8:	a806      	add	r0, sp, #24
 80114ca:	f7ff feff 	bl	80112cc <rcl_action_get_zero_initialized_cancel_response>
 80114ce:	2300      	movs	r3, #0
 80114d0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80114d4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80114d8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80114dc:	f88d 3018 	strb.w	r3, [sp, #24]
 80114e0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80114e4:	f8cd d01c 	str.w	sp, [sp, #28]
 80114e8:	46ec      	mov	ip, sp
 80114ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80114ee:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8011510 <rclc_action_server_goal_cancel_accept+0x50>
 80114f2:	6860      	ldr	r0, [r4, #4]
 80114f4:	aa06      	add	r2, sp, #24
 80114f6:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80114fa:	3010      	adds	r0, #16
 80114fc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011500:	f7ff fdd4 	bl	80110ac <rcl_action_send_cancel_response>
 8011504:	b010      	add	sp, #64	; 0x40
 8011506:	bd10      	pop	{r4, pc}
 8011508:	200b      	movs	r0, #11
 801150a:	4770      	bx	lr
 801150c:	f3af 8000 	nop.w
 8011510:	00000001 	.word	0x00000001
 8011514:	00000001 	.word	0x00000001

08011518 <rclc_action_server_goal_cancel_reject>:
 8011518:	b082      	sub	sp, #8
 801151a:	b530      	push	{r4, r5, lr}
 801151c:	b08b      	sub	sp, #44	; 0x2c
 801151e:	ac0e      	add	r4, sp, #56	; 0x38
 8011520:	e884 000c 	stmia.w	r4, {r2, r3}
 8011524:	b188      	cbz	r0, 801154a <rclc_action_server_goal_cancel_reject+0x32>
 8011526:	4604      	mov	r4, r0
 8011528:	a801      	add	r0, sp, #4
 801152a:	460d      	mov	r5, r1
 801152c:	f7ff fece 	bl	80112cc <rcl_action_get_zero_initialized_cancel_response>
 8011530:	aa01      	add	r2, sp, #4
 8011532:	a90e      	add	r1, sp, #56	; 0x38
 8011534:	f104 0010 	add.w	r0, r4, #16
 8011538:	f88d 5004 	strb.w	r5, [sp, #4]
 801153c:	f7ff fdb6 	bl	80110ac <rcl_action_send_cancel_response>
 8011540:	b00b      	add	sp, #44	; 0x2c
 8011542:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011546:	b002      	add	sp, #8
 8011548:	4770      	bx	lr
 801154a:	200b      	movs	r0, #11
 801154c:	b00b      	add	sp, #44	; 0x2c
 801154e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011552:	b002      	add	sp, #8
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop

08011558 <__atomic_load_8>:
 8011558:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801155c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011560:	4a15      	ldr	r2, [pc, #84]	; (80115b8 <__atomic_load_8+0x60>)
 8011562:	4b16      	ldr	r3, [pc, #88]	; (80115bc <__atomic_load_8+0x64>)
 8011564:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011568:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801156c:	fb02 f101 	mul.w	r1, r2, r1
 8011570:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011574:	fba3 2301 	umull	r2, r3, r3, r1
 8011578:	091b      	lsrs	r3, r3, #4
 801157a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801157e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011582:	b4d0      	push	{r4, r6, r7}
 8011584:	4c0e      	ldr	r4, [pc, #56]	; (80115c0 <__atomic_load_8+0x68>)
 8011586:	1ac9      	subs	r1, r1, r3
 8011588:	1862      	adds	r2, r4, r1
 801158a:	f04f 0c01 	mov.w	ip, #1
 801158e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011592:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011596:	2e00      	cmp	r6, #0
 8011598:	d1f9      	bne.n	801158e <__atomic_load_8+0x36>
 801159a:	f3bf 8f5b 	dmb	ish
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d1f4      	bne.n	801158e <__atomic_load_8+0x36>
 80115a4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80115a8:	f3bf 8f5b 	dmb	ish
 80115ac:	5463      	strb	r3, [r4, r1]
 80115ae:	4630      	mov	r0, r6
 80115b0:	4639      	mov	r1, r7
 80115b2:	bcd0      	pop	{r4, r6, r7}
 80115b4:	4770      	bx	lr
 80115b6:	bf00      	nop
 80115b8:	27d4eb2d 	.word	0x27d4eb2d
 80115bc:	b21642c9 	.word	0xb21642c9
 80115c0:	2000db8c 	.word	0x2000db8c

080115c4 <__atomic_store_8>:
 80115c4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80115c8:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80115cc:	b570      	push	{r4, r5, r6, lr}
 80115ce:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80115d2:	4c14      	ldr	r4, [pc, #80]	; (8011624 <__atomic_store_8+0x60>)
 80115d4:	4d14      	ldr	r5, [pc, #80]	; (8011628 <__atomic_store_8+0x64>)
 80115d6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80115da:	fb04 f101 	mul.w	r1, r4, r1
 80115de:	4c13      	ldr	r4, [pc, #76]	; (801162c <__atomic_store_8+0x68>)
 80115e0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80115e4:	fba4 4e01 	umull	r4, lr, r4, r1
 80115e8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80115ec:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80115f0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80115f4:	eba1 0e0e 	sub.w	lr, r1, lr
 80115f8:	eb05 0c0e 	add.w	ip, r5, lr
 80115fc:	f04f 0401 	mov.w	r4, #1
 8011600:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011604:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011608:	2e00      	cmp	r6, #0
 801160a:	d1f9      	bne.n	8011600 <__atomic_store_8+0x3c>
 801160c:	f3bf 8f5b 	dmb	ish
 8011610:	b2c9      	uxtb	r1, r1
 8011612:	2900      	cmp	r1, #0
 8011614:	d1f4      	bne.n	8011600 <__atomic_store_8+0x3c>
 8011616:	e9c0 2300 	strd	r2, r3, [r0]
 801161a:	f3bf 8f5b 	dmb	ish
 801161e:	f805 100e 	strb.w	r1, [r5, lr]
 8011622:	bd70      	pop	{r4, r5, r6, pc}
 8011624:	27d4eb2d 	.word	0x27d4eb2d
 8011628:	2000db8c 	.word	0x2000db8c
 801162c:	b21642c9 	.word	0xb21642c9

08011630 <__atomic_exchange_8>:
 8011630:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011634:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8011638:	4916      	ldr	r1, [pc, #88]	; (8011694 <__atomic_exchange_8+0x64>)
 801163a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801163e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011642:	fb01 fc0c 	mul.w	ip, r1, ip
 8011646:	4914      	ldr	r1, [pc, #80]	; (8011698 <__atomic_exchange_8+0x68>)
 8011648:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	4605      	mov	r5, r0
 8011650:	fba1 010c 	umull	r0, r1, r1, ip
 8011654:	0909      	lsrs	r1, r1, #4
 8011656:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801165a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801165e:	4e0f      	ldr	r6, [pc, #60]	; (801169c <__atomic_exchange_8+0x6c>)
 8011660:	ebac 0c01 	sub.w	ip, ip, r1
 8011664:	eb06 010c 	add.w	r1, r6, ip
 8011668:	f04f 0e01 	mov.w	lr, #1
 801166c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011670:	e8c1 ef40 	strexb	r0, lr, [r1]
 8011674:	2800      	cmp	r0, #0
 8011676:	d1f9      	bne.n	801166c <__atomic_exchange_8+0x3c>
 8011678:	f3bf 8f5b 	dmb	ish
 801167c:	b2e4      	uxtb	r4, r4
 801167e:	2c00      	cmp	r4, #0
 8011680:	d1f4      	bne.n	801166c <__atomic_exchange_8+0x3c>
 8011682:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011686:	e9c5 2300 	strd	r2, r3, [r5]
 801168a:	f3bf 8f5b 	dmb	ish
 801168e:	f806 400c 	strb.w	r4, [r6, ip]
 8011692:	bd70      	pop	{r4, r5, r6, pc}
 8011694:	27d4eb2d 	.word	0x27d4eb2d
 8011698:	b21642c9 	.word	0xb21642c9
 801169c:	2000db8c 	.word	0x2000db8c

080116a0 <rcutils_is_directory>:
 80116a0:	2000      	movs	r0, #0
 80116a2:	4770      	bx	lr

080116a4 <rcutils_join_path>:
 80116a4:	b082      	sub	sp, #8
 80116a6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80116aa:	2000      	movs	r0, #0
 80116ac:	b002      	add	sp, #8
 80116ae:	4770      	bx	lr

080116b0 <rcutils_to_native_path>:
 80116b0:	b084      	sub	sp, #16
 80116b2:	a801      	add	r0, sp, #4
 80116b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80116b8:	b004      	add	sp, #16
 80116ba:	2000      	movs	r0, #0
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop

080116c0 <rcutils_string_array_fini>:
 80116c0:	b320      	cbz	r0, 801170c <rcutils_string_array_fini+0x4c>
 80116c2:	b570      	push	{r4, r5, r6, lr}
 80116c4:	4604      	mov	r4, r0
 80116c6:	6840      	ldr	r0, [r0, #4]
 80116c8:	b1d8      	cbz	r0, 8011702 <rcutils_string_array_fini+0x42>
 80116ca:	f104 0008 	add.w	r0, r4, #8
 80116ce:	f7f9 fd17 	bl	800b100 <rcutils_allocator_is_valid>
 80116d2:	b1b8      	cbz	r0, 8011704 <rcutils_string_array_fini+0x44>
 80116d4:	6823      	ldr	r3, [r4, #0]
 80116d6:	b1bb      	cbz	r3, 8011708 <rcutils_string_array_fini+0x48>
 80116d8:	2500      	movs	r5, #0
 80116da:	6860      	ldr	r0, [r4, #4]
 80116dc:	462e      	mov	r6, r5
 80116de:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80116e2:	68e3      	ldr	r3, [r4, #12]
 80116e4:	69a1      	ldr	r1, [r4, #24]
 80116e6:	4798      	blx	r3
 80116e8:	e9d4 3000 	ldrd	r3, r0, [r4]
 80116ec:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80116f0:	3501      	adds	r5, #1
 80116f2:	429d      	cmp	r5, r3
 80116f4:	d3f3      	bcc.n	80116de <rcutils_string_array_fini+0x1e>
 80116f6:	68e3      	ldr	r3, [r4, #12]
 80116f8:	69a1      	ldr	r1, [r4, #24]
 80116fa:	4798      	blx	r3
 80116fc:	2000      	movs	r0, #0
 80116fe:	e9c4 0000 	strd	r0, r0, [r4]
 8011702:	bd70      	pop	{r4, r5, r6, pc}
 8011704:	200b      	movs	r0, #11
 8011706:	bd70      	pop	{r4, r5, r6, pc}
 8011708:	6860      	ldr	r0, [r4, #4]
 801170a:	e7f4      	b.n	80116f6 <rcutils_string_array_fini+0x36>
 801170c:	200b      	movs	r0, #11
 801170e:	4770      	bx	lr

08011710 <rcutils_get_zero_initialized_string_map>:
 8011710:	4b01      	ldr	r3, [pc, #4]	; (8011718 <rcutils_get_zero_initialized_string_map+0x8>)
 8011712:	2000      	movs	r0, #0
 8011714:	6018      	str	r0, [r3, #0]
 8011716:	4770      	bx	lr
 8011718:	2000dba4 	.word	0x2000dba4

0801171c <rcutils_string_map_reserve>:
 801171c:	2800      	cmp	r0, #0
 801171e:	d05f      	beq.n	80117e0 <rcutils_string_map_reserve+0xc4>
 8011720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011724:	460c      	mov	r4, r1
 8011726:	6801      	ldr	r1, [r0, #0]
 8011728:	b082      	sub	sp, #8
 801172a:	4605      	mov	r5, r0
 801172c:	b129      	cbz	r1, 801173a <rcutils_string_map_reserve+0x1e>
 801172e:	68cb      	ldr	r3, [r1, #12]
 8011730:	42a3      	cmp	r3, r4
 8011732:	d906      	bls.n	8011742 <rcutils_string_map_reserve+0x26>
 8011734:	461c      	mov	r4, r3
 8011736:	2900      	cmp	r1, #0
 8011738:	d1f9      	bne.n	801172e <rcutils_string_map_reserve+0x12>
 801173a:	201f      	movs	r0, #31
 801173c:	b002      	add	sp, #8
 801173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011742:	688b      	ldr	r3, [r1, #8]
 8011744:	42a3      	cmp	r3, r4
 8011746:	d047      	beq.n	80117d8 <rcutils_string_map_reserve+0xbc>
 8011748:	6a0e      	ldr	r6, [r1, #32]
 801174a:	2c00      	cmp	r4, #0
 801174c:	d034      	beq.n	80117b8 <rcutils_string_map_reserve+0x9c>
 801174e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8011752:	d243      	bcs.n	80117dc <rcutils_string_map_reserve+0xc0>
 8011754:	00a7      	lsls	r7, r4, #2
 8011756:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801175a:	6808      	ldr	r0, [r1, #0]
 801175c:	4632      	mov	r2, r6
 801175e:	4639      	mov	r1, r7
 8011760:	47c0      	blx	r8
 8011762:	2800      	cmp	r0, #0
 8011764:	d03a      	beq.n	80117dc <rcutils_string_map_reserve+0xc0>
 8011766:	682b      	ldr	r3, [r5, #0]
 8011768:	4632      	mov	r2, r6
 801176a:	6018      	str	r0, [r3, #0]
 801176c:	4639      	mov	r1, r7
 801176e:	6858      	ldr	r0, [r3, #4]
 8011770:	47c0      	blx	r8
 8011772:	2800      	cmp	r0, #0
 8011774:	d032      	beq.n	80117dc <rcutils_string_map_reserve+0xc0>
 8011776:	682d      	ldr	r5, [r5, #0]
 8011778:	68ab      	ldr	r3, [r5, #8]
 801177a:	6068      	str	r0, [r5, #4]
 801177c:	42a3      	cmp	r3, r4
 801177e:	d226      	bcs.n	80117ce <rcutils_string_map_reserve+0xb2>
 8011780:	682a      	ldr	r2, [r5, #0]
 8011782:	eb00 0c07 	add.w	ip, r0, r7
 8011786:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801178a:	45e6      	cmp	lr, ip
 801178c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8011790:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8011794:	d203      	bcs.n	801179e <rcutils_string_map_reserve+0x82>
 8011796:	eb02 0c07 	add.w	ip, r2, r7
 801179a:	4566      	cmp	r6, ip
 801179c:	d322      	bcc.n	80117e4 <rcutils_string_map_reserve+0xc8>
 801179e:	1ae3      	subs	r3, r4, r3
 80117a0:	009a      	lsls	r2, r3, #2
 80117a2:	4670      	mov	r0, lr
 80117a4:	2100      	movs	r1, #0
 80117a6:	9201      	str	r2, [sp, #4]
 80117a8:	f003 fc3e 	bl	8015028 <memset>
 80117ac:	9a01      	ldr	r2, [sp, #4]
 80117ae:	2100      	movs	r1, #0
 80117b0:	4630      	mov	r0, r6
 80117b2:	f003 fc39 	bl	8015028 <memset>
 80117b6:	e00a      	b.n	80117ce <rcutils_string_map_reserve+0xb2>
 80117b8:	694f      	ldr	r7, [r1, #20]
 80117ba:	6808      	ldr	r0, [r1, #0]
 80117bc:	4631      	mov	r1, r6
 80117be:	47b8      	blx	r7
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	4631      	mov	r1, r6
 80117c4:	6858      	ldr	r0, [r3, #4]
 80117c6:	601c      	str	r4, [r3, #0]
 80117c8:	47b8      	blx	r7
 80117ca:	682d      	ldr	r5, [r5, #0]
 80117cc:	606c      	str	r4, [r5, #4]
 80117ce:	2000      	movs	r0, #0
 80117d0:	60ac      	str	r4, [r5, #8]
 80117d2:	b002      	add	sp, #8
 80117d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117d8:	2000      	movs	r0, #0
 80117da:	e7af      	b.n	801173c <rcutils_string_map_reserve+0x20>
 80117dc:	200a      	movs	r0, #10
 80117de:	e7ad      	b.n	801173c <rcutils_string_map_reserve+0x20>
 80117e0:	200b      	movs	r0, #11
 80117e2:	4770      	bx	lr
 80117e4:	1f0b      	subs	r3, r1, #4
 80117e6:	4418      	add	r0, r3
 80117e8:	4413      	add	r3, r2
 80117ea:	3a04      	subs	r2, #4
 80117ec:	4417      	add	r7, r2
 80117ee:	2200      	movs	r2, #0
 80117f0:	f843 2f04 	str.w	r2, [r3, #4]!
 80117f4:	42bb      	cmp	r3, r7
 80117f6:	f840 2f04 	str.w	r2, [r0, #4]!
 80117fa:	d1f9      	bne.n	80117f0 <rcutils_string_map_reserve+0xd4>
 80117fc:	e7e7      	b.n	80117ce <rcutils_string_map_reserve+0xb2>
 80117fe:	bf00      	nop

08011800 <rcutils_string_map_init>:
 8011800:	b082      	sub	sp, #8
 8011802:	b570      	push	{r4, r5, r6, lr}
 8011804:	ac04      	add	r4, sp, #16
 8011806:	e884 000c 	stmia.w	r4, {r2, r3}
 801180a:	b380      	cbz	r0, 801186e <rcutils_string_map_init+0x6e>
 801180c:	6806      	ldr	r6, [r0, #0]
 801180e:	4604      	mov	r4, r0
 8011810:	b12e      	cbz	r6, 801181e <rcutils_string_map_init+0x1e>
 8011812:	251e      	movs	r5, #30
 8011814:	4628      	mov	r0, r5
 8011816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801181a:	b002      	add	sp, #8
 801181c:	4770      	bx	lr
 801181e:	a804      	add	r0, sp, #16
 8011820:	460d      	mov	r5, r1
 8011822:	f7f9 fc6d 	bl	800b100 <rcutils_allocator_is_valid>
 8011826:	b310      	cbz	r0, 801186e <rcutils_string_map_init+0x6e>
 8011828:	9b04      	ldr	r3, [sp, #16]
 801182a:	9908      	ldr	r1, [sp, #32]
 801182c:	2024      	movs	r0, #36	; 0x24
 801182e:	4798      	blx	r3
 8011830:	6020      	str	r0, [r4, #0]
 8011832:	b310      	cbz	r0, 801187a <rcutils_string_map_init+0x7a>
 8011834:	f10d 0e10 	add.w	lr, sp, #16
 8011838:	e9c0 6600 	strd	r6, r6, [r0]
 801183c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8011840:	f100 0c10 	add.w	ip, r0, #16
 8011844:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011848:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801184c:	f8de 3000 	ldr.w	r3, [lr]
 8011850:	f8cc 3000 	str.w	r3, [ip]
 8011854:	4629      	mov	r1, r5
 8011856:	4620      	mov	r0, r4
 8011858:	f7ff ff60 	bl	801171c <rcutils_string_map_reserve>
 801185c:	4605      	mov	r5, r0
 801185e:	2800      	cmp	r0, #0
 8011860:	d0d8      	beq.n	8011814 <rcutils_string_map_init+0x14>
 8011862:	9b05      	ldr	r3, [sp, #20]
 8011864:	9908      	ldr	r1, [sp, #32]
 8011866:	6820      	ldr	r0, [r4, #0]
 8011868:	4798      	blx	r3
 801186a:	6026      	str	r6, [r4, #0]
 801186c:	e7d2      	b.n	8011814 <rcutils_string_map_init+0x14>
 801186e:	250b      	movs	r5, #11
 8011870:	4628      	mov	r0, r5
 8011872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011876:	b002      	add	sp, #8
 8011878:	4770      	bx	lr
 801187a:	250a      	movs	r5, #10
 801187c:	e7ca      	b.n	8011814 <rcutils_string_map_init+0x14>
 801187e:	bf00      	nop

08011880 <rcutils_string_map_fini>:
 8011880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011884:	b082      	sub	sp, #8
 8011886:	2800      	cmp	r0, #0
 8011888:	d03a      	beq.n	8011900 <rcutils_string_map_fini+0x80>
 801188a:	6804      	ldr	r4, [r0, #0]
 801188c:	4606      	mov	r6, r0
 801188e:	2c00      	cmp	r4, #0
 8011890:	d032      	beq.n	80118f8 <rcutils_string_map_fini+0x78>
 8011892:	68a3      	ldr	r3, [r4, #8]
 8011894:	b32b      	cbz	r3, 80118e2 <rcutils_string_map_fini+0x62>
 8011896:	2500      	movs	r5, #0
 8011898:	6822      	ldr	r2, [r4, #0]
 801189a:	462f      	mov	r7, r5
 801189c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80118a0:	b1e0      	cbz	r0, 80118dc <rcutils_string_map_fini+0x5c>
 80118a2:	6a21      	ldr	r1, [r4, #32]
 80118a4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80118a8:	9101      	str	r1, [sp, #4]
 80118aa:	47c0      	blx	r8
 80118ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80118b0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80118b4:	9901      	ldr	r1, [sp, #4]
 80118b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80118ba:	47c0      	blx	r8
 80118bc:	68e3      	ldr	r3, [r4, #12]
 80118be:	6862      	ldr	r2, [r4, #4]
 80118c0:	3b01      	subs	r3, #1
 80118c2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80118c6:	60e3      	str	r3, [r4, #12]
 80118c8:	6834      	ldr	r4, [r6, #0]
 80118ca:	68a3      	ldr	r3, [r4, #8]
 80118cc:	3501      	adds	r5, #1
 80118ce:	429d      	cmp	r5, r3
 80118d0:	d207      	bcs.n	80118e2 <rcutils_string_map_fini+0x62>
 80118d2:	6822      	ldr	r2, [r4, #0]
 80118d4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80118d8:	2800      	cmp	r0, #0
 80118da:	d1e2      	bne.n	80118a2 <rcutils_string_map_fini+0x22>
 80118dc:	3501      	adds	r5, #1
 80118de:	429d      	cmp	r5, r3
 80118e0:	d3dc      	bcc.n	801189c <rcutils_string_map_fini+0x1c>
 80118e2:	2100      	movs	r1, #0
 80118e4:	4630      	mov	r0, r6
 80118e6:	f7ff ff19 	bl	801171c <rcutils_string_map_reserve>
 80118ea:	4604      	mov	r4, r0
 80118ec:	b920      	cbnz	r0, 80118f8 <rcutils_string_map_fini+0x78>
 80118ee:	6830      	ldr	r0, [r6, #0]
 80118f0:	6943      	ldr	r3, [r0, #20]
 80118f2:	6a01      	ldr	r1, [r0, #32]
 80118f4:	4798      	blx	r3
 80118f6:	6034      	str	r4, [r6, #0]
 80118f8:	4620      	mov	r0, r4
 80118fa:	b002      	add	sp, #8
 80118fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011900:	240b      	movs	r4, #11
 8011902:	4620      	mov	r0, r4
 8011904:	b002      	add	sp, #8
 8011906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801190a:	bf00      	nop

0801190c <rcutils_string_map_getn>:
 801190c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011910:	b300      	cbz	r0, 8011954 <rcutils_string_map_getn+0x48>
 8011912:	6807      	ldr	r7, [r0, #0]
 8011914:	b1ff      	cbz	r7, 8011956 <rcutils_string_map_getn+0x4a>
 8011916:	4688      	mov	r8, r1
 8011918:	b1e1      	cbz	r1, 8011954 <rcutils_string_map_getn+0x48>
 801191a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801191e:	683e      	ldr	r6, [r7, #0]
 8011920:	f1ba 0f00 	cmp.w	sl, #0
 8011924:	d016      	beq.n	8011954 <rcutils_string_map_getn+0x48>
 8011926:	4691      	mov	r9, r2
 8011928:	3e04      	subs	r6, #4
 801192a:	2400      	movs	r4, #0
 801192c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8011930:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011934:	4628      	mov	r0, r5
 8011936:	3401      	adds	r4, #1
 8011938:	b155      	cbz	r5, 8011950 <rcutils_string_map_getn+0x44>
 801193a:	f7ee fc5b 	bl	80001f4 <strlen>
 801193e:	4548      	cmp	r0, r9
 8011940:	4602      	mov	r2, r0
 8011942:	4629      	mov	r1, r5
 8011944:	bf38      	it	cc
 8011946:	464a      	movcc	r2, r9
 8011948:	4640      	mov	r0, r8
 801194a:	f003 fb82 	bl	8015052 <strncmp>
 801194e:	b128      	cbz	r0, 801195c <rcutils_string_map_getn+0x50>
 8011950:	45a2      	cmp	sl, r4
 8011952:	d1eb      	bne.n	801192c <rcutils_string_map_getn+0x20>
 8011954:	2700      	movs	r7, #0
 8011956:	4638      	mov	r0, r7
 8011958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f853 700b 	ldr.w	r7, [r3, fp]
 8011962:	4638      	mov	r0, r7
 8011964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011968 <rmw_get_zero_initialized_context>:
 8011968:	b510      	push	{r4, lr}
 801196a:	4604      	mov	r4, r0
 801196c:	3010      	adds	r0, #16
 801196e:	f000 f80b 	bl	8011988 <rmw_get_zero_initialized_init_options>
 8011972:	2300      	movs	r3, #0
 8011974:	2000      	movs	r0, #0
 8011976:	2100      	movs	r1, #0
 8011978:	e9c4 0100 	strd	r0, r1, [r4]
 801197c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011980:	60a3      	str	r3, [r4, #8]
 8011982:	4620      	mov	r0, r4
 8011984:	bd10      	pop	{r4, pc}
 8011986:	bf00      	nop

08011988 <rmw_get_zero_initialized_init_options>:
 8011988:	b510      	push	{r4, lr}
 801198a:	2238      	movs	r2, #56	; 0x38
 801198c:	4604      	mov	r4, r0
 801198e:	2100      	movs	r1, #0
 8011990:	f003 fb4a 	bl	8015028 <memset>
 8011994:	f104 0010 	add.w	r0, r4, #16
 8011998:	f000 f806 	bl	80119a8 <rmw_get_default_security_options>
 801199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119a0:	60e3      	str	r3, [r4, #12]
 80119a2:	4620      	mov	r0, r4
 80119a4:	bd10      	pop	{r4, pc}
 80119a6:	bf00      	nop

080119a8 <rmw_get_default_security_options>:
 80119a8:	2200      	movs	r2, #0
 80119aa:	7002      	strb	r2, [r0, #0]
 80119ac:	6042      	str	r2, [r0, #4]
 80119ae:	4770      	bx	lr

080119b0 <rmw_time_equal>:
 80119b0:	b4f0      	push	{r4, r5, r6, r7}
 80119b2:	b084      	sub	sp, #16
 80119b4:	ac04      	add	r4, sp, #16
 80119b6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80119ba:	4603      	mov	r3, r0
 80119bc:	4924      	ldr	r1, [pc, #144]	; (8011a50 <rmw_time_equal+0xa0>)
 80119be:	9e03      	ldr	r6, [sp, #12]
 80119c0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80119c4:	2202      	movs	r2, #2
 80119c6:	4299      	cmp	r1, r3
 80119c8:	41aa      	sbcs	r2, r5
 80119ca:	d330      	bcc.n	8011a2e <rmw_time_equal+0x7e>
 80119cc:	4c21      	ldr	r4, [pc, #132]	; (8011a54 <rmw_time_equal+0xa4>)
 80119ce:	fba3 3204 	umull	r3, r2, r3, r4
 80119d2:	fb04 2205 	mla	r2, r4, r5, r2
 80119d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80119da:	43dd      	mvns	r5, r3
 80119dc:	1a8c      	subs	r4, r1, r2
 80119de:	4285      	cmp	r5, r0
 80119e0:	41b4      	sbcs	r4, r6
 80119e2:	d332      	bcc.n	8011a4a <rmw_time_equal+0x9a>
 80119e4:	eb10 0c03 	adds.w	ip, r0, r3
 80119e8:	eb42 0106 	adc.w	r1, r2, r6
 80119ec:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80119f0:	4817      	ldr	r0, [pc, #92]	; (8011a50 <rmw_time_equal+0xa0>)
 80119f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80119f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80119f6:	2202      	movs	r2, #2
 80119f8:	4298      	cmp	r0, r3
 80119fa:	41b2      	sbcs	r2, r6
 80119fc:	d31c      	bcc.n	8011a38 <rmw_time_equal+0x88>
 80119fe:	4c15      	ldr	r4, [pc, #84]	; (8011a54 <rmw_time_equal+0xa4>)
 8011a00:	fba3 3204 	umull	r3, r2, r3, r4
 8011a04:	fb04 2206 	mla	r2, r4, r6, r2
 8011a08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011a0c:	43de      	mvns	r6, r3
 8011a0e:	1a84      	subs	r4, r0, r2
 8011a10:	42ae      	cmp	r6, r5
 8011a12:	41bc      	sbcs	r4, r7
 8011a14:	d315      	bcc.n	8011a42 <rmw_time_equal+0x92>
 8011a16:	195b      	adds	r3, r3, r5
 8011a18:	eb42 0207 	adc.w	r2, r2, r7
 8011a1c:	428a      	cmp	r2, r1
 8011a1e:	bf08      	it	eq
 8011a20:	4563      	cmpeq	r3, ip
 8011a22:	bf0c      	ite	eq
 8011a24:	2001      	moveq	r0, #1
 8011a26:	2000      	movne	r0, #0
 8011a28:	b004      	add	sp, #16
 8011a2a:	bcf0      	pop	{r4, r5, r6, r7}
 8011a2c:	4770      	bx	lr
 8011a2e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011a32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011a36:	e7d9      	b.n	80119ec <rmw_time_equal+0x3c>
 8011a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8011a40:	e7ec      	b.n	8011a1c <rmw_time_equal+0x6c>
 8011a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a46:	4602      	mov	r2, r0
 8011a48:	e7e8      	b.n	8011a1c <rmw_time_equal+0x6c>
 8011a4a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011a4e:	e7cd      	b.n	80119ec <rmw_time_equal+0x3c>
 8011a50:	25c17d04 	.word	0x25c17d04
 8011a54:	3b9aca00 	.word	0x3b9aca00

08011a58 <rmw_time_total_nsec>:
 8011a58:	b470      	push	{r4, r5, r6}
 8011a5a:	b085      	sub	sp, #20
 8011a5c:	ac04      	add	r4, sp, #16
 8011a5e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011a62:	4603      	mov	r3, r0
 8011a64:	4912      	ldr	r1, [pc, #72]	; (8011ab0 <rmw_time_total_nsec+0x58>)
 8011a66:	9e03      	ldr	r6, [sp, #12]
 8011a68:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011a6c:	2202      	movs	r2, #2
 8011a6e:	4299      	cmp	r1, r3
 8011a70:	41aa      	sbcs	r2, r5
 8011a72:	d311      	bcc.n	8011a98 <rmw_time_total_nsec+0x40>
 8011a74:	4c0f      	ldr	r4, [pc, #60]	; (8011ab4 <rmw_time_total_nsec+0x5c>)
 8011a76:	fba3 3204 	umull	r3, r2, r3, r4
 8011a7a:	fb04 2205 	mla	r2, r4, r5, r2
 8011a7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011a82:	43dd      	mvns	r5, r3
 8011a84:	1a8c      	subs	r4, r1, r2
 8011a86:	4285      	cmp	r5, r0
 8011a88:	41b4      	sbcs	r4, r6
 8011a8a:	d30c      	bcc.n	8011aa6 <rmw_time_total_nsec+0x4e>
 8011a8c:	1818      	adds	r0, r3, r0
 8011a8e:	eb42 0106 	adc.w	r1, r2, r6
 8011a92:	b005      	add	sp, #20
 8011a94:	bc70      	pop	{r4, r5, r6}
 8011a96:	4770      	bx	lr
 8011a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011aa0:	b005      	add	sp, #20
 8011aa2:	bc70      	pop	{r4, r5, r6}
 8011aa4:	4770      	bx	lr
 8011aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011aaa:	b005      	add	sp, #20
 8011aac:	bc70      	pop	{r4, r5, r6}
 8011aae:	4770      	bx	lr
 8011ab0:	25c17d04 	.word	0x25c17d04
 8011ab4:	3b9aca00 	.word	0x3b9aca00

08011ab8 <rmw_validate_full_topic_name>:
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	d057      	beq.n	8011b6c <rmw_validate_full_topic_name+0xb4>
 8011abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac0:	460d      	mov	r5, r1
 8011ac2:	2900      	cmp	r1, #0
 8011ac4:	d054      	beq.n	8011b70 <rmw_validate_full_topic_name+0xb8>
 8011ac6:	4616      	mov	r6, r2
 8011ac8:	4604      	mov	r4, r0
 8011aca:	f7ee fb93 	bl	80001f4 <strlen>
 8011ace:	b148      	cbz	r0, 8011ae4 <rmw_validate_full_topic_name+0x2c>
 8011ad0:	7823      	ldrb	r3, [r4, #0]
 8011ad2:	2b2f      	cmp	r3, #47	; 0x2f
 8011ad4:	d00d      	beq.n	8011af2 <rmw_validate_full_topic_name+0x3a>
 8011ad6:	2302      	movs	r3, #2
 8011ad8:	602b      	str	r3, [r5, #0]
 8011ada:	b13e      	cbz	r6, 8011aec <rmw_validate_full_topic_name+0x34>
 8011adc:	2000      	movs	r0, #0
 8011ade:	6030      	str	r0, [r6, #0]
 8011ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	602b      	str	r3, [r5, #0]
 8011ae8:	2e00      	cmp	r6, #0
 8011aea:	d1f7      	bne.n	8011adc <rmw_validate_full_topic_name+0x24>
 8011aec:	2000      	movs	r0, #0
 8011aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af2:	1e43      	subs	r3, r0, #1
 8011af4:	5ce2      	ldrb	r2, [r4, r3]
 8011af6:	2a2f      	cmp	r2, #47	; 0x2f
 8011af8:	d03c      	beq.n	8011b74 <rmw_validate_full_topic_name+0xbc>
 8011afa:	1e63      	subs	r3, r4, #1
 8011afc:	eb03 0800 	add.w	r8, r3, r0
 8011b00:	f1c4 0e01 	rsb	lr, r4, #1
 8011b04:	eb0e 0703 	add.w	r7, lr, r3
 8011b08:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011b0c:	f021 0220 	bic.w	r2, r1, #32
 8011b10:	3a41      	subs	r2, #65	; 0x41
 8011b12:	2a19      	cmp	r2, #25
 8011b14:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8011b18:	d90b      	bls.n	8011b32 <rmw_validate_full_topic_name+0x7a>
 8011b1a:	295f      	cmp	r1, #95	; 0x5f
 8011b1c:	d009      	beq.n	8011b32 <rmw_validate_full_topic_name+0x7a>
 8011b1e:	f1bc 0f0a 	cmp.w	ip, #10
 8011b22:	d906      	bls.n	8011b32 <rmw_validate_full_topic_name+0x7a>
 8011b24:	2304      	movs	r3, #4
 8011b26:	602b      	str	r3, [r5, #0]
 8011b28:	2e00      	cmp	r6, #0
 8011b2a:	d0df      	beq.n	8011aec <rmw_validate_full_topic_name+0x34>
 8011b2c:	6037      	str	r7, [r6, #0]
 8011b2e:	2000      	movs	r0, #0
 8011b30:	e7d6      	b.n	8011ae0 <rmw_validate_full_topic_name+0x28>
 8011b32:	4543      	cmp	r3, r8
 8011b34:	d1e6      	bne.n	8011b04 <rmw_validate_full_topic_name+0x4c>
 8011b36:	4f1a      	ldr	r7, [pc, #104]	; (8011ba0 <rmw_validate_full_topic_name+0xe8>)
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e004      	b.n	8011b46 <rmw_validate_full_topic_name+0x8e>
 8011b3c:	4298      	cmp	r0, r3
 8011b3e:	f104 0401 	add.w	r4, r4, #1
 8011b42:	d91c      	bls.n	8011b7e <rmw_validate_full_topic_name+0xc6>
 8011b44:	4613      	mov	r3, r2
 8011b46:	4298      	cmp	r0, r3
 8011b48:	f103 0201 	add.w	r2, r3, #1
 8011b4c:	d0f6      	beq.n	8011b3c <rmw_validate_full_topic_name+0x84>
 8011b4e:	7821      	ldrb	r1, [r4, #0]
 8011b50:	292f      	cmp	r1, #47	; 0x2f
 8011b52:	d1f3      	bne.n	8011b3c <rmw_validate_full_topic_name+0x84>
 8011b54:	7861      	ldrb	r1, [r4, #1]
 8011b56:	292f      	cmp	r1, #47	; 0x2f
 8011b58:	d01c      	beq.n	8011b94 <rmw_validate_full_topic_name+0xdc>
 8011b5a:	5dc9      	ldrb	r1, [r1, r7]
 8011b5c:	0749      	lsls	r1, r1, #29
 8011b5e:	d5ed      	bpl.n	8011b3c <rmw_validate_full_topic_name+0x84>
 8011b60:	2206      	movs	r2, #6
 8011b62:	602a      	str	r2, [r5, #0]
 8011b64:	2e00      	cmp	r6, #0
 8011b66:	d0c1      	beq.n	8011aec <rmw_validate_full_topic_name+0x34>
 8011b68:	6033      	str	r3, [r6, #0]
 8011b6a:	e7bf      	b.n	8011aec <rmw_validate_full_topic_name+0x34>
 8011b6c:	200b      	movs	r0, #11
 8011b6e:	4770      	bx	lr
 8011b70:	200b      	movs	r0, #11
 8011b72:	e7b5      	b.n	8011ae0 <rmw_validate_full_topic_name+0x28>
 8011b74:	2203      	movs	r2, #3
 8011b76:	602a      	str	r2, [r5, #0]
 8011b78:	2e00      	cmp	r6, #0
 8011b7a:	d1f5      	bne.n	8011b68 <rmw_validate_full_topic_name+0xb0>
 8011b7c:	e7b6      	b.n	8011aec <rmw_validate_full_topic_name+0x34>
 8011b7e:	28f7      	cmp	r0, #247	; 0xf7
 8011b80:	d802      	bhi.n	8011b88 <rmw_validate_full_topic_name+0xd0>
 8011b82:	2000      	movs	r0, #0
 8011b84:	6028      	str	r0, [r5, #0]
 8011b86:	e7ab      	b.n	8011ae0 <rmw_validate_full_topic_name+0x28>
 8011b88:	2307      	movs	r3, #7
 8011b8a:	602b      	str	r3, [r5, #0]
 8011b8c:	2e00      	cmp	r6, #0
 8011b8e:	d0ad      	beq.n	8011aec <rmw_validate_full_topic_name+0x34>
 8011b90:	23f6      	movs	r3, #246	; 0xf6
 8011b92:	e7e9      	b.n	8011b68 <rmw_validate_full_topic_name+0xb0>
 8011b94:	2205      	movs	r2, #5
 8011b96:	602a      	str	r2, [r5, #0]
 8011b98:	2e00      	cmp	r6, #0
 8011b9a:	d1e5      	bne.n	8011b68 <rmw_validate_full_topic_name+0xb0>
 8011b9c:	e7a6      	b.n	8011aec <rmw_validate_full_topic_name+0x34>
 8011b9e:	bf00      	nop
 8011ba0:	08016bb0 	.word	0x08016bb0

08011ba4 <get_memory>:
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	6840      	ldr	r0, [r0, #4]
 8011ba8:	b158      	cbz	r0, 8011bc2 <get_memory+0x1e>
 8011baa:	6842      	ldr	r2, [r0, #4]
 8011bac:	605a      	str	r2, [r3, #4]
 8011bae:	b10a      	cbz	r2, 8011bb4 <get_memory+0x10>
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	6011      	str	r1, [r2, #0]
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	6042      	str	r2, [r0, #4]
 8011bb8:	b102      	cbz	r2, 8011bbc <get_memory+0x18>
 8011bba:	6010      	str	r0, [r2, #0]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	6002      	str	r2, [r0, #0]
 8011bc0:	6018      	str	r0, [r3, #0]
 8011bc2:	4770      	bx	lr

08011bc4 <put_memory>:
 8011bc4:	680b      	ldr	r3, [r1, #0]
 8011bc6:	b10b      	cbz	r3, 8011bcc <put_memory+0x8>
 8011bc8:	684a      	ldr	r2, [r1, #4]
 8011bca:	605a      	str	r2, [r3, #4]
 8011bcc:	684a      	ldr	r2, [r1, #4]
 8011bce:	b102      	cbz	r2, 8011bd2 <put_memory+0xe>
 8011bd0:	6013      	str	r3, [r2, #0]
 8011bd2:	6803      	ldr	r3, [r0, #0]
 8011bd4:	428b      	cmp	r3, r1
 8011bd6:	6843      	ldr	r3, [r0, #4]
 8011bd8:	bf08      	it	eq
 8011bda:	6002      	streq	r2, [r0, #0]
 8011bdc:	604b      	str	r3, [r1, #4]
 8011bde:	b103      	cbz	r3, 8011be2 <put_memory+0x1e>
 8011be0:	6019      	str	r1, [r3, #0]
 8011be2:	2300      	movs	r3, #0
 8011be4:	600b      	str	r3, [r1, #0]
 8011be6:	6041      	str	r1, [r0, #4]
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop

08011bec <rmw_destroy_client>:
 8011bec:	b570      	push	{r4, r5, r6, lr}
 8011bee:	b128      	cbz	r0, 8011bfc <rmw_destroy_client+0x10>
 8011bf0:	4604      	mov	r4, r0
 8011bf2:	6800      	ldr	r0, [r0, #0]
 8011bf4:	460d      	mov	r5, r1
 8011bf6:	f7fa fc31 	bl	800c45c <is_uxrce_rmw_identifier_valid>
 8011bfa:	b910      	cbnz	r0, 8011c02 <rmw_destroy_client+0x16>
 8011bfc:	2401      	movs	r4, #1
 8011bfe:	4620      	mov	r0, r4
 8011c00:	bd70      	pop	{r4, r5, r6, pc}
 8011c02:	6863      	ldr	r3, [r4, #4]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d0f9      	beq.n	8011bfc <rmw_destroy_client+0x10>
 8011c08:	2d00      	cmp	r5, #0
 8011c0a:	d0f7      	beq.n	8011bfc <rmw_destroy_client+0x10>
 8011c0c:	6828      	ldr	r0, [r5, #0]
 8011c0e:	f7fa fc25 	bl	800c45c <is_uxrce_rmw_identifier_valid>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d0f2      	beq.n	8011bfc <rmw_destroy_client+0x10>
 8011c16:	686e      	ldr	r6, [r5, #4]
 8011c18:	2e00      	cmp	r6, #0
 8011c1a:	d0ef      	beq.n	8011bfc <rmw_destroy_client+0x10>
 8011c1c:	6864      	ldr	r4, [r4, #4]
 8011c1e:	6932      	ldr	r2, [r6, #16]
 8011c20:	6920      	ldr	r0, [r4, #16]
 8011c22:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011c26:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011c2a:	6819      	ldr	r1, [r3, #0]
 8011c2c:	f7fa fe5a 	bl	800c8e4 <uxr_buffer_cancel_data>
 8011c30:	4602      	mov	r2, r0
 8011c32:	6920      	ldr	r0, [r4, #16]
 8011c34:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011c38:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011c3c:	f7fa fb8e 	bl	800c35c <run_xrce_session>
 8011c40:	6920      	ldr	r0, [r4, #16]
 8011c42:	6932      	ldr	r2, [r6, #16]
 8011c44:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011c48:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011c4c:	6819      	ldr	r1, [r3, #0]
 8011c4e:	f7fa fc83 	bl	800c558 <uxr_buffer_delete_entity>
 8011c52:	4602      	mov	r2, r0
 8011c54:	6920      	ldr	r0, [r4, #16]
 8011c56:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011c5a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011c5e:	f7fa fb7d 	bl	800c35c <run_xrce_session>
 8011c62:	2800      	cmp	r0, #0
 8011c64:	4628      	mov	r0, r5
 8011c66:	bf14      	ite	ne
 8011c68:	2400      	movne	r4, #0
 8011c6a:	2402      	moveq	r4, #2
 8011c6c:	f7fa fa60 	bl	800c130 <rmw_uxrce_fini_client_memory>
 8011c70:	e7c5      	b.n	8011bfe <rmw_destroy_client+0x12>
 8011c72:	bf00      	nop

08011c74 <rmw_get_implementation_identifier>:
 8011c74:	4b01      	ldr	r3, [pc, #4]	; (8011c7c <rmw_get_implementation_identifier+0x8>)
 8011c76:	6818      	ldr	r0, [r3, #0]
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	08016908 	.word	0x08016908

08011c80 <rmw_create_guard_condition>:
 8011c80:	b538      	push	{r3, r4, r5, lr}
 8011c82:	4605      	mov	r5, r0
 8011c84:	4807      	ldr	r0, [pc, #28]	; (8011ca4 <rmw_create_guard_condition+0x24>)
 8011c86:	f7ff ff8d 	bl	8011ba4 <get_memory>
 8011c8a:	b148      	cbz	r0, 8011ca0 <rmw_create_guard_condition+0x20>
 8011c8c:	6884      	ldr	r4, [r0, #8]
 8011c8e:	2300      	movs	r3, #0
 8011c90:	7423      	strb	r3, [r4, #16]
 8011c92:	61e5      	str	r5, [r4, #28]
 8011c94:	f7ff ffee 	bl	8011c74 <rmw_get_implementation_identifier>
 8011c98:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8011c9c:	f104 0014 	add.w	r0, r4, #20
 8011ca0:	bd38      	pop	{r3, r4, r5, pc}
 8011ca2:	bf00      	nop
 8011ca4:	2000dad4 	.word	0x2000dad4

08011ca8 <rmw_destroy_guard_condition>:
 8011ca8:	b508      	push	{r3, lr}
 8011caa:	4b08      	ldr	r3, [pc, #32]	; (8011ccc <rmw_destroy_guard_condition+0x24>)
 8011cac:	6819      	ldr	r1, [r3, #0]
 8011cae:	b911      	cbnz	r1, 8011cb6 <rmw_destroy_guard_condition+0xe>
 8011cb0:	e00a      	b.n	8011cc8 <rmw_destroy_guard_condition+0x20>
 8011cb2:	6849      	ldr	r1, [r1, #4]
 8011cb4:	b141      	cbz	r1, 8011cc8 <rmw_destroy_guard_condition+0x20>
 8011cb6:	688b      	ldr	r3, [r1, #8]
 8011cb8:	3314      	adds	r3, #20
 8011cba:	4298      	cmp	r0, r3
 8011cbc:	d1f9      	bne.n	8011cb2 <rmw_destroy_guard_condition+0xa>
 8011cbe:	4803      	ldr	r0, [pc, #12]	; (8011ccc <rmw_destroy_guard_condition+0x24>)
 8011cc0:	f7ff ff80 	bl	8011bc4 <put_memory>
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	bd08      	pop	{r3, pc}
 8011cc8:	2001      	movs	r0, #1
 8011cca:	bd08      	pop	{r3, pc}
 8011ccc:	2000dad4 	.word	0x2000dad4

08011cd0 <rmw_init_options_init>:
 8011cd0:	b084      	sub	sp, #16
 8011cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cd4:	b083      	sub	sp, #12
 8011cd6:	ad09      	add	r5, sp, #36	; 0x24
 8011cd8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011cdc:	b130      	cbz	r0, 8011cec <rmw_init_options_init+0x1c>
 8011cde:	4604      	mov	r4, r0
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	f7f9 fa0d 	bl	800b100 <rcutils_allocator_is_valid>
 8011ce6:	b108      	cbz	r0, 8011cec <rmw_init_options_init+0x1c>
 8011ce8:	68a6      	ldr	r6, [r4, #8]
 8011cea:	b12e      	cbz	r6, 8011cf8 <rmw_init_options_init+0x28>
 8011cec:	200b      	movs	r0, #11
 8011cee:	b003      	add	sp, #12
 8011cf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011cf4:	b004      	add	sp, #16
 8011cf6:	4770      	bx	lr
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	e9c4 2300 	strd	r2, r3, [r4]
 8011d00:	4b22      	ldr	r3, [pc, #136]	; (8011d8c <rmw_init_options_init+0xbc>)
 8011d02:	f8df e098 	ldr.w	lr, [pc, #152]	; 8011d9c <rmw_init_options_init+0xcc>
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	60a3      	str	r3, [r4, #8]
 8011d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d0c:	f104 0c20 	add.w	ip, r4, #32
 8011d10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d14:	466f      	mov	r7, sp
 8011d16:	682b      	ldr	r3, [r5, #0]
 8011d18:	f8cc 3000 	str.w	r3, [ip]
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8011d22:	60e6      	str	r6, [r4, #12]
 8011d24:	f7ff fe40 	bl	80119a8 <rmw_get_default_security_options>
 8011d28:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011d2c:	f104 0310 	add.w	r3, r4, #16
 8011d30:	e883 0003 	stmia.w	r3, {r0, r1}
 8011d34:	2203      	movs	r2, #3
 8011d36:	4816      	ldr	r0, [pc, #88]	; (8011d90 <rmw_init_options_init+0xc0>)
 8011d38:	4916      	ldr	r1, [pc, #88]	; (8011d94 <rmw_init_options_init+0xc4>)
 8011d3a:	7626      	strb	r6, [r4, #24]
 8011d3c:	f7fa f938 	bl	800bfb0 <rmw_uxrce_init_init_options_impl_memory>
 8011d40:	4813      	ldr	r0, [pc, #76]	; (8011d90 <rmw_init_options_init+0xc0>)
 8011d42:	f7ff ff2f 	bl	8011ba4 <get_memory>
 8011d46:	b1f0      	cbz	r0, 8011d86 <rmw_init_options_init+0xb6>
 8011d48:	4a13      	ldr	r2, [pc, #76]	; (8011d98 <rmw_init_options_init+0xc8>)
 8011d4a:	6883      	ldr	r3, [r0, #8]
 8011d4c:	6851      	ldr	r1, [r2, #4]
 8011d4e:	7810      	ldrb	r0, [r2, #0]
 8011d50:	6363      	str	r3, [r4, #52]	; 0x34
 8011d52:	7418      	strb	r0, [r3, #16]
 8011d54:	6159      	str	r1, [r3, #20]
 8011d56:	68d1      	ldr	r1, [r2, #12]
 8011d58:	61d9      	str	r1, [r3, #28]
 8011d5a:	6911      	ldr	r1, [r2, #16]
 8011d5c:	6219      	str	r1, [r3, #32]
 8011d5e:	6951      	ldr	r1, [r2, #20]
 8011d60:	6892      	ldr	r2, [r2, #8]
 8011d62:	619a      	str	r2, [r3, #24]
 8011d64:	6259      	str	r1, [r3, #36]	; 0x24
 8011d66:	f7fc f8df 	bl	800df28 <uxr_nanos>
 8011d6a:	f002 fe8f 	bl	8014a8c <srand>
 8011d6e:	f002 febb 	bl	8014ae8 <rand>
 8011d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d74:	6298      	str	r0, [r3, #40]	; 0x28
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d0f9      	beq.n	8011d6e <rmw_init_options_init+0x9e>
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	b003      	add	sp, #12
 8011d7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011d82:	b004      	add	sp, #16
 8011d84:	4770      	bx	lr
 8011d86:	2001      	movs	r0, #1
 8011d88:	e7b1      	b.n	8011cee <rmw_init_options_init+0x1e>
 8011d8a:	bf00      	nop
 8011d8c:	08016908 	.word	0x08016908
 8011d90:	2000dae4 	.word	0x2000dae4
 8011d94:	20009380 	.word	0x20009380
 8011d98:	200091cc 	.word	0x200091cc
 8011d9c:	08016218 	.word	0x08016218

08011da0 <rmw_init_options_copy>:
 8011da0:	b570      	push	{r4, r5, r6, lr}
 8011da2:	b158      	cbz	r0, 8011dbc <rmw_init_options_copy+0x1c>
 8011da4:	460d      	mov	r5, r1
 8011da6:	b149      	cbz	r1, 8011dbc <rmw_init_options_copy+0x1c>
 8011da8:	4604      	mov	r4, r0
 8011daa:	6880      	ldr	r0, [r0, #8]
 8011dac:	b120      	cbz	r0, 8011db8 <rmw_init_options_copy+0x18>
 8011dae:	4b1e      	ldr	r3, [pc, #120]	; (8011e28 <rmw_init_options_copy+0x88>)
 8011db0:	6819      	ldr	r1, [r3, #0]
 8011db2:	f7ee fa15 	bl	80001e0 <strcmp>
 8011db6:	bb90      	cbnz	r0, 8011e1e <rmw_init_options_copy+0x7e>
 8011db8:	68ab      	ldr	r3, [r5, #8]
 8011dba:	b113      	cbz	r3, 8011dc2 <rmw_init_options_copy+0x22>
 8011dbc:	250b      	movs	r5, #11
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
 8011dc2:	4623      	mov	r3, r4
 8011dc4:	462a      	mov	r2, r5
 8011dc6:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8011dca:	f8d3 c000 	ldr.w	ip, [r3]
 8011dce:	6858      	ldr	r0, [r3, #4]
 8011dd0:	6899      	ldr	r1, [r3, #8]
 8011dd2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8011dd6:	f8c2 e00c 	str.w	lr, [r2, #12]
 8011dda:	3310      	adds	r3, #16
 8011ddc:	42b3      	cmp	r3, r6
 8011dde:	f8c2 c000 	str.w	ip, [r2]
 8011de2:	6050      	str	r0, [r2, #4]
 8011de4:	6091      	str	r1, [r2, #8]
 8011de6:	f102 0210 	add.w	r2, r2, #16
 8011dea:	d1ee      	bne.n	8011dca <rmw_init_options_copy+0x2a>
 8011dec:	6819      	ldr	r1, [r3, #0]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	480e      	ldr	r0, [pc, #56]	; (8011e2c <rmw_init_options_copy+0x8c>)
 8011df2:	6053      	str	r3, [r2, #4]
 8011df4:	6011      	str	r1, [r2, #0]
 8011df6:	f7ff fed5 	bl	8011ba4 <get_memory>
 8011dfa:	b198      	cbz	r0, 8011e24 <rmw_init_options_copy+0x84>
 8011dfc:	6883      	ldr	r3, [r0, #8]
 8011dfe:	636b      	str	r3, [r5, #52]	; 0x34
 8011e00:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011e02:	f102 0c10 	add.w	ip, r2, #16
 8011e06:	f103 0410 	add.w	r4, r3, #16
 8011e0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e10:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011e14:	2500      	movs	r5, #0
 8011e16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	bd70      	pop	{r4, r5, r6, pc}
 8011e1e:	250c      	movs	r5, #12
 8011e20:	4628      	mov	r0, r5
 8011e22:	bd70      	pop	{r4, r5, r6, pc}
 8011e24:	2501      	movs	r5, #1
 8011e26:	e7ca      	b.n	8011dbe <rmw_init_options_copy+0x1e>
 8011e28:	08016908 	.word	0x08016908
 8011e2c:	2000dae4 	.word	0x2000dae4

08011e30 <rmw_init_options_fini>:
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d03d      	beq.n	8011eb0 <rmw_init_options_fini+0x80>
 8011e34:	b510      	push	{r4, lr}
 8011e36:	4604      	mov	r4, r0
 8011e38:	b08e      	sub	sp, #56	; 0x38
 8011e3a:	3020      	adds	r0, #32
 8011e3c:	f7f9 f960 	bl	800b100 <rcutils_allocator_is_valid>
 8011e40:	b360      	cbz	r0, 8011e9c <rmw_init_options_fini+0x6c>
 8011e42:	68a0      	ldr	r0, [r4, #8]
 8011e44:	b120      	cbz	r0, 8011e50 <rmw_init_options_fini+0x20>
 8011e46:	4b1c      	ldr	r3, [pc, #112]	; (8011eb8 <rmw_init_options_fini+0x88>)
 8011e48:	6819      	ldr	r1, [r3, #0]
 8011e4a:	f7ee f9c9 	bl	80001e0 <strcmp>
 8011e4e:	bb68      	cbnz	r0, 8011eac <rmw_init_options_fini+0x7c>
 8011e50:	4b1a      	ldr	r3, [pc, #104]	; (8011ebc <rmw_init_options_fini+0x8c>)
 8011e52:	6819      	ldr	r1, [r3, #0]
 8011e54:	b331      	cbz	r1, 8011ea4 <rmw_init_options_fini+0x74>
 8011e56:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011e58:	e001      	b.n	8011e5e <rmw_init_options_fini+0x2e>
 8011e5a:	6849      	ldr	r1, [r1, #4]
 8011e5c:	b311      	cbz	r1, 8011ea4 <rmw_init_options_fini+0x74>
 8011e5e:	688b      	ldr	r3, [r1, #8]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d1fa      	bne.n	8011e5a <rmw_init_options_fini+0x2a>
 8011e64:	4815      	ldr	r0, [pc, #84]	; (8011ebc <rmw_init_options_fini+0x8c>)
 8011e66:	f7ff fead 	bl	8011bc4 <put_memory>
 8011e6a:	4668      	mov	r0, sp
 8011e6c:	f7ff fd8c 	bl	8011988 <rmw_get_zero_initialized_init_options>
 8011e70:	46ee      	mov	lr, sp
 8011e72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e76:	46a4      	mov	ip, r4
 8011e78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e8c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011e90:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011e94:	2300      	movs	r3, #0
 8011e96:	4618      	mov	r0, r3
 8011e98:	b00e      	add	sp, #56	; 0x38
 8011e9a:	bd10      	pop	{r4, pc}
 8011e9c:	230b      	movs	r3, #11
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	b00e      	add	sp, #56	; 0x38
 8011ea2:	bd10      	pop	{r4, pc}
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	b00e      	add	sp, #56	; 0x38
 8011eaa:	bd10      	pop	{r4, pc}
 8011eac:	230c      	movs	r3, #12
 8011eae:	e7f2      	b.n	8011e96 <rmw_init_options_fini+0x66>
 8011eb0:	230b      	movs	r3, #11
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	4770      	bx	lr
 8011eb6:	bf00      	nop
 8011eb8:	08016908 	.word	0x08016908
 8011ebc:	2000dae4 	.word	0x2000dae4

08011ec0 <rmw_init>:
 8011ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ec4:	b083      	sub	sp, #12
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	f000 80d3 	beq.w	8012072 <rmw_init+0x1b2>
 8011ecc:	460e      	mov	r6, r1
 8011ece:	2900      	cmp	r1, #0
 8011ed0:	f000 80cf 	beq.w	8012072 <rmw_init+0x1b2>
 8011ed4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011ed6:	4605      	mov	r5, r0
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	f000 80ca 	beq.w	8012072 <rmw_init+0x1b2>
 8011ede:	4b78      	ldr	r3, [pc, #480]	; (80120c0 <rmw_init+0x200>)
 8011ee0:	6880      	ldr	r0, [r0, #8]
 8011ee2:	681f      	ldr	r7, [r3, #0]
 8011ee4:	b128      	cbz	r0, 8011ef2 <rmw_init+0x32>
 8011ee6:	4639      	mov	r1, r7
 8011ee8:	f7ee f97a 	bl	80001e0 <strcmp>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	f040 80ca 	bne.w	8012086 <rmw_init+0x1c6>
 8011ef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ef6:	4c73      	ldr	r4, [pc, #460]	; (80120c4 <rmw_init+0x204>)
 8011ef8:	4973      	ldr	r1, [pc, #460]	; (80120c8 <rmw_init+0x208>)
 8011efa:	4874      	ldr	r0, [pc, #464]	; (80120cc <rmw_init+0x20c>)
 8011efc:	60b7      	str	r7, [r6, #8]
 8011efe:	e9c6 2300 	strd	r2, r3, [r6]
 8011f02:	68eb      	ldr	r3, [r5, #12]
 8011f04:	64b3      	str	r3, [r6, #72]	; 0x48
 8011f06:	2201      	movs	r2, #1
 8011f08:	f7f9 fff2 	bl	800bef0 <rmw_uxrce_init_session_memory>
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	4970      	ldr	r1, [pc, #448]	; (80120d0 <rmw_init+0x210>)
 8011f10:	2204      	movs	r2, #4
 8011f12:	f7fa f82d 	bl	800bf70 <rmw_uxrce_init_static_input_buffer_memory>
 8011f16:	f04f 0800 	mov.w	r8, #0
 8011f1a:	486c      	ldr	r0, [pc, #432]	; (80120cc <rmw_init+0x20c>)
 8011f1c:	f884 800d 	strb.w	r8, [r4, #13]
 8011f20:	f7ff fe40 	bl	8011ba4 <get_memory>
 8011f24:	2800      	cmp	r0, #0
 8011f26:	f000 80a9 	beq.w	801207c <rmw_init+0x1bc>
 8011f2a:	6884      	ldr	r4, [r0, #8]
 8011f2c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8011f2e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8011f30:	f890 c010 	ldrb.w	ip, [r0, #16]
 8011f34:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011f38:	9101      	str	r1, [sp, #4]
 8011f3a:	6a00      	ldr	r0, [r0, #32]
 8011f3c:	9000      	str	r0, [sp, #0]
 8011f3e:	f104 0910 	add.w	r9, r4, #16
 8011f42:	4661      	mov	r1, ip
 8011f44:	4648      	mov	r0, r9
 8011f46:	f000 febb 	bl	8012cc0 <uxr_set_custom_transport_callbacks>
 8011f4a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8011f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011f52:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8011f56:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8011f5a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8011f5e:	495d      	ldr	r1, [pc, #372]	; (80120d4 <rmw_init+0x214>)
 8011f60:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8011f64:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8011f68:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8011f6c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8011f70:	4859      	ldr	r0, [pc, #356]	; (80120d8 <rmw_init+0x218>)
 8011f72:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8011f76:	2201      	movs	r2, #1
 8011f78:	64f4      	str	r4, [r6, #76]	; 0x4c
 8011f7a:	f7f9 ff99 	bl	800beb0 <rmw_uxrce_init_node_memory>
 8011f7e:	4957      	ldr	r1, [pc, #348]	; (80120dc <rmw_init+0x21c>)
 8011f80:	4857      	ldr	r0, [pc, #348]	; (80120e0 <rmw_init+0x220>)
 8011f82:	2205      	movs	r2, #5
 8011f84:	f7f9 ff74 	bl	800be70 <rmw_uxrce_init_subscription_memory>
 8011f88:	4956      	ldr	r1, [pc, #344]	; (80120e4 <rmw_init+0x224>)
 8011f8a:	4857      	ldr	r0, [pc, #348]	; (80120e8 <rmw_init+0x228>)
 8011f8c:	220a      	movs	r2, #10
 8011f8e:	f7f9 ff4f 	bl	800be30 <rmw_uxrce_init_publisher_memory>
 8011f92:	4956      	ldr	r1, [pc, #344]	; (80120ec <rmw_init+0x22c>)
 8011f94:	4856      	ldr	r0, [pc, #344]	; (80120f0 <rmw_init+0x230>)
 8011f96:	2201      	movs	r2, #1
 8011f98:	f7f9 ff0a 	bl	800bdb0 <rmw_uxrce_init_service_memory>
 8011f9c:	4955      	ldr	r1, [pc, #340]	; (80120f4 <rmw_init+0x234>)
 8011f9e:	4856      	ldr	r0, [pc, #344]	; (80120f8 <rmw_init+0x238>)
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	f7f9 ff25 	bl	800bdf0 <rmw_uxrce_init_client_memory>
 8011fa6:	4955      	ldr	r1, [pc, #340]	; (80120fc <rmw_init+0x23c>)
 8011fa8:	4855      	ldr	r0, [pc, #340]	; (8012100 <rmw_init+0x240>)
 8011faa:	220f      	movs	r2, #15
 8011fac:	f7f9 ffc0 	bl	800bf30 <rmw_uxrce_init_topic_memory>
 8011fb0:	4954      	ldr	r1, [pc, #336]	; (8012104 <rmw_init+0x244>)
 8011fb2:	4855      	ldr	r0, [pc, #340]	; (8012108 <rmw_init+0x248>)
 8011fb4:	2203      	movs	r2, #3
 8011fb6:	f7f9 fffb 	bl	800bfb0 <rmw_uxrce_init_init_options_impl_memory>
 8011fba:	4954      	ldr	r1, [pc, #336]	; (801210c <rmw_init+0x24c>)
 8011fbc:	4854      	ldr	r0, [pc, #336]	; (8012110 <rmw_init+0x250>)
 8011fbe:	2204      	movs	r2, #4
 8011fc0:	f7fa f816 	bl	800bff0 <rmw_uxrce_init_wait_set_memory>
 8011fc4:	4953      	ldr	r1, [pc, #332]	; (8012114 <rmw_init+0x254>)
 8011fc6:	4854      	ldr	r0, [pc, #336]	; (8012118 <rmw_init+0x258>)
 8011fc8:	2204      	movs	r2, #4
 8011fca:	f7fa f831 	bl	800c030 <rmw_uxrce_init_guard_condition_memory>
 8011fce:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8011fd0:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8011fd2:	4642      	mov	r2, r8
 8011fd4:	f000 faa0 	bl	8012518 <rmw_uxrce_transport_init>
 8011fd8:	4607      	mov	r7, r0
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	d158      	bne.n	8012090 <rmw_init+0x1d0>
 8011fde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011fe0:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8011fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fe6:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8011fea:	4628      	mov	r0, r5
 8011fec:	f7fa fe00 	bl	800cbf0 <uxr_init_session>
 8011ff0:	494a      	ldr	r1, [pc, #296]	; (801211c <rmw_init+0x25c>)
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	f7fa fe1f 	bl	800cc38 <uxr_set_topic_callback>
 8011ffa:	4949      	ldr	r1, [pc, #292]	; (8012120 <rmw_init+0x260>)
 8011ffc:	463a      	mov	r2, r7
 8011ffe:	4628      	mov	r0, r5
 8012000:	f7fa fe16 	bl	800cc30 <uxr_set_status_callback>
 8012004:	4947      	ldr	r1, [pc, #284]	; (8012124 <rmw_init+0x264>)
 8012006:	463a      	mov	r2, r7
 8012008:	4628      	mov	r0, r5
 801200a:	f7fa fe19 	bl	800cc40 <uxr_set_request_callback>
 801200e:	4946      	ldr	r1, [pc, #280]	; (8012128 <rmw_init+0x268>)
 8012010:	463a      	mov	r2, r7
 8012012:	4628      	mov	r0, r5
 8012014:	f7fa fe18 	bl	800cc48 <uxr_set_reply_callback>
 8012018:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801201c:	2304      	movs	r3, #4
 801201e:	0092      	lsls	r2, r2, #2
 8012020:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8012024:	4628      	mov	r0, r5
 8012026:	f7fa fe4d 	bl	800ccc4 <uxr_create_input_reliable_stream>
 801202a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801202e:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8012032:	0092      	lsls	r2, r2, #2
 8012034:	2304      	movs	r3, #4
 8012036:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 801203a:	4628      	mov	r0, r5
 801203c:	f7fa fe1a 	bl	800cc74 <uxr_create_output_reliable_stream>
 8012040:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8012044:	4628      	mov	r0, r5
 8012046:	f7fa fe37 	bl	800ccb8 <uxr_create_input_best_effort_stream>
 801204a:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 801204e:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8012052:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012056:	3114      	adds	r1, #20
 8012058:	4628      	mov	r0, r5
 801205a:	f7fa fdf9 	bl	800cc50 <uxr_create_output_best_effort_stream>
 801205e:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8012062:	4628      	mov	r0, r5
 8012064:	f7fb fb84 	bl	800d770 <uxr_create_session>
 8012068:	b1f8      	cbz	r0, 80120aa <rmw_init+0x1ea>
 801206a:	4638      	mov	r0, r7
 801206c:	b003      	add	sp, #12
 801206e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012072:	270b      	movs	r7, #11
 8012074:	4638      	mov	r0, r7
 8012076:	b003      	add	sp, #12
 8012078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801207c:	2701      	movs	r7, #1
 801207e:	4638      	mov	r0, r7
 8012080:	b003      	add	sp, #12
 8012082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012086:	270c      	movs	r7, #12
 8012088:	4638      	mov	r0, r7
 801208a:	b003      	add	sp, #12
 801208c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012090:	4648      	mov	r0, r9
 8012092:	f000 fe57 	bl	8012d44 <uxr_close_custom_transport>
 8012096:	480d      	ldr	r0, [pc, #52]	; (80120cc <rmw_init+0x20c>)
 8012098:	4621      	mov	r1, r4
 801209a:	f7ff fd93 	bl	8011bc4 <put_memory>
 801209e:	4638      	mov	r0, r7
 80120a0:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80120a4:	b003      	add	sp, #12
 80120a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120aa:	4648      	mov	r0, r9
 80120ac:	f000 fe4a 	bl	8012d44 <uxr_close_custom_transport>
 80120b0:	4806      	ldr	r0, [pc, #24]	; (80120cc <rmw_init+0x20c>)
 80120b2:	4621      	mov	r1, r4
 80120b4:	f7ff fd86 	bl	8011bc4 <put_memory>
 80120b8:	64f7      	str	r7, [r6, #76]	; 0x4c
 80120ba:	2701      	movs	r7, #1
 80120bc:	e7d5      	b.n	801206a <rmw_init+0x1aa>
 80120be:	bf00      	nop
 80120c0:	08016908 	.word	0x08016908
 80120c4:	2000db34 	.word	0x2000db34
 80120c8:	20009de0 	.word	0x20009de0
 80120cc:	2000db24 	.word	0x2000db24
 80120d0:	2000b388 	.word	0x2000b388
 80120d4:	20009404 	.word	0x20009404
 80120d8:	2000daf4 	.word	0x2000daf4
 80120dc:	2000d488 	.word	0x2000d488
 80120e0:	2000db44 	.word	0x2000db44
 80120e4:	200094a8 	.word	0x200094a8
 80120e8:	2000db04 	.word	0x2000db04
 80120ec:	20009d18 	.word	0x20009d18
 80120f0:	2000db14 	.word	0x2000db14
 80120f4:	20009238 	.word	0x20009238
 80120f8:	20009224 	.word	0x20009224
 80120fc:	2000d8c0 	.word	0x2000d8c0
 8012100:	2000db54 	.word	0x2000db54
 8012104:	20009380 	.word	0x20009380
 8012108:	2000dae4 	.word	0x2000dae4
 801210c:	2000da64 	.word	0x2000da64
 8012110:	2000db64 	.word	0x2000db64
 8012114:	20009300 	.word	0x20009300
 8012118:	2000dad4 	.word	0x2000dad4
 801211c:	08014681 	.word	0x08014681
 8012120:	08014679 	.word	0x08014679
 8012124:	08014719 	.word	0x08014719
 8012128:	080147b5 	.word	0x080147b5

0801212c <rmw_context_fini>:
 801212c:	4b17      	ldr	r3, [pc, #92]	; (801218c <rmw_context_fini+0x60>)
 801212e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8012130:	b570      	push	{r4, r5, r6, lr}
 8012132:	681c      	ldr	r4, [r3, #0]
 8012134:	4605      	mov	r5, r0
 8012136:	b334      	cbz	r4, 8012186 <rmw_context_fini+0x5a>
 8012138:	2600      	movs	r6, #0
 801213a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801213e:	6902      	ldr	r2, [r0, #16]
 8012140:	428a      	cmp	r2, r1
 8012142:	d018      	beq.n	8012176 <rmw_context_fini+0x4a>
 8012144:	2c00      	cmp	r4, #0
 8012146:	d1f8      	bne.n	801213a <rmw_context_fini+0xe>
 8012148:	b189      	cbz	r1, 801216e <rmw_context_fini+0x42>
 801214a:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801214e:	789b      	ldrb	r3, [r3, #2]
 8012150:	2b01      	cmp	r3, #1
 8012152:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8012156:	bf14      	ite	ne
 8012158:	210a      	movne	r1, #10
 801215a:	2100      	moveq	r1, #0
 801215c:	f7fb fae0 	bl	800d720 <uxr_delete_session_retries>
 8012160:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8012162:	f7f9 ff85 	bl	800c070 <rmw_uxrce_fini_session_memory>
 8012166:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8012168:	3010      	adds	r0, #16
 801216a:	f000 fdeb 	bl	8012d44 <uxr_close_custom_transport>
 801216e:	2300      	movs	r3, #0
 8012170:	64eb      	str	r3, [r5, #76]	; 0x4c
 8012172:	4630      	mov	r0, r6
 8012174:	bd70      	pop	{r4, r5, r6, pc}
 8012176:	3018      	adds	r0, #24
 8012178:	f7f9 fb5c 	bl	800b834 <rmw_destroy_node>
 801217c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 801217e:	4606      	mov	r6, r0
 8012180:	2c00      	cmp	r4, #0
 8012182:	d1da      	bne.n	801213a <rmw_context_fini+0xe>
 8012184:	e7e0      	b.n	8012148 <rmw_context_fini+0x1c>
 8012186:	4626      	mov	r6, r4
 8012188:	e7de      	b.n	8012148 <rmw_context_fini+0x1c>
 801218a:	bf00      	nop
 801218c:	2000daf4 	.word	0x2000daf4

08012190 <create_topic>:
 8012190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012194:	4605      	mov	r5, r0
 8012196:	b084      	sub	sp, #16
 8012198:	4822      	ldr	r0, [pc, #136]	; (8012224 <create_topic+0x94>)
 801219a:	460f      	mov	r7, r1
 801219c:	4616      	mov	r6, r2
 801219e:	f7ff fd01 	bl	8011ba4 <get_memory>
 80121a2:	4604      	mov	r4, r0
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d039      	beq.n	801221c <create_topic+0x8c>
 80121a8:	692b      	ldr	r3, [r5, #16]
 80121aa:	6884      	ldr	r4, [r0, #8]
 80121ac:	f8df 807c 	ldr.w	r8, [pc, #124]	; 801222c <create_topic+0x9c>
 80121b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80121b4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80121b8:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80121bc:	1c42      	adds	r2, r0, #1
 80121be:	2102      	movs	r1, #2
 80121c0:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80121c4:	f7fa fb24 	bl	800c810 <uxr_object_id>
 80121c8:	223c      	movs	r2, #60	; 0x3c
 80121ca:	6120      	str	r0, [r4, #16]
 80121cc:	4641      	mov	r1, r8
 80121ce:	4638      	mov	r0, r7
 80121d0:	f7fa f92a 	bl	800c428 <generate_topic_name>
 80121d4:	b1f0      	cbz	r0, 8012214 <create_topic+0x84>
 80121d6:	4f14      	ldr	r7, [pc, #80]	; (8012228 <create_topic+0x98>)
 80121d8:	4630      	mov	r0, r6
 80121da:	2264      	movs	r2, #100	; 0x64
 80121dc:	4639      	mov	r1, r7
 80121de:	f7fa f8f3 	bl	800c3c8 <generate_type_name>
 80121e2:	b1b8      	cbz	r0, 8012214 <create_topic+0x84>
 80121e4:	6928      	ldr	r0, [r5, #16]
 80121e6:	2306      	movs	r3, #6
 80121e8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80121ec:	f8cd 8000 	str.w	r8, [sp]
 80121f0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80121f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80121f8:	6811      	ldr	r1, [r2, #0]
 80121fa:	696b      	ldr	r3, [r5, #20]
 80121fc:	6922      	ldr	r2, [r4, #16]
 80121fe:	f7fa fa29 	bl	800c654 <uxr_buffer_create_topic_bin>
 8012202:	4602      	mov	r2, r0
 8012204:	6928      	ldr	r0, [r5, #16]
 8012206:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801220a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801220e:	f7fa f8a5 	bl	800c35c <run_xrce_session>
 8012212:	b918      	cbnz	r0, 801221c <create_topic+0x8c>
 8012214:	4620      	mov	r0, r4
 8012216:	f7f9 ffa1 	bl	800c15c <rmw_uxrce_fini_topic_memory>
 801221a:	2400      	movs	r4, #0
 801221c:	4620      	mov	r0, r4
 801221e:	b004      	add	sp, #16
 8012220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012224:	2000db54 	.word	0x2000db54
 8012228:	2000dbe4 	.word	0x2000dbe4
 801222c:	2000dba8 	.word	0x2000dba8

08012230 <destroy_topic>:
 8012230:	b538      	push	{r3, r4, r5, lr}
 8012232:	6985      	ldr	r5, [r0, #24]
 8012234:	b1d5      	cbz	r5, 801226c <destroy_topic+0x3c>
 8012236:	4604      	mov	r4, r0
 8012238:	6928      	ldr	r0, [r5, #16]
 801223a:	6922      	ldr	r2, [r4, #16]
 801223c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012240:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012244:	6819      	ldr	r1, [r3, #0]
 8012246:	f7fa f987 	bl	800c558 <uxr_buffer_delete_entity>
 801224a:	4602      	mov	r2, r0
 801224c:	6928      	ldr	r0, [r5, #16]
 801224e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012252:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012256:	f7fa f881 	bl	800c35c <run_xrce_session>
 801225a:	2800      	cmp	r0, #0
 801225c:	4620      	mov	r0, r4
 801225e:	bf14      	ite	ne
 8012260:	2400      	movne	r4, #0
 8012262:	2402      	moveq	r4, #2
 8012264:	f7f9 ff7a 	bl	800c15c <rmw_uxrce_fini_topic_memory>
 8012268:	4620      	mov	r0, r4
 801226a:	bd38      	pop	{r3, r4, r5, pc}
 801226c:	2401      	movs	r4, #1
 801226e:	4620      	mov	r0, r4
 8012270:	bd38      	pop	{r3, r4, r5, pc}
 8012272:	bf00      	nop

08012274 <rmw_send_request>:
 8012274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012278:	4604      	mov	r4, r0
 801227a:	6800      	ldr	r0, [r0, #0]
 801227c:	b08b      	sub	sp, #44	; 0x2c
 801227e:	460e      	mov	r6, r1
 8012280:	4615      	mov	r5, r2
 8012282:	b128      	cbz	r0, 8012290 <rmw_send_request+0x1c>
 8012284:	4b21      	ldr	r3, [pc, #132]	; (801230c <rmw_send_request+0x98>)
 8012286:	6819      	ldr	r1, [r3, #0]
 8012288:	f7ed ffaa 	bl	80001e0 <strcmp>
 801228c:	2800      	cmp	r0, #0
 801228e:	d139      	bne.n	8012304 <rmw_send_request+0x90>
 8012290:	6864      	ldr	r4, [r4, #4]
 8012292:	6963      	ldr	r3, [r4, #20]
 8012294:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	4798      	blx	r3
 801229c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80122a0:	4630      	mov	r0, r6
 80122a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80122a6:	4798      	blx	r3
 80122a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80122ac:	9000      	str	r0, [sp, #0]
 80122ae:	6922      	ldr	r2, [r4, #16]
 80122b0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80122b2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80122b6:	ab02      	add	r3, sp, #8
 80122b8:	f001 ff22 	bl	8014100 <uxr_prepare_output_stream>
 80122bc:	2700      	movs	r7, #0
 80122be:	6028      	str	r0, [r5, #0]
 80122c0:	606f      	str	r7, [r5, #4]
 80122c2:	b198      	cbz	r0, 80122ec <rmw_send_request+0x78>
 80122c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80122c8:	a902      	add	r1, sp, #8
 80122ca:	4630      	mov	r0, r6
 80122cc:	4798      	blx	r3
 80122ce:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80122d2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d00c      	beq.n	80122f4 <rmw_send_request+0x80>
 80122da:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80122dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80122e0:	f7fb f8d6 	bl	800d490 <uxr_run_session_until_confirm_delivery>
 80122e4:	4638      	mov	r0, r7
 80122e6:	b00b      	add	sp, #44	; 0x2c
 80122e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122ec:	2001      	movs	r0, #1
 80122ee:	b00b      	add	sp, #44	; 0x2c
 80122f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80122f8:	f7fa fd0a 	bl	800cd10 <uxr_flash_output_streams>
 80122fc:	4638      	mov	r0, r7
 80122fe:	b00b      	add	sp, #44	; 0x2c
 8012300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012304:	200c      	movs	r0, #12
 8012306:	b00b      	add	sp, #44	; 0x2c
 8012308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801230c:	08016908 	.word	0x08016908

08012310 <rmw_take_request>:
 8012310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012314:	4605      	mov	r5, r0
 8012316:	6800      	ldr	r0, [r0, #0]
 8012318:	b089      	sub	sp, #36	; 0x24
 801231a:	460c      	mov	r4, r1
 801231c:	4690      	mov	r8, r2
 801231e:	461e      	mov	r6, r3
 8012320:	b128      	cbz	r0, 801232e <rmw_take_request+0x1e>
 8012322:	4b28      	ldr	r3, [pc, #160]	; (80123c4 <rmw_take_request+0xb4>)
 8012324:	6819      	ldr	r1, [r3, #0]
 8012326:	f7ed ff5b 	bl	80001e0 <strcmp>
 801232a:	2800      	cmp	r0, #0
 801232c:	d146      	bne.n	80123bc <rmw_take_request+0xac>
 801232e:	b10e      	cbz	r6, 8012334 <rmw_take_request+0x24>
 8012330:	2300      	movs	r3, #0
 8012332:	7033      	strb	r3, [r6, #0]
 8012334:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012338:	f7f9 ff92 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 801233c:	4648      	mov	r0, r9
 801233e:	f7f9 ff69 	bl	800c214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012342:	4607      	mov	r7, r0
 8012344:	b3b0      	cbz	r0, 80123b4 <rmw_take_request+0xa4>
 8012346:	6885      	ldr	r5, [r0, #8]
 8012348:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 801234c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 8012350:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8012354:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8012358:	7423      	strb	r3, [r4, #16]
 801235a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 801235e:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8012362:	74e2      	strb	r2, [r4, #19]
 8012364:	f8a4 3011 	strh.w	r3, [r4, #17]
 8012368:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 801236c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8012370:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8012374:	61e1      	str	r1, [r4, #28]
 8012376:	6162      	str	r2, [r4, #20]
 8012378:	61a3      	str	r3, [r4, #24]
 801237a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801237e:	689b      	ldr	r3, [r3, #8]
 8012380:	4798      	blx	r3
 8012382:	6844      	ldr	r4, [r0, #4]
 8012384:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8012388:	f105 0110 	add.w	r1, r5, #16
 801238c:	4668      	mov	r0, sp
 801238e:	f7f7 fbb9 	bl	8009b04 <ucdr_init_buffer>
 8012392:	68e3      	ldr	r3, [r4, #12]
 8012394:	4641      	mov	r1, r8
 8012396:	4668      	mov	r0, sp
 8012398:	4798      	blx	r3
 801239a:	4639      	mov	r1, r7
 801239c:	4604      	mov	r4, r0
 801239e:	480a      	ldr	r0, [pc, #40]	; (80123c8 <rmw_take_request+0xb8>)
 80123a0:	f7ff fc10 	bl	8011bc4 <put_memory>
 80123a4:	b106      	cbz	r6, 80123a8 <rmw_take_request+0x98>
 80123a6:	7034      	strb	r4, [r6, #0]
 80123a8:	f084 0001 	eor.w	r0, r4, #1
 80123ac:	b2c0      	uxtb	r0, r0
 80123ae:	b009      	add	sp, #36	; 0x24
 80123b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123b4:	2001      	movs	r0, #1
 80123b6:	b009      	add	sp, #36	; 0x24
 80123b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123bc:	200c      	movs	r0, #12
 80123be:	b009      	add	sp, #36	; 0x24
 80123c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123c4:	08016908 	.word	0x08016908
 80123c8:	2000db34 	.word	0x2000db34

080123cc <rmw_send_response>:
 80123cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ce:	4605      	mov	r5, r0
 80123d0:	6800      	ldr	r0, [r0, #0]
 80123d2:	b091      	sub	sp, #68	; 0x44
 80123d4:	460c      	mov	r4, r1
 80123d6:	4616      	mov	r6, r2
 80123d8:	b128      	cbz	r0, 80123e6 <rmw_send_response+0x1a>
 80123da:	4b29      	ldr	r3, [pc, #164]	; (8012480 <rmw_send_response+0xb4>)
 80123dc:	6819      	ldr	r1, [r3, #0]
 80123de:	f7ed feff 	bl	80001e0 <strcmp>
 80123e2:	2800      	cmp	r0, #0
 80123e4:	d141      	bne.n	801246a <rmw_send_response+0x9e>
 80123e6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80123ea:	9306      	str	r3, [sp, #24]
 80123ec:	4623      	mov	r3, r4
 80123ee:	9207      	str	r2, [sp, #28]
 80123f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123f4:	686d      	ldr	r5, [r5, #4]
 80123f6:	789b      	ldrb	r3, [r3, #2]
 80123f8:	68a1      	ldr	r1, [r4, #8]
 80123fa:	f88d 2017 	strb.w	r2, [sp, #23]
 80123fe:	f88d 3016 	strb.w	r3, [sp, #22]
 8012402:	68e2      	ldr	r2, [r4, #12]
 8012404:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8012408:	6860      	ldr	r0, [r4, #4]
 801240a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801240e:	ab02      	add	r3, sp, #8
 8012410:	c307      	stmia	r3!, {r0, r1, r2}
 8012412:	696b      	ldr	r3, [r5, #20]
 8012414:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	4798      	blx	r3
 801241a:	6844      	ldr	r4, [r0, #4]
 801241c:	4630      	mov	r0, r6
 801241e:	6923      	ldr	r3, [r4, #16]
 8012420:	4798      	blx	r3
 8012422:	f100 0318 	add.w	r3, r0, #24
 8012426:	6938      	ldr	r0, [r7, #16]
 8012428:	9300      	str	r3, [sp, #0]
 801242a:	692a      	ldr	r2, [r5, #16]
 801242c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801242e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012432:	ab08      	add	r3, sp, #32
 8012434:	f001 fe64 	bl	8014100 <uxr_prepare_output_stream>
 8012438:	b910      	cbnz	r0, 8012440 <rmw_send_response+0x74>
 801243a:	2001      	movs	r0, #1
 801243c:	b011      	add	sp, #68	; 0x44
 801243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012440:	a902      	add	r1, sp, #8
 8012442:	a808      	add	r0, sp, #32
 8012444:	f7fc fce8 	bl	800ee18 <uxr_serialize_SampleIdentity>
 8012448:	68a3      	ldr	r3, [r4, #8]
 801244a:	a908      	add	r1, sp, #32
 801244c:	4630      	mov	r0, r6
 801244e:	4798      	blx	r3
 8012450:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8012454:	6938      	ldr	r0, [r7, #16]
 8012456:	2b01      	cmp	r3, #1
 8012458:	d00a      	beq.n	8012470 <rmw_send_response+0xa4>
 801245a:	6f69      	ldr	r1, [r5, #116]	; 0x74
 801245c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012460:	f7fb f816 	bl	800d490 <uxr_run_session_until_confirm_delivery>
 8012464:	2000      	movs	r0, #0
 8012466:	b011      	add	sp, #68	; 0x44
 8012468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801246a:	200c      	movs	r0, #12
 801246c:	b011      	add	sp, #68	; 0x44
 801246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012470:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012474:	f7fa fc4c 	bl	800cd10 <uxr_flash_output_streams>
 8012478:	2000      	movs	r0, #0
 801247a:	b011      	add	sp, #68	; 0x44
 801247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801247e:	bf00      	nop
 8012480:	08016908 	.word	0x08016908

08012484 <rmw_take_response>:
 8012484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012488:	4604      	mov	r4, r0
 801248a:	6800      	ldr	r0, [r0, #0]
 801248c:	b088      	sub	sp, #32
 801248e:	4688      	mov	r8, r1
 8012490:	4617      	mov	r7, r2
 8012492:	461d      	mov	r5, r3
 8012494:	b120      	cbz	r0, 80124a0 <rmw_take_response+0x1c>
 8012496:	4b1e      	ldr	r3, [pc, #120]	; (8012510 <rmw_take_response+0x8c>)
 8012498:	6819      	ldr	r1, [r3, #0]
 801249a:	f7ed fea1 	bl	80001e0 <strcmp>
 801249e:	bb78      	cbnz	r0, 8012500 <rmw_take_response+0x7c>
 80124a0:	b10d      	cbz	r5, 80124a6 <rmw_take_response+0x22>
 80124a2:	2300      	movs	r3, #0
 80124a4:	702b      	strb	r3, [r5, #0]
 80124a6:	6864      	ldr	r4, [r4, #4]
 80124a8:	f7f9 feda 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 80124ac:	4620      	mov	r0, r4
 80124ae:	f7f9 feb1 	bl	800c214 <rmw_uxrce_find_static_input_buffer_by_owner>
 80124b2:	4606      	mov	r6, r0
 80124b4:	b340      	cbz	r0, 8012508 <rmw_take_response+0x84>
 80124b6:	6963      	ldr	r3, [r4, #20]
 80124b8:	6884      	ldr	r4, [r0, #8]
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80124c0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80124c4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80124c8:	4798      	blx	r3
 80124ca:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80124ce:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80124d2:	f104 0110 	add.w	r1, r4, #16
 80124d6:	4668      	mov	r0, sp
 80124d8:	f7f7 fb14 	bl	8009b04 <ucdr_init_buffer>
 80124dc:	4639      	mov	r1, r7
 80124de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80124e2:	4668      	mov	r0, sp
 80124e4:	4798      	blx	r3
 80124e6:	4631      	mov	r1, r6
 80124e8:	4604      	mov	r4, r0
 80124ea:	480a      	ldr	r0, [pc, #40]	; (8012514 <rmw_take_response+0x90>)
 80124ec:	f7ff fb6a 	bl	8011bc4 <put_memory>
 80124f0:	b105      	cbz	r5, 80124f4 <rmw_take_response+0x70>
 80124f2:	702c      	strb	r4, [r5, #0]
 80124f4:	f084 0001 	eor.w	r0, r4, #1
 80124f8:	b2c0      	uxtb	r0, r0
 80124fa:	b008      	add	sp, #32
 80124fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012500:	200c      	movs	r0, #12
 8012502:	b008      	add	sp, #32
 8012504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012508:	2001      	movs	r0, #1
 801250a:	b008      	add	sp, #32
 801250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012510:	08016908 	.word	0x08016908
 8012514:	2000db34 	.word	0x2000db34

08012518 <rmw_uxrce_transport_init>:
 8012518:	b508      	push	{r3, lr}
 801251a:	b108      	cbz	r0, 8012520 <rmw_uxrce_transport_init+0x8>
 801251c:	f100 0210 	add.w	r2, r0, #16
 8012520:	b139      	cbz	r1, 8012532 <rmw_uxrce_transport_init+0x1a>
 8012522:	6949      	ldr	r1, [r1, #20]
 8012524:	4610      	mov	r0, r2
 8012526:	f000 fbd9 	bl	8012cdc <uxr_init_custom_transport>
 801252a:	f080 0001 	eor.w	r0, r0, #1
 801252e:	b2c0      	uxtb	r0, r0
 8012530:	bd08      	pop	{r3, pc}
 8012532:	4b04      	ldr	r3, [pc, #16]	; (8012544 <rmw_uxrce_transport_init+0x2c>)
 8012534:	4610      	mov	r0, r2
 8012536:	6859      	ldr	r1, [r3, #4]
 8012538:	f000 fbd0 	bl	8012cdc <uxr_init_custom_transport>
 801253c:	f080 0001 	eor.w	r0, r0, #1
 8012540:	b2c0      	uxtb	r0, r0
 8012542:	bd08      	pop	{r3, pc}
 8012544:	200091cc 	.word	0x200091cc

08012548 <rmw_wait>:
 8012548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801254c:	b089      	sub	sp, #36	; 0x24
 801254e:	4605      	mov	r5, r0
 8012550:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8012552:	460e      	mov	r6, r1
 8012554:	4698      	mov	r8, r3
 8012556:	4691      	mov	r9, r2
 8012558:	2a00      	cmp	r2, #0
 801255a:	f000 810a 	beq.w	8012772 <rmw_wait+0x22a>
 801255e:	b16c      	cbz	r4, 801257c <rmw_wait+0x34>
 8012560:	4bae      	ldr	r3, [pc, #696]	; (801281c <rmw_wait+0x2d4>)
 8012562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012564:	af04      	add	r7, sp, #16
 8012566:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801256a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801256e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012572:	f7ff fa1d 	bl	80119b0 <rmw_time_equal>
 8012576:	2800      	cmp	r0, #0
 8012578:	f000 8127 	beq.w	80127ca <rmw_wait+0x282>
 801257c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012580:	f7f9 fe6e 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 8012584:	4ba6      	ldr	r3, [pc, #664]	; (8012820 <rmw_wait+0x2d8>)
 8012586:	681c      	ldr	r4, [r3, #0]
 8012588:	b14c      	cbz	r4, 801259e <rmw_wait+0x56>
 801258a:	4623      	mov	r3, r4
 801258c:	2100      	movs	r1, #0
 801258e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8012592:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012596:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801259a:	2b00      	cmp	r3, #0
 801259c:	d1f7      	bne.n	801258e <rmw_wait+0x46>
 801259e:	f1b9 0f00 	cmp.w	r9, #0
 80125a2:	d011      	beq.n	80125c8 <rmw_wait+0x80>
 80125a4:	f8d9 1000 	ldr.w	r1, [r9]
 80125a8:	b171      	cbz	r1, 80125c8 <rmw_wait+0x80>
 80125aa:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80125ae:	2300      	movs	r3, #0
 80125b0:	2001      	movs	r0, #1
 80125b2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80125b6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80125b8:	6912      	ldr	r2, [r2, #16]
 80125ba:	3301      	adds	r3, #1
 80125bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80125c0:	4299      	cmp	r1, r3
 80125c2:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80125c6:	d1f4      	bne.n	80125b2 <rmw_wait+0x6a>
 80125c8:	f1b8 0f00 	cmp.w	r8, #0
 80125cc:	d011      	beq.n	80125f2 <rmw_wait+0xaa>
 80125ce:	f8d8 1000 	ldr.w	r1, [r8]
 80125d2:	b171      	cbz	r1, 80125f2 <rmw_wait+0xaa>
 80125d4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80125d8:	2300      	movs	r3, #0
 80125da:	2001      	movs	r0, #1
 80125dc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80125e0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80125e2:	6912      	ldr	r2, [r2, #16]
 80125e4:	3301      	adds	r3, #1
 80125e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80125ea:	4299      	cmp	r1, r3
 80125ec:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80125f0:	d1f4      	bne.n	80125dc <rmw_wait+0x94>
 80125f2:	b185      	cbz	r5, 8012616 <rmw_wait+0xce>
 80125f4:	6829      	ldr	r1, [r5, #0]
 80125f6:	b171      	cbz	r1, 8012616 <rmw_wait+0xce>
 80125f8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80125fc:	2300      	movs	r3, #0
 80125fe:	2001      	movs	r0, #1
 8012600:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012604:	6a12      	ldr	r2, [r2, #32]
 8012606:	6912      	ldr	r2, [r2, #16]
 8012608:	3301      	adds	r3, #1
 801260a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801260e:	4299      	cmp	r1, r3
 8012610:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8012614:	d1f4      	bne.n	8012600 <rmw_wait+0xb8>
 8012616:	b34c      	cbz	r4, 801266c <rmw_wait+0x124>
 8012618:	4622      	mov	r2, r4
 801261a:	2300      	movs	r3, #0
 801261c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8012620:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8012624:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8012628:	440b      	add	r3, r1
 801262a:	b2db      	uxtb	r3, r3
 801262c:	2a00      	cmp	r2, #0
 801262e:	d1f5      	bne.n	801261c <rmw_wait+0xd4>
 8012630:	2b00      	cmp	r3, #0
 8012632:	f000 8084 	beq.w	801273e <rmw_wait+0x1f6>
 8012636:	1c7a      	adds	r2, r7, #1
 8012638:	d00d      	beq.n	8012656 <rmw_wait+0x10e>
 801263a:	ee07 7a90 	vmov	s15, r7
 801263e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012642:	ee07 3a90 	vmov	s15, r3
 8012646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801264a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801264e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8012652:	ee17 7a90 	vmov	r7, s15
 8012656:	68a0      	ldr	r0, [r4, #8]
 8012658:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801265c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8012660:	2b00      	cmp	r3, #0
 8012662:	f040 8090 	bne.w	8012786 <rmw_wait+0x23e>
 8012666:	6864      	ldr	r4, [r4, #4]
 8012668:	2c00      	cmp	r4, #0
 801266a:	d1f4      	bne.n	8012656 <rmw_wait+0x10e>
 801266c:	f1b9 0f00 	cmp.w	r9, #0
 8012670:	f000 80bc 	beq.w	80127ec <rmw_wait+0x2a4>
 8012674:	f8d9 7000 	ldr.w	r7, [r9]
 8012678:	2f00      	cmp	r7, #0
 801267a:	f000 808e 	beq.w	801279a <rmw_wait+0x252>
 801267e:	2400      	movs	r4, #0
 8012680:	4627      	mov	r7, r4
 8012682:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012686:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801268a:	f7f9 fdc3 	bl	800c214 <rmw_uxrce_find_static_input_buffer_by_owner>
 801268e:	2800      	cmp	r0, #0
 8012690:	d05f      	beq.n	8012752 <rmw_wait+0x20a>
 8012692:	f8d9 3000 	ldr.w	r3, [r9]
 8012696:	3401      	adds	r4, #1
 8012698:	42a3      	cmp	r3, r4
 801269a:	f04f 0701 	mov.w	r7, #1
 801269e:	d8f0      	bhi.n	8012682 <rmw_wait+0x13a>
 80126a0:	f1b8 0f00 	cmp.w	r8, #0
 80126a4:	d012      	beq.n	80126cc <rmw_wait+0x184>
 80126a6:	f8d8 3000 	ldr.w	r3, [r8]
 80126aa:	b17b      	cbz	r3, 80126cc <rmw_wait+0x184>
 80126ac:	2400      	movs	r4, #0
 80126ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80126b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80126b6:	f7f9 fdad 	bl	800c214 <rmw_uxrce_find_static_input_buffer_by_owner>
 80126ba:	2800      	cmp	r0, #0
 80126bc:	d051      	beq.n	8012762 <rmw_wait+0x21a>
 80126be:	f8d8 3000 	ldr.w	r3, [r8]
 80126c2:	3401      	adds	r4, #1
 80126c4:	42a3      	cmp	r3, r4
 80126c6:	f04f 0701 	mov.w	r7, #1
 80126ca:	d8f0      	bhi.n	80126ae <rmw_wait+0x166>
 80126cc:	b1dd      	cbz	r5, 8012706 <rmw_wait+0x1be>
 80126ce:	682b      	ldr	r3, [r5, #0]
 80126d0:	b1cb      	cbz	r3, 8012706 <rmw_wait+0x1be>
 80126d2:	2400      	movs	r4, #0
 80126d4:	686b      	ldr	r3, [r5, #4]
 80126d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80126da:	f7f9 fd9b 	bl	800c214 <rmw_uxrce_find_static_input_buffer_by_owner>
 80126de:	b158      	cbz	r0, 80126f8 <rmw_wait+0x1b0>
 80126e0:	682b      	ldr	r3, [r5, #0]
 80126e2:	3401      	adds	r4, #1
 80126e4:	42a3      	cmp	r3, r4
 80126e6:	d969      	bls.n	80127bc <rmw_wait+0x274>
 80126e8:	686b      	ldr	r3, [r5, #4]
 80126ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80126ee:	2701      	movs	r7, #1
 80126f0:	f7f9 fd90 	bl	800c214 <rmw_uxrce_find_static_input_buffer_by_owner>
 80126f4:	2800      	cmp	r0, #0
 80126f6:	d1f3      	bne.n	80126e0 <rmw_wait+0x198>
 80126f8:	e9d5 3200 	ldrd	r3, r2, [r5]
 80126fc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012700:	3401      	adds	r4, #1
 8012702:	42a3      	cmp	r3, r4
 8012704:	d8e6      	bhi.n	80126d4 <rmw_wait+0x18c>
 8012706:	b1a6      	cbz	r6, 8012732 <rmw_wait+0x1ea>
 8012708:	6834      	ldr	r4, [r6, #0]
 801270a:	b194      	cbz	r4, 8012732 <rmw_wait+0x1ea>
 801270c:	2300      	movs	r3, #0
 801270e:	461d      	mov	r5, r3
 8012710:	e004      	b.n	801271c <rmw_wait+0x1d4>
 8012712:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8012716:	3301      	adds	r3, #1
 8012718:	42a3      	cmp	r3, r4
 801271a:	d00a      	beq.n	8012732 <rmw_wait+0x1ea>
 801271c:	6870      	ldr	r0, [r6, #4]
 801271e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8012722:	7c0a      	ldrb	r2, [r1, #16]
 8012724:	2a00      	cmp	r2, #0
 8012726:	d0f4      	beq.n	8012712 <rmw_wait+0x1ca>
 8012728:	3301      	adds	r3, #1
 801272a:	42a3      	cmp	r3, r4
 801272c:	740d      	strb	r5, [r1, #16]
 801272e:	4617      	mov	r7, r2
 8012730:	d1f4      	bne.n	801271c <rmw_wait+0x1d4>
 8012732:	2f00      	cmp	r7, #0
 8012734:	d03e      	beq.n	80127b4 <rmw_wait+0x26c>
 8012736:	2000      	movs	r0, #0
 8012738:	b009      	add	sp, #36	; 0x24
 801273a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801273e:	68a0      	ldr	r0, [r4, #8]
 8012740:	2100      	movs	r1, #0
 8012742:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012746:	f7fa fe69 	bl	800d41c <uxr_run_session_timeout>
 801274a:	6864      	ldr	r4, [r4, #4]
 801274c:	2c00      	cmp	r4, #0
 801274e:	d1f6      	bne.n	801273e <rmw_wait+0x1f6>
 8012750:	e78c      	b.n	801266c <rmw_wait+0x124>
 8012752:	e9d9 3200 	ldrd	r3, r2, [r9]
 8012756:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801275a:	3401      	adds	r4, #1
 801275c:	42a3      	cmp	r3, r4
 801275e:	d890      	bhi.n	8012682 <rmw_wait+0x13a>
 8012760:	e79e      	b.n	80126a0 <rmw_wait+0x158>
 8012762:	e9d8 3200 	ldrd	r3, r2, [r8]
 8012766:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801276a:	3401      	adds	r4, #1
 801276c:	429c      	cmp	r4, r3
 801276e:	d39e      	bcc.n	80126ae <rmw_wait+0x166>
 8012770:	e7ac      	b.n	80126cc <rmw_wait+0x184>
 8012772:	2b00      	cmp	r3, #0
 8012774:	f47f aef3 	bne.w	801255e <rmw_wait+0x16>
 8012778:	2800      	cmp	r0, #0
 801277a:	f47f aef0 	bne.w	801255e <rmw_wait+0x16>
 801277e:	2900      	cmp	r1, #0
 8012780:	f47f aeed 	bne.w	801255e <rmw_wait+0x16>
 8012784:	e7d7      	b.n	8012736 <rmw_wait+0x1ee>
 8012786:	4639      	mov	r1, r7
 8012788:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801278c:	f7fa fe60 	bl	800d450 <uxr_run_session_until_data>
 8012790:	6864      	ldr	r4, [r4, #4]
 8012792:	2c00      	cmp	r4, #0
 8012794:	f47f af5f 	bne.w	8012656 <rmw_wait+0x10e>
 8012798:	e768      	b.n	801266c <rmw_wait+0x124>
 801279a:	f1b8 0f00 	cmp.w	r8, #0
 801279e:	d032      	beq.n	8012806 <rmw_wait+0x2be>
 80127a0:	f8d8 3000 	ldr.w	r3, [r8]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d181      	bne.n	80126ac <rmw_wait+0x164>
 80127a8:	461f      	mov	r7, r3
 80127aa:	2d00      	cmp	r5, #0
 80127ac:	d18f      	bne.n	80126ce <rmw_wait+0x186>
 80127ae:	462f      	mov	r7, r5
 80127b0:	2e00      	cmp	r6, #0
 80127b2:	d1a9      	bne.n	8012708 <rmw_wait+0x1c0>
 80127b4:	2002      	movs	r0, #2
 80127b6:	b009      	add	sp, #36	; 0x24
 80127b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127bc:	2e00      	cmp	r6, #0
 80127be:	d0ba      	beq.n	8012736 <rmw_wait+0x1ee>
 80127c0:	6834      	ldr	r4, [r6, #0]
 80127c2:	2701      	movs	r7, #1
 80127c4:	2c00      	cmp	r4, #0
 80127c6:	d1a1      	bne.n	801270c <rmw_wait+0x1c4>
 80127c8:	e7b5      	b.n	8012736 <rmw_wait+0x1ee>
 80127ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80127ce:	f7ff f943 	bl	8011a58 <rmw_time_total_nsec>
 80127d2:	2300      	movs	r3, #0
 80127d4:	4a13      	ldr	r2, [pc, #76]	; (8012824 <rmw_wait+0x2dc>)
 80127d6:	f7ee f949 	bl	8000a6c <__aeabi_uldivmod>
 80127da:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80127de:	f171 0300 	sbcs.w	r3, r1, #0
 80127e2:	4607      	mov	r7, r0
 80127e4:	bfa8      	it	ge
 80127e6:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 80127ea:	e6c9      	b.n	8012580 <rmw_wait+0x38>
 80127ec:	f1b8 0f00 	cmp.w	r8, #0
 80127f0:	d009      	beq.n	8012806 <rmw_wait+0x2be>
 80127f2:	f8d8 3000 	ldr.w	r3, [r8]
 80127f6:	464f      	mov	r7, r9
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f47f af57 	bne.w	80126ac <rmw_wait+0x164>
 80127fe:	2d00      	cmp	r5, #0
 8012800:	f47f af65 	bne.w	80126ce <rmw_wait+0x186>
 8012804:	e7d3      	b.n	80127ae <rmw_wait+0x266>
 8012806:	b17d      	cbz	r5, 8012828 <rmw_wait+0x2e0>
 8012808:	682b      	ldr	r3, [r5, #0]
 801280a:	4647      	mov	r7, r8
 801280c:	2b00      	cmp	r3, #0
 801280e:	f47f af60 	bne.w	80126d2 <rmw_wait+0x18a>
 8012812:	2e00      	cmp	r6, #0
 8012814:	f47f af78 	bne.w	8012708 <rmw_wait+0x1c0>
 8012818:	e7cc      	b.n	80127b4 <rmw_wait+0x26c>
 801281a:	bf00      	nop
 801281c:	08016000 	.word	0x08016000
 8012820:	2000db24 	.word	0x2000db24
 8012824:	000f4240 	.word	0x000f4240
 8012828:	2e00      	cmp	r6, #0
 801282a:	d0c3      	beq.n	80127b4 <rmw_wait+0x26c>
 801282c:	6834      	ldr	r4, [r6, #0]
 801282e:	462f      	mov	r7, r5
 8012830:	2c00      	cmp	r4, #0
 8012832:	f47f af6b 	bne.w	801270c <rmw_wait+0x1c4>
 8012836:	e7bd      	b.n	80127b4 <rmw_wait+0x26c>

08012838 <rmw_create_wait_set>:
 8012838:	b508      	push	{r3, lr}
 801283a:	4803      	ldr	r0, [pc, #12]	; (8012848 <rmw_create_wait_set+0x10>)
 801283c:	f7ff f9b2 	bl	8011ba4 <get_memory>
 8012840:	b108      	cbz	r0, 8012846 <rmw_create_wait_set+0xe>
 8012842:	6880      	ldr	r0, [r0, #8]
 8012844:	3010      	adds	r0, #16
 8012846:	bd08      	pop	{r3, pc}
 8012848:	2000db64 	.word	0x2000db64

0801284c <rmw_destroy_wait_set>:
 801284c:	b508      	push	{r3, lr}
 801284e:	4b08      	ldr	r3, [pc, #32]	; (8012870 <rmw_destroy_wait_set+0x24>)
 8012850:	6819      	ldr	r1, [r3, #0]
 8012852:	b911      	cbnz	r1, 801285a <rmw_destroy_wait_set+0xe>
 8012854:	e00a      	b.n	801286c <rmw_destroy_wait_set+0x20>
 8012856:	6849      	ldr	r1, [r1, #4]
 8012858:	b141      	cbz	r1, 801286c <rmw_destroy_wait_set+0x20>
 801285a:	688b      	ldr	r3, [r1, #8]
 801285c:	3310      	adds	r3, #16
 801285e:	4298      	cmp	r0, r3
 8012860:	d1f9      	bne.n	8012856 <rmw_destroy_wait_set+0xa>
 8012862:	4803      	ldr	r0, [pc, #12]	; (8012870 <rmw_destroy_wait_set+0x24>)
 8012864:	f7ff f9ae 	bl	8011bc4 <put_memory>
 8012868:	2000      	movs	r0, #0
 801286a:	bd08      	pop	{r3, pc}
 801286c:	2001      	movs	r0, #1
 801286e:	bd08      	pop	{r3, pc}
 8012870:	2000db64 	.word	0x2000db64

08012874 <rmw_uros_epoch_nanos>:
 8012874:	4b05      	ldr	r3, [pc, #20]	; (801288c <rmw_uros_epoch_nanos+0x18>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	b123      	cbz	r3, 8012884 <rmw_uros_epoch_nanos+0x10>
 801287a:	6898      	ldr	r0, [r3, #8]
 801287c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012880:	f7fa ba3c 	b.w	800ccfc <uxr_epoch_nanos>
 8012884:	2000      	movs	r0, #0
 8012886:	2100      	movs	r1, #0
 8012888:	4770      	bx	lr
 801288a:	bf00      	nop
 801288c:	2000db24 	.word	0x2000db24

08012890 <ucdr_serialize_endian_array_char>:
 8012890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012894:	4619      	mov	r1, r3
 8012896:	461f      	mov	r7, r3
 8012898:	4605      	mov	r5, r0
 801289a:	4690      	mov	r8, r2
 801289c:	f7f7 f8de 	bl	8009a5c <ucdr_check_buffer_available_for>
 80128a0:	b9e0      	cbnz	r0, 80128dc <ucdr_serialize_endian_array_char+0x4c>
 80128a2:	463e      	mov	r6, r7
 80128a4:	e009      	b.n	80128ba <ucdr_serialize_endian_array_char+0x2a>
 80128a6:	68a8      	ldr	r0, [r5, #8]
 80128a8:	f002 fc87 	bl	80151ba <memcpy>
 80128ac:	68ab      	ldr	r3, [r5, #8]
 80128ae:	6928      	ldr	r0, [r5, #16]
 80128b0:	4423      	add	r3, r4
 80128b2:	4420      	add	r0, r4
 80128b4:	1b36      	subs	r6, r6, r4
 80128b6:	60ab      	str	r3, [r5, #8]
 80128b8:	6128      	str	r0, [r5, #16]
 80128ba:	4631      	mov	r1, r6
 80128bc:	2201      	movs	r2, #1
 80128be:	4628      	mov	r0, r5
 80128c0:	f7f7 f954 	bl	8009b6c <ucdr_check_final_buffer_behavior_array>
 80128c4:	1bb9      	subs	r1, r7, r6
 80128c6:	4441      	add	r1, r8
 80128c8:	4604      	mov	r4, r0
 80128ca:	4602      	mov	r2, r0
 80128cc:	2800      	cmp	r0, #0
 80128ce:	d1ea      	bne.n	80128a6 <ucdr_serialize_endian_array_char+0x16>
 80128d0:	2301      	movs	r3, #1
 80128d2:	7da8      	ldrb	r0, [r5, #22]
 80128d4:	756b      	strb	r3, [r5, #21]
 80128d6:	4058      	eors	r0, r3
 80128d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128dc:	463a      	mov	r2, r7
 80128de:	68a8      	ldr	r0, [r5, #8]
 80128e0:	4641      	mov	r1, r8
 80128e2:	f002 fc6a 	bl	80151ba <memcpy>
 80128e6:	68aa      	ldr	r2, [r5, #8]
 80128e8:	692b      	ldr	r3, [r5, #16]
 80128ea:	443a      	add	r2, r7
 80128ec:	443b      	add	r3, r7
 80128ee:	60aa      	str	r2, [r5, #8]
 80128f0:	612b      	str	r3, [r5, #16]
 80128f2:	e7ed      	b.n	80128d0 <ucdr_serialize_endian_array_char+0x40>

080128f4 <ucdr_deserialize_endian_array_char>:
 80128f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128f8:	4619      	mov	r1, r3
 80128fa:	461f      	mov	r7, r3
 80128fc:	4605      	mov	r5, r0
 80128fe:	4690      	mov	r8, r2
 8012900:	f7f7 f8ac 	bl	8009a5c <ucdr_check_buffer_available_for>
 8012904:	b9e0      	cbnz	r0, 8012940 <ucdr_deserialize_endian_array_char+0x4c>
 8012906:	463e      	mov	r6, r7
 8012908:	e009      	b.n	801291e <ucdr_deserialize_endian_array_char+0x2a>
 801290a:	68a9      	ldr	r1, [r5, #8]
 801290c:	f002 fc55 	bl	80151ba <memcpy>
 8012910:	68ab      	ldr	r3, [r5, #8]
 8012912:	6928      	ldr	r0, [r5, #16]
 8012914:	4423      	add	r3, r4
 8012916:	4420      	add	r0, r4
 8012918:	1b36      	subs	r6, r6, r4
 801291a:	60ab      	str	r3, [r5, #8]
 801291c:	6128      	str	r0, [r5, #16]
 801291e:	2201      	movs	r2, #1
 8012920:	4631      	mov	r1, r6
 8012922:	4628      	mov	r0, r5
 8012924:	f7f7 f922 	bl	8009b6c <ucdr_check_final_buffer_behavior_array>
 8012928:	4604      	mov	r4, r0
 801292a:	1bb8      	subs	r0, r7, r6
 801292c:	4440      	add	r0, r8
 801292e:	4622      	mov	r2, r4
 8012930:	2c00      	cmp	r4, #0
 8012932:	d1ea      	bne.n	801290a <ucdr_deserialize_endian_array_char+0x16>
 8012934:	2301      	movs	r3, #1
 8012936:	7da8      	ldrb	r0, [r5, #22]
 8012938:	756b      	strb	r3, [r5, #21]
 801293a:	4058      	eors	r0, r3
 801293c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012940:	463a      	mov	r2, r7
 8012942:	68a9      	ldr	r1, [r5, #8]
 8012944:	4640      	mov	r0, r8
 8012946:	f002 fc38 	bl	80151ba <memcpy>
 801294a:	68aa      	ldr	r2, [r5, #8]
 801294c:	692b      	ldr	r3, [r5, #16]
 801294e:	443a      	add	r2, r7
 8012950:	443b      	add	r3, r7
 8012952:	60aa      	str	r2, [r5, #8]
 8012954:	612b      	str	r3, [r5, #16]
 8012956:	e7ed      	b.n	8012934 <ucdr_deserialize_endian_array_char+0x40>

08012958 <ucdr_serialize_array_uint8_t>:
 8012958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801295c:	4688      	mov	r8, r1
 801295e:	4611      	mov	r1, r2
 8012960:	4617      	mov	r7, r2
 8012962:	4605      	mov	r5, r0
 8012964:	f7f7 f87a 	bl	8009a5c <ucdr_check_buffer_available_for>
 8012968:	b9e0      	cbnz	r0, 80129a4 <ucdr_serialize_array_uint8_t+0x4c>
 801296a:	463e      	mov	r6, r7
 801296c:	e009      	b.n	8012982 <ucdr_serialize_array_uint8_t+0x2a>
 801296e:	68a8      	ldr	r0, [r5, #8]
 8012970:	f002 fc23 	bl	80151ba <memcpy>
 8012974:	68aa      	ldr	r2, [r5, #8]
 8012976:	692b      	ldr	r3, [r5, #16]
 8012978:	4422      	add	r2, r4
 801297a:	4423      	add	r3, r4
 801297c:	1b36      	subs	r6, r6, r4
 801297e:	60aa      	str	r2, [r5, #8]
 8012980:	612b      	str	r3, [r5, #16]
 8012982:	4631      	mov	r1, r6
 8012984:	2201      	movs	r2, #1
 8012986:	4628      	mov	r0, r5
 8012988:	f7f7 f8f0 	bl	8009b6c <ucdr_check_final_buffer_behavior_array>
 801298c:	1bb9      	subs	r1, r7, r6
 801298e:	4441      	add	r1, r8
 8012990:	4604      	mov	r4, r0
 8012992:	4602      	mov	r2, r0
 8012994:	2800      	cmp	r0, #0
 8012996:	d1ea      	bne.n	801296e <ucdr_serialize_array_uint8_t+0x16>
 8012998:	2301      	movs	r3, #1
 801299a:	7da8      	ldrb	r0, [r5, #22]
 801299c:	756b      	strb	r3, [r5, #21]
 801299e:	4058      	eors	r0, r3
 80129a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a4:	463a      	mov	r2, r7
 80129a6:	68a8      	ldr	r0, [r5, #8]
 80129a8:	4641      	mov	r1, r8
 80129aa:	f002 fc06 	bl	80151ba <memcpy>
 80129ae:	68aa      	ldr	r2, [r5, #8]
 80129b0:	692b      	ldr	r3, [r5, #16]
 80129b2:	443a      	add	r2, r7
 80129b4:	443b      	add	r3, r7
 80129b6:	60aa      	str	r2, [r5, #8]
 80129b8:	612b      	str	r3, [r5, #16]
 80129ba:	e7ed      	b.n	8012998 <ucdr_serialize_array_uint8_t+0x40>

080129bc <ucdr_serialize_endian_array_uint8_t>:
 80129bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c0:	4619      	mov	r1, r3
 80129c2:	461f      	mov	r7, r3
 80129c4:	4605      	mov	r5, r0
 80129c6:	4690      	mov	r8, r2
 80129c8:	f7f7 f848 	bl	8009a5c <ucdr_check_buffer_available_for>
 80129cc:	b9e0      	cbnz	r0, 8012a08 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80129ce:	463e      	mov	r6, r7
 80129d0:	e009      	b.n	80129e6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80129d2:	68a8      	ldr	r0, [r5, #8]
 80129d4:	f002 fbf1 	bl	80151ba <memcpy>
 80129d8:	68ab      	ldr	r3, [r5, #8]
 80129da:	6928      	ldr	r0, [r5, #16]
 80129dc:	4423      	add	r3, r4
 80129de:	4420      	add	r0, r4
 80129e0:	1b36      	subs	r6, r6, r4
 80129e2:	60ab      	str	r3, [r5, #8]
 80129e4:	6128      	str	r0, [r5, #16]
 80129e6:	4631      	mov	r1, r6
 80129e8:	2201      	movs	r2, #1
 80129ea:	4628      	mov	r0, r5
 80129ec:	f7f7 f8be 	bl	8009b6c <ucdr_check_final_buffer_behavior_array>
 80129f0:	1bb9      	subs	r1, r7, r6
 80129f2:	4441      	add	r1, r8
 80129f4:	4604      	mov	r4, r0
 80129f6:	4602      	mov	r2, r0
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d1ea      	bne.n	80129d2 <ucdr_serialize_endian_array_uint8_t+0x16>
 80129fc:	2301      	movs	r3, #1
 80129fe:	7da8      	ldrb	r0, [r5, #22]
 8012a00:	756b      	strb	r3, [r5, #21]
 8012a02:	4058      	eors	r0, r3
 8012a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a08:	463a      	mov	r2, r7
 8012a0a:	68a8      	ldr	r0, [r5, #8]
 8012a0c:	4641      	mov	r1, r8
 8012a0e:	f002 fbd4 	bl	80151ba <memcpy>
 8012a12:	68aa      	ldr	r2, [r5, #8]
 8012a14:	692b      	ldr	r3, [r5, #16]
 8012a16:	443a      	add	r2, r7
 8012a18:	443b      	add	r3, r7
 8012a1a:	60aa      	str	r2, [r5, #8]
 8012a1c:	612b      	str	r3, [r5, #16]
 8012a1e:	e7ed      	b.n	80129fc <ucdr_serialize_endian_array_uint8_t+0x40>

08012a20 <ucdr_deserialize_array_uint8_t>:
 8012a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a24:	4688      	mov	r8, r1
 8012a26:	4611      	mov	r1, r2
 8012a28:	4617      	mov	r7, r2
 8012a2a:	4605      	mov	r5, r0
 8012a2c:	f7f7 f816 	bl	8009a5c <ucdr_check_buffer_available_for>
 8012a30:	b9e0      	cbnz	r0, 8012a6c <ucdr_deserialize_array_uint8_t+0x4c>
 8012a32:	463e      	mov	r6, r7
 8012a34:	e009      	b.n	8012a4a <ucdr_deserialize_array_uint8_t+0x2a>
 8012a36:	68a9      	ldr	r1, [r5, #8]
 8012a38:	f002 fbbf 	bl	80151ba <memcpy>
 8012a3c:	68aa      	ldr	r2, [r5, #8]
 8012a3e:	692b      	ldr	r3, [r5, #16]
 8012a40:	4422      	add	r2, r4
 8012a42:	4423      	add	r3, r4
 8012a44:	1b36      	subs	r6, r6, r4
 8012a46:	60aa      	str	r2, [r5, #8]
 8012a48:	612b      	str	r3, [r5, #16]
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	4631      	mov	r1, r6
 8012a4e:	4628      	mov	r0, r5
 8012a50:	f7f7 f88c 	bl	8009b6c <ucdr_check_final_buffer_behavior_array>
 8012a54:	4604      	mov	r4, r0
 8012a56:	1bb8      	subs	r0, r7, r6
 8012a58:	4440      	add	r0, r8
 8012a5a:	4622      	mov	r2, r4
 8012a5c:	2c00      	cmp	r4, #0
 8012a5e:	d1ea      	bne.n	8012a36 <ucdr_deserialize_array_uint8_t+0x16>
 8012a60:	2301      	movs	r3, #1
 8012a62:	7da8      	ldrb	r0, [r5, #22]
 8012a64:	756b      	strb	r3, [r5, #21]
 8012a66:	4058      	eors	r0, r3
 8012a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a6c:	463a      	mov	r2, r7
 8012a6e:	68a9      	ldr	r1, [r5, #8]
 8012a70:	4640      	mov	r0, r8
 8012a72:	f002 fba2 	bl	80151ba <memcpy>
 8012a76:	68aa      	ldr	r2, [r5, #8]
 8012a78:	692b      	ldr	r3, [r5, #16]
 8012a7a:	443a      	add	r2, r7
 8012a7c:	443b      	add	r3, r7
 8012a7e:	60aa      	str	r2, [r5, #8]
 8012a80:	612b      	str	r3, [r5, #16]
 8012a82:	e7ed      	b.n	8012a60 <ucdr_deserialize_array_uint8_t+0x40>

08012a84 <ucdr_deserialize_endian_array_uint8_t>:
 8012a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a88:	4619      	mov	r1, r3
 8012a8a:	461f      	mov	r7, r3
 8012a8c:	4605      	mov	r5, r0
 8012a8e:	4690      	mov	r8, r2
 8012a90:	f7f6 ffe4 	bl	8009a5c <ucdr_check_buffer_available_for>
 8012a94:	b9e0      	cbnz	r0, 8012ad0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012a96:	463e      	mov	r6, r7
 8012a98:	e009      	b.n	8012aae <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012a9a:	68a9      	ldr	r1, [r5, #8]
 8012a9c:	f002 fb8d 	bl	80151ba <memcpy>
 8012aa0:	68ab      	ldr	r3, [r5, #8]
 8012aa2:	6928      	ldr	r0, [r5, #16]
 8012aa4:	4423      	add	r3, r4
 8012aa6:	4420      	add	r0, r4
 8012aa8:	1b36      	subs	r6, r6, r4
 8012aaa:	60ab      	str	r3, [r5, #8]
 8012aac:	6128      	str	r0, [r5, #16]
 8012aae:	2201      	movs	r2, #1
 8012ab0:	4631      	mov	r1, r6
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	f7f7 f85a 	bl	8009b6c <ucdr_check_final_buffer_behavior_array>
 8012ab8:	4604      	mov	r4, r0
 8012aba:	1bb8      	subs	r0, r7, r6
 8012abc:	4440      	add	r0, r8
 8012abe:	4622      	mov	r2, r4
 8012ac0:	2c00      	cmp	r4, #0
 8012ac2:	d1ea      	bne.n	8012a9a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	7da8      	ldrb	r0, [r5, #22]
 8012ac8:	756b      	strb	r3, [r5, #21]
 8012aca:	4058      	eors	r0, r3
 8012acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad0:	463a      	mov	r2, r7
 8012ad2:	68a9      	ldr	r1, [r5, #8]
 8012ad4:	4640      	mov	r0, r8
 8012ad6:	f002 fb70 	bl	80151ba <memcpy>
 8012ada:	68aa      	ldr	r2, [r5, #8]
 8012adc:	692b      	ldr	r3, [r5, #16]
 8012ade:	443a      	add	r2, r7
 8012ae0:	443b      	add	r3, r7
 8012ae2:	60aa      	str	r2, [r5, #8]
 8012ae4:	612b      	str	r3, [r5, #16]
 8012ae6:	e7ed      	b.n	8012ac4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012ae8 <ucdr_serialize_sequence_char>:
 8012ae8:	b570      	push	{r4, r5, r6, lr}
 8012aea:	4615      	mov	r5, r2
 8012aec:	460e      	mov	r6, r1
 8012aee:	7d01      	ldrb	r1, [r0, #20]
 8012af0:	4604      	mov	r4, r0
 8012af2:	f7f6 f973 	bl	8008ddc <ucdr_serialize_endian_uint32_t>
 8012af6:	b90d      	cbnz	r5, 8012afc <ucdr_serialize_sequence_char+0x14>
 8012af8:	2001      	movs	r0, #1
 8012afa:	bd70      	pop	{r4, r5, r6, pc}
 8012afc:	7d21      	ldrb	r1, [r4, #20]
 8012afe:	462b      	mov	r3, r5
 8012b00:	4632      	mov	r2, r6
 8012b02:	4620      	mov	r0, r4
 8012b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b08:	f7ff bec2 	b.w	8012890 <ucdr_serialize_endian_array_char>

08012b0c <ucdr_deserialize_sequence_char>:
 8012b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b10:	461d      	mov	r5, r3
 8012b12:	4616      	mov	r6, r2
 8012b14:	460f      	mov	r7, r1
 8012b16:	461a      	mov	r2, r3
 8012b18:	7d01      	ldrb	r1, [r0, #20]
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	f7f6 fa86 	bl	800902c <ucdr_deserialize_endian_uint32_t>
 8012b20:	682b      	ldr	r3, [r5, #0]
 8012b22:	429e      	cmp	r6, r3
 8012b24:	bf3c      	itt	cc
 8012b26:	2201      	movcc	r2, #1
 8012b28:	75a2      	strbcc	r2, [r4, #22]
 8012b2a:	b913      	cbnz	r3, 8012b32 <ucdr_deserialize_sequence_char+0x26>
 8012b2c:	2001      	movs	r0, #1
 8012b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b32:	7d21      	ldrb	r1, [r4, #20]
 8012b34:	463a      	mov	r2, r7
 8012b36:	4620      	mov	r0, r4
 8012b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b3c:	f7ff beda 	b.w	80128f4 <ucdr_deserialize_endian_array_char>

08012b40 <ucdr_serialize_sequence_uint8_t>:
 8012b40:	b570      	push	{r4, r5, r6, lr}
 8012b42:	4615      	mov	r5, r2
 8012b44:	460e      	mov	r6, r1
 8012b46:	7d01      	ldrb	r1, [r0, #20]
 8012b48:	4604      	mov	r4, r0
 8012b4a:	f7f6 f947 	bl	8008ddc <ucdr_serialize_endian_uint32_t>
 8012b4e:	b90d      	cbnz	r5, 8012b54 <ucdr_serialize_sequence_uint8_t+0x14>
 8012b50:	2001      	movs	r0, #1
 8012b52:	bd70      	pop	{r4, r5, r6, pc}
 8012b54:	7d21      	ldrb	r1, [r4, #20]
 8012b56:	462b      	mov	r3, r5
 8012b58:	4632      	mov	r2, r6
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b60:	f7ff bf2c 	b.w	80129bc <ucdr_serialize_endian_array_uint8_t>

08012b64 <ucdr_deserialize_sequence_uint8_t>:
 8012b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b68:	461d      	mov	r5, r3
 8012b6a:	4616      	mov	r6, r2
 8012b6c:	460f      	mov	r7, r1
 8012b6e:	461a      	mov	r2, r3
 8012b70:	7d01      	ldrb	r1, [r0, #20]
 8012b72:	4604      	mov	r4, r0
 8012b74:	f7f6 fa5a 	bl	800902c <ucdr_deserialize_endian_uint32_t>
 8012b78:	682b      	ldr	r3, [r5, #0]
 8012b7a:	429e      	cmp	r6, r3
 8012b7c:	bf3c      	itt	cc
 8012b7e:	2201      	movcc	r2, #1
 8012b80:	75a2      	strbcc	r2, [r4, #22]
 8012b82:	b913      	cbnz	r3, 8012b8a <ucdr_deserialize_sequence_uint8_t+0x26>
 8012b84:	2001      	movs	r0, #1
 8012b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b8a:	7d21      	ldrb	r1, [r4, #20]
 8012b8c:	463a      	mov	r2, r7
 8012b8e:	4620      	mov	r0, r4
 8012b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b94:	f7ff bf76 	b.w	8012a84 <ucdr_deserialize_endian_array_uint8_t>

08012b98 <ucdr_serialize_string>:
 8012b98:	b510      	push	{r4, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	4608      	mov	r0, r1
 8012ba0:	9101      	str	r1, [sp, #4]
 8012ba2:	f7ed fb27 	bl	80001f4 <strlen>
 8012ba6:	9901      	ldr	r1, [sp, #4]
 8012ba8:	1c42      	adds	r2, r0, #1
 8012baa:	4620      	mov	r0, r4
 8012bac:	b002      	add	sp, #8
 8012bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bb2:	f7ff bf99 	b.w	8012ae8 <ucdr_serialize_sequence_char>
 8012bb6:	bf00      	nop

08012bb8 <ucdr_deserialize_string>:
 8012bb8:	b500      	push	{lr}
 8012bba:	b083      	sub	sp, #12
 8012bbc:	ab01      	add	r3, sp, #4
 8012bbe:	f7ff ffa5 	bl	8012b0c <ucdr_deserialize_sequence_char>
 8012bc2:	b003      	add	sp, #12
 8012bc4:	f85d fb04 	ldr.w	pc, [sp], #4

08012bc8 <get_custom_error>:
 8012bc8:	4b01      	ldr	r3, [pc, #4]	; (8012bd0 <get_custom_error+0x8>)
 8012bca:	7818      	ldrb	r0, [r3, #0]
 8012bcc:	4770      	bx	lr
 8012bce:	bf00      	nop
 8012bd0:	2000dc48 	.word	0x2000dc48

08012bd4 <recv_custom_msg>:
 8012bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bd8:	4693      	mov	fp, r2
 8012bda:	b089      	sub	sp, #36	; 0x24
 8012bdc:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8012be0:	9305      	str	r3, [sp, #20]
 8012be2:	468a      	mov	sl, r1
 8012be4:	2100      	movs	r1, #0
 8012be6:	4604      	mov	r4, r0
 8012be8:	f88d 101e 	strb.w	r1, [sp, #30]
 8012bec:	b322      	cbz	r2, 8012c38 <recv_custom_msg+0x64>
 8012bee:	f200 2902 	addw	r9, r0, #514	; 0x202
 8012bf2:	f10d 081f 	add.w	r8, sp, #31
 8012bf6:	af05      	add	r7, sp, #20
 8012bf8:	f10d 061e 	add.w	r6, sp, #30
 8012bfc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012c00:	e002      	b.n	8012c08 <recv_custom_msg+0x34>
 8012c02:	9b05      	ldr	r3, [sp, #20]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	dd0f      	ble.n	8012c28 <recv_custom_msg+0x54>
 8012c08:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8012c0c:	4623      	mov	r3, r4
 8012c0e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012c12:	e9cd 5600 	strd	r5, r6, [sp]
 8012c16:	4622      	mov	r2, r4
 8012c18:	4648      	mov	r0, r9
 8012c1a:	f000 ffdd 	bl	8013bd8 <uxr_read_framed_msg>
 8012c1e:	2800      	cmp	r0, #0
 8012c20:	d0ef      	beq.n	8012c02 <recv_custom_msg+0x2e>
 8012c22:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012c26:	b1b3      	cbz	r3, 8012c56 <recv_custom_msg+0x82>
 8012c28:	4b0f      	ldr	r3, [pc, #60]	; (8012c68 <recv_custom_msg+0x94>)
 8012c2a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012c2e:	701a      	strb	r2, [r3, #0]
 8012c30:	2000      	movs	r0, #0
 8012c32:	b009      	add	sp, #36	; 0x24
 8012c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c38:	f10d 021f 	add.w	r2, sp, #31
 8012c3c:	9200      	str	r2, [sp, #0]
 8012c3e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8012c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c46:	4601      	mov	r1, r0
 8012c48:	47a8      	blx	r5
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	d0ec      	beq.n	8012c28 <recv_custom_msg+0x54>
 8012c4e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d1e8      	bne.n	8012c28 <recv_custom_msg+0x54>
 8012c56:	f8cb 0000 	str.w	r0, [fp]
 8012c5a:	2001      	movs	r0, #1
 8012c5c:	f8ca 4000 	str.w	r4, [sl]
 8012c60:	b009      	add	sp, #36	; 0x24
 8012c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c66:	bf00      	nop
 8012c68:	2000dc48 	.word	0x2000dc48

08012c6c <send_custom_msg>:
 8012c6c:	b530      	push	{r4, r5, lr}
 8012c6e:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8012c72:	b087      	sub	sp, #28
 8012c74:	4615      	mov	r5, r2
 8012c76:	b974      	cbnz	r4, 8012c96 <send_custom_msg+0x2a>
 8012c78:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8012c7c:	f10d 0317 	add.w	r3, sp, #23
 8012c80:	47a0      	blx	r4
 8012c82:	b108      	cbz	r0, 8012c88 <send_custom_msg+0x1c>
 8012c84:	42a8      	cmp	r0, r5
 8012c86:	d015      	beq.n	8012cb4 <send_custom_msg+0x48>
 8012c88:	4b0c      	ldr	r3, [pc, #48]	; (8012cbc <send_custom_msg+0x50>)
 8012c8a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012c8e:	701a      	strb	r2, [r3, #0]
 8012c90:	2000      	movs	r0, #0
 8012c92:	b007      	add	sp, #28
 8012c94:	bd30      	pop	{r4, r5, pc}
 8012c96:	460b      	mov	r3, r1
 8012c98:	2200      	movs	r2, #0
 8012c9a:	f10d 0117 	add.w	r1, sp, #23
 8012c9e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012ca2:	4602      	mov	r2, r0
 8012ca4:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8012ca8:	9500      	str	r5, [sp, #0]
 8012caa:	f200 2002 	addw	r0, r0, #514	; 0x202
 8012cae:	f000 fd9b 	bl	80137e8 <uxr_write_framed_msg>
 8012cb2:	e7e6      	b.n	8012c82 <send_custom_msg+0x16>
 8012cb4:	2001      	movs	r0, #1
 8012cb6:	b007      	add	sp, #28
 8012cb8:	bd30      	pop	{r4, r5, pc}
 8012cba:	bf00      	nop
 8012cbc:	2000dc48 	.word	0x2000dc48

08012cc0 <uxr_set_custom_transport_callbacks>:
 8012cc0:	b410      	push	{r4}
 8012cc2:	9c01      	ldr	r4, [sp, #4]
 8012cc4:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8012cc8:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8012ccc:	9b02      	ldr	r3, [sp, #8]
 8012cce:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8012cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cd6:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8012cda:	4770      	bx	lr

08012cdc <uxr_init_custom_transport>:
 8012cdc:	b538      	push	{r3, r4, r5, lr}
 8012cde:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8012ce2:	b303      	cbz	r3, 8012d26 <uxr_init_custom_transport+0x4a>
 8012ce4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8012ce8:	4604      	mov	r4, r0
 8012cea:	b1e2      	cbz	r2, 8012d26 <uxr_init_custom_transport+0x4a>
 8012cec:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8012cf0:	b1ca      	cbz	r2, 8012d26 <uxr_init_custom_transport+0x4a>
 8012cf2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8012cf6:	b1b2      	cbz	r2, 8012d26 <uxr_init_custom_transport+0x4a>
 8012cf8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8012cfc:	4798      	blx	r3
 8012cfe:	4605      	mov	r5, r0
 8012d00:	b188      	cbz	r0, 8012d26 <uxr_init_custom_transport+0x4a>
 8012d02:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8012d06:	b98b      	cbnz	r3, 8012d2c <uxr_init_custom_transport+0x50>
 8012d08:	490b      	ldr	r1, [pc, #44]	; (8012d38 <uxr_init_custom_transport+0x5c>)
 8012d0a:	4b0c      	ldr	r3, [pc, #48]	; (8012d3c <uxr_init_custom_transport+0x60>)
 8012d0c:	4a0c      	ldr	r2, [pc, #48]	; (8012d40 <uxr_init_custom_transport+0x64>)
 8012d0e:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8012d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d16:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8012d1a:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8012d1e:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8012d22:	4628      	mov	r0, r5
 8012d24:	bd38      	pop	{r3, r4, r5, pc}
 8012d26:	2500      	movs	r5, #0
 8012d28:	4628      	mov	r0, r5
 8012d2a:	bd38      	pop	{r3, r4, r5, pc}
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	f204 2002 	addw	r0, r4, #514	; 0x202
 8012d32:	f000 fd53 	bl	80137dc <uxr_init_framing_io>
 8012d36:	e7e7      	b.n	8012d08 <uxr_init_custom_transport+0x2c>
 8012d38:	08012c6d 	.word	0x08012c6d
 8012d3c:	08012bd5 	.word	0x08012bd5
 8012d40:	08012bc9 	.word	0x08012bc9

08012d44 <uxr_close_custom_transport>:
 8012d44:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8012d48:	4718      	bx	r3
 8012d4a:	bf00      	nop

08012d4c <uxr_init_input_best_effort_stream>:
 8012d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d50:	8003      	strh	r3, [r0, #0]
 8012d52:	4770      	bx	lr

08012d54 <uxr_reset_input_best_effort_stream>:
 8012d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d58:	8003      	strh	r3, [r0, #0]
 8012d5a:	4770      	bx	lr

08012d5c <uxr_receive_best_effort_message>:
 8012d5c:	b538      	push	{r3, r4, r5, lr}
 8012d5e:	4604      	mov	r4, r0
 8012d60:	8800      	ldrh	r0, [r0, #0]
 8012d62:	460d      	mov	r5, r1
 8012d64:	f000 fd22 	bl	80137ac <uxr_seq_num_cmp>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8012d70:	bfb8      	it	lt
 8012d72:	8025      	strhlt	r5, [r4, #0]
 8012d74:	bd38      	pop	{r3, r4, r5, pc}
 8012d76:	bf00      	nop

08012d78 <on_full_input_buffer>:
 8012d78:	b570      	push	{r4, r5, r6, lr}
 8012d7a:	4605      	mov	r5, r0
 8012d7c:	460c      	mov	r4, r1
 8012d7e:	682b      	ldr	r3, [r5, #0]
 8012d80:	6809      	ldr	r1, [r1, #0]
 8012d82:	8920      	ldrh	r0, [r4, #8]
 8012d84:	6862      	ldr	r2, [r4, #4]
 8012d86:	fbb2 f2f0 	udiv	r2, r2, r0
 8012d8a:	eba3 0c01 	sub.w	ip, r3, r1
 8012d8e:	fbbc fcf2 	udiv	ip, ip, r2
 8012d92:	f10c 0c01 	add.w	ip, ip, #1
 8012d96:	fa1f f38c 	uxth.w	r3, ip
 8012d9a:	fbb3 f6f0 	udiv	r6, r3, r0
 8012d9e:	fb00 3316 	mls	r3, r0, r6, r3
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	fb02 f303 	mul.w	r3, r2, r3
 8012da8:	1d18      	adds	r0, r3, #4
 8012daa:	4408      	add	r0, r1
 8012dac:	7d26      	ldrb	r6, [r4, #20]
 8012dae:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012db2:	b116      	cbz	r6, 8012dba <on_full_input_buffer+0x42>
 8012db4:	2600      	movs	r6, #0
 8012db6:	f840 6c04 	str.w	r6, [r0, #-4]
 8012dba:	2a03      	cmp	r2, #3
 8012dbc:	d801      	bhi.n	8012dc2 <on_full_input_buffer+0x4a>
 8012dbe:	2001      	movs	r0, #1
 8012dc0:	bd70      	pop	{r4, r5, r6, pc}
 8012dc2:	3308      	adds	r3, #8
 8012dc4:	4419      	add	r1, r3
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	692b      	ldr	r3, [r5, #16]
 8012dca:	3a04      	subs	r2, #4
 8012dcc:	f7f6 fe92 	bl	8009af4 <ucdr_init_buffer_origin>
 8012dd0:	4628      	mov	r0, r5
 8012dd2:	4903      	ldr	r1, [pc, #12]	; (8012de0 <on_full_input_buffer+0x68>)
 8012dd4:	4622      	mov	r2, r4
 8012dd6:	f7f6 fe69 	bl	8009aac <ucdr_set_on_full_buffer_callback>
 8012dda:	2000      	movs	r0, #0
 8012ddc:	bd70      	pop	{r4, r5, r6, pc}
 8012dde:	bf00      	nop
 8012de0:	08012d79 	.word	0x08012d79

08012de4 <uxr_init_input_reliable_stream>:
 8012de4:	b500      	push	{lr}
 8012de6:	e9c0 1200 	strd	r1, r2, [r0]
 8012dea:	f04f 0e00 	mov.w	lr, #0
 8012dee:	9a01      	ldr	r2, [sp, #4]
 8012df0:	8103      	strh	r3, [r0, #8]
 8012df2:	6102      	str	r2, [r0, #16]
 8012df4:	f880 e014 	strb.w	lr, [r0, #20]
 8012df8:	b1d3      	cbz	r3, 8012e30 <uxr_init_input_reliable_stream+0x4c>
 8012dfa:	f8c1 e000 	str.w	lr, [r1]
 8012dfe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012e02:	f1bc 0f01 	cmp.w	ip, #1
 8012e06:	d913      	bls.n	8012e30 <uxr_init_input_reliable_stream+0x4c>
 8012e08:	2301      	movs	r3, #1
 8012e0a:	fbb3 f1fc 	udiv	r1, r3, ip
 8012e0e:	fb0c 3111 	mls	r1, ip, r1, r3
 8012e12:	b289      	uxth	r1, r1
 8012e14:	6842      	ldr	r2, [r0, #4]
 8012e16:	fbb2 f2fc 	udiv	r2, r2, ip
 8012e1a:	fb01 f202 	mul.w	r2, r1, r2
 8012e1e:	6801      	ldr	r1, [r0, #0]
 8012e20:	f841 e002 	str.w	lr, [r1, r2]
 8012e24:	3301      	adds	r3, #1
 8012e26:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	459c      	cmp	ip, r3
 8012e2e:	d8ec      	bhi.n	8012e0a <uxr_init_input_reliable_stream+0x26>
 8012e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e34:	60c3      	str	r3, [r0, #12]
 8012e36:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e3a:	bf00      	nop

08012e3c <uxr_reset_input_reliable_stream>:
 8012e3c:	8901      	ldrh	r1, [r0, #8]
 8012e3e:	b1e9      	cbz	r1, 8012e7c <uxr_reset_input_reliable_stream+0x40>
 8012e40:	f04f 0c00 	mov.w	ip, #0
 8012e44:	b500      	push	{lr}
 8012e46:	4663      	mov	r3, ip
 8012e48:	46e6      	mov	lr, ip
 8012e4a:	fbb3 f2f1 	udiv	r2, r3, r1
 8012e4e:	fb01 3312 	mls	r3, r1, r2, r3
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	6842      	ldr	r2, [r0, #4]
 8012e56:	fbb2 f2f1 	udiv	r2, r2, r1
 8012e5a:	fb02 f303 	mul.w	r3, r2, r3
 8012e5e:	6802      	ldr	r2, [r0, #0]
 8012e60:	f842 e003 	str.w	lr, [r2, r3]
 8012e64:	f10c 0c01 	add.w	ip, ip, #1
 8012e68:	8901      	ldrh	r1, [r0, #8]
 8012e6a:	fa1f f38c 	uxth.w	r3, ip
 8012e6e:	4299      	cmp	r1, r3
 8012e70:	d8eb      	bhi.n	8012e4a <uxr_reset_input_reliable_stream+0xe>
 8012e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e76:	60c3      	str	r3, [r0, #12]
 8012e78:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e80:	60c3      	str	r3, [r0, #12]
 8012e82:	4770      	bx	lr

08012e84 <uxr_receive_reliable_message>:
 8012e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e88:	4604      	mov	r4, r0
 8012e8a:	460d      	mov	r5, r1
 8012e8c:	8901      	ldrh	r1, [r0, #8]
 8012e8e:	8980      	ldrh	r0, [r0, #12]
 8012e90:	4690      	mov	r8, r2
 8012e92:	461f      	mov	r7, r3
 8012e94:	f000 fc82 	bl	801379c <uxr_seq_num_add>
 8012e98:	4629      	mov	r1, r5
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	89a0      	ldrh	r0, [r4, #12]
 8012e9e:	f000 fc85 	bl	80137ac <uxr_seq_num_cmp>
 8012ea2:	2800      	cmp	r0, #0
 8012ea4:	db0a      	blt.n	8012ebc <uxr_receive_reliable_message+0x38>
 8012ea6:	2600      	movs	r6, #0
 8012ea8:	89e0      	ldrh	r0, [r4, #14]
 8012eaa:	4629      	mov	r1, r5
 8012eac:	f000 fc7e 	bl	80137ac <uxr_seq_num_cmp>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	da00      	bge.n	8012eb6 <uxr_receive_reliable_message+0x32>
 8012eb4:	81e5      	strh	r5, [r4, #14]
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ebc:	4630      	mov	r0, r6
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	f000 fc74 	bl	80137ac <uxr_seq_num_cmp>
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	dbee      	blt.n	8012ea6 <uxr_receive_reliable_message+0x22>
 8012ec8:	6923      	ldr	r3, [r4, #16]
 8012eca:	4640      	mov	r0, r8
 8012ecc:	4798      	blx	r3
 8012ece:	2101      	movs	r1, #1
 8012ed0:	4681      	mov	r9, r0
 8012ed2:	89a0      	ldrh	r0, [r4, #12]
 8012ed4:	f000 fc62 	bl	801379c <uxr_seq_num_add>
 8012ed8:	f1b9 0f00 	cmp.w	r9, #0
 8012edc:	d101      	bne.n	8012ee2 <uxr_receive_reliable_message+0x5e>
 8012ede:	4285      	cmp	r5, r0
 8012ee0:	d047      	beq.n	8012f72 <uxr_receive_reliable_message+0xee>
 8012ee2:	8922      	ldrh	r2, [r4, #8]
 8012ee4:	fbb5 f0f2 	udiv	r0, r5, r2
 8012ee8:	fb02 5010 	mls	r0, r2, r0, r5
 8012eec:	b280      	uxth	r0, r0
 8012eee:	6863      	ldr	r3, [r4, #4]
 8012ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ef4:	fb00 f303 	mul.w	r3, r0, r3
 8012ef8:	6820      	ldr	r0, [r4, #0]
 8012efa:	3304      	adds	r3, #4
 8012efc:	4418      	add	r0, r3
 8012efe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d1cf      	bne.n	8012ea6 <uxr_receive_reliable_message+0x22>
 8012f06:	4641      	mov	r1, r8
 8012f08:	463a      	mov	r2, r7
 8012f0a:	f002 f956 	bl	80151ba <memcpy>
 8012f0e:	8921      	ldrh	r1, [r4, #8]
 8012f10:	fbb5 f2f1 	udiv	r2, r5, r1
 8012f14:	fb01 5212 	mls	r2, r1, r2, r5
 8012f18:	b292      	uxth	r2, r2
 8012f1a:	6863      	ldr	r3, [r4, #4]
 8012f1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f20:	fb02 f303 	mul.w	r3, r2, r3
 8012f24:	6822      	ldr	r2, [r4, #0]
 8012f26:	50d7      	str	r7, [r2, r3]
 8012f28:	9a08      	ldr	r2, [sp, #32]
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	7013      	strb	r3, [r2, #0]
 8012f2e:	f1b9 0f00 	cmp.w	r9, #0
 8012f32:	d0b8      	beq.n	8012ea6 <uxr_receive_reliable_message+0x22>
 8012f34:	89a6      	ldrh	r6, [r4, #12]
 8012f36:	4630      	mov	r0, r6
 8012f38:	2101      	movs	r1, #1
 8012f3a:	f000 fc2f 	bl	801379c <uxr_seq_num_add>
 8012f3e:	8922      	ldrh	r2, [r4, #8]
 8012f40:	6863      	ldr	r3, [r4, #4]
 8012f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f46:	4606      	mov	r6, r0
 8012f48:	fbb0 f0f2 	udiv	r0, r0, r2
 8012f4c:	fb02 6010 	mls	r0, r2, r0, r6
 8012f50:	b280      	uxth	r0, r0
 8012f52:	fb00 f303 	mul.w	r3, r0, r3
 8012f56:	6820      	ldr	r0, [r4, #0]
 8012f58:	3304      	adds	r3, #4
 8012f5a:	4418      	add	r0, r3
 8012f5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d0a0      	beq.n	8012ea6 <uxr_receive_reliable_message+0x22>
 8012f64:	6923      	ldr	r3, [r4, #16]
 8012f66:	4798      	blx	r3
 8012f68:	2802      	cmp	r0, #2
 8012f6a:	d008      	beq.n	8012f7e <uxr_receive_reliable_message+0xfa>
 8012f6c:	2801      	cmp	r0, #1
 8012f6e:	d0e2      	beq.n	8012f36 <uxr_receive_reliable_message+0xb2>
 8012f70:	e799      	b.n	8012ea6 <uxr_receive_reliable_message+0x22>
 8012f72:	9b08      	ldr	r3, [sp, #32]
 8012f74:	81a5      	strh	r5, [r4, #12]
 8012f76:	2601      	movs	r6, #1
 8012f78:	f883 9000 	strb.w	r9, [r3]
 8012f7c:	e794      	b.n	8012ea8 <uxr_receive_reliable_message+0x24>
 8012f7e:	2601      	movs	r6, #1
 8012f80:	e792      	b.n	8012ea8 <uxr_receive_reliable_message+0x24>
 8012f82:	bf00      	nop

08012f84 <uxr_next_input_reliable_buffer_available>:
 8012f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f88:	4604      	mov	r4, r0
 8012f8a:	460f      	mov	r7, r1
 8012f8c:	8980      	ldrh	r0, [r0, #12]
 8012f8e:	2101      	movs	r1, #1
 8012f90:	4690      	mov	r8, r2
 8012f92:	f000 fc03 	bl	801379c <uxr_seq_num_add>
 8012f96:	8922      	ldrh	r2, [r4, #8]
 8012f98:	fbb0 f6f2 	udiv	r6, r0, r2
 8012f9c:	fb02 0616 	mls	r6, r2, r6, r0
 8012fa0:	b2b6      	uxth	r6, r6
 8012fa2:	6863      	ldr	r3, [r4, #4]
 8012fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fa8:	fb06 f303 	mul.w	r3, r6, r3
 8012fac:	6826      	ldr	r6, [r4, #0]
 8012fae:	3304      	adds	r3, #4
 8012fb0:	441e      	add	r6, r3
 8012fb2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8012fb6:	f1b9 0f00 	cmp.w	r9, #0
 8012fba:	d023      	beq.n	8013004 <uxr_next_input_reliable_buffer_available+0x80>
 8012fbc:	6923      	ldr	r3, [r4, #16]
 8012fbe:	4605      	mov	r5, r0
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	4798      	blx	r3
 8012fc4:	4682      	mov	sl, r0
 8012fc6:	b300      	cbz	r0, 801300a <uxr_next_input_reliable_buffer_available+0x86>
 8012fc8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8012fcc:	2101      	movs	r1, #1
 8012fce:	4650      	mov	r0, sl
 8012fd0:	f000 fbe4 	bl	801379c <uxr_seq_num_add>
 8012fd4:	8921      	ldrh	r1, [r4, #8]
 8012fd6:	fbb0 f2f1 	udiv	r2, r0, r1
 8012fda:	4682      	mov	sl, r0
 8012fdc:	fb01 0212 	mls	r2, r1, r2, r0
 8012fe0:	e9d4 0300 	ldrd	r0, r3, [r4]
 8012fe4:	b292      	uxth	r2, r2
 8012fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8012fea:	fb02 f303 	mul.w	r3, r2, r3
 8012fee:	3304      	adds	r3, #4
 8012ff0:	4418      	add	r0, r3
 8012ff2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012ff6:	b12b      	cbz	r3, 8013004 <uxr_next_input_reliable_buffer_available+0x80>
 8012ff8:	6923      	ldr	r3, [r4, #16]
 8012ffa:	4798      	blx	r3
 8012ffc:	2802      	cmp	r0, #2
 8012ffe:	d01b      	beq.n	8013038 <uxr_next_input_reliable_buffer_available+0xb4>
 8013000:	2801      	cmp	r0, #1
 8013002:	d0e3      	beq.n	8012fcc <uxr_next_input_reliable_buffer_available+0x48>
 8013004:	2000      	movs	r0, #0
 8013006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801300a:	464a      	mov	r2, r9
 801300c:	4631      	mov	r1, r6
 801300e:	4638      	mov	r0, r7
 8013010:	f7f6 fd78 	bl	8009b04 <ucdr_init_buffer>
 8013014:	8921      	ldrh	r1, [r4, #8]
 8013016:	fbb5 f2f1 	udiv	r2, r5, r1
 801301a:	fb01 5212 	mls	r2, r1, r2, r5
 801301e:	b292      	uxth	r2, r2
 8013020:	6863      	ldr	r3, [r4, #4]
 8013022:	fbb3 f3f1 	udiv	r3, r3, r1
 8013026:	fb02 f303 	mul.w	r3, r2, r3
 801302a:	6822      	ldr	r2, [r4, #0]
 801302c:	f842 a003 	str.w	sl, [r2, r3]
 8013030:	2001      	movs	r0, #1
 8013032:	81a5      	strh	r5, [r4, #12]
 8013034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013038:	8920      	ldrh	r0, [r4, #8]
 801303a:	fbb5 f3f0 	udiv	r3, r5, r0
 801303e:	fb00 5513 	mls	r5, r0, r3, r5
 8013042:	b2ad      	uxth	r5, r5
 8013044:	6863      	ldr	r3, [r4, #4]
 8013046:	fbb3 f3f0 	udiv	r3, r3, r0
 801304a:	fb03 f505 	mul.w	r5, r3, r5
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	2000      	movs	r0, #0
 8013052:	5158      	str	r0, [r3, r5]
 8013054:	eb06 0108 	add.w	r1, r6, r8
 8013058:	eba9 0208 	sub.w	r2, r9, r8
 801305c:	4638      	mov	r0, r7
 801305e:	f7f6 fd51 	bl	8009b04 <ucdr_init_buffer>
 8013062:	4638      	mov	r0, r7
 8013064:	4903      	ldr	r1, [pc, #12]	; (8013074 <uxr_next_input_reliable_buffer_available+0xf0>)
 8013066:	4622      	mov	r2, r4
 8013068:	f7f6 fd20 	bl	8009aac <ucdr_set_on_full_buffer_callback>
 801306c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013070:	2001      	movs	r0, #1
 8013072:	e7c8      	b.n	8013006 <uxr_next_input_reliable_buffer_available+0x82>
 8013074:	08012d79 	.word	0x08012d79

08013078 <uxr_process_heartbeat>:
 8013078:	b538      	push	{r3, r4, r5, lr}
 801307a:	4611      	mov	r1, r2
 801307c:	4604      	mov	r4, r0
 801307e:	89c0      	ldrh	r0, [r0, #14]
 8013080:	4615      	mov	r5, r2
 8013082:	f000 fb93 	bl	80137ac <uxr_seq_num_cmp>
 8013086:	2800      	cmp	r0, #0
 8013088:	bfb8      	it	lt
 801308a:	81e5      	strhlt	r5, [r4, #14]
 801308c:	bd38      	pop	{r3, r4, r5, pc}
 801308e:	bf00      	nop

08013090 <uxr_compute_acknack>:
 8013090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013094:	8903      	ldrh	r3, [r0, #8]
 8013096:	8985      	ldrh	r5, [r0, #12]
 8013098:	4604      	mov	r4, r0
 801309a:	460e      	mov	r6, r1
 801309c:	b1d3      	cbz	r3, 80130d4 <uxr_compute_acknack+0x44>
 801309e:	4628      	mov	r0, r5
 80130a0:	2701      	movs	r7, #1
 80130a2:	e003      	b.n	80130ac <uxr_compute_acknack+0x1c>
 80130a4:	4567      	cmp	r7, ip
 80130a6:	d215      	bcs.n	80130d4 <uxr_compute_acknack+0x44>
 80130a8:	89a0      	ldrh	r0, [r4, #12]
 80130aa:	3701      	adds	r7, #1
 80130ac:	b2b9      	uxth	r1, r7
 80130ae:	f000 fb75 	bl	801379c <uxr_seq_num_add>
 80130b2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80130b6:	fbb0 f3fc 	udiv	r3, r0, ip
 80130ba:	fb0c 0313 	mls	r3, ip, r3, r0
 80130be:	b29a      	uxth	r2, r3
 80130c0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80130c4:	fbb3 f3fc 	udiv	r3, r3, ip
 80130c8:	fb02 f303 	mul.w	r3, r2, r3
 80130cc:	58cb      	ldr	r3, [r1, r3]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d1e8      	bne.n	80130a4 <uxr_compute_acknack+0x14>
 80130d2:	4605      	mov	r5, r0
 80130d4:	8035      	strh	r5, [r6, #0]
 80130d6:	2101      	movs	r1, #1
 80130d8:	4628      	mov	r0, r5
 80130da:	89e7      	ldrh	r7, [r4, #14]
 80130dc:	f000 fb62 	bl	80137a4 <uxr_seq_num_sub>
 80130e0:	4601      	mov	r1, r0
 80130e2:	4638      	mov	r0, r7
 80130e4:	f000 fb5e 	bl	80137a4 <uxr_seq_num_sub>
 80130e8:	4605      	mov	r5, r0
 80130ea:	b318      	cbz	r0, 8013134 <uxr_compute_acknack+0xa4>
 80130ec:	f04f 0900 	mov.w	r9, #0
 80130f0:	464f      	mov	r7, r9
 80130f2:	f04f 0801 	mov.w	r8, #1
 80130f6:	fa1f f189 	uxth.w	r1, r9
 80130fa:	8830      	ldrh	r0, [r6, #0]
 80130fc:	f000 fb4e 	bl	801379c <uxr_seq_num_add>
 8013100:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013104:	fbb0 f3fc 	udiv	r3, r0, ip
 8013108:	e9d4 1200 	ldrd	r1, r2, [r4]
 801310c:	fb03 001c 	mls	r0, r3, ip, r0
 8013110:	b283      	uxth	r3, r0
 8013112:	fbb2 f2fc 	udiv	r2, r2, ip
 8013116:	fb02 f303 	mul.w	r3, r2, r3
 801311a:	fa08 f209 	lsl.w	r2, r8, r9
 801311e:	58cb      	ldr	r3, [r1, r3]
 8013120:	f109 0901 	add.w	r9, r9, #1
 8013124:	b90b      	cbnz	r3, 801312a <uxr_compute_acknack+0x9a>
 8013126:	4317      	orrs	r7, r2
 8013128:	b2bf      	uxth	r7, r7
 801312a:	454d      	cmp	r5, r9
 801312c:	d1e3      	bne.n	80130f6 <uxr_compute_acknack+0x66>
 801312e:	4638      	mov	r0, r7
 8013130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013134:	4607      	mov	r7, r0
 8013136:	4638      	mov	r0, r7
 8013138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801313c <uxr_init_output_best_effort_stream>:
 801313c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8013140:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8013144:	6001      	str	r1, [r0, #0]
 8013146:	7303      	strb	r3, [r0, #12]
 8013148:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801314c:	4770      	bx	lr
 801314e:	bf00      	nop

08013150 <uxr_reset_output_best_effort_stream>:
 8013150:	7b02      	ldrb	r2, [r0, #12]
 8013152:	6042      	str	r2, [r0, #4]
 8013154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013158:	81c3      	strh	r3, [r0, #14]
 801315a:	4770      	bx	lr

0801315c <uxr_prepare_best_effort_buffer_to_write>:
 801315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801315e:	4604      	mov	r4, r0
 8013160:	b083      	sub	sp, #12
 8013162:	6840      	ldr	r0, [r0, #4]
 8013164:	460d      	mov	r5, r1
 8013166:	4616      	mov	r6, r2
 8013168:	f7fa febe 	bl	800dee8 <uxr_submessage_padding>
 801316c:	6863      	ldr	r3, [r4, #4]
 801316e:	4418      	add	r0, r3
 8013170:	68a3      	ldr	r3, [r4, #8]
 8013172:	1942      	adds	r2, r0, r5
 8013174:	4293      	cmp	r3, r2
 8013176:	bf2c      	ite	cs
 8013178:	2701      	movcs	r7, #1
 801317a:	2700      	movcc	r7, #0
 801317c:	d202      	bcs.n	8013184 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801317e:	4638      	mov	r0, r7
 8013180:	b003      	add	sp, #12
 8013182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013184:	9000      	str	r0, [sp, #0]
 8013186:	6821      	ldr	r1, [r4, #0]
 8013188:	4630      	mov	r0, r6
 801318a:	2300      	movs	r3, #0
 801318c:	f7f6 fca8 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 8013190:	6861      	ldr	r1, [r4, #4]
 8013192:	4638      	mov	r0, r7
 8013194:	4429      	add	r1, r5
 8013196:	6061      	str	r1, [r4, #4]
 8013198:	b003      	add	sp, #12
 801319a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801319c <uxr_prepare_best_effort_buffer_to_send>:
 801319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131a0:	4604      	mov	r4, r0
 80131a2:	461d      	mov	r5, r3
 80131a4:	6840      	ldr	r0, [r0, #4]
 80131a6:	7b23      	ldrb	r3, [r4, #12]
 80131a8:	4298      	cmp	r0, r3
 80131aa:	bf8c      	ite	hi
 80131ac:	2601      	movhi	r6, #1
 80131ae:	2600      	movls	r6, #0
 80131b0:	d802      	bhi.n	80131b8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80131b2:	4630      	mov	r0, r6
 80131b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b8:	4688      	mov	r8, r1
 80131ba:	89e0      	ldrh	r0, [r4, #14]
 80131bc:	2101      	movs	r1, #1
 80131be:	4617      	mov	r7, r2
 80131c0:	f000 faec 	bl	801379c <uxr_seq_num_add>
 80131c4:	6823      	ldr	r3, [r4, #0]
 80131c6:	81e0      	strh	r0, [r4, #14]
 80131c8:	8028      	strh	r0, [r5, #0]
 80131ca:	f8c8 3000 	str.w	r3, [r8]
 80131ce:	6863      	ldr	r3, [r4, #4]
 80131d0:	603b      	str	r3, [r7, #0]
 80131d2:	7b23      	ldrb	r3, [r4, #12]
 80131d4:	6063      	str	r3, [r4, #4]
 80131d6:	4630      	mov	r0, r6
 80131d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080131dc <on_full_output_buffer>:
 80131dc:	b538      	push	{r3, r4, r5, lr}
 80131de:	6802      	ldr	r2, [r0, #0]
 80131e0:	460c      	mov	r4, r1
 80131e2:	6809      	ldr	r1, [r1, #0]
 80131e4:	8923      	ldrh	r3, [r4, #8]
 80131e6:	eba2 0c01 	sub.w	ip, r2, r1
 80131ea:	6862      	ldr	r2, [r4, #4]
 80131ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80131f0:	fbbc fcf2 	udiv	ip, ip, r2
 80131f4:	f10c 0c01 	add.w	ip, ip, #1
 80131f8:	fa1f fc8c 	uxth.w	ip, ip
 80131fc:	fbbc fef3 	udiv	lr, ip, r3
 8013200:	fb03 c31e 	mls	r3, r3, lr, ip
 8013204:	b29b      	uxth	r3, r3
 8013206:	fb02 f303 	mul.w	r3, r2, r3
 801320a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801320e:	58ca      	ldr	r2, [r1, r3]
 8013210:	4463      	add	r3, ip
 8013212:	eba2 020c 	sub.w	r2, r2, ip
 8013216:	3308      	adds	r3, #8
 8013218:	4605      	mov	r5, r0
 801321a:	4419      	add	r1, r3
 801321c:	3a04      	subs	r2, #4
 801321e:	6903      	ldr	r3, [r0, #16]
 8013220:	f7f6 fc68 	bl	8009af4 <ucdr_init_buffer_origin>
 8013224:	4628      	mov	r0, r5
 8013226:	4903      	ldr	r1, [pc, #12]	; (8013234 <on_full_output_buffer+0x58>)
 8013228:	4622      	mov	r2, r4
 801322a:	f7f6 fc3f 	bl	8009aac <ucdr_set_on_full_buffer_callback>
 801322e:	2000      	movs	r0, #0
 8013230:	bd38      	pop	{r3, r4, r5, pc}
 8013232:	bf00      	nop
 8013234:	080131dd 	.word	0x080131dd

08013238 <uxr_init_output_reliable_stream>:
 8013238:	b410      	push	{r4}
 801323a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801323e:	8103      	strh	r3, [r0, #8]
 8013240:	e9c0 1200 	strd	r1, r2, [r0]
 8013244:	f880 c00c 	strb.w	ip, [r0, #12]
 8013248:	b1d3      	cbz	r3, 8013280 <uxr_init_output_reliable_stream+0x48>
 801324a:	f8c1 c000 	str.w	ip, [r1]
 801324e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013252:	f1bc 0f01 	cmp.w	ip, #1
 8013256:	d913      	bls.n	8013280 <uxr_init_output_reliable_stream+0x48>
 8013258:	2301      	movs	r3, #1
 801325a:	fbb3 f1fc 	udiv	r1, r3, ip
 801325e:	fb0c 3111 	mls	r1, ip, r1, r3
 8013262:	b289      	uxth	r1, r1
 8013264:	6842      	ldr	r2, [r0, #4]
 8013266:	6804      	ldr	r4, [r0, #0]
 8013268:	fbb2 f2fc 	udiv	r2, r2, ip
 801326c:	fb01 f202 	mul.w	r2, r1, r2
 8013270:	7b01      	ldrb	r1, [r0, #12]
 8013272:	50a1      	str	r1, [r4, r2]
 8013274:	3301      	adds	r3, #1
 8013276:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801327a:	b29b      	uxth	r3, r3
 801327c:	459c      	cmp	ip, r3
 801327e:	d8ec      	bhi.n	801325a <uxr_init_output_reliable_stream+0x22>
 8013280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013284:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013288:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801328c:	4905      	ldr	r1, [pc, #20]	; (80132a4 <uxr_init_output_reliable_stream+0x6c>)
 801328e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013292:	f8c0 100e 	str.w	r1, [r0, #14]
 8013296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801329a:	2300      	movs	r3, #0
 801329c:	8242      	strh	r2, [r0, #18]
 801329e:	8403      	strh	r3, [r0, #32]
 80132a0:	4770      	bx	lr
 80132a2:	bf00      	nop
 80132a4:	ffff0000 	.word	0xffff0000

080132a8 <uxr_reset_output_reliable_stream>:
 80132a8:	8901      	ldrh	r1, [r0, #8]
 80132aa:	b1b1      	cbz	r1, 80132da <uxr_reset_output_reliable_stream+0x32>
 80132ac:	f04f 0c00 	mov.w	ip, #0
 80132b0:	4663      	mov	r3, ip
 80132b2:	fbb3 f2f1 	udiv	r2, r3, r1
 80132b6:	fb01 3312 	mls	r3, r1, r2, r3
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	6842      	ldr	r2, [r0, #4]
 80132be:	fbb2 f2f1 	udiv	r2, r2, r1
 80132c2:	6801      	ldr	r1, [r0, #0]
 80132c4:	fb02 f303 	mul.w	r3, r2, r3
 80132c8:	7b02      	ldrb	r2, [r0, #12]
 80132ca:	50ca      	str	r2, [r1, r3]
 80132cc:	f10c 0c01 	add.w	ip, ip, #1
 80132d0:	8901      	ldrh	r1, [r0, #8]
 80132d2:	fa1f f38c 	uxth.w	r3, ip
 80132d6:	4299      	cmp	r1, r3
 80132d8:	d8eb      	bhi.n	80132b2 <uxr_reset_output_reliable_stream+0xa>
 80132da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80132e2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80132e6:	4904      	ldr	r1, [pc, #16]	; (80132f8 <uxr_reset_output_reliable_stream+0x50>)
 80132e8:	f8c0 100e 	str.w	r1, [r0, #14]
 80132ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132f0:	2300      	movs	r3, #0
 80132f2:	8242      	strh	r2, [r0, #18]
 80132f4:	8403      	strh	r3, [r0, #32]
 80132f6:	4770      	bx	lr
 80132f8:	ffff0000 	.word	0xffff0000

080132fc <uxr_prepare_reliable_buffer_to_write>:
 80132fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013300:	4604      	mov	r4, r0
 8013302:	b091      	sub	sp, #68	; 0x44
 8013304:	8900      	ldrh	r0, [r0, #8]
 8013306:	89e6      	ldrh	r6, [r4, #14]
 8013308:	6823      	ldr	r3, [r4, #0]
 801330a:	9204      	str	r2, [sp, #16]
 801330c:	fbb6 f2f0 	udiv	r2, r6, r0
 8013310:	fb00 6212 	mls	r2, r0, r2, r6
 8013314:	b292      	uxth	r2, r2
 8013316:	6865      	ldr	r5, [r4, #4]
 8013318:	fbb5 f5f0 	udiv	r5, r5, r0
 801331c:	fb05 3202 	mla	r2, r5, r2, r3
 8013320:	3204      	adds	r2, #4
 8013322:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8013326:	f894 900c 	ldrb.w	r9, [r4, #12]
 801332a:	9203      	str	r2, [sp, #12]
 801332c:	468b      	mov	fp, r1
 801332e:	1f2f      	subs	r7, r5, #4
 8013330:	2800      	cmp	r0, #0
 8013332:	f000 814c 	beq.w	80135ce <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8013336:	f04f 0c00 	mov.w	ip, #0
 801333a:	46e2      	mov	sl, ip
 801333c:	4661      	mov	r1, ip
 801333e:	fbb1 f2f0 	udiv	r2, r1, r0
 8013342:	fb00 1212 	mls	r2, r0, r2, r1
 8013346:	b292      	uxth	r2, r2
 8013348:	fb05 f202 	mul.w	r2, r5, r2
 801334c:	f10c 0c01 	add.w	ip, ip, #1
 8013350:	589a      	ldr	r2, [r3, r2]
 8013352:	454a      	cmp	r2, r9
 8013354:	bf08      	it	eq
 8013356:	f10a 0a01 	addeq.w	sl, sl, #1
 801335a:	fa1f f18c 	uxth.w	r1, ip
 801335e:	bf08      	it	eq
 8013360:	fa1f fa8a 	uxtheq.w	sl, sl
 8013364:	4281      	cmp	r1, r0
 8013366:	d3ea      	bcc.n	801333e <uxr_prepare_reliable_buffer_to_write+0x42>
 8013368:	4640      	mov	r0, r8
 801336a:	2104      	movs	r1, #4
 801336c:	f8cd a014 	str.w	sl, [sp, #20]
 8013370:	f7f6 fbcc 	bl	8009b0c <ucdr_alignment>
 8013374:	4480      	add	r8, r0
 8013376:	eb08 020b 	add.w	r2, r8, fp
 801337a:	42ba      	cmp	r2, r7
 801337c:	f240 80cd 	bls.w	801351a <uxr_prepare_reliable_buffer_to_write+0x21e>
 8013380:	7b22      	ldrb	r2, [r4, #12]
 8013382:	445a      	add	r2, fp
 8013384:	42ba      	cmp	r2, r7
 8013386:	f240 80b5 	bls.w	80134f4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801338a:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 801338e:	33fc      	adds	r3, #252	; 0xfc
 8013390:	b2ba      	uxth	r2, r7
 8013392:	4413      	add	r3, r2
 8013394:	b29b      	uxth	r3, r3
 8013396:	fb0a f903 	mul.w	r9, sl, r3
 801339a:	45d9      	cmp	r9, fp
 801339c:	9305      	str	r3, [sp, #20]
 801339e:	9306      	str	r3, [sp, #24]
 80133a0:	f0c0 80b7 	bcc.w	8013512 <uxr_prepare_reliable_buffer_to_write+0x216>
 80133a4:	f108 0304 	add.w	r3, r8, #4
 80133a8:	42bb      	cmp	r3, r7
 80133aa:	f080 80db 	bcs.w	8013564 <uxr_prepare_reliable_buffer_to_write+0x268>
 80133ae:	f1a2 0904 	sub.w	r9, r2, #4
 80133b2:	eba9 0908 	sub.w	r9, r9, r8
 80133b6:	9b05      	ldr	r3, [sp, #20]
 80133b8:	fa1f f989 	uxth.w	r9, r9
 80133bc:	ebab 0b09 	sub.w	fp, fp, r9
 80133c0:	fbbb f2f3 	udiv	r2, fp, r3
 80133c4:	fb03 b312 	mls	r3, r3, r2, fp
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	f000 80c8 	beq.w	801355e <uxr_prepare_reliable_buffer_to_write+0x262>
 80133ce:	3201      	adds	r2, #1
 80133d0:	b292      	uxth	r2, r2
 80133d2:	9306      	str	r3, [sp, #24]
 80133d4:	4552      	cmp	r2, sl
 80133d6:	f200 809c 	bhi.w	8013512 <uxr_prepare_reliable_buffer_to_write+0x216>
 80133da:	f10d 0b20 	add.w	fp, sp, #32
 80133de:	2a00      	cmp	r2, #0
 80133e0:	d042      	beq.n	8013468 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80133e2:	f8cd 801c 	str.w	r8, [sp, #28]
 80133e6:	f04f 0a00 	mov.w	sl, #0
 80133ea:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80133ee:	9505      	str	r5, [sp, #20]
 80133f0:	f10d 0b20 	add.w	fp, sp, #32
 80133f4:	4615      	mov	r5, r2
 80133f6:	e000      	b.n	80133fa <uxr_prepare_reliable_buffer_to_write+0xfe>
 80133f8:	46c1      	mov	r9, r8
 80133fa:	8920      	ldrh	r0, [r4, #8]
 80133fc:	fbb6 f2f0 	udiv	r2, r6, r0
 8013400:	fb00 6112 	mls	r1, r0, r2, r6
 8013404:	b28a      	uxth	r2, r1
 8013406:	6863      	ldr	r3, [r4, #4]
 8013408:	fbb3 f1f0 	udiv	r1, r3, r0
 801340c:	6823      	ldr	r3, [r4, #0]
 801340e:	fb02 f101 	mul.w	r1, r2, r1
 8013412:	3104      	adds	r1, #4
 8013414:	4419      	add	r1, r3
 8013416:	4658      	mov	r0, fp
 8013418:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801341c:	9200      	str	r2, [sp, #0]
 801341e:	2300      	movs	r3, #0
 8013420:	463a      	mov	r2, r7
 8013422:	f7f6 fb5d 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 8013426:	464a      	mov	r2, r9
 8013428:	2300      	movs	r3, #0
 801342a:	210d      	movs	r1, #13
 801342c:	4658      	mov	r0, fp
 801342e:	f7fa fd1b 	bl	800de68 <uxr_buffer_submessage_header>
 8013432:	8921      	ldrh	r1, [r4, #8]
 8013434:	fbb6 f2f1 	udiv	r2, r6, r1
 8013438:	fb01 6212 	mls	r2, r1, r2, r6
 801343c:	b292      	uxth	r2, r2
 801343e:	6863      	ldr	r3, [r4, #4]
 8013440:	fbb3 f3f1 	udiv	r3, r3, r1
 8013444:	fb02 f303 	mul.w	r3, r2, r3
 8013448:	6822      	ldr	r2, [r4, #0]
 801344a:	4630      	mov	r0, r6
 801344c:	50d7      	str	r7, [r2, r3]
 801344e:	2101      	movs	r1, #1
 8013450:	f000 f9a4 	bl	801379c <uxr_seq_num_add>
 8013454:	f10a 0a01 	add.w	sl, sl, #1
 8013458:	fa1f f38a 	uxth.w	r3, sl
 801345c:	429d      	cmp	r5, r3
 801345e:	4606      	mov	r6, r0
 8013460:	d8ca      	bhi.n	80133f8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8013462:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013466:	9d05      	ldr	r5, [sp, #20]
 8013468:	8920      	ldrh	r0, [r4, #8]
 801346a:	fbb6 f3f0 	udiv	r3, r6, r0
 801346e:	fb00 6313 	mls	r3, r0, r3, r6
 8013472:	b299      	uxth	r1, r3
 8013474:	6863      	ldr	r3, [r4, #4]
 8013476:	fbb3 f3f0 	udiv	r3, r3, r0
 801347a:	fb01 f303 	mul.w	r3, r1, r3
 801347e:	6821      	ldr	r1, [r4, #0]
 8013480:	3304      	adds	r3, #4
 8013482:	4419      	add	r1, r3
 8013484:	463a      	mov	r2, r7
 8013486:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801348a:	9000      	str	r0, [sp, #0]
 801348c:	2300      	movs	r3, #0
 801348e:	4658      	mov	r0, fp
 8013490:	f7f6 fb26 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 8013494:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8013498:	4658      	mov	r0, fp
 801349a:	fa1f f289 	uxth.w	r2, r9
 801349e:	2302      	movs	r3, #2
 80134a0:	210d      	movs	r1, #13
 80134a2:	f7fa fce1 	bl	800de68 <uxr_buffer_submessage_header>
 80134a6:	9b03      	ldr	r3, [sp, #12]
 80134a8:	8927      	ldrh	r7, [r4, #8]
 80134aa:	7b20      	ldrb	r0, [r4, #12]
 80134ac:	f108 0104 	add.w	r1, r8, #4
 80134b0:	440b      	add	r3, r1
 80134b2:	4619      	mov	r1, r3
 80134b4:	fbb6 f3f7 	udiv	r3, r6, r7
 80134b8:	fb07 6313 	mls	r3, r7, r3, r6
 80134bc:	f1a5 0208 	sub.w	r2, r5, #8
 80134c0:	b29d      	uxth	r5, r3
 80134c2:	3004      	adds	r0, #4
 80134c4:	6863      	ldr	r3, [r4, #4]
 80134c6:	fbb3 f3f7 	udiv	r3, r3, r7
 80134ca:	fb05 f303 	mul.w	r3, r5, r3
 80134ce:	6825      	ldr	r5, [r4, #0]
 80134d0:	4448      	add	r0, r9
 80134d2:	50e8      	str	r0, [r5, r3]
 80134d4:	9d04      	ldr	r5, [sp, #16]
 80134d6:	eba2 0208 	sub.w	r2, r2, r8
 80134da:	4628      	mov	r0, r5
 80134dc:	f7f6 fb12 	bl	8009b04 <ucdr_init_buffer>
 80134e0:	4628      	mov	r0, r5
 80134e2:	493c      	ldr	r1, [pc, #240]	; (80135d4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80134e4:	4622      	mov	r2, r4
 80134e6:	f7f6 fae1 	bl	8009aac <ucdr_set_on_full_buffer_callback>
 80134ea:	2001      	movs	r0, #1
 80134ec:	81e6      	strh	r6, [r4, #14]
 80134ee:	b011      	add	sp, #68	; 0x44
 80134f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134f4:	2101      	movs	r1, #1
 80134f6:	89e0      	ldrh	r0, [r4, #14]
 80134f8:	f000 f950 	bl	801379c <uxr_seq_num_add>
 80134fc:	8921      	ldrh	r1, [r4, #8]
 80134fe:	4605      	mov	r5, r0
 8013500:	8a60      	ldrh	r0, [r4, #18]
 8013502:	f000 f94b 	bl	801379c <uxr_seq_num_add>
 8013506:	4601      	mov	r1, r0
 8013508:	4628      	mov	r0, r5
 801350a:	f000 f94f 	bl	80137ac <uxr_seq_num_cmp>
 801350e:	2800      	cmp	r0, #0
 8013510:	dd42      	ble.n	8013598 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8013512:	2000      	movs	r0, #0
 8013514:	b011      	add	sp, #68	; 0x44
 8013516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801351a:	8921      	ldrh	r1, [r4, #8]
 801351c:	8a60      	ldrh	r0, [r4, #18]
 801351e:	9205      	str	r2, [sp, #20]
 8013520:	f000 f93c 	bl	801379c <uxr_seq_num_add>
 8013524:	4601      	mov	r1, r0
 8013526:	4630      	mov	r0, r6
 8013528:	f000 f940 	bl	80137ac <uxr_seq_num_cmp>
 801352c:	2800      	cmp	r0, #0
 801352e:	9a05      	ldr	r2, [sp, #20]
 8013530:	dcef      	bgt.n	8013512 <uxr_prepare_reliable_buffer_to_write+0x216>
 8013532:	8927      	ldrh	r7, [r4, #8]
 8013534:	fbb6 f3f7 	udiv	r3, r6, r7
 8013538:	fb07 6313 	mls	r3, r7, r3, r6
 801353c:	b29d      	uxth	r5, r3
 801353e:	6863      	ldr	r3, [r4, #4]
 8013540:	6824      	ldr	r4, [r4, #0]
 8013542:	fbb3 f3f7 	udiv	r3, r3, r7
 8013546:	fb05 f303 	mul.w	r3, r5, r3
 801354a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801354e:	50e2      	str	r2, [r4, r3]
 8013550:	2300      	movs	r3, #0
 8013552:	f8cd 8000 	str.w	r8, [sp]
 8013556:	f7f6 fac3 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 801355a:	2001      	movs	r0, #1
 801355c:	e7da      	b.n	8013514 <uxr_prepare_reliable_buffer_to_write+0x218>
 801355e:	b293      	uxth	r3, r2
 8013560:	461a      	mov	r2, r3
 8013562:	e737      	b.n	80133d4 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8013564:	4630      	mov	r0, r6
 8013566:	2101      	movs	r1, #1
 8013568:	9207      	str	r2, [sp, #28]
 801356a:	f000 f917 	bl	801379c <uxr_seq_num_add>
 801356e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013572:	fbb0 f1fc 	udiv	r1, r0, ip
 8013576:	fb0c 0111 	mls	r1, ip, r1, r0
 801357a:	4606      	mov	r6, r0
 801357c:	b288      	uxth	r0, r1
 801357e:	6863      	ldr	r3, [r4, #4]
 8013580:	fbb3 f1fc 	udiv	r1, r3, ip
 8013584:	6823      	ldr	r3, [r4, #0]
 8013586:	9a07      	ldr	r2, [sp, #28]
 8013588:	fb00 f101 	mul.w	r1, r0, r1
 801358c:	3104      	adds	r1, #4
 801358e:	440b      	add	r3, r1
 8013590:	9303      	str	r3, [sp, #12]
 8013592:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8013596:	e70a      	b.n	80133ae <uxr_prepare_reliable_buffer_to_write+0xb2>
 8013598:	8921      	ldrh	r1, [r4, #8]
 801359a:	fbb5 f3f1 	udiv	r3, r5, r1
 801359e:	fb01 5313 	mls	r3, r1, r3, r5
 80135a2:	b29a      	uxth	r2, r3
 80135a4:	6863      	ldr	r3, [r4, #4]
 80135a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80135aa:	6821      	ldr	r1, [r4, #0]
 80135ac:	9804      	ldr	r0, [sp, #16]
 80135ae:	fb02 f303 	mul.w	r3, r2, r3
 80135b2:	3304      	adds	r3, #4
 80135b4:	7b22      	ldrb	r2, [r4, #12]
 80135b6:	4419      	add	r1, r3
 80135b8:	445a      	add	r2, fp
 80135ba:	f841 2c04 	str.w	r2, [r1, #-4]
 80135be:	7b23      	ldrb	r3, [r4, #12]
 80135c0:	9300      	str	r3, [sp, #0]
 80135c2:	2300      	movs	r3, #0
 80135c4:	f7f6 fa8c 	bl	8009ae0 <ucdr_init_buffer_origin_offset>
 80135c8:	81e5      	strh	r5, [r4, #14]
 80135ca:	2001      	movs	r0, #1
 80135cc:	e7a2      	b.n	8013514 <uxr_prepare_reliable_buffer_to_write+0x218>
 80135ce:	4682      	mov	sl, r0
 80135d0:	e6ca      	b.n	8013368 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80135d2:	bf00      	nop
 80135d4:	080131dd 	.word	0x080131dd

080135d8 <uxr_prepare_next_reliable_buffer_to_send>:
 80135d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135da:	4604      	mov	r4, r0
 80135dc:	460f      	mov	r7, r1
 80135de:	8a00      	ldrh	r0, [r0, #16]
 80135e0:	2101      	movs	r1, #1
 80135e2:	4616      	mov	r6, r2
 80135e4:	461d      	mov	r5, r3
 80135e6:	f000 f8d9 	bl	801379c <uxr_seq_num_add>
 80135ea:	8028      	strh	r0, [r5, #0]
 80135ec:	8922      	ldrh	r2, [r4, #8]
 80135ee:	fbb0 f3f2 	udiv	r3, r0, r2
 80135f2:	fb02 0c13 	mls	ip, r2, r3, r0
 80135f6:	fa1f fc8c 	uxth.w	ip, ip
 80135fa:	6863      	ldr	r3, [r4, #4]
 80135fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013600:	fb0c fc03 	mul.w	ip, ip, r3
 8013604:	6823      	ldr	r3, [r4, #0]
 8013606:	89e1      	ldrh	r1, [r4, #14]
 8013608:	f10c 0c04 	add.w	ip, ip, #4
 801360c:	4463      	add	r3, ip
 801360e:	603b      	str	r3, [r7, #0]
 8013610:	6823      	ldr	r3, [r4, #0]
 8013612:	449c      	add	ip, r3
 8013614:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8013618:	6033      	str	r3, [r6, #0]
 801361a:	f000 f8c7 	bl	80137ac <uxr_seq_num_cmp>
 801361e:	2800      	cmp	r0, #0
 8013620:	dd01      	ble.n	8013626 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8013622:	2000      	movs	r0, #0
 8013624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013626:	7b23      	ldrb	r3, [r4, #12]
 8013628:	6832      	ldr	r2, [r6, #0]
 801362a:	429a      	cmp	r2, r3
 801362c:	d9f9      	bls.n	8013622 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801362e:	8a61      	ldrh	r1, [r4, #18]
 8013630:	8a20      	ldrh	r0, [r4, #16]
 8013632:	f000 f8b7 	bl	80137a4 <uxr_seq_num_sub>
 8013636:	8923      	ldrh	r3, [r4, #8]
 8013638:	4283      	cmp	r3, r0
 801363a:	d0f2      	beq.n	8013622 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801363c:	8828      	ldrh	r0, [r5, #0]
 801363e:	89e3      	ldrh	r3, [r4, #14]
 8013640:	8220      	strh	r0, [r4, #16]
 8013642:	4298      	cmp	r0, r3
 8013644:	d001      	beq.n	801364a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8013646:	2001      	movs	r0, #1
 8013648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801364a:	2101      	movs	r1, #1
 801364c:	f000 f8a6 	bl	801379c <uxr_seq_num_add>
 8013650:	81e0      	strh	r0, [r4, #14]
 8013652:	2001      	movs	r0, #1
 8013654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013656:	bf00      	nop

08013658 <uxr_update_output_stream_heartbeat_timestamp>:
 8013658:	b570      	push	{r4, r5, r6, lr}
 801365a:	8a01      	ldrh	r1, [r0, #16]
 801365c:	4604      	mov	r4, r0
 801365e:	8a40      	ldrh	r0, [r0, #18]
 8013660:	4615      	mov	r5, r2
 8013662:	461e      	mov	r6, r3
 8013664:	f000 f8a2 	bl	80137ac <uxr_seq_num_cmp>
 8013668:	2800      	cmp	r0, #0
 801366a:	db07      	blt.n	801367c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801366c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013670:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013674:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8013678:	2000      	movs	r0, #0
 801367a:	bd70      	pop	{r4, r5, r6, pc}
 801367c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013680:	b940      	cbnz	r0, 8013694 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8013682:	2301      	movs	r3, #1
 8013684:	f884 3020 	strb.w	r3, [r4, #32]
 8013688:	3564      	adds	r5, #100	; 0x64
 801368a:	f146 0600 	adc.w	r6, r6, #0
 801368e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013692:	bd70      	pop	{r4, r5, r6, pc}
 8013694:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013698:	4295      	cmp	r5, r2
 801369a:	eb76 0303 	sbcs.w	r3, r6, r3
 801369e:	bfa5      	ittet	ge
 80136a0:	3001      	addge	r0, #1
 80136a2:	f884 0020 	strbge.w	r0, [r4, #32]
 80136a6:	2000      	movlt	r0, #0
 80136a8:	2001      	movge	r0, #1
 80136aa:	e7ed      	b.n	8013688 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080136ac <uxr_begin_output_nack_buffer_it>:
 80136ac:	8a40      	ldrh	r0, [r0, #18]
 80136ae:	4770      	bx	lr

080136b0 <uxr_next_reliable_nack_buffer_to_send>:
 80136b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136b4:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 80136b8:	b082      	sub	sp, #8
 80136ba:	f1b8 0f00 	cmp.w	r8, #0
 80136be:	d011      	beq.n	80136e4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80136c0:	4604      	mov	r4, r0
 80136c2:	8818      	ldrh	r0, [r3, #0]
 80136c4:	460e      	mov	r6, r1
 80136c6:	4617      	mov	r7, r2
 80136c8:	461d      	mov	r5, r3
 80136ca:	2101      	movs	r1, #1
 80136cc:	f000 f866 	bl	801379c <uxr_seq_num_add>
 80136d0:	8028      	strh	r0, [r5, #0]
 80136d2:	8a21      	ldrh	r1, [r4, #16]
 80136d4:	f000 f86a 	bl	80137ac <uxr_seq_num_cmp>
 80136d8:	2800      	cmp	r0, #0
 80136da:	dd07      	ble.n	80136ec <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80136dc:	f04f 0800 	mov.w	r8, #0
 80136e0:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 80136e4:	4640      	mov	r0, r8
 80136e6:	b002      	add	sp, #8
 80136e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ec:	8921      	ldrh	r1, [r4, #8]
 80136ee:	8828      	ldrh	r0, [r5, #0]
 80136f0:	6823      	ldr	r3, [r4, #0]
 80136f2:	fbb0 f2f1 	udiv	r2, r0, r1
 80136f6:	fb01 0c12 	mls	ip, r1, r2, r0
 80136fa:	fa1f f28c 	uxth.w	r2, ip
 80136fe:	9301      	str	r3, [sp, #4]
 8013700:	6863      	ldr	r3, [r4, #4]
 8013702:	fbb3 fcf1 	udiv	ip, r3, r1
 8013706:	9b01      	ldr	r3, [sp, #4]
 8013708:	fb02 fc0c 	mul.w	ip, r2, ip
 801370c:	f10c 0c04 	add.w	ip, ip, #4
 8013710:	4463      	add	r3, ip
 8013712:	6033      	str	r3, [r6, #0]
 8013714:	6823      	ldr	r3, [r4, #0]
 8013716:	4463      	add	r3, ip
 8013718:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801371c:	603b      	str	r3, [r7, #0]
 801371e:	7b22      	ldrb	r2, [r4, #12]
 8013720:	429a      	cmp	r2, r3
 8013722:	d0d2      	beq.n	80136ca <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8013724:	4640      	mov	r0, r8
 8013726:	b002      	add	sp, #8
 8013728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801372c <uxr_process_acknack>:
 801372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801372e:	4604      	mov	r4, r0
 8013730:	460e      	mov	r6, r1
 8013732:	4610      	mov	r0, r2
 8013734:	2101      	movs	r1, #1
 8013736:	f000 f835 	bl	80137a4 <uxr_seq_num_sub>
 801373a:	8a61      	ldrh	r1, [r4, #18]
 801373c:	f000 f832 	bl	80137a4 <uxr_seq_num_sub>
 8013740:	b1c0      	cbz	r0, 8013774 <uxr_process_acknack+0x48>
 8013742:	4605      	mov	r5, r0
 8013744:	2700      	movs	r7, #0
 8013746:	2101      	movs	r1, #1
 8013748:	8a60      	ldrh	r0, [r4, #18]
 801374a:	f000 f827 	bl	801379c <uxr_seq_num_add>
 801374e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013752:	fbb0 f1fc 	udiv	r1, r0, ip
 8013756:	e9d4 2300 	ldrd	r2, r3, [r4]
 801375a:	fb0c 0111 	mls	r1, ip, r1, r0
 801375e:	b289      	uxth	r1, r1
 8013760:	3701      	adds	r7, #1
 8013762:	fbb3 f3fc 	udiv	r3, r3, ip
 8013766:	fb01 f303 	mul.w	r3, r1, r3
 801376a:	42bd      	cmp	r5, r7
 801376c:	7b21      	ldrb	r1, [r4, #12]
 801376e:	8260      	strh	r0, [r4, #18]
 8013770:	50d1      	str	r1, [r2, r3]
 8013772:	d1e8      	bne.n	8013746 <uxr_process_acknack+0x1a>
 8013774:	3e00      	subs	r6, #0
 8013776:	f04f 0300 	mov.w	r3, #0
 801377a:	bf18      	it	ne
 801377c:	2601      	movne	r6, #1
 801377e:	f884 3020 	strb.w	r3, [r4, #32]
 8013782:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8013786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013788 <uxr_is_output_up_to_date>:
 8013788:	8a01      	ldrh	r1, [r0, #16]
 801378a:	8a40      	ldrh	r0, [r0, #18]
 801378c:	b508      	push	{r3, lr}
 801378e:	f000 f80d 	bl	80137ac <uxr_seq_num_cmp>
 8013792:	fab0 f080 	clz	r0, r0
 8013796:	0940      	lsrs	r0, r0, #5
 8013798:	bd08      	pop	{r3, pc}
 801379a:	bf00      	nop

0801379c <uxr_seq_num_add>:
 801379c:	4408      	add	r0, r1
 801379e:	b280      	uxth	r0, r0
 80137a0:	4770      	bx	lr
 80137a2:	bf00      	nop

080137a4 <uxr_seq_num_sub>:
 80137a4:	1a40      	subs	r0, r0, r1
 80137a6:	b280      	uxth	r0, r0
 80137a8:	4770      	bx	lr
 80137aa:	bf00      	nop

080137ac <uxr_seq_num_cmp>:
 80137ac:	4288      	cmp	r0, r1
 80137ae:	d011      	beq.n	80137d4 <uxr_seq_num_cmp+0x28>
 80137b0:	d309      	bcc.n	80137c6 <uxr_seq_num_cmp+0x1a>
 80137b2:	4288      	cmp	r0, r1
 80137b4:	d910      	bls.n	80137d8 <uxr_seq_num_cmp+0x2c>
 80137b6:	1a40      	subs	r0, r0, r1
 80137b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80137bc:	bfd4      	ite	le
 80137be:	2001      	movle	r0, #1
 80137c0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80137c4:	4770      	bx	lr
 80137c6:	1a0b      	subs	r3, r1, r0
 80137c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137cc:	daf1      	bge.n	80137b2 <uxr_seq_num_cmp+0x6>
 80137ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137d2:	4770      	bx	lr
 80137d4:	2000      	movs	r0, #0
 80137d6:	4770      	bx	lr
 80137d8:	2001      	movs	r0, #1
 80137da:	4770      	bx	lr

080137dc <uxr_init_framing_io>:
 80137dc:	2300      	movs	r3, #0
 80137de:	7041      	strb	r1, [r0, #1]
 80137e0:	7003      	strb	r3, [r0, #0]
 80137e2:	8583      	strh	r3, [r0, #44]	; 0x2c
 80137e4:	4770      	bx	lr
 80137e6:	bf00      	nop

080137e8 <uxr_write_framed_msg>:
 80137e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ec:	4617      	mov	r7, r2
 80137ee:	7842      	ldrb	r2, [r0, #1]
 80137f0:	b083      	sub	sp, #12
 80137f2:	460e      	mov	r6, r1
 80137f4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80137f8:	469a      	mov	sl, r3
 80137fa:	2901      	cmp	r1, #1
 80137fc:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8013800:	4604      	mov	r4, r0
 8013802:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8013806:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801380a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801380e:	f240 8137 	bls.w	8013a80 <uxr_write_framed_msg+0x298>
 8013812:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8013816:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801381a:	2901      	cmp	r1, #1
 801381c:	f04f 0202 	mov.w	r2, #2
 8013820:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013824:	f240 808f 	bls.w	8013946 <uxr_write_framed_msg+0x15e>
 8013828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801382a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801382e:	b2dd      	uxtb	r5, r3
 8013830:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013834:	2203      	movs	r2, #3
 8013836:	2901      	cmp	r1, #1
 8013838:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801383c:	f240 809a 	bls.w	8013974 <uxr_write_framed_msg+0x18c>
 8013840:	18a1      	adds	r1, r4, r2
 8013842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013844:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8013848:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801384c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8013850:	3201      	adds	r2, #1
 8013852:	2801      	cmp	r0, #1
 8013854:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013858:	f240 80a0 	bls.w	801399c <uxr_write_framed_msg+0x1b4>
 801385c:	18a0      	adds	r0, r4, r2
 801385e:	3201      	adds	r2, #1
 8013860:	b2d2      	uxtb	r2, r2
 8013862:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013866:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801386a:	2b00      	cmp	r3, #0
 801386c:	f000 80a9 	beq.w	80139c2 <uxr_write_framed_msg+0x1da>
 8013870:	f04f 0900 	mov.w	r9, #0
 8013874:	46c8      	mov	r8, r9
 8013876:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801387a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801387e:	2901      	cmp	r1, #1
 8013880:	f240 80c3 	bls.w	8013a0a <uxr_write_framed_msg+0x222>
 8013884:	2a29      	cmp	r2, #41	; 0x29
 8013886:	f200 809f 	bhi.w	80139c8 <uxr_write_framed_msg+0x1e0>
 801388a:	18a1      	adds	r1, r4, r2
 801388c:	3201      	adds	r2, #1
 801388e:	b2d2      	uxtb	r2, r2
 8013890:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8013894:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013898:	ea89 0303 	eor.w	r3, r9, r3
 801389c:	498c      	ldr	r1, [pc, #560]	; (8013ad0 <uxr_write_framed_msg+0x2e8>)
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	f108 0801 	add.w	r8, r8, #1
 80138a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80138a8:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80138ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138ae:	4543      	cmp	r3, r8
 80138b0:	d8e1      	bhi.n	8013876 <uxr_write_framed_msg+0x8e>
 80138b2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80138b6:	fa5f f889 	uxtb.w	r8, r9
 80138ba:	9301      	str	r3, [sp, #4]
 80138bc:	f04f 0900 	mov.w	r9, #0
 80138c0:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 80138c4:	fa5f f18a 	uxtb.w	r1, sl
 80138c8:	2901      	cmp	r1, #1
 80138ca:	d921      	bls.n	8013910 <uxr_write_framed_msg+0x128>
 80138cc:	2a29      	cmp	r2, #41	; 0x29
 80138ce:	f240 80af 	bls.w	8013a30 <uxr_write_framed_msg+0x248>
 80138d2:	2500      	movs	r5, #0
 80138d4:	e000      	b.n	80138d8 <uxr_write_framed_msg+0xf0>
 80138d6:	b160      	cbz	r0, 80138f2 <uxr_write_framed_msg+0x10a>
 80138d8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80138dc:	1b52      	subs	r2, r2, r5
 80138de:	465b      	mov	r3, fp
 80138e0:	4421      	add	r1, r4
 80138e2:	4638      	mov	r0, r7
 80138e4:	47b0      	blx	r6
 80138e6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80138ea:	4405      	add	r5, r0
 80138ec:	4295      	cmp	r5, r2
 80138ee:	d3f2      	bcc.n	80138d6 <uxr_write_framed_msg+0xee>
 80138f0:	d003      	beq.n	80138fa <uxr_write_framed_msg+0x112>
 80138f2:	2000      	movs	r0, #0
 80138f4:	b003      	add	sp, #12
 80138f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138fa:	fa5f f18a 	uxtb.w	r1, sl
 80138fe:	f04f 0300 	mov.w	r3, #0
 8013902:	2901      	cmp	r1, #1
 8013904:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013908:	f04f 0200 	mov.w	r2, #0
 801390c:	f200 8090 	bhi.w	8013a30 <uxr_write_framed_msg+0x248>
 8013910:	1c51      	adds	r1, r2, #1
 8013912:	b2c9      	uxtb	r1, r1
 8013914:	2929      	cmp	r1, #41	; 0x29
 8013916:	d8dc      	bhi.n	80138d2 <uxr_write_framed_msg+0xea>
 8013918:	18a5      	adds	r5, r4, r2
 801391a:	4421      	add	r1, r4
 801391c:	3202      	adds	r2, #2
 801391e:	f088 0820 	eor.w	r8, r8, #32
 8013922:	4648      	mov	r0, r9
 8013924:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8013928:	b2d2      	uxtb	r2, r2
 801392a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 801392e:	f04f 0901 	mov.w	r9, #1
 8013932:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8013936:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801393a:	2800      	cmp	r0, #0
 801393c:	f040 8085 	bne.w	8013a4a <uxr_write_framed_msg+0x262>
 8013940:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013944:	e7bc      	b.n	80138c0 <uxr_write_framed_msg+0xd8>
 8013946:	4611      	mov	r1, r2
 8013948:	f04f 0c03 	mov.w	ip, #3
 801394c:	2204      	movs	r2, #4
 801394e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013950:	4421      	add	r1, r4
 8013952:	b2dd      	uxtb	r5, r3
 8013954:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8013958:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 801395c:	44a4      	add	ip, r4
 801395e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013962:	f080 0020 	eor.w	r0, r0, #32
 8013966:	2901      	cmp	r1, #1
 8013968:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801396c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013970:	f63f af66 	bhi.w	8013840 <uxr_write_framed_msg+0x58>
 8013974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013976:	18a0      	adds	r0, r4, r2
 8013978:	f085 0520 	eor.w	r5, r5, #32
 801397c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013980:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013984:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8013988:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801398c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8013990:	3202      	adds	r2, #2
 8013992:	2801      	cmp	r0, #1
 8013994:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013998:	f63f af60 	bhi.w	801385c <uxr_write_framed_msg+0x74>
 801399c:	1c50      	adds	r0, r2, #1
 801399e:	18a5      	adds	r5, r4, r2
 80139a0:	fa54 f080 	uxtab	r0, r4, r0
 80139a4:	3202      	adds	r2, #2
 80139a6:	f081 0120 	eor.w	r1, r1, #32
 80139aa:	b2d2      	uxtb	r2, r2
 80139ac:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80139b0:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 80139b4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80139b8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f47f af57 	bne.w	8013870 <uxr_write_framed_msg+0x88>
 80139c2:	9301      	str	r3, [sp, #4]
 80139c4:	4698      	mov	r8, r3
 80139c6:	e779      	b.n	80138bc <uxr_write_framed_msg+0xd4>
 80139c8:	2500      	movs	r5, #0
 80139ca:	e001      	b.n	80139d0 <uxr_write_framed_msg+0x1e8>
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d090      	beq.n	80138f2 <uxr_write_framed_msg+0x10a>
 80139d0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80139d4:	1b52      	subs	r2, r2, r5
 80139d6:	465b      	mov	r3, fp
 80139d8:	4421      	add	r1, r4
 80139da:	4638      	mov	r0, r7
 80139dc:	47b0      	blx	r6
 80139de:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80139e2:	4405      	add	r5, r0
 80139e4:	4295      	cmp	r5, r2
 80139e6:	d3f1      	bcc.n	80139cc <uxr_write_framed_msg+0x1e4>
 80139e8:	d183      	bne.n	80138f2 <uxr_write_framed_msg+0x10a>
 80139ea:	f04f 0300 	mov.w	r3, #0
 80139ee:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80139f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139f4:	4543      	cmp	r3, r8
 80139f6:	d964      	bls.n	8013ac2 <uxr_write_framed_msg+0x2da>
 80139f8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80139fc:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013a00:	2901      	cmp	r1, #1
 8013a02:	f04f 0200 	mov.w	r2, #0
 8013a06:	f63f af3d 	bhi.w	8013884 <uxr_write_framed_msg+0x9c>
 8013a0a:	1c51      	adds	r1, r2, #1
 8013a0c:	b2c9      	uxtb	r1, r1
 8013a0e:	2929      	cmp	r1, #41	; 0x29
 8013a10:	d8da      	bhi.n	80139c8 <uxr_write_framed_msg+0x1e0>
 8013a12:	18a0      	adds	r0, r4, r2
 8013a14:	4421      	add	r1, r4
 8013a16:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8013a1a:	3202      	adds	r2, #2
 8013a1c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8013a20:	b2d2      	uxtb	r2, r2
 8013a22:	f083 0020 	eor.w	r0, r3, #32
 8013a26:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8013a2a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a2e:	e733      	b.n	8013898 <uxr_write_framed_msg+0xb0>
 8013a30:	18a1      	adds	r1, r4, r2
 8013a32:	3201      	adds	r2, #1
 8013a34:	4648      	mov	r0, r9
 8013a36:	b2d2      	uxtb	r2, r2
 8013a38:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8013a3c:	f04f 0901 	mov.w	r9, #1
 8013a40:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a44:	2800      	cmp	r0, #0
 8013a46:	f43f af7b 	beq.w	8013940 <uxr_write_framed_msg+0x158>
 8013a4a:	2500      	movs	r5, #0
 8013a4c:	e002      	b.n	8013a54 <uxr_write_framed_msg+0x26c>
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	f43f af4f 	beq.w	80138f2 <uxr_write_framed_msg+0x10a>
 8013a54:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013a58:	1b52      	subs	r2, r2, r5
 8013a5a:	465b      	mov	r3, fp
 8013a5c:	4421      	add	r1, r4
 8013a5e:	4638      	mov	r0, r7
 8013a60:	47b0      	blx	r6
 8013a62:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013a66:	4405      	add	r5, r0
 8013a68:	4295      	cmp	r5, r2
 8013a6a:	d3f0      	bcc.n	8013a4e <uxr_write_framed_msg+0x266>
 8013a6c:	f47f af41 	bne.w	80138f2 <uxr_write_framed_msg+0x10a>
 8013a70:	2300      	movs	r3, #0
 8013a72:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a78:	b298      	uxth	r0, r3
 8013a7a:	b003      	add	sp, #12
 8013a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a80:	217d      	movs	r1, #125	; 0x7d
 8013a82:	f082 0220 	eor.w	r2, r2, #32
 8013a86:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8013a8a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8013a8e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8013a92:	2901      	cmp	r1, #1
 8013a94:	f04f 0203 	mov.w	r2, #3
 8013a98:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a9c:	d804      	bhi.n	8013aa8 <uxr_write_framed_msg+0x2c0>
 8013a9e:	4611      	mov	r1, r2
 8013aa0:	f04f 0c04 	mov.w	ip, #4
 8013aa4:	2205      	movs	r2, #5
 8013aa6:	e752      	b.n	801394e <uxr_write_framed_msg+0x166>
 8013aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013aaa:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8013aae:	b2dd      	uxtb	r5, r3
 8013ab0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013ab4:	2204      	movs	r2, #4
 8013ab6:	2901      	cmp	r1, #1
 8013ab8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013abc:	f63f aec0 	bhi.w	8013840 <uxr_write_framed_msg+0x58>
 8013ac0:	e758      	b.n	8013974 <uxr_write_framed_msg+0x18c>
 8013ac2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013ac6:	fa5f f889 	uxtb.w	r8, r9
 8013aca:	9301      	str	r3, [sp, #4]
 8013acc:	2200      	movs	r2, #0
 8013ace:	e6f5      	b.n	80138bc <uxr_write_framed_msg+0xd4>
 8013ad0:	0801690c 	.word	0x0801690c

08013ad4 <uxr_framing_read_transport>:
 8013ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad8:	4604      	mov	r4, r0
 8013ada:	b083      	sub	sp, #12
 8013adc:	461f      	mov	r7, r3
 8013ade:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013ae2:	4689      	mov	r9, r1
 8013ae4:	4692      	mov	sl, r2
 8013ae6:	f7fa fa05 	bl	800def4 <uxr_millis>
 8013aea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013aee:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013af2:	42b3      	cmp	r3, r6
 8013af4:	4680      	mov	r8, r0
 8013af6:	d061      	beq.n	8013bbc <uxr_framing_read_transport+0xe8>
 8013af8:	d81c      	bhi.n	8013b34 <uxr_framing_read_transport+0x60>
 8013afa:	1e75      	subs	r5, r6, #1
 8013afc:	1aed      	subs	r5, r5, r3
 8013afe:	b2ed      	uxtb	r5, r5
 8013b00:	2600      	movs	r6, #0
 8013b02:	455d      	cmp	r5, fp
 8013b04:	d81f      	bhi.n	8013b46 <uxr_framing_read_transport+0x72>
 8013b06:	19ab      	adds	r3, r5, r6
 8013b08:	455b      	cmp	r3, fp
 8013b0a:	bf84      	itt	hi
 8013b0c:	ebab 0605 	subhi.w	r6, fp, r5
 8013b10:	b2f6      	uxtbhi	r6, r6
 8013b12:	b9ed      	cbnz	r5, 8013b50 <uxr_framing_read_transport+0x7c>
 8013b14:	f04f 0b00 	mov.w	fp, #0
 8013b18:	f7fa f9ec 	bl	800def4 <uxr_millis>
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	eba0 0808 	sub.w	r8, r0, r8
 8013b22:	eba3 0308 	sub.w	r3, r3, r8
 8013b26:	4658      	mov	r0, fp
 8013b28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013b2c:	603b      	str	r3, [r7, #0]
 8013b2e:	b003      	add	sp, #12
 8013b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b34:	2e00      	cmp	r6, #0
 8013b36:	d049      	beq.n	8013bcc <uxr_framing_read_transport+0xf8>
 8013b38:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8013b3c:	b2ed      	uxtb	r5, r5
 8013b3e:	3e01      	subs	r6, #1
 8013b40:	455d      	cmp	r5, fp
 8013b42:	b2f6      	uxtb	r6, r6
 8013b44:	d9df      	bls.n	8013b06 <uxr_framing_read_transport+0x32>
 8013b46:	fa5f f58b 	uxtb.w	r5, fp
 8013b4a:	2600      	movs	r6, #0
 8013b4c:	2d00      	cmp	r5, #0
 8013b4e:	d0e1      	beq.n	8013b14 <uxr_framing_read_transport+0x40>
 8013b50:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013b54:	3102      	adds	r1, #2
 8013b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b58:	9300      	str	r3, [sp, #0]
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	4421      	add	r1, r4
 8013b5e:	462a      	mov	r2, r5
 8013b60:	4650      	mov	r0, sl
 8013b62:	47c8      	blx	r9
 8013b64:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013b68:	4a1a      	ldr	r2, [pc, #104]	; (8013bd4 <uxr_framing_read_transport+0x100>)
 8013b6a:	4403      	add	r3, r0
 8013b6c:	0859      	lsrs	r1, r3, #1
 8013b6e:	fba2 2101 	umull	r2, r1, r2, r1
 8013b72:	0889      	lsrs	r1, r1, #2
 8013b74:	222a      	movs	r2, #42	; 0x2a
 8013b76:	fb02 3111 	mls	r1, r2, r1, r3
 8013b7a:	4683      	mov	fp, r0
 8013b7c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8013b80:	2800      	cmp	r0, #0
 8013b82:	d0c7      	beq.n	8013b14 <uxr_framing_read_transport+0x40>
 8013b84:	42a8      	cmp	r0, r5
 8013b86:	d1c7      	bne.n	8013b18 <uxr_framing_read_transport+0x44>
 8013b88:	2e00      	cmp	r6, #0
 8013b8a:	d0c5      	beq.n	8013b18 <uxr_framing_read_transport+0x44>
 8013b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b8e:	9300      	str	r3, [sp, #0]
 8013b90:	3102      	adds	r1, #2
 8013b92:	4632      	mov	r2, r6
 8013b94:	4421      	add	r1, r4
 8013b96:	2300      	movs	r3, #0
 8013b98:	4650      	mov	r0, sl
 8013b9a:	47c8      	blx	r9
 8013b9c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013ba0:	4a0c      	ldr	r2, [pc, #48]	; (8013bd4 <uxr_framing_read_transport+0x100>)
 8013ba2:	180b      	adds	r3, r1, r0
 8013ba4:	0859      	lsrs	r1, r3, #1
 8013ba6:	fba2 1201 	umull	r1, r2, r2, r1
 8013baa:	0892      	lsrs	r2, r2, #2
 8013bac:	212a      	movs	r1, #42	; 0x2a
 8013bae:	fb01 3312 	mls	r3, r1, r2, r3
 8013bb2:	eb00 0b05 	add.w	fp, r0, r5
 8013bb6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8013bba:	e7ad      	b.n	8013b18 <uxr_framing_read_transport+0x44>
 8013bbc:	2600      	movs	r6, #0
 8013bbe:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8013bc2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8013bc4:	d9bf      	bls.n	8013b46 <uxr_framing_read_transport+0x72>
 8013bc6:	2102      	movs	r1, #2
 8013bc8:	2529      	movs	r5, #41	; 0x29
 8013bca:	e7c4      	b.n	8013b56 <uxr_framing_read_transport+0x82>
 8013bcc:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8013bd0:	b2ed      	uxtb	r5, r5
 8013bd2:	e796      	b.n	8013b02 <uxr_framing_read_transport+0x2e>
 8013bd4:	30c30c31 	.word	0x30c30c31

08013bd8 <uxr_read_framed_msg>:
 8013bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bdc:	461e      	mov	r6, r3
 8013bde:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8013be2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8013be6:	429d      	cmp	r5, r3
 8013be8:	b083      	sub	sp, #12
 8013bea:	4604      	mov	r4, r0
 8013bec:	4688      	mov	r8, r1
 8013bee:	4691      	mov	r9, r2
 8013bf0:	f000 8188 	beq.w	8013f04 <uxr_read_framed_msg+0x32c>
 8013bf4:	7823      	ldrb	r3, [r4, #0]
 8013bf6:	4dc1      	ldr	r5, [pc, #772]	; (8013efc <uxr_read_framed_msg+0x324>)
 8013bf8:	4fc1      	ldr	r7, [pc, #772]	; (8013f00 <uxr_read_framed_msg+0x328>)
 8013bfa:	2b07      	cmp	r3, #7
 8013bfc:	d8fd      	bhi.n	8013bfa <uxr_read_framed_msg+0x22>
 8013bfe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013c02:	0115      	.short	0x0115
 8013c04:	00d600f6 	.word	0x00d600f6
 8013c08:	009000b9 	.word	0x009000b9
 8013c0c:	0030004d 	.word	0x0030004d
 8013c10:	0008      	.short	0x0008
 8013c12:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013c16:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013c1a:	4299      	cmp	r1, r3
 8013c1c:	f000 814a 	beq.w	8013eb4 <uxr_read_framed_msg+0x2dc>
 8013c20:	18e2      	adds	r2, r4, r3
 8013c22:	7892      	ldrb	r2, [r2, #2]
 8013c24:	2a7d      	cmp	r2, #125	; 0x7d
 8013c26:	f000 8199 	beq.w	8013f5c <uxr_read_framed_msg+0x384>
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	0858      	lsrs	r0, r3, #1
 8013c2e:	fba5 1000 	umull	r1, r0, r5, r0
 8013c32:	0880      	lsrs	r0, r0, #2
 8013c34:	212a      	movs	r1, #42	; 0x2a
 8013c36:	fb01 3310 	mls	r3, r1, r0, r3
 8013c3a:	2a7e      	cmp	r2, #126	; 0x7e
 8013c3c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013c40:	f000 8252 	beq.w	80140e8 <uxr_read_framed_msg+0x510>
 8013c44:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013c46:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8013c48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	2200      	movs	r2, #0
 8013c50:	4299      	cmp	r1, r3
 8013c52:	86a3      	strh	r3, [r4, #52]	; 0x34
 8013c54:	7022      	strb	r2, [r4, #0]
 8013c56:	f000 8179 	beq.w	8013f4c <uxr_read_framed_msg+0x374>
 8013c5a:	2000      	movs	r0, #0
 8013c5c:	b003      	add	sp, #12
 8013c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c62:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013c66:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013c6a:	4299      	cmp	r1, r3
 8013c6c:	f000 8131 	beq.w	8013ed2 <uxr_read_framed_msg+0x2fa>
 8013c70:	18e2      	adds	r2, r4, r3
 8013c72:	7890      	ldrb	r0, [r2, #2]
 8013c74:	287d      	cmp	r0, #125	; 0x7d
 8013c76:	f000 8190 	beq.w	8013f9a <uxr_read_framed_msg+0x3c2>
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	085a      	lsrs	r2, r3, #1
 8013c7e:	fba5 1202 	umull	r1, r2, r5, r2
 8013c82:	0892      	lsrs	r2, r2, #2
 8013c84:	212a      	movs	r1, #42	; 0x2a
 8013c86:	fb01 3312 	mls	r3, r1, r2, r3
 8013c8a:	287e      	cmp	r0, #126	; 0x7e
 8013c8c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013c90:	f000 821a 	beq.w	80140c8 <uxr_read_framed_msg+0x4f0>
 8013c94:	2307      	movs	r3, #7
 8013c96:	86a0      	strh	r0, [r4, #52]	; 0x34
 8013c98:	7023      	strb	r3, [r4, #0]
 8013c9a:	e7ae      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 8013c9c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013c9e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013ca2:	459e      	cmp	lr, r3
 8013ca4:	d938      	bls.n	8013d18 <uxr_read_framed_msg+0x140>
 8013ca6:	ee07 8a90 	vmov	s15, r8
 8013caa:	212a      	movs	r1, #42	; 0x2a
 8013cac:	e020      	b.n	8013cf0 <uxr_read_framed_msg+0x118>
 8013cae:	f89b c002 	ldrb.w	ip, [fp, #2]
 8013cb2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8013cb6:	f000 80d4 	beq.w	8013e62 <uxr_read_framed_msg+0x28a>
 8013cba:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8013cbe:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013cc2:	f000 8219 	beq.w	80140f8 <uxr_read_framed_msg+0x520>
 8013cc6:	f806 c003 	strb.w	ip, [r6, r3]
 8013cca:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8013cce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013cd0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013cd4:	ea8a 000c 	eor.w	r0, sl, ip
 8013cd8:	b2c0      	uxtb	r0, r0
 8013cda:	3301      	adds	r3, #1
 8013cdc:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8013ce0:	b29b      	uxth	r3, r3
 8013ce2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8013ce6:	4573      	cmp	r3, lr
 8013ce8:	8663      	strh	r3, [r4, #50]	; 0x32
 8013cea:	86e2      	strh	r2, [r4, #54]	; 0x36
 8013cec:	f080 8120 	bcs.w	8013f30 <uxr_read_framed_msg+0x358>
 8013cf0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8013cf4:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8013cf8:	f100 0c01 	add.w	ip, r0, #1
 8013cfc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013d00:	fba5 8202 	umull	r8, r2, r5, r2
 8013d04:	0892      	lsrs	r2, r2, #2
 8013d06:	4582      	cmp	sl, r0
 8013d08:	eb04 0b00 	add.w	fp, r4, r0
 8013d0c:	fb01 c212 	mls	r2, r1, r2, ip
 8013d10:	d1cd      	bne.n	8013cae <uxr_read_framed_msg+0xd6>
 8013d12:	ee17 8a90 	vmov	r8, s15
 8013d16:	459e      	cmp	lr, r3
 8013d18:	f040 8111 	bne.w	8013f3e <uxr_read_framed_msg+0x366>
 8013d1c:	2306      	movs	r3, #6
 8013d1e:	7023      	strb	r3, [r4, #0]
 8013d20:	e76b      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 8013d22:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013d26:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013d2a:	4298      	cmp	r0, r3
 8013d2c:	f000 80c2 	beq.w	8013eb4 <uxr_read_framed_msg+0x2dc>
 8013d30:	18e2      	adds	r2, r4, r3
 8013d32:	7891      	ldrb	r1, [r2, #2]
 8013d34:	297d      	cmp	r1, #125	; 0x7d
 8013d36:	f000 814c 	beq.w	8013fd2 <uxr_read_framed_msg+0x3fa>
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	085a      	lsrs	r2, r3, #1
 8013d3e:	fba5 0202 	umull	r0, r2, r5, r2
 8013d42:	0892      	lsrs	r2, r2, #2
 8013d44:	202a      	movs	r0, #42	; 0x2a
 8013d46:	fb00 3312 	mls	r3, r0, r2, r3
 8013d4a:	297e      	cmp	r1, #126	; 0x7e
 8013d4c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013d50:	f000 81ca 	beq.w	80140e8 <uxr_read_framed_msg+0x510>
 8013d54:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013d56:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013d5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	2000      	movs	r0, #0
 8013d60:	428b      	cmp	r3, r1
 8013d62:	8623      	strh	r3, [r4, #48]	; 0x30
 8013d64:	8660      	strh	r0, [r4, #50]	; 0x32
 8013d66:	86e0      	strh	r0, [r4, #54]	; 0x36
 8013d68:	f240 80df 	bls.w	8013f2a <uxr_read_framed_msg+0x352>
 8013d6c:	7020      	strb	r0, [r4, #0]
 8013d6e:	b003      	add	sp, #12
 8013d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d74:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013d78:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013d7c:	4299      	cmp	r1, r3
 8013d7e:	f000 80a8 	beq.w	8013ed2 <uxr_read_framed_msg+0x2fa>
 8013d82:	18e2      	adds	r2, r4, r3
 8013d84:	7890      	ldrb	r0, [r2, #2]
 8013d86:	287d      	cmp	r0, #125	; 0x7d
 8013d88:	f000 8164 	beq.w	8014054 <uxr_read_framed_msg+0x47c>
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	085a      	lsrs	r2, r3, #1
 8013d90:	fba5 1202 	umull	r1, r2, r5, r2
 8013d94:	0892      	lsrs	r2, r2, #2
 8013d96:	212a      	movs	r1, #42	; 0x2a
 8013d98:	fb01 3312 	mls	r3, r1, r2, r3
 8013d9c:	287e      	cmp	r0, #126	; 0x7e
 8013d9e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013da2:	f000 8191 	beq.w	80140c8 <uxr_read_framed_msg+0x4f0>
 8013da6:	2304      	movs	r3, #4
 8013da8:	8620      	strh	r0, [r4, #48]	; 0x30
 8013daa:	7023      	strb	r3, [r4, #0]
 8013dac:	e725      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 8013dae:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013db2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013db6:	4290      	cmp	r0, r2
 8013db8:	f000 80b3 	beq.w	8013f22 <uxr_read_framed_msg+0x34a>
 8013dbc:	18a3      	adds	r3, r4, r2
 8013dbe:	7899      	ldrb	r1, [r3, #2]
 8013dc0:	297d      	cmp	r1, #125	; 0x7d
 8013dc2:	f000 8164 	beq.w	801408e <uxr_read_framed_msg+0x4b6>
 8013dc6:	3201      	adds	r2, #1
 8013dc8:	0850      	lsrs	r0, r2, #1
 8013dca:	fba5 3000 	umull	r3, r0, r5, r0
 8013dce:	0880      	lsrs	r0, r0, #2
 8013dd0:	232a      	movs	r3, #42	; 0x2a
 8013dd2:	fb03 2210 	mls	r2, r3, r0, r2
 8013dd6:	297e      	cmp	r1, #126	; 0x7e
 8013dd8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013ddc:	f000 8188 	beq.w	80140f0 <uxr_read_framed_msg+0x518>
 8013de0:	7863      	ldrb	r3, [r4, #1]
 8013de2:	428b      	cmp	r3, r1
 8013de4:	bf0c      	ite	eq
 8013de6:	2303      	moveq	r3, #3
 8013de8:	2300      	movne	r3, #0
 8013dea:	7023      	strb	r3, [r4, #0]
 8013dec:	e705      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 8013dee:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013df2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013df6:	2200      	movs	r2, #0
 8013df8:	4299      	cmp	r1, r3
 8013dfa:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8013dfe:	d06c      	beq.n	8013eda <uxr_read_framed_msg+0x302>
 8013e00:	18e2      	adds	r2, r4, r3
 8013e02:	7890      	ldrb	r0, [r2, #2]
 8013e04:	287d      	cmp	r0, #125	; 0x7d
 8013e06:	f000 8101 	beq.w	801400c <uxr_read_framed_msg+0x434>
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	085a      	lsrs	r2, r3, #1
 8013e0e:	fba5 1202 	umull	r1, r2, r5, r2
 8013e12:	0892      	lsrs	r2, r2, #2
 8013e14:	212a      	movs	r1, #42	; 0x2a
 8013e16:	fb01 3312 	mls	r3, r1, r2, r3
 8013e1a:	287e      	cmp	r0, #126	; 0x7e
 8013e1c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8013e20:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013e24:	d059      	beq.n	8013eda <uxr_read_framed_msg+0x302>
 8013e26:	2302      	movs	r3, #2
 8013e28:	7023      	strb	r3, [r4, #0]
 8013e2a:	e6e6      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 8013e2c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8013e30:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013e34:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8013e38:	1c51      	adds	r1, r2, #1
 8013e3a:	084b      	lsrs	r3, r1, #1
 8013e3c:	fba5 c303 	umull	ip, r3, r5, r3
 8013e40:	089b      	lsrs	r3, r3, #2
 8013e42:	fb0e 1313 	mls	r3, lr, r3, r1
 8013e46:	4592      	cmp	sl, r2
 8013e48:	eb04 0002 	add.w	r0, r4, r2
 8013e4c:	b2da      	uxtb	r2, r3
 8013e4e:	f43f af04 	beq.w	8013c5a <uxr_read_framed_msg+0x82>
 8013e52:	7883      	ldrb	r3, [r0, #2]
 8013e54:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013e58:	2b7e      	cmp	r3, #126	; 0x7e
 8013e5a:	d1ed      	bne.n	8013e38 <uxr_read_framed_msg+0x260>
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	7023      	strb	r3, [r4, #0]
 8013e60:	e6cb      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 8013e62:	f100 0c01 	add.w	ip, r0, #1
 8013e66:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013e6a:	fba5 8202 	umull	r8, r2, r5, r2
 8013e6e:	0892      	lsrs	r2, r2, #2
 8013e70:	fb01 c212 	mls	r2, r1, r2, ip
 8013e74:	eb04 0c02 	add.w	ip, r4, r2
 8013e78:	b2d2      	uxtb	r2, r2
 8013e7a:	4592      	cmp	sl, r2
 8013e7c:	f100 0002 	add.w	r0, r0, #2
 8013e80:	f43f af47 	beq.w	8013d12 <uxr_read_framed_msg+0x13a>
 8013e84:	0842      	lsrs	r2, r0, #1
 8013e86:	f89c a002 	ldrb.w	sl, [ip, #2]
 8013e8a:	fba5 8202 	umull	r8, r2, r5, r2
 8013e8e:	0892      	lsrs	r2, r2, #2
 8013e90:	fb01 0012 	mls	r0, r1, r2, r0
 8013e94:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8013e98:	f08a 0c20 	eor.w	ip, sl, #32
 8013e9c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8013ea0:	f47f af11 	bne.w	8013cc6 <uxr_read_framed_msg+0xee>
 8013ea4:	459e      	cmp	lr, r3
 8013ea6:	ee17 8a90 	vmov	r8, s15
 8013eaa:	f43f af37 	beq.w	8013d1c <uxr_read_framed_msg+0x144>
 8013eae:	2301      	movs	r3, #1
 8013eb0:	7023      	strb	r3, [r4, #0]
 8013eb2:	e6a2      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 8013eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eb6:	9300      	str	r3, [sp, #0]
 8013eb8:	2301      	movs	r3, #1
 8013eba:	9301      	str	r3, [sp, #4]
 8013ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ebe:	464a      	mov	r2, r9
 8013ec0:	4641      	mov	r1, r8
 8013ec2:	4620      	mov	r0, r4
 8013ec4:	f7ff fe06 	bl	8013ad4 <uxr_framing_read_transport>
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	f43f aec6 	beq.w	8013c5a <uxr_read_framed_msg+0x82>
 8013ece:	7823      	ldrb	r3, [r4, #0]
 8013ed0:	e693      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 8013ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ed4:	9300      	str	r3, [sp, #0]
 8013ed6:	2302      	movs	r3, #2
 8013ed8:	e7ef      	b.n	8013eba <uxr_read_framed_msg+0x2e2>
 8013eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013edc:	9300      	str	r3, [sp, #0]
 8013ede:	2304      	movs	r3, #4
 8013ee0:	9301      	str	r3, [sp, #4]
 8013ee2:	464a      	mov	r2, r9
 8013ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ee6:	4641      	mov	r1, r8
 8013ee8:	4620      	mov	r0, r4
 8013eea:	f7ff fdf3 	bl	8013ad4 <uxr_framing_read_transport>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	d1ed      	bne.n	8013ece <uxr_read_framed_msg+0x2f6>
 8013ef2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013ef6:	2b7e      	cmp	r3, #126	; 0x7e
 8013ef8:	d0e9      	beq.n	8013ece <uxr_read_framed_msg+0x2f6>
 8013efa:	e6ae      	b.n	8013c5a <uxr_read_framed_msg+0x82>
 8013efc:	30c30c31 	.word	0x30c30c31
 8013f00:	0801690c 	.word	0x0801690c
 8013f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f06:	9300      	str	r3, [sp, #0]
 8013f08:	2305      	movs	r3, #5
 8013f0a:	9301      	str	r3, [sp, #4]
 8013f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f0e:	f7ff fde1 	bl	8013ad4 <uxr_framing_read_transport>
 8013f12:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013f16:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	f43f ae9d 	beq.w	8013c5a <uxr_read_framed_msg+0x82>
 8013f20:	e668      	b.n	8013bf4 <uxr_read_framed_msg+0x1c>
 8013f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f24:	9300      	str	r3, [sp, #0]
 8013f26:	2303      	movs	r3, #3
 8013f28:	e7c7      	b.n	8013eba <uxr_read_framed_msg+0x2e2>
 8013f2a:	2305      	movs	r3, #5
 8013f2c:	7023      	strb	r3, [r4, #0]
 8013f2e:	e664      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 8013f30:	ee17 8a90 	vmov	r8, s15
 8013f34:	f43f aef2 	beq.w	8013d1c <uxr_read_framed_msg+0x144>
 8013f38:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8013f3c:	d08e      	beq.n	8013e5c <uxr_read_framed_msg+0x284>
 8013f3e:	ebae 0303 	sub.w	r3, lr, r3
 8013f42:	3302      	adds	r3, #2
 8013f44:	9301      	str	r3, [sp, #4]
 8013f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f48:	9300      	str	r3, [sp, #0]
 8013f4a:	e7b7      	b.n	8013ebc <uxr_read_framed_msg+0x2e4>
 8013f4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f4e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013f52:	7013      	strb	r3, [r2, #0]
 8013f54:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8013f56:	b003      	add	sp, #12
 8013f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f5c:	f103 0c01 	add.w	ip, r3, #1
 8013f60:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013f64:	fba5 0202 	umull	r0, r2, r5, r2
 8013f68:	0892      	lsrs	r2, r2, #2
 8013f6a:	202a      	movs	r0, #42	; 0x2a
 8013f6c:	fb00 c212 	mls	r2, r0, r2, ip
 8013f70:	fa5f fc82 	uxtb.w	ip, r2
 8013f74:	4561      	cmp	r1, ip
 8013f76:	d09d      	beq.n	8013eb4 <uxr_read_framed_msg+0x2dc>
 8013f78:	3302      	adds	r3, #2
 8013f7a:	4422      	add	r2, r4
 8013f7c:	0859      	lsrs	r1, r3, #1
 8013f7e:	7892      	ldrb	r2, [r2, #2]
 8013f80:	fba5 c101 	umull	ip, r1, r5, r1
 8013f84:	0889      	lsrs	r1, r1, #2
 8013f86:	fb00 3311 	mls	r3, r0, r1, r3
 8013f8a:	2a7e      	cmp	r2, #126	; 0x7e
 8013f8c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013f90:	f000 80aa 	beq.w	80140e8 <uxr_read_framed_msg+0x510>
 8013f94:	f082 0220 	eor.w	r2, r2, #32
 8013f98:	e654      	b.n	8013c44 <uxr_read_framed_msg+0x6c>
 8013f9a:	1c58      	adds	r0, r3, #1
 8013f9c:	0842      	lsrs	r2, r0, #1
 8013f9e:	fba5 c202 	umull	ip, r2, r5, r2
 8013fa2:	0892      	lsrs	r2, r2, #2
 8013fa4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8013fa8:	fb0c 0212 	mls	r2, ip, r2, r0
 8013fac:	b2d0      	uxtb	r0, r2
 8013fae:	4281      	cmp	r1, r0
 8013fb0:	d08f      	beq.n	8013ed2 <uxr_read_framed_msg+0x2fa>
 8013fb2:	4422      	add	r2, r4
 8013fb4:	3302      	adds	r3, #2
 8013fb6:	7890      	ldrb	r0, [r2, #2]
 8013fb8:	085a      	lsrs	r2, r3, #1
 8013fba:	fba5 1202 	umull	r1, r2, r5, r2
 8013fbe:	0892      	lsrs	r2, r2, #2
 8013fc0:	fb0c 3312 	mls	r3, ip, r2, r3
 8013fc4:	287e      	cmp	r0, #126	; 0x7e
 8013fc6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013fca:	d07d      	beq.n	80140c8 <uxr_read_framed_msg+0x4f0>
 8013fcc:	f080 0020 	eor.w	r0, r0, #32
 8013fd0:	e660      	b.n	8013c94 <uxr_read_framed_msg+0xbc>
 8013fd2:	1c59      	adds	r1, r3, #1
 8013fd4:	084a      	lsrs	r2, r1, #1
 8013fd6:	fba5 c202 	umull	ip, r2, r5, r2
 8013fda:	0892      	lsrs	r2, r2, #2
 8013fdc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8013fe0:	fb0c 1212 	mls	r2, ip, r2, r1
 8013fe4:	b2d1      	uxtb	r1, r2
 8013fe6:	4288      	cmp	r0, r1
 8013fe8:	f43f af64 	beq.w	8013eb4 <uxr_read_framed_msg+0x2dc>
 8013fec:	4422      	add	r2, r4
 8013fee:	3302      	adds	r3, #2
 8013ff0:	7891      	ldrb	r1, [r2, #2]
 8013ff2:	085a      	lsrs	r2, r3, #1
 8013ff4:	fba5 0202 	umull	r0, r2, r5, r2
 8013ff8:	0892      	lsrs	r2, r2, #2
 8013ffa:	fb0c 3312 	mls	r3, ip, r2, r3
 8013ffe:	297e      	cmp	r1, #126	; 0x7e
 8014000:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014004:	d070      	beq.n	80140e8 <uxr_read_framed_msg+0x510>
 8014006:	f081 0120 	eor.w	r1, r1, #32
 801400a:	e6a3      	b.n	8013d54 <uxr_read_framed_msg+0x17c>
 801400c:	f103 0c01 	add.w	ip, r3, #1
 8014010:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014014:	fba5 0202 	umull	r0, r2, r5, r2
 8014018:	0892      	lsrs	r2, r2, #2
 801401a:	202a      	movs	r0, #42	; 0x2a
 801401c:	fb00 c212 	mls	r2, r0, r2, ip
 8014020:	fa5f fc82 	uxtb.w	ip, r2
 8014024:	4561      	cmp	r1, ip
 8014026:	f43f af58 	beq.w	8013eda <uxr_read_framed_msg+0x302>
 801402a:	4422      	add	r2, r4
 801402c:	3302      	adds	r3, #2
 801402e:	7891      	ldrb	r1, [r2, #2]
 8014030:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8014034:	085a      	lsrs	r2, r3, #1
 8014036:	fba5 c202 	umull	ip, r2, r5, r2
 801403a:	0892      	lsrs	r2, r2, #2
 801403c:	fb00 3312 	mls	r3, r0, r2, r3
 8014040:	297e      	cmp	r1, #126	; 0x7e
 8014042:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014046:	f43f af48 	beq.w	8013eda <uxr_read_framed_msg+0x302>
 801404a:	f081 0120 	eor.w	r1, r1, #32
 801404e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8014052:	e6e8      	b.n	8013e26 <uxr_read_framed_msg+0x24e>
 8014054:	1c58      	adds	r0, r3, #1
 8014056:	0842      	lsrs	r2, r0, #1
 8014058:	fba5 c202 	umull	ip, r2, r5, r2
 801405c:	0892      	lsrs	r2, r2, #2
 801405e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8014062:	fb0c 0212 	mls	r2, ip, r2, r0
 8014066:	b2d0      	uxtb	r0, r2
 8014068:	4281      	cmp	r1, r0
 801406a:	f43f af32 	beq.w	8013ed2 <uxr_read_framed_msg+0x2fa>
 801406e:	4422      	add	r2, r4
 8014070:	3302      	adds	r3, #2
 8014072:	7890      	ldrb	r0, [r2, #2]
 8014074:	085a      	lsrs	r2, r3, #1
 8014076:	fba5 1202 	umull	r1, r2, r5, r2
 801407a:	0892      	lsrs	r2, r2, #2
 801407c:	fb0c 3312 	mls	r3, ip, r2, r3
 8014080:	287e      	cmp	r0, #126	; 0x7e
 8014082:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014086:	d01f      	beq.n	80140c8 <uxr_read_framed_msg+0x4f0>
 8014088:	f080 0020 	eor.w	r0, r0, #32
 801408c:	e68b      	b.n	8013da6 <uxr_read_framed_msg+0x1ce>
 801408e:	1c51      	adds	r1, r2, #1
 8014090:	084b      	lsrs	r3, r1, #1
 8014092:	fba5 c303 	umull	ip, r3, r5, r3
 8014096:	089b      	lsrs	r3, r3, #2
 8014098:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801409c:	fb0c 1313 	mls	r3, ip, r3, r1
 80140a0:	b2d9      	uxtb	r1, r3
 80140a2:	4288      	cmp	r0, r1
 80140a4:	f43f af3d 	beq.w	8013f22 <uxr_read_framed_msg+0x34a>
 80140a8:	3202      	adds	r2, #2
 80140aa:	4423      	add	r3, r4
 80140ac:	0850      	lsrs	r0, r2, #1
 80140ae:	789b      	ldrb	r3, [r3, #2]
 80140b0:	fba5 1000 	umull	r1, r0, r5, r0
 80140b4:	0880      	lsrs	r0, r0, #2
 80140b6:	fb0c 2210 	mls	r2, ip, r0, r2
 80140ba:	2b7e      	cmp	r3, #126	; 0x7e
 80140bc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80140c0:	d016      	beq.n	80140f0 <uxr_read_framed_msg+0x518>
 80140c2:	f083 0120 	eor.w	r1, r3, #32
 80140c6:	e68b      	b.n	8013de0 <uxr_read_framed_msg+0x208>
 80140c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	2302      	movs	r3, #2
 80140ce:	9301      	str	r3, [sp, #4]
 80140d0:	464a      	mov	r2, r9
 80140d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140d4:	4641      	mov	r1, r8
 80140d6:	4620      	mov	r0, r4
 80140d8:	f7ff fcfc 	bl	8013ad4 <uxr_framing_read_transport>
 80140dc:	2800      	cmp	r0, #0
 80140de:	f47f aef6 	bne.w	8013ece <uxr_read_framed_msg+0x2f6>
 80140e2:	2301      	movs	r3, #1
 80140e4:	7023      	strb	r3, [r4, #0]
 80140e6:	e588      	b.n	8013bfa <uxr_read_framed_msg+0x22>
 80140e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	2301      	movs	r3, #1
 80140ee:	e7ee      	b.n	80140ce <uxr_read_framed_msg+0x4f6>
 80140f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140f2:	9300      	str	r3, [sp, #0]
 80140f4:	2303      	movs	r3, #3
 80140f6:	e7ea      	b.n	80140ce <uxr_read_framed_msg+0x4f6>
 80140f8:	ee17 8a90 	vmov	r8, s15
 80140fc:	e6ae      	b.n	8013e5c <uxr_read_framed_msg+0x284>
 80140fe:	bf00      	nop

08014100 <uxr_prepare_output_stream>:
 8014100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014102:	b087      	sub	sp, #28
 8014104:	2707      	movs	r7, #7
 8014106:	9202      	str	r2, [sp, #8]
 8014108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801410a:	9103      	str	r1, [sp, #12]
 801410c:	2500      	movs	r5, #0
 801410e:	3204      	adds	r2, #4
 8014110:	e9cd 7500 	strd	r7, r5, [sp]
 8014114:	461c      	mov	r4, r3
 8014116:	4606      	mov	r6, r0
 8014118:	f7f9 fc08 	bl	800d92c <uxr_prepare_stream_to_write_submessage>
 801411c:	f080 0201 	eor.w	r2, r0, #1
 8014120:	b2d2      	uxtb	r2, r2
 8014122:	75a2      	strb	r2, [r4, #22]
 8014124:	b112      	cbz	r2, 801412c <uxr_prepare_output_stream+0x2c>
 8014126:	4628      	mov	r0, r5
 8014128:	b007      	add	sp, #28
 801412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801412c:	aa05      	add	r2, sp, #20
 801412e:	9902      	ldr	r1, [sp, #8]
 8014130:	4630      	mov	r0, r6
 8014132:	f7f9 fd31 	bl	800db98 <uxr_init_base_object_request>
 8014136:	a905      	add	r1, sp, #20
 8014138:	4605      	mov	r5, r0
 801413a:	4620      	mov	r0, r4
 801413c:	f7fa fde0 	bl	800ed00 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014140:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014144:	69a6      	ldr	r6, [r4, #24]
 8014146:	69e7      	ldr	r7, [r4, #28]
 8014148:	1a52      	subs	r2, r2, r1
 801414a:	4620      	mov	r0, r4
 801414c:	f7f5 fcda 	bl	8009b04 <ucdr_init_buffer>
 8014150:	4620      	mov	r0, r4
 8014152:	463a      	mov	r2, r7
 8014154:	4631      	mov	r1, r6
 8014156:	f7f5 fca9 	bl	8009aac <ucdr_set_on_full_buffer_callback>
 801415a:	4628      	mov	r0, r5
 801415c:	b007      	add	sp, #28
 801415e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014160 <rcl_get_default_domain_id>:
 8014160:	b530      	push	{r4, r5, lr}
 8014162:	b083      	sub	sp, #12
 8014164:	2300      	movs	r3, #0
 8014166:	9300      	str	r3, [sp, #0]
 8014168:	b1d0      	cbz	r0, 80141a0 <rcl_get_default_domain_id+0x40>
 801416a:	4604      	mov	r4, r0
 801416c:	4669      	mov	r1, sp
 801416e:	4815      	ldr	r0, [pc, #84]	; (80141c4 <rcl_get_default_domain_id+0x64>)
 8014170:	f7f6 ffd4 	bl	800b11c <rcutils_get_env>
 8014174:	4602      	mov	r2, r0
 8014176:	b110      	cbz	r0, 801417e <rcl_get_default_domain_id+0x1e>
 8014178:	2001      	movs	r0, #1
 801417a:	b003      	add	sp, #12
 801417c:	bd30      	pop	{r4, r5, pc}
 801417e:	9b00      	ldr	r3, [sp, #0]
 8014180:	b18b      	cbz	r3, 80141a6 <rcl_get_default_domain_id+0x46>
 8014182:	7818      	ldrb	r0, [r3, #0]
 8014184:	2800      	cmp	r0, #0
 8014186:	d0f8      	beq.n	801417a <rcl_get_default_domain_id+0x1a>
 8014188:	a901      	add	r1, sp, #4
 801418a:	4618      	mov	r0, r3
 801418c:	9201      	str	r2, [sp, #4]
 801418e:	f000 fd93 	bl	8014cb8 <strtoul>
 8014192:	4605      	mov	r5, r0
 8014194:	b150      	cbz	r0, 80141ac <rcl_get_default_domain_id+0x4c>
 8014196:	1c43      	adds	r3, r0, #1
 8014198:	d00d      	beq.n	80141b6 <rcl_get_default_domain_id+0x56>
 801419a:	6025      	str	r5, [r4, #0]
 801419c:	2000      	movs	r0, #0
 801419e:	e7ec      	b.n	801417a <rcl_get_default_domain_id+0x1a>
 80141a0:	200b      	movs	r0, #11
 80141a2:	b003      	add	sp, #12
 80141a4:	bd30      	pop	{r4, r5, pc}
 80141a6:	4618      	mov	r0, r3
 80141a8:	b003      	add	sp, #12
 80141aa:	bd30      	pop	{r4, r5, pc}
 80141ac:	9b01      	ldr	r3, [sp, #4]
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d0f2      	beq.n	801419a <rcl_get_default_domain_id+0x3a>
 80141b4:	e7e0      	b.n	8014178 <rcl_get_default_domain_id+0x18>
 80141b6:	f000 ffcb 	bl	8015150 <__errno>
 80141ba:	6803      	ldr	r3, [r0, #0]
 80141bc:	2b22      	cmp	r3, #34	; 0x22
 80141be:	d1ec      	bne.n	801419a <rcl_get_default_domain_id+0x3a>
 80141c0:	e7da      	b.n	8014178 <rcl_get_default_domain_id+0x18>
 80141c2:	bf00      	nop
 80141c4:	08016b0c 	.word	0x08016b0c

080141c8 <rcl_expand_topic_name>:
 80141c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141cc:	b08b      	sub	sp, #44	; 0x2c
 80141ce:	9306      	str	r3, [sp, #24]
 80141d0:	2800      	cmp	r0, #0
 80141d2:	f000 80ad 	beq.w	8014330 <rcl_expand_topic_name+0x168>
 80141d6:	460e      	mov	r6, r1
 80141d8:	2900      	cmp	r1, #0
 80141da:	f000 80a9 	beq.w	8014330 <rcl_expand_topic_name+0x168>
 80141de:	4617      	mov	r7, r2
 80141e0:	2a00      	cmp	r2, #0
 80141e2:	f000 80a5 	beq.w	8014330 <rcl_expand_topic_name+0x168>
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f000 80a2 	beq.w	8014330 <rcl_expand_topic_name+0x168>
 80141ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	f000 809e 	beq.w	8014330 <rcl_expand_topic_name+0x168>
 80141f4:	2200      	movs	r2, #0
 80141f6:	a909      	add	r1, sp, #36	; 0x24
 80141f8:	4680      	mov	r8, r0
 80141fa:	f000 f96b 	bl	80144d4 <rcl_validate_topic_name>
 80141fe:	4604      	mov	r4, r0
 8014200:	2800      	cmp	r0, #0
 8014202:	f040 8096 	bne.w	8014332 <rcl_expand_topic_name+0x16a>
 8014206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014208:	2b00      	cmp	r3, #0
 801420a:	f040 809a 	bne.w	8014342 <rcl_expand_topic_name+0x17a>
 801420e:	4602      	mov	r2, r0
 8014210:	a909      	add	r1, sp, #36	; 0x24
 8014212:	4630      	mov	r0, r6
 8014214:	f7f7 fa08 	bl	800b628 <rmw_validate_node_name>
 8014218:	2800      	cmp	r0, #0
 801421a:	f040 808e 	bne.w	801433a <rcl_expand_topic_name+0x172>
 801421e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014220:	2a00      	cmp	r2, #0
 8014222:	f040 8093 	bne.w	801434c <rcl_expand_topic_name+0x184>
 8014226:	a909      	add	r1, sp, #36	; 0x24
 8014228:	4638      	mov	r0, r7
 801422a:	f7f7 f9df 	bl	800b5ec <rmw_validate_namespace>
 801422e:	2800      	cmp	r0, #0
 8014230:	f040 8083 	bne.w	801433a <rcl_expand_topic_name+0x172>
 8014234:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014236:	2c00      	cmp	r4, #0
 8014238:	f040 80ed 	bne.w	8014416 <rcl_expand_topic_name+0x24e>
 801423c:	217b      	movs	r1, #123	; 0x7b
 801423e:	4640      	mov	r0, r8
 8014240:	f000 fefa 	bl	8015038 <strchr>
 8014244:	f898 3000 	ldrb.w	r3, [r8]
 8014248:	2b2f      	cmp	r3, #47	; 0x2f
 801424a:	4605      	mov	r5, r0
 801424c:	f000 809e 	beq.w	801438c <rcl_expand_topic_name+0x1c4>
 8014250:	2b7e      	cmp	r3, #126	; 0x7e
 8014252:	f040 80a2 	bne.w	801439a <rcl_expand_topic_name+0x1d2>
 8014256:	4638      	mov	r0, r7
 8014258:	f7eb ffcc 	bl	80001f4 <strlen>
 801425c:	4a82      	ldr	r2, [pc, #520]	; (8014468 <rcl_expand_topic_name+0x2a0>)
 801425e:	4b83      	ldr	r3, [pc, #524]	; (801446c <rcl_expand_topic_name+0x2a4>)
 8014260:	2801      	cmp	r0, #1
 8014262:	bf18      	it	ne
 8014264:	4613      	movne	r3, r2
 8014266:	9302      	str	r3, [sp, #8]
 8014268:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8014270:	f108 0301 	add.w	r3, r8, #1
 8014274:	9305      	str	r3, [sp, #20]
 8014276:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801427a:	9301      	str	r3, [sp, #4]
 801427c:	ab14      	add	r3, sp, #80	; 0x50
 801427e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014280:	f7f6 ff96 	bl	800b1b0 <rcutils_format_string_limit>
 8014284:	4682      	mov	sl, r0
 8014286:	2800      	cmp	r0, #0
 8014288:	f000 80c7 	beq.w	801441a <rcl_expand_topic_name+0x252>
 801428c:	2d00      	cmp	r5, #0
 801428e:	f000 80a2 	beq.w	80143d6 <rcl_expand_topic_name+0x20e>
 8014292:	217b      	movs	r1, #123	; 0x7b
 8014294:	f000 fed0 	bl	8015038 <strchr>
 8014298:	46d1      	mov	r9, sl
 801429a:	4605      	mov	r5, r0
 801429c:	9407      	str	r4, [sp, #28]
 801429e:	46d3      	mov	fp, sl
 80142a0:	464c      	mov	r4, r9
 80142a2:	2d00      	cmp	r5, #0
 80142a4:	f000 80be 	beq.w	8014424 <rcl_expand_topic_name+0x25c>
 80142a8:	217d      	movs	r1, #125	; 0x7d
 80142aa:	4620      	mov	r0, r4
 80142ac:	f000 fec4 	bl	8015038 <strchr>
 80142b0:	eba0 0905 	sub.w	r9, r0, r5
 80142b4:	f109 0a01 	add.w	sl, r9, #1
 80142b8:	486d      	ldr	r0, [pc, #436]	; (8014470 <rcl_expand_topic_name+0x2a8>)
 80142ba:	4652      	mov	r2, sl
 80142bc:	4629      	mov	r1, r5
 80142be:	f000 fec8 	bl	8015052 <strncmp>
 80142c2:	2800      	cmp	r0, #0
 80142c4:	d067      	beq.n	8014396 <rcl_expand_topic_name+0x1ce>
 80142c6:	486b      	ldr	r0, [pc, #428]	; (8014474 <rcl_expand_topic_name+0x2ac>)
 80142c8:	4652      	mov	r2, sl
 80142ca:	4629      	mov	r1, r5
 80142cc:	f000 fec1 	bl	8015052 <strncmp>
 80142d0:	b130      	cbz	r0, 80142e0 <rcl_expand_topic_name+0x118>
 80142d2:	4869      	ldr	r0, [pc, #420]	; (8014478 <rcl_expand_topic_name+0x2b0>)
 80142d4:	4652      	mov	r2, sl
 80142d6:	4629      	mov	r1, r5
 80142d8:	f000 febb 	bl	8015052 <strncmp>
 80142dc:	2800      	cmp	r0, #0
 80142de:	d137      	bne.n	8014350 <rcl_expand_topic_name+0x188>
 80142e0:	46b9      	mov	r9, r7
 80142e2:	ab16      	add	r3, sp, #88	; 0x58
 80142e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80142e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80142ec:	ab14      	add	r3, sp, #80	; 0x50
 80142ee:	4628      	mov	r0, r5
 80142f0:	cb0c      	ldmia	r3, {r2, r3}
 80142f2:	4651      	mov	r1, sl
 80142f4:	f7f7 f898 	bl	800b428 <rcutils_strndup>
 80142f8:	4605      	mov	r5, r0
 80142fa:	2800      	cmp	r0, #0
 80142fc:	f000 809c 	beq.w	8014438 <rcl_expand_topic_name+0x270>
 8014300:	464a      	mov	r2, r9
 8014302:	4620      	mov	r0, r4
 8014304:	ab14      	add	r3, sp, #80	; 0x50
 8014306:	4629      	mov	r1, r5
 8014308:	f7f6 ff8c 	bl	800b224 <rcutils_repl_str>
 801430c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801430e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014310:	4604      	mov	r4, r0
 8014312:	4628      	mov	r0, r5
 8014314:	4798      	blx	r3
 8014316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014318:	9918      	ldr	r1, [sp, #96]	; 0x60
 801431a:	4658      	mov	r0, fp
 801431c:	4798      	blx	r3
 801431e:	2c00      	cmp	r4, #0
 8014320:	d07b      	beq.n	801441a <rcl_expand_topic_name+0x252>
 8014322:	217b      	movs	r1, #123	; 0x7b
 8014324:	4620      	mov	r0, r4
 8014326:	f000 fe87 	bl	8015038 <strchr>
 801432a:	46a3      	mov	fp, r4
 801432c:	4605      	mov	r5, r0
 801432e:	e7b8      	b.n	80142a2 <rcl_expand_topic_name+0xda>
 8014330:	240b      	movs	r4, #11
 8014332:	4620      	mov	r0, r4
 8014334:	b00b      	add	sp, #44	; 0x2c
 8014336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801433a:	f7fa fe4b 	bl	800efd4 <rcl_convert_rmw_ret_to_rcl_ret>
 801433e:	4604      	mov	r4, r0
 8014340:	e7f7      	b.n	8014332 <rcl_expand_topic_name+0x16a>
 8014342:	2467      	movs	r4, #103	; 0x67
 8014344:	4620      	mov	r0, r4
 8014346:	b00b      	add	sp, #44	; 0x2c
 8014348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801434c:	24c9      	movs	r4, #201	; 0xc9
 801434e:	e7f0      	b.n	8014332 <rcl_expand_topic_name+0x16a>
 8014350:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014354:	9806      	ldr	r0, [sp, #24]
 8014356:	1c69      	adds	r1, r5, #1
 8014358:	f7fd fad8 	bl	801190c <rcutils_string_map_getn>
 801435c:	4681      	mov	r9, r0
 801435e:	2800      	cmp	r0, #0
 8014360:	d1bf      	bne.n	80142e2 <rcl_expand_topic_name+0x11a>
 8014362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014364:	aa16      	add	r2, sp, #88	; 0x58
 8014366:	6018      	str	r0, [r3, #0]
 8014368:	ca07      	ldmia	r2, {r0, r1, r2}
 801436a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801436e:	ab14      	add	r3, sp, #80	; 0x50
 8014370:	cb0c      	ldmia	r3, {r2, r3}
 8014372:	4651      	mov	r1, sl
 8014374:	4628      	mov	r0, r5
 8014376:	f7f7 f857 	bl	800b428 <rcutils_strndup>
 801437a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801437c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801437e:	4798      	blx	r3
 8014380:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014382:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014384:	4658      	mov	r0, fp
 8014386:	2469      	movs	r4, #105	; 0x69
 8014388:	4798      	blx	r3
 801438a:	e7d2      	b.n	8014332 <rcl_expand_topic_name+0x16a>
 801438c:	2800      	cmp	r0, #0
 801438e:	d05b      	beq.n	8014448 <rcl_expand_topic_name+0x280>
 8014390:	46c1      	mov	r9, r8
 8014392:	46a2      	mov	sl, r4
 8014394:	e782      	b.n	801429c <rcl_expand_topic_name+0xd4>
 8014396:	46b1      	mov	r9, r6
 8014398:	e7a3      	b.n	80142e2 <rcl_expand_topic_name+0x11a>
 801439a:	2800      	cmp	r0, #0
 801439c:	d1f8      	bne.n	8014390 <rcl_expand_topic_name+0x1c8>
 801439e:	4638      	mov	r0, r7
 80143a0:	f7eb ff28 	bl	80001f4 <strlen>
 80143a4:	4a35      	ldr	r2, [pc, #212]	; (801447c <rcl_expand_topic_name+0x2b4>)
 80143a6:	4b36      	ldr	r3, [pc, #216]	; (8014480 <rcl_expand_topic_name+0x2b8>)
 80143a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80143ac:	2801      	cmp	r0, #1
 80143ae:	bf18      	it	ne
 80143b0:	4613      	movne	r3, r2
 80143b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80143b6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80143ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80143bc:	9703      	str	r7, [sp, #12]
 80143be:	9200      	str	r2, [sp, #0]
 80143c0:	ab14      	add	r3, sp, #80	; 0x50
 80143c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80143c4:	f7f6 fef4 	bl	800b1b0 <rcutils_format_string_limit>
 80143c8:	4682      	mov	sl, r0
 80143ca:	4653      	mov	r3, sl
 80143cc:	b32b      	cbz	r3, 801441a <rcl_expand_topic_name+0x252>
 80143ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80143d0:	f8c3 a000 	str.w	sl, [r3]
 80143d4:	e7ad      	b.n	8014332 <rcl_expand_topic_name+0x16a>
 80143d6:	f89a 3000 	ldrb.w	r3, [sl]
 80143da:	2b2f      	cmp	r3, #47	; 0x2f
 80143dc:	d0f7      	beq.n	80143ce <rcl_expand_topic_name+0x206>
 80143de:	4638      	mov	r0, r7
 80143e0:	f7eb ff08 	bl	80001f4 <strlen>
 80143e4:	4a25      	ldr	r2, [pc, #148]	; (801447c <rcl_expand_topic_name+0x2b4>)
 80143e6:	4b26      	ldr	r3, [pc, #152]	; (8014480 <rcl_expand_topic_name+0x2b8>)
 80143e8:	f8cd a010 	str.w	sl, [sp, #16]
 80143ec:	2801      	cmp	r0, #1
 80143ee:	bf18      	it	ne
 80143f0:	4613      	movne	r3, r2
 80143f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80143f6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80143fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80143fc:	9703      	str	r7, [sp, #12]
 80143fe:	9200      	str	r2, [sp, #0]
 8014400:	ab14      	add	r3, sp, #80	; 0x50
 8014402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014404:	f7f6 fed4 	bl	800b1b0 <rcutils_format_string_limit>
 8014408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801440a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801440c:	4605      	mov	r5, r0
 801440e:	4650      	mov	r0, sl
 8014410:	4798      	blx	r3
 8014412:	46aa      	mov	sl, r5
 8014414:	e7d9      	b.n	80143ca <rcl_expand_topic_name+0x202>
 8014416:	24ca      	movs	r4, #202	; 0xca
 8014418:	e78b      	b.n	8014332 <rcl_expand_topic_name+0x16a>
 801441a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801441c:	2300      	movs	r3, #0
 801441e:	6013      	str	r3, [r2, #0]
 8014420:	240a      	movs	r4, #10
 8014422:	e786      	b.n	8014332 <rcl_expand_topic_name+0x16a>
 8014424:	465b      	mov	r3, fp
 8014426:	9c07      	ldr	r4, [sp, #28]
 8014428:	46da      	mov	sl, fp
 801442a:	2b00      	cmp	r3, #0
 801442c:	d1d3      	bne.n	80143d6 <rcl_expand_topic_name+0x20e>
 801442e:	f898 3000 	ldrb.w	r3, [r8]
 8014432:	2b2f      	cmp	r3, #47	; 0x2f
 8014434:	d0cb      	beq.n	80143ce <rcl_expand_topic_name+0x206>
 8014436:	e7b2      	b.n	801439e <rcl_expand_topic_name+0x1d6>
 8014438:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 801443c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801443e:	6015      	str	r5, [r2, #0]
 8014440:	4658      	mov	r0, fp
 8014442:	4798      	blx	r3
 8014444:	240a      	movs	r4, #10
 8014446:	e774      	b.n	8014332 <rcl_expand_topic_name+0x16a>
 8014448:	ab17      	add	r3, sp, #92	; 0x5c
 801444a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801444e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014452:	ab14      	add	r3, sp, #80	; 0x50
 8014454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014456:	4640      	mov	r0, r8
 8014458:	f7f6 ffc4 	bl	800b3e4 <rcutils_strdup>
 801445c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801445e:	2800      	cmp	r0, #0
 8014460:	6018      	str	r0, [r3, #0]
 8014462:	bf08      	it	eq
 8014464:	240a      	moveq	r4, #10
 8014466:	e764      	b.n	8014332 <rcl_expand_topic_name+0x16a>
 8014468:	08016b1c 	.word	0x08016b1c
 801446c:	080166dc 	.word	0x080166dc
 8014470:	08016b24 	.word	0x08016b24
 8014474:	08016b2c 	.word	0x08016b2c
 8014478:	08016b34 	.word	0x08016b34
 801447c:	08016228 	.word	0x08016228
 8014480:	08016220 	.word	0x08016220

08014484 <rcl_get_default_topic_name_substitutions>:
 8014484:	2800      	cmp	r0, #0
 8014486:	bf0c      	ite	eq
 8014488:	200b      	moveq	r0, #11
 801448a:	2000      	movne	r0, #0
 801448c:	4770      	bx	lr
 801448e:	bf00      	nop

08014490 <rcl_publisher_is_valid>:
 8014490:	b1a0      	cbz	r0, 80144bc <rcl_publisher_is_valid+0x2c>
 8014492:	6803      	ldr	r3, [r0, #0]
 8014494:	b510      	push	{r4, lr}
 8014496:	4604      	mov	r4, r0
 8014498:	b173      	cbz	r3, 80144b8 <rcl_publisher_is_valid+0x28>
 801449a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 801449e:	b15a      	cbz	r2, 80144b8 <rcl_publisher_is_valid+0x28>
 80144a0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80144a4:	f7fa fdb4 	bl	800f010 <rcl_context_is_valid>
 80144a8:	b130      	cbz	r0, 80144b8 <rcl_publisher_is_valid+0x28>
 80144aa:	6823      	ldr	r3, [r4, #0]
 80144ac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80144b0:	3800      	subs	r0, #0
 80144b2:	bf18      	it	ne
 80144b4:	2001      	movne	r0, #1
 80144b6:	bd10      	pop	{r4, pc}
 80144b8:	2000      	movs	r0, #0
 80144ba:	bd10      	pop	{r4, pc}
 80144bc:	2000      	movs	r0, #0
 80144be:	4770      	bx	lr

080144c0 <rcl_publisher_is_valid_except_context>:
 80144c0:	b130      	cbz	r0, 80144d0 <rcl_publisher_is_valid_except_context+0x10>
 80144c2:	6800      	ldr	r0, [r0, #0]
 80144c4:	b120      	cbz	r0, 80144d0 <rcl_publisher_is_valid_except_context+0x10>
 80144c6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 80144ca:	3800      	subs	r0, #0
 80144cc:	bf18      	it	ne
 80144ce:	2001      	movne	r0, #1
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop

080144d4 <rcl_validate_topic_name>:
 80144d4:	2800      	cmp	r0, #0
 80144d6:	d07a      	beq.n	80145ce <rcl_validate_topic_name+0xfa>
 80144d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144dc:	460e      	mov	r6, r1
 80144de:	2900      	cmp	r1, #0
 80144e0:	d07c      	beq.n	80145dc <rcl_validate_topic_name+0x108>
 80144e2:	4617      	mov	r7, r2
 80144e4:	4605      	mov	r5, r0
 80144e6:	f7eb fe85 	bl	80001f4 <strlen>
 80144ea:	b1b0      	cbz	r0, 801451a <rcl_validate_topic_name+0x46>
 80144ec:	f895 9000 	ldrb.w	r9, [r5]
 80144f0:	f8df c180 	ldr.w	ip, [pc, #384]	; 8014674 <rcl_validate_topic_name+0x1a0>
 80144f4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80144f8:	f013 0304 	ands.w	r3, r3, #4
 80144fc:	d169      	bne.n	80145d2 <rcl_validate_topic_name+0xfe>
 80144fe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8014502:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014506:	2a2f      	cmp	r2, #47	; 0x2f
 8014508:	d10e      	bne.n	8014528 <rcl_validate_topic_name+0x54>
 801450a:	2202      	movs	r2, #2
 801450c:	6032      	str	r2, [r6, #0]
 801450e:	b36f      	cbz	r7, 801456c <rcl_validate_topic_name+0x98>
 8014510:	f8c7 8000 	str.w	r8, [r7]
 8014514:	4618      	mov	r0, r3
 8014516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801451a:	2301      	movs	r3, #1
 801451c:	6033      	str	r3, [r6, #0]
 801451e:	b32f      	cbz	r7, 801456c <rcl_validate_topic_name+0x98>
 8014520:	2000      	movs	r0, #0
 8014522:	6038      	str	r0, [r7, #0]
 8014524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014528:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 801452c:	461c      	mov	r4, r3
 801452e:	4619      	mov	r1, r3
 8014530:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014534:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014538:	f1be 0f09 	cmp.w	lr, #9
 801453c:	d919      	bls.n	8014572 <rcl_validate_topic_name+0x9e>
 801453e:	f022 0e20 	bic.w	lr, r2, #32
 8014542:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8014546:	f1be 0f19 	cmp.w	lr, #25
 801454a:	d912      	bls.n	8014572 <rcl_validate_topic_name+0x9e>
 801454c:	2a5f      	cmp	r2, #95	; 0x5f
 801454e:	d019      	beq.n	8014584 <rcl_validate_topic_name+0xb0>
 8014550:	2a2f      	cmp	r2, #47	; 0x2f
 8014552:	d051      	beq.n	80145f8 <rcl_validate_topic_name+0x124>
 8014554:	2a7e      	cmp	r2, #126	; 0x7e
 8014556:	d048      	beq.n	80145ea <rcl_validate_topic_name+0x116>
 8014558:	2a7b      	cmp	r2, #123	; 0x7b
 801455a:	d054      	beq.n	8014606 <rcl_validate_topic_name+0x132>
 801455c:	2a7d      	cmp	r2, #125	; 0x7d
 801455e:	d161      	bne.n	8014624 <rcl_validate_topic_name+0x150>
 8014560:	2c00      	cmp	r4, #0
 8014562:	d155      	bne.n	8014610 <rcl_validate_topic_name+0x13c>
 8014564:	2305      	movs	r3, #5
 8014566:	6033      	str	r3, [r6, #0]
 8014568:	b107      	cbz	r7, 801456c <rcl_validate_topic_name+0x98>
 801456a:	6039      	str	r1, [r7, #0]
 801456c:	2000      	movs	r0, #0
 801456e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014572:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014576:	0752      	lsls	r2, r2, #29
 8014578:	d504      	bpl.n	8014584 <rcl_validate_topic_name+0xb0>
 801457a:	b11c      	cbz	r4, 8014584 <rcl_validate_topic_name+0xb0>
 801457c:	b111      	cbz	r1, 8014584 <rcl_validate_topic_name+0xb0>
 801457e:	1e4a      	subs	r2, r1, #1
 8014580:	429a      	cmp	r2, r3
 8014582:	d02d      	beq.n	80145e0 <rcl_validate_topic_name+0x10c>
 8014584:	3101      	adds	r1, #1
 8014586:	4288      	cmp	r0, r1
 8014588:	d1d2      	bne.n	8014530 <rcl_validate_topic_name+0x5c>
 801458a:	2c00      	cmp	r4, #0
 801458c:	d145      	bne.n	801461a <rcl_validate_topic_name+0x146>
 801458e:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8014592:	d04f      	beq.n	8014634 <rcl_validate_topic_name+0x160>
 8014594:	4620      	mov	r0, r4
 8014596:	2301      	movs	r3, #1
 8014598:	e006      	b.n	80145a8 <rcl_validate_topic_name+0xd4>
 801459a:	428b      	cmp	r3, r1
 801459c:	f105 0501 	add.w	r5, r5, #1
 80145a0:	f103 0201 	add.w	r2, r3, #1
 80145a4:	d236      	bcs.n	8014614 <rcl_validate_topic_name+0x140>
 80145a6:	4613      	mov	r3, r2
 80145a8:	4580      	cmp	r8, r0
 80145aa:	f100 0001 	add.w	r0, r0, #1
 80145ae:	d0f4      	beq.n	801459a <rcl_validate_topic_name+0xc6>
 80145b0:	782a      	ldrb	r2, [r5, #0]
 80145b2:	2a2f      	cmp	r2, #47	; 0x2f
 80145b4:	d1f1      	bne.n	801459a <rcl_validate_topic_name+0xc6>
 80145b6:	786a      	ldrb	r2, [r5, #1]
 80145b8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80145bc:	0754      	lsls	r4, r2, #29
 80145be:	d5ec      	bpl.n	801459a <rcl_validate_topic_name+0xc6>
 80145c0:	2204      	movs	r2, #4
 80145c2:	6032      	str	r2, [r6, #0]
 80145c4:	2f00      	cmp	r7, #0
 80145c6:	d0d1      	beq.n	801456c <rcl_validate_topic_name+0x98>
 80145c8:	603b      	str	r3, [r7, #0]
 80145ca:	2000      	movs	r0, #0
 80145cc:	e7aa      	b.n	8014524 <rcl_validate_topic_name+0x50>
 80145ce:	200b      	movs	r0, #11
 80145d0:	4770      	bx	lr
 80145d2:	2304      	movs	r3, #4
 80145d4:	6033      	str	r3, [r6, #0]
 80145d6:	2f00      	cmp	r7, #0
 80145d8:	d1a2      	bne.n	8014520 <rcl_validate_topic_name+0x4c>
 80145da:	e7c7      	b.n	801456c <rcl_validate_topic_name+0x98>
 80145dc:	200b      	movs	r0, #11
 80145de:	e7a1      	b.n	8014524 <rcl_validate_topic_name+0x50>
 80145e0:	2309      	movs	r3, #9
 80145e2:	6033      	str	r3, [r6, #0]
 80145e4:	2f00      	cmp	r7, #0
 80145e6:	d1c0      	bne.n	801456a <rcl_validate_topic_name+0x96>
 80145e8:	e7c0      	b.n	801456c <rcl_validate_topic_name+0x98>
 80145ea:	2900      	cmp	r1, #0
 80145ec:	d0ca      	beq.n	8014584 <rcl_validate_topic_name+0xb0>
 80145ee:	2306      	movs	r3, #6
 80145f0:	6033      	str	r3, [r6, #0]
 80145f2:	2f00      	cmp	r7, #0
 80145f4:	d1b9      	bne.n	801456a <rcl_validate_topic_name+0x96>
 80145f6:	e7b9      	b.n	801456c <rcl_validate_topic_name+0x98>
 80145f8:	2c00      	cmp	r4, #0
 80145fa:	d0c3      	beq.n	8014584 <rcl_validate_topic_name+0xb0>
 80145fc:	2308      	movs	r3, #8
 80145fe:	6033      	str	r3, [r6, #0]
 8014600:	2f00      	cmp	r7, #0
 8014602:	d1b2      	bne.n	801456a <rcl_validate_topic_name+0x96>
 8014604:	e7b2      	b.n	801456c <rcl_validate_topic_name+0x98>
 8014606:	2c00      	cmp	r4, #0
 8014608:	d1f8      	bne.n	80145fc <rcl_validate_topic_name+0x128>
 801460a:	460b      	mov	r3, r1
 801460c:	2401      	movs	r4, #1
 801460e:	e7b9      	b.n	8014584 <rcl_validate_topic_name+0xb0>
 8014610:	2400      	movs	r4, #0
 8014612:	e7b7      	b.n	8014584 <rcl_validate_topic_name+0xb0>
 8014614:	2000      	movs	r0, #0
 8014616:	6030      	str	r0, [r6, #0]
 8014618:	e784      	b.n	8014524 <rcl_validate_topic_name+0x50>
 801461a:	2205      	movs	r2, #5
 801461c:	6032      	str	r2, [r6, #0]
 801461e:	2f00      	cmp	r7, #0
 8014620:	d1d2      	bne.n	80145c8 <rcl_validate_topic_name+0xf4>
 8014622:	e7a3      	b.n	801456c <rcl_validate_topic_name+0x98>
 8014624:	2c00      	cmp	r4, #0
 8014626:	bf14      	ite	ne
 8014628:	2308      	movne	r3, #8
 801462a:	2303      	moveq	r3, #3
 801462c:	6033      	str	r3, [r6, #0]
 801462e:	2f00      	cmp	r7, #0
 8014630:	d19b      	bne.n	801456a <rcl_validate_topic_name+0x96>
 8014632:	e79b      	b.n	801456c <rcl_validate_topic_name+0x98>
 8014634:	2301      	movs	r3, #1
 8014636:	e00a      	b.n	801464e <rcl_validate_topic_name+0x17a>
 8014638:	2c01      	cmp	r4, #1
 801463a:	d013      	beq.n	8014664 <rcl_validate_topic_name+0x190>
 801463c:	4299      	cmp	r1, r3
 801463e:	f104 0401 	add.w	r4, r4, #1
 8014642:	f105 0501 	add.w	r5, r5, #1
 8014646:	f103 0201 	add.w	r2, r3, #1
 801464a:	d9e3      	bls.n	8014614 <rcl_validate_topic_name+0x140>
 801464c:	4613      	mov	r3, r2
 801464e:	45a0      	cmp	r8, r4
 8014650:	d0f4      	beq.n	801463c <rcl_validate_topic_name+0x168>
 8014652:	782a      	ldrb	r2, [r5, #0]
 8014654:	2a2f      	cmp	r2, #47	; 0x2f
 8014656:	d1ef      	bne.n	8014638 <rcl_validate_topic_name+0x164>
 8014658:	786a      	ldrb	r2, [r5, #1]
 801465a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801465e:	0752      	lsls	r2, r2, #29
 8014660:	d5ec      	bpl.n	801463c <rcl_validate_topic_name+0x168>
 8014662:	e7ad      	b.n	80145c0 <rcl_validate_topic_name+0xec>
 8014664:	2307      	movs	r3, #7
 8014666:	6033      	str	r3, [r6, #0]
 8014668:	2f00      	cmp	r7, #0
 801466a:	f43f af7f 	beq.w	801456c <rcl_validate_topic_name+0x98>
 801466e:	603c      	str	r4, [r7, #0]
 8014670:	2000      	movs	r0, #0
 8014672:	e757      	b.n	8014524 <rcl_validate_topic_name+0x50>
 8014674:	08016bb0 	.word	0x08016bb0

08014678 <on_status>:
 8014678:	b082      	sub	sp, #8
 801467a:	b002      	add	sp, #8
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop

08014680 <on_topic>:
 8014680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014684:	4a22      	ldr	r2, [pc, #136]	; (8014710 <on_topic+0x90>)
 8014686:	b094      	sub	sp, #80	; 0x50
 8014688:	6812      	ldr	r2, [r2, #0]
 801468a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801468c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014690:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8014694:	b3c2      	cbz	r2, 8014708 <on_topic+0x88>
 8014696:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801469a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801469e:	e001      	b.n	80146a4 <on_topic+0x24>
 80146a0:	6852      	ldr	r2, [r2, #4]
 80146a2:	b38a      	cbz	r2, 8014708 <on_topic+0x88>
 80146a4:	6894      	ldr	r4, [r2, #8]
 80146a6:	8aa3      	ldrh	r3, [r4, #20]
 80146a8:	428b      	cmp	r3, r1
 80146aa:	d1f9      	bne.n	80146a0 <on_topic+0x20>
 80146ac:	7da3      	ldrb	r3, [r4, #22]
 80146ae:	4283      	cmp	r3, r0
 80146b0:	d1f6      	bne.n	80146a0 <on_topic+0x20>
 80146b2:	2248      	movs	r2, #72	; 0x48
 80146b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80146b8:	4668      	mov	r0, sp
 80146ba:	f000 fd7e 	bl	80151ba <memcpy>
 80146be:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80146c2:	cb0c      	ldmia	r3, {r2, r3}
 80146c4:	4620      	mov	r0, r4
 80146c6:	f7f7 fd55 	bl	800c174 <rmw_uxrce_get_static_input_buffer_for_entity>
 80146ca:	4607      	mov	r7, r0
 80146cc:	b1e0      	cbz	r0, 8014708 <on_topic+0x88>
 80146ce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80146d2:	4632      	mov	r2, r6
 80146d4:	4628      	mov	r0, r5
 80146d6:	f108 0110 	add.w	r1, r8, #16
 80146da:	f7fe f9a1 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 80146de:	b930      	cbnz	r0, 80146ee <on_topic+0x6e>
 80146e0:	480c      	ldr	r0, [pc, #48]	; (8014714 <on_topic+0x94>)
 80146e2:	4639      	mov	r1, r7
 80146e4:	b014      	add	sp, #80	; 0x50
 80146e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146ea:	f7fd ba6b 	b.w	8011bc4 <put_memory>
 80146ee:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80146f2:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 80146f6:	f7fe f8bd 	bl	8012874 <rmw_uros_epoch_nanos>
 80146fa:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 80146fe:	2305      	movs	r3, #5
 8014700:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014704:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8014708:	b014      	add	sp, #80	; 0x50
 801470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801470e:	bf00      	nop
 8014710:	2000db44 	.word	0x2000db44
 8014714:	2000db34 	.word	0x2000db34

08014718 <on_request>:
 8014718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801471c:	4823      	ldr	r0, [pc, #140]	; (80147ac <on_request+0x94>)
 801471e:	b094      	sub	sp, #80	; 0x50
 8014720:	6800      	ldr	r0, [r0, #0]
 8014722:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8014724:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014728:	9113      	str	r1, [sp, #76]	; 0x4c
 801472a:	2800      	cmp	r0, #0
 801472c:	d03b      	beq.n	80147a6 <on_request+0x8e>
 801472e:	461d      	mov	r5, r3
 8014730:	e001      	b.n	8014736 <on_request+0x1e>
 8014732:	6840      	ldr	r0, [r0, #4]
 8014734:	b3b8      	cbz	r0, 80147a6 <on_request+0x8e>
 8014736:	6884      	ldr	r4, [r0, #8]
 8014738:	8b21      	ldrh	r1, [r4, #24]
 801473a:	4291      	cmp	r1, r2
 801473c:	d1f9      	bne.n	8014732 <on_request+0x1a>
 801473e:	2248      	movs	r2, #72	; 0x48
 8014740:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014744:	4668      	mov	r0, sp
 8014746:	f000 fd38 	bl	80151ba <memcpy>
 801474a:	f104 0320 	add.w	r3, r4, #32
 801474e:	cb0c      	ldmia	r3, {r2, r3}
 8014750:	4620      	mov	r0, r4
 8014752:	f7f7 fd0f 	bl	800c174 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014756:	4680      	mov	r8, r0
 8014758:	b328      	cbz	r0, 80147a6 <on_request+0x8e>
 801475a:	4638      	mov	r0, r7
 801475c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014760:	4632      	mov	r2, r6
 8014762:	f107 0110 	add.w	r1, r7, #16
 8014766:	f7fe f95b 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 801476a:	b930      	cbnz	r0, 801477a <on_request+0x62>
 801476c:	4810      	ldr	r0, [pc, #64]	; (80147b0 <on_request+0x98>)
 801476e:	4641      	mov	r1, r8
 8014770:	b014      	add	sp, #80	; 0x50
 8014772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014776:	f7fd ba25 	b.w	8011bc4 <put_memory>
 801477a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801477c:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8014780:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8014784:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8014788:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801478c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014790:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014794:	f7fe f86e 	bl	8012874 <rmw_uros_epoch_nanos>
 8014798:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801479c:	2303      	movs	r3, #3
 801479e:	e942 0102 	strd	r0, r1, [r2, #-8]
 80147a2:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80147a6:	b014      	add	sp, #80	; 0x50
 80147a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ac:	2000db14 	.word	0x2000db14
 80147b0:	2000db34 	.word	0x2000db34

080147b4 <on_reply>:
 80147b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147b8:	4821      	ldr	r0, [pc, #132]	; (8014840 <on_reply+0x8c>)
 80147ba:	b094      	sub	sp, #80	; 0x50
 80147bc:	6800      	ldr	r0, [r0, #0]
 80147be:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80147c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80147c4:	9113      	str	r1, [sp, #76]	; 0x4c
 80147c6:	b3b8      	cbz	r0, 8014838 <on_reply+0x84>
 80147c8:	461d      	mov	r5, r3
 80147ca:	e001      	b.n	80147d0 <on_reply+0x1c>
 80147cc:	6840      	ldr	r0, [r0, #4]
 80147ce:	b398      	cbz	r0, 8014838 <on_reply+0x84>
 80147d0:	6884      	ldr	r4, [r0, #8]
 80147d2:	8b21      	ldrh	r1, [r4, #24]
 80147d4:	4291      	cmp	r1, r2
 80147d6:	d1f9      	bne.n	80147cc <on_reply+0x18>
 80147d8:	2248      	movs	r2, #72	; 0x48
 80147da:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80147de:	4668      	mov	r0, sp
 80147e0:	f000 fceb 	bl	80151ba <memcpy>
 80147e4:	f104 0320 	add.w	r3, r4, #32
 80147e8:	cb0c      	ldmia	r3, {r2, r3}
 80147ea:	4620      	mov	r0, r4
 80147ec:	f7f7 fcc2 	bl	800c174 <rmw_uxrce_get_static_input_buffer_for_entity>
 80147f0:	4680      	mov	r8, r0
 80147f2:	b308      	cbz	r0, 8014838 <on_reply+0x84>
 80147f4:	4638      	mov	r0, r7
 80147f6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80147fa:	4632      	mov	r2, r6
 80147fc:	f107 0110 	add.w	r1, r7, #16
 8014800:	f7fe f90e 	bl	8012a20 <ucdr_deserialize_array_uint8_t>
 8014804:	b930      	cbnz	r0, 8014814 <on_reply+0x60>
 8014806:	480f      	ldr	r0, [pc, #60]	; (8014844 <on_reply+0x90>)
 8014808:	4641      	mov	r1, r8
 801480a:	b014      	add	sp, #80	; 0x50
 801480c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014810:	f7fd b9d8 	b.w	8011bc4 <put_memory>
 8014814:	2200      	movs	r2, #0
 8014816:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801481a:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801481e:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8014822:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8014826:	f7fe f825 	bl	8012874 <rmw_uros_epoch_nanos>
 801482a:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801482e:	2304      	movs	r3, #4
 8014830:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014834:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8014838:	b014      	add	sp, #80	; 0x50
 801483a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801483e:	bf00      	nop
 8014840:	20009224 	.word	0x20009224
 8014844:	2000db34 	.word	0x2000db34

08014848 <calloc>:
 8014848:	4b02      	ldr	r3, [pc, #8]	; (8014854 <calloc+0xc>)
 801484a:	460a      	mov	r2, r1
 801484c:	4601      	mov	r1, r0
 801484e:	6818      	ldr	r0, [r3, #0]
 8014850:	f000 b802 	b.w	8014858 <_calloc_r>
 8014854:	20000230 	.word	0x20000230

08014858 <_calloc_r>:
 8014858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801485a:	fba1 2402 	umull	r2, r4, r1, r2
 801485e:	b94c      	cbnz	r4, 8014874 <_calloc_r+0x1c>
 8014860:	4611      	mov	r1, r2
 8014862:	9201      	str	r2, [sp, #4]
 8014864:	f000 f886 	bl	8014974 <_malloc_r>
 8014868:	9a01      	ldr	r2, [sp, #4]
 801486a:	4605      	mov	r5, r0
 801486c:	b930      	cbnz	r0, 801487c <_calloc_r+0x24>
 801486e:	4628      	mov	r0, r5
 8014870:	b003      	add	sp, #12
 8014872:	bd30      	pop	{r4, r5, pc}
 8014874:	220c      	movs	r2, #12
 8014876:	6002      	str	r2, [r0, #0]
 8014878:	2500      	movs	r5, #0
 801487a:	e7f8      	b.n	801486e <_calloc_r+0x16>
 801487c:	4621      	mov	r1, r4
 801487e:	f000 fbd3 	bl	8015028 <memset>
 8014882:	e7f4      	b.n	801486e <_calloc_r+0x16>

08014884 <getenv>:
 8014884:	b507      	push	{r0, r1, r2, lr}
 8014886:	4b04      	ldr	r3, [pc, #16]	; (8014898 <getenv+0x14>)
 8014888:	4601      	mov	r1, r0
 801488a:	aa01      	add	r2, sp, #4
 801488c:	6818      	ldr	r0, [r3, #0]
 801488e:	f000 f805 	bl	801489c <_findenv_r>
 8014892:	b003      	add	sp, #12
 8014894:	f85d fb04 	ldr.w	pc, [sp], #4
 8014898:	20000230 	.word	0x20000230

0801489c <_findenv_r>:
 801489c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8014910 <_findenv_r+0x74>
 80148a4:	4607      	mov	r7, r0
 80148a6:	4689      	mov	r9, r1
 80148a8:	4616      	mov	r6, r2
 80148aa:	f000 fcb3 	bl	8015214 <__env_lock>
 80148ae:	f8da 4000 	ldr.w	r4, [sl]
 80148b2:	b134      	cbz	r4, 80148c2 <_findenv_r+0x26>
 80148b4:	464b      	mov	r3, r9
 80148b6:	4698      	mov	r8, r3
 80148b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148bc:	b13a      	cbz	r2, 80148ce <_findenv_r+0x32>
 80148be:	2a3d      	cmp	r2, #61	; 0x3d
 80148c0:	d1f9      	bne.n	80148b6 <_findenv_r+0x1a>
 80148c2:	4638      	mov	r0, r7
 80148c4:	f000 fcac 	bl	8015220 <__env_unlock>
 80148c8:	2000      	movs	r0, #0
 80148ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ce:	eba8 0809 	sub.w	r8, r8, r9
 80148d2:	46a3      	mov	fp, r4
 80148d4:	f854 0b04 	ldr.w	r0, [r4], #4
 80148d8:	2800      	cmp	r0, #0
 80148da:	d0f2      	beq.n	80148c2 <_findenv_r+0x26>
 80148dc:	4642      	mov	r2, r8
 80148de:	4649      	mov	r1, r9
 80148e0:	f000 fbb7 	bl	8015052 <strncmp>
 80148e4:	2800      	cmp	r0, #0
 80148e6:	d1f4      	bne.n	80148d2 <_findenv_r+0x36>
 80148e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80148ec:	eb03 0508 	add.w	r5, r3, r8
 80148f0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80148f4:	2b3d      	cmp	r3, #61	; 0x3d
 80148f6:	d1ec      	bne.n	80148d2 <_findenv_r+0x36>
 80148f8:	f8da 3000 	ldr.w	r3, [sl]
 80148fc:	ebab 0303 	sub.w	r3, fp, r3
 8014900:	109b      	asrs	r3, r3, #2
 8014902:	4638      	mov	r0, r7
 8014904:	6033      	str	r3, [r6, #0]
 8014906:	f000 fc8b 	bl	8015220 <__env_unlock>
 801490a:	1c68      	adds	r0, r5, #1
 801490c:	e7dd      	b.n	80148ca <_findenv_r+0x2e>
 801490e:	bf00      	nop
 8014910:	20000000 	.word	0x20000000

08014914 <malloc>:
 8014914:	4b02      	ldr	r3, [pc, #8]	; (8014920 <malloc+0xc>)
 8014916:	4601      	mov	r1, r0
 8014918:	6818      	ldr	r0, [r3, #0]
 801491a:	f000 b82b 	b.w	8014974 <_malloc_r>
 801491e:	bf00      	nop
 8014920:	20000230 	.word	0x20000230

08014924 <free>:
 8014924:	4b02      	ldr	r3, [pc, #8]	; (8014930 <free+0xc>)
 8014926:	4601      	mov	r1, r0
 8014928:	6818      	ldr	r0, [r3, #0]
 801492a:	f000 bc7f 	b.w	801522c <_free_r>
 801492e:	bf00      	nop
 8014930:	20000230 	.word	0x20000230

08014934 <sbrk_aligned>:
 8014934:	b570      	push	{r4, r5, r6, lr}
 8014936:	4e0e      	ldr	r6, [pc, #56]	; (8014970 <sbrk_aligned+0x3c>)
 8014938:	460c      	mov	r4, r1
 801493a:	6831      	ldr	r1, [r6, #0]
 801493c:	4605      	mov	r5, r0
 801493e:	b911      	cbnz	r1, 8014946 <sbrk_aligned+0x12>
 8014940:	f000 fbe4 	bl	801510c <_sbrk_r>
 8014944:	6030      	str	r0, [r6, #0]
 8014946:	4621      	mov	r1, r4
 8014948:	4628      	mov	r0, r5
 801494a:	f000 fbdf 	bl	801510c <_sbrk_r>
 801494e:	1c43      	adds	r3, r0, #1
 8014950:	d00a      	beq.n	8014968 <sbrk_aligned+0x34>
 8014952:	1cc4      	adds	r4, r0, #3
 8014954:	f024 0403 	bic.w	r4, r4, #3
 8014958:	42a0      	cmp	r0, r4
 801495a:	d007      	beq.n	801496c <sbrk_aligned+0x38>
 801495c:	1a21      	subs	r1, r4, r0
 801495e:	4628      	mov	r0, r5
 8014960:	f000 fbd4 	bl	801510c <_sbrk_r>
 8014964:	3001      	adds	r0, #1
 8014966:	d101      	bne.n	801496c <sbrk_aligned+0x38>
 8014968:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801496c:	4620      	mov	r0, r4
 801496e:	bd70      	pop	{r4, r5, r6, pc}
 8014970:	2000dc50 	.word	0x2000dc50

08014974 <_malloc_r>:
 8014974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014978:	1ccd      	adds	r5, r1, #3
 801497a:	f025 0503 	bic.w	r5, r5, #3
 801497e:	3508      	adds	r5, #8
 8014980:	2d0c      	cmp	r5, #12
 8014982:	bf38      	it	cc
 8014984:	250c      	movcc	r5, #12
 8014986:	2d00      	cmp	r5, #0
 8014988:	4607      	mov	r7, r0
 801498a:	db01      	blt.n	8014990 <_malloc_r+0x1c>
 801498c:	42a9      	cmp	r1, r5
 801498e:	d905      	bls.n	801499c <_malloc_r+0x28>
 8014990:	230c      	movs	r3, #12
 8014992:	603b      	str	r3, [r7, #0]
 8014994:	2600      	movs	r6, #0
 8014996:	4630      	mov	r0, r6
 8014998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801499c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014a70 <_malloc_r+0xfc>
 80149a0:	f000 f868 	bl	8014a74 <__malloc_lock>
 80149a4:	f8d8 3000 	ldr.w	r3, [r8]
 80149a8:	461c      	mov	r4, r3
 80149aa:	bb5c      	cbnz	r4, 8014a04 <_malloc_r+0x90>
 80149ac:	4629      	mov	r1, r5
 80149ae:	4638      	mov	r0, r7
 80149b0:	f7ff ffc0 	bl	8014934 <sbrk_aligned>
 80149b4:	1c43      	adds	r3, r0, #1
 80149b6:	4604      	mov	r4, r0
 80149b8:	d155      	bne.n	8014a66 <_malloc_r+0xf2>
 80149ba:	f8d8 4000 	ldr.w	r4, [r8]
 80149be:	4626      	mov	r6, r4
 80149c0:	2e00      	cmp	r6, #0
 80149c2:	d145      	bne.n	8014a50 <_malloc_r+0xdc>
 80149c4:	2c00      	cmp	r4, #0
 80149c6:	d048      	beq.n	8014a5a <_malloc_r+0xe6>
 80149c8:	6823      	ldr	r3, [r4, #0]
 80149ca:	4631      	mov	r1, r6
 80149cc:	4638      	mov	r0, r7
 80149ce:	eb04 0903 	add.w	r9, r4, r3
 80149d2:	f000 fb9b 	bl	801510c <_sbrk_r>
 80149d6:	4581      	cmp	r9, r0
 80149d8:	d13f      	bne.n	8014a5a <_malloc_r+0xe6>
 80149da:	6821      	ldr	r1, [r4, #0]
 80149dc:	1a6d      	subs	r5, r5, r1
 80149de:	4629      	mov	r1, r5
 80149e0:	4638      	mov	r0, r7
 80149e2:	f7ff ffa7 	bl	8014934 <sbrk_aligned>
 80149e6:	3001      	adds	r0, #1
 80149e8:	d037      	beq.n	8014a5a <_malloc_r+0xe6>
 80149ea:	6823      	ldr	r3, [r4, #0]
 80149ec:	442b      	add	r3, r5
 80149ee:	6023      	str	r3, [r4, #0]
 80149f0:	f8d8 3000 	ldr.w	r3, [r8]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d038      	beq.n	8014a6a <_malloc_r+0xf6>
 80149f8:	685a      	ldr	r2, [r3, #4]
 80149fa:	42a2      	cmp	r2, r4
 80149fc:	d12b      	bne.n	8014a56 <_malloc_r+0xe2>
 80149fe:	2200      	movs	r2, #0
 8014a00:	605a      	str	r2, [r3, #4]
 8014a02:	e00f      	b.n	8014a24 <_malloc_r+0xb0>
 8014a04:	6822      	ldr	r2, [r4, #0]
 8014a06:	1b52      	subs	r2, r2, r5
 8014a08:	d41f      	bmi.n	8014a4a <_malloc_r+0xd6>
 8014a0a:	2a0b      	cmp	r2, #11
 8014a0c:	d917      	bls.n	8014a3e <_malloc_r+0xca>
 8014a0e:	1961      	adds	r1, r4, r5
 8014a10:	42a3      	cmp	r3, r4
 8014a12:	6025      	str	r5, [r4, #0]
 8014a14:	bf18      	it	ne
 8014a16:	6059      	strne	r1, [r3, #4]
 8014a18:	6863      	ldr	r3, [r4, #4]
 8014a1a:	bf08      	it	eq
 8014a1c:	f8c8 1000 	streq.w	r1, [r8]
 8014a20:	5162      	str	r2, [r4, r5]
 8014a22:	604b      	str	r3, [r1, #4]
 8014a24:	4638      	mov	r0, r7
 8014a26:	f104 060b 	add.w	r6, r4, #11
 8014a2a:	f000 f829 	bl	8014a80 <__malloc_unlock>
 8014a2e:	f026 0607 	bic.w	r6, r6, #7
 8014a32:	1d23      	adds	r3, r4, #4
 8014a34:	1af2      	subs	r2, r6, r3
 8014a36:	d0ae      	beq.n	8014996 <_malloc_r+0x22>
 8014a38:	1b9b      	subs	r3, r3, r6
 8014a3a:	50a3      	str	r3, [r4, r2]
 8014a3c:	e7ab      	b.n	8014996 <_malloc_r+0x22>
 8014a3e:	42a3      	cmp	r3, r4
 8014a40:	6862      	ldr	r2, [r4, #4]
 8014a42:	d1dd      	bne.n	8014a00 <_malloc_r+0x8c>
 8014a44:	f8c8 2000 	str.w	r2, [r8]
 8014a48:	e7ec      	b.n	8014a24 <_malloc_r+0xb0>
 8014a4a:	4623      	mov	r3, r4
 8014a4c:	6864      	ldr	r4, [r4, #4]
 8014a4e:	e7ac      	b.n	80149aa <_malloc_r+0x36>
 8014a50:	4634      	mov	r4, r6
 8014a52:	6876      	ldr	r6, [r6, #4]
 8014a54:	e7b4      	b.n	80149c0 <_malloc_r+0x4c>
 8014a56:	4613      	mov	r3, r2
 8014a58:	e7cc      	b.n	80149f4 <_malloc_r+0x80>
 8014a5a:	230c      	movs	r3, #12
 8014a5c:	603b      	str	r3, [r7, #0]
 8014a5e:	4638      	mov	r0, r7
 8014a60:	f000 f80e 	bl	8014a80 <__malloc_unlock>
 8014a64:	e797      	b.n	8014996 <_malloc_r+0x22>
 8014a66:	6025      	str	r5, [r4, #0]
 8014a68:	e7dc      	b.n	8014a24 <_malloc_r+0xb0>
 8014a6a:	605b      	str	r3, [r3, #4]
 8014a6c:	deff      	udf	#255	; 0xff
 8014a6e:	bf00      	nop
 8014a70:	2000dc4c 	.word	0x2000dc4c

08014a74 <__malloc_lock>:
 8014a74:	4801      	ldr	r0, [pc, #4]	; (8014a7c <__malloc_lock+0x8>)
 8014a76:	f000 bb96 	b.w	80151a6 <__retarget_lock_acquire_recursive>
 8014a7a:	bf00      	nop
 8014a7c:	2000dd95 	.word	0x2000dd95

08014a80 <__malloc_unlock>:
 8014a80:	4801      	ldr	r0, [pc, #4]	; (8014a88 <__malloc_unlock+0x8>)
 8014a82:	f000 bb91 	b.w	80151a8 <__retarget_lock_release_recursive>
 8014a86:	bf00      	nop
 8014a88:	2000dd95 	.word	0x2000dd95

08014a8c <srand>:
 8014a8c:	b538      	push	{r3, r4, r5, lr}
 8014a8e:	4b10      	ldr	r3, [pc, #64]	; (8014ad0 <srand+0x44>)
 8014a90:	681d      	ldr	r5, [r3, #0]
 8014a92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014a94:	4604      	mov	r4, r0
 8014a96:	b9b3      	cbnz	r3, 8014ac6 <srand+0x3a>
 8014a98:	2018      	movs	r0, #24
 8014a9a:	f7ff ff3b 	bl	8014914 <malloc>
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	6328      	str	r0, [r5, #48]	; 0x30
 8014aa2:	b920      	cbnz	r0, 8014aae <srand+0x22>
 8014aa4:	4b0b      	ldr	r3, [pc, #44]	; (8014ad4 <srand+0x48>)
 8014aa6:	480c      	ldr	r0, [pc, #48]	; (8014ad8 <srand+0x4c>)
 8014aa8:	2146      	movs	r1, #70	; 0x46
 8014aaa:	f000 fb95 	bl	80151d8 <__assert_func>
 8014aae:	490b      	ldr	r1, [pc, #44]	; (8014adc <srand+0x50>)
 8014ab0:	4b0b      	ldr	r3, [pc, #44]	; (8014ae0 <srand+0x54>)
 8014ab2:	e9c0 1300 	strd	r1, r3, [r0]
 8014ab6:	4b0b      	ldr	r3, [pc, #44]	; (8014ae4 <srand+0x58>)
 8014ab8:	6083      	str	r3, [r0, #8]
 8014aba:	230b      	movs	r3, #11
 8014abc:	8183      	strh	r3, [r0, #12]
 8014abe:	2100      	movs	r1, #0
 8014ac0:	2001      	movs	r0, #1
 8014ac2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014ac6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014ac8:	2200      	movs	r2, #0
 8014aca:	611c      	str	r4, [r3, #16]
 8014acc:	615a      	str	r2, [r3, #20]
 8014ace:	bd38      	pop	{r3, r4, r5, pc}
 8014ad0:	20000230 	.word	0x20000230
 8014ad4:	08016b40 	.word	0x08016b40
 8014ad8:	08016b57 	.word	0x08016b57
 8014adc:	abcd330e 	.word	0xabcd330e
 8014ae0:	e66d1234 	.word	0xe66d1234
 8014ae4:	0005deec 	.word	0x0005deec

08014ae8 <rand>:
 8014ae8:	4b16      	ldr	r3, [pc, #88]	; (8014b44 <rand+0x5c>)
 8014aea:	b510      	push	{r4, lr}
 8014aec:	681c      	ldr	r4, [r3, #0]
 8014aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014af0:	b9b3      	cbnz	r3, 8014b20 <rand+0x38>
 8014af2:	2018      	movs	r0, #24
 8014af4:	f7ff ff0e 	bl	8014914 <malloc>
 8014af8:	4602      	mov	r2, r0
 8014afa:	6320      	str	r0, [r4, #48]	; 0x30
 8014afc:	b920      	cbnz	r0, 8014b08 <rand+0x20>
 8014afe:	4b12      	ldr	r3, [pc, #72]	; (8014b48 <rand+0x60>)
 8014b00:	4812      	ldr	r0, [pc, #72]	; (8014b4c <rand+0x64>)
 8014b02:	2152      	movs	r1, #82	; 0x52
 8014b04:	f000 fb68 	bl	80151d8 <__assert_func>
 8014b08:	4911      	ldr	r1, [pc, #68]	; (8014b50 <rand+0x68>)
 8014b0a:	4b12      	ldr	r3, [pc, #72]	; (8014b54 <rand+0x6c>)
 8014b0c:	e9c0 1300 	strd	r1, r3, [r0]
 8014b10:	4b11      	ldr	r3, [pc, #68]	; (8014b58 <rand+0x70>)
 8014b12:	6083      	str	r3, [r0, #8]
 8014b14:	230b      	movs	r3, #11
 8014b16:	8183      	strh	r3, [r0, #12]
 8014b18:	2100      	movs	r1, #0
 8014b1a:	2001      	movs	r0, #1
 8014b1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014b20:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014b22:	480e      	ldr	r0, [pc, #56]	; (8014b5c <rand+0x74>)
 8014b24:	690b      	ldr	r3, [r1, #16]
 8014b26:	694c      	ldr	r4, [r1, #20]
 8014b28:	4a0d      	ldr	r2, [pc, #52]	; (8014b60 <rand+0x78>)
 8014b2a:	4358      	muls	r0, r3
 8014b2c:	fb02 0004 	mla	r0, r2, r4, r0
 8014b30:	fba3 3202 	umull	r3, r2, r3, r2
 8014b34:	3301      	adds	r3, #1
 8014b36:	eb40 0002 	adc.w	r0, r0, r2
 8014b3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014b3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014b42:	bd10      	pop	{r4, pc}
 8014b44:	20000230 	.word	0x20000230
 8014b48:	08016b40 	.word	0x08016b40
 8014b4c:	08016b57 	.word	0x08016b57
 8014b50:	abcd330e 	.word	0xabcd330e
 8014b54:	e66d1234 	.word	0xe66d1234
 8014b58:	0005deec 	.word	0x0005deec
 8014b5c:	5851f42d 	.word	0x5851f42d
 8014b60:	4c957f2d 	.word	0x4c957f2d

08014b64 <realloc>:
 8014b64:	4b02      	ldr	r3, [pc, #8]	; (8014b70 <realloc+0xc>)
 8014b66:	460a      	mov	r2, r1
 8014b68:	4601      	mov	r1, r0
 8014b6a:	6818      	ldr	r0, [r3, #0]
 8014b6c:	f000 b802 	b.w	8014b74 <_realloc_r>
 8014b70:	20000230 	.word	0x20000230

08014b74 <_realloc_r>:
 8014b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b78:	4680      	mov	r8, r0
 8014b7a:	4614      	mov	r4, r2
 8014b7c:	460e      	mov	r6, r1
 8014b7e:	b921      	cbnz	r1, 8014b8a <_realloc_r+0x16>
 8014b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b84:	4611      	mov	r1, r2
 8014b86:	f7ff bef5 	b.w	8014974 <_malloc_r>
 8014b8a:	b92a      	cbnz	r2, 8014b98 <_realloc_r+0x24>
 8014b8c:	f000 fb4e 	bl	801522c <_free_r>
 8014b90:	4625      	mov	r5, r4
 8014b92:	4628      	mov	r0, r5
 8014b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b98:	f000 fb94 	bl	80152c4 <_malloc_usable_size_r>
 8014b9c:	4284      	cmp	r4, r0
 8014b9e:	4607      	mov	r7, r0
 8014ba0:	d802      	bhi.n	8014ba8 <_realloc_r+0x34>
 8014ba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014ba6:	d812      	bhi.n	8014bce <_realloc_r+0x5a>
 8014ba8:	4621      	mov	r1, r4
 8014baa:	4640      	mov	r0, r8
 8014bac:	f7ff fee2 	bl	8014974 <_malloc_r>
 8014bb0:	4605      	mov	r5, r0
 8014bb2:	2800      	cmp	r0, #0
 8014bb4:	d0ed      	beq.n	8014b92 <_realloc_r+0x1e>
 8014bb6:	42bc      	cmp	r4, r7
 8014bb8:	4622      	mov	r2, r4
 8014bba:	4631      	mov	r1, r6
 8014bbc:	bf28      	it	cs
 8014bbe:	463a      	movcs	r2, r7
 8014bc0:	f000 fafb 	bl	80151ba <memcpy>
 8014bc4:	4631      	mov	r1, r6
 8014bc6:	4640      	mov	r0, r8
 8014bc8:	f000 fb30 	bl	801522c <_free_r>
 8014bcc:	e7e1      	b.n	8014b92 <_realloc_r+0x1e>
 8014bce:	4635      	mov	r5, r6
 8014bd0:	e7df      	b.n	8014b92 <_realloc_r+0x1e>
	...

08014bd4 <_strtoul_l.constprop.0>:
 8014bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bd8:	4f36      	ldr	r7, [pc, #216]	; (8014cb4 <_strtoul_l.constprop.0+0xe0>)
 8014bda:	4686      	mov	lr, r0
 8014bdc:	460d      	mov	r5, r1
 8014bde:	4628      	mov	r0, r5
 8014be0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014be4:	5d3e      	ldrb	r6, [r7, r4]
 8014be6:	f016 0608 	ands.w	r6, r6, #8
 8014bea:	d1f8      	bne.n	8014bde <_strtoul_l.constprop.0+0xa>
 8014bec:	2c2d      	cmp	r4, #45	; 0x2d
 8014bee:	d130      	bne.n	8014c52 <_strtoul_l.constprop.0+0x7e>
 8014bf0:	782c      	ldrb	r4, [r5, #0]
 8014bf2:	2601      	movs	r6, #1
 8014bf4:	1c85      	adds	r5, r0, #2
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d057      	beq.n	8014caa <_strtoul_l.constprop.0+0xd6>
 8014bfa:	2b10      	cmp	r3, #16
 8014bfc:	d109      	bne.n	8014c12 <_strtoul_l.constprop.0+0x3e>
 8014bfe:	2c30      	cmp	r4, #48	; 0x30
 8014c00:	d107      	bne.n	8014c12 <_strtoul_l.constprop.0+0x3e>
 8014c02:	7828      	ldrb	r0, [r5, #0]
 8014c04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014c08:	2858      	cmp	r0, #88	; 0x58
 8014c0a:	d149      	bne.n	8014ca0 <_strtoul_l.constprop.0+0xcc>
 8014c0c:	786c      	ldrb	r4, [r5, #1]
 8014c0e:	2310      	movs	r3, #16
 8014c10:	3502      	adds	r5, #2
 8014c12:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8014c16:	2700      	movs	r7, #0
 8014c18:	fbb8 f8f3 	udiv	r8, r8, r3
 8014c1c:	fb03 f908 	mul.w	r9, r3, r8
 8014c20:	ea6f 0909 	mvn.w	r9, r9
 8014c24:	4638      	mov	r0, r7
 8014c26:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014c2a:	f1bc 0f09 	cmp.w	ip, #9
 8014c2e:	d815      	bhi.n	8014c5c <_strtoul_l.constprop.0+0x88>
 8014c30:	4664      	mov	r4, ip
 8014c32:	42a3      	cmp	r3, r4
 8014c34:	dd23      	ble.n	8014c7e <_strtoul_l.constprop.0+0xaa>
 8014c36:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8014c3a:	d007      	beq.n	8014c4c <_strtoul_l.constprop.0+0x78>
 8014c3c:	4580      	cmp	r8, r0
 8014c3e:	d31b      	bcc.n	8014c78 <_strtoul_l.constprop.0+0xa4>
 8014c40:	d101      	bne.n	8014c46 <_strtoul_l.constprop.0+0x72>
 8014c42:	45a1      	cmp	r9, r4
 8014c44:	db18      	blt.n	8014c78 <_strtoul_l.constprop.0+0xa4>
 8014c46:	fb00 4003 	mla	r0, r0, r3, r4
 8014c4a:	2701      	movs	r7, #1
 8014c4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014c50:	e7e9      	b.n	8014c26 <_strtoul_l.constprop.0+0x52>
 8014c52:	2c2b      	cmp	r4, #43	; 0x2b
 8014c54:	bf04      	itt	eq
 8014c56:	782c      	ldrbeq	r4, [r5, #0]
 8014c58:	1c85      	addeq	r5, r0, #2
 8014c5a:	e7cc      	b.n	8014bf6 <_strtoul_l.constprop.0+0x22>
 8014c5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014c60:	f1bc 0f19 	cmp.w	ip, #25
 8014c64:	d801      	bhi.n	8014c6a <_strtoul_l.constprop.0+0x96>
 8014c66:	3c37      	subs	r4, #55	; 0x37
 8014c68:	e7e3      	b.n	8014c32 <_strtoul_l.constprop.0+0x5e>
 8014c6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014c6e:	f1bc 0f19 	cmp.w	ip, #25
 8014c72:	d804      	bhi.n	8014c7e <_strtoul_l.constprop.0+0xaa>
 8014c74:	3c57      	subs	r4, #87	; 0x57
 8014c76:	e7dc      	b.n	8014c32 <_strtoul_l.constprop.0+0x5e>
 8014c78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014c7c:	e7e6      	b.n	8014c4c <_strtoul_l.constprop.0+0x78>
 8014c7e:	1c7b      	adds	r3, r7, #1
 8014c80:	d106      	bne.n	8014c90 <_strtoul_l.constprop.0+0xbc>
 8014c82:	2322      	movs	r3, #34	; 0x22
 8014c84:	f8ce 3000 	str.w	r3, [lr]
 8014c88:	4638      	mov	r0, r7
 8014c8a:	b932      	cbnz	r2, 8014c9a <_strtoul_l.constprop.0+0xc6>
 8014c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c90:	b106      	cbz	r6, 8014c94 <_strtoul_l.constprop.0+0xc0>
 8014c92:	4240      	negs	r0, r0
 8014c94:	2a00      	cmp	r2, #0
 8014c96:	d0f9      	beq.n	8014c8c <_strtoul_l.constprop.0+0xb8>
 8014c98:	b107      	cbz	r7, 8014c9c <_strtoul_l.constprop.0+0xc8>
 8014c9a:	1e69      	subs	r1, r5, #1
 8014c9c:	6011      	str	r1, [r2, #0]
 8014c9e:	e7f5      	b.n	8014c8c <_strtoul_l.constprop.0+0xb8>
 8014ca0:	2430      	movs	r4, #48	; 0x30
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d1b5      	bne.n	8014c12 <_strtoul_l.constprop.0+0x3e>
 8014ca6:	2308      	movs	r3, #8
 8014ca8:	e7b3      	b.n	8014c12 <_strtoul_l.constprop.0+0x3e>
 8014caa:	2c30      	cmp	r4, #48	; 0x30
 8014cac:	d0a9      	beq.n	8014c02 <_strtoul_l.constprop.0+0x2e>
 8014cae:	230a      	movs	r3, #10
 8014cb0:	e7af      	b.n	8014c12 <_strtoul_l.constprop.0+0x3e>
 8014cb2:	bf00      	nop
 8014cb4:	08016bb0 	.word	0x08016bb0

08014cb8 <strtoul>:
 8014cb8:	4613      	mov	r3, r2
 8014cba:	460a      	mov	r2, r1
 8014cbc:	4601      	mov	r1, r0
 8014cbe:	4802      	ldr	r0, [pc, #8]	; (8014cc8 <strtoul+0x10>)
 8014cc0:	6800      	ldr	r0, [r0, #0]
 8014cc2:	f7ff bf87 	b.w	8014bd4 <_strtoul_l.constprop.0>
 8014cc6:	bf00      	nop
 8014cc8:	20000230 	.word	0x20000230

08014ccc <std>:
 8014ccc:	2300      	movs	r3, #0
 8014cce:	b510      	push	{r4, lr}
 8014cd0:	4604      	mov	r4, r0
 8014cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8014cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014cda:	6083      	str	r3, [r0, #8]
 8014cdc:	8181      	strh	r1, [r0, #12]
 8014cde:	6643      	str	r3, [r0, #100]	; 0x64
 8014ce0:	81c2      	strh	r2, [r0, #14]
 8014ce2:	6183      	str	r3, [r0, #24]
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	2208      	movs	r2, #8
 8014ce8:	305c      	adds	r0, #92	; 0x5c
 8014cea:	f000 f99d 	bl	8015028 <memset>
 8014cee:	4b0d      	ldr	r3, [pc, #52]	; (8014d24 <std+0x58>)
 8014cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8014cf2:	4b0d      	ldr	r3, [pc, #52]	; (8014d28 <std+0x5c>)
 8014cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8014cf6:	4b0d      	ldr	r3, [pc, #52]	; (8014d2c <std+0x60>)
 8014cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014cfa:	4b0d      	ldr	r3, [pc, #52]	; (8014d30 <std+0x64>)
 8014cfc:	6323      	str	r3, [r4, #48]	; 0x30
 8014cfe:	4b0d      	ldr	r3, [pc, #52]	; (8014d34 <std+0x68>)
 8014d00:	6224      	str	r4, [r4, #32]
 8014d02:	429c      	cmp	r4, r3
 8014d04:	d006      	beq.n	8014d14 <std+0x48>
 8014d06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014d0a:	4294      	cmp	r4, r2
 8014d0c:	d002      	beq.n	8014d14 <std+0x48>
 8014d0e:	33d0      	adds	r3, #208	; 0xd0
 8014d10:	429c      	cmp	r4, r3
 8014d12:	d105      	bne.n	8014d20 <std+0x54>
 8014d14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d1c:	f000 ba42 	b.w	80151a4 <__retarget_lock_init_recursive>
 8014d20:	bd10      	pop	{r4, pc}
 8014d22:	bf00      	nop
 8014d24:	08014edd 	.word	0x08014edd
 8014d28:	08014eff 	.word	0x08014eff
 8014d2c:	08014f37 	.word	0x08014f37
 8014d30:	08014f5b 	.word	0x08014f5b
 8014d34:	2000dc54 	.word	0x2000dc54

08014d38 <stdio_exit_handler>:
 8014d38:	4a02      	ldr	r2, [pc, #8]	; (8014d44 <stdio_exit_handler+0xc>)
 8014d3a:	4903      	ldr	r1, [pc, #12]	; (8014d48 <stdio_exit_handler+0x10>)
 8014d3c:	4803      	ldr	r0, [pc, #12]	; (8014d4c <stdio_exit_handler+0x14>)
 8014d3e:	f000 b869 	b.w	8014e14 <_fwalk_sglue>
 8014d42:	bf00      	nop
 8014d44:	200001d8 	.word	0x200001d8
 8014d48:	08015c39 	.word	0x08015c39
 8014d4c:	200001e4 	.word	0x200001e4

08014d50 <cleanup_stdio>:
 8014d50:	6841      	ldr	r1, [r0, #4]
 8014d52:	4b0c      	ldr	r3, [pc, #48]	; (8014d84 <cleanup_stdio+0x34>)
 8014d54:	4299      	cmp	r1, r3
 8014d56:	b510      	push	{r4, lr}
 8014d58:	4604      	mov	r4, r0
 8014d5a:	d001      	beq.n	8014d60 <cleanup_stdio+0x10>
 8014d5c:	f000 ff6c 	bl	8015c38 <_fflush_r>
 8014d60:	68a1      	ldr	r1, [r4, #8]
 8014d62:	4b09      	ldr	r3, [pc, #36]	; (8014d88 <cleanup_stdio+0x38>)
 8014d64:	4299      	cmp	r1, r3
 8014d66:	d002      	beq.n	8014d6e <cleanup_stdio+0x1e>
 8014d68:	4620      	mov	r0, r4
 8014d6a:	f000 ff65 	bl	8015c38 <_fflush_r>
 8014d6e:	68e1      	ldr	r1, [r4, #12]
 8014d70:	4b06      	ldr	r3, [pc, #24]	; (8014d8c <cleanup_stdio+0x3c>)
 8014d72:	4299      	cmp	r1, r3
 8014d74:	d004      	beq.n	8014d80 <cleanup_stdio+0x30>
 8014d76:	4620      	mov	r0, r4
 8014d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d7c:	f000 bf5c 	b.w	8015c38 <_fflush_r>
 8014d80:	bd10      	pop	{r4, pc}
 8014d82:	bf00      	nop
 8014d84:	2000dc54 	.word	0x2000dc54
 8014d88:	2000dcbc 	.word	0x2000dcbc
 8014d8c:	2000dd24 	.word	0x2000dd24

08014d90 <global_stdio_init.part.0>:
 8014d90:	b510      	push	{r4, lr}
 8014d92:	4b0b      	ldr	r3, [pc, #44]	; (8014dc0 <global_stdio_init.part.0+0x30>)
 8014d94:	4c0b      	ldr	r4, [pc, #44]	; (8014dc4 <global_stdio_init.part.0+0x34>)
 8014d96:	4a0c      	ldr	r2, [pc, #48]	; (8014dc8 <global_stdio_init.part.0+0x38>)
 8014d98:	601a      	str	r2, [r3, #0]
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	2104      	movs	r1, #4
 8014da0:	f7ff ff94 	bl	8014ccc <std>
 8014da4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014da8:	2201      	movs	r2, #1
 8014daa:	2109      	movs	r1, #9
 8014dac:	f7ff ff8e 	bl	8014ccc <std>
 8014db0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014db4:	2202      	movs	r2, #2
 8014db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014dba:	2112      	movs	r1, #18
 8014dbc:	f7ff bf86 	b.w	8014ccc <std>
 8014dc0:	2000dd8c 	.word	0x2000dd8c
 8014dc4:	2000dc54 	.word	0x2000dc54
 8014dc8:	08014d39 	.word	0x08014d39

08014dcc <__sfp_lock_acquire>:
 8014dcc:	4801      	ldr	r0, [pc, #4]	; (8014dd4 <__sfp_lock_acquire+0x8>)
 8014dce:	f000 b9ea 	b.w	80151a6 <__retarget_lock_acquire_recursive>
 8014dd2:	bf00      	nop
 8014dd4:	2000dd96 	.word	0x2000dd96

08014dd8 <__sfp_lock_release>:
 8014dd8:	4801      	ldr	r0, [pc, #4]	; (8014de0 <__sfp_lock_release+0x8>)
 8014dda:	f000 b9e5 	b.w	80151a8 <__retarget_lock_release_recursive>
 8014dde:	bf00      	nop
 8014de0:	2000dd96 	.word	0x2000dd96

08014de4 <__sinit>:
 8014de4:	b510      	push	{r4, lr}
 8014de6:	4604      	mov	r4, r0
 8014de8:	f7ff fff0 	bl	8014dcc <__sfp_lock_acquire>
 8014dec:	6a23      	ldr	r3, [r4, #32]
 8014dee:	b11b      	cbz	r3, 8014df8 <__sinit+0x14>
 8014df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014df4:	f7ff bff0 	b.w	8014dd8 <__sfp_lock_release>
 8014df8:	4b04      	ldr	r3, [pc, #16]	; (8014e0c <__sinit+0x28>)
 8014dfa:	6223      	str	r3, [r4, #32]
 8014dfc:	4b04      	ldr	r3, [pc, #16]	; (8014e10 <__sinit+0x2c>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d1f5      	bne.n	8014df0 <__sinit+0xc>
 8014e04:	f7ff ffc4 	bl	8014d90 <global_stdio_init.part.0>
 8014e08:	e7f2      	b.n	8014df0 <__sinit+0xc>
 8014e0a:	bf00      	nop
 8014e0c:	08014d51 	.word	0x08014d51
 8014e10:	2000dd8c 	.word	0x2000dd8c

08014e14 <_fwalk_sglue>:
 8014e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e18:	4607      	mov	r7, r0
 8014e1a:	4688      	mov	r8, r1
 8014e1c:	4614      	mov	r4, r2
 8014e1e:	2600      	movs	r6, #0
 8014e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014e24:	f1b9 0901 	subs.w	r9, r9, #1
 8014e28:	d505      	bpl.n	8014e36 <_fwalk_sglue+0x22>
 8014e2a:	6824      	ldr	r4, [r4, #0]
 8014e2c:	2c00      	cmp	r4, #0
 8014e2e:	d1f7      	bne.n	8014e20 <_fwalk_sglue+0xc>
 8014e30:	4630      	mov	r0, r6
 8014e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e36:	89ab      	ldrh	r3, [r5, #12]
 8014e38:	2b01      	cmp	r3, #1
 8014e3a:	d907      	bls.n	8014e4c <_fwalk_sglue+0x38>
 8014e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014e40:	3301      	adds	r3, #1
 8014e42:	d003      	beq.n	8014e4c <_fwalk_sglue+0x38>
 8014e44:	4629      	mov	r1, r5
 8014e46:	4638      	mov	r0, r7
 8014e48:	47c0      	blx	r8
 8014e4a:	4306      	orrs	r6, r0
 8014e4c:	3568      	adds	r5, #104	; 0x68
 8014e4e:	e7e9      	b.n	8014e24 <_fwalk_sglue+0x10>

08014e50 <iprintf>:
 8014e50:	b40f      	push	{r0, r1, r2, r3}
 8014e52:	b507      	push	{r0, r1, r2, lr}
 8014e54:	4906      	ldr	r1, [pc, #24]	; (8014e70 <iprintf+0x20>)
 8014e56:	ab04      	add	r3, sp, #16
 8014e58:	6808      	ldr	r0, [r1, #0]
 8014e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e5e:	6881      	ldr	r1, [r0, #8]
 8014e60:	9301      	str	r3, [sp, #4]
 8014e62:	f000 fbb9 	bl	80155d8 <_vfiprintf_r>
 8014e66:	b003      	add	sp, #12
 8014e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e6c:	b004      	add	sp, #16
 8014e6e:	4770      	bx	lr
 8014e70:	20000230 	.word	0x20000230

08014e74 <sniprintf>:
 8014e74:	b40c      	push	{r2, r3}
 8014e76:	b530      	push	{r4, r5, lr}
 8014e78:	4b17      	ldr	r3, [pc, #92]	; (8014ed8 <sniprintf+0x64>)
 8014e7a:	1e0c      	subs	r4, r1, #0
 8014e7c:	681d      	ldr	r5, [r3, #0]
 8014e7e:	b09d      	sub	sp, #116	; 0x74
 8014e80:	da08      	bge.n	8014e94 <sniprintf+0x20>
 8014e82:	238b      	movs	r3, #139	; 0x8b
 8014e84:	602b      	str	r3, [r5, #0]
 8014e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e8a:	b01d      	add	sp, #116	; 0x74
 8014e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e90:	b002      	add	sp, #8
 8014e92:	4770      	bx	lr
 8014e94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014e98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e9c:	bf14      	ite	ne
 8014e9e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014ea2:	4623      	moveq	r3, r4
 8014ea4:	9304      	str	r3, [sp, #16]
 8014ea6:	9307      	str	r3, [sp, #28]
 8014ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014eac:	9002      	str	r0, [sp, #8]
 8014eae:	9006      	str	r0, [sp, #24]
 8014eb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014eb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014eb6:	ab21      	add	r3, sp, #132	; 0x84
 8014eb8:	a902      	add	r1, sp, #8
 8014eba:	4628      	mov	r0, r5
 8014ebc:	9301      	str	r3, [sp, #4]
 8014ebe:	f000 fa63 	bl	8015388 <_svfiprintf_r>
 8014ec2:	1c43      	adds	r3, r0, #1
 8014ec4:	bfbc      	itt	lt
 8014ec6:	238b      	movlt	r3, #139	; 0x8b
 8014ec8:	602b      	strlt	r3, [r5, #0]
 8014eca:	2c00      	cmp	r4, #0
 8014ecc:	d0dd      	beq.n	8014e8a <sniprintf+0x16>
 8014ece:	9b02      	ldr	r3, [sp, #8]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	701a      	strb	r2, [r3, #0]
 8014ed4:	e7d9      	b.n	8014e8a <sniprintf+0x16>
 8014ed6:	bf00      	nop
 8014ed8:	20000230 	.word	0x20000230

08014edc <__sread>:
 8014edc:	b510      	push	{r4, lr}
 8014ede:	460c      	mov	r4, r1
 8014ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ee4:	f000 f900 	bl	80150e8 <_read_r>
 8014ee8:	2800      	cmp	r0, #0
 8014eea:	bfab      	itete	ge
 8014eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014eee:	89a3      	ldrhlt	r3, [r4, #12]
 8014ef0:	181b      	addge	r3, r3, r0
 8014ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014ef6:	bfac      	ite	ge
 8014ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8014efa:	81a3      	strhlt	r3, [r4, #12]
 8014efc:	bd10      	pop	{r4, pc}

08014efe <__swrite>:
 8014efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f02:	461f      	mov	r7, r3
 8014f04:	898b      	ldrh	r3, [r1, #12]
 8014f06:	05db      	lsls	r3, r3, #23
 8014f08:	4605      	mov	r5, r0
 8014f0a:	460c      	mov	r4, r1
 8014f0c:	4616      	mov	r6, r2
 8014f0e:	d505      	bpl.n	8014f1c <__swrite+0x1e>
 8014f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f14:	2302      	movs	r3, #2
 8014f16:	2200      	movs	r2, #0
 8014f18:	f000 f8d4 	bl	80150c4 <_lseek_r>
 8014f1c:	89a3      	ldrh	r3, [r4, #12]
 8014f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014f26:	81a3      	strh	r3, [r4, #12]
 8014f28:	4632      	mov	r2, r6
 8014f2a:	463b      	mov	r3, r7
 8014f2c:	4628      	mov	r0, r5
 8014f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f32:	f000 b8fb 	b.w	801512c <_write_r>

08014f36 <__sseek>:
 8014f36:	b510      	push	{r4, lr}
 8014f38:	460c      	mov	r4, r1
 8014f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f3e:	f000 f8c1 	bl	80150c4 <_lseek_r>
 8014f42:	1c43      	adds	r3, r0, #1
 8014f44:	89a3      	ldrh	r3, [r4, #12]
 8014f46:	bf15      	itete	ne
 8014f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8014f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014f52:	81a3      	strheq	r3, [r4, #12]
 8014f54:	bf18      	it	ne
 8014f56:	81a3      	strhne	r3, [r4, #12]
 8014f58:	bd10      	pop	{r4, pc}

08014f5a <__sclose>:
 8014f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f5e:	f000 b8a1 	b.w	80150a4 <_close_r>

08014f62 <_vsniprintf_r>:
 8014f62:	b530      	push	{r4, r5, lr}
 8014f64:	4614      	mov	r4, r2
 8014f66:	2c00      	cmp	r4, #0
 8014f68:	b09b      	sub	sp, #108	; 0x6c
 8014f6a:	4605      	mov	r5, r0
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	da05      	bge.n	8014f7c <_vsniprintf_r+0x1a>
 8014f70:	238b      	movs	r3, #139	; 0x8b
 8014f72:	6003      	str	r3, [r0, #0]
 8014f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f78:	b01b      	add	sp, #108	; 0x6c
 8014f7a:	bd30      	pop	{r4, r5, pc}
 8014f7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014f80:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014f84:	bf14      	ite	ne
 8014f86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014f8a:	4623      	moveq	r3, r4
 8014f8c:	9302      	str	r3, [sp, #8]
 8014f8e:	9305      	str	r3, [sp, #20]
 8014f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f94:	9100      	str	r1, [sp, #0]
 8014f96:	9104      	str	r1, [sp, #16]
 8014f98:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014f9c:	4669      	mov	r1, sp
 8014f9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014fa0:	f000 f9f2 	bl	8015388 <_svfiprintf_r>
 8014fa4:	1c43      	adds	r3, r0, #1
 8014fa6:	bfbc      	itt	lt
 8014fa8:	238b      	movlt	r3, #139	; 0x8b
 8014faa:	602b      	strlt	r3, [r5, #0]
 8014fac:	2c00      	cmp	r4, #0
 8014fae:	d0e3      	beq.n	8014f78 <_vsniprintf_r+0x16>
 8014fb0:	9b00      	ldr	r3, [sp, #0]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	701a      	strb	r2, [r3, #0]
 8014fb6:	e7df      	b.n	8014f78 <_vsniprintf_r+0x16>

08014fb8 <vsniprintf>:
 8014fb8:	b507      	push	{r0, r1, r2, lr}
 8014fba:	9300      	str	r3, [sp, #0]
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	460a      	mov	r2, r1
 8014fc0:	4601      	mov	r1, r0
 8014fc2:	4803      	ldr	r0, [pc, #12]	; (8014fd0 <vsniprintf+0x18>)
 8014fc4:	6800      	ldr	r0, [r0, #0]
 8014fc6:	f7ff ffcc 	bl	8014f62 <_vsniprintf_r>
 8014fca:	b003      	add	sp, #12
 8014fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fd0:	20000230 	.word	0x20000230

08014fd4 <memcmp>:
 8014fd4:	b510      	push	{r4, lr}
 8014fd6:	3901      	subs	r1, #1
 8014fd8:	4402      	add	r2, r0
 8014fda:	4290      	cmp	r0, r2
 8014fdc:	d101      	bne.n	8014fe2 <memcmp+0xe>
 8014fde:	2000      	movs	r0, #0
 8014fe0:	e005      	b.n	8014fee <memcmp+0x1a>
 8014fe2:	7803      	ldrb	r3, [r0, #0]
 8014fe4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014fe8:	42a3      	cmp	r3, r4
 8014fea:	d001      	beq.n	8014ff0 <memcmp+0x1c>
 8014fec:	1b18      	subs	r0, r3, r4
 8014fee:	bd10      	pop	{r4, pc}
 8014ff0:	3001      	adds	r0, #1
 8014ff2:	e7f2      	b.n	8014fda <memcmp+0x6>

08014ff4 <memmove>:
 8014ff4:	4288      	cmp	r0, r1
 8014ff6:	b510      	push	{r4, lr}
 8014ff8:	eb01 0402 	add.w	r4, r1, r2
 8014ffc:	d902      	bls.n	8015004 <memmove+0x10>
 8014ffe:	4284      	cmp	r4, r0
 8015000:	4623      	mov	r3, r4
 8015002:	d807      	bhi.n	8015014 <memmove+0x20>
 8015004:	1e43      	subs	r3, r0, #1
 8015006:	42a1      	cmp	r1, r4
 8015008:	d008      	beq.n	801501c <memmove+0x28>
 801500a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801500e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015012:	e7f8      	b.n	8015006 <memmove+0x12>
 8015014:	4402      	add	r2, r0
 8015016:	4601      	mov	r1, r0
 8015018:	428a      	cmp	r2, r1
 801501a:	d100      	bne.n	801501e <memmove+0x2a>
 801501c:	bd10      	pop	{r4, pc}
 801501e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015026:	e7f7      	b.n	8015018 <memmove+0x24>

08015028 <memset>:
 8015028:	4402      	add	r2, r0
 801502a:	4603      	mov	r3, r0
 801502c:	4293      	cmp	r3, r2
 801502e:	d100      	bne.n	8015032 <memset+0xa>
 8015030:	4770      	bx	lr
 8015032:	f803 1b01 	strb.w	r1, [r3], #1
 8015036:	e7f9      	b.n	801502c <memset+0x4>

08015038 <strchr>:
 8015038:	b2c9      	uxtb	r1, r1
 801503a:	4603      	mov	r3, r0
 801503c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015040:	b11a      	cbz	r2, 801504a <strchr+0x12>
 8015042:	428a      	cmp	r2, r1
 8015044:	d1f9      	bne.n	801503a <strchr+0x2>
 8015046:	4618      	mov	r0, r3
 8015048:	4770      	bx	lr
 801504a:	2900      	cmp	r1, #0
 801504c:	bf18      	it	ne
 801504e:	2300      	movne	r3, #0
 8015050:	e7f9      	b.n	8015046 <strchr+0xe>

08015052 <strncmp>:
 8015052:	b510      	push	{r4, lr}
 8015054:	b16a      	cbz	r2, 8015072 <strncmp+0x20>
 8015056:	3901      	subs	r1, #1
 8015058:	1884      	adds	r4, r0, r2
 801505a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801505e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015062:	429a      	cmp	r2, r3
 8015064:	d103      	bne.n	801506e <strncmp+0x1c>
 8015066:	42a0      	cmp	r0, r4
 8015068:	d001      	beq.n	801506e <strncmp+0x1c>
 801506a:	2a00      	cmp	r2, #0
 801506c:	d1f5      	bne.n	801505a <strncmp+0x8>
 801506e:	1ad0      	subs	r0, r2, r3
 8015070:	bd10      	pop	{r4, pc}
 8015072:	4610      	mov	r0, r2
 8015074:	e7fc      	b.n	8015070 <strncmp+0x1e>

08015076 <strstr>:
 8015076:	780a      	ldrb	r2, [r1, #0]
 8015078:	b570      	push	{r4, r5, r6, lr}
 801507a:	b96a      	cbnz	r2, 8015098 <strstr+0x22>
 801507c:	bd70      	pop	{r4, r5, r6, pc}
 801507e:	429a      	cmp	r2, r3
 8015080:	d109      	bne.n	8015096 <strstr+0x20>
 8015082:	460c      	mov	r4, r1
 8015084:	4605      	mov	r5, r0
 8015086:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801508a:	2b00      	cmp	r3, #0
 801508c:	d0f6      	beq.n	801507c <strstr+0x6>
 801508e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015092:	429e      	cmp	r6, r3
 8015094:	d0f7      	beq.n	8015086 <strstr+0x10>
 8015096:	3001      	adds	r0, #1
 8015098:	7803      	ldrb	r3, [r0, #0]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d1ef      	bne.n	801507e <strstr+0x8>
 801509e:	4618      	mov	r0, r3
 80150a0:	e7ec      	b.n	801507c <strstr+0x6>
	...

080150a4 <_close_r>:
 80150a4:	b538      	push	{r3, r4, r5, lr}
 80150a6:	4d06      	ldr	r5, [pc, #24]	; (80150c0 <_close_r+0x1c>)
 80150a8:	2300      	movs	r3, #0
 80150aa:	4604      	mov	r4, r0
 80150ac:	4608      	mov	r0, r1
 80150ae:	602b      	str	r3, [r5, #0]
 80150b0:	f7ec ff73 	bl	8001f9a <_close>
 80150b4:	1c43      	adds	r3, r0, #1
 80150b6:	d102      	bne.n	80150be <_close_r+0x1a>
 80150b8:	682b      	ldr	r3, [r5, #0]
 80150ba:	b103      	cbz	r3, 80150be <_close_r+0x1a>
 80150bc:	6023      	str	r3, [r4, #0]
 80150be:	bd38      	pop	{r3, r4, r5, pc}
 80150c0:	2000dd90 	.word	0x2000dd90

080150c4 <_lseek_r>:
 80150c4:	b538      	push	{r3, r4, r5, lr}
 80150c6:	4d07      	ldr	r5, [pc, #28]	; (80150e4 <_lseek_r+0x20>)
 80150c8:	4604      	mov	r4, r0
 80150ca:	4608      	mov	r0, r1
 80150cc:	4611      	mov	r1, r2
 80150ce:	2200      	movs	r2, #0
 80150d0:	602a      	str	r2, [r5, #0]
 80150d2:	461a      	mov	r2, r3
 80150d4:	f7ec ff88 	bl	8001fe8 <_lseek>
 80150d8:	1c43      	adds	r3, r0, #1
 80150da:	d102      	bne.n	80150e2 <_lseek_r+0x1e>
 80150dc:	682b      	ldr	r3, [r5, #0]
 80150de:	b103      	cbz	r3, 80150e2 <_lseek_r+0x1e>
 80150e0:	6023      	str	r3, [r4, #0]
 80150e2:	bd38      	pop	{r3, r4, r5, pc}
 80150e4:	2000dd90 	.word	0x2000dd90

080150e8 <_read_r>:
 80150e8:	b538      	push	{r3, r4, r5, lr}
 80150ea:	4d07      	ldr	r5, [pc, #28]	; (8015108 <_read_r+0x20>)
 80150ec:	4604      	mov	r4, r0
 80150ee:	4608      	mov	r0, r1
 80150f0:	4611      	mov	r1, r2
 80150f2:	2200      	movs	r2, #0
 80150f4:	602a      	str	r2, [r5, #0]
 80150f6:	461a      	mov	r2, r3
 80150f8:	f7ec ff16 	bl	8001f28 <_read>
 80150fc:	1c43      	adds	r3, r0, #1
 80150fe:	d102      	bne.n	8015106 <_read_r+0x1e>
 8015100:	682b      	ldr	r3, [r5, #0]
 8015102:	b103      	cbz	r3, 8015106 <_read_r+0x1e>
 8015104:	6023      	str	r3, [r4, #0]
 8015106:	bd38      	pop	{r3, r4, r5, pc}
 8015108:	2000dd90 	.word	0x2000dd90

0801510c <_sbrk_r>:
 801510c:	b538      	push	{r3, r4, r5, lr}
 801510e:	4d06      	ldr	r5, [pc, #24]	; (8015128 <_sbrk_r+0x1c>)
 8015110:	2300      	movs	r3, #0
 8015112:	4604      	mov	r4, r0
 8015114:	4608      	mov	r0, r1
 8015116:	602b      	str	r3, [r5, #0]
 8015118:	f7ec ff74 	bl	8002004 <_sbrk>
 801511c:	1c43      	adds	r3, r0, #1
 801511e:	d102      	bne.n	8015126 <_sbrk_r+0x1a>
 8015120:	682b      	ldr	r3, [r5, #0]
 8015122:	b103      	cbz	r3, 8015126 <_sbrk_r+0x1a>
 8015124:	6023      	str	r3, [r4, #0]
 8015126:	bd38      	pop	{r3, r4, r5, pc}
 8015128:	2000dd90 	.word	0x2000dd90

0801512c <_write_r>:
 801512c:	b538      	push	{r3, r4, r5, lr}
 801512e:	4d07      	ldr	r5, [pc, #28]	; (801514c <_write_r+0x20>)
 8015130:	4604      	mov	r4, r0
 8015132:	4608      	mov	r0, r1
 8015134:	4611      	mov	r1, r2
 8015136:	2200      	movs	r2, #0
 8015138:	602a      	str	r2, [r5, #0]
 801513a:	461a      	mov	r2, r3
 801513c:	f7ec ff11 	bl	8001f62 <_write>
 8015140:	1c43      	adds	r3, r0, #1
 8015142:	d102      	bne.n	801514a <_write_r+0x1e>
 8015144:	682b      	ldr	r3, [r5, #0]
 8015146:	b103      	cbz	r3, 801514a <_write_r+0x1e>
 8015148:	6023      	str	r3, [r4, #0]
 801514a:	bd38      	pop	{r3, r4, r5, pc}
 801514c:	2000dd90 	.word	0x2000dd90

08015150 <__errno>:
 8015150:	4b01      	ldr	r3, [pc, #4]	; (8015158 <__errno+0x8>)
 8015152:	6818      	ldr	r0, [r3, #0]
 8015154:	4770      	bx	lr
 8015156:	bf00      	nop
 8015158:	20000230 	.word	0x20000230

0801515c <__libc_init_array>:
 801515c:	b570      	push	{r4, r5, r6, lr}
 801515e:	4d0d      	ldr	r5, [pc, #52]	; (8015194 <__libc_init_array+0x38>)
 8015160:	4c0d      	ldr	r4, [pc, #52]	; (8015198 <__libc_init_array+0x3c>)
 8015162:	1b64      	subs	r4, r4, r5
 8015164:	10a4      	asrs	r4, r4, #2
 8015166:	2600      	movs	r6, #0
 8015168:	42a6      	cmp	r6, r4
 801516a:	d109      	bne.n	8015180 <__libc_init_array+0x24>
 801516c:	4d0b      	ldr	r5, [pc, #44]	; (801519c <__libc_init_array+0x40>)
 801516e:	4c0c      	ldr	r4, [pc, #48]	; (80151a0 <__libc_init_array+0x44>)
 8015170:	f000 ff02 	bl	8015f78 <_init>
 8015174:	1b64      	subs	r4, r4, r5
 8015176:	10a4      	asrs	r4, r4, #2
 8015178:	2600      	movs	r6, #0
 801517a:	42a6      	cmp	r6, r4
 801517c:	d105      	bne.n	801518a <__libc_init_array+0x2e>
 801517e:	bd70      	pop	{r4, r5, r6, pc}
 8015180:	f855 3b04 	ldr.w	r3, [r5], #4
 8015184:	4798      	blx	r3
 8015186:	3601      	adds	r6, #1
 8015188:	e7ee      	b.n	8015168 <__libc_init_array+0xc>
 801518a:	f855 3b04 	ldr.w	r3, [r5], #4
 801518e:	4798      	blx	r3
 8015190:	3601      	adds	r6, #1
 8015192:	e7f2      	b.n	801517a <__libc_init_array+0x1e>
 8015194:	08016d28 	.word	0x08016d28
 8015198:	08016d28 	.word	0x08016d28
 801519c:	08016d28 	.word	0x08016d28
 80151a0:	08016d30 	.word	0x08016d30

080151a4 <__retarget_lock_init_recursive>:
 80151a4:	4770      	bx	lr

080151a6 <__retarget_lock_acquire_recursive>:
 80151a6:	4770      	bx	lr

080151a8 <__retarget_lock_release_recursive>:
 80151a8:	4770      	bx	lr

080151aa <strcpy>:
 80151aa:	4603      	mov	r3, r0
 80151ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151b0:	f803 2b01 	strb.w	r2, [r3], #1
 80151b4:	2a00      	cmp	r2, #0
 80151b6:	d1f9      	bne.n	80151ac <strcpy+0x2>
 80151b8:	4770      	bx	lr

080151ba <memcpy>:
 80151ba:	440a      	add	r2, r1
 80151bc:	4291      	cmp	r1, r2
 80151be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80151c2:	d100      	bne.n	80151c6 <memcpy+0xc>
 80151c4:	4770      	bx	lr
 80151c6:	b510      	push	{r4, lr}
 80151c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80151d0:	4291      	cmp	r1, r2
 80151d2:	d1f9      	bne.n	80151c8 <memcpy+0xe>
 80151d4:	bd10      	pop	{r4, pc}
	...

080151d8 <__assert_func>:
 80151d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151da:	4614      	mov	r4, r2
 80151dc:	461a      	mov	r2, r3
 80151de:	4b09      	ldr	r3, [pc, #36]	; (8015204 <__assert_func+0x2c>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	4605      	mov	r5, r0
 80151e4:	68d8      	ldr	r0, [r3, #12]
 80151e6:	b14c      	cbz	r4, 80151fc <__assert_func+0x24>
 80151e8:	4b07      	ldr	r3, [pc, #28]	; (8015208 <__assert_func+0x30>)
 80151ea:	9100      	str	r1, [sp, #0]
 80151ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80151f0:	4906      	ldr	r1, [pc, #24]	; (801520c <__assert_func+0x34>)
 80151f2:	462b      	mov	r3, r5
 80151f4:	f000 fd48 	bl	8015c88 <fiprintf>
 80151f8:	f000 fdee 	bl	8015dd8 <abort>
 80151fc:	4b04      	ldr	r3, [pc, #16]	; (8015210 <__assert_func+0x38>)
 80151fe:	461c      	mov	r4, r3
 8015200:	e7f3      	b.n	80151ea <__assert_func+0x12>
 8015202:	bf00      	nop
 8015204:	20000230 	.word	0x20000230
 8015208:	08016cb0 	.word	0x08016cb0
 801520c:	08016cbd 	.word	0x08016cbd
 8015210:	08016ceb 	.word	0x08016ceb

08015214 <__env_lock>:
 8015214:	4801      	ldr	r0, [pc, #4]	; (801521c <__env_lock+0x8>)
 8015216:	f7ff bfc6 	b.w	80151a6 <__retarget_lock_acquire_recursive>
 801521a:	bf00      	nop
 801521c:	2000dd94 	.word	0x2000dd94

08015220 <__env_unlock>:
 8015220:	4801      	ldr	r0, [pc, #4]	; (8015228 <__env_unlock+0x8>)
 8015222:	f7ff bfc1 	b.w	80151a8 <__retarget_lock_release_recursive>
 8015226:	bf00      	nop
 8015228:	2000dd94 	.word	0x2000dd94

0801522c <_free_r>:
 801522c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801522e:	2900      	cmp	r1, #0
 8015230:	d044      	beq.n	80152bc <_free_r+0x90>
 8015232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015236:	9001      	str	r0, [sp, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	f1a1 0404 	sub.w	r4, r1, #4
 801523e:	bfb8      	it	lt
 8015240:	18e4      	addlt	r4, r4, r3
 8015242:	f7ff fc17 	bl	8014a74 <__malloc_lock>
 8015246:	4a1e      	ldr	r2, [pc, #120]	; (80152c0 <_free_r+0x94>)
 8015248:	9801      	ldr	r0, [sp, #4]
 801524a:	6813      	ldr	r3, [r2, #0]
 801524c:	b933      	cbnz	r3, 801525c <_free_r+0x30>
 801524e:	6063      	str	r3, [r4, #4]
 8015250:	6014      	str	r4, [r2, #0]
 8015252:	b003      	add	sp, #12
 8015254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015258:	f7ff bc12 	b.w	8014a80 <__malloc_unlock>
 801525c:	42a3      	cmp	r3, r4
 801525e:	d908      	bls.n	8015272 <_free_r+0x46>
 8015260:	6825      	ldr	r5, [r4, #0]
 8015262:	1961      	adds	r1, r4, r5
 8015264:	428b      	cmp	r3, r1
 8015266:	bf01      	itttt	eq
 8015268:	6819      	ldreq	r1, [r3, #0]
 801526a:	685b      	ldreq	r3, [r3, #4]
 801526c:	1949      	addeq	r1, r1, r5
 801526e:	6021      	streq	r1, [r4, #0]
 8015270:	e7ed      	b.n	801524e <_free_r+0x22>
 8015272:	461a      	mov	r2, r3
 8015274:	685b      	ldr	r3, [r3, #4]
 8015276:	b10b      	cbz	r3, 801527c <_free_r+0x50>
 8015278:	42a3      	cmp	r3, r4
 801527a:	d9fa      	bls.n	8015272 <_free_r+0x46>
 801527c:	6811      	ldr	r1, [r2, #0]
 801527e:	1855      	adds	r5, r2, r1
 8015280:	42a5      	cmp	r5, r4
 8015282:	d10b      	bne.n	801529c <_free_r+0x70>
 8015284:	6824      	ldr	r4, [r4, #0]
 8015286:	4421      	add	r1, r4
 8015288:	1854      	adds	r4, r2, r1
 801528a:	42a3      	cmp	r3, r4
 801528c:	6011      	str	r1, [r2, #0]
 801528e:	d1e0      	bne.n	8015252 <_free_r+0x26>
 8015290:	681c      	ldr	r4, [r3, #0]
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	6053      	str	r3, [r2, #4]
 8015296:	440c      	add	r4, r1
 8015298:	6014      	str	r4, [r2, #0]
 801529a:	e7da      	b.n	8015252 <_free_r+0x26>
 801529c:	d902      	bls.n	80152a4 <_free_r+0x78>
 801529e:	230c      	movs	r3, #12
 80152a0:	6003      	str	r3, [r0, #0]
 80152a2:	e7d6      	b.n	8015252 <_free_r+0x26>
 80152a4:	6825      	ldr	r5, [r4, #0]
 80152a6:	1961      	adds	r1, r4, r5
 80152a8:	428b      	cmp	r3, r1
 80152aa:	bf04      	itt	eq
 80152ac:	6819      	ldreq	r1, [r3, #0]
 80152ae:	685b      	ldreq	r3, [r3, #4]
 80152b0:	6063      	str	r3, [r4, #4]
 80152b2:	bf04      	itt	eq
 80152b4:	1949      	addeq	r1, r1, r5
 80152b6:	6021      	streq	r1, [r4, #0]
 80152b8:	6054      	str	r4, [r2, #4]
 80152ba:	e7ca      	b.n	8015252 <_free_r+0x26>
 80152bc:	b003      	add	sp, #12
 80152be:	bd30      	pop	{r4, r5, pc}
 80152c0:	2000dc4c 	.word	0x2000dc4c

080152c4 <_malloc_usable_size_r>:
 80152c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80152c8:	1f18      	subs	r0, r3, #4
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	bfbc      	itt	lt
 80152ce:	580b      	ldrlt	r3, [r1, r0]
 80152d0:	18c0      	addlt	r0, r0, r3
 80152d2:	4770      	bx	lr

080152d4 <__ssputs_r>:
 80152d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152d8:	688e      	ldr	r6, [r1, #8]
 80152da:	461f      	mov	r7, r3
 80152dc:	42be      	cmp	r6, r7
 80152de:	680b      	ldr	r3, [r1, #0]
 80152e0:	4682      	mov	sl, r0
 80152e2:	460c      	mov	r4, r1
 80152e4:	4690      	mov	r8, r2
 80152e6:	d82c      	bhi.n	8015342 <__ssputs_r+0x6e>
 80152e8:	898a      	ldrh	r2, [r1, #12]
 80152ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80152ee:	d026      	beq.n	801533e <__ssputs_r+0x6a>
 80152f0:	6965      	ldr	r5, [r4, #20]
 80152f2:	6909      	ldr	r1, [r1, #16]
 80152f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80152f8:	eba3 0901 	sub.w	r9, r3, r1
 80152fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015300:	1c7b      	adds	r3, r7, #1
 8015302:	444b      	add	r3, r9
 8015304:	106d      	asrs	r5, r5, #1
 8015306:	429d      	cmp	r5, r3
 8015308:	bf38      	it	cc
 801530a:	461d      	movcc	r5, r3
 801530c:	0553      	lsls	r3, r2, #21
 801530e:	d527      	bpl.n	8015360 <__ssputs_r+0x8c>
 8015310:	4629      	mov	r1, r5
 8015312:	f7ff fb2f 	bl	8014974 <_malloc_r>
 8015316:	4606      	mov	r6, r0
 8015318:	b360      	cbz	r0, 8015374 <__ssputs_r+0xa0>
 801531a:	6921      	ldr	r1, [r4, #16]
 801531c:	464a      	mov	r2, r9
 801531e:	f7ff ff4c 	bl	80151ba <memcpy>
 8015322:	89a3      	ldrh	r3, [r4, #12]
 8015324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801532c:	81a3      	strh	r3, [r4, #12]
 801532e:	6126      	str	r6, [r4, #16]
 8015330:	6165      	str	r5, [r4, #20]
 8015332:	444e      	add	r6, r9
 8015334:	eba5 0509 	sub.w	r5, r5, r9
 8015338:	6026      	str	r6, [r4, #0]
 801533a:	60a5      	str	r5, [r4, #8]
 801533c:	463e      	mov	r6, r7
 801533e:	42be      	cmp	r6, r7
 8015340:	d900      	bls.n	8015344 <__ssputs_r+0x70>
 8015342:	463e      	mov	r6, r7
 8015344:	6820      	ldr	r0, [r4, #0]
 8015346:	4632      	mov	r2, r6
 8015348:	4641      	mov	r1, r8
 801534a:	f7ff fe53 	bl	8014ff4 <memmove>
 801534e:	68a3      	ldr	r3, [r4, #8]
 8015350:	1b9b      	subs	r3, r3, r6
 8015352:	60a3      	str	r3, [r4, #8]
 8015354:	6823      	ldr	r3, [r4, #0]
 8015356:	4433      	add	r3, r6
 8015358:	6023      	str	r3, [r4, #0]
 801535a:	2000      	movs	r0, #0
 801535c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015360:	462a      	mov	r2, r5
 8015362:	f7ff fc07 	bl	8014b74 <_realloc_r>
 8015366:	4606      	mov	r6, r0
 8015368:	2800      	cmp	r0, #0
 801536a:	d1e0      	bne.n	801532e <__ssputs_r+0x5a>
 801536c:	6921      	ldr	r1, [r4, #16]
 801536e:	4650      	mov	r0, sl
 8015370:	f7ff ff5c 	bl	801522c <_free_r>
 8015374:	230c      	movs	r3, #12
 8015376:	f8ca 3000 	str.w	r3, [sl]
 801537a:	89a3      	ldrh	r3, [r4, #12]
 801537c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015380:	81a3      	strh	r3, [r4, #12]
 8015382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015386:	e7e9      	b.n	801535c <__ssputs_r+0x88>

08015388 <_svfiprintf_r>:
 8015388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801538c:	4698      	mov	r8, r3
 801538e:	898b      	ldrh	r3, [r1, #12]
 8015390:	061b      	lsls	r3, r3, #24
 8015392:	b09d      	sub	sp, #116	; 0x74
 8015394:	4607      	mov	r7, r0
 8015396:	460d      	mov	r5, r1
 8015398:	4614      	mov	r4, r2
 801539a:	d50e      	bpl.n	80153ba <_svfiprintf_r+0x32>
 801539c:	690b      	ldr	r3, [r1, #16]
 801539e:	b963      	cbnz	r3, 80153ba <_svfiprintf_r+0x32>
 80153a0:	2140      	movs	r1, #64	; 0x40
 80153a2:	f7ff fae7 	bl	8014974 <_malloc_r>
 80153a6:	6028      	str	r0, [r5, #0]
 80153a8:	6128      	str	r0, [r5, #16]
 80153aa:	b920      	cbnz	r0, 80153b6 <_svfiprintf_r+0x2e>
 80153ac:	230c      	movs	r3, #12
 80153ae:	603b      	str	r3, [r7, #0]
 80153b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153b4:	e0d0      	b.n	8015558 <_svfiprintf_r+0x1d0>
 80153b6:	2340      	movs	r3, #64	; 0x40
 80153b8:	616b      	str	r3, [r5, #20]
 80153ba:	2300      	movs	r3, #0
 80153bc:	9309      	str	r3, [sp, #36]	; 0x24
 80153be:	2320      	movs	r3, #32
 80153c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80153c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80153c8:	2330      	movs	r3, #48	; 0x30
 80153ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015570 <_svfiprintf_r+0x1e8>
 80153ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80153d2:	f04f 0901 	mov.w	r9, #1
 80153d6:	4623      	mov	r3, r4
 80153d8:	469a      	mov	sl, r3
 80153da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153de:	b10a      	cbz	r2, 80153e4 <_svfiprintf_r+0x5c>
 80153e0:	2a25      	cmp	r2, #37	; 0x25
 80153e2:	d1f9      	bne.n	80153d8 <_svfiprintf_r+0x50>
 80153e4:	ebba 0b04 	subs.w	fp, sl, r4
 80153e8:	d00b      	beq.n	8015402 <_svfiprintf_r+0x7a>
 80153ea:	465b      	mov	r3, fp
 80153ec:	4622      	mov	r2, r4
 80153ee:	4629      	mov	r1, r5
 80153f0:	4638      	mov	r0, r7
 80153f2:	f7ff ff6f 	bl	80152d4 <__ssputs_r>
 80153f6:	3001      	adds	r0, #1
 80153f8:	f000 80a9 	beq.w	801554e <_svfiprintf_r+0x1c6>
 80153fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80153fe:	445a      	add	r2, fp
 8015400:	9209      	str	r2, [sp, #36]	; 0x24
 8015402:	f89a 3000 	ldrb.w	r3, [sl]
 8015406:	2b00      	cmp	r3, #0
 8015408:	f000 80a1 	beq.w	801554e <_svfiprintf_r+0x1c6>
 801540c:	2300      	movs	r3, #0
 801540e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015416:	f10a 0a01 	add.w	sl, sl, #1
 801541a:	9304      	str	r3, [sp, #16]
 801541c:	9307      	str	r3, [sp, #28]
 801541e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015422:	931a      	str	r3, [sp, #104]	; 0x68
 8015424:	4654      	mov	r4, sl
 8015426:	2205      	movs	r2, #5
 8015428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801542c:	4850      	ldr	r0, [pc, #320]	; (8015570 <_svfiprintf_r+0x1e8>)
 801542e:	f7ea feef 	bl	8000210 <memchr>
 8015432:	9a04      	ldr	r2, [sp, #16]
 8015434:	b9d8      	cbnz	r0, 801546e <_svfiprintf_r+0xe6>
 8015436:	06d0      	lsls	r0, r2, #27
 8015438:	bf44      	itt	mi
 801543a:	2320      	movmi	r3, #32
 801543c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015440:	0711      	lsls	r1, r2, #28
 8015442:	bf44      	itt	mi
 8015444:	232b      	movmi	r3, #43	; 0x2b
 8015446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801544a:	f89a 3000 	ldrb.w	r3, [sl]
 801544e:	2b2a      	cmp	r3, #42	; 0x2a
 8015450:	d015      	beq.n	801547e <_svfiprintf_r+0xf6>
 8015452:	9a07      	ldr	r2, [sp, #28]
 8015454:	4654      	mov	r4, sl
 8015456:	2000      	movs	r0, #0
 8015458:	f04f 0c0a 	mov.w	ip, #10
 801545c:	4621      	mov	r1, r4
 801545e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015462:	3b30      	subs	r3, #48	; 0x30
 8015464:	2b09      	cmp	r3, #9
 8015466:	d94d      	bls.n	8015504 <_svfiprintf_r+0x17c>
 8015468:	b1b0      	cbz	r0, 8015498 <_svfiprintf_r+0x110>
 801546a:	9207      	str	r2, [sp, #28]
 801546c:	e014      	b.n	8015498 <_svfiprintf_r+0x110>
 801546e:	eba0 0308 	sub.w	r3, r0, r8
 8015472:	fa09 f303 	lsl.w	r3, r9, r3
 8015476:	4313      	orrs	r3, r2
 8015478:	9304      	str	r3, [sp, #16]
 801547a:	46a2      	mov	sl, r4
 801547c:	e7d2      	b.n	8015424 <_svfiprintf_r+0x9c>
 801547e:	9b03      	ldr	r3, [sp, #12]
 8015480:	1d19      	adds	r1, r3, #4
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	9103      	str	r1, [sp, #12]
 8015486:	2b00      	cmp	r3, #0
 8015488:	bfbb      	ittet	lt
 801548a:	425b      	neglt	r3, r3
 801548c:	f042 0202 	orrlt.w	r2, r2, #2
 8015490:	9307      	strge	r3, [sp, #28]
 8015492:	9307      	strlt	r3, [sp, #28]
 8015494:	bfb8      	it	lt
 8015496:	9204      	strlt	r2, [sp, #16]
 8015498:	7823      	ldrb	r3, [r4, #0]
 801549a:	2b2e      	cmp	r3, #46	; 0x2e
 801549c:	d10c      	bne.n	80154b8 <_svfiprintf_r+0x130>
 801549e:	7863      	ldrb	r3, [r4, #1]
 80154a0:	2b2a      	cmp	r3, #42	; 0x2a
 80154a2:	d134      	bne.n	801550e <_svfiprintf_r+0x186>
 80154a4:	9b03      	ldr	r3, [sp, #12]
 80154a6:	1d1a      	adds	r2, r3, #4
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	9203      	str	r2, [sp, #12]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	bfb8      	it	lt
 80154b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80154b4:	3402      	adds	r4, #2
 80154b6:	9305      	str	r3, [sp, #20]
 80154b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015580 <_svfiprintf_r+0x1f8>
 80154bc:	7821      	ldrb	r1, [r4, #0]
 80154be:	2203      	movs	r2, #3
 80154c0:	4650      	mov	r0, sl
 80154c2:	f7ea fea5 	bl	8000210 <memchr>
 80154c6:	b138      	cbz	r0, 80154d8 <_svfiprintf_r+0x150>
 80154c8:	9b04      	ldr	r3, [sp, #16]
 80154ca:	eba0 000a 	sub.w	r0, r0, sl
 80154ce:	2240      	movs	r2, #64	; 0x40
 80154d0:	4082      	lsls	r2, r0
 80154d2:	4313      	orrs	r3, r2
 80154d4:	3401      	adds	r4, #1
 80154d6:	9304      	str	r3, [sp, #16]
 80154d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154dc:	4825      	ldr	r0, [pc, #148]	; (8015574 <_svfiprintf_r+0x1ec>)
 80154de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80154e2:	2206      	movs	r2, #6
 80154e4:	f7ea fe94 	bl	8000210 <memchr>
 80154e8:	2800      	cmp	r0, #0
 80154ea:	d038      	beq.n	801555e <_svfiprintf_r+0x1d6>
 80154ec:	4b22      	ldr	r3, [pc, #136]	; (8015578 <_svfiprintf_r+0x1f0>)
 80154ee:	bb1b      	cbnz	r3, 8015538 <_svfiprintf_r+0x1b0>
 80154f0:	9b03      	ldr	r3, [sp, #12]
 80154f2:	3307      	adds	r3, #7
 80154f4:	f023 0307 	bic.w	r3, r3, #7
 80154f8:	3308      	adds	r3, #8
 80154fa:	9303      	str	r3, [sp, #12]
 80154fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154fe:	4433      	add	r3, r6
 8015500:	9309      	str	r3, [sp, #36]	; 0x24
 8015502:	e768      	b.n	80153d6 <_svfiprintf_r+0x4e>
 8015504:	fb0c 3202 	mla	r2, ip, r2, r3
 8015508:	460c      	mov	r4, r1
 801550a:	2001      	movs	r0, #1
 801550c:	e7a6      	b.n	801545c <_svfiprintf_r+0xd4>
 801550e:	2300      	movs	r3, #0
 8015510:	3401      	adds	r4, #1
 8015512:	9305      	str	r3, [sp, #20]
 8015514:	4619      	mov	r1, r3
 8015516:	f04f 0c0a 	mov.w	ip, #10
 801551a:	4620      	mov	r0, r4
 801551c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015520:	3a30      	subs	r2, #48	; 0x30
 8015522:	2a09      	cmp	r2, #9
 8015524:	d903      	bls.n	801552e <_svfiprintf_r+0x1a6>
 8015526:	2b00      	cmp	r3, #0
 8015528:	d0c6      	beq.n	80154b8 <_svfiprintf_r+0x130>
 801552a:	9105      	str	r1, [sp, #20]
 801552c:	e7c4      	b.n	80154b8 <_svfiprintf_r+0x130>
 801552e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015532:	4604      	mov	r4, r0
 8015534:	2301      	movs	r3, #1
 8015536:	e7f0      	b.n	801551a <_svfiprintf_r+0x192>
 8015538:	ab03      	add	r3, sp, #12
 801553a:	9300      	str	r3, [sp, #0]
 801553c:	462a      	mov	r2, r5
 801553e:	4b0f      	ldr	r3, [pc, #60]	; (801557c <_svfiprintf_r+0x1f4>)
 8015540:	a904      	add	r1, sp, #16
 8015542:	4638      	mov	r0, r7
 8015544:	f3af 8000 	nop.w
 8015548:	1c42      	adds	r2, r0, #1
 801554a:	4606      	mov	r6, r0
 801554c:	d1d6      	bne.n	80154fc <_svfiprintf_r+0x174>
 801554e:	89ab      	ldrh	r3, [r5, #12]
 8015550:	065b      	lsls	r3, r3, #25
 8015552:	f53f af2d 	bmi.w	80153b0 <_svfiprintf_r+0x28>
 8015556:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015558:	b01d      	add	sp, #116	; 0x74
 801555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555e:	ab03      	add	r3, sp, #12
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	462a      	mov	r2, r5
 8015564:	4b05      	ldr	r3, [pc, #20]	; (801557c <_svfiprintf_r+0x1f4>)
 8015566:	a904      	add	r1, sp, #16
 8015568:	4638      	mov	r0, r7
 801556a:	f000 f9bd 	bl	80158e8 <_printf_i>
 801556e:	e7eb      	b.n	8015548 <_svfiprintf_r+0x1c0>
 8015570:	08016cec 	.word	0x08016cec
 8015574:	08016cf6 	.word	0x08016cf6
 8015578:	00000000 	.word	0x00000000
 801557c:	080152d5 	.word	0x080152d5
 8015580:	08016cf2 	.word	0x08016cf2

08015584 <__sfputc_r>:
 8015584:	6893      	ldr	r3, [r2, #8]
 8015586:	3b01      	subs	r3, #1
 8015588:	2b00      	cmp	r3, #0
 801558a:	b410      	push	{r4}
 801558c:	6093      	str	r3, [r2, #8]
 801558e:	da08      	bge.n	80155a2 <__sfputc_r+0x1e>
 8015590:	6994      	ldr	r4, [r2, #24]
 8015592:	42a3      	cmp	r3, r4
 8015594:	db01      	blt.n	801559a <__sfputc_r+0x16>
 8015596:	290a      	cmp	r1, #10
 8015598:	d103      	bne.n	80155a2 <__sfputc_r+0x1e>
 801559a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801559e:	f000 bb85 	b.w	8015cac <__swbuf_r>
 80155a2:	6813      	ldr	r3, [r2, #0]
 80155a4:	1c58      	adds	r0, r3, #1
 80155a6:	6010      	str	r0, [r2, #0]
 80155a8:	7019      	strb	r1, [r3, #0]
 80155aa:	4608      	mov	r0, r1
 80155ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155b0:	4770      	bx	lr

080155b2 <__sfputs_r>:
 80155b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155b4:	4606      	mov	r6, r0
 80155b6:	460f      	mov	r7, r1
 80155b8:	4614      	mov	r4, r2
 80155ba:	18d5      	adds	r5, r2, r3
 80155bc:	42ac      	cmp	r4, r5
 80155be:	d101      	bne.n	80155c4 <__sfputs_r+0x12>
 80155c0:	2000      	movs	r0, #0
 80155c2:	e007      	b.n	80155d4 <__sfputs_r+0x22>
 80155c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155c8:	463a      	mov	r2, r7
 80155ca:	4630      	mov	r0, r6
 80155cc:	f7ff ffda 	bl	8015584 <__sfputc_r>
 80155d0:	1c43      	adds	r3, r0, #1
 80155d2:	d1f3      	bne.n	80155bc <__sfputs_r+0xa>
 80155d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080155d8 <_vfiprintf_r>:
 80155d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155dc:	460d      	mov	r5, r1
 80155de:	b09d      	sub	sp, #116	; 0x74
 80155e0:	4614      	mov	r4, r2
 80155e2:	4698      	mov	r8, r3
 80155e4:	4606      	mov	r6, r0
 80155e6:	b118      	cbz	r0, 80155f0 <_vfiprintf_r+0x18>
 80155e8:	6a03      	ldr	r3, [r0, #32]
 80155ea:	b90b      	cbnz	r3, 80155f0 <_vfiprintf_r+0x18>
 80155ec:	f7ff fbfa 	bl	8014de4 <__sinit>
 80155f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80155f2:	07d9      	lsls	r1, r3, #31
 80155f4:	d405      	bmi.n	8015602 <_vfiprintf_r+0x2a>
 80155f6:	89ab      	ldrh	r3, [r5, #12]
 80155f8:	059a      	lsls	r2, r3, #22
 80155fa:	d402      	bmi.n	8015602 <_vfiprintf_r+0x2a>
 80155fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155fe:	f7ff fdd2 	bl	80151a6 <__retarget_lock_acquire_recursive>
 8015602:	89ab      	ldrh	r3, [r5, #12]
 8015604:	071b      	lsls	r3, r3, #28
 8015606:	d501      	bpl.n	801560c <_vfiprintf_r+0x34>
 8015608:	692b      	ldr	r3, [r5, #16]
 801560a:	b99b      	cbnz	r3, 8015634 <_vfiprintf_r+0x5c>
 801560c:	4629      	mov	r1, r5
 801560e:	4630      	mov	r0, r6
 8015610:	f000 fb8a 	bl	8015d28 <__swsetup_r>
 8015614:	b170      	cbz	r0, 8015634 <_vfiprintf_r+0x5c>
 8015616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015618:	07dc      	lsls	r4, r3, #31
 801561a:	d504      	bpl.n	8015626 <_vfiprintf_r+0x4e>
 801561c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015620:	b01d      	add	sp, #116	; 0x74
 8015622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015626:	89ab      	ldrh	r3, [r5, #12]
 8015628:	0598      	lsls	r0, r3, #22
 801562a:	d4f7      	bmi.n	801561c <_vfiprintf_r+0x44>
 801562c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801562e:	f7ff fdbb 	bl	80151a8 <__retarget_lock_release_recursive>
 8015632:	e7f3      	b.n	801561c <_vfiprintf_r+0x44>
 8015634:	2300      	movs	r3, #0
 8015636:	9309      	str	r3, [sp, #36]	; 0x24
 8015638:	2320      	movs	r3, #32
 801563a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801563e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015642:	2330      	movs	r3, #48	; 0x30
 8015644:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80157f8 <_vfiprintf_r+0x220>
 8015648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801564c:	f04f 0901 	mov.w	r9, #1
 8015650:	4623      	mov	r3, r4
 8015652:	469a      	mov	sl, r3
 8015654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015658:	b10a      	cbz	r2, 801565e <_vfiprintf_r+0x86>
 801565a:	2a25      	cmp	r2, #37	; 0x25
 801565c:	d1f9      	bne.n	8015652 <_vfiprintf_r+0x7a>
 801565e:	ebba 0b04 	subs.w	fp, sl, r4
 8015662:	d00b      	beq.n	801567c <_vfiprintf_r+0xa4>
 8015664:	465b      	mov	r3, fp
 8015666:	4622      	mov	r2, r4
 8015668:	4629      	mov	r1, r5
 801566a:	4630      	mov	r0, r6
 801566c:	f7ff ffa1 	bl	80155b2 <__sfputs_r>
 8015670:	3001      	adds	r0, #1
 8015672:	f000 80a9 	beq.w	80157c8 <_vfiprintf_r+0x1f0>
 8015676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015678:	445a      	add	r2, fp
 801567a:	9209      	str	r2, [sp, #36]	; 0x24
 801567c:	f89a 3000 	ldrb.w	r3, [sl]
 8015680:	2b00      	cmp	r3, #0
 8015682:	f000 80a1 	beq.w	80157c8 <_vfiprintf_r+0x1f0>
 8015686:	2300      	movs	r3, #0
 8015688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801568c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015690:	f10a 0a01 	add.w	sl, sl, #1
 8015694:	9304      	str	r3, [sp, #16]
 8015696:	9307      	str	r3, [sp, #28]
 8015698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801569c:	931a      	str	r3, [sp, #104]	; 0x68
 801569e:	4654      	mov	r4, sl
 80156a0:	2205      	movs	r2, #5
 80156a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156a6:	4854      	ldr	r0, [pc, #336]	; (80157f8 <_vfiprintf_r+0x220>)
 80156a8:	f7ea fdb2 	bl	8000210 <memchr>
 80156ac:	9a04      	ldr	r2, [sp, #16]
 80156ae:	b9d8      	cbnz	r0, 80156e8 <_vfiprintf_r+0x110>
 80156b0:	06d1      	lsls	r1, r2, #27
 80156b2:	bf44      	itt	mi
 80156b4:	2320      	movmi	r3, #32
 80156b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156ba:	0713      	lsls	r3, r2, #28
 80156bc:	bf44      	itt	mi
 80156be:	232b      	movmi	r3, #43	; 0x2b
 80156c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156c4:	f89a 3000 	ldrb.w	r3, [sl]
 80156c8:	2b2a      	cmp	r3, #42	; 0x2a
 80156ca:	d015      	beq.n	80156f8 <_vfiprintf_r+0x120>
 80156cc:	9a07      	ldr	r2, [sp, #28]
 80156ce:	4654      	mov	r4, sl
 80156d0:	2000      	movs	r0, #0
 80156d2:	f04f 0c0a 	mov.w	ip, #10
 80156d6:	4621      	mov	r1, r4
 80156d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156dc:	3b30      	subs	r3, #48	; 0x30
 80156de:	2b09      	cmp	r3, #9
 80156e0:	d94d      	bls.n	801577e <_vfiprintf_r+0x1a6>
 80156e2:	b1b0      	cbz	r0, 8015712 <_vfiprintf_r+0x13a>
 80156e4:	9207      	str	r2, [sp, #28]
 80156e6:	e014      	b.n	8015712 <_vfiprintf_r+0x13a>
 80156e8:	eba0 0308 	sub.w	r3, r0, r8
 80156ec:	fa09 f303 	lsl.w	r3, r9, r3
 80156f0:	4313      	orrs	r3, r2
 80156f2:	9304      	str	r3, [sp, #16]
 80156f4:	46a2      	mov	sl, r4
 80156f6:	e7d2      	b.n	801569e <_vfiprintf_r+0xc6>
 80156f8:	9b03      	ldr	r3, [sp, #12]
 80156fa:	1d19      	adds	r1, r3, #4
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	9103      	str	r1, [sp, #12]
 8015700:	2b00      	cmp	r3, #0
 8015702:	bfbb      	ittet	lt
 8015704:	425b      	neglt	r3, r3
 8015706:	f042 0202 	orrlt.w	r2, r2, #2
 801570a:	9307      	strge	r3, [sp, #28]
 801570c:	9307      	strlt	r3, [sp, #28]
 801570e:	bfb8      	it	lt
 8015710:	9204      	strlt	r2, [sp, #16]
 8015712:	7823      	ldrb	r3, [r4, #0]
 8015714:	2b2e      	cmp	r3, #46	; 0x2e
 8015716:	d10c      	bne.n	8015732 <_vfiprintf_r+0x15a>
 8015718:	7863      	ldrb	r3, [r4, #1]
 801571a:	2b2a      	cmp	r3, #42	; 0x2a
 801571c:	d134      	bne.n	8015788 <_vfiprintf_r+0x1b0>
 801571e:	9b03      	ldr	r3, [sp, #12]
 8015720:	1d1a      	adds	r2, r3, #4
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	9203      	str	r2, [sp, #12]
 8015726:	2b00      	cmp	r3, #0
 8015728:	bfb8      	it	lt
 801572a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801572e:	3402      	adds	r4, #2
 8015730:	9305      	str	r3, [sp, #20]
 8015732:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015808 <_vfiprintf_r+0x230>
 8015736:	7821      	ldrb	r1, [r4, #0]
 8015738:	2203      	movs	r2, #3
 801573a:	4650      	mov	r0, sl
 801573c:	f7ea fd68 	bl	8000210 <memchr>
 8015740:	b138      	cbz	r0, 8015752 <_vfiprintf_r+0x17a>
 8015742:	9b04      	ldr	r3, [sp, #16]
 8015744:	eba0 000a 	sub.w	r0, r0, sl
 8015748:	2240      	movs	r2, #64	; 0x40
 801574a:	4082      	lsls	r2, r0
 801574c:	4313      	orrs	r3, r2
 801574e:	3401      	adds	r4, #1
 8015750:	9304      	str	r3, [sp, #16]
 8015752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015756:	4829      	ldr	r0, [pc, #164]	; (80157fc <_vfiprintf_r+0x224>)
 8015758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801575c:	2206      	movs	r2, #6
 801575e:	f7ea fd57 	bl	8000210 <memchr>
 8015762:	2800      	cmp	r0, #0
 8015764:	d03f      	beq.n	80157e6 <_vfiprintf_r+0x20e>
 8015766:	4b26      	ldr	r3, [pc, #152]	; (8015800 <_vfiprintf_r+0x228>)
 8015768:	bb1b      	cbnz	r3, 80157b2 <_vfiprintf_r+0x1da>
 801576a:	9b03      	ldr	r3, [sp, #12]
 801576c:	3307      	adds	r3, #7
 801576e:	f023 0307 	bic.w	r3, r3, #7
 8015772:	3308      	adds	r3, #8
 8015774:	9303      	str	r3, [sp, #12]
 8015776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015778:	443b      	add	r3, r7
 801577a:	9309      	str	r3, [sp, #36]	; 0x24
 801577c:	e768      	b.n	8015650 <_vfiprintf_r+0x78>
 801577e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015782:	460c      	mov	r4, r1
 8015784:	2001      	movs	r0, #1
 8015786:	e7a6      	b.n	80156d6 <_vfiprintf_r+0xfe>
 8015788:	2300      	movs	r3, #0
 801578a:	3401      	adds	r4, #1
 801578c:	9305      	str	r3, [sp, #20]
 801578e:	4619      	mov	r1, r3
 8015790:	f04f 0c0a 	mov.w	ip, #10
 8015794:	4620      	mov	r0, r4
 8015796:	f810 2b01 	ldrb.w	r2, [r0], #1
 801579a:	3a30      	subs	r2, #48	; 0x30
 801579c:	2a09      	cmp	r2, #9
 801579e:	d903      	bls.n	80157a8 <_vfiprintf_r+0x1d0>
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d0c6      	beq.n	8015732 <_vfiprintf_r+0x15a>
 80157a4:	9105      	str	r1, [sp, #20]
 80157a6:	e7c4      	b.n	8015732 <_vfiprintf_r+0x15a>
 80157a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80157ac:	4604      	mov	r4, r0
 80157ae:	2301      	movs	r3, #1
 80157b0:	e7f0      	b.n	8015794 <_vfiprintf_r+0x1bc>
 80157b2:	ab03      	add	r3, sp, #12
 80157b4:	9300      	str	r3, [sp, #0]
 80157b6:	462a      	mov	r2, r5
 80157b8:	4b12      	ldr	r3, [pc, #72]	; (8015804 <_vfiprintf_r+0x22c>)
 80157ba:	a904      	add	r1, sp, #16
 80157bc:	4630      	mov	r0, r6
 80157be:	f3af 8000 	nop.w
 80157c2:	4607      	mov	r7, r0
 80157c4:	1c78      	adds	r0, r7, #1
 80157c6:	d1d6      	bne.n	8015776 <_vfiprintf_r+0x19e>
 80157c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157ca:	07d9      	lsls	r1, r3, #31
 80157cc:	d405      	bmi.n	80157da <_vfiprintf_r+0x202>
 80157ce:	89ab      	ldrh	r3, [r5, #12]
 80157d0:	059a      	lsls	r2, r3, #22
 80157d2:	d402      	bmi.n	80157da <_vfiprintf_r+0x202>
 80157d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80157d6:	f7ff fce7 	bl	80151a8 <__retarget_lock_release_recursive>
 80157da:	89ab      	ldrh	r3, [r5, #12]
 80157dc:	065b      	lsls	r3, r3, #25
 80157de:	f53f af1d 	bmi.w	801561c <_vfiprintf_r+0x44>
 80157e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157e4:	e71c      	b.n	8015620 <_vfiprintf_r+0x48>
 80157e6:	ab03      	add	r3, sp, #12
 80157e8:	9300      	str	r3, [sp, #0]
 80157ea:	462a      	mov	r2, r5
 80157ec:	4b05      	ldr	r3, [pc, #20]	; (8015804 <_vfiprintf_r+0x22c>)
 80157ee:	a904      	add	r1, sp, #16
 80157f0:	4630      	mov	r0, r6
 80157f2:	f000 f879 	bl	80158e8 <_printf_i>
 80157f6:	e7e4      	b.n	80157c2 <_vfiprintf_r+0x1ea>
 80157f8:	08016cec 	.word	0x08016cec
 80157fc:	08016cf6 	.word	0x08016cf6
 8015800:	00000000 	.word	0x00000000
 8015804:	080155b3 	.word	0x080155b3
 8015808:	08016cf2 	.word	0x08016cf2

0801580c <_printf_common>:
 801580c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015810:	4616      	mov	r6, r2
 8015812:	4699      	mov	r9, r3
 8015814:	688a      	ldr	r2, [r1, #8]
 8015816:	690b      	ldr	r3, [r1, #16]
 8015818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801581c:	4293      	cmp	r3, r2
 801581e:	bfb8      	it	lt
 8015820:	4613      	movlt	r3, r2
 8015822:	6033      	str	r3, [r6, #0]
 8015824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015828:	4607      	mov	r7, r0
 801582a:	460c      	mov	r4, r1
 801582c:	b10a      	cbz	r2, 8015832 <_printf_common+0x26>
 801582e:	3301      	adds	r3, #1
 8015830:	6033      	str	r3, [r6, #0]
 8015832:	6823      	ldr	r3, [r4, #0]
 8015834:	0699      	lsls	r1, r3, #26
 8015836:	bf42      	ittt	mi
 8015838:	6833      	ldrmi	r3, [r6, #0]
 801583a:	3302      	addmi	r3, #2
 801583c:	6033      	strmi	r3, [r6, #0]
 801583e:	6825      	ldr	r5, [r4, #0]
 8015840:	f015 0506 	ands.w	r5, r5, #6
 8015844:	d106      	bne.n	8015854 <_printf_common+0x48>
 8015846:	f104 0a19 	add.w	sl, r4, #25
 801584a:	68e3      	ldr	r3, [r4, #12]
 801584c:	6832      	ldr	r2, [r6, #0]
 801584e:	1a9b      	subs	r3, r3, r2
 8015850:	42ab      	cmp	r3, r5
 8015852:	dc26      	bgt.n	80158a2 <_printf_common+0x96>
 8015854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015858:	1e13      	subs	r3, r2, #0
 801585a:	6822      	ldr	r2, [r4, #0]
 801585c:	bf18      	it	ne
 801585e:	2301      	movne	r3, #1
 8015860:	0692      	lsls	r2, r2, #26
 8015862:	d42b      	bmi.n	80158bc <_printf_common+0xb0>
 8015864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015868:	4649      	mov	r1, r9
 801586a:	4638      	mov	r0, r7
 801586c:	47c0      	blx	r8
 801586e:	3001      	adds	r0, #1
 8015870:	d01e      	beq.n	80158b0 <_printf_common+0xa4>
 8015872:	6823      	ldr	r3, [r4, #0]
 8015874:	6922      	ldr	r2, [r4, #16]
 8015876:	f003 0306 	and.w	r3, r3, #6
 801587a:	2b04      	cmp	r3, #4
 801587c:	bf02      	ittt	eq
 801587e:	68e5      	ldreq	r5, [r4, #12]
 8015880:	6833      	ldreq	r3, [r6, #0]
 8015882:	1aed      	subeq	r5, r5, r3
 8015884:	68a3      	ldr	r3, [r4, #8]
 8015886:	bf0c      	ite	eq
 8015888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801588c:	2500      	movne	r5, #0
 801588e:	4293      	cmp	r3, r2
 8015890:	bfc4      	itt	gt
 8015892:	1a9b      	subgt	r3, r3, r2
 8015894:	18ed      	addgt	r5, r5, r3
 8015896:	2600      	movs	r6, #0
 8015898:	341a      	adds	r4, #26
 801589a:	42b5      	cmp	r5, r6
 801589c:	d11a      	bne.n	80158d4 <_printf_common+0xc8>
 801589e:	2000      	movs	r0, #0
 80158a0:	e008      	b.n	80158b4 <_printf_common+0xa8>
 80158a2:	2301      	movs	r3, #1
 80158a4:	4652      	mov	r2, sl
 80158a6:	4649      	mov	r1, r9
 80158a8:	4638      	mov	r0, r7
 80158aa:	47c0      	blx	r8
 80158ac:	3001      	adds	r0, #1
 80158ae:	d103      	bne.n	80158b8 <_printf_common+0xac>
 80158b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158b8:	3501      	adds	r5, #1
 80158ba:	e7c6      	b.n	801584a <_printf_common+0x3e>
 80158bc:	18e1      	adds	r1, r4, r3
 80158be:	1c5a      	adds	r2, r3, #1
 80158c0:	2030      	movs	r0, #48	; 0x30
 80158c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80158c6:	4422      	add	r2, r4
 80158c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80158cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80158d0:	3302      	adds	r3, #2
 80158d2:	e7c7      	b.n	8015864 <_printf_common+0x58>
 80158d4:	2301      	movs	r3, #1
 80158d6:	4622      	mov	r2, r4
 80158d8:	4649      	mov	r1, r9
 80158da:	4638      	mov	r0, r7
 80158dc:	47c0      	blx	r8
 80158de:	3001      	adds	r0, #1
 80158e0:	d0e6      	beq.n	80158b0 <_printf_common+0xa4>
 80158e2:	3601      	adds	r6, #1
 80158e4:	e7d9      	b.n	801589a <_printf_common+0x8e>
	...

080158e8 <_printf_i>:
 80158e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80158ec:	7e0f      	ldrb	r7, [r1, #24]
 80158ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80158f0:	2f78      	cmp	r7, #120	; 0x78
 80158f2:	4691      	mov	r9, r2
 80158f4:	4680      	mov	r8, r0
 80158f6:	460c      	mov	r4, r1
 80158f8:	469a      	mov	sl, r3
 80158fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80158fe:	d807      	bhi.n	8015910 <_printf_i+0x28>
 8015900:	2f62      	cmp	r7, #98	; 0x62
 8015902:	d80a      	bhi.n	801591a <_printf_i+0x32>
 8015904:	2f00      	cmp	r7, #0
 8015906:	f000 80d4 	beq.w	8015ab2 <_printf_i+0x1ca>
 801590a:	2f58      	cmp	r7, #88	; 0x58
 801590c:	f000 80c0 	beq.w	8015a90 <_printf_i+0x1a8>
 8015910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015918:	e03a      	b.n	8015990 <_printf_i+0xa8>
 801591a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801591e:	2b15      	cmp	r3, #21
 8015920:	d8f6      	bhi.n	8015910 <_printf_i+0x28>
 8015922:	a101      	add	r1, pc, #4	; (adr r1, 8015928 <_printf_i+0x40>)
 8015924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015928:	08015981 	.word	0x08015981
 801592c:	08015995 	.word	0x08015995
 8015930:	08015911 	.word	0x08015911
 8015934:	08015911 	.word	0x08015911
 8015938:	08015911 	.word	0x08015911
 801593c:	08015911 	.word	0x08015911
 8015940:	08015995 	.word	0x08015995
 8015944:	08015911 	.word	0x08015911
 8015948:	08015911 	.word	0x08015911
 801594c:	08015911 	.word	0x08015911
 8015950:	08015911 	.word	0x08015911
 8015954:	08015a99 	.word	0x08015a99
 8015958:	080159c1 	.word	0x080159c1
 801595c:	08015a53 	.word	0x08015a53
 8015960:	08015911 	.word	0x08015911
 8015964:	08015911 	.word	0x08015911
 8015968:	08015abb 	.word	0x08015abb
 801596c:	08015911 	.word	0x08015911
 8015970:	080159c1 	.word	0x080159c1
 8015974:	08015911 	.word	0x08015911
 8015978:	08015911 	.word	0x08015911
 801597c:	08015a5b 	.word	0x08015a5b
 8015980:	682b      	ldr	r3, [r5, #0]
 8015982:	1d1a      	adds	r2, r3, #4
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	602a      	str	r2, [r5, #0]
 8015988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801598c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015990:	2301      	movs	r3, #1
 8015992:	e09f      	b.n	8015ad4 <_printf_i+0x1ec>
 8015994:	6820      	ldr	r0, [r4, #0]
 8015996:	682b      	ldr	r3, [r5, #0]
 8015998:	0607      	lsls	r7, r0, #24
 801599a:	f103 0104 	add.w	r1, r3, #4
 801599e:	6029      	str	r1, [r5, #0]
 80159a0:	d501      	bpl.n	80159a6 <_printf_i+0xbe>
 80159a2:	681e      	ldr	r6, [r3, #0]
 80159a4:	e003      	b.n	80159ae <_printf_i+0xc6>
 80159a6:	0646      	lsls	r6, r0, #25
 80159a8:	d5fb      	bpl.n	80159a2 <_printf_i+0xba>
 80159aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80159ae:	2e00      	cmp	r6, #0
 80159b0:	da03      	bge.n	80159ba <_printf_i+0xd2>
 80159b2:	232d      	movs	r3, #45	; 0x2d
 80159b4:	4276      	negs	r6, r6
 80159b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159ba:	485a      	ldr	r0, [pc, #360]	; (8015b24 <_printf_i+0x23c>)
 80159bc:	230a      	movs	r3, #10
 80159be:	e012      	b.n	80159e6 <_printf_i+0xfe>
 80159c0:	682b      	ldr	r3, [r5, #0]
 80159c2:	6820      	ldr	r0, [r4, #0]
 80159c4:	1d19      	adds	r1, r3, #4
 80159c6:	6029      	str	r1, [r5, #0]
 80159c8:	0605      	lsls	r5, r0, #24
 80159ca:	d501      	bpl.n	80159d0 <_printf_i+0xe8>
 80159cc:	681e      	ldr	r6, [r3, #0]
 80159ce:	e002      	b.n	80159d6 <_printf_i+0xee>
 80159d0:	0641      	lsls	r1, r0, #25
 80159d2:	d5fb      	bpl.n	80159cc <_printf_i+0xe4>
 80159d4:	881e      	ldrh	r6, [r3, #0]
 80159d6:	4853      	ldr	r0, [pc, #332]	; (8015b24 <_printf_i+0x23c>)
 80159d8:	2f6f      	cmp	r7, #111	; 0x6f
 80159da:	bf0c      	ite	eq
 80159dc:	2308      	moveq	r3, #8
 80159de:	230a      	movne	r3, #10
 80159e0:	2100      	movs	r1, #0
 80159e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80159e6:	6865      	ldr	r5, [r4, #4]
 80159e8:	60a5      	str	r5, [r4, #8]
 80159ea:	2d00      	cmp	r5, #0
 80159ec:	bfa2      	ittt	ge
 80159ee:	6821      	ldrge	r1, [r4, #0]
 80159f0:	f021 0104 	bicge.w	r1, r1, #4
 80159f4:	6021      	strge	r1, [r4, #0]
 80159f6:	b90e      	cbnz	r6, 80159fc <_printf_i+0x114>
 80159f8:	2d00      	cmp	r5, #0
 80159fa:	d04b      	beq.n	8015a94 <_printf_i+0x1ac>
 80159fc:	4615      	mov	r5, r2
 80159fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8015a02:	fb03 6711 	mls	r7, r3, r1, r6
 8015a06:	5dc7      	ldrb	r7, [r0, r7]
 8015a08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015a0c:	4637      	mov	r7, r6
 8015a0e:	42bb      	cmp	r3, r7
 8015a10:	460e      	mov	r6, r1
 8015a12:	d9f4      	bls.n	80159fe <_printf_i+0x116>
 8015a14:	2b08      	cmp	r3, #8
 8015a16:	d10b      	bne.n	8015a30 <_printf_i+0x148>
 8015a18:	6823      	ldr	r3, [r4, #0]
 8015a1a:	07de      	lsls	r6, r3, #31
 8015a1c:	d508      	bpl.n	8015a30 <_printf_i+0x148>
 8015a1e:	6923      	ldr	r3, [r4, #16]
 8015a20:	6861      	ldr	r1, [r4, #4]
 8015a22:	4299      	cmp	r1, r3
 8015a24:	bfde      	ittt	le
 8015a26:	2330      	movle	r3, #48	; 0x30
 8015a28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015a30:	1b52      	subs	r2, r2, r5
 8015a32:	6122      	str	r2, [r4, #16]
 8015a34:	f8cd a000 	str.w	sl, [sp]
 8015a38:	464b      	mov	r3, r9
 8015a3a:	aa03      	add	r2, sp, #12
 8015a3c:	4621      	mov	r1, r4
 8015a3e:	4640      	mov	r0, r8
 8015a40:	f7ff fee4 	bl	801580c <_printf_common>
 8015a44:	3001      	adds	r0, #1
 8015a46:	d14a      	bne.n	8015ade <_printf_i+0x1f6>
 8015a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a4c:	b004      	add	sp, #16
 8015a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a52:	6823      	ldr	r3, [r4, #0]
 8015a54:	f043 0320 	orr.w	r3, r3, #32
 8015a58:	6023      	str	r3, [r4, #0]
 8015a5a:	4833      	ldr	r0, [pc, #204]	; (8015b28 <_printf_i+0x240>)
 8015a5c:	2778      	movs	r7, #120	; 0x78
 8015a5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015a62:	6823      	ldr	r3, [r4, #0]
 8015a64:	6829      	ldr	r1, [r5, #0]
 8015a66:	061f      	lsls	r7, r3, #24
 8015a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8015a6c:	d402      	bmi.n	8015a74 <_printf_i+0x18c>
 8015a6e:	065f      	lsls	r7, r3, #25
 8015a70:	bf48      	it	mi
 8015a72:	b2b6      	uxthmi	r6, r6
 8015a74:	07df      	lsls	r7, r3, #31
 8015a76:	bf48      	it	mi
 8015a78:	f043 0320 	orrmi.w	r3, r3, #32
 8015a7c:	6029      	str	r1, [r5, #0]
 8015a7e:	bf48      	it	mi
 8015a80:	6023      	strmi	r3, [r4, #0]
 8015a82:	b91e      	cbnz	r6, 8015a8c <_printf_i+0x1a4>
 8015a84:	6823      	ldr	r3, [r4, #0]
 8015a86:	f023 0320 	bic.w	r3, r3, #32
 8015a8a:	6023      	str	r3, [r4, #0]
 8015a8c:	2310      	movs	r3, #16
 8015a8e:	e7a7      	b.n	80159e0 <_printf_i+0xf8>
 8015a90:	4824      	ldr	r0, [pc, #144]	; (8015b24 <_printf_i+0x23c>)
 8015a92:	e7e4      	b.n	8015a5e <_printf_i+0x176>
 8015a94:	4615      	mov	r5, r2
 8015a96:	e7bd      	b.n	8015a14 <_printf_i+0x12c>
 8015a98:	682b      	ldr	r3, [r5, #0]
 8015a9a:	6826      	ldr	r6, [r4, #0]
 8015a9c:	6961      	ldr	r1, [r4, #20]
 8015a9e:	1d18      	adds	r0, r3, #4
 8015aa0:	6028      	str	r0, [r5, #0]
 8015aa2:	0635      	lsls	r5, r6, #24
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	d501      	bpl.n	8015aac <_printf_i+0x1c4>
 8015aa8:	6019      	str	r1, [r3, #0]
 8015aaa:	e002      	b.n	8015ab2 <_printf_i+0x1ca>
 8015aac:	0670      	lsls	r0, r6, #25
 8015aae:	d5fb      	bpl.n	8015aa8 <_printf_i+0x1c0>
 8015ab0:	8019      	strh	r1, [r3, #0]
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	6123      	str	r3, [r4, #16]
 8015ab6:	4615      	mov	r5, r2
 8015ab8:	e7bc      	b.n	8015a34 <_printf_i+0x14c>
 8015aba:	682b      	ldr	r3, [r5, #0]
 8015abc:	1d1a      	adds	r2, r3, #4
 8015abe:	602a      	str	r2, [r5, #0]
 8015ac0:	681d      	ldr	r5, [r3, #0]
 8015ac2:	6862      	ldr	r2, [r4, #4]
 8015ac4:	2100      	movs	r1, #0
 8015ac6:	4628      	mov	r0, r5
 8015ac8:	f7ea fba2 	bl	8000210 <memchr>
 8015acc:	b108      	cbz	r0, 8015ad2 <_printf_i+0x1ea>
 8015ace:	1b40      	subs	r0, r0, r5
 8015ad0:	6060      	str	r0, [r4, #4]
 8015ad2:	6863      	ldr	r3, [r4, #4]
 8015ad4:	6123      	str	r3, [r4, #16]
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015adc:	e7aa      	b.n	8015a34 <_printf_i+0x14c>
 8015ade:	6923      	ldr	r3, [r4, #16]
 8015ae0:	462a      	mov	r2, r5
 8015ae2:	4649      	mov	r1, r9
 8015ae4:	4640      	mov	r0, r8
 8015ae6:	47d0      	blx	sl
 8015ae8:	3001      	adds	r0, #1
 8015aea:	d0ad      	beq.n	8015a48 <_printf_i+0x160>
 8015aec:	6823      	ldr	r3, [r4, #0]
 8015aee:	079b      	lsls	r3, r3, #30
 8015af0:	d413      	bmi.n	8015b1a <_printf_i+0x232>
 8015af2:	68e0      	ldr	r0, [r4, #12]
 8015af4:	9b03      	ldr	r3, [sp, #12]
 8015af6:	4298      	cmp	r0, r3
 8015af8:	bfb8      	it	lt
 8015afa:	4618      	movlt	r0, r3
 8015afc:	e7a6      	b.n	8015a4c <_printf_i+0x164>
 8015afe:	2301      	movs	r3, #1
 8015b00:	4632      	mov	r2, r6
 8015b02:	4649      	mov	r1, r9
 8015b04:	4640      	mov	r0, r8
 8015b06:	47d0      	blx	sl
 8015b08:	3001      	adds	r0, #1
 8015b0a:	d09d      	beq.n	8015a48 <_printf_i+0x160>
 8015b0c:	3501      	adds	r5, #1
 8015b0e:	68e3      	ldr	r3, [r4, #12]
 8015b10:	9903      	ldr	r1, [sp, #12]
 8015b12:	1a5b      	subs	r3, r3, r1
 8015b14:	42ab      	cmp	r3, r5
 8015b16:	dcf2      	bgt.n	8015afe <_printf_i+0x216>
 8015b18:	e7eb      	b.n	8015af2 <_printf_i+0x20a>
 8015b1a:	2500      	movs	r5, #0
 8015b1c:	f104 0619 	add.w	r6, r4, #25
 8015b20:	e7f5      	b.n	8015b0e <_printf_i+0x226>
 8015b22:	bf00      	nop
 8015b24:	08016cfd 	.word	0x08016cfd
 8015b28:	08016d0e 	.word	0x08016d0e

08015b2c <__sflush_r>:
 8015b2c:	898a      	ldrh	r2, [r1, #12]
 8015b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b32:	4605      	mov	r5, r0
 8015b34:	0710      	lsls	r0, r2, #28
 8015b36:	460c      	mov	r4, r1
 8015b38:	d458      	bmi.n	8015bec <__sflush_r+0xc0>
 8015b3a:	684b      	ldr	r3, [r1, #4]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	dc05      	bgt.n	8015b4c <__sflush_r+0x20>
 8015b40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	dc02      	bgt.n	8015b4c <__sflush_r+0x20>
 8015b46:	2000      	movs	r0, #0
 8015b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b4e:	2e00      	cmp	r6, #0
 8015b50:	d0f9      	beq.n	8015b46 <__sflush_r+0x1a>
 8015b52:	2300      	movs	r3, #0
 8015b54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015b58:	682f      	ldr	r7, [r5, #0]
 8015b5a:	6a21      	ldr	r1, [r4, #32]
 8015b5c:	602b      	str	r3, [r5, #0]
 8015b5e:	d032      	beq.n	8015bc6 <__sflush_r+0x9a>
 8015b60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015b62:	89a3      	ldrh	r3, [r4, #12]
 8015b64:	075a      	lsls	r2, r3, #29
 8015b66:	d505      	bpl.n	8015b74 <__sflush_r+0x48>
 8015b68:	6863      	ldr	r3, [r4, #4]
 8015b6a:	1ac0      	subs	r0, r0, r3
 8015b6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015b6e:	b10b      	cbz	r3, 8015b74 <__sflush_r+0x48>
 8015b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b72:	1ac0      	subs	r0, r0, r3
 8015b74:	2300      	movs	r3, #0
 8015b76:	4602      	mov	r2, r0
 8015b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b7a:	6a21      	ldr	r1, [r4, #32]
 8015b7c:	4628      	mov	r0, r5
 8015b7e:	47b0      	blx	r6
 8015b80:	1c43      	adds	r3, r0, #1
 8015b82:	89a3      	ldrh	r3, [r4, #12]
 8015b84:	d106      	bne.n	8015b94 <__sflush_r+0x68>
 8015b86:	6829      	ldr	r1, [r5, #0]
 8015b88:	291d      	cmp	r1, #29
 8015b8a:	d82b      	bhi.n	8015be4 <__sflush_r+0xb8>
 8015b8c:	4a29      	ldr	r2, [pc, #164]	; (8015c34 <__sflush_r+0x108>)
 8015b8e:	410a      	asrs	r2, r1
 8015b90:	07d6      	lsls	r6, r2, #31
 8015b92:	d427      	bmi.n	8015be4 <__sflush_r+0xb8>
 8015b94:	2200      	movs	r2, #0
 8015b96:	6062      	str	r2, [r4, #4]
 8015b98:	04d9      	lsls	r1, r3, #19
 8015b9a:	6922      	ldr	r2, [r4, #16]
 8015b9c:	6022      	str	r2, [r4, #0]
 8015b9e:	d504      	bpl.n	8015baa <__sflush_r+0x7e>
 8015ba0:	1c42      	adds	r2, r0, #1
 8015ba2:	d101      	bne.n	8015ba8 <__sflush_r+0x7c>
 8015ba4:	682b      	ldr	r3, [r5, #0]
 8015ba6:	b903      	cbnz	r3, 8015baa <__sflush_r+0x7e>
 8015ba8:	6560      	str	r0, [r4, #84]	; 0x54
 8015baa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015bac:	602f      	str	r7, [r5, #0]
 8015bae:	2900      	cmp	r1, #0
 8015bb0:	d0c9      	beq.n	8015b46 <__sflush_r+0x1a>
 8015bb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015bb6:	4299      	cmp	r1, r3
 8015bb8:	d002      	beq.n	8015bc0 <__sflush_r+0x94>
 8015bba:	4628      	mov	r0, r5
 8015bbc:	f7ff fb36 	bl	801522c <_free_r>
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	6360      	str	r0, [r4, #52]	; 0x34
 8015bc4:	e7c0      	b.n	8015b48 <__sflush_r+0x1c>
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	4628      	mov	r0, r5
 8015bca:	47b0      	blx	r6
 8015bcc:	1c41      	adds	r1, r0, #1
 8015bce:	d1c8      	bne.n	8015b62 <__sflush_r+0x36>
 8015bd0:	682b      	ldr	r3, [r5, #0]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d0c5      	beq.n	8015b62 <__sflush_r+0x36>
 8015bd6:	2b1d      	cmp	r3, #29
 8015bd8:	d001      	beq.n	8015bde <__sflush_r+0xb2>
 8015bda:	2b16      	cmp	r3, #22
 8015bdc:	d101      	bne.n	8015be2 <__sflush_r+0xb6>
 8015bde:	602f      	str	r7, [r5, #0]
 8015be0:	e7b1      	b.n	8015b46 <__sflush_r+0x1a>
 8015be2:	89a3      	ldrh	r3, [r4, #12]
 8015be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015be8:	81a3      	strh	r3, [r4, #12]
 8015bea:	e7ad      	b.n	8015b48 <__sflush_r+0x1c>
 8015bec:	690f      	ldr	r7, [r1, #16]
 8015bee:	2f00      	cmp	r7, #0
 8015bf0:	d0a9      	beq.n	8015b46 <__sflush_r+0x1a>
 8015bf2:	0793      	lsls	r3, r2, #30
 8015bf4:	680e      	ldr	r6, [r1, #0]
 8015bf6:	bf08      	it	eq
 8015bf8:	694b      	ldreq	r3, [r1, #20]
 8015bfa:	600f      	str	r7, [r1, #0]
 8015bfc:	bf18      	it	ne
 8015bfe:	2300      	movne	r3, #0
 8015c00:	eba6 0807 	sub.w	r8, r6, r7
 8015c04:	608b      	str	r3, [r1, #8]
 8015c06:	f1b8 0f00 	cmp.w	r8, #0
 8015c0a:	dd9c      	ble.n	8015b46 <__sflush_r+0x1a>
 8015c0c:	6a21      	ldr	r1, [r4, #32]
 8015c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015c10:	4643      	mov	r3, r8
 8015c12:	463a      	mov	r2, r7
 8015c14:	4628      	mov	r0, r5
 8015c16:	47b0      	blx	r6
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	dc06      	bgt.n	8015c2a <__sflush_r+0xfe>
 8015c1c:	89a3      	ldrh	r3, [r4, #12]
 8015c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c22:	81a3      	strh	r3, [r4, #12]
 8015c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c28:	e78e      	b.n	8015b48 <__sflush_r+0x1c>
 8015c2a:	4407      	add	r7, r0
 8015c2c:	eba8 0800 	sub.w	r8, r8, r0
 8015c30:	e7e9      	b.n	8015c06 <__sflush_r+0xda>
 8015c32:	bf00      	nop
 8015c34:	dfbffffe 	.word	0xdfbffffe

08015c38 <_fflush_r>:
 8015c38:	b538      	push	{r3, r4, r5, lr}
 8015c3a:	690b      	ldr	r3, [r1, #16]
 8015c3c:	4605      	mov	r5, r0
 8015c3e:	460c      	mov	r4, r1
 8015c40:	b913      	cbnz	r3, 8015c48 <_fflush_r+0x10>
 8015c42:	2500      	movs	r5, #0
 8015c44:	4628      	mov	r0, r5
 8015c46:	bd38      	pop	{r3, r4, r5, pc}
 8015c48:	b118      	cbz	r0, 8015c52 <_fflush_r+0x1a>
 8015c4a:	6a03      	ldr	r3, [r0, #32]
 8015c4c:	b90b      	cbnz	r3, 8015c52 <_fflush_r+0x1a>
 8015c4e:	f7ff f8c9 	bl	8014de4 <__sinit>
 8015c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d0f3      	beq.n	8015c42 <_fflush_r+0xa>
 8015c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015c5c:	07d0      	lsls	r0, r2, #31
 8015c5e:	d404      	bmi.n	8015c6a <_fflush_r+0x32>
 8015c60:	0599      	lsls	r1, r3, #22
 8015c62:	d402      	bmi.n	8015c6a <_fflush_r+0x32>
 8015c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c66:	f7ff fa9e 	bl	80151a6 <__retarget_lock_acquire_recursive>
 8015c6a:	4628      	mov	r0, r5
 8015c6c:	4621      	mov	r1, r4
 8015c6e:	f7ff ff5d 	bl	8015b2c <__sflush_r>
 8015c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c74:	07da      	lsls	r2, r3, #31
 8015c76:	4605      	mov	r5, r0
 8015c78:	d4e4      	bmi.n	8015c44 <_fflush_r+0xc>
 8015c7a:	89a3      	ldrh	r3, [r4, #12]
 8015c7c:	059b      	lsls	r3, r3, #22
 8015c7e:	d4e1      	bmi.n	8015c44 <_fflush_r+0xc>
 8015c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c82:	f7ff fa91 	bl	80151a8 <__retarget_lock_release_recursive>
 8015c86:	e7dd      	b.n	8015c44 <_fflush_r+0xc>

08015c88 <fiprintf>:
 8015c88:	b40e      	push	{r1, r2, r3}
 8015c8a:	b503      	push	{r0, r1, lr}
 8015c8c:	4601      	mov	r1, r0
 8015c8e:	ab03      	add	r3, sp, #12
 8015c90:	4805      	ldr	r0, [pc, #20]	; (8015ca8 <fiprintf+0x20>)
 8015c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c96:	6800      	ldr	r0, [r0, #0]
 8015c98:	9301      	str	r3, [sp, #4]
 8015c9a:	f7ff fc9d 	bl	80155d8 <_vfiprintf_r>
 8015c9e:	b002      	add	sp, #8
 8015ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ca4:	b003      	add	sp, #12
 8015ca6:	4770      	bx	lr
 8015ca8:	20000230 	.word	0x20000230

08015cac <__swbuf_r>:
 8015cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cae:	460e      	mov	r6, r1
 8015cb0:	4614      	mov	r4, r2
 8015cb2:	4605      	mov	r5, r0
 8015cb4:	b118      	cbz	r0, 8015cbe <__swbuf_r+0x12>
 8015cb6:	6a03      	ldr	r3, [r0, #32]
 8015cb8:	b90b      	cbnz	r3, 8015cbe <__swbuf_r+0x12>
 8015cba:	f7ff f893 	bl	8014de4 <__sinit>
 8015cbe:	69a3      	ldr	r3, [r4, #24]
 8015cc0:	60a3      	str	r3, [r4, #8]
 8015cc2:	89a3      	ldrh	r3, [r4, #12]
 8015cc4:	071a      	lsls	r2, r3, #28
 8015cc6:	d525      	bpl.n	8015d14 <__swbuf_r+0x68>
 8015cc8:	6923      	ldr	r3, [r4, #16]
 8015cca:	b31b      	cbz	r3, 8015d14 <__swbuf_r+0x68>
 8015ccc:	6823      	ldr	r3, [r4, #0]
 8015cce:	6922      	ldr	r2, [r4, #16]
 8015cd0:	1a98      	subs	r0, r3, r2
 8015cd2:	6963      	ldr	r3, [r4, #20]
 8015cd4:	b2f6      	uxtb	r6, r6
 8015cd6:	4283      	cmp	r3, r0
 8015cd8:	4637      	mov	r7, r6
 8015cda:	dc04      	bgt.n	8015ce6 <__swbuf_r+0x3a>
 8015cdc:	4621      	mov	r1, r4
 8015cde:	4628      	mov	r0, r5
 8015ce0:	f7ff ffaa 	bl	8015c38 <_fflush_r>
 8015ce4:	b9e0      	cbnz	r0, 8015d20 <__swbuf_r+0x74>
 8015ce6:	68a3      	ldr	r3, [r4, #8]
 8015ce8:	3b01      	subs	r3, #1
 8015cea:	60a3      	str	r3, [r4, #8]
 8015cec:	6823      	ldr	r3, [r4, #0]
 8015cee:	1c5a      	adds	r2, r3, #1
 8015cf0:	6022      	str	r2, [r4, #0]
 8015cf2:	701e      	strb	r6, [r3, #0]
 8015cf4:	6962      	ldr	r2, [r4, #20]
 8015cf6:	1c43      	adds	r3, r0, #1
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d004      	beq.n	8015d06 <__swbuf_r+0x5a>
 8015cfc:	89a3      	ldrh	r3, [r4, #12]
 8015cfe:	07db      	lsls	r3, r3, #31
 8015d00:	d506      	bpl.n	8015d10 <__swbuf_r+0x64>
 8015d02:	2e0a      	cmp	r6, #10
 8015d04:	d104      	bne.n	8015d10 <__swbuf_r+0x64>
 8015d06:	4621      	mov	r1, r4
 8015d08:	4628      	mov	r0, r5
 8015d0a:	f7ff ff95 	bl	8015c38 <_fflush_r>
 8015d0e:	b938      	cbnz	r0, 8015d20 <__swbuf_r+0x74>
 8015d10:	4638      	mov	r0, r7
 8015d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d14:	4621      	mov	r1, r4
 8015d16:	4628      	mov	r0, r5
 8015d18:	f000 f806 	bl	8015d28 <__swsetup_r>
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	d0d5      	beq.n	8015ccc <__swbuf_r+0x20>
 8015d20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015d24:	e7f4      	b.n	8015d10 <__swbuf_r+0x64>
	...

08015d28 <__swsetup_r>:
 8015d28:	b538      	push	{r3, r4, r5, lr}
 8015d2a:	4b2a      	ldr	r3, [pc, #168]	; (8015dd4 <__swsetup_r+0xac>)
 8015d2c:	4605      	mov	r5, r0
 8015d2e:	6818      	ldr	r0, [r3, #0]
 8015d30:	460c      	mov	r4, r1
 8015d32:	b118      	cbz	r0, 8015d3c <__swsetup_r+0x14>
 8015d34:	6a03      	ldr	r3, [r0, #32]
 8015d36:	b90b      	cbnz	r3, 8015d3c <__swsetup_r+0x14>
 8015d38:	f7ff f854 	bl	8014de4 <__sinit>
 8015d3c:	89a3      	ldrh	r3, [r4, #12]
 8015d3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d42:	0718      	lsls	r0, r3, #28
 8015d44:	d422      	bmi.n	8015d8c <__swsetup_r+0x64>
 8015d46:	06d9      	lsls	r1, r3, #27
 8015d48:	d407      	bmi.n	8015d5a <__swsetup_r+0x32>
 8015d4a:	2309      	movs	r3, #9
 8015d4c:	602b      	str	r3, [r5, #0]
 8015d4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015d52:	81a3      	strh	r3, [r4, #12]
 8015d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d58:	e034      	b.n	8015dc4 <__swsetup_r+0x9c>
 8015d5a:	0758      	lsls	r0, r3, #29
 8015d5c:	d512      	bpl.n	8015d84 <__swsetup_r+0x5c>
 8015d5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d60:	b141      	cbz	r1, 8015d74 <__swsetup_r+0x4c>
 8015d62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d66:	4299      	cmp	r1, r3
 8015d68:	d002      	beq.n	8015d70 <__swsetup_r+0x48>
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	f7ff fa5e 	bl	801522c <_free_r>
 8015d70:	2300      	movs	r3, #0
 8015d72:	6363      	str	r3, [r4, #52]	; 0x34
 8015d74:	89a3      	ldrh	r3, [r4, #12]
 8015d76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d7a:	81a3      	strh	r3, [r4, #12]
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	6063      	str	r3, [r4, #4]
 8015d80:	6923      	ldr	r3, [r4, #16]
 8015d82:	6023      	str	r3, [r4, #0]
 8015d84:	89a3      	ldrh	r3, [r4, #12]
 8015d86:	f043 0308 	orr.w	r3, r3, #8
 8015d8a:	81a3      	strh	r3, [r4, #12]
 8015d8c:	6923      	ldr	r3, [r4, #16]
 8015d8e:	b94b      	cbnz	r3, 8015da4 <__swsetup_r+0x7c>
 8015d90:	89a3      	ldrh	r3, [r4, #12]
 8015d92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d9a:	d003      	beq.n	8015da4 <__swsetup_r+0x7c>
 8015d9c:	4621      	mov	r1, r4
 8015d9e:	4628      	mov	r0, r5
 8015da0:	f000 f847 	bl	8015e32 <__smakebuf_r>
 8015da4:	89a0      	ldrh	r0, [r4, #12]
 8015da6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015daa:	f010 0301 	ands.w	r3, r0, #1
 8015dae:	d00a      	beq.n	8015dc6 <__swsetup_r+0x9e>
 8015db0:	2300      	movs	r3, #0
 8015db2:	60a3      	str	r3, [r4, #8]
 8015db4:	6963      	ldr	r3, [r4, #20]
 8015db6:	425b      	negs	r3, r3
 8015db8:	61a3      	str	r3, [r4, #24]
 8015dba:	6923      	ldr	r3, [r4, #16]
 8015dbc:	b943      	cbnz	r3, 8015dd0 <__swsetup_r+0xa8>
 8015dbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015dc2:	d1c4      	bne.n	8015d4e <__swsetup_r+0x26>
 8015dc4:	bd38      	pop	{r3, r4, r5, pc}
 8015dc6:	0781      	lsls	r1, r0, #30
 8015dc8:	bf58      	it	pl
 8015dca:	6963      	ldrpl	r3, [r4, #20]
 8015dcc:	60a3      	str	r3, [r4, #8]
 8015dce:	e7f4      	b.n	8015dba <__swsetup_r+0x92>
 8015dd0:	2000      	movs	r0, #0
 8015dd2:	e7f7      	b.n	8015dc4 <__swsetup_r+0x9c>
 8015dd4:	20000230 	.word	0x20000230

08015dd8 <abort>:
 8015dd8:	b508      	push	{r3, lr}
 8015dda:	2006      	movs	r0, #6
 8015ddc:	f000 f88e 	bl	8015efc <raise>
 8015de0:	2001      	movs	r0, #1
 8015de2:	f7ec f897 	bl	8001f14 <_exit>

08015de6 <__swhatbuf_r>:
 8015de6:	b570      	push	{r4, r5, r6, lr}
 8015de8:	460c      	mov	r4, r1
 8015dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015dee:	2900      	cmp	r1, #0
 8015df0:	b096      	sub	sp, #88	; 0x58
 8015df2:	4615      	mov	r5, r2
 8015df4:	461e      	mov	r6, r3
 8015df6:	da0d      	bge.n	8015e14 <__swhatbuf_r+0x2e>
 8015df8:	89a3      	ldrh	r3, [r4, #12]
 8015dfa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015dfe:	f04f 0100 	mov.w	r1, #0
 8015e02:	bf0c      	ite	eq
 8015e04:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015e08:	2340      	movne	r3, #64	; 0x40
 8015e0a:	2000      	movs	r0, #0
 8015e0c:	6031      	str	r1, [r6, #0]
 8015e0e:	602b      	str	r3, [r5, #0]
 8015e10:	b016      	add	sp, #88	; 0x58
 8015e12:	bd70      	pop	{r4, r5, r6, pc}
 8015e14:	466a      	mov	r2, sp
 8015e16:	f000 f879 	bl	8015f0c <_fstat_r>
 8015e1a:	2800      	cmp	r0, #0
 8015e1c:	dbec      	blt.n	8015df8 <__swhatbuf_r+0x12>
 8015e1e:	9901      	ldr	r1, [sp, #4]
 8015e20:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015e24:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015e28:	4259      	negs	r1, r3
 8015e2a:	4159      	adcs	r1, r3
 8015e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e30:	e7eb      	b.n	8015e0a <__swhatbuf_r+0x24>

08015e32 <__smakebuf_r>:
 8015e32:	898b      	ldrh	r3, [r1, #12]
 8015e34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e36:	079d      	lsls	r5, r3, #30
 8015e38:	4606      	mov	r6, r0
 8015e3a:	460c      	mov	r4, r1
 8015e3c:	d507      	bpl.n	8015e4e <__smakebuf_r+0x1c>
 8015e3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015e42:	6023      	str	r3, [r4, #0]
 8015e44:	6123      	str	r3, [r4, #16]
 8015e46:	2301      	movs	r3, #1
 8015e48:	6163      	str	r3, [r4, #20]
 8015e4a:	b002      	add	sp, #8
 8015e4c:	bd70      	pop	{r4, r5, r6, pc}
 8015e4e:	ab01      	add	r3, sp, #4
 8015e50:	466a      	mov	r2, sp
 8015e52:	f7ff ffc8 	bl	8015de6 <__swhatbuf_r>
 8015e56:	9900      	ldr	r1, [sp, #0]
 8015e58:	4605      	mov	r5, r0
 8015e5a:	4630      	mov	r0, r6
 8015e5c:	f7fe fd8a 	bl	8014974 <_malloc_r>
 8015e60:	b948      	cbnz	r0, 8015e76 <__smakebuf_r+0x44>
 8015e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e66:	059a      	lsls	r2, r3, #22
 8015e68:	d4ef      	bmi.n	8015e4a <__smakebuf_r+0x18>
 8015e6a:	f023 0303 	bic.w	r3, r3, #3
 8015e6e:	f043 0302 	orr.w	r3, r3, #2
 8015e72:	81a3      	strh	r3, [r4, #12]
 8015e74:	e7e3      	b.n	8015e3e <__smakebuf_r+0xc>
 8015e76:	89a3      	ldrh	r3, [r4, #12]
 8015e78:	6020      	str	r0, [r4, #0]
 8015e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e7e:	81a3      	strh	r3, [r4, #12]
 8015e80:	9b00      	ldr	r3, [sp, #0]
 8015e82:	6163      	str	r3, [r4, #20]
 8015e84:	9b01      	ldr	r3, [sp, #4]
 8015e86:	6120      	str	r0, [r4, #16]
 8015e88:	b15b      	cbz	r3, 8015ea2 <__smakebuf_r+0x70>
 8015e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f000 f84e 	bl	8015f30 <_isatty_r>
 8015e94:	b128      	cbz	r0, 8015ea2 <__smakebuf_r+0x70>
 8015e96:	89a3      	ldrh	r3, [r4, #12]
 8015e98:	f023 0303 	bic.w	r3, r3, #3
 8015e9c:	f043 0301 	orr.w	r3, r3, #1
 8015ea0:	81a3      	strh	r3, [r4, #12]
 8015ea2:	89a3      	ldrh	r3, [r4, #12]
 8015ea4:	431d      	orrs	r5, r3
 8015ea6:	81a5      	strh	r5, [r4, #12]
 8015ea8:	e7cf      	b.n	8015e4a <__smakebuf_r+0x18>

08015eaa <_raise_r>:
 8015eaa:	291f      	cmp	r1, #31
 8015eac:	b538      	push	{r3, r4, r5, lr}
 8015eae:	4604      	mov	r4, r0
 8015eb0:	460d      	mov	r5, r1
 8015eb2:	d904      	bls.n	8015ebe <_raise_r+0x14>
 8015eb4:	2316      	movs	r3, #22
 8015eb6:	6003      	str	r3, [r0, #0]
 8015eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ebc:	bd38      	pop	{r3, r4, r5, pc}
 8015ebe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015ec0:	b112      	cbz	r2, 8015ec8 <_raise_r+0x1e>
 8015ec2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015ec6:	b94b      	cbnz	r3, 8015edc <_raise_r+0x32>
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f000 f853 	bl	8015f74 <_getpid_r>
 8015ece:	462a      	mov	r2, r5
 8015ed0:	4601      	mov	r1, r0
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ed8:	f000 b83a 	b.w	8015f50 <_kill_r>
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	d00a      	beq.n	8015ef6 <_raise_r+0x4c>
 8015ee0:	1c59      	adds	r1, r3, #1
 8015ee2:	d103      	bne.n	8015eec <_raise_r+0x42>
 8015ee4:	2316      	movs	r3, #22
 8015ee6:	6003      	str	r3, [r0, #0]
 8015ee8:	2001      	movs	r0, #1
 8015eea:	e7e7      	b.n	8015ebc <_raise_r+0x12>
 8015eec:	2400      	movs	r4, #0
 8015eee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015ef2:	4628      	mov	r0, r5
 8015ef4:	4798      	blx	r3
 8015ef6:	2000      	movs	r0, #0
 8015ef8:	e7e0      	b.n	8015ebc <_raise_r+0x12>
	...

08015efc <raise>:
 8015efc:	4b02      	ldr	r3, [pc, #8]	; (8015f08 <raise+0xc>)
 8015efe:	4601      	mov	r1, r0
 8015f00:	6818      	ldr	r0, [r3, #0]
 8015f02:	f7ff bfd2 	b.w	8015eaa <_raise_r>
 8015f06:	bf00      	nop
 8015f08:	20000230 	.word	0x20000230

08015f0c <_fstat_r>:
 8015f0c:	b538      	push	{r3, r4, r5, lr}
 8015f0e:	4d07      	ldr	r5, [pc, #28]	; (8015f2c <_fstat_r+0x20>)
 8015f10:	2300      	movs	r3, #0
 8015f12:	4604      	mov	r4, r0
 8015f14:	4608      	mov	r0, r1
 8015f16:	4611      	mov	r1, r2
 8015f18:	602b      	str	r3, [r5, #0]
 8015f1a:	f7ec f84a 	bl	8001fb2 <_fstat>
 8015f1e:	1c43      	adds	r3, r0, #1
 8015f20:	d102      	bne.n	8015f28 <_fstat_r+0x1c>
 8015f22:	682b      	ldr	r3, [r5, #0]
 8015f24:	b103      	cbz	r3, 8015f28 <_fstat_r+0x1c>
 8015f26:	6023      	str	r3, [r4, #0]
 8015f28:	bd38      	pop	{r3, r4, r5, pc}
 8015f2a:	bf00      	nop
 8015f2c:	2000dd90 	.word	0x2000dd90

08015f30 <_isatty_r>:
 8015f30:	b538      	push	{r3, r4, r5, lr}
 8015f32:	4d06      	ldr	r5, [pc, #24]	; (8015f4c <_isatty_r+0x1c>)
 8015f34:	2300      	movs	r3, #0
 8015f36:	4604      	mov	r4, r0
 8015f38:	4608      	mov	r0, r1
 8015f3a:	602b      	str	r3, [r5, #0]
 8015f3c:	f7ec f849 	bl	8001fd2 <_isatty>
 8015f40:	1c43      	adds	r3, r0, #1
 8015f42:	d102      	bne.n	8015f4a <_isatty_r+0x1a>
 8015f44:	682b      	ldr	r3, [r5, #0]
 8015f46:	b103      	cbz	r3, 8015f4a <_isatty_r+0x1a>
 8015f48:	6023      	str	r3, [r4, #0]
 8015f4a:	bd38      	pop	{r3, r4, r5, pc}
 8015f4c:	2000dd90 	.word	0x2000dd90

08015f50 <_kill_r>:
 8015f50:	b538      	push	{r3, r4, r5, lr}
 8015f52:	4d07      	ldr	r5, [pc, #28]	; (8015f70 <_kill_r+0x20>)
 8015f54:	2300      	movs	r3, #0
 8015f56:	4604      	mov	r4, r0
 8015f58:	4608      	mov	r0, r1
 8015f5a:	4611      	mov	r1, r2
 8015f5c:	602b      	str	r3, [r5, #0]
 8015f5e:	f7eb ffc9 	bl	8001ef4 <_kill>
 8015f62:	1c43      	adds	r3, r0, #1
 8015f64:	d102      	bne.n	8015f6c <_kill_r+0x1c>
 8015f66:	682b      	ldr	r3, [r5, #0]
 8015f68:	b103      	cbz	r3, 8015f6c <_kill_r+0x1c>
 8015f6a:	6023      	str	r3, [r4, #0]
 8015f6c:	bd38      	pop	{r3, r4, r5, pc}
 8015f6e:	bf00      	nop
 8015f70:	2000dd90 	.word	0x2000dd90

08015f74 <_getpid_r>:
 8015f74:	f7eb bfb6 	b.w	8001ee4 <_getpid>

08015f78 <_init>:
 8015f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f7a:	bf00      	nop
 8015f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f7e:	bc08      	pop	{r3}
 8015f80:	469e      	mov	lr, r3
 8015f82:	4770      	bx	lr

08015f84 <_fini>:
 8015f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f86:	bf00      	nop
 8015f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f8a:	bc08      	pop	{r3}
 8015f8c:	469e      	mov	lr, r3
 8015f8e:	4770      	bx	lr
