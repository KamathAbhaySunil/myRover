
microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d8  08016128  08016128  00026128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017200  08017200  000302b8  2**0
                  CONTENTS
  4 .ARM          00000008  08017200  08017200  00027200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017208  08017208  000302b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017208  08017208  00027208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017214  08017214  00027214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08017218  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dbc0  200002b8  080174d0  000302b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000de78  080174d0  0003de78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019faa  00000000  00000000  0003035e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b74  00000000  00000000  0004a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  0004de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001103  00000000  00000000  0004f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000087f8  00000000  00000000  00050583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199f4  00000000  00000000  00058d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a444a  00000000  00000000  0007276f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b7c  00000000  00000000  00116bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b8 	.word	0x200002b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801610c 	.word	0x0801610c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002bc 	.word	0x200002bc
 80001dc:	0801610c 	.word	0x0801610c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__gedf2>:
 80002b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80002b4:	e006      	b.n	80002c4 <__cmpdf2+0x4>
 80002b6:	bf00      	nop

080002b8 <__ledf2>:
 80002b8:	f04f 0c01 	mov.w	ip, #1
 80002bc:	e002      	b.n	80002c4 <__cmpdf2+0x4>
 80002be:	bf00      	nop

080002c0 <__cmpdf2>:
 80002c0:	f04f 0c01 	mov.w	ip, #1
 80002c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80002c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80002cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80002d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80002d4:	bf18      	it	ne
 80002d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80002da:	d01b      	beq.n	8000314 <__cmpdf2+0x54>
 80002dc:	b001      	add	sp, #4
 80002de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80002e2:	bf0c      	ite	eq
 80002e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80002e8:	ea91 0f03 	teqne	r1, r3
 80002ec:	bf02      	ittt	eq
 80002ee:	ea90 0f02 	teqeq	r0, r2
 80002f2:	2000      	moveq	r0, #0
 80002f4:	4770      	bxeq	lr
 80002f6:	f110 0f00 	cmn.w	r0, #0
 80002fa:	ea91 0f03 	teq	r1, r3
 80002fe:	bf58      	it	pl
 8000300:	4299      	cmppl	r1, r3
 8000302:	bf08      	it	eq
 8000304:	4290      	cmpeq	r0, r2
 8000306:	bf2c      	ite	cs
 8000308:	17d8      	asrcs	r0, r3, #31
 800030a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800030e:	f040 0001 	orr.w	r0, r0, #1
 8000312:	4770      	bx	lr
 8000314:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000318:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800031c:	d102      	bne.n	8000324 <__cmpdf2+0x64>
 800031e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000322:	d107      	bne.n	8000334 <__cmpdf2+0x74>
 8000324:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000328:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800032c:	d1d6      	bne.n	80002dc <__cmpdf2+0x1c>
 800032e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000332:	d0d3      	beq.n	80002dc <__cmpdf2+0x1c>
 8000334:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop

0800033c <__aeabi_cdrcmple>:
 800033c:	4684      	mov	ip, r0
 800033e:	4610      	mov	r0, r2
 8000340:	4662      	mov	r2, ip
 8000342:	468c      	mov	ip, r1
 8000344:	4619      	mov	r1, r3
 8000346:	4663      	mov	r3, ip
 8000348:	e000      	b.n	800034c <__aeabi_cdcmpeq>
 800034a:	bf00      	nop

0800034c <__aeabi_cdcmpeq>:
 800034c:	b501      	push	{r0, lr}
 800034e:	f7ff ffb7 	bl	80002c0 <__cmpdf2>
 8000352:	2800      	cmp	r0, #0
 8000354:	bf48      	it	mi
 8000356:	f110 0f00 	cmnmi.w	r0, #0
 800035a:	bd01      	pop	{r0, pc}

0800035c <__aeabi_dcmpeq>:
 800035c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000360:	f7ff fff4 	bl	800034c <__aeabi_cdcmpeq>
 8000364:	bf0c      	ite	eq
 8000366:	2001      	moveq	r0, #1
 8000368:	2000      	movne	r0, #0
 800036a:	f85d fb08 	ldr.w	pc, [sp], #8
 800036e:	bf00      	nop

08000370 <__aeabi_dcmplt>:
 8000370:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000374:	f7ff ffea 	bl	800034c <__aeabi_cdcmpeq>
 8000378:	bf34      	ite	cc
 800037a:	2001      	movcc	r0, #1
 800037c:	2000      	movcs	r0, #0
 800037e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000382:	bf00      	nop

08000384 <__aeabi_dcmple>:
 8000384:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000388:	f7ff ffe0 	bl	800034c <__aeabi_cdcmpeq>
 800038c:	bf94      	ite	ls
 800038e:	2001      	movls	r0, #1
 8000390:	2000      	movhi	r0, #0
 8000392:	f85d fb08 	ldr.w	pc, [sp], #8
 8000396:	bf00      	nop

08000398 <__aeabi_dcmpge>:
 8000398:	f84d ed08 	str.w	lr, [sp, #-8]!
 800039c:	f7ff ffce 	bl	800033c <__aeabi_cdrcmple>
 80003a0:	bf94      	ite	ls
 80003a2:	2001      	movls	r0, #1
 80003a4:	2000      	movhi	r0, #0
 80003a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80003aa:	bf00      	nop

080003ac <__aeabi_dcmpgt>:
 80003ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80003b0:	f7ff ffc4 	bl	800033c <__aeabi_cdrcmple>
 80003b4:	bf34      	ite	cc
 80003b6:	2001      	movcc	r0, #1
 80003b8:	2000      	movcs	r0, #0
 80003ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80003be:	bf00      	nop

080003c0 <__aeabi_ldivmod>:
 80003c0:	b97b      	cbnz	r3, 80003e2 <__aeabi_ldivmod+0x22>
 80003c2:	b972      	cbnz	r2, 80003e2 <__aeabi_ldivmod+0x22>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bfbe      	ittt	lt
 80003c8:	2000      	movlt	r0, #0
 80003ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003ce:	e006      	blt.n	80003de <__aeabi_ldivmod+0x1e>
 80003d0:	bf08      	it	eq
 80003d2:	2800      	cmpeq	r0, #0
 80003d4:	bf1c      	itt	ne
 80003d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003da:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003de:	f000 b9bb 	b.w	8000758 <__aeabi_idiv0>
 80003e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ea:	2900      	cmp	r1, #0
 80003ec:	db09      	blt.n	8000402 <__aeabi_ldivmod+0x42>
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	db1a      	blt.n	8000428 <__aeabi_ldivmod+0x68>
 80003f2:	f000 f84d 	bl	8000490 <__udivmoddi4>
 80003f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fe:	b004      	add	sp, #16
 8000400:	4770      	bx	lr
 8000402:	4240      	negs	r0, r0
 8000404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000408:	2b00      	cmp	r3, #0
 800040a:	db1b      	blt.n	8000444 <__aeabi_ldivmod+0x84>
 800040c:	f000 f840 	bl	8000490 <__udivmoddi4>
 8000410:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000418:	b004      	add	sp, #16
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	4252      	negs	r2, r2
 8000422:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000426:	4770      	bx	lr
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	f000 f82f 	bl	8000490 <__udivmoddi4>
 8000432:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043a:	b004      	add	sp, #16
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	4770      	bx	lr
 8000444:	4252      	negs	r2, r2
 8000446:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044a:	f000 f821 	bl	8000490 <__udivmoddi4>
 800044e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000456:	b004      	add	sp, #16
 8000458:	4252      	negs	r2, r2
 800045a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800045e:	4770      	bx	lr

08000460 <__aeabi_uldivmod>:
 8000460:	b953      	cbnz	r3, 8000478 <__aeabi_uldivmod+0x18>
 8000462:	b94a      	cbnz	r2, 8000478 <__aeabi_uldivmod+0x18>
 8000464:	2900      	cmp	r1, #0
 8000466:	bf08      	it	eq
 8000468:	2800      	cmpeq	r0, #0
 800046a:	bf1c      	itt	ne
 800046c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000470:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000474:	f000 b970 	b.w	8000758 <__aeabi_idiv0>
 8000478:	f1ad 0c08 	sub.w	ip, sp, #8
 800047c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000480:	f000 f806 	bl	8000490 <__udivmoddi4>
 8000484:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800048c:	b004      	add	sp, #16
 800048e:	4770      	bx	lr

08000490 <__udivmoddi4>:
 8000490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000494:	9e08      	ldr	r6, [sp, #32]
 8000496:	460d      	mov	r5, r1
 8000498:	4604      	mov	r4, r0
 800049a:	460f      	mov	r7, r1
 800049c:	2b00      	cmp	r3, #0
 800049e:	d14a      	bne.n	8000536 <__udivmoddi4+0xa6>
 80004a0:	428a      	cmp	r2, r1
 80004a2:	4694      	mov	ip, r2
 80004a4:	d965      	bls.n	8000572 <__udivmoddi4+0xe2>
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	b143      	cbz	r3, 80004be <__udivmoddi4+0x2e>
 80004ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b0:	f1c3 0220 	rsb	r2, r3, #32
 80004b4:	409f      	lsls	r7, r3
 80004b6:	fa20 f202 	lsr.w	r2, r0, r2
 80004ba:	4317      	orrs	r7, r2
 80004bc:	409c      	lsls	r4, r3
 80004be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004c2:	fa1f f58c 	uxth.w	r5, ip
 80004c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80004ca:	0c22      	lsrs	r2, r4, #16
 80004cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80004d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004d4:	fb01 f005 	mul.w	r0, r1, r5
 80004d8:	4290      	cmp	r0, r2
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x62>
 80004dc:	eb1c 0202 	adds.w	r2, ip, r2
 80004e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80004e4:	f080 811c 	bcs.w	8000720 <__udivmoddi4+0x290>
 80004e8:	4290      	cmp	r0, r2
 80004ea:	f240 8119 	bls.w	8000720 <__udivmoddi4+0x290>
 80004ee:	3902      	subs	r1, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a12      	subs	r2, r2, r0
 80004f4:	b2a4      	uxth	r4, r4
 80004f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80004fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000502:	fb00 f505 	mul.w	r5, r0, r5
 8000506:	42a5      	cmp	r5, r4
 8000508:	d90a      	bls.n	8000520 <__udivmoddi4+0x90>
 800050a:	eb1c 0404 	adds.w	r4, ip, r4
 800050e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000512:	f080 8107 	bcs.w	8000724 <__udivmoddi4+0x294>
 8000516:	42a5      	cmp	r5, r4
 8000518:	f240 8104 	bls.w	8000724 <__udivmoddi4+0x294>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000524:	1b64      	subs	r4, r4, r5
 8000526:	2100      	movs	r1, #0
 8000528:	b11e      	cbz	r6, 8000532 <__udivmoddi4+0xa2>
 800052a:	40dc      	lsrs	r4, r3
 800052c:	2300      	movs	r3, #0
 800052e:	e9c6 4300 	strd	r4, r3, [r6]
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	428b      	cmp	r3, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0xbc>
 800053a:	2e00      	cmp	r6, #0
 800053c:	f000 80ed 	beq.w	800071a <__udivmoddi4+0x28a>
 8000540:	2100      	movs	r1, #0
 8000542:	e9c6 0500 	strd	r0, r5, [r6]
 8000546:	4608      	mov	r0, r1
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	fab3 f183 	clz	r1, r3
 8000550:	2900      	cmp	r1, #0
 8000552:	d149      	bne.n	80005e8 <__udivmoddi4+0x158>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d302      	bcc.n	800055e <__udivmoddi4+0xce>
 8000558:	4282      	cmp	r2, r0
 800055a:	f200 80f8 	bhi.w	800074e <__udivmoddi4+0x2be>
 800055e:	1a84      	subs	r4, r0, r2
 8000560:	eb65 0203 	sbc.w	r2, r5, r3
 8000564:	2001      	movs	r0, #1
 8000566:	4617      	mov	r7, r2
 8000568:	2e00      	cmp	r6, #0
 800056a:	d0e2      	beq.n	8000532 <__udivmoddi4+0xa2>
 800056c:	e9c6 4700 	strd	r4, r7, [r6]
 8000570:	e7df      	b.n	8000532 <__udivmoddi4+0xa2>
 8000572:	b902      	cbnz	r2, 8000576 <__udivmoddi4+0xe6>
 8000574:	deff      	udf	#255	; 0xff
 8000576:	fab2 f382 	clz	r3, r2
 800057a:	2b00      	cmp	r3, #0
 800057c:	f040 8090 	bne.w	80006a0 <__udivmoddi4+0x210>
 8000580:	1a8a      	subs	r2, r1, r2
 8000582:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000586:	fa1f fe8c 	uxth.w	lr, ip
 800058a:	2101      	movs	r1, #1
 800058c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000590:	fb07 2015 	mls	r0, r7, r5, r2
 8000594:	0c22      	lsrs	r2, r4, #16
 8000596:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800059a:	fb0e f005 	mul.w	r0, lr, r5
 800059e:	4290      	cmp	r0, r2
 80005a0:	d908      	bls.n	80005b4 <__udivmoddi4+0x124>
 80005a2:	eb1c 0202 	adds.w	r2, ip, r2
 80005a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x122>
 80005ac:	4290      	cmp	r0, r2
 80005ae:	f200 80cb 	bhi.w	8000748 <__udivmoddi4+0x2b8>
 80005b2:	4645      	mov	r5, r8
 80005b4:	1a12      	subs	r2, r2, r0
 80005b6:	b2a4      	uxth	r4, r4
 80005b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80005bc:	fb07 2210 	mls	r2, r7, r0, r2
 80005c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005c4:	fb0e fe00 	mul.w	lr, lr, r0
 80005c8:	45a6      	cmp	lr, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x14e>
 80005cc:	eb1c 0404 	adds.w	r4, ip, r4
 80005d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80005d4:	d202      	bcs.n	80005dc <__udivmoddi4+0x14c>
 80005d6:	45a6      	cmp	lr, r4
 80005d8:	f200 80bb 	bhi.w	8000752 <__udivmoddi4+0x2c2>
 80005dc:	4610      	mov	r0, r2
 80005de:	eba4 040e 	sub.w	r4, r4, lr
 80005e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x98>
 80005e8:	f1c1 0720 	rsb	r7, r1, #32
 80005ec:	408b      	lsls	r3, r1
 80005ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80005f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005f6:	fa05 f401 	lsl.w	r4, r5, r1
 80005fa:	fa20 f307 	lsr.w	r3, r0, r7
 80005fe:	40fd      	lsrs	r5, r7
 8000600:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000604:	4323      	orrs	r3, r4
 8000606:	fbb5 f8f9 	udiv	r8, r5, r9
 800060a:	fa1f fe8c 	uxth.w	lr, ip
 800060e:	fb09 5518 	mls	r5, r9, r8, r5
 8000612:	0c1c      	lsrs	r4, r3, #16
 8000614:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000618:	fb08 f50e 	mul.w	r5, r8, lr
 800061c:	42a5      	cmp	r5, r4
 800061e:	fa02 f201 	lsl.w	r2, r2, r1
 8000622:	fa00 f001 	lsl.w	r0, r0, r1
 8000626:	d90b      	bls.n	8000640 <__udivmoddi4+0x1b0>
 8000628:	eb1c 0404 	adds.w	r4, ip, r4
 800062c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000630:	f080 8088 	bcs.w	8000744 <__udivmoddi4+0x2b4>
 8000634:	42a5      	cmp	r5, r4
 8000636:	f240 8085 	bls.w	8000744 <__udivmoddi4+0x2b4>
 800063a:	f1a8 0802 	sub.w	r8, r8, #2
 800063e:	4464      	add	r4, ip
 8000640:	1b64      	subs	r4, r4, r5
 8000642:	b29d      	uxth	r5, r3
 8000644:	fbb4 f3f9 	udiv	r3, r4, r9
 8000648:	fb09 4413 	mls	r4, r9, r3, r4
 800064c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000650:	fb03 fe0e 	mul.w	lr, r3, lr
 8000654:	45a6      	cmp	lr, r4
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x1da>
 8000658:	eb1c 0404 	adds.w	r4, ip, r4
 800065c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000660:	d26c      	bcs.n	800073c <__udivmoddi4+0x2ac>
 8000662:	45a6      	cmp	lr, r4
 8000664:	d96a      	bls.n	800073c <__udivmoddi4+0x2ac>
 8000666:	3b02      	subs	r3, #2
 8000668:	4464      	add	r4, ip
 800066a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066e:	fba3 9502 	umull	r9, r5, r3, r2
 8000672:	eba4 040e 	sub.w	r4, r4, lr
 8000676:	42ac      	cmp	r4, r5
 8000678:	46c8      	mov	r8, r9
 800067a:	46ae      	mov	lr, r5
 800067c:	d356      	bcc.n	800072c <__udivmoddi4+0x29c>
 800067e:	d053      	beq.n	8000728 <__udivmoddi4+0x298>
 8000680:	b156      	cbz	r6, 8000698 <__udivmoddi4+0x208>
 8000682:	ebb0 0208 	subs.w	r2, r0, r8
 8000686:	eb64 040e 	sbc.w	r4, r4, lr
 800068a:	fa04 f707 	lsl.w	r7, r4, r7
 800068e:	40ca      	lsrs	r2, r1
 8000690:	40cc      	lsrs	r4, r1
 8000692:	4317      	orrs	r7, r2
 8000694:	e9c6 7400 	strd	r7, r4, [r6]
 8000698:	4618      	mov	r0, r3
 800069a:	2100      	movs	r1, #0
 800069c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a0:	f1c3 0120 	rsb	r1, r3, #32
 80006a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006a8:	fa20 f201 	lsr.w	r2, r0, r1
 80006ac:	fa25 f101 	lsr.w	r1, r5, r1
 80006b0:	409d      	lsls	r5, r3
 80006b2:	432a      	orrs	r2, r5
 80006b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b8:	fa1f fe8c 	uxth.w	lr, ip
 80006bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80006c0:	fb07 1510 	mls	r5, r7, r0, r1
 80006c4:	0c11      	lsrs	r1, r2, #16
 80006c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006ca:	fb00 f50e 	mul.w	r5, r0, lr
 80006ce:	428d      	cmp	r5, r1
 80006d0:	fa04 f403 	lsl.w	r4, r4, r3
 80006d4:	d908      	bls.n	80006e8 <__udivmoddi4+0x258>
 80006d6:	eb1c 0101 	adds.w	r1, ip, r1
 80006da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006de:	d22f      	bcs.n	8000740 <__udivmoddi4+0x2b0>
 80006e0:	428d      	cmp	r5, r1
 80006e2:	d92d      	bls.n	8000740 <__udivmoddi4+0x2b0>
 80006e4:	3802      	subs	r0, #2
 80006e6:	4461      	add	r1, ip
 80006e8:	1b49      	subs	r1, r1, r5
 80006ea:	b292      	uxth	r2, r2
 80006ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80006f0:	fb07 1115 	mls	r1, r7, r5, r1
 80006f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006f8:	fb05 f10e 	mul.w	r1, r5, lr
 80006fc:	4291      	cmp	r1, r2
 80006fe:	d908      	bls.n	8000712 <__udivmoddi4+0x282>
 8000700:	eb1c 0202 	adds.w	r2, ip, r2
 8000704:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000708:	d216      	bcs.n	8000738 <__udivmoddi4+0x2a8>
 800070a:	4291      	cmp	r1, r2
 800070c:	d914      	bls.n	8000738 <__udivmoddi4+0x2a8>
 800070e:	3d02      	subs	r5, #2
 8000710:	4462      	add	r2, ip
 8000712:	1a52      	subs	r2, r2, r1
 8000714:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000718:	e738      	b.n	800058c <__udivmoddi4+0xfc>
 800071a:	4631      	mov	r1, r6
 800071c:	4630      	mov	r0, r6
 800071e:	e708      	b.n	8000532 <__udivmoddi4+0xa2>
 8000720:	4639      	mov	r1, r7
 8000722:	e6e6      	b.n	80004f2 <__udivmoddi4+0x62>
 8000724:	4610      	mov	r0, r2
 8000726:	e6fb      	b.n	8000520 <__udivmoddi4+0x90>
 8000728:	4548      	cmp	r0, r9
 800072a:	d2a9      	bcs.n	8000680 <__udivmoddi4+0x1f0>
 800072c:	ebb9 0802 	subs.w	r8, r9, r2
 8000730:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000734:	3b01      	subs	r3, #1
 8000736:	e7a3      	b.n	8000680 <__udivmoddi4+0x1f0>
 8000738:	4645      	mov	r5, r8
 800073a:	e7ea      	b.n	8000712 <__udivmoddi4+0x282>
 800073c:	462b      	mov	r3, r5
 800073e:	e794      	b.n	800066a <__udivmoddi4+0x1da>
 8000740:	4640      	mov	r0, r8
 8000742:	e7d1      	b.n	80006e8 <__udivmoddi4+0x258>
 8000744:	46d0      	mov	r8, sl
 8000746:	e77b      	b.n	8000640 <__udivmoddi4+0x1b0>
 8000748:	3d02      	subs	r5, #2
 800074a:	4462      	add	r2, ip
 800074c:	e732      	b.n	80005b4 <__udivmoddi4+0x124>
 800074e:	4608      	mov	r0, r1
 8000750:	e70a      	b.n	8000568 <__udivmoddi4+0xd8>
 8000752:	4464      	add	r4, ip
 8000754:	3802      	subs	r0, #2
 8000756:	e742      	b.n	80005de <__udivmoddi4+0x14e>

08000758 <__aeabi_idiv0>:
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000768:	f005 fe3a 	bl	80063e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800076c:	4b58      	ldr	r3, [pc, #352]	; (80008d0 <pvPortMallocMicroROS+0x174>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d101      	bne.n	8000778 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000774:	f000 f980 	bl	8000a78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000778:	4b56      	ldr	r3, [pc, #344]	; (80008d4 <pvPortMallocMicroROS+0x178>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4013      	ands	r3, r2
 8000780:	2b00      	cmp	r3, #0
 8000782:	f040 808e 	bne.w	80008a2 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d01d      	beq.n	80007c8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800078c:	2208      	movs	r2, #8
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	2b00      	cmp	r3, #0
 800079c:	d014      	beq.n	80007c8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f023 0307 	bic.w	r3, r3, #7
 80007a4:	3308      	adds	r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00a      	beq.n	80007c8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b6:	f383 8811 	msr	BASEPRI, r3
 80007ba:	f3bf 8f6f 	isb	sy
 80007be:	f3bf 8f4f 	dsb	sy
 80007c2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007c4:	bf00      	nop
 80007c6:	e7fe      	b.n	80007c6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d069      	beq.n	80008a2 <pvPortMallocMicroROS+0x146>
 80007ce:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d864      	bhi.n	80008a2 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007d8:	4b40      	ldr	r3, [pc, #256]	; (80008dc <pvPortMallocMicroROS+0x180>)
 80007da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007dc:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <pvPortMallocMicroROS+0x180>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007e2:	e004      	b.n	80007ee <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d903      	bls.n	8000800 <pvPortMallocMicroROS+0xa4>
 80007f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1f1      	bne.n	80007e4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000800:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <pvPortMallocMicroROS+0x174>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000806:	429a      	cmp	r2, r3
 8000808:	d04b      	beq.n	80008a2 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2208      	movs	r2, #8
 8000810:	4413      	add	r3, r2
 8000812:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	1ad2      	subs	r2, r2, r3
 8000824:	2308      	movs	r3, #8
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	429a      	cmp	r2, r3
 800082a:	d91f      	bls.n	800086c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800082c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00a      	beq.n	8000854 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000842:	f383 8811 	msr	BASEPRI, r3
 8000846:	f3bf 8f6f 	isb	sy
 800084a:	f3bf 8f4f 	dsb	sy
 800084e:	613b      	str	r3, [r7, #16]
}
 8000850:	bf00      	nop
 8000852:	e7fe      	b.n	8000852 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f000 f968 	bl	8000b3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 8000878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <pvPortMallocMicroROS+0x184>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d203      	bcs.n	800088e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <pvPortMallocMicroROS+0x184>)
 800088c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <pvPortMallocMicroROS+0x178>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008a2:	f005 fdab 	bl	80063fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00a      	beq.n	80008c6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	f383 8811 	msr	BASEPRI, r3
 80008b8:	f3bf 8f6f 	isb	sy
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	60fb      	str	r3, [r7, #12]
}
 80008c2:	bf00      	nop
 80008c4:	e7fe      	b.n	80008c4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80008c6:	69fb      	ldr	r3, [r7, #28]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20003edc 	.word	0x20003edc
 80008d4:	20003ee8 	.word	0x20003ee8
 80008d8:	20003ee0 	.word	0x20003ee0
 80008dc:	20003ed4 	.word	0x20003ed4
 80008e0:	20003ee4 	.word	0x20003ee4

080008e4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d048      	beq.n	8000988 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008f6:	2308      	movs	r3, #8
 80008f8:	425b      	negs	r3, r3
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4413      	add	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <vPortFreeMicroROS+0xac>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4013      	ands	r3, r2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10a      	bne.n	8000928 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000916:	f383 8811 	msr	BASEPRI, r3
 800091a:	f3bf 8f6f 	isb	sy
 800091e:	f3bf 8f4f 	dsb	sy
 8000922:	60fb      	str	r3, [r7, #12]
}
 8000924:	bf00      	nop
 8000926:	e7fe      	b.n	8000926 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00a      	beq.n	8000946 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	60bb      	str	r3, [r7, #8]
}
 8000942:	bf00      	nop
 8000944:	e7fe      	b.n	8000944 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <vPortFreeMicroROS+0xac>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4013      	ands	r3, r2
 8000950:	2b00      	cmp	r3, #0
 8000952:	d019      	beq.n	8000988 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d115      	bne.n	8000988 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <vPortFreeMicroROS+0xac>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	43db      	mvns	r3, r3
 8000966:	401a      	ands	r2, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800096c:	f005 fd38 	bl	80063e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	685a      	ldr	r2, [r3, #4]
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <vPortFreeMicroROS+0xb0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4413      	add	r3, r2
 800097a:	4a06      	ldr	r2, [pc, #24]	; (8000994 <vPortFreeMicroROS+0xb0>)
 800097c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800097e:	6938      	ldr	r0, [r7, #16]
 8000980:	f000 f8dc 	bl	8000b3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000984:	f005 fd3a 	bl	80063fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20003ee8 	.word	0x20003ee8
 8000994:	20003ee0 	.word	0x20003ee0

08000998 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80009a4:	2308      	movs	r3, #8
 80009a6:	425b      	negs	r3, r3
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	4413      	add	r3, r2
 80009ac:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <getBlockSize+0x38>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	43db      	mvns	r3, r3
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]

	return count;
 80009c0:	68fb      	ldr	r3, [r7, #12]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20003ee8 	.word	0x20003ee8

080009d4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009de:	f005 fcff 	bl	80063e0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009e2:	6838      	ldr	r0, [r7, #0]
 80009e4:	f7ff feba 	bl	800075c <pvPortMallocMicroROS>
 80009e8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d017      	beq.n	8000a20 <pvPortReallocMicroROS+0x4c>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d014      	beq.n	8000a20 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffce 	bl	8000998 <getBlockSize>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2208      	movs	r2, #8
 8000a00:	1a9b      	subs	r3, r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d201      	bcs.n	8000a10 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	68b8      	ldr	r0, [r7, #8]
 8000a16:	f014 fd30 	bl	801547a <memcpy>

		vPortFreeMicroROS(pv);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ff62 	bl	80008e4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a20:	f005 fcec 	bl	80063fc <xTaskResumeAll>

	return newmem;
 8000a24:	68bb      	ldr	r3, [r7, #8]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a38:	f005 fcd2 	bl	80063e0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	fb02 f303 	mul.w	r3, r2, r3
 8000a44:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a46:	6978      	ldr	r0, [r7, #20]
 8000a48:	f7ff fe88 	bl	800075c <pvPortMallocMicroROS>
 8000a4c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a52:	e004      	b.n	8000a5e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	613a      	str	r2, [r7, #16]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	617a      	str	r2, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f5      	bne.n	8000a54 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a68:	f005 fcc8 	bl	80063fc <xTaskResumeAll>
  	return mem;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a7e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <prvHeapInit+0xac>)
 8000a86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00c      	beq.n	8000aac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	3307      	adds	r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f023 0307 	bic.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <prvHeapInit+0xac>)
 8000aa8:	4413      	add	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <prvHeapInit+0xb0>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <prvHeapInit+0xb0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1a9b      	subs	r3, r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f023 0307 	bic.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <prvHeapInit+0xb4>)
 8000ad8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <prvHeapInit+0xb4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <prvHeapInit+0xb4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <prvHeapInit+0xb4>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <prvHeapInit+0xb8>)
 8000b06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <prvHeapInit+0xbc>)
 8000b0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <prvHeapInit+0xc0>)
 8000b12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	200002d4 	.word	0x200002d4
 8000b28:	20003ed4 	.word	0x20003ed4
 8000b2c:	20003edc 	.word	0x20003edc
 8000b30:	20003ee4 	.word	0x20003ee4
 8000b34:	20003ee0 	.word	0x20003ee0
 8000b38:	20003ee8 	.word	0x20003ee8

08000b3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <prvInsertBlockIntoFreeList+0xac>)
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e002      	b.n	8000b50 <prvInsertBlockIntoFreeList+0x14>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d8f7      	bhi.n	8000b4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	4413      	add	r3, r2
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d108      	bne.n	8000b7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	441a      	add	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	441a      	add	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d118      	bne.n	8000bc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <prvInsertBlockIntoFreeList+0xb0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d00d      	beq.n	8000bba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	441a      	add	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e008      	b.n	8000bcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <prvInsertBlockIntoFreeList+0xb0>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e003      	b.n	8000bcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d002      	beq.n	8000bda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20003ed4 	.word	0x20003ed4
 8000bec:	20003edc 	.word	0x20003edc

08000bf0 <cmd_vel_callback>:
}
*/
geometry_msgs__msg__Twist * msg;

void cmd_vel_callback(const*msgin)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist*)msgin;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	60fb      	str	r3, [r7, #12]
	if (msg->linear.x >= 0){
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c02:	f04f 0200 	mov.w	r2, #0
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	f7ff fbc5 	bl	8000398 <__aeabi_dcmpge>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00f      	beq.n	8000c34 <cmd_vel_callback+0x44>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4810      	ldr	r0, [pc, #64]	; (8000c5c <cmd_vel_callback+0x6c>)
 8000c1c:	f001 fe7e 	bl	800291c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <cmd_vel_callback+0x6c>)
 8000c28:	f001 fe78 	bl	800291c <HAL_GPIO_WritePin>
		printf("forward");
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <cmd_vel_callback+0x70>)
 8000c2e:	f014 f9d9 	bl	8014fe4 <iprintf>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
		printf("backwards");

	}
}
 8000c32:	e00e      	b.n	8000c52 <cmd_vel_callback+0x62>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4808      	ldr	r0, [pc, #32]	; (8000c5c <cmd_vel_callback+0x6c>)
 8000c3c:	f001 fe6e 	bl	800291c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <cmd_vel_callback+0x6c>)
 8000c48:	f001 fe68 	bl	800291c <HAL_GPIO_WritePin>
		printf("backwards");
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <cmd_vel_callback+0x74>)
 8000c4e:	f014 f9c9 	bl	8014fe4 <iprintf>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	08016134 	.word	0x08016134
 8000c64:	0801613c 	.word	0x0801613c

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 ff4c 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f81c 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f94a 	bl	8000f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c78:	f000 f920 	bl	8000ebc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c7c:	f000 f8f4 	bl	8000e68 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c80:	f000 f87c 	bl	8000d7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c84:	f004 faa4 	bl	80051d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <main+0x38>)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <main+0x3c>)
 8000c8e:	f004 fae9 	bl	8005264 <osThreadNew>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <main+0x40>)
 8000c96:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c98:	f004 fabe 	bl	8005218 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <main+0x34>
 8000c9e:	bf00      	nop
 8000ca0:	080161d8 	.word	0x080161d8
 8000ca4:	08001015 	.word	0x08001015
 8000ca8:	20004040 	.word	0x20004040

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f014 fb14 	bl	80152e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <SystemClock_Config+0xc8>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <SystemClock_Config+0xc8>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <SystemClock_Config+0xc8>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <SystemClock_Config+0xcc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <SystemClock_Config+0xcc>)
 8000cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <SystemClock_Config+0xcc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d10:	2310      	movs	r3, #16
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fe0d 	bl	8002950 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d3c:	f000 fa48 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2302      	movs	r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 f86f 	bl	8002e40 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d68:	f000 fa32 	bl	80011d0 <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3750      	adds	r7, #80	; 0x50
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dae:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <MX_TIM3_Init+0xe8>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000db4:	2263      	movs	r2, #99	; 0x63
 8000db6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dc0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000dc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd2:	4823      	ldr	r0, [pc, #140]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dd4:	f002 fa14 	bl	8003200 <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dde:	f000 f9f7 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dec:	4619      	mov	r1, r3
 8000dee:	481c      	ldr	r0, [pc, #112]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000df0:	f002 fb70 	bl	80034d4 <HAL_TIM_ConfigClockSource>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dfa:	f000 f9e9 	bl	80011d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000e00:	f002 fa4d 	bl	800329e <HAL_TIM_PWM_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e0a:	f000 f9e1 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e16:	f107 0320 	add.w	r3, r7, #32
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4810      	ldr	r0, [pc, #64]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000e1e:	f002 fed3 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e28:	f000 f9d2 	bl	80011d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2c:	2360      	movs	r3, #96	; 0x60
 8000e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	220c      	movs	r2, #12
 8000e40:	4619      	mov	r1, r3
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000e44:	f002 fa84 	bl	8003350 <HAL_TIM_PWM_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e4e:	f000 f9bf 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000e54:	f000 fb76 	bl	8001544 <HAL_TIM_MspPostInit>

}
 8000e58:	bf00      	nop
 8000e5a:	3738      	adds	r7, #56	; 0x38
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20003ef0 	.word	0x20003ef0
 8000e64:	40000400 	.word	0x40000400

08000e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_USART2_UART_Init+0x50>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f002 ff00 	bl	8003ca4 <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f991 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20003f38 	.word	0x20003f38
 8000eb8:	40004400 	.word	0x40004400

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_DMA_Init+0x4c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <MX_DMA_Init+0x4c>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MX_DMA_Init+0x4c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	2010      	movs	r0, #16
 8000ee4:	f000 ff5d 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ee8:	2010      	movs	r0, #16
 8000eea:	f000 ff76 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	2011      	movs	r0, #17
 8000ef4:	f000 ff55 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ef8:	2011      	movs	r0, #17
 8000efa:	f000 ff6e 	bl	8001dda <HAL_NVIC_EnableIRQ>

}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a37      	ldr	r2, [pc, #220]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b35      	ldr	r3, [pc, #212]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a30      	ldr	r2, [pc, #192]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a29      	ldr	r2, [pc, #164]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a22      	ldr	r2, [pc, #136]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_GPIO_Init+0xfc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fb4:	4815      	ldr	r0, [pc, #84]	; (800100c <MX_GPIO_Init+0x100>)
 8000fb6:	f001 fcb1 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2130      	movs	r1, #48	; 0x30
 8000fbe:	4814      	ldr	r0, [pc, #80]	; (8001010 <MX_GPIO_Init+0x104>)
 8000fc0:	f001 fcac 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fc4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480b      	ldr	r0, [pc, #44]	; (800100c <MX_GPIO_Init+0x100>)
 8000fde:	f001 fb19 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fe2:	2330      	movs	r3, #48	; 0x30
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_GPIO_Init+0x104>)
 8000ffa:	f001 fb0b 	bl	8002614 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40020c00 	.word	0x40020c00
 8001010:	40020400 	.word	0x40020400

08001014 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800101a:	af02      	add	r7, sp, #8
 800101c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001020:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001024:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration
	  char test_array[ARRAY_LEN];
	  memset(test_array,'z',ARRAY_LEN);
 8001026:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800102a:	22c8      	movs	r2, #200	; 0xc8
 800102c:	217a      	movs	r1, #122	; 0x7a
 800102e:	4618      	mov	r0, r3
 8001030:	f014 f95a 	bl	80152e8 <memset>


	  rmw_uros_set_custom_transport(
 8001034:	4b55      	ldr	r3, [pc, #340]	; (800118c <StartDefaultTask+0x178>)
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	4b55      	ldr	r3, [pc, #340]	; (8001190 <StartDefaultTask+0x17c>)
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4b55      	ldr	r3, [pc, #340]	; (8001194 <StartDefaultTask+0x180>)
 800103e:	4a56      	ldr	r2, [pc, #344]	; (8001198 <StartDefaultTask+0x184>)
 8001040:	4956      	ldr	r1, [pc, #344]	; (800119c <StartDefaultTask+0x188>)
 8001042:	2001      	movs	r0, #1
 8001044:	f00a f85a 	bl	800b0fc <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001048:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800104c:	4618      	mov	r0, r3
 800104e:	f009 fd25 	bl	800aa9c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001052:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <StartDefaultTask+0x18c>)
 8001054:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001058:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <StartDefaultTask+0x190>)
 800105a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	  freeRTOS_allocator.reallocate = microros_reallocate;
 800105e:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <StartDefaultTask+0x194>)
 8001060:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001064:	4b51      	ldr	r3, [pc, #324]	; (80011ac <StartDefaultTask+0x198>)
 8001066:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800106a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800106e:	4618      	mov	r0, r3
 8001070:	f009 fd22 	bl	800aab8 <rcutils_set_default_allocator>
 8001074:	4603      	mov	r3, r0
 8001076:	f083 0301 	eor.w	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <StartDefaultTask+0x76>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001080:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001084:	484a      	ldr	r0, [pc, #296]	; (80011b0 <StartDefaultTask+0x19c>)
 8001086:	f013 ffad 	bl	8014fe4 <iprintf>
	  std_msgs__msg__Int32 msg;*/
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 800108a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800108e:	f5a3 74cc 	sub.w	r4, r3, #408	; 0x198
 8001092:	463b      	mov	r3, r7
 8001094:	4618      	mov	r0, r3
 8001096:	f009 fd2d 	bl	800aaf4 <rcutils_get_default_allocator>
 800109a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800109e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 80010ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80010b0:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	f009 fbc6 	bl	800a848 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 80010bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010c0:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80010c4:	4a3b      	ldr	r2, [pc, #236]	; (80011b4 <StartDefaultTask+0x1a0>)
 80010c6:	493c      	ldr	r1, [pc, #240]	; (80011b8 <StartDefaultTask+0x1a4>)
 80010c8:	f009 fc08 	bl	800a8dc <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_best_effort(
 80010cc:	f00b f80a 	bl	800c0e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80010d6:	4b39      	ldr	r3, [pc, #228]	; (80011bc <StartDefaultTask+0x1a8>)
 80010d8:	4839      	ldr	r0, [pc, #228]	; (80011c0 <StartDefaultTask+0x1ac>)
 80010da:	f009 fc6f 	bl	800a9bc <rclc_publisher_init_best_effort>
			  &publisher_string,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
			  "Brother");
	  
	  rclc_publisher_init_default(
 80010de:	f006 fded 	bl	8007cbc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80010e8:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <StartDefaultTask+0x1b0>)
 80010ee:	f009 fc31 	bl	800a954 <rclc_publisher_init_default>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");
	    */
	  //create subscriber
	  rclc_subscription_init_default(
 80010f2:	f006 fde3 	bl	8007cbc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80010f6:	4602      	mov	r2, r0
 80010f8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80010fc:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8001100:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <StartDefaultTask+0x1b4>)
 8001102:	f009 fc8f 	bl	800aa24 <rclc_subscription_init_default>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	    "cmd_vel");

	  //create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001106:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800110a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800110e:	4618      	mov	r0, r3
 8001110:	f009 f8be 	bl	800a290 <rclc_executor_get_zero_initialized_executor>
	  rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001114:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001118:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800111c:	f107 0020 	add.w	r0, r7, #32
 8001120:	2202      	movs	r2, #2
 8001122:	f009 f8c1 	bl	800a2a8 <rclc_executor_init>
	  rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &cmd_vel_msg, &cmd_vel_callback, ON_NEW_DATA);
 8001126:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800112a:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800112e:	f107 0020 	add.w	r0, r7, #32
 8001132:	2300      	movs	r3, #0
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <StartDefaultTask+0x1b8>)
 8001138:	f009 f926 	bl	800a388 <rclc_executor_add_subscription>
	    sub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	    sub_str_msg.data.size = 0;
	    sub_str_msg.data.capacity = ARRAY_LEN;*/

	    // execute subscriber
	    rclc_executor_spin(&executor);
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	4618      	mov	r0, r3
 8001142:	f009 fb41 	bl	800a7c8 <rclc_executor_spin>

	    //organize
	    rcl_publisher_fini(&subscriber_cmd_vel_status, &node);
 8001146:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800114a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f008 fb41 	bl	80097d8 <rcl_publisher_fini>
	    rcl_subscription_fini(&subscriber_cmd_vel, &node);
 8001156:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800115a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f008 fc63 	bl	8009a2c <rcl_subscription_fini>
	    rcl_publisher_fini(&subscriber_cmd_vel_status, &node);
 8001166:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800116a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f008 fb31 	bl	80097d8 <rcl_publisher_fini>
	    rcl_node_fini(&node);
 8001176:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800117a:	4618      	mov	r0, r3
 800117c:	f008 fa0a 	bl	8009594 <rcl_node_fini>
	  }*/



  /* USER CODE END 5 */
}
 8001180:	bf00      	nop
 8001182:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	08001a0d 	.word	0x08001a0d
 8001190:	080019a5 	.word	0x080019a5
 8001194:	08001985 	.word	0x08001985
 8001198:	08001959 	.word	0x08001959
 800119c:	20003f38 	.word	0x20003f38
 80011a0:	080011dd 	.word	0x080011dd
 80011a4:	08001221 	.word	0x08001221
 80011a8:	08001259 	.word	0x08001259
 80011ac:	080012c5 	.word	0x080012c5
 80011b0:	08016148 	.word	0x08016148
 80011b4:	08016170 	.word	0x08016170
 80011b8:	08016174 	.word	0x08016174
 80011bc:	08016180 	.word	0x08016180
 80011c0:	20003eec 	.word	0x20003eec
 80011c4:	08016188 	.word	0x08016188
 80011c8:	08016198 	.word	0x08016198
 80011cc:	08000bf1 	.word	0x08000bf1

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <microros_allocate+0x3c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <microros_allocate+0x3c>)
 80011f4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <microros_allocate+0x40>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <microros_allocate+0x40>)
 8001204:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff faa8 	bl	800075c <pvPortMallocMicroROS>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20004044 	.word	0x20004044
 800121c:	20004048 	.word	0x20004048

08001220 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00c      	beq.n	800124a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fbb1 	bl	8000998 <getBlockSize>
 8001236:	4603      	mov	r3, r0
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <microros_deallocate+0x34>)
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	461a      	mov	r2, r3
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <microros_deallocate+0x34>)
 8001242:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fb4d 	bl	80008e4 <vPortFreeMicroROS>
  }
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20004048 	.word	0x20004048

08001258 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <microros_reallocate+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	4413      	add	r3, r2
 800126e:	461a      	mov	r2, r3
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <microros_reallocate+0x64>)
 8001272:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <microros_reallocate+0x68>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4413      	add	r3, r2
 800127e:	461a      	mov	r2, r3
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <microros_reallocate+0x68>)
 8001282:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d104      	bne.n	8001294 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800128a:	68b8      	ldr	r0, [r7, #8]
 800128c:	f7ff fa66 	bl	800075c <pvPortMallocMicroROS>
 8001290:	4603      	mov	r3, r0
 8001292:	e00e      	b.n	80012b2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f7ff fb7f 	bl	8000998 <getBlockSize>
 800129a:	4603      	mov	r3, r0
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <microros_reallocate+0x68>)
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <microros_reallocate+0x68>)
 80012a6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fb92 	bl	80009d4 <pvPortReallocMicroROS>
 80012b0:	4603      	mov	r3, r0
  }
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20004044 	.word	0x20004044
 80012c0:	20004048 	.word	0x20004048

080012c4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <microros_zero_allocate+0x48>)
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	461a      	mov	r2, r3
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <microros_zero_allocate+0x48>)
 80012e2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <microros_zero_allocate+0x4c>)
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <microros_zero_allocate+0x4c>)
 80012f6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff fb97 	bl	8000a2e <pvPortCallocMicroROS>
 8001300:	4603      	mov	r3, r0
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20004044 	.word	0x20004044
 8001310:	20004048 	.word	0x20004048
 8001314:	00000000 	.word	0x00000000

08001318 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001318:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800132a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800132e:	a320      	add	r3, pc, #128	; (adr r3, 80013b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f844 	bl	80003c0 <__aeabi_ldivmod>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001346:	a31a      	add	r3, pc, #104	; (adr r3, 80013b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff f838 	bl	80003c0 <__aeabi_ldivmod>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	da20      	bge.n	800139e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <UTILS_NanosecondsToTimespec+0x90>)
 8001362:	fb82 1203 	smull	r1, r2, r2, r3
 8001366:	1712      	asrs	r2, r2, #28
 8001368:	17db      	asrs	r3, r3, #31
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	17c8      	asrs	r0, r1, #31
 800137a:	460c      	mov	r4, r1
 800137c:	4605      	mov	r5, r0
 800137e:	ebb2 0804 	subs.w	r8, r2, r4
 8001382:	eb63 0905 	sbc.w	r9, r3, r5
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	4906      	ldr	r1, [pc, #24]	; (80013ac <UTILS_NanosecondsToTimespec+0x94>)
 8001394:	fb01 f303 	mul.w	r3, r1, r3
 8001398:	441a      	add	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	609a      	str	r2, [r3, #8]
    }
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013a8:	44b82fa1 	.word	0x44b82fa1
 80013ac:	3b9aca00 	.word	0x3b9aca00
 80013b0:	3b9aca00 	.word	0x3b9aca00
 80013b4:	00000000 	.word	0x00000000

080013b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80013b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013bc:	b08e      	sub	sp, #56	; 0x38
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6278      	str	r0, [r7, #36]	; 0x24
 80013c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80013c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013c8:	2300      	movs	r3, #0
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80013da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 fa86 	bl	80068f0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	17da      	asrs	r2, r3, #31
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	61fa      	str	r2, [r7, #28]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	69b9      	ldr	r1, [r7, #24]
 80013f6:	000b      	movs	r3, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	2200      	movs	r2, #0
 8001402:	461c      	mov	r4, r3
 8001404:	4615      	mov	r5, r2
 8001406:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800140a:	1911      	adds	r1, r2, r4
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	416b      	adcs	r3, r5
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001416:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800141a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	f04f 0400 	mov.w	r4, #0
 8001426:	f04f 0500 	mov.w	r5, #0
 800142a:	015d      	lsls	r5, r3, #5
 800142c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001430:	0154      	lsls	r4, r2, #5
 8001432:	4622      	mov	r2, r4
 8001434:	462b      	mov	r3, r5
 8001436:	ebb2 0800 	subs.w	r8, r2, r0
 800143a:	eb63 0901 	sbc.w	r9, r3, r1
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800144a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800144e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001452:	4690      	mov	r8, r2
 8001454:	4699      	mov	r9, r3
 8001456:	eb18 0a00 	adds.w	sl, r8, r0
 800145a:	eb49 0b01 	adc.w	fp, r9, r1
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800146a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800146e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001472:	ebb2 040a 	subs.w	r4, r2, sl
 8001476:	603c      	str	r4, [r7, #0]
 8001478:	eb63 030b 	sbc.w	r3, r3, fp
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001482:	4623      	mov	r3, r4
 8001484:	181b      	adds	r3, r3, r0
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	462b      	mov	r3, r5
 800148a:	eb41 0303 	adc.w	r3, r1, r3
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	6a3a      	ldr	r2, [r7, #32]
 8001492:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001496:	f7ff ff3f 	bl	8001318 <UTILS_NanosecondsToTimespec>

    return 0;
 800149a:	2300      	movs	r3, #0
 800149c:	4618      	mov	r0, r3
 800149e:	3738      	adds	r7, #56	; 0x38
 80014a0:	46bd      	mov	sp, r7
 80014a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080014a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_MspInit+0x54>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_MspInit+0x54>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x54>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_MspInit+0x54>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_MspInit+0x54>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_MspInit+0x54>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	210f      	movs	r1, #15
 80014ea:	f06f 0001 	mvn.w	r0, #1
 80014ee:	f000 fc58 	bl	8001da2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_TIM_Base_MspInit+0x3c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10d      	bne.n	800152e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_TIM_Base_MspInit+0x40>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_TIM_Base_MspInit+0x40>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_TIM_Base_MspInit+0x40>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40000400 	.word	0x40000400
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a12      	ldr	r2, [pc, #72]	; (80015ac <HAL_TIM_MspPostInit+0x68>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d11e      	bne.n	80015a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_TIM_MspPostInit+0x6c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_TIM_MspPostInit+0x6c>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_TIM_MspPostInit+0x6c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001586:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_TIM_MspPostInit+0x70>)
 80015a0:	f001 f838 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40000400 	.word	0x40000400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020800 	.word	0x40020800

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_UART_MspInit+0x150>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	f040 8092 	bne.w	8001700 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_UART_MspInit+0x154>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a49      	ldr	r2, [pc, #292]	; (800170c <HAL_UART_MspInit+0x154>)
 80015e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_UART_MspInit+0x154>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_UART_MspInit+0x154>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a42      	ldr	r2, [pc, #264]	; (800170c <HAL_UART_MspInit+0x154>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <HAL_UART_MspInit+0x154>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001614:	230c      	movs	r3, #12
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001624:	2307      	movs	r3, #7
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	4838      	ldr	r0, [pc, #224]	; (8001710 <HAL_UART_MspInit+0x158>)
 8001630:	f000 fff0 	bl	8002614 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_UART_MspInit+0x15c>)
 8001636:	4a38      	ldr	r2, [pc, #224]	; (8001718 <HAL_UART_MspInit+0x160>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_UART_MspInit+0x15c>)
 800163c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001640:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_UART_MspInit+0x15c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_UART_MspInit+0x15c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_UART_MspInit+0x15c>)
 8001650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001654:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_UART_MspInit+0x15c>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_UART_MspInit+0x15c>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_UART_MspInit+0x15c>)
 8001664:	2200      	movs	r2, #0
 8001666:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001668:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_UART_MspInit+0x15c>)
 800166a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800166e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_UART_MspInit+0x15c>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001676:	4827      	ldr	r0, [pc, #156]	; (8001714 <HAL_UART_MspInit+0x15c>)
 8001678:	f000 fbca 	bl	8001e10 <HAL_DMA_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001682:	f7ff fda5 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_UART_MspInit+0x15c>)
 800168a:	63da      	str	r2, [r3, #60]	; 0x3c
 800168c:	4a21      	ldr	r2, [pc, #132]	; (8001714 <HAL_UART_MspInit+0x15c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_UART_MspInit+0x164>)
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_UART_MspInit+0x168>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_UART_MspInit+0x164>)
 800169a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800169e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_UART_MspInit+0x164>)
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_UART_MspInit+0x164>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_UART_MspInit+0x164>)
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_UART_MspInit+0x164>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_UART_MspInit+0x164>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_UART_MspInit+0x164>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_UART_MspInit+0x164>)
 80016c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_UART_MspInit+0x164>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <HAL_UART_MspInit+0x164>)
 80016d6:	f000 fb9b 	bl	8001e10 <HAL_DMA_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80016e0:	f7ff fd76 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_UART_MspInit+0x164>)
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
 80016ea:	4a0c      	ldr	r2, [pc, #48]	; (800171c <HAL_UART_MspInit+0x164>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2105      	movs	r1, #5
 80016f4:	2026      	movs	r0, #38	; 0x26
 80016f6:	f000 fb54 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016fa:	2026      	movs	r0, #38	; 0x26
 80016fc:	f000 fb6d 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	; 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40004400 	.word	0x40004400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	20003f80 	.word	0x20003f80
 8001718:	40026088 	.word	0x40026088
 800171c:	20003fe0 	.word	0x20003fe0
 8001720:	400260a0 	.word	0x400260a0

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 fa2a 	bl	8001bac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001758:	f005 fa4a 	bl	8006bf0 <xTaskGetSchedulerState>
 800175c:	4603      	mov	r3, r0
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001762:	f006 f831 	bl	80077c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA1_Stream5_IRQHandler+0x10>)
 8001772:	f000 fce5 	bl	8002140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20003f80 	.word	0x20003f80

08001780 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA1_Stream6_IRQHandler+0x10>)
 8001786:	f000 fcdb 	bl	8002140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20003fe0 	.word	0x20003fe0

08001794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <USART2_IRQHandler+0x10>)
 800179a:	f002 fbe7 	bl	8003f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20003f38 	.word	0x20003f38

080017a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_kill>:

int _kill(int pid, int sig)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c2:	f013 fe25 	bl	8015410 <__errno>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2216      	movs	r2, #22
 80017ca:	601a      	str	r2, [r3, #0]
  return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_exit>:

void _exit (int status)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffe7 	bl	80017b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ea:	e7fe      	b.n	80017ea <_exit+0x12>

080017ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
  }

  return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
  }
  return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001886:	605a      	str	r2, [r3, #4]
  return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f013 fd8a 	bl	8015410 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20020000 	.word	0x20020000
 8001928:	00000400 	.word	0x00000400
 800192c:	20004050 	.word	0x20004050
 8001930:	2000de78 	.word	0x2000de78

08001934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001966:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800196c:	4904      	ldr	r1, [pc, #16]	; (8001980 <cubemx_transport_open+0x28>)
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f002 fa58 	bl	8003e24 <HAL_UART_Receive_DMA>
    return true;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20004054 	.word	0x20004054

08001984 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001992:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f002 fa6a 	bl	8003e6e <HAL_UART_DMAStop>
    return true;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019b8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d11c      	bne.n	8001a00 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f002 f9b8 	bl	8003d44 <HAL_UART_Transmit_DMA>
 80019d4:	4603      	mov	r3, r0
 80019d6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80019d8:	e002      	b.n	80019e0 <cubemx_transport_write+0x3c>
            osDelay(1);
 80019da:	2001      	movs	r0, #1
 80019dc:	f003 fcd4 	bl	8005388 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <cubemx_transport_write+0x4e>
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d1f3      	bne.n	80019da <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80019f2:	7cfb      	ldrb	r3, [r7, #19]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <cubemx_transport_write+0x58>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	e002      	b.n	8001a02 <cubemx_transport_write+0x5e>
 80019fc:	2300      	movs	r3, #0
 80019fe:	e000      	b.n	8001a02 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001a00:	2300      	movs	r3, #0
    }
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a20:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <cubemx_transport_read+0x9c>)
 8001a38:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a3a:	b662      	cpsie	i
}
 8001a3c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f003 fc9f 	bl	8005388 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <cubemx_transport_read+0xa0>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <cubemx_transport_read+0x9c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d103      	bne.n	8001a5e <cubemx_transport_read+0x52>
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dbe3      	blt.n	8001a26 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a62:	e011      	b.n	8001a88 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <cubemx_transport_read+0xa0>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	4910      	ldr	r1, [pc, #64]	; (8001ab0 <cubemx_transport_read+0xa4>)
 8001a70:	5c8a      	ldrb	r2, [r1, r2]
 8001a72:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <cubemx_transport_read+0xa0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <cubemx_transport_read+0xa0>)
 8001a80:	6013      	str	r3, [r2, #0]
        wrote++;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <cubemx_transport_read+0xa0>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <cubemx_transport_read+0x9c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d003      	beq.n	8001a9c <cubemx_transport_read+0x90>
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3e3      	bcc.n	8001a64 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001a9c:	69bb      	ldr	r3, [r7, #24]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20004858 	.word	0x20004858
 8001aac:	20004854 	.word	0x20004854
 8001ab0:	20004054 	.word	0x20004054

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab8:	f7ff ff3c 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001abe:	490d      	ldr	r1, [pc, #52]	; (8001af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	; (8001b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f013 fc9b 	bl	801541c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7ff f8bf 	bl	8000c68 <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8001af8:	08017218 	.word	0x08017218
  ldr r2, =_sbss
 8001afc:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8001b00:	2000de78 	.word	0x2000de78

08001b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_Init+0x40>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_Init+0x40>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x40>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f92b 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	200f      	movs	r0, #15
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fcb4 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f943 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b88:	f000 f90b 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000008 	.word	0x20000008

08001bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000000c 	.word	0x2000000c
 8001bd0:	2000485c 	.word	0x2000485c

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_GetTick+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2000485c 	.word	0x2000485c

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff29 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff3e 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff8e 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff31 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa2 	bl	8001d48 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff feda 	bl	8001bd4 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e099      	b.n	8001f60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4c:	e00f      	b.n	8001e6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4e:	f7ff fec1 	bl	8001bd4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d908      	bls.n	8001e6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2203      	movs	r2, #3
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e078      	b.n	8001f60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1e8      	bne.n	8001e4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_DMA_Init+0x158>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d107      	bne.n	8001ed8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f023 0307 	bic.w	r3, r3, #7
 8001eee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d117      	bne.n	8001f32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00e      	beq.n	8001f32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fb01 	bl	800251c <DMA_CheckFifoParam>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e016      	b.n	8001f60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fab8 	bl	80024b0 <DMA_CalcBaseAndBitshift>
 8001f40:	4603      	mov	r3, r0
 8001f42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	223f      	movs	r2, #63	; 0x3f
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	f010803f 	.word	0xf010803f

08001f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_DMA_Start_IT+0x26>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e040      	b.n	8002014 <HAL_DMA_Start_IT+0xa8>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d12f      	bne.n	8002006 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fa4a 	bl	8002454 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0216 	orr.w	r2, r2, #22
 8001fda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0208 	orr.w	r2, r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e005      	b.n	8002012 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800200e:	2302      	movs	r3, #2
 8002010:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002012:	7dfb      	ldrb	r3, [r7, #23]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800202a:	f7ff fdd3 	bl	8001bd4 <HAL_GetTick>
 800202e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d008      	beq.n	800204e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e052      	b.n	80020f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0216 	bic.w	r2, r2, #22
 800205c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <HAL_DMA_Abort+0x62>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0208 	bic.w	r2, r2, #8
 800208c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209e:	e013      	b.n	80020c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a0:	f7ff fd98 	bl	8001bd4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d90c      	bls.n	80020c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2203      	movs	r2, #3
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e015      	b.n	80020f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1e4      	bne.n	80020a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	223f      	movs	r2, #63	; 0x3f
 80020dc:	409a      	lsls	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d004      	beq.n	800211a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2280      	movs	r2, #128	; 0x80
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00c      	b.n	8002134 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2205      	movs	r2, #5
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800214c:	4b8e      	ldr	r3, [pc, #568]	; (8002388 <HAL_DMA_IRQHandler+0x248>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a8e      	ldr	r2, [pc, #568]	; (800238c <HAL_DMA_IRQHandler+0x24c>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2208      	movs	r2, #8
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01a      	beq.n	80021ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0204 	bic.w	r2, r2, #4
 8002192:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	2208      	movs	r2, #8
 800219a:	409a      	lsls	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2201      	movs	r2, #1
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d012      	beq.n	80021e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2201      	movs	r2, #1
 80021d0:	409a      	lsls	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	2204      	movs	r2, #4
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d012      	beq.n	8002218 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	2204      	movs	r2, #4
 8002206:	409a      	lsls	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f043 0204 	orr.w	r2, r3, #4
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	2210      	movs	r2, #16
 800221e:	409a      	lsls	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d043      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d03c      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	2210      	movs	r2, #16
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d018      	beq.n	8002282 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d024      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
 800226e:	e01f      	b.n	80022b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01b      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e016      	b.n	80022b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0208 	bic.w	r2, r2, #8
 800229e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	2220      	movs	r2, #32
 80022b6:	409a      	lsls	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 808f 	beq.w	80023e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8087 	beq.w	80023e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d6:	2220      	movs	r2, #32
 80022d8:	409a      	lsls	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d136      	bne.n	8002358 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0216 	bic.w	r2, r2, #22
 80022f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002308:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <HAL_DMA_IRQHandler+0x1da>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0208 	bic.w	r2, r2, #8
 8002328:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	223f      	movs	r2, #63	; 0x3f
 8002330:	409a      	lsls	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234a:	2b00      	cmp	r3, #0
 800234c:	d07e      	beq.n	800244c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
        }
        return;
 8002356:	e079      	b.n	800244c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01d      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10d      	bne.n	8002390 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	2b00      	cmp	r3, #0
 800237a:	d031      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
 8002384:	e02c      	b.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
 8002386:	bf00      	nop
 8002388:	20000004 	.word	0x20000004
 800238c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d023      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4798      	blx	r3
 80023a0:	e01e      	b.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10f      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0210 	bic.w	r2, r2, #16
 80023be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d032      	beq.n	800244e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d022      	beq.n	800243a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2205      	movs	r2, #5
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	3301      	adds	r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	d307      	bcc.n	8002428 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f2      	bne.n	800240c <HAL_DMA_IRQHandler+0x2cc>
 8002426:	e000      	b.n	800242a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002428:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e000      	b.n	800244e <HAL_DMA_IRQHandler+0x30e>
        return;
 800244c:	bf00      	nop
    }
  }
}
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002470:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d108      	bne.n	8002494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002492:	e007      	b.n	80024a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3b10      	subs	r3, #16
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <DMA_CalcBaseAndBitshift+0x64>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <DMA_CalcBaseAndBitshift+0x68>)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d909      	bls.n	80024f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	1d1a      	adds	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	659a      	str	r2, [r3, #88]	; 0x58
 80024f0:	e007      	b.n	8002502 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	aaaaaaab 	.word	0xaaaaaaab
 8002518:	08016214 	.word	0x08016214

0800251c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11f      	bne.n	8002576 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d856      	bhi.n	80025ea <DMA_CheckFifoParam+0xce>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <DMA_CheckFifoParam+0x28>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002555 	.word	0x08002555
 8002548:	08002567 	.word	0x08002567
 800254c:	08002555 	.word	0x08002555
 8002550:	080025eb 	.word	0x080025eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d046      	beq.n	80025ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002564:	e043      	b.n	80025ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800256e:	d140      	bne.n	80025f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002574:	e03d      	b.n	80025f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257e:	d121      	bne.n	80025c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d837      	bhi.n	80025f6 <DMA_CheckFifoParam+0xda>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <DMA_CheckFifoParam+0x70>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	0800259d 	.word	0x0800259d
 8002590:	080025a3 	.word	0x080025a3
 8002594:	0800259d 	.word	0x0800259d
 8002598:	080025b5 	.word	0x080025b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e030      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d025      	beq.n	80025fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b2:	e022      	b.n	80025fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025bc:	d11f      	bne.n	80025fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025c2:	e01c      	b.n	80025fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d903      	bls.n	80025d2 <DMA_CheckFifoParam+0xb6>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d003      	beq.n	80025d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025d0:	e018      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
      break;
 80025d6:	e015      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      break;
 80025e8:	e00b      	b.n	8002602 <DMA_CheckFifoParam+0xe6>
      break;
 80025ea:	bf00      	nop
 80025ec:	e00a      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e008      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e006      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e004      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e002      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;   
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
    }
  } 
  
  return status; 
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	e159      	b.n	80028e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002630:	2201      	movs	r2, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	429a      	cmp	r2, r3
 800264a:	f040 8148 	bne.w	80028de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d005      	beq.n	8002666 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002662:	2b02      	cmp	r3, #2
 8002664:	d130      	bne.n	80026c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800269c:	2201      	movs	r2, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 0201 	and.w	r2, r3, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d017      	beq.n	8002704 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	2203      	movs	r2, #3
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d123      	bne.n	8002758 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	08da      	lsrs	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3208      	adds	r2, #8
 8002718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	220f      	movs	r2, #15
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	08da      	lsrs	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3208      	adds	r2, #8
 8002752:	69b9      	ldr	r1, [r7, #24]
 8002754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0203 	and.w	r2, r3, #3
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a2 	beq.w	80028de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b57      	ldr	r3, [pc, #348]	; (80028fc <HAL_GPIO_Init+0x2e8>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a56      	ldr	r2, [pc, #344]	; (80028fc <HAL_GPIO_Init+0x2e8>)
 80027a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b54      	ldr	r3, [pc, #336]	; (80028fc <HAL_GPIO_Init+0x2e8>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b6:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	220f      	movs	r2, #15
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a49      	ldr	r2, [pc, #292]	; (8002904 <HAL_GPIO_Init+0x2f0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d019      	beq.n	8002816 <HAL_GPIO_Init+0x202>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a48      	ldr	r2, [pc, #288]	; (8002908 <HAL_GPIO_Init+0x2f4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_GPIO_Init+0x1fe>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a47      	ldr	r2, [pc, #284]	; (800290c <HAL_GPIO_Init+0x2f8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00d      	beq.n	800280e <HAL_GPIO_Init+0x1fa>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a46      	ldr	r2, [pc, #280]	; (8002910 <HAL_GPIO_Init+0x2fc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <HAL_GPIO_Init+0x1f6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a45      	ldr	r2, [pc, #276]	; (8002914 <HAL_GPIO_Init+0x300>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_GPIO_Init+0x1f2>
 8002802:	2304      	movs	r3, #4
 8002804:	e008      	b.n	8002818 <HAL_GPIO_Init+0x204>
 8002806:	2307      	movs	r3, #7
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x204>
 800280a:	2303      	movs	r3, #3
 800280c:	e004      	b.n	8002818 <HAL_GPIO_Init+0x204>
 800280e:	2302      	movs	r3, #2
 8002810:	e002      	b.n	8002818 <HAL_GPIO_Init+0x204>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_GPIO_Init+0x204>
 8002816:	2300      	movs	r3, #0
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f002 0203 	and.w	r2, r2, #3
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	4093      	lsls	r3, r2
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002828:	4935      	ldr	r1, [pc, #212]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002836:	4b38      	ldr	r3, [pc, #224]	; (8002918 <HAL_GPIO_Init+0x304>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285a:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <HAL_GPIO_Init+0x304>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <HAL_GPIO_Init+0x304>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002884:	4a24      	ldr	r2, [pc, #144]	; (8002918 <HAL_GPIO_Init+0x304>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288a:	4b23      	ldr	r3, [pc, #140]	; (8002918 <HAL_GPIO_Init+0x304>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ae:	4a1a      	ldr	r2, [pc, #104]	; (8002918 <HAL_GPIO_Init+0x304>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_GPIO_Init+0x304>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d8:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <HAL_GPIO_Init+0x304>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b0f      	cmp	r3, #15
 80028e8:	f67f aea2 	bls.w	8002630 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40013800 	.word	0x40013800
 8002904:	40020000 	.word	0x40020000
 8002908:	40020400 	.word	0x40020400
 800290c:	40020800 	.word	0x40020800
 8002910:	40020c00 	.word	0x40020c00
 8002914:	40021000 	.word	0x40021000
 8002918:	40013c00 	.word	0x40013c00

0800291c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
 8002928:	4613      	mov	r3, r2
 800292a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800292c:	787b      	ldrb	r3, [r7, #1]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002938:	e003      	b.n	8002942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	041a      	lsls	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	619a      	str	r2, [r3, #24]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e267      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d075      	beq.n	8002a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800296e:	4b88      	ldr	r3, [pc, #544]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b04      	cmp	r3, #4
 8002978:	d00c      	beq.n	8002994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297a:	4b85      	ldr	r3, [pc, #532]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002982:	2b08      	cmp	r3, #8
 8002984:	d112      	bne.n	80029ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002986:	4b82      	ldr	r3, [pc, #520]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002992:	d10b      	bne.n	80029ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	4b7e      	ldr	r3, [pc, #504]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d05b      	beq.n	8002a58 <HAL_RCC_OscConfig+0x108>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d157      	bne.n	8002a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e242      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d106      	bne.n	80029c4 <HAL_RCC_OscConfig+0x74>
 80029b6:	4b76      	ldr	r3, [pc, #472]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a75      	ldr	r2, [pc, #468]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xb0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x98>
 80029ce:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6f      	ldr	r2, [pc, #444]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b6d      	ldr	r3, [pc, #436]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6c      	ldr	r2, [pc, #432]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xb0>
 80029e8:	4b69      	ldr	r3, [pc, #420]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a68      	ldr	r2, [pc, #416]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b66      	ldr	r3, [pc, #408]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a65      	ldr	r2, [pc, #404]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff f8e4 	bl	8001bd4 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a10:	f7ff f8e0 	bl	8001bd4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e207      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b5b      	ldr	r3, [pc, #364]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xc0>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff f8d0 	bl	8001bd4 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff f8cc 	bl	8001bd4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1f3      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b51      	ldr	r3, [pc, #324]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0xe8>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a66:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7e:	4b44      	ldr	r3, [pc, #272]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x152>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1c7      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b3b      	ldr	r3, [pc, #236]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4937      	ldr	r1, [pc, #220]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e03a      	b.n	8002b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <HAL_RCC_OscConfig+0x244>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7ff f885 	bl	8001bd4 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ace:	f7ff f881 	bl	8001bd4 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1a8      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4925      	ldr	r1, [pc, #148]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_OscConfig+0x244>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7ff f864 	bl	8001bd4 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b10:	f7ff f860 	bl	8001bd4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e187      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d036      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d016      	beq.n	8002b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_RCC_OscConfig+0x248>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b48:	f7ff f844 	bl	8001bd4 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b50:	f7ff f840 	bl	8001bd4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e167      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_OscConfig+0x240>)
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x200>
 8002b6e:	e01b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_OscConfig+0x248>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7ff f82d 	bl	8001bd4 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7c:	e00e      	b.n	8002b9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7e:	f7ff f829 	bl	8001bd4 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d907      	bls.n	8002b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e150      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
 8002b90:	40023800 	.word	0x40023800
 8002b94:	42470000 	.word	0x42470000
 8002b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	4b88      	ldr	r3, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ea      	bne.n	8002b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8097 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bba:	4b81      	ldr	r3, [pc, #516]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10f      	bne.n	8002be6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	4b7d      	ldr	r3, [pc, #500]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	4a7c      	ldr	r2, [pc, #496]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd6:	4b7a      	ldr	r3, [pc, #488]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4b77      	ldr	r3, [pc, #476]	; (8002dc4 <HAL_RCC_OscConfig+0x474>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d118      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf2:	4b74      	ldr	r3, [pc, #464]	; (8002dc4 <HAL_RCC_OscConfig+0x474>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a73      	ldr	r2, [pc, #460]	; (8002dc4 <HAL_RCC_OscConfig+0x474>)
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfe:	f7fe ffe9 	bl	8001bd4 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c06:	f7fe ffe5 	bl	8001bd4 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e10c      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b6a      	ldr	r3, [pc, #424]	; (8002dc4 <HAL_RCC_OscConfig+0x474>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x2ea>
 8002c2c:	4b64      	ldr	r3, [pc, #400]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a63      	ldr	r2, [pc, #396]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70
 8002c38:	e01c      	b.n	8002c74 <HAL_RCC_OscConfig+0x324>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b05      	cmp	r3, #5
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x30c>
 8002c42:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a5e      	ldr	r2, [pc, #376]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4e:	4b5c      	ldr	r3, [pc, #368]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	4a5b      	ldr	r2, [pc, #364]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0x324>
 8002c5c:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
 8002c68:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a54      	ldr	r2, [pc, #336]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	f023 0304 	bic.w	r3, r3, #4
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d015      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe ffaa 	bl	8001bd4 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe ffa6 	bl	8001bd4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e0cb      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9a:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0ee      	beq.n	8002c84 <HAL_RCC_OscConfig+0x334>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca8:	f7fe ff94 	bl	8001bd4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7fe ff90 	bl	8001bd4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e0b5      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1ee      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d105      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd8:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	4a38      	ldr	r2, [pc, #224]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80a1 	beq.w	8002e30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cee:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d05c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d141      	bne.n	8002d86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_RCC_OscConfig+0x478>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe ff64 	bl	8001bd4 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe ff60 	bl	8001bd4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e087      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	019b      	lsls	r3, r3, #6
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	3b01      	subs	r3, #1
 8002d48:	041b      	lsls	r3, r3, #16
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	491b      	ldr	r1, [pc, #108]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x478>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe ff39 	bl	8001bd4 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe ff35 	bl	8001bd4 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e05c      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x416>
 8002d84:	e054      	b.n	8002e30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_RCC_OscConfig+0x478>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe ff22 	bl	8001bd4 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe ff1e 	bl	8001bd4 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e045      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_OscConfig+0x470>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x444>
 8002db2:	e03d      	b.n	8002e30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e038      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x4ec>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d028      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d121      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d11a      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d111      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	3b01      	subs	r3, #1
 8002e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800

08002e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0cc      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d90c      	bls.n	8002e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0b8      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d020      	beq.n	8002eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e94:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a58      	ldr	r2, [pc, #352]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a52      	ldr	r2, [pc, #328]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb8:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	494d      	ldr	r1, [pc, #308]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d044      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d119      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e07f      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efe:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06f      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e067      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1e:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4934      	ldr	r1, [pc, #208]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f30:	f7fe fe50 	bl	8001bd4 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f7fe fe4c 	bl	8001bd4 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e04f      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 020c 	and.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d1eb      	bne.n	8002f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f60:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d20c      	bcs.n	8002f88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e032      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4916      	ldr	r1, [pc, #88]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	490e      	ldr	r1, [pc, #56]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fc6:	f000 f821 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	490a      	ldr	r1, [pc, #40]	; (8003000 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	5ccb      	ldrb	r3, [r1, r3]
 8002fda:	fa22 f303 	lsr.w	r3, r2, r3
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fdb0 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023c00 	.word	0x40023c00
 8002ffc:	40023800 	.word	0x40023800
 8003000:	080161fc 	.word	0x080161fc
 8003004:	20000004 	.word	0x20000004
 8003008:	20000008 	.word	0x20000008

0800300c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800300c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003010:	b090      	sub	sp, #64	; 0x40
 8003012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	637b      	str	r3, [r7, #52]	; 0x34
 8003018:	2300      	movs	r3, #0
 800301a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301c:	2300      	movs	r3, #0
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003024:	4b59      	ldr	r3, [pc, #356]	; (800318c <HAL_RCC_GetSysClockFreq+0x180>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b08      	cmp	r3, #8
 800302e:	d00d      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x40>
 8003030:	2b08      	cmp	r3, #8
 8003032:	f200 80a1 	bhi.w	8003178 <HAL_RCC_GetSysClockFreq+0x16c>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x34>
 800303a:	2b04      	cmp	r3, #4
 800303c:	d003      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x3a>
 800303e:	e09b      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003040:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_GetSysClockFreq+0x184>)
 8003042:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003044:	e09b      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003046:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_GetSysClockFreq+0x188>)
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800304a:	e098      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800304c:	4b4f      	ldr	r3, [pc, #316]	; (800318c <HAL_RCC_GetSysClockFreq+0x180>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003056:	4b4d      	ldr	r3, [pc, #308]	; (800318c <HAL_RCC_GetSysClockFreq+0x180>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d028      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003062:	4b4a      	ldr	r3, [pc, #296]	; (800318c <HAL_RCC_GetSysClockFreq+0x180>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	099b      	lsrs	r3, r3, #6
 8003068:	2200      	movs	r2, #0
 800306a:	623b      	str	r3, [r7, #32]
 800306c:	627a      	str	r2, [r7, #36]	; 0x24
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003074:	2100      	movs	r1, #0
 8003076:	4b47      	ldr	r3, [pc, #284]	; (8003194 <HAL_RCC_GetSysClockFreq+0x188>)
 8003078:	fb03 f201 	mul.w	r2, r3, r1
 800307c:	2300      	movs	r3, #0
 800307e:	fb00 f303 	mul.w	r3, r0, r3
 8003082:	4413      	add	r3, r2
 8003084:	4a43      	ldr	r2, [pc, #268]	; (8003194 <HAL_RCC_GetSysClockFreq+0x188>)
 8003086:	fba0 1202 	umull	r1, r2, r0, r2
 800308a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800308c:	460a      	mov	r2, r1
 800308e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003092:	4413      	add	r3, r2
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	2200      	movs	r2, #0
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	61fa      	str	r2, [r7, #28]
 800309e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030a6:	f7fd f9db 	bl	8000460 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4613      	mov	r3, r2
 80030b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b2:	e053      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <HAL_RCC_GetSysClockFreq+0x180>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	2200      	movs	r2, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	617a      	str	r2, [r7, #20]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030c6:	f04f 0b00 	mov.w	fp, #0
 80030ca:	4652      	mov	r2, sl
 80030cc:	465b      	mov	r3, fp
 80030ce:	f04f 0000 	mov.w	r0, #0
 80030d2:	f04f 0100 	mov.w	r1, #0
 80030d6:	0159      	lsls	r1, r3, #5
 80030d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030dc:	0150      	lsls	r0, r2, #5
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	ebb2 080a 	subs.w	r8, r2, sl
 80030e6:	eb63 090b 	sbc.w	r9, r3, fp
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030fe:	ebb2 0408 	subs.w	r4, r2, r8
 8003102:	eb63 0509 	sbc.w	r5, r3, r9
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	00eb      	lsls	r3, r5, #3
 8003110:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003114:	00e2      	lsls	r2, r4, #3
 8003116:	4614      	mov	r4, r2
 8003118:	461d      	mov	r5, r3
 800311a:	eb14 030a 	adds.w	r3, r4, sl
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	eb45 030b 	adc.w	r3, r5, fp
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003132:	4629      	mov	r1, r5
 8003134:	028b      	lsls	r3, r1, #10
 8003136:	4621      	mov	r1, r4
 8003138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800313c:	4621      	mov	r1, r4
 800313e:	028a      	lsls	r2, r1, #10
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003146:	2200      	movs	r2, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	60fa      	str	r2, [r7, #12]
 800314c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003150:	f7fd f986 	bl	8000460 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4613      	mov	r3, r2
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_GetSysClockFreq+0x180>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800316c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003176:	e002      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetSysClockFreq+0x184>)
 800317a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800317c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003180:	4618      	mov	r0, r3
 8003182:	3740      	adds	r7, #64	; 0x40
 8003184:	46bd      	mov	sp, r7
 8003186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	00f42400 	.word	0x00f42400
 8003194:	017d7840 	.word	0x017d7840

08003198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_RCC_GetHCLKFreq+0x14>)
 800319e:	681b      	ldr	r3, [r3, #0]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000004 	.word	0x20000004

080031b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031b4:	f7ff fff0 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0a9b      	lsrs	r3, r3, #10
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	0801620c 	.word	0x0801620c

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031dc:	f7ff ffdc 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0b5b      	lsrs	r3, r3, #13
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	0801620c 	.word	0x0801620c

08003200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e041      	b.n	8003296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fe f96a 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f000 fa10 	bl	8003664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e041      	b.n	8003334 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f839 	bl	800333c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f000 f9c1 	bl	8003664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0ae      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	f200 809f 	bhi.w	80034bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033b9 	.word	0x080033b9
 8003388:	080034bd 	.word	0x080034bd
 800338c:	080034bd 	.word	0x080034bd
 8003390:	080034bd 	.word	0x080034bd
 8003394:	080033f9 	.word	0x080033f9
 8003398:	080034bd 	.word	0x080034bd
 800339c:	080034bd 	.word	0x080034bd
 80033a0:	080034bd 	.word	0x080034bd
 80033a4:	0800343b 	.word	0x0800343b
 80033a8:	080034bd 	.word	0x080034bd
 80033ac:	080034bd 	.word	0x080034bd
 80033b0:	080034bd 	.word	0x080034bd
 80033b4:	0800347b 	.word	0x0800347b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f9dc 	bl	800377c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0204 	bic.w	r2, r2, #4
 80033e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6999      	ldr	r1, [r3, #24]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	619a      	str	r2, [r3, #24]
      break;
 80033f6:	e064      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fa22 	bl	8003848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6999      	ldr	r1, [r3, #24]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	021a      	lsls	r2, r3, #8
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	619a      	str	r2, [r3, #24]
      break;
 8003438:	e043      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fa6d 	bl	8003920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0208 	orr.w	r2, r2, #8
 8003454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0204 	bic.w	r2, r2, #4
 8003464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69d9      	ldr	r1, [r3, #28]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	61da      	str	r2, [r3, #28]
      break;
 8003478:	e023      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fab7 	bl	80039f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69da      	ldr	r2, [r3, #28]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69d9      	ldr	r1, [r3, #28]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	021a      	lsls	r2, r3, #8
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	61da      	str	r2, [r3, #28]
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	75fb      	strb	r3, [r7, #23]
      break;
 80034c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIM_ConfigClockSource+0x1c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e0b4      	b.n	800365a <HAL_TIM_ConfigClockSource+0x186>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800350e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d03e      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0xd4>
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	f200 8087 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003536:	f000 8086 	beq.w	8003646 <HAL_TIM_ConfigClockSource+0x172>
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d87f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b70      	cmp	r3, #112	; 0x70
 8003542:	d01a      	beq.n	800357a <HAL_TIM_ConfigClockSource+0xa6>
 8003544:	2b70      	cmp	r3, #112	; 0x70
 8003546:	d87b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b60      	cmp	r3, #96	; 0x60
 800354a:	d050      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x11a>
 800354c:	2b60      	cmp	r3, #96	; 0x60
 800354e:	d877      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b50      	cmp	r3, #80	; 0x50
 8003552:	d03c      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0xfa>
 8003554:	2b50      	cmp	r3, #80	; 0x50
 8003556:	d873      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d058      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x13a>
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d86f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003560:	2b30      	cmp	r3, #48	; 0x30
 8003562:	d064      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d86b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003568:	2b20      	cmp	r3, #32
 800356a:	d060      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d867      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d05c      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 8003574:	2b10      	cmp	r3, #16
 8003576:	d05a      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 8003578:	e062      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800358a:	f000 fafd 	bl	8003b88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800359c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	609a      	str	r2, [r3, #8]
      break;
 80035a6:	e04f      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035b8:	f000 fae6 	bl	8003b88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ca:	609a      	str	r2, [r3, #8]
      break;
 80035cc:	e03c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fa5a 	bl	8003a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2150      	movs	r1, #80	; 0x50
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fab3 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e02c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 fa79 	bl	8003af2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2160      	movs	r1, #96	; 0x60
 8003606:	4618      	mov	r0, r3
 8003608:	f000 faa3 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 800360c:	e01c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361a:	461a      	mov	r2, r3
 800361c:	f000 fa3a 	bl	8003a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fa93 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 800362c:	e00c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f000 fa8a 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 800363e:	e003      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      break;
 8003644:	e000      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3a      	ldr	r2, [pc, #232]	; (8003760 <TIM_Base_SetConfig+0xfc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00f      	beq.n	800369c <TIM_Base_SetConfig+0x38>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d00b      	beq.n	800369c <TIM_Base_SetConfig+0x38>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a37      	ldr	r2, [pc, #220]	; (8003764 <TIM_Base_SetConfig+0x100>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a36      	ldr	r2, [pc, #216]	; (8003768 <TIM_Base_SetConfig+0x104>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x38>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a35      	ldr	r2, [pc, #212]	; (800376c <TIM_Base_SetConfig+0x108>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <TIM_Base_SetConfig+0xfc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01b      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d017      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a28      	ldr	r2, [pc, #160]	; (8003764 <TIM_Base_SetConfig+0x100>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a27      	ldr	r2, [pc, #156]	; (8003768 <TIM_Base_SetConfig+0x104>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00f      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a26      	ldr	r2, [pc, #152]	; (800376c <TIM_Base_SetConfig+0x108>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00b      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a25      	ldr	r2, [pc, #148]	; (8003770 <TIM_Base_SetConfig+0x10c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a24      	ldr	r2, [pc, #144]	; (8003774 <TIM_Base_SetConfig+0x110>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a23      	ldr	r2, [pc, #140]	; (8003778 <TIM_Base_SetConfig+0x114>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d108      	bne.n	8003700 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <TIM_Base_SetConfig+0xfc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d103      	bne.n	8003734 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b01      	cmp	r3, #1
 8003744:	d105      	bne.n	8003752 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	611a      	str	r2, [r3, #16]
  }
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800

0800377c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f023 0201 	bic.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f023 0302 	bic.w	r3, r3, #2
 80037c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <TIM_OC1_SetConfig+0xc8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d10c      	bne.n	80037f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 0308 	bic.w	r3, r3, #8
 80037de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a13      	ldr	r2, [pc, #76]	; (8003844 <TIM_OC1_SetConfig+0xc8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d111      	bne.n	800381e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	621a      	str	r2, [r3, #32]
}
 8003838:	bf00      	nop
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40010000 	.word	0x40010000

08003848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f023 0210 	bic.w	r2, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f023 0320 	bic.w	r3, r3, #32
 8003892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <TIM_OC2_SetConfig+0xd4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d10d      	bne.n	80038c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a15      	ldr	r2, [pc, #84]	; (800391c <TIM_OC2_SetConfig+0xd4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d113      	bne.n	80038f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40010000 	.word	0x40010000

08003920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <TIM_OC3_SetConfig+0xd0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10d      	bne.n	800399a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a14      	ldr	r2, [pc, #80]	; (80039f0 <TIM_OC3_SetConfig+0xd0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d113      	bne.n	80039ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	621a      	str	r2, [r3, #32]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	40010000 	.word	0x40010000

080039f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	031b      	lsls	r3, r3, #12
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <TIM_OC4_SetConfig+0x9c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d109      	bne.n	8003a68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000

08003a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f023 0201 	bic.w	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 030a 	bic.w	r3, r3, #10
 8003ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 0210 	bic.w	r2, r3, #16
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	031b      	lsls	r3, r3, #12
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	621a      	str	r2, [r3, #32]
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f043 0307 	orr.w	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e050      	b.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d013      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d10c      	bne.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40000400 	.word	0x40000400
 8003c98:	40000800 	.word	0x40000800
 8003c9c:	40000c00 	.word	0x40000c00
 8003ca0:	40014000 	.word	0x40014000

08003ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e042      	b.n	8003d3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fc74 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2224      	movs	r2, #36	; 0x24
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 ffc9 	bl	8004c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08c      	sub	sp, #48	; 0x30
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d156      	bne.n	8003e0c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_UART_Transmit_DMA+0x26>
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e04f      	b.n	8003e0e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	88fa      	ldrh	r2, [r7, #6]
 8003d78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2221      	movs	r2, #33	; 0x21
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <HAL_UART_Transmit_DMA+0xd4>)
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4a20      	ldr	r2, [pc, #128]	; (8003e1c <HAL_UART_Transmit_DMA+0xd8>)
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	4a1f      	ldr	r2, [pc, #124]	; (8003e20 <HAL_UART_Transmit_DMA+0xdc>)
 8003da4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	2200      	movs	r2, #0
 8003dac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	f7fe f8d1 	bl	8001f6c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	617b      	str	r3, [r7, #20]
   return(result);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df4:	627a      	str	r2, [r7, #36]	; 0x24
 8003df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6a39      	ldr	r1, [r7, #32]
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e5      	bne.n	8003dd4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3730      	adds	r7, #48	; 0x30
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	0800450d 	.word	0x0800450d
 8003e1c:	080045a7 	.word	0x080045a7
 8003e20:	0800472b 	.word	0x0800472b

08003e24 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d112      	bne.n	8003e64 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_UART_Receive_DMA+0x26>
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e00b      	b.n	8003e66 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fcb0 	bl	80047c0 <UART_Start_Receive_DMA>
 8003e60:	4603      	mov	r3, r0
 8003e62:	e000      	b.n	8003e66 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b090      	sub	sp, #64	; 0x40
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e84:	2b80      	cmp	r3, #128	; 0x80
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b21      	cmp	r3, #33	; 0x21
 8003e9a:	d128      	bne.n	8003eee <HAL_UART_DMAStop+0x80>
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d025      	beq.n	8003eee <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3314      	adds	r3, #20
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ec2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e5      	bne.n	8003ea2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe f89a 	bl	800201c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fd03 	bl	80048f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b22      	cmp	r3, #34	; 0x22
 8003f0e:	d128      	bne.n	8003f62 <HAL_UART_DMAStop+0xf4>
 8003f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d025      	beq.n	8003f62 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f36:	61fa      	str	r2, [r7, #28]
 8003f38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	69b9      	ldr	r1, [r7, #24]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	617b      	str	r3, [r7, #20]
   return(result);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe f860 	bl	800201c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fcf1 	bl	8004944 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3740      	adds	r7, #64	; 0x40
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b0ba      	sub	sp, #232	; 0xe8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x66>
 8003fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fd99 	bl	8004b02 <UART_Receive_IT>
      return;
 8003fd0:	e25b      	b.n	800448a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80de 	beq.w	8004198 <HAL_UART_IRQHandler+0x22c>
 8003fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80d1 	beq.w	8004198 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_UART_IRQHandler+0xae>
 8004002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_UART_IRQHandler+0xd2>
 8004026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f043 0202 	orr.w	r2, r3, #2
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_UART_IRQHandler+0xf6>
 800404a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	f043 0204 	orr.w	r2, r3, #4
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d011      	beq.n	8004092 <HAL_UART_IRQHandler+0x126>
 800406e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800407a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	f043 0208 	orr.w	r2, r3, #8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 81f2 	beq.w	8004480 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_UART_IRQHandler+0x14e>
 80040a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fd24 	bl	8004b02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_UART_IRQHandler+0x17a>
 80040de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d04f      	beq.n	8004186 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fc2c 	bl	8004944 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d141      	bne.n	800417e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3314      	adds	r3, #20
 8004100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800412a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800413e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1d9      	bne.n	80040fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d013      	beq.n	8004176 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	4a7e      	ldr	r2, [pc, #504]	; (800434c <HAL_UART_IRQHandler+0x3e0>)
 8004154:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	4618      	mov	r0, r3
 800415c:	f7fd ffce 	bl	80020fc <HAL_DMA_Abort_IT>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004170:	4610      	mov	r0, r2
 8004172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	e00e      	b.n	8004194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9b2 	bl	80044e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e00a      	b.n	8004194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9ae 	bl	80044e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e006      	b.n	8004194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9aa 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004192:	e175      	b.n	8004480 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	bf00      	nop
    return;
 8004196:	e173      	b.n	8004480 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	2b01      	cmp	r3, #1
 800419e:	f040 814f 	bne.w	8004440 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8148 	beq.w	8004440 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8141 	beq.w	8004440 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	f040 80b6 	bne.w	8004350 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8145 	beq.w	8004484 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004202:	429a      	cmp	r2, r3
 8004204:	f080 813e 	bcs.w	8004484 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800420e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421a:	f000 8088 	beq.w	800432e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	330c      	adds	r3, #12
 8004224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800423c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800424a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800424e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004256:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1d9      	bne.n	800421e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3314      	adds	r3, #20
 8004270:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800427a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3314      	adds	r3, #20
 800428a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800428e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004292:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004296:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e1      	bne.n	800426a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3314      	adds	r3, #20
 80042c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e3      	bne.n	80042a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fe:	f023 0310 	bic.w	r3, r3, #16
 8004302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004310:	65ba      	str	r2, [r7, #88]	; 0x58
 8004312:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e3      	bne.n	80042ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd fe77 	bl	800201c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800433c:	b29b      	uxth	r3, r3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	b29b      	uxth	r3, r3
 8004342:	4619      	mov	r1, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f8d5 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800434a:	e09b      	b.n	8004484 <HAL_UART_IRQHandler+0x518>
 800434c:	08004a0b 	.word	0x08004a0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004358:	b29b      	uxth	r3, r3
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 808e 	beq.w	8004488 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800436c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8089 	beq.w	8004488 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800438c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	330c      	adds	r3, #12
 8004396:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800439a:	647a      	str	r2, [r7, #68]	; 0x44
 800439c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e3      	bne.n	8004376 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3314      	adds	r3, #20
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	623b      	str	r3, [r7, #32]
   return(result);
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3314      	adds	r3, #20
 80043ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043d2:	633a      	str	r2, [r7, #48]	; 0x30
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e3      	bne.n	80043ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	60fb      	str	r3, [r7, #12]
   return(result);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0310 	bic.w	r3, r3, #16
 800440a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004418:	61fa      	str	r2, [r7, #28]
 800441a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	617b      	str	r3, [r7, #20]
   return(result);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e3      	bne.n	80043f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004432:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f85b 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800443e:	e023      	b.n	8004488 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_UART_IRQHandler+0x4f4>
 800444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 faea 	bl	8004a32 <UART_Transmit_IT>
    return;
 800445e:	e014      	b.n	800448a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00e      	beq.n	800448a <HAL_UART_IRQHandler+0x51e>
 800446c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fb2a 	bl	8004ad2 <UART_EndTransmit_IT>
    return;
 800447e:	e004      	b.n	800448a <HAL_UART_IRQHandler+0x51e>
    return;
 8004480:	bf00      	nop
 8004482:	e002      	b.n	800448a <HAL_UART_IRQHandler+0x51e>
      return;
 8004484:	bf00      	nop
 8004486:	e000      	b.n	800448a <HAL_UART_IRQHandler+0x51e>
      return;
 8004488:	bf00      	nop
  }
}
 800448a:	37e8      	adds	r7, #232	; 0xe8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b090      	sub	sp, #64	; 0x40
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d137      	bne.n	8004598 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452a:	2200      	movs	r2, #0
 800452c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3314      	adds	r3, #20
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	623b      	str	r3, [r7, #32]
   return(result);
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
 8004546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800454e:	633a      	str	r2, [r7, #48]	; 0x30
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e5      	bne.n	800452e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	60fb      	str	r3, [r7, #12]
   return(result);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
 800457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004582:	61fa      	str	r2, [r7, #28]
 8004584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	617b      	str	r3, [r7, #20]
   return(result);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e5      	bne.n	8004562 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004596:	e002      	b.n	800459e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004598:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800459a:	f7ff ff79 	bl	8004490 <HAL_UART_TxCpltCallback>
}
 800459e:	bf00      	nop
 80045a0:	3740      	adds	r7, #64	; 0x40
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ff75 	bl	80044a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b09c      	sub	sp, #112	; 0x70
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d172      	bne.n	80046c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80045de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e0:	2200      	movs	r2, #0
 80045e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80045fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004604:	65ba      	str	r2, [r7, #88]	; 0x58
 8004606:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800460a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	667b      	str	r3, [r7, #100]	; 0x64
 8004630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004638:	647a      	str	r2, [r7, #68]	; 0x44
 800463a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800463e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800464c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3314      	adds	r3, #20
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	623b      	str	r3, [r7, #32]
   return(result);
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004662:	663b      	str	r3, [r7, #96]	; 0x60
 8004664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800466c:	633a      	str	r2, [r7, #48]	; 0x30
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	2b01      	cmp	r3, #1
 800468e:	d119      	bne.n	80046c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0310 	bic.w	r3, r3, #16
 80046a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046b0:	61fa      	str	r2, [r7, #28]
 80046b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	69b9      	ldr	r1, [r7, #24]
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	617b      	str	r3, [r7, #20]
   return(result);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e5      	bne.n	8004690 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	2200      	movs	r2, #0
 80046c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d106      	bne.n	80046e0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046d6:	4619      	mov	r1, r3
 80046d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80046da:	f7ff ff0b 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046de:	e002      	b.n	80046e6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80046e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80046e2:	f7ff fee9 	bl	80044b8 <HAL_UART_RxCpltCallback>
}
 80046e6:	bf00      	nop
 80046e8:	3770      	adds	r7, #112	; 0x70
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	2b01      	cmp	r3, #1
 8004708:	d108      	bne.n	800471c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	4619      	mov	r1, r3
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff feed 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800471a:	e002      	b.n	8004722 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff fed5 	bl	80044cc <HAL_UART_RxHalfCpltCallback>
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b80      	cmp	r3, #128	; 0x80
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b21      	cmp	r3, #33	; 0x21
 800475c:	d108      	bne.n	8004770 <UART_DMAError+0x46>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2200      	movs	r2, #0
 8004768:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800476a:	68b8      	ldr	r0, [r7, #8]
 800476c:	f000 f8c2 	bl	80048f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	bf0c      	ite	eq
 800477e:	2301      	moveq	r3, #1
 8004780:	2300      	movne	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b22      	cmp	r3, #34	; 0x22
 8004790:	d108      	bne.n	80047a4 <UART_DMAError+0x7a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800479e:	68b8      	ldr	r0, [r7, #8]
 80047a0:	f000 f8d0 	bl	8004944 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	f043 0210 	orr.w	r2, r3, #16
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047b0:	68b8      	ldr	r0, [r7, #8]
 80047b2:	f7ff fe95 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b098      	sub	sp, #96	; 0x60
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2222      	movs	r2, #34	; 0x22
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	4a3e      	ldr	r2, [pc, #248]	; (80048e8 <UART_Start_Receive_DMA+0x128>)
 80047ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	4a3d      	ldr	r2, [pc, #244]	; (80048ec <UART_Start_Receive_DMA+0x12c>)
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fc:	4a3c      	ldr	r2, [pc, #240]	; (80048f0 <UART_Start_Receive_DMA+0x130>)
 80047fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	2200      	movs	r2, #0
 8004806:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004808:	f107 0308 	add.w	r3, r7, #8
 800480c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3304      	adds	r3, #4
 8004818:	4619      	mov	r1, r3
 800481a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	f7fd fba4 	bl	8001f6c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d019      	beq.n	8004876 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004858:	65bb      	str	r3, [r7, #88]	; 0x58
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004862:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004864:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3314      	adds	r3, #20
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	657b      	str	r3, [r7, #84]	; 0x54
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004896:	63ba      	str	r2, [r7, #56]	; 0x38
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800489c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3314      	adds	r3, #20
 80048b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	617b      	str	r3, [r7, #20]
   return(result);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c0:	653b      	str	r3, [r7, #80]	; 0x50
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3314      	adds	r3, #20
 80048c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048ca:	627a      	str	r2, [r7, #36]	; 0x24
 80048cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6a39      	ldr	r1, [r7, #32]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e5      	bne.n	80048aa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3760      	adds	r7, #96	; 0x60
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	080045c3 	.word	0x080045c3
 80048ec:	080046ef 	.word	0x080046ef
 80048f0:	0800472b 	.word	0x0800472b

080048f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	; 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	60bb      	str	r3, [r7, #8]
   return(result);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	61ba      	str	r2, [r7, #24]
 800491e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	6979      	ldr	r1, [r7, #20]
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	613b      	str	r3, [r7, #16]
   return(result);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e5      	bne.n	80048fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004938:	bf00      	nop
 800493a:	3724      	adds	r7, #36	; 0x24
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b095      	sub	sp, #84	; 0x54
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800496c:	643a      	str	r2, [r7, #64]	; 0x40
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3314      	adds	r3, #20
 800499e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e5      	bne.n	8004980 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d119      	bne.n	80049f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f023 0310 	bic.w	r3, r3, #16
 80049d2:	647b      	str	r3, [r7, #68]	; 0x44
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049dc:	61ba      	str	r2, [r7, #24]
 80049de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6979      	ldr	r1, [r7, #20]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e5      	bne.n	80049bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049fe:	bf00      	nop
 8004a00:	3754      	adds	r7, #84	; 0x54
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff fd5b 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b21      	cmp	r3, #33	; 0x21
 8004a44:	d13e      	bne.n	8004ac4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d114      	bne.n	8004a7a <UART_Transmit_IT+0x48>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d110      	bne.n	8004a7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	621a      	str	r2, [r3, #32]
 8004a78:	e008      	b.n	8004a8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	1c59      	adds	r1, r3, #1
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6211      	str	r1, [r2, #32]
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10f      	bne.n	8004ac0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004abe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fccc 	bl	8004490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b08c      	sub	sp, #48	; 0x30
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b22      	cmp	r3, #34	; 0x22
 8004b14:	f040 80ae 	bne.w	8004c74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b20:	d117      	bne.n	8004b52 <UART_Receive_IT+0x50>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d113      	bne.n	8004b52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	1c9a      	adds	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b50:	e026      	b.n	8004ba0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	d007      	beq.n	8004b76 <UART_Receive_IT+0x74>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <UART_Receive_IT+0x82>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e008      	b.n	8004b96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4619      	mov	r1, r3
 8004bae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d15d      	bne.n	8004c70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0220 	bic.w	r2, r2, #32
 8004bc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d135      	bne.n	8004c66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f023 0310 	bic.w	r3, r3, #16
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c20:	623a      	str	r2, [r7, #32]
 8004c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	69f9      	ldr	r1, [r7, #28]
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e5      	bne.n	8004c00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d10a      	bne.n	8004c58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fc48 	bl	80044f4 <HAL_UARTEx_RxEventCallback>
 8004c64:	e002      	b.n	8004c6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fc26 	bl	80044b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e002      	b.n	8004c76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e000      	b.n	8004c76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
  }
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3730      	adds	r7, #48	; 0x30
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c84:	b0c0      	sub	sp, #256	; 0x100
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	68d9      	ldr	r1, [r3, #12]
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	ea40 0301 	orr.w	r3, r0, r1
 8004ca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cd8:	f021 010c 	bic.w	r1, r1, #12
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	6999      	ldr	r1, [r3, #24]
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	ea40 0301 	orr.w	r3, r0, r1
 8004d06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b8f      	ldr	r3, [pc, #572]	; (8004f4c <UART_SetConfig+0x2cc>)
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d005      	beq.n	8004d20 <UART_SetConfig+0xa0>
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b8d      	ldr	r3, [pc, #564]	; (8004f50 <UART_SetConfig+0x2d0>)
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d104      	bne.n	8004d2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d20:	f7fe fa5a 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8004d24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d28:	e003      	b.n	8004d32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d2a:	f7fe fa41 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8004d2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3c:	f040 810c 	bne.w	8004f58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d44:	2200      	movs	r2, #0
 8004d46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d52:	4622      	mov	r2, r4
 8004d54:	462b      	mov	r3, r5
 8004d56:	1891      	adds	r1, r2, r2
 8004d58:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d5a:	415b      	adcs	r3, r3
 8004d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d62:	4621      	mov	r1, r4
 8004d64:	eb12 0801 	adds.w	r8, r2, r1
 8004d68:	4629      	mov	r1, r5
 8004d6a:	eb43 0901 	adc.w	r9, r3, r1
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d82:	4690      	mov	r8, r2
 8004d84:	4699      	mov	r9, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	eb18 0303 	adds.w	r3, r8, r3
 8004d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d90:	462b      	mov	r3, r5
 8004d92:	eb49 0303 	adc.w	r3, r9, r3
 8004d96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004da6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004daa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dae:	460b      	mov	r3, r1
 8004db0:	18db      	adds	r3, r3, r3
 8004db2:	653b      	str	r3, [r7, #80]	; 0x50
 8004db4:	4613      	mov	r3, r2
 8004db6:	eb42 0303 	adc.w	r3, r2, r3
 8004dba:	657b      	str	r3, [r7, #84]	; 0x54
 8004dbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dc4:	f7fb fb4c 	bl	8000460 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4b61      	ldr	r3, [pc, #388]	; (8004f54 <UART_SetConfig+0x2d4>)
 8004dce:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	011c      	lsls	r4, r3, #4
 8004dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004de0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004de4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004de8:	4642      	mov	r2, r8
 8004dea:	464b      	mov	r3, r9
 8004dec:	1891      	adds	r1, r2, r2
 8004dee:	64b9      	str	r1, [r7, #72]	; 0x48
 8004df0:	415b      	adcs	r3, r3
 8004df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004df8:	4641      	mov	r1, r8
 8004dfa:	eb12 0a01 	adds.w	sl, r2, r1
 8004dfe:	4649      	mov	r1, r9
 8004e00:	eb43 0b01 	adc.w	fp, r3, r1
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e18:	4692      	mov	sl, r2
 8004e1a:	469b      	mov	fp, r3
 8004e1c:	4643      	mov	r3, r8
 8004e1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e26:	464b      	mov	r3, r9
 8004e28:	eb4b 0303 	adc.w	r3, fp, r3
 8004e2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e44:	460b      	mov	r3, r1
 8004e46:	18db      	adds	r3, r3, r3
 8004e48:	643b      	str	r3, [r7, #64]	; 0x40
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	647b      	str	r3, [r7, #68]	; 0x44
 8004e52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e5a:	f7fb fb01 	bl	8000460 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <UART_SetConfig+0x2d4>)
 8004e66:	fba3 2301 	umull	r2, r3, r3, r1
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2264      	movs	r2, #100	; 0x64
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
 8004e72:	1acb      	subs	r3, r1, r3
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e7a:	4b36      	ldr	r3, [pc, #216]	; (8004f54 <UART_SetConfig+0x2d4>)
 8004e7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e88:	441c      	add	r4, r3
 8004e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	1891      	adds	r1, r2, r2
 8004ea2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ea4:	415b      	adcs	r3, r3
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004eac:	4641      	mov	r1, r8
 8004eae:	1851      	adds	r1, r2, r1
 8004eb0:	6339      	str	r1, [r7, #48]	; 0x30
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	414b      	adcs	r3, r1
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	00cb      	lsls	r3, r1, #3
 8004ec8:	4651      	mov	r1, sl
 8004eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ece:	4651      	mov	r1, sl
 8004ed0:	00ca      	lsls	r2, r1, #3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4642      	mov	r2, r8
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	eb42 0303 	adc.w	r3, r2, r3
 8004ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ef8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004efc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f00:	460b      	mov	r3, r1
 8004f02:	18db      	adds	r3, r3, r3
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f06:	4613      	mov	r3, r2
 8004f08:	eb42 0303 	adc.w	r3, r2, r3
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f16:	f7fb faa3 	bl	8000460 <__aeabi_uldivmod>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <UART_SetConfig+0x2d4>)
 8004f20:	fba3 1302 	umull	r1, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	2164      	movs	r1, #100	; 0x64
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	3332      	adds	r3, #50	; 0x32
 8004f32:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <UART_SetConfig+0x2d4>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	f003 0207 	and.w	r2, r3, #7
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4422      	add	r2, r4
 8004f46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f48:	e106      	b.n	8005158 <UART_SetConfig+0x4d8>
 8004f4a:	bf00      	nop
 8004f4c:	40011000 	.word	0x40011000
 8004f50:	40011400 	.word	0x40011400
 8004f54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f6a:	4642      	mov	r2, r8
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	1891      	adds	r1, r2, r2
 8004f70:	6239      	str	r1, [r7, #32]
 8004f72:	415b      	adcs	r3, r3
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
 8004f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	1854      	adds	r4, r2, r1
 8004f7e:	4649      	mov	r1, r9
 8004f80:	eb43 0501 	adc.w	r5, r3, r1
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	00eb      	lsls	r3, r5, #3
 8004f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f92:	00e2      	lsls	r2, r4, #3
 8004f94:	4614      	mov	r4, r2
 8004f96:	461d      	mov	r5, r3
 8004f98:	4643      	mov	r3, r8
 8004f9a:	18e3      	adds	r3, r4, r3
 8004f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	eb45 0303 	adc.w	r3, r5, r3
 8004fa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	008b      	lsls	r3, r1, #2
 8004fca:	4621      	mov	r1, r4
 8004fcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	008a      	lsls	r2, r1, #2
 8004fd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fd8:	f7fb fa42 	bl	8000460 <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4b60      	ldr	r3, [pc, #384]	; (8005164 <UART_SetConfig+0x4e4>)
 8004fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	011c      	lsls	r4, r3, #4
 8004fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ff4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ff8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	1891      	adds	r1, r2, r2
 8005002:	61b9      	str	r1, [r7, #24]
 8005004:	415b      	adcs	r3, r3
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800500c:	4641      	mov	r1, r8
 800500e:	1851      	adds	r1, r2, r1
 8005010:	6139      	str	r1, [r7, #16]
 8005012:	4649      	mov	r1, r9
 8005014:	414b      	adcs	r3, r1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005024:	4659      	mov	r1, fp
 8005026:	00cb      	lsls	r3, r1, #3
 8005028:	4651      	mov	r1, sl
 800502a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800502e:	4651      	mov	r1, sl
 8005030:	00ca      	lsls	r2, r1, #3
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	4603      	mov	r3, r0
 8005038:	4642      	mov	r2, r8
 800503a:	189b      	adds	r3, r3, r2
 800503c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005040:	464b      	mov	r3, r9
 8005042:	460a      	mov	r2, r1
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	67bb      	str	r3, [r7, #120]	; 0x78
 8005056:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005064:	4649      	mov	r1, r9
 8005066:	008b      	lsls	r3, r1, #2
 8005068:	4641      	mov	r1, r8
 800506a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800506e:	4641      	mov	r1, r8
 8005070:	008a      	lsls	r2, r1, #2
 8005072:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005076:	f7fb f9f3 	bl	8000460 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4611      	mov	r1, r2
 8005080:	4b38      	ldr	r3, [pc, #224]	; (8005164 <UART_SetConfig+0x4e4>)
 8005082:	fba3 2301 	umull	r2, r3, r3, r1
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	2264      	movs	r2, #100	; 0x64
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	1acb      	subs	r3, r1, r3
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	3332      	adds	r3, #50	; 0x32
 8005094:	4a33      	ldr	r2, [pc, #204]	; (8005164 <UART_SetConfig+0x4e4>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a0:	441c      	add	r4, r3
 80050a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a6:	2200      	movs	r2, #0
 80050a8:	673b      	str	r3, [r7, #112]	; 0x70
 80050aa:	677a      	str	r2, [r7, #116]	; 0x74
 80050ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050b0:	4642      	mov	r2, r8
 80050b2:	464b      	mov	r3, r9
 80050b4:	1891      	adds	r1, r2, r2
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	415b      	adcs	r3, r3
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050c0:	4641      	mov	r1, r8
 80050c2:	1851      	adds	r1, r2, r1
 80050c4:	6039      	str	r1, [r7, #0]
 80050c6:	4649      	mov	r1, r9
 80050c8:	414b      	adcs	r3, r1
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050d8:	4659      	mov	r1, fp
 80050da:	00cb      	lsls	r3, r1, #3
 80050dc:	4651      	mov	r1, sl
 80050de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050e2:	4651      	mov	r1, sl
 80050e4:	00ca      	lsls	r2, r1, #3
 80050e6:	4610      	mov	r0, r2
 80050e8:	4619      	mov	r1, r3
 80050ea:	4603      	mov	r3, r0
 80050ec:	4642      	mov	r2, r8
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050f2:	464b      	mov	r3, r9
 80050f4:	460a      	mov	r2, r1
 80050f6:	eb42 0303 	adc.w	r3, r2, r3
 80050fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	663b      	str	r3, [r7, #96]	; 0x60
 8005106:	667a      	str	r2, [r7, #100]	; 0x64
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005114:	4649      	mov	r1, r9
 8005116:	008b      	lsls	r3, r1, #2
 8005118:	4641      	mov	r1, r8
 800511a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800511e:	4641      	mov	r1, r8
 8005120:	008a      	lsls	r2, r1, #2
 8005122:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005126:	f7fb f99b 	bl	8000460 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <UART_SetConfig+0x4e4>)
 8005130:	fba3 1302 	umull	r1, r3, r3, r2
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	2164      	movs	r1, #100	; 0x64
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	3332      	adds	r3, #50	; 0x32
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <UART_SetConfig+0x4e4>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	f003 020f 	and.w	r2, r3, #15
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4422      	add	r2, r4
 8005156:	609a      	str	r2, [r3, #8]
}
 8005158:	bf00      	nop
 800515a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800515e:	46bd      	mov	sp, r7
 8005160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005164:	51eb851f 	.word	0x51eb851f

08005168 <__NVIC_SetPriority>:
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	6039      	str	r1, [r7, #0]
 8005172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005178:	2b00      	cmp	r3, #0
 800517a:	db0a      	blt.n	8005192 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	b2da      	uxtb	r2, r3
 8005180:	490c      	ldr	r1, [pc, #48]	; (80051b4 <__NVIC_SetPriority+0x4c>)
 8005182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005186:	0112      	lsls	r2, r2, #4
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	440b      	add	r3, r1
 800518c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005190:	e00a      	b.n	80051a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	4908      	ldr	r1, [pc, #32]	; (80051b8 <__NVIC_SetPriority+0x50>)
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	3b04      	subs	r3, #4
 80051a0:	0112      	lsls	r2, r2, #4
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	440b      	add	r3, r1
 80051a6:	761a      	strb	r2, [r3, #24]
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	e000e100 	.word	0xe000e100
 80051b8:	e000ed00 	.word	0xe000ed00

080051bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80051c0:	2100      	movs	r1, #0
 80051c2:	f06f 0004 	mvn.w	r0, #4
 80051c6:	f7ff ffcf 	bl	8005168 <__NVIC_SetPriority>
#endif
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d6:	f3ef 8305 	mrs	r3, IPSR
 80051da:	603b      	str	r3, [r7, #0]
  return(result);
 80051dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051e2:	f06f 0305 	mvn.w	r3, #5
 80051e6:	607b      	str	r3, [r7, #4]
 80051e8:	e00c      	b.n	8005204 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <osKernelInitialize+0x44>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d105      	bne.n	80051fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051f2:	4b08      	ldr	r3, [pc, #32]	; (8005214 <osKernelInitialize+0x44>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	e002      	b.n	8005204 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005202:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005204:	687b      	ldr	r3, [r7, #4]
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20004860 	.word	0x20004860

08005218 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800521e:	f3ef 8305 	mrs	r3, IPSR
 8005222:	603b      	str	r3, [r7, #0]
  return(result);
 8005224:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <osKernelStart+0x1a>
    stat = osErrorISR;
 800522a:	f06f 0305 	mvn.w	r3, #5
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	e010      	b.n	8005254 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <osKernelStart+0x48>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d109      	bne.n	800524e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800523a:	f7ff ffbf 	bl	80051bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <osKernelStart+0x48>)
 8005240:	2202      	movs	r2, #2
 8005242:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005244:	f001 f866 	bl	8006314 <vTaskStartScheduler>
      stat = osOK;
 8005248:	2300      	movs	r3, #0
 800524a:	607b      	str	r3, [r7, #4]
 800524c:	e002      	b.n	8005254 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800524e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005252:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005254:	687b      	ldr	r3, [r7, #4]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20004860 	.word	0x20004860

08005264 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b08e      	sub	sp, #56	; 0x38
 8005268:	af04      	add	r7, sp, #16
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005274:	f3ef 8305 	mrs	r3, IPSR
 8005278:	617b      	str	r3, [r7, #20]
  return(result);
 800527a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800527c:	2b00      	cmp	r3, #0
 800527e:	d17e      	bne.n	800537e <osThreadNew+0x11a>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d07b      	beq.n	800537e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800528a:	2318      	movs	r3, #24
 800528c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800528e:	2300      	movs	r3, #0
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005296:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d045      	beq.n	800532a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <osThreadNew+0x48>
        name = attr->name;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <osThreadNew+0x6e>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b38      	cmp	r3, #56	; 0x38
 80052c4:	d805      	bhi.n	80052d2 <osThreadNew+0x6e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <osThreadNew+0x72>
        return (NULL);
 80052d2:	2300      	movs	r3, #0
 80052d4:	e054      	b.n	8005380 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	089b      	lsrs	r3, r3, #2
 80052e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00e      	beq.n	800530c <osThreadNew+0xa8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	2b5b      	cmp	r3, #91	; 0x5b
 80052f4:	d90a      	bls.n	800530c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d006      	beq.n	800530c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <osThreadNew+0xa8>
        mem = 1;
 8005306:	2301      	movs	r3, #1
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	e010      	b.n	800532e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10c      	bne.n	800532e <osThreadNew+0xca>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d108      	bne.n	800532e <osThreadNew+0xca>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d104      	bne.n	800532e <osThreadNew+0xca>
          mem = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	e001      	b.n	800532e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d110      	bne.n	8005356 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800533c:	9202      	str	r2, [sp, #8]
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	6a3a      	ldr	r2, [r7, #32]
 8005348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fe0c 	bl	8005f68 <xTaskCreateStatic>
 8005350:	4603      	mov	r3, r0
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	e013      	b.n	800537e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d110      	bne.n	800537e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	b29a      	uxth	r2, r3
 8005360:	f107 0310 	add.w	r3, r7, #16
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fe57 	bl	8006022 <xTaskCreate>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d001      	beq.n	800537e <osThreadNew+0x11a>
            hTask = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800537e:	693b      	ldr	r3, [r7, #16]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3728      	adds	r7, #40	; 0x28
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005390:	f3ef 8305 	mrs	r3, IPSR
 8005394:	60bb      	str	r3, [r7, #8]
  return(result);
 8005396:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <osDelay+0x1c>
    stat = osErrorISR;
 800539c:	f06f 0305 	mvn.w	r3, #5
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e007      	b.n	80053b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 ff7c 	bl	80062ac <vTaskDelay>
    }
  }

  return (stat);
 80053b4:	68fb      	ldr	r3, [r7, #12]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a07      	ldr	r2, [pc, #28]	; (80053ec <vApplicationGetIdleTaskMemory+0x2c>)
 80053d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4a06      	ldr	r2, [pc, #24]	; (80053f0 <vApplicationGetIdleTaskMemory+0x30>)
 80053d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	601a      	str	r2, [r3, #0]
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20004864 	.word	0x20004864
 80053f0:	200048c0 	.word	0x200048c0

080053f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4a07      	ldr	r2, [pc, #28]	; (8005420 <vApplicationGetTimerTaskMemory+0x2c>)
 8005404:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a06      	ldr	r2, [pc, #24]	; (8005424 <vApplicationGetTimerTaskMemory+0x30>)
 800540a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005412:	601a      	str	r2, [r3, #0]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	20004ac0 	.word	0x20004ac0
 8005424:	20004b1c 	.word	0x20004b1c

08005428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f103 0208 	add.w	r2, r3, #8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f103 0208 	add.w	r2, r3, #8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f103 0208 	add.w	r2, r3, #8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
}
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054ca:	b480      	push	{r7}
 80054cc:	b085      	sub	sp, #20
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e0:	d103      	bne.n	80054ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e00c      	b.n	8005504 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3308      	adds	r3, #8
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e002      	b.n	80054f8 <vListInsert+0x2e>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	429a      	cmp	r2, r3
 8005502:	d2f6      	bcs.n	80054f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	601a      	str	r2, [r3, #0]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6892      	ldr	r2, [r2, #8]
 8005552:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6852      	ldr	r2, [r2, #4]
 800555c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	429a      	cmp	r2, r3
 8005566:	d103      	bne.n	8005570 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	1e5a      	subs	r2, r3, #1
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <xQueueGenericReset+0x2a>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	60bb      	str	r3, [r7, #8]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055ba:	f002 f873 	bl	80076a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	441a      	add	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	3b01      	subs	r3, #1
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	441a      	add	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	22ff      	movs	r2, #255	; 0xff
 80055fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	22ff      	movs	r2, #255	; 0xff
 8005606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d114      	bne.n	800563a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01a      	beq.n	800564e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3310      	adds	r3, #16
 800561c:	4618      	mov	r0, r3
 800561e:	f001 f903 	bl	8006828 <xTaskRemoveFromEventList>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d012      	beq.n	800564e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <xQueueGenericReset+0xcc>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	e009      	b.n	800564e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3310      	adds	r3, #16
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff fef2 	bl	8005428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3324      	adds	r3, #36	; 0x24
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff feed 	bl	8005428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800564e:	f002 f859 	bl	8007704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005652:	2301      	movs	r3, #1
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	e000ed04 	.word	0xe000ed04

08005660 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08e      	sub	sp, #56	; 0x38
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <xQueueGenericCreateStatic+0x52>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <xQueueGenericCreateStatic+0x56>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericCreateStatic+0x58>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	623b      	str	r3, [r7, #32]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <xQueueGenericCreateStatic+0x7e>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <xQueueGenericCreateStatic+0x82>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueGenericCreateStatic+0x84>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	61fb      	str	r3, [r7, #28]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056fe:	2350      	movs	r3, #80	; 0x50
 8005700:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b50      	cmp	r3, #80	; 0x50
 8005706:	d00a      	beq.n	800571e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	61bb      	str	r3, [r7, #24]
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800571e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00d      	beq.n	8005746 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005732:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f805 	bl	8005750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005748:	4618      	mov	r0, r3
 800574a:	3730      	adds	r7, #48	; 0x30
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d103      	bne.n	800576c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	e002      	b.n	8005772 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800577e:	2101      	movs	r1, #1
 8005780:	69b8      	ldr	r0, [r7, #24]
 8005782:	f7ff ff05 	bl	8005590 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	78fa      	ldrb	r2, [r7, #3]
 800578a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08e      	sub	sp, #56	; 0x38
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057a6:	2300      	movs	r3, #0
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xQueueGenericSend+0x32>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <xQueueGenericSend+0x40>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <xQueueGenericSend+0x44>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <xQueueGenericSend+0x46>
 80057dc:	2300      	movs	r3, #0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <xQueueGenericSend+0x60>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d103      	bne.n	8005806 <xQueueGenericSend+0x6e>
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <xQueueGenericSend+0x72>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <xQueueGenericSend+0x74>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <xQueueGenericSend+0x8e>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	623b      	str	r3, [r7, #32]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005826:	f001 f9e3 	bl	8006bf0 <xTaskGetSchedulerState>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <xQueueGenericSend+0x9e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <xQueueGenericSend+0xa2>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <xQueueGenericSend+0xa4>
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <xQueueGenericSend+0xbe>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	61fb      	str	r3, [r7, #28]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005856:	f001 ff25 	bl	80076a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	429a      	cmp	r2, r3
 8005864:	d302      	bcc.n	800586c <xQueueGenericSend+0xd4>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d129      	bne.n	80058c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005872:	f000 fa0b 	bl	8005c8c <prvCopyDataToQueue>
 8005876:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	3324      	adds	r3, #36	; 0x24
 8005884:	4618      	mov	r0, r3
 8005886:	f000 ffcf 	bl	8006828 <xTaskRemoveFromEventList>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d013      	beq.n	80058b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005890:	4b3f      	ldr	r3, [pc, #252]	; (8005990 <xQueueGenericSend+0x1f8>)
 8005892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	e00a      	b.n	80058b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058a8:	4b39      	ldr	r3, [pc, #228]	; (8005990 <xQueueGenericSend+0x1f8>)
 80058aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058b8:	f001 ff24 	bl	8007704 <vPortExitCritical>
				return pdPASS;
 80058bc:	2301      	movs	r3, #1
 80058be:	e063      	b.n	8005988 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d103      	bne.n	80058ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058c6:	f001 ff1d 	bl	8007704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e05c      	b.n	8005988 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058d4:	f107 0314 	add.w	r3, r7, #20
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 f82f 	bl	800693c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058de:	2301      	movs	r3, #1
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058e2:	f001 ff0f 	bl	8007704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058e6:	f000 fd7b 	bl	80063e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058ea:	f001 fedb 	bl	80076a4 <vPortEnterCritical>
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058f4:	b25b      	sxtb	r3, r3
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058fa:	d103      	bne.n	8005904 <xQueueGenericSend+0x16c>
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800590a:	b25b      	sxtb	r3, r3
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005910:	d103      	bne.n	800591a <xQueueGenericSend+0x182>
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800591a:	f001 fef3 	bl	8007704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800591e:	1d3a      	adds	r2, r7, #4
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	4611      	mov	r1, r2
 8005926:	4618      	mov	r0, r3
 8005928:	f001 f81e 	bl	8006968 <xTaskCheckForTimeOut>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d124      	bne.n	800597c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005934:	f000 faa2 	bl	8005e7c <prvIsQueueFull>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d018      	beq.n	8005970 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	3310      	adds	r3, #16
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f000 ff1e 	bl	8006788 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800594c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800594e:	f000 fa2d 	bl	8005dac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005952:	f000 fd53 	bl	80063fc <xTaskResumeAll>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	f47f af7c 	bne.w	8005856 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800595e:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <xQueueGenericSend+0x1f8>)
 8005960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	e772      	b.n	8005856 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005972:	f000 fa1b 	bl	8005dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005976:	f000 fd41 	bl	80063fc <xTaskResumeAll>
 800597a:	e76c      	b.n	8005856 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800597c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800597e:	f000 fa15 	bl	8005dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005982:	f000 fd3b 	bl	80063fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005986:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005988:	4618      	mov	r0, r3
 800598a:	3738      	adds	r7, #56	; 0x38
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	e000ed04 	.word	0xe000ed04

08005994 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b090      	sub	sp, #64	; 0x40
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <xQueueGenericSendFromISR+0x3c>
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <xQueueGenericSendFromISR+0x40>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <xQueueGenericSendFromISR+0x42>
 80059d4:	2300      	movs	r3, #0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d103      	bne.n	80059fe <xQueueGenericSendFromISR+0x6a>
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <xQueueGenericSendFromISR+0x6e>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <xQueueGenericSendFromISR+0x70>
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	623b      	str	r3, [r7, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	e7fe      	b.n	8005a1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a1e:	f001 ff23 	bl	8007868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a22:	f3ef 8211 	mrs	r2, BASEPRI
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	61fa      	str	r2, [r7, #28]
 8005a38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d302      	bcc.n	8005a50 <xQueueGenericSendFromISR+0xbc>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d12f      	bne.n	8005ab0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a66:	f000 f911 	bl	8005c8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a72:	d112      	bne.n	8005a9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d016      	beq.n	8005aaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	3324      	adds	r3, #36	; 0x24
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fed1 	bl	8006828 <xTaskRemoveFromEventList>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00e      	beq.n	8005aaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	e007      	b.n	8005aaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	b25a      	sxtb	r2, r3
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005aae:	e001      	b.n	8005ab4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005abe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3740      	adds	r7, #64	; 0x40
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08c      	sub	sp, #48	; 0x30
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <xQueueReceive+0x30>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	623b      	str	r3, [r7, #32]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <xQueueReceive+0x3e>
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <xQueueReceive+0x42>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <xQueueReceive+0x44>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <xQueueReceive+0x5e>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	61fb      	str	r3, [r7, #28]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b2a:	f001 f861 	bl	8006bf0 <xTaskGetSchedulerState>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <xQueueReceive+0x6e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <xQueueReceive+0x72>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <xQueueReceive+0x74>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <xQueueReceive+0x8e>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	61bb      	str	r3, [r7, #24]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b5a:	f001 fda3 	bl	80076a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01f      	beq.n	8005baa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b6e:	f000 f8f7 	bl	8005d60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	1e5a      	subs	r2, r3, #1
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00f      	beq.n	8005ba2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	3310      	adds	r3, #16
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fe4e 	bl	8006828 <xTaskRemoveFromEventList>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b92:	4b3d      	ldr	r3, [pc, #244]	; (8005c88 <xQueueReceive+0x1bc>)
 8005b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ba2:	f001 fdaf 	bl	8007704 <vPortExitCritical>
				return pdPASS;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e069      	b.n	8005c7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d103      	bne.n	8005bb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bb0:	f001 fda8 	bl	8007704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e062      	b.n	8005c7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bbe:	f107 0310 	add.w	r3, r7, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 feba 	bl	800693c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bcc:	f001 fd9a 	bl	8007704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bd0:	f000 fc06 	bl	80063e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bd4:	f001 fd66 	bl	80076a4 <vPortEnterCritical>
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bde:	b25b      	sxtb	r3, r3
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be4:	d103      	bne.n	8005bee <xQueueReceive+0x122>
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bfa:	d103      	bne.n	8005c04 <xQueueReceive+0x138>
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c04:	f001 fd7e 	bl	8007704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c08:	1d3a      	adds	r2, r7, #4
 8005c0a:	f107 0310 	add.w	r3, r7, #16
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fea9 	bl	8006968 <xTaskCheckForTimeOut>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d123      	bne.n	8005c64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c1e:	f000 f917 	bl	8005e50 <prvIsQueueEmpty>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d017      	beq.n	8005c58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	3324      	adds	r3, #36	; 0x24
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fda9 	bl	8006788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c38:	f000 f8b8 	bl	8005dac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c3c:	f000 fbde 	bl	80063fc <xTaskResumeAll>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d189      	bne.n	8005b5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <xQueueReceive+0x1bc>)
 8005c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	e780      	b.n	8005b5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c5a:	f000 f8a7 	bl	8005dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c5e:	f000 fbcd 	bl	80063fc <xTaskResumeAll>
 8005c62:	e77a      	b.n	8005b5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c66:	f000 f8a1 	bl	8005dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c6a:	f000 fbc7 	bl	80063fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c70:	f000 f8ee 	bl	8005e50 <prvIsQueueEmpty>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f43f af6f 	beq.w	8005b5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3730      	adds	r7, #48	; 0x30
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10d      	bne.n	8005cc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d14d      	bne.n	8005d4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 ffb8 	bl	8006c2c <xTaskPriorityDisinherit>
 8005cbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	609a      	str	r2, [r3, #8]
 8005cc4:	e043      	b.n	8005d4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d119      	bne.n	8005d00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6858      	ldr	r0, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	f00f fbcf 	bl	801547a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	441a      	add	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d32b      	bcc.n	8005d4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	e026      	b.n	8005d4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68d8      	ldr	r0, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	f00f fbb5 	bl	801547a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	425b      	negs	r3, r3
 8005d1a:	441a      	add	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d207      	bcs.n	8005d3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	425b      	negs	r3, r3
 8005d36:	441a      	add	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d105      	bne.n	8005d4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d56:	697b      	ldr	r3, [r7, #20]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d018      	beq.n	8005da4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	441a      	add	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d303      	bcc.n	8005d94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68d9      	ldr	r1, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6838      	ldr	r0, [r7, #0]
 8005da0:	f00f fb6b 	bl	801547a <memcpy>
	}
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005db4:	f001 fc76 	bl	80076a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dc0:	e011      	b.n	8005de6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d012      	beq.n	8005df0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3324      	adds	r3, #36	; 0x24
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fd2a 	bl	8006828 <xTaskRemoveFromEventList>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dda:	f000 fe27 	bl	8006a2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dce9      	bgt.n	8005dc2 <prvUnlockQueue+0x16>
 8005dee:	e000      	b.n	8005df2 <prvUnlockQueue+0x46>
					break;
 8005df0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	22ff      	movs	r2, #255	; 0xff
 8005df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005dfa:	f001 fc83 	bl	8007704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dfe:	f001 fc51 	bl	80076a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e0a:	e011      	b.n	8005e30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d012      	beq.n	8005e3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3310      	adds	r3, #16
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fd05 	bl	8006828 <xTaskRemoveFromEventList>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e24:	f000 fe02 	bl	8006a2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dce9      	bgt.n	8005e0c <prvUnlockQueue+0x60>
 8005e38:	e000      	b.n	8005e3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	22ff      	movs	r2, #255	; 0xff
 8005e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e44:	f001 fc5e 	bl	8007704 <vPortExitCritical>
}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e58:	f001 fc24 	bl	80076a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	e001      	b.n	8005e6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e6e:	f001 fc49 	bl	8007704 <vPortExitCritical>

	return xReturn;
 8005e72:	68fb      	ldr	r3, [r7, #12]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e84:	f001 fc0e 	bl	80076a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d102      	bne.n	8005e9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e001      	b.n	8005e9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e9e:	f001 fc31 	bl	8007704 <vPortExitCritical>

	return xReturn;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e014      	b.n	8005ee6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ebc:	4a0f      	ldr	r2, [pc, #60]	; (8005efc <vQueueAddToRegistry+0x50>)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10b      	bne.n	8005ee0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ec8:	490c      	ldr	r1, [pc, #48]	; (8005efc <vQueueAddToRegistry+0x50>)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ed2:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <vQueueAddToRegistry+0x50>)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4413      	add	r3, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ede:	e006      	b.n	8005eee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b07      	cmp	r3, #7
 8005eea:	d9e7      	bls.n	8005ebc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20004f1c 	.word	0x20004f1c

08005f00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f10:	f001 fbc8 	bl	80076a4 <vPortEnterCritical>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f1a:	b25b      	sxtb	r3, r3
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f20:	d103      	bne.n	8005f2a <vQueueWaitForMessageRestricted+0x2a>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f30:	b25b      	sxtb	r3, r3
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f36:	d103      	bne.n	8005f40 <vQueueWaitForMessageRestricted+0x40>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f40:	f001 fbe0 	bl	8007704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3324      	adds	r3, #36	; 0x24
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fc3b 	bl	80067d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f5a:	6978      	ldr	r0, [r7, #20]
 8005f5c:	f7ff ff26 	bl	8005dac <prvUnlockQueue>
	}
 8005f60:	bf00      	nop
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08e      	sub	sp, #56	; 0x38
 8005f6c:	af04      	add	r7, sp, #16
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	623b      	str	r3, [r7, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <xTaskCreateStatic+0x46>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	61fb      	str	r3, [r7, #28]
}
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fae:	235c      	movs	r3, #92	; 0x5c
 8005fb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b5c      	cmp	r3, #92	; 0x5c
 8005fb6:	d00a      	beq.n	8005fce <xTaskCreateStatic+0x66>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	61bb      	str	r3, [r7, #24]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01e      	beq.n	8006014 <xTaskCreateStatic+0xac>
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01b      	beq.n	8006014 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	9302      	str	r3, [sp, #8]
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f850 	bl	80060ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800600c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800600e:	f000 f8dd 	bl	80061cc <prvAddNewTaskToReadyList>
 8006012:	e001      	b.n	8006018 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006018:	697b      	ldr	r3, [r7, #20]
	}
 800601a:	4618      	mov	r0, r3
 800601c:	3728      	adds	r7, #40	; 0x28
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006022:	b580      	push	{r7, lr}
 8006024:	b08c      	sub	sp, #48	; 0x30
 8006026:	af04      	add	r7, sp, #16
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4618      	mov	r0, r3
 8006038:	f001 fc56 	bl	80078e8 <pvPortMalloc>
 800603c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00e      	beq.n	8006062 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006044:	205c      	movs	r0, #92	; 0x5c
 8006046:	f001 fc4f 	bl	80078e8 <pvPortMalloc>
 800604a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
 8006058:	e005      	b.n	8006066 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800605a:	6978      	ldr	r0, [r7, #20]
 800605c:	f001 fd10 	bl	8007a80 <vPortFree>
 8006060:	e001      	b.n	8006066 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d017      	beq.n	800609c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	2300      	movs	r3, #0
 8006078:	9303      	str	r3, [sp, #12]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	9302      	str	r3, [sp, #8]
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	9301      	str	r3, [sp, #4]
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f80e 	bl	80060ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006090:	69f8      	ldr	r0, [r7, #28]
 8006092:	f000 f89b 	bl	80061cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006096:	2301      	movs	r3, #1
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	e002      	b.n	80060a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800609c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060a2:	69bb      	ldr	r3, [r7, #24]
	}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	461a      	mov	r2, r3
 80060c4:	21a5      	movs	r1, #165	; 0xa5
 80060c6:	f00f f90f 	bl	80152e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060d4:	3b01      	subs	r3, #1
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <prvInitialiseNewTask+0x58>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	617b      	str	r3, [r7, #20]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01f      	beq.n	800614a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
 800610e:	e012      	b.n	8006136 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	7819      	ldrb	r1, [r3, #0]
 8006118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	3334      	adds	r3, #52	; 0x34
 8006120:	460a      	mov	r2, r1
 8006122:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	3301      	adds	r3, #1
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	2b0f      	cmp	r3, #15
 800613a:	d9e9      	bls.n	8006110 <prvInitialiseNewTask+0x64>
 800613c:	e000      	b.n	8006140 <prvInitialiseNewTask+0x94>
			{
				break;
 800613e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006148:	e003      	b.n	8006152 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	2b37      	cmp	r3, #55	; 0x37
 8006156:	d901      	bls.n	800615c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006158:	2337      	movs	r3, #55	; 0x37
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006166:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	2200      	movs	r2, #0
 800616c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	3304      	adds	r3, #4
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff f978 	bl	8005468 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	3318      	adds	r3, #24
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff f973 	bl	8005468 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006186:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006196:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	2200      	movs	r2, #0
 800619c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	68f9      	ldr	r1, [r7, #12]
 80061aa:	69b8      	ldr	r0, [r7, #24]
 80061ac:	f001 f94e 	bl	800744c <pxPortInitialiseStack>
 80061b0:	4602      	mov	r2, r0
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061c2:	bf00      	nop
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061d4:	f001 fa66 	bl	80076a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061d8:	4b2d      	ldr	r3, [pc, #180]	; (8006290 <prvAddNewTaskToReadyList+0xc4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3301      	adds	r3, #1
 80061de:	4a2c      	ldr	r2, [pc, #176]	; (8006290 <prvAddNewTaskToReadyList+0xc4>)
 80061e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061e2:	4b2c      	ldr	r3, [pc, #176]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061ea:	4a2a      	ldr	r2, [pc, #168]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061f0:	4b27      	ldr	r3, [pc, #156]	; (8006290 <prvAddNewTaskToReadyList+0xc4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d110      	bne.n	800621a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061f8:	f000 fc3c 	bl	8006a74 <prvInitialiseTaskLists>
 80061fc:	e00d      	b.n	800621a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061fe:	4b26      	ldr	r3, [pc, #152]	; (8006298 <prvAddNewTaskToReadyList+0xcc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006206:	4b23      	ldr	r3, [pc, #140]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	429a      	cmp	r2, r3
 8006212:	d802      	bhi.n	800621a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006214:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800621a:	4b20      	ldr	r3, [pc, #128]	; (800629c <prvAddNewTaskToReadyList+0xd0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3301      	adds	r3, #1
 8006220:	4a1e      	ldr	r2, [pc, #120]	; (800629c <prvAddNewTaskToReadyList+0xd0>)
 8006222:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006224:	4b1d      	ldr	r3, [pc, #116]	; (800629c <prvAddNewTaskToReadyList+0xd0>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <prvAddNewTaskToReadyList+0xd4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d903      	bls.n	8006240 <prvAddNewTaskToReadyList+0x74>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	4a18      	ldr	r2, [pc, #96]	; (80062a0 <prvAddNewTaskToReadyList+0xd4>)
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <prvAddNewTaskToReadyList+0xd8>)
 800624e:	441a      	add	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f7ff f913 	bl	8005482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800625c:	f001 fa52 	bl	8007704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006260:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <prvAddNewTaskToReadyList+0xcc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00e      	beq.n	8006286 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	429a      	cmp	r2, r3
 8006274:	d207      	bcs.n	8006286 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <prvAddNewTaskToReadyList+0xdc>)
 8006278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20005430 	.word	0x20005430
 8006294:	20004f5c 	.word	0x20004f5c
 8006298:	2000543c 	.word	0x2000543c
 800629c:	2000544c 	.word	0x2000544c
 80062a0:	20005438 	.word	0x20005438
 80062a4:	20004f60 	.word	0x20004f60
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d017      	beq.n	80062ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <vTaskDelay+0x60>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <vTaskDelay+0x30>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60bb      	str	r3, [r7, #8]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062dc:	f000 f880 	bl	80063e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062e0:	2100      	movs	r1, #0
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fd10 	bl	8006d08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062e8:	f000 f888 	bl	80063fc <xTaskResumeAll>
 80062ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d107      	bne.n	8006304 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <vTaskDelay+0x64>)
 80062f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20005458 	.word	0x20005458
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006322:	463a      	mov	r2, r7
 8006324:	1d39      	adds	r1, r7, #4
 8006326:	f107 0308 	add.w	r3, r7, #8
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff f848 	bl	80053c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	9202      	str	r2, [sp, #8]
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	2300      	movs	r3, #0
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	460a      	mov	r2, r1
 8006342:	4921      	ldr	r1, [pc, #132]	; (80063c8 <vTaskStartScheduler+0xb4>)
 8006344:	4821      	ldr	r0, [pc, #132]	; (80063cc <vTaskStartScheduler+0xb8>)
 8006346:	f7ff fe0f 	bl	8005f68 <xTaskCreateStatic>
 800634a:	4603      	mov	r3, r0
 800634c:	4a20      	ldr	r2, [pc, #128]	; (80063d0 <vTaskStartScheduler+0xbc>)
 800634e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006350:	4b1f      	ldr	r3, [pc, #124]	; (80063d0 <vTaskStartScheduler+0xbc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006358:	2301      	movs	r3, #1
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e001      	b.n	8006362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d102      	bne.n	800636e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006368:	f000 fd22 	bl	8006db0 <xTimerCreateTimerTask>
 800636c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d116      	bne.n	80063a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	613b      	str	r3, [r7, #16]
}
 8006386:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006388:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <vTaskStartScheduler+0xc0>)
 800638a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800638e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <vTaskStartScheduler+0xc4>)
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006396:	4b11      	ldr	r3, [pc, #68]	; (80063dc <vTaskStartScheduler+0xc8>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800639c:	f001 f8e0 	bl	8007560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063a0:	e00e      	b.n	80063c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063a8:	d10a      	bne.n	80063c0 <vTaskStartScheduler+0xac>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	60fb      	str	r3, [r7, #12]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <vTaskStartScheduler+0xaa>
}
 80063c0:	bf00      	nop
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	080161a0 	.word	0x080161a0
 80063cc:	08006a45 	.word	0x08006a45
 80063d0:	20005454 	.word	0x20005454
 80063d4:	20005450 	.word	0x20005450
 80063d8:	2000543c 	.word	0x2000543c
 80063dc:	20005434 	.word	0x20005434

080063e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063e4:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <vTaskSuspendAll+0x18>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	4a03      	ldr	r2, [pc, #12]	; (80063f8 <vTaskSuspendAll+0x18>)
 80063ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063ee:	bf00      	nop
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20005458 	.word	0x20005458

080063fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800640a:	4b42      	ldr	r3, [pc, #264]	; (8006514 <xTaskResumeAll+0x118>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <xTaskResumeAll+0x2c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	603b      	str	r3, [r7, #0]
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006428:	f001 f93c 	bl	80076a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800642c:	4b39      	ldr	r3, [pc, #228]	; (8006514 <xTaskResumeAll+0x118>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3b01      	subs	r3, #1
 8006432:	4a38      	ldr	r2, [pc, #224]	; (8006514 <xTaskResumeAll+0x118>)
 8006434:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006436:	4b37      	ldr	r3, [pc, #220]	; (8006514 <xTaskResumeAll+0x118>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d162      	bne.n	8006504 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800643e:	4b36      	ldr	r3, [pc, #216]	; (8006518 <xTaskResumeAll+0x11c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d05e      	beq.n	8006504 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006446:	e02f      	b.n	80064a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006448:	4b34      	ldr	r3, [pc, #208]	; (800651c <xTaskResumeAll+0x120>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3318      	adds	r3, #24
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff f871 	bl	800553c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3304      	adds	r3, #4
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff f86c 	bl	800553c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	4b2d      	ldr	r3, [pc, #180]	; (8006520 <xTaskResumeAll+0x124>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d903      	bls.n	8006478 <xTaskResumeAll+0x7c>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	4a2a      	ldr	r2, [pc, #168]	; (8006520 <xTaskResumeAll+0x124>)
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4a27      	ldr	r2, [pc, #156]	; (8006524 <xTaskResumeAll+0x128>)
 8006486:	441a      	add	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f7fe fff7 	bl	8005482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	4b23      	ldr	r3, [pc, #140]	; (8006528 <xTaskResumeAll+0x12c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	429a      	cmp	r2, r3
 80064a0:	d302      	bcc.n	80064a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064a2:	4b22      	ldr	r3, [pc, #136]	; (800652c <xTaskResumeAll+0x130>)
 80064a4:	2201      	movs	r2, #1
 80064a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064a8:	4b1c      	ldr	r3, [pc, #112]	; (800651c <xTaskResumeAll+0x120>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1cb      	bne.n	8006448 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064b6:	f000 fb7b 	bl	8006bb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064ba:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <xTaskResumeAll+0x134>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d010      	beq.n	80064e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064c6:	f000 f847 	bl	8006558 <xTaskIncrementTick>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064d0:	4b16      	ldr	r3, [pc, #88]	; (800652c <xTaskResumeAll+0x130>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3b01      	subs	r3, #1
 80064da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f1      	bne.n	80064c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064e2:	4b13      	ldr	r3, [pc, #76]	; (8006530 <xTaskResumeAll+0x134>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064e8:	4b10      	ldr	r3, [pc, #64]	; (800652c <xTaskResumeAll+0x130>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <xTaskResumeAll+0x138>)
 80064f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006504:	f001 f8fe 	bl	8007704 <vPortExitCritical>

	return xAlreadyYielded;
 8006508:	68bb      	ldr	r3, [r7, #8]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20005458 	.word	0x20005458
 8006518:	20005430 	.word	0x20005430
 800651c:	200053f0 	.word	0x200053f0
 8006520:	20005438 	.word	0x20005438
 8006524:	20004f60 	.word	0x20004f60
 8006528:	20004f5c 	.word	0x20004f5c
 800652c:	20005444 	.word	0x20005444
 8006530:	20005440 	.word	0x20005440
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <xTaskGetTickCount+0x1c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006544:	687b      	ldr	r3, [r7, #4]
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20005434 	.word	0x20005434

08006558 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006562:	4b4f      	ldr	r3, [pc, #316]	; (80066a0 <xTaskIncrementTick+0x148>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f040 808f 	bne.w	800668a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800656c:	4b4d      	ldr	r3, [pc, #308]	; (80066a4 <xTaskIncrementTick+0x14c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006574:	4a4b      	ldr	r2, [pc, #300]	; (80066a4 <xTaskIncrementTick+0x14c>)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d120      	bne.n	80065c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006580:	4b49      	ldr	r3, [pc, #292]	; (80066a8 <xTaskIncrementTick+0x150>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	603b      	str	r3, [r7, #0]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <xTaskIncrementTick+0x46>
 80065a0:	4b41      	ldr	r3, [pc, #260]	; (80066a8 <xTaskIncrementTick+0x150>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	4b41      	ldr	r3, [pc, #260]	; (80066ac <xTaskIncrementTick+0x154>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a3f      	ldr	r2, [pc, #252]	; (80066a8 <xTaskIncrementTick+0x150>)
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	4a3f      	ldr	r2, [pc, #252]	; (80066ac <xTaskIncrementTick+0x154>)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	4b3e      	ldr	r3, [pc, #248]	; (80066b0 <xTaskIncrementTick+0x158>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	4a3d      	ldr	r2, [pc, #244]	; (80066b0 <xTaskIncrementTick+0x158>)
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	f000 faf7 	bl	8006bb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065c2:	4b3c      	ldr	r3, [pc, #240]	; (80066b4 <xTaskIncrementTick+0x15c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d349      	bcc.n	8006660 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065cc:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <xTaskIncrementTick+0x150>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d6:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <xTaskIncrementTick+0x15c>)
 80065d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065dc:	601a      	str	r2, [r3, #0]
					break;
 80065de:	e03f      	b.n	8006660 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e0:	4b31      	ldr	r3, [pc, #196]	; (80066a8 <xTaskIncrementTick+0x150>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d203      	bcs.n	8006600 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065f8:	4a2e      	ldr	r2, [pc, #184]	; (80066b4 <xTaskIncrementTick+0x15c>)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065fe:	e02f      	b.n	8006660 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	3304      	adds	r3, #4
 8006604:	4618      	mov	r0, r3
 8006606:	f7fe ff99 	bl	800553c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	3318      	adds	r3, #24
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe ff90 	bl	800553c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <xTaskIncrementTick+0x160>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d903      	bls.n	8006630 <xTaskIncrementTick+0xd8>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	4a22      	ldr	r2, [pc, #136]	; (80066b8 <xTaskIncrementTick+0x160>)
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4a1f      	ldr	r2, [pc, #124]	; (80066bc <xTaskIncrementTick+0x164>)
 800663e:	441a      	add	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	3304      	adds	r3, #4
 8006644:	4619      	mov	r1, r3
 8006646:	4610      	mov	r0, r2
 8006648:	f7fe ff1b 	bl	8005482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <xTaskIncrementTick+0x168>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	429a      	cmp	r2, r3
 8006658:	d3b8      	bcc.n	80065cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800665a:	2301      	movs	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800665e:	e7b5      	b.n	80065cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006660:	4b17      	ldr	r3, [pc, #92]	; (80066c0 <xTaskIncrementTick+0x168>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	4915      	ldr	r1, [pc, #84]	; (80066bc <xTaskIncrementTick+0x164>)
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d901      	bls.n	800667c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006678:	2301      	movs	r3, #1
 800667a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <xTaskIncrementTick+0x16c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e004      	b.n	8006694 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800668a:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <xTaskIncrementTick+0x170>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3301      	adds	r3, #1
 8006690:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <xTaskIncrementTick+0x170>)
 8006692:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006694:	697b      	ldr	r3, [r7, #20]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20005458 	.word	0x20005458
 80066a4:	20005434 	.word	0x20005434
 80066a8:	200053e8 	.word	0x200053e8
 80066ac:	200053ec 	.word	0x200053ec
 80066b0:	20005448 	.word	0x20005448
 80066b4:	20005450 	.word	0x20005450
 80066b8:	20005438 	.word	0x20005438
 80066bc:	20004f60 	.word	0x20004f60
 80066c0:	20004f5c 	.word	0x20004f5c
 80066c4:	20005444 	.word	0x20005444
 80066c8:	20005440 	.word	0x20005440

080066cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066d2:	4b28      	ldr	r3, [pc, #160]	; (8006774 <vTaskSwitchContext+0xa8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066da:	4b27      	ldr	r3, [pc, #156]	; (8006778 <vTaskSwitchContext+0xac>)
 80066dc:	2201      	movs	r2, #1
 80066de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066e0:	e041      	b.n	8006766 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80066e2:	4b25      	ldr	r3, [pc, #148]	; (8006778 <vTaskSwitchContext+0xac>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e8:	4b24      	ldr	r3, [pc, #144]	; (800677c <vTaskSwitchContext+0xb0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e010      	b.n	8006712 <vTaskSwitchContext+0x46>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <vTaskSwitchContext+0x40>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	607b      	str	r3, [r7, #4]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <vTaskSwitchContext+0x3e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3b01      	subs	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	491b      	ldr	r1, [pc, #108]	; (8006780 <vTaskSwitchContext+0xb4>)
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0e4      	beq.n	80066f0 <vTaskSwitchContext+0x24>
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4a13      	ldr	r2, [pc, #76]	; (8006780 <vTaskSwitchContext+0xb4>)
 8006732:	4413      	add	r3, r2
 8006734:	60bb      	str	r3, [r7, #8]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	3308      	adds	r3, #8
 8006748:	429a      	cmp	r2, r3
 800674a:	d104      	bne.n	8006756 <vTaskSwitchContext+0x8a>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a09      	ldr	r2, [pc, #36]	; (8006784 <vTaskSwitchContext+0xb8>)
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	4a06      	ldr	r2, [pc, #24]	; (800677c <vTaskSwitchContext+0xb0>)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6013      	str	r3, [r2, #0]
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20005458 	.word	0x20005458
 8006778:	20005444 	.word	0x20005444
 800677c:	20005438 	.word	0x20005438
 8006780:	20004f60 	.word	0x20004f60
 8006784:	20004f5c 	.word	0x20004f5c

08006788 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <vTaskPlaceOnEventList+0x44>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3318      	adds	r3, #24
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fe fe87 	bl	80054ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067bc:	2101      	movs	r1, #1
 80067be:	6838      	ldr	r0, [r7, #0]
 80067c0:	f000 faa2 	bl	8006d08 <prvAddCurrentTaskToDelayedList>
}
 80067c4:	bf00      	nop
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20004f5c 	.word	0x20004f5c

080067d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	617b      	str	r3, [r7, #20]
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <vTaskPlaceOnEventListRestricted+0x54>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3318      	adds	r3, #24
 80067fe:	4619      	mov	r1, r3
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7fe fe3e 	bl	8005482 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800680c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006810:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	68b8      	ldr	r0, [r7, #8]
 8006816:	f000 fa77 	bl	8006d08 <prvAddCurrentTaskToDelayedList>
	}
 800681a:	bf00      	nop
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20004f5c 	.word	0x20004f5c

08006828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60fb      	str	r3, [r7, #12]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	3318      	adds	r3, #24
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fe6f 	bl	800553c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685e:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <xTaskRemoveFromEventList+0xb0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d11d      	bne.n	80068a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	3304      	adds	r3, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fe66 	bl	800553c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	4b19      	ldr	r3, [pc, #100]	; (80068dc <xTaskRemoveFromEventList+0xb4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d903      	bls.n	8006884 <xTaskRemoveFromEventList+0x5c>
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	4a16      	ldr	r2, [pc, #88]	; (80068dc <xTaskRemoveFromEventList+0xb4>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <xTaskRemoveFromEventList+0xb8>)
 8006892:	441a      	add	r2, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f7fe fdf1 	bl	8005482 <vListInsertEnd>
 80068a0:	e005      	b.n	80068ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	3318      	adds	r3, #24
 80068a6:	4619      	mov	r1, r3
 80068a8:	480e      	ldr	r0, [pc, #56]	; (80068e4 <xTaskRemoveFromEventList+0xbc>)
 80068aa:	f7fe fdea 	bl	8005482 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b2:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <xTaskRemoveFromEventList+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d905      	bls.n	80068c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <xTaskRemoveFromEventList+0xc4>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e001      	b.n	80068cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068cc:	697b      	ldr	r3, [r7, #20]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20005458 	.word	0x20005458
 80068dc:	20005438 	.word	0x20005438
 80068e0:	20004f60 	.word	0x20004f60
 80068e4:	200053f0 	.word	0x200053f0
 80068e8:	20004f5c 	.word	0x20004f5c
 80068ec:	20005444 	.word	0x20005444

080068f0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60fb      	str	r3, [r7, #12]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006914:	f000 fec6 	bl	80076a4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <vTaskSetTimeOutState+0x44>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <vTaskSetTimeOutState+0x48>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006928:	f000 feec 	bl	8007704 <vPortExitCritical>
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20005448 	.word	0x20005448
 8006938:	20005434 	.word	0x20005434

0800693c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <vTaskInternalSetTimeOutState+0x24>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <vTaskInternalSetTimeOutState+0x28>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	605a      	str	r2, [r3, #4]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	20005448 	.word	0x20005448
 8006964:	20005434 	.word	0x20005434

08006968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	613b      	str	r3, [r7, #16]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069aa:	f000 fe7b 	bl	80076a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069ae:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <xTaskCheckForTimeOut+0xbc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069c6:	d102      	bne.n	80069ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	e023      	b.n	8006a16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <xTaskCheckForTimeOut+0xc0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d007      	beq.n	80069ea <xTaskCheckForTimeOut+0x82>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d302      	bcc.n	80069ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	e015      	b.n	8006a16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d20b      	bcs.n	8006a0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	1ad2      	subs	r2, r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff ff9b 	bl	800693c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	e004      	b.n	8006a16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a16:	f000 fe75 	bl	8007704 <vPortExitCritical>

	return xReturn;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20005434 	.word	0x20005434
 8006a28:	20005448 	.word	0x20005448

08006a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a30:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <vTaskMissedYield+0x14>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
}
 8006a36:	bf00      	nop
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	20005444 	.word	0x20005444

08006a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a4c:	f000 f852 	bl	8006af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <prvIdleTask+0x28>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d9f9      	bls.n	8006a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <prvIdleTask+0x2c>)
 8006a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a68:	e7f0      	b.n	8006a4c <prvIdleTask+0x8>
 8006a6a:	bf00      	nop
 8006a6c:	20004f60 	.word	0x20004f60
 8006a70:	e000ed04 	.word	0xe000ed04

08006a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
 8006a7e:	e00c      	b.n	8006a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4a12      	ldr	r2, [pc, #72]	; (8006ad4 <prvInitialiseTaskLists+0x60>)
 8006a8c:	4413      	add	r3, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe fcca 	bl	8005428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3301      	adds	r3, #1
 8006a98:	607b      	str	r3, [r7, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b37      	cmp	r3, #55	; 0x37
 8006a9e:	d9ef      	bls.n	8006a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006aa0:	480d      	ldr	r0, [pc, #52]	; (8006ad8 <prvInitialiseTaskLists+0x64>)
 8006aa2:	f7fe fcc1 	bl	8005428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aa6:	480d      	ldr	r0, [pc, #52]	; (8006adc <prvInitialiseTaskLists+0x68>)
 8006aa8:	f7fe fcbe 	bl	8005428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006aac:	480c      	ldr	r0, [pc, #48]	; (8006ae0 <prvInitialiseTaskLists+0x6c>)
 8006aae:	f7fe fcbb 	bl	8005428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ab2:	480c      	ldr	r0, [pc, #48]	; (8006ae4 <prvInitialiseTaskLists+0x70>)
 8006ab4:	f7fe fcb8 	bl	8005428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ab8:	480b      	ldr	r0, [pc, #44]	; (8006ae8 <prvInitialiseTaskLists+0x74>)
 8006aba:	f7fe fcb5 	bl	8005428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006abe:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <prvInitialiseTaskLists+0x78>)
 8006ac0:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <prvInitialiseTaskLists+0x64>)
 8006ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <prvInitialiseTaskLists+0x7c>)
 8006ac6:	4a05      	ldr	r2, [pc, #20]	; (8006adc <prvInitialiseTaskLists+0x68>)
 8006ac8:	601a      	str	r2, [r3, #0]
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20004f60 	.word	0x20004f60
 8006ad8:	200053c0 	.word	0x200053c0
 8006adc:	200053d4 	.word	0x200053d4
 8006ae0:	200053f0 	.word	0x200053f0
 8006ae4:	20005404 	.word	0x20005404
 8006ae8:	2000541c 	.word	0x2000541c
 8006aec:	200053e8 	.word	0x200053e8
 8006af0:	200053ec 	.word	0x200053ec

08006af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006afa:	e019      	b.n	8006b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006afc:	f000 fdd2 	bl	80076a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b00:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <prvCheckTasksWaitingTermination+0x50>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fe fd15 	bl	800553c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b12:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <prvCheckTasksWaitingTermination+0x54>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	4a0b      	ldr	r2, [pc, #44]	; (8006b48 <prvCheckTasksWaitingTermination+0x54>)
 8006b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <prvCheckTasksWaitingTermination+0x58>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <prvCheckTasksWaitingTermination+0x58>)
 8006b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b26:	f000 fded 	bl	8007704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f810 	bl	8006b50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b30:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <prvCheckTasksWaitingTermination+0x58>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e1      	bne.n	8006afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20005404 	.word	0x20005404
 8006b48:	20005430 	.word	0x20005430
 8006b4c:	20005418 	.word	0x20005418

08006b50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d108      	bne.n	8006b74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 ff8a 	bl	8007a80 <vPortFree>
				vPortFree( pxTCB );
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 ff87 	bl	8007a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b72:	e018      	b.n	8006ba6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d103      	bne.n	8006b86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 ff7e 	bl	8007a80 <vPortFree>
	}
 8006b84:	e00f      	b.n	8006ba6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d00a      	beq.n	8006ba6 <prvDeleteTCB+0x56>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60fb      	str	r3, [r7, #12]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <prvDeleteTCB+0x54>
	}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvResetNextTaskUnblockTime+0x38>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <prvResetNextTaskUnblockTime+0x3c>)
 8006bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bc8:	e008      	b.n	8006bdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bca:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <prvResetNextTaskUnblockTime+0x38>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	4a04      	ldr	r2, [pc, #16]	; (8006bec <prvResetNextTaskUnblockTime+0x3c>)
 8006bda:	6013      	str	r3, [r2, #0]
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	200053e8 	.word	0x200053e8
 8006bec:	20005450 	.word	0x20005450

08006bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <xTaskGetSchedulerState+0x34>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	607b      	str	r3, [r7, #4]
 8006c02:	e008      	b.n	8006c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c04:	4b08      	ldr	r3, [pc, #32]	; (8006c28 <xTaskGetSchedulerState+0x38>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	607b      	str	r3, [r7, #4]
 8006c10:	e001      	b.n	8006c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c12:	2300      	movs	r3, #0
 8006c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c16:	687b      	ldr	r3, [r7, #4]
	}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	2000543c 	.word	0x2000543c
 8006c28:	20005458 	.word	0x20005458

08006c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d056      	beq.n	8006cf0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c42:	4b2e      	ldr	r3, [pc, #184]	; (8006cfc <xTaskPriorityDisinherit+0xd0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d00a      	beq.n	8006c62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60fb      	str	r3, [r7, #12]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	60bb      	str	r3, [r7, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c84:	1e5a      	subs	r2, r3, #1
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d02c      	beq.n	8006cf0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d128      	bne.n	8006cf0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe fc4a 	bl	800553c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc0:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <xTaskPriorityDisinherit+0xd4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d903      	bls.n	8006cd0 <xTaskPriorityDisinherit+0xa4>
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	4a0c      	ldr	r2, [pc, #48]	; (8006d00 <xTaskPriorityDisinherit+0xd4>)
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4a09      	ldr	r2, [pc, #36]	; (8006d04 <xTaskPriorityDisinherit+0xd8>)
 8006cde:	441a      	add	r2, r3
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f7fe fbcb 	bl	8005482 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cec:	2301      	movs	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cf0:	697b      	ldr	r3, [r7, #20]
	}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20004f5c 	.word	0x20004f5c
 8006d00:	20005438 	.word	0x20005438
 8006d04:	20004f60 	.word	0x20004f60

08006d08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d12:	4b21      	ldr	r3, [pc, #132]	; (8006d98 <prvAddCurrentTaskToDelayedList+0x90>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d18:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fc0c 	bl	800553c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d2a:	d10a      	bne.n	8006d42 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d32:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4819      	ldr	r0, [pc, #100]	; (8006da0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d3c:	f7fe fba1 	bl	8005482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d40:	e026      	b.n	8006d90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4413      	add	r3, r2
 8006d48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d4a:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d209      	bcs.n	8006d6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d5a:	4b12      	ldr	r3, [pc, #72]	; (8006da4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4619      	mov	r1, r3
 8006d66:	4610      	mov	r0, r2
 8006d68:	f7fe fbaf 	bl	80054ca <vListInsert>
}
 8006d6c:	e010      	b.n	8006d90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d6e:	4b0e      	ldr	r3, [pc, #56]	; (8006da8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7fe fba5 	bl	80054ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d202      	bcs.n	8006d90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d8a:	4a08      	ldr	r2, [pc, #32]	; (8006dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	6013      	str	r3, [r2, #0]
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20005434 	.word	0x20005434
 8006d9c:	20004f5c 	.word	0x20004f5c
 8006da0:	2000541c 	.word	0x2000541c
 8006da4:	200053ec 	.word	0x200053ec
 8006da8:	200053e8 	.word	0x200053e8
 8006dac:	20005450 	.word	0x20005450

08006db0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08a      	sub	sp, #40	; 0x28
 8006db4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006dba:	f000 fb07 	bl	80073cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006dbe:	4b1c      	ldr	r3, [pc, #112]	; (8006e30 <xTimerCreateTimerTask+0x80>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d021      	beq.n	8006e0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006dce:	1d3a      	adds	r2, r7, #4
 8006dd0:	f107 0108 	add.w	r1, r7, #8
 8006dd4:	f107 030c 	add.w	r3, r7, #12
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fb0b 	bl	80053f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	9202      	str	r2, [sp, #8]
 8006de6:	9301      	str	r3, [sp, #4]
 8006de8:	2302      	movs	r3, #2
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	2300      	movs	r3, #0
 8006dee:	460a      	mov	r2, r1
 8006df0:	4910      	ldr	r1, [pc, #64]	; (8006e34 <xTimerCreateTimerTask+0x84>)
 8006df2:	4811      	ldr	r0, [pc, #68]	; (8006e38 <xTimerCreateTimerTask+0x88>)
 8006df4:	f7ff f8b8 	bl	8005f68 <xTaskCreateStatic>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	4a10      	ldr	r2, [pc, #64]	; (8006e3c <xTimerCreateTimerTask+0x8c>)
 8006dfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <xTimerCreateTimerTask+0x8c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e06:	2301      	movs	r3, #1
 8006e08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	613b      	str	r3, [r7, #16]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e26:	697b      	ldr	r3, [r7, #20]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	2000548c 	.word	0x2000548c
 8006e34:	080161a8 	.word	0x080161a8
 8006e38:	08006f75 	.word	0x08006f75
 8006e3c:	20005490 	.word	0x20005490

08006e40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10a      	bne.n	8006e6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	623b      	str	r3, [r7, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e6e:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <xTimerGenericCommand+0x98>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d02a      	beq.n	8006ecc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b05      	cmp	r3, #5
 8006e86:	dc18      	bgt.n	8006eba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e88:	f7ff feb2 	bl	8006bf0 <xTaskGetSchedulerState>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d109      	bne.n	8006ea6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e92:	4b11      	ldr	r3, [pc, #68]	; (8006ed8 <xTimerGenericCommand+0x98>)
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	f107 0110 	add.w	r1, r7, #16
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9e:	f7fe fc7b 	bl	8005798 <xQueueGenericSend>
 8006ea2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ea4:	e012      	b.n	8006ecc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <xTimerGenericCommand+0x98>)
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	f107 0110 	add.w	r1, r7, #16
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f7fe fc71 	bl	8005798 <xQueueGenericSend>
 8006eb6:	6278      	str	r0, [r7, #36]	; 0x24
 8006eb8:	e008      	b.n	8006ecc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006eba:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <xTimerGenericCommand+0x98>)
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	f107 0110 	add.w	r1, r7, #16
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	f7fe fd65 	bl	8005994 <xQueueGenericSendFromISR>
 8006eca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3728      	adds	r7, #40	; 0x28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	2000548c 	.word	0x2000548c

08006edc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee6:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <prvProcessExpiredTimer+0x94>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe fb21 	bl	800553c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d022      	beq.n	8006f4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	18d1      	adds	r1, r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	6978      	ldr	r0, [r7, #20]
 8006f16:	f000 f8d1 	bl	80070bc <prvInsertTimerInActiveList>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01f      	beq.n	8006f60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f20:	2300      	movs	r3, #0
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	2300      	movs	r3, #0
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	2100      	movs	r1, #0
 8006f2a:	6978      	ldr	r0, [r7, #20]
 8006f2c:	f7ff ff88 	bl	8006e40 <xTimerGenericCommand>
 8006f30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d113      	bne.n	8006f60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f54:	f023 0301 	bic.w	r3, r3, #1
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	6978      	ldr	r0, [r7, #20]
 8006f66:	4798      	blx	r3
}
 8006f68:	bf00      	nop
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20005484 	.word	0x20005484

08006f74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f7c:	f107 0308 	add.w	r3, r7, #8
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f857 	bl	8007034 <prvGetNextExpireTime>
 8006f86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f803 	bl	8006f98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f92:	f000 f8d5 	bl	8007140 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f96:	e7f1      	b.n	8006f7c <prvTimerTask+0x8>

08006f98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006fa2:	f7ff fa1d 	bl	80063e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f866 	bl	800707c <prvSampleTimeNow>
 8006fb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d130      	bne.n	800701a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <prvProcessTimerOrBlockTask+0x3c>
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d806      	bhi.n	8006fd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006fc6:	f7ff fa19 	bl	80063fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff ff85 	bl	8006edc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006fd2:	e024      	b.n	800701e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fda:	4b13      	ldr	r3, [pc, #76]	; (8007028 <prvProcessTimerOrBlockTask+0x90>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <prvProcessTimerOrBlockTask+0x50>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e000      	b.n	8006fea <prvProcessTimerOrBlockTask+0x52>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <prvProcessTimerOrBlockTask+0x94>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f7fe ff81 	bl	8005f00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ffe:	f7ff f9fd 	bl	80063fc <xTaskResumeAll>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <prvProcessTimerOrBlockTask+0x98>)
 800700a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	f3bf 8f6f 	isb	sy
}
 8007018:	e001      	b.n	800701e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800701a:	f7ff f9ef 	bl	80063fc <xTaskResumeAll>
}
 800701e:	bf00      	nop
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20005488 	.word	0x20005488
 800702c:	2000548c 	.word	0x2000548c
 8007030:	e000ed04 	.word	0xe000ed04

08007034 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800703c:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <prvGetNextExpireTime+0x44>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <prvGetNextExpireTime+0x16>
 8007046:	2201      	movs	r2, #1
 8007048:	e000      	b.n	800704c <prvGetNextExpireTime+0x18>
 800704a:	2200      	movs	r2, #0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d105      	bne.n	8007064 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007058:	4b07      	ldr	r3, [pc, #28]	; (8007078 <prvGetNextExpireTime+0x44>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e001      	b.n	8007068 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007068:	68fb      	ldr	r3, [r7, #12]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	20005484 	.word	0x20005484

0800707c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007084:	f7ff fa58 	bl	8006538 <xTaskGetTickCount>
 8007088:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800708a:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <prvSampleTimeNow+0x3c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	429a      	cmp	r2, r3
 8007092:	d205      	bcs.n	80070a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007094:	f000 f936 	bl	8007304 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e002      	b.n	80070a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070a6:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <prvSampleTimeNow+0x3c>)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070ac:	68fb      	ldr	r3, [r7, #12]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20005494 	.word	0x20005494

080070bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d812      	bhi.n	8007108 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	1ad2      	subs	r2, r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d302      	bcc.n	80070f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070f0:	2301      	movs	r3, #1
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	e01b      	b.n	800712e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070f6:	4b10      	ldr	r3, [pc, #64]	; (8007138 <prvInsertTimerInActiveList+0x7c>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f7fe f9e2 	bl	80054ca <vListInsert>
 8007106:	e012      	b.n	800712e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d206      	bcs.n	800711e <prvInsertTimerInActiveList+0x62>
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d302      	bcc.n	800711e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007118:	2301      	movs	r3, #1
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	e007      	b.n	800712e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800711e:	4b07      	ldr	r3, [pc, #28]	; (800713c <prvInsertTimerInActiveList+0x80>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3304      	adds	r3, #4
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f7fe f9ce 	bl	80054ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800712e:	697b      	ldr	r3, [r7, #20]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20005488 	.word	0x20005488
 800713c:	20005484 	.word	0x20005484

08007140 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08e      	sub	sp, #56	; 0x38
 8007144:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007146:	e0ca      	b.n	80072de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	da18      	bge.n	8007180 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800714e:	1d3b      	adds	r3, r7, #4
 8007150:	3304      	adds	r3, #4
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	61fb      	str	r3, [r7, #28]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007176:	6850      	ldr	r0, [r2, #4]
 8007178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717a:	6892      	ldr	r2, [r2, #8]
 800717c:	4611      	mov	r1, r2
 800717e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f2c0 80ab 	blt.w	80072de <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d004      	beq.n	800719e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	3304      	adds	r3, #4
 8007198:	4618      	mov	r0, r3
 800719a:	f7fe f9cf 	bl	800553c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800719e:	463b      	mov	r3, r7
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff ff6b 	bl	800707c <prvSampleTimeNow>
 80071a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b09      	cmp	r3, #9
 80071ac:	f200 8096 	bhi.w	80072dc <prvProcessReceivedCommands+0x19c>
 80071b0:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <prvProcessReceivedCommands+0x78>)
 80071b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b6:	bf00      	nop
 80071b8:	080071e1 	.word	0x080071e1
 80071bc:	080071e1 	.word	0x080071e1
 80071c0:	080071e1 	.word	0x080071e1
 80071c4:	08007255 	.word	0x08007255
 80071c8:	08007269 	.word	0x08007269
 80071cc:	080072b3 	.word	0x080072b3
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071e1 	.word	0x080071e1
 80071d8:	08007255 	.word	0x08007255
 80071dc:	08007269 	.word	0x08007269
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	18d1      	adds	r1, r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007200:	f7ff ff5c 	bl	80070bc <prvInsertTimerInActiveList>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d069      	beq.n	80072de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007210:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d05e      	beq.n	80072de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	441a      	add	r2, r3
 8007228:	2300      	movs	r3, #0
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	2300      	movs	r3, #0
 800722e:	2100      	movs	r1, #0
 8007230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007232:	f7ff fe05 	bl	8006e40 <xTimerGenericCommand>
 8007236:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d14f      	bne.n	80072de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	61bb      	str	r3, [r7, #24]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	b2da      	uxtb	r2, r3
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007266:	e03a      	b.n	80072de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	b2da      	uxtb	r2, r3
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	617b      	str	r3, [r7, #20]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	18d1      	adds	r1, r2, r3
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072ac:	f7ff ff06 	bl	80070bc <prvInsertTimerInActiveList>
					break;
 80072b0:	e015      	b.n	80072de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d103      	bne.n	80072c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80072c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072c2:	f000 fbdd 	bl	8007a80 <vPortFree>
 80072c6:	e00a      	b.n	80072de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80072da:	e000      	b.n	80072de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80072dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072de:	4b08      	ldr	r3, [pc, #32]	; (8007300 <prvProcessReceivedCommands+0x1c0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	1d39      	adds	r1, r7, #4
 80072e4:	2200      	movs	r2, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe fbf0 	bl	8005acc <xQueueReceive>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f47f af2a 	bne.w	8007148 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	3730      	adds	r7, #48	; 0x30
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	2000548c 	.word	0x2000548c

08007304 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800730a:	e048      	b.n	800739e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800730c:	4b2d      	ldr	r3, [pc, #180]	; (80073c4 <prvSwitchTimerLists+0xc0>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007316:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <prvSwitchTimerLists+0xc0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3304      	adds	r3, #4
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe f909 	bl	800553c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d02e      	beq.n	800739e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4413      	add	r3, r2
 8007348:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	429a      	cmp	r2, r3
 8007350:	d90e      	bls.n	8007370 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800735e:	4b19      	ldr	r3, [pc, #100]	; (80073c4 <prvSwitchTimerLists+0xc0>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3304      	adds	r3, #4
 8007366:	4619      	mov	r1, r3
 8007368:	4610      	mov	r0, r2
 800736a:	f7fe f8ae 	bl	80054ca <vListInsert>
 800736e:	e016      	b.n	800739e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007370:	2300      	movs	r3, #0
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	2300      	movs	r3, #0
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	2100      	movs	r1, #0
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff fd60 	bl	8006e40 <xTimerGenericCommand>
 8007380:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	603b      	str	r3, [r7, #0]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800739e:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <prvSwitchTimerLists+0xc0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1b1      	bne.n	800730c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073a8:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <prvSwitchTimerLists+0xc0>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <prvSwitchTimerLists+0xc4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <prvSwitchTimerLists+0xc0>)
 80073b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80073b6:	4a04      	ldr	r2, [pc, #16]	; (80073c8 <prvSwitchTimerLists+0xc4>)
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	6013      	str	r3, [r2, #0]
}
 80073bc:	bf00      	nop
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	20005484 	.word	0x20005484
 80073c8:	20005488 	.word	0x20005488

080073cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80073d2:	f000 f967 	bl	80076a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073d6:	4b15      	ldr	r3, [pc, #84]	; (800742c <prvCheckForValidListAndQueue+0x60>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d120      	bne.n	8007420 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073de:	4814      	ldr	r0, [pc, #80]	; (8007430 <prvCheckForValidListAndQueue+0x64>)
 80073e0:	f7fe f822 	bl	8005428 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073e4:	4813      	ldr	r0, [pc, #76]	; (8007434 <prvCheckForValidListAndQueue+0x68>)
 80073e6:	f7fe f81f 	bl	8005428 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073ea:	4b13      	ldr	r3, [pc, #76]	; (8007438 <prvCheckForValidListAndQueue+0x6c>)
 80073ec:	4a10      	ldr	r2, [pc, #64]	; (8007430 <prvCheckForValidListAndQueue+0x64>)
 80073ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073f0:	4b12      	ldr	r3, [pc, #72]	; (800743c <prvCheckForValidListAndQueue+0x70>)
 80073f2:	4a10      	ldr	r2, [pc, #64]	; (8007434 <prvCheckForValidListAndQueue+0x68>)
 80073f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073f6:	2300      	movs	r3, #0
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	4b11      	ldr	r3, [pc, #68]	; (8007440 <prvCheckForValidListAndQueue+0x74>)
 80073fc:	4a11      	ldr	r2, [pc, #68]	; (8007444 <prvCheckForValidListAndQueue+0x78>)
 80073fe:	2110      	movs	r1, #16
 8007400:	200a      	movs	r0, #10
 8007402:	f7fe f92d 	bl	8005660 <xQueueGenericCreateStatic>
 8007406:	4603      	mov	r3, r0
 8007408:	4a08      	ldr	r2, [pc, #32]	; (800742c <prvCheckForValidListAndQueue+0x60>)
 800740a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800740c:	4b07      	ldr	r3, [pc, #28]	; (800742c <prvCheckForValidListAndQueue+0x60>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <prvCheckForValidListAndQueue+0x60>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	490b      	ldr	r1, [pc, #44]	; (8007448 <prvCheckForValidListAndQueue+0x7c>)
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fd46 	bl	8005eac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007420:	f000 f970 	bl	8007704 <vPortExitCritical>
}
 8007424:	bf00      	nop
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	2000548c 	.word	0x2000548c
 8007430:	2000545c 	.word	0x2000545c
 8007434:	20005470 	.word	0x20005470
 8007438:	20005484 	.word	0x20005484
 800743c:	20005488 	.word	0x20005488
 8007440:	20005538 	.word	0x20005538
 8007444:	20005498 	.word	0x20005498
 8007448:	080161b0 	.word	0x080161b0

0800744c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3b04      	subs	r3, #4
 800745c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3b04      	subs	r3, #4
 800746a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f023 0201 	bic.w	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3b04      	subs	r3, #4
 800747a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800747c:	4a0c      	ldr	r2, [pc, #48]	; (80074b0 <pxPortInitialiseStack+0x64>)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3b14      	subs	r3, #20
 8007486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3b04      	subs	r3, #4
 8007492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f06f 0202 	mvn.w	r2, #2
 800749a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3b20      	subs	r3, #32
 80074a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	080074b5 	.word	0x080074b5

080074b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <prvTaskExitError+0x54>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074c6:	d00a      	beq.n	80074de <prvTaskExitError+0x2a>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60fb      	str	r3, [r7, #12]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <prvTaskExitError+0x28>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	60bb      	str	r3, [r7, #8]
}
 80074f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074f2:	bf00      	nop
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0fc      	beq.n	80074f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	20000010 	.word	0x20000010
 800750c:	00000000 	.word	0x00000000

08007510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007510:	4b07      	ldr	r3, [pc, #28]	; (8007530 <pxCurrentTCBConst2>)
 8007512:	6819      	ldr	r1, [r3, #0]
 8007514:	6808      	ldr	r0, [r1, #0]
 8007516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751a:	f380 8809 	msr	PSP, r0
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f04f 0000 	mov.w	r0, #0
 8007526:	f380 8811 	msr	BASEPRI, r0
 800752a:	4770      	bx	lr
 800752c:	f3af 8000 	nop.w

08007530 <pxCurrentTCBConst2>:
 8007530:	20004f5c 	.word	0x20004f5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop

08007538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007538:	4808      	ldr	r0, [pc, #32]	; (800755c <prvPortStartFirstTask+0x24>)
 800753a:	6800      	ldr	r0, [r0, #0]
 800753c:	6800      	ldr	r0, [r0, #0]
 800753e:	f380 8808 	msr	MSP, r0
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f380 8814 	msr	CONTROL, r0
 800754a:	b662      	cpsie	i
 800754c:	b661      	cpsie	f
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	df00      	svc	0
 8007558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800755a:	bf00      	nop
 800755c:	e000ed08 	.word	0xe000ed08

08007560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007566:	4b46      	ldr	r3, [pc, #280]	; (8007680 <xPortStartScheduler+0x120>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a46      	ldr	r2, [pc, #280]	; (8007684 <xPortStartScheduler+0x124>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d10a      	bne.n	8007586 <xPortStartScheduler+0x26>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	613b      	str	r3, [r7, #16]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007586:	4b3e      	ldr	r3, [pc, #248]	; (8007680 <xPortStartScheduler+0x120>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a3f      	ldr	r2, [pc, #252]	; (8007688 <xPortStartScheduler+0x128>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10a      	bne.n	80075a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60fb      	str	r3, [r7, #12]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075a6:	4b39      	ldr	r3, [pc, #228]	; (800768c <xPortStartScheduler+0x12c>)
 80075a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	22ff      	movs	r2, #255	; 0xff
 80075b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	4b31      	ldr	r3, [pc, #196]	; (8007690 <xPortStartScheduler+0x130>)
 80075cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075ce:	4b31      	ldr	r3, [pc, #196]	; (8007694 <xPortStartScheduler+0x134>)
 80075d0:	2207      	movs	r2, #7
 80075d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075d4:	e009      	b.n	80075ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80075d6:	4b2f      	ldr	r3, [pc, #188]	; (8007694 <xPortStartScheduler+0x134>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3b01      	subs	r3, #1
 80075dc:	4a2d      	ldr	r2, [pc, #180]	; (8007694 <xPortStartScheduler+0x134>)
 80075de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d0ef      	beq.n	80075d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075f6:	4b27      	ldr	r3, [pc, #156]	; (8007694 <xPortStartScheduler+0x134>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f1c3 0307 	rsb	r3, r3, #7
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d00a      	beq.n	8007618 <xPortStartScheduler+0xb8>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60bb      	str	r3, [r7, #8]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007618:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <xPortStartScheduler+0x134>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <xPortStartScheduler+0x134>)
 8007620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007622:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <xPortStartScheduler+0x134>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800762a:	4a1a      	ldr	r2, [pc, #104]	; (8007694 <xPortStartScheduler+0x134>)
 800762c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007636:	4b18      	ldr	r3, [pc, #96]	; (8007698 <xPortStartScheduler+0x138>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a17      	ldr	r2, [pc, #92]	; (8007698 <xPortStartScheduler+0x138>)
 800763c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <xPortStartScheduler+0x138>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a14      	ldr	r2, [pc, #80]	; (8007698 <xPortStartScheduler+0x138>)
 8007648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800764c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800764e:	f000 f8dd 	bl	800780c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007652:	4b12      	ldr	r3, [pc, #72]	; (800769c <xPortStartScheduler+0x13c>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007658:	f000 f8fc 	bl	8007854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800765c:	4b10      	ldr	r3, [pc, #64]	; (80076a0 <xPortStartScheduler+0x140>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a0f      	ldr	r2, [pc, #60]	; (80076a0 <xPortStartScheduler+0x140>)
 8007662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007668:	f7ff ff66 	bl	8007538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800766c:	f7ff f82e 	bl	80066cc <vTaskSwitchContext>
	prvTaskExitError();
 8007670:	f7ff ff20 	bl	80074b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	e000ed00 	.word	0xe000ed00
 8007684:	410fc271 	.word	0x410fc271
 8007688:	410fc270 	.word	0x410fc270
 800768c:	e000e400 	.word	0xe000e400
 8007690:	20005588 	.word	0x20005588
 8007694:	2000558c 	.word	0x2000558c
 8007698:	e000ed20 	.word	0xe000ed20
 800769c:	20000010 	.word	0x20000010
 80076a0:	e000ef34 	.word	0xe000ef34

080076a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	607b      	str	r3, [r7, #4]
}
 80076bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076be:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <vPortEnterCritical+0x58>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	4a0d      	ldr	r2, [pc, #52]	; (80076fc <vPortEnterCritical+0x58>)
 80076c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <vPortEnterCritical+0x58>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d10f      	bne.n	80076f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <vPortEnterCritical+0x5c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	603b      	str	r3, [r7, #0]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <vPortEnterCritical+0x4a>
	}
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	20000010 	.word	0x20000010
 8007700:	e000ed04 	.word	0xe000ed04

08007704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800770a:	4b12      	ldr	r3, [pc, #72]	; (8007754 <vPortExitCritical+0x50>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <vPortExitCritical+0x24>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	607b      	str	r3, [r7, #4]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <vPortExitCritical+0x50>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3b01      	subs	r3, #1
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <vPortExitCritical+0x50>)
 8007730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007732:	4b08      	ldr	r3, [pc, #32]	; (8007754 <vPortExitCritical+0x50>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d105      	bne.n	8007746 <vPortExitCritical+0x42>
 800773a:	2300      	movs	r3, #0
 800773c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	f383 8811 	msr	BASEPRI, r3
}
 8007744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20000010 	.word	0x20000010
	...

08007760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007760:	f3ef 8009 	mrs	r0, PSP
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <pxCurrentTCBConst>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	f01e 0f10 	tst.w	lr, #16
 8007770:	bf08      	it	eq
 8007772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777a:	6010      	str	r0, [r2, #0]
 800777c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007784:	f380 8811 	msr	BASEPRI, r0
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f7fe ff9c 	bl	80066cc <vTaskSwitchContext>
 8007794:	f04f 0000 	mov.w	r0, #0
 8007798:	f380 8811 	msr	BASEPRI, r0
 800779c:	bc09      	pop	{r0, r3}
 800779e:	6819      	ldr	r1, [r3, #0]
 80077a0:	6808      	ldr	r0, [r1, #0]
 80077a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a6:	f01e 0f10 	tst.w	lr, #16
 80077aa:	bf08      	it	eq
 80077ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077b0:	f380 8809 	msr	PSP, r0
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	f3af 8000 	nop.w

080077c0 <pxCurrentTCBConst>:
 80077c0:	20004f5c 	.word	0x20004f5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop

080077c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	607b      	str	r3, [r7, #4]
}
 80077e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077e2:	f7fe feb9 	bl	8006558 <xTaskIncrementTick>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <xPortSysTickHandler+0x40>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	2300      	movs	r3, #0
 80077f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	f383 8811 	msr	BASEPRI, r3
}
 80077fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <vPortSetupTimerInterrupt+0x34>)
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007816:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <vPortSetupTimerInterrupt+0x38>)
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <vPortSetupTimerInterrupt+0x3c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0a      	ldr	r2, [pc, #40]	; (800784c <vPortSetupTimerInterrupt+0x40>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	099b      	lsrs	r3, r3, #6
 8007828:	4a09      	ldr	r2, [pc, #36]	; (8007850 <vPortSetupTimerInterrupt+0x44>)
 800782a:	3b01      	subs	r3, #1
 800782c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800782e:	4b04      	ldr	r3, [pc, #16]	; (8007840 <vPortSetupTimerInterrupt+0x34>)
 8007830:	2207      	movs	r2, #7
 8007832:	601a      	str	r2, [r3, #0]
}
 8007834:	bf00      	nop
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	e000e010 	.word	0xe000e010
 8007844:	e000e018 	.word	0xe000e018
 8007848:	20000004 	.word	0x20000004
 800784c:	10624dd3 	.word	0x10624dd3
 8007850:	e000e014 	.word	0xe000e014

08007854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007864 <vPortEnableVFP+0x10>
 8007858:	6801      	ldr	r1, [r0, #0]
 800785a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800785e:	6001      	str	r1, [r0, #0]
 8007860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007862:	bf00      	nop
 8007864:	e000ed88 	.word	0xe000ed88

08007868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800786e:	f3ef 8305 	mrs	r3, IPSR
 8007872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b0f      	cmp	r3, #15
 8007878:	d914      	bls.n	80078a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800787a:	4a17      	ldr	r2, [pc, #92]	; (80078d8 <vPortValidateInterruptPriority+0x70>)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007884:	4b15      	ldr	r3, [pc, #84]	; (80078dc <vPortValidateInterruptPriority+0x74>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	7afa      	ldrb	r2, [r7, #11]
 800788a:	429a      	cmp	r2, r3
 800788c:	d20a      	bcs.n	80078a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	607b      	str	r3, [r7, #4]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078a4:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <vPortValidateInterruptPriority+0x78>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078ac:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <vPortValidateInterruptPriority+0x7c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d90a      	bls.n	80078ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	603b      	str	r3, [r7, #0]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <vPortValidateInterruptPriority+0x60>
	}
 80078ca:	bf00      	nop
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	e000e3f0 	.word	0xe000e3f0
 80078dc:	20005588 	.word	0x20005588
 80078e0:	e000ed0c 	.word	0xe000ed0c
 80078e4:	2000558c 	.word	0x2000558c

080078e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	; 0x28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078f4:	f7fe fd74 	bl	80063e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078f8:	4b5b      	ldr	r3, [pc, #364]	; (8007a68 <pvPortMalloc+0x180>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007900:	f000 f920 	bl	8007b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007904:	4b59      	ldr	r3, [pc, #356]	; (8007a6c <pvPortMalloc+0x184>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4013      	ands	r3, r2
 800790c:	2b00      	cmp	r3, #0
 800790e:	f040 8093 	bne.w	8007a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01d      	beq.n	8007954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007918:	2208      	movs	r2, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4413      	add	r3, r2
 800791e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f003 0307 	and.w	r3, r3, #7
 8007926:	2b00      	cmp	r3, #0
 8007928:	d014      	beq.n	8007954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f023 0307 	bic.w	r3, r3, #7
 8007930:	3308      	adds	r3, #8
 8007932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <pvPortMalloc+0x6c>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	617b      	str	r3, [r7, #20]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d06e      	beq.n	8007a38 <pvPortMalloc+0x150>
 800795a:	4b45      	ldr	r3, [pc, #276]	; (8007a70 <pvPortMalloc+0x188>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d869      	bhi.n	8007a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007964:	4b43      	ldr	r3, [pc, #268]	; (8007a74 <pvPortMalloc+0x18c>)
 8007966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007968:	4b42      	ldr	r3, [pc, #264]	; (8007a74 <pvPortMalloc+0x18c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800796e:	e004      	b.n	800797a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d903      	bls.n	800798c <pvPortMalloc+0xa4>
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f1      	bne.n	8007970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800798c:	4b36      	ldr	r3, [pc, #216]	; (8007a68 <pvPortMalloc+0x180>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007992:	429a      	cmp	r2, r3
 8007994:	d050      	beq.n	8007a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2208      	movs	r2, #8
 800799c:	4413      	add	r3, r2
 800799e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	2308      	movs	r3, #8
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d91f      	bls.n	80079f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <pvPortMalloc+0xf8>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	613b      	str	r3, [r7, #16]
}
 80079dc:	bf00      	nop
 80079de:	e7fe      	b.n	80079de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	1ad2      	subs	r2, r2, r3
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079f2:	69b8      	ldr	r0, [r7, #24]
 80079f4:	f000 f908 	bl	8007c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079f8:	4b1d      	ldr	r3, [pc, #116]	; (8007a70 <pvPortMalloc+0x188>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <pvPortMalloc+0x188>)
 8007a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a06:	4b1a      	ldr	r3, [pc, #104]	; (8007a70 <pvPortMalloc+0x188>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	4b1b      	ldr	r3, [pc, #108]	; (8007a78 <pvPortMalloc+0x190>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d203      	bcs.n	8007a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a12:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <pvPortMalloc+0x188>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a18      	ldr	r2, [pc, #96]	; (8007a78 <pvPortMalloc+0x190>)
 8007a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <pvPortMalloc+0x184>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a2e:	4b13      	ldr	r3, [pc, #76]	; (8007a7c <pvPortMalloc+0x194>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3301      	adds	r3, #1
 8007a34:	4a11      	ldr	r2, [pc, #68]	; (8007a7c <pvPortMalloc+0x194>)
 8007a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a38:	f7fe fce0 	bl	80063fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <pvPortMalloc+0x174>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	60fb      	str	r3, [r7, #12]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <pvPortMalloc+0x172>
	return pvReturn;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3728      	adds	r7, #40	; 0x28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20009198 	.word	0x20009198
 8007a6c:	200091ac 	.word	0x200091ac
 8007a70:	2000919c 	.word	0x2000919c
 8007a74:	20009190 	.word	0x20009190
 8007a78:	200091a0 	.word	0x200091a0
 8007a7c:	200091a4 	.word	0x200091a4

08007a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d04d      	beq.n	8007b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a92:	2308      	movs	r3, #8
 8007a94:	425b      	negs	r3, r3
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	4b24      	ldr	r3, [pc, #144]	; (8007b38 <vPortFree+0xb8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <vPortFree+0x44>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	60fb      	str	r3, [r7, #12]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <vPortFree+0x62>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	60bb      	str	r3, [r7, #8]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <vPortFree+0xb8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01e      	beq.n	8007b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d11a      	bne.n	8007b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <vPortFree+0xb8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	43db      	mvns	r3, r3
 8007b02:	401a      	ands	r2, r3
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b08:	f7fe fc6a 	bl	80063e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <vPortFree+0xbc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4413      	add	r3, r2
 8007b16:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <vPortFree+0xbc>)
 8007b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b1a:	6938      	ldr	r0, [r7, #16]
 8007b1c:	f000 f874 	bl	8007c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <vPortFree+0xc0>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3301      	adds	r3, #1
 8007b26:	4a06      	ldr	r2, [pc, #24]	; (8007b40 <vPortFree+0xc0>)
 8007b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b2a:	f7fe fc67 	bl	80063fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b2e:	bf00      	nop
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	200091ac 	.word	0x200091ac
 8007b3c:	2000919c 	.word	0x2000919c
 8007b40:	200091a8 	.word	0x200091a8

08007b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b50:	4b27      	ldr	r3, [pc, #156]	; (8007bf0 <prvHeapInit+0xac>)
 8007b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00c      	beq.n	8007b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3307      	adds	r3, #7
 8007b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0307 	bic.w	r3, r3, #7
 8007b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	4a1f      	ldr	r2, [pc, #124]	; (8007bf0 <prvHeapInit+0xac>)
 8007b74:	4413      	add	r3, r2
 8007b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	; (8007bf4 <prvHeapInit+0xb0>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b82:	4b1c      	ldr	r3, [pc, #112]	; (8007bf4 <prvHeapInit+0xb0>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b90:	2208      	movs	r2, #8
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1a9b      	subs	r3, r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0307 	bic.w	r3, r3, #7
 8007b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <prvHeapInit+0xb4>)
 8007ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ba6:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <prvHeapInit+0xb4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2200      	movs	r2, #0
 8007bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bae:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <prvHeapInit+0xb4>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <prvHeapInit+0xb4>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <prvHeapInit+0xb8>)
 8007bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <prvHeapInit+0xbc>)
 8007bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bdc:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <prvHeapInit+0xc0>)
 8007bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007be2:	601a      	str	r2, [r3, #0]
}
 8007be4:	bf00      	nop
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	20005590 	.word	0x20005590
 8007bf4:	20009190 	.word	0x20009190
 8007bf8:	20009198 	.word	0x20009198
 8007bfc:	200091a0 	.word	0x200091a0
 8007c00:	2000919c 	.word	0x2000919c
 8007c04:	200091ac 	.word	0x200091ac

08007c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c10:	4b28      	ldr	r3, [pc, #160]	; (8007cb4 <prvInsertBlockIntoFreeList+0xac>)
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e002      	b.n	8007c1c <prvInsertBlockIntoFreeList+0x14>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d8f7      	bhi.n	8007c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	4413      	add	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d108      	bne.n	8007c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	441a      	add	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	441a      	add	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d118      	bne.n	8007c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d00d      	beq.n	8007c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	441a      	add	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	e008      	b.n	8007c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c86:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e003      	b.n	8007c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d002      	beq.n	8007ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ca6:	bf00      	nop
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	20009190 	.word	0x20009190
 8007cb8:	20009198 	.word	0x20009198

08007cbc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	b10a      	cbz	r2, 8007cc6 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 8007cc2:	4803      	ldr	r0, [pc, #12]	; (8007cd0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8007cc4:	4770      	bx	lr
 8007cc6:	4a03      	ldr	r2, [pc, #12]	; (8007cd4 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8007cca:	6812      	ldr	r2, [r2, #0]
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	4770      	bx	lr
 8007cd0:	2000001c 	.word	0x2000001c
 8007cd4:	200001d0 	.word	0x200001d0

08007cd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007cd8:	4a02      	ldr	r2, [pc, #8]	; (8007ce4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 8007cda:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8007cdc:	6812      	ldr	r2, [r2, #0]
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	200001d0 	.word	0x200001d0
 8007ce8:	2000001c 	.word	0x2000001c

08007cec <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8007cec:	f004 ba8a 	b.w	800c204 <geometry_msgs__msg__Twist__init>

08007cf0 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 8007cf0:	f004 baac 	b.w	800c24c <geometry_msgs__msg__Twist__fini>

08007cf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	f000 f819 	bl	8007d2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007cfa:	4c07      	ldr	r4, [pc, #28]	; (8007d18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8007cfc:	60e0      	str	r0, [r4, #12]
 8007cfe:	f000 f815 	bl	8007d2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007d04:	64a0      	str	r0, [r4, #72]	; 0x48
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	b10a      	cbz	r2, 8007d0e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 8007d0a:	4804      	ldr	r0, [pc, #16]	; (8007d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	4a04      	ldr	r2, [pc, #16]	; (8007d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8007d10:	4802      	ldr	r0, [pc, #8]	; (8007d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	bd10      	pop	{r4, pc}
 8007d18:	20000028 	.word	0x20000028
 8007d1c:	200000a0 	.word	0x200000a0
 8007d20:	200001d4 	.word	0x200001d4

08007d24 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8007d24:	f004 ba9e 	b.w	800c264 <geometry_msgs__msg__Vector3__init>

08007d28 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8007d28:	f004 baa0 	b.w	800c26c <geometry_msgs__msg__Vector3__fini>

08007d2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8007d2c:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	b10a      	cbz	r2, 8007d36 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8007d32:	4803      	ldr	r0, [pc, #12]	; (8007d40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8007d34:	4770      	bx	lr
 8007d36:	4a03      	ldr	r2, [pc, #12]	; (8007d44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	4770      	bx	lr
 8007d40:	20000160 	.word	0x20000160
 8007d44:	200001d4 	.word	0x200001d4

08007d48 <get_serialized_size_geometry_msgs__msg__Twist>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	b148      	cbz	r0, 8007d62 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 8007d4e:	460d      	mov	r5, r1
 8007d50:	f000 f860 	bl	8007e14 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007d54:	4606      	mov	r6, r0
 8007d56:	1829      	adds	r1, r5, r0
 8007d58:	f104 0018 	add.w	r0, r4, #24
 8007d5c:	f000 f85a 	bl	8007e14 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007d60:	4430      	add	r0, r6
 8007d62:	bd70      	pop	{r4, r5, r6, pc}

08007d64 <_Twist__cdr_deserialize>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	b189      	cbz	r1, 8007d8e <_Twist__cdr_deserialize+0x2a>
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	f000 f8de 	bl	8007f2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007d70:	6843      	ldr	r3, [r0, #4]
 8007d72:	4621      	mov	r1, r4
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	4628      	mov	r0, r5
 8007d78:	4798      	blx	r3
 8007d7a:	f000 f8d7 	bl	8007f2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007d7e:	6843      	ldr	r3, [r0, #4]
 8007d80:	f104 0118 	add.w	r1, r4, #24
 8007d84:	4628      	mov	r0, r5
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d8c:	4718      	bx	r3
 8007d8e:	4608      	mov	r0, r1
 8007d90:	bd70      	pop	{r4, r5, r6, pc}
 8007d92:	bf00      	nop

08007d94 <_Twist__cdr_serialize>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	9101      	str	r1, [sp, #4]
 8007d9a:	b190      	cbz	r0, 8007dc2 <_Twist__cdr_serialize+0x2e>
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	f000 f8c5 	bl	8007f2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007da2:	6843      	ldr	r3, [r0, #4]
 8007da4:	9901      	ldr	r1, [sp, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	4620      	mov	r0, r4
 8007daa:	4798      	blx	r3
 8007dac:	f000 f8be 	bl	8007f2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007db0:	6843      	ldr	r3, [r0, #4]
 8007db2:	9901      	ldr	r1, [sp, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f104 0018 	add.w	r0, r4, #24
 8007dba:	b002      	add	sp, #8
 8007dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc0:	4718      	bx	r3
 8007dc2:	b002      	add	sp, #8
 8007dc4:	bd10      	pop	{r4, pc}
 8007dc6:	bf00      	nop

08007dc8 <_Twist__get_serialized_size>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4604      	mov	r4, r0
 8007dcc:	b148      	cbz	r0, 8007de2 <_Twist__get_serialized_size+0x1a>
 8007dce:	2100      	movs	r1, #0
 8007dd0:	f000 f820 	bl	8007e14 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	f104 0018 	add.w	r0, r4, #24
 8007ddc:	f000 f81a 	bl	8007e14 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007de0:	4428      	add	r0, r5
 8007de2:	bd38      	pop	{r3, r4, r5, pc}

08007de4 <_Twist__max_serialized_size>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	2301      	movs	r3, #1
 8007dea:	2100      	movs	r1, #0
 8007dec:	f10d 0007 	add.w	r0, sp, #7
 8007df0:	f88d 3007 	strb.w	r3, [sp, #7]
 8007df4:	f000 f87e 	bl	8007ef4 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007df8:	4604      	mov	r4, r0
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	f10d 0007 	add.w	r0, sp, #7
 8007e00:	f000 f878 	bl	8007ef4 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007e04:	4420      	add	r0, r4
 8007e06:	b002      	add	sp, #8
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	bf00      	nop

08007e0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007e0c:	4800      	ldr	r0, [pc, #0]	; (8007e10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 8007e0e:	4770      	bx	lr
 8007e10:	2000016c 	.word	0x2000016c

08007e14 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8007e14:	b1b8      	cbz	r0, 8007e46 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8007e16:	b538      	push	{r3, r4, r5, lr}
 8007e18:	460d      	mov	r5, r1
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	2108      	movs	r1, #8
 8007e1e:	f001 f9fd 	bl	800921c <ucdr_alignment>
 8007e22:	f105 0308 	add.w	r3, r5, #8
 8007e26:	181c      	adds	r4, r3, r0
 8007e28:	2108      	movs	r1, #8
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f001 f9f6 	bl	800921c <ucdr_alignment>
 8007e30:	3008      	adds	r0, #8
 8007e32:	4404      	add	r4, r0
 8007e34:	2108      	movs	r1, #8
 8007e36:	4620      	mov	r0, r4
 8007e38:	f001 f9f0 	bl	800921c <ucdr_alignment>
 8007e3c:	f1c5 0508 	rsb	r5, r5, #8
 8007e40:	4428      	add	r0, r5
 8007e42:	4420      	add	r0, r4
 8007e44:	bd38      	pop	{r3, r4, r5, pc}
 8007e46:	4770      	bx	lr

08007e48 <_Vector3__cdr_deserialize>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	b171      	cbz	r1, 8007e6c <_Vector3__cdr_deserialize+0x24>
 8007e4e:	4605      	mov	r5, r0
 8007e50:	f001 f8c6 	bl	8008fe0 <ucdr_deserialize_double>
 8007e54:	f104 0108 	add.w	r1, r4, #8
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f001 f8c1 	bl	8008fe0 <ucdr_deserialize_double>
 8007e5e:	f104 0110 	add.w	r1, r4, #16
 8007e62:	4628      	mov	r0, r5
 8007e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e68:	f001 b8ba 	b.w	8008fe0 <ucdr_deserialize_double>
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}

08007e70 <_Vector3__cdr_serialize>:
 8007e70:	b198      	cbz	r0, 8007e9a <_Vector3__cdr_serialize+0x2a>
 8007e72:	b538      	push	{r3, r4, r5, lr}
 8007e74:	ed90 0b00 	vldr	d0, [r0]
 8007e78:	460d      	mov	r5, r1
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	f000 ffdf 	bl	8008e40 <ucdr_serialize_double>
 8007e82:	ed94 0b02 	vldr	d0, [r4, #8]
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 ffda 	bl	8008e40 <ucdr_serialize_double>
 8007e8c:	ed94 0b04 	vldr	d0, [r4, #16]
 8007e90:	4628      	mov	r0, r5
 8007e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e96:	f000 bfd3 	b.w	8008e40 <ucdr_serialize_double>
 8007e9a:	4770      	bx	lr

08007e9c <_Vector3__get_serialized_size>:
 8007e9c:	b198      	cbz	r0, 8007ec6 <_Vector3__get_serialized_size+0x2a>
 8007e9e:	b510      	push	{r4, lr}
 8007ea0:	2108      	movs	r1, #8
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	f001 f9ba 	bl	800921c <ucdr_alignment>
 8007ea8:	f100 0408 	add.w	r4, r0, #8
 8007eac:	2108      	movs	r1, #8
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f001 f9b4 	bl	800921c <ucdr_alignment>
 8007eb4:	3008      	adds	r0, #8
 8007eb6:	4404      	add	r4, r0
 8007eb8:	2108      	movs	r1, #8
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f001 f9ae 	bl	800921c <ucdr_alignment>
 8007ec0:	3008      	adds	r0, #8
 8007ec2:	4420      	add	r0, r4
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	4770      	bx	lr

08007ec8 <_Vector3__max_serialized_size>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	2108      	movs	r1, #8
 8007ecc:	2000      	movs	r0, #0
 8007ece:	f001 f9a5 	bl	800921c <ucdr_alignment>
 8007ed2:	f100 0508 	add.w	r5, r0, #8
 8007ed6:	2108      	movs	r1, #8
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f001 f99f 	bl	800921c <ucdr_alignment>
 8007ede:	f100 0408 	add.w	r4, r0, #8
 8007ee2:	442c      	add	r4, r5
 8007ee4:	2108      	movs	r1, #8
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f001 f998 	bl	800921c <ucdr_alignment>
 8007eec:	3008      	adds	r0, #8
 8007eee:	4420      	add	r0, r4
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	bf00      	nop

08007ef4 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	460c      	mov	r4, r1
 8007efa:	7003      	strb	r3, [r0, #0]
 8007efc:	2108      	movs	r1, #8
 8007efe:	4620      	mov	r0, r4
 8007f00:	f001 f98c 	bl	800921c <ucdr_alignment>
 8007f04:	f104 0508 	add.w	r5, r4, #8
 8007f08:	1946      	adds	r6, r0, r5
 8007f0a:	2108      	movs	r1, #8
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f001 f985 	bl	800921c <ucdr_alignment>
 8007f12:	f100 0508 	add.w	r5, r0, #8
 8007f16:	4435      	add	r5, r6
 8007f18:	2108      	movs	r1, #8
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f001 f97e 	bl	800921c <ucdr_alignment>
 8007f20:	f1c4 0408 	rsb	r4, r4, #8
 8007f24:	4420      	add	r0, r4
 8007f26:	4428      	add	r0, r5
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	bf00      	nop

08007f2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8007f2c:	4800      	ldr	r0, [pc, #0]	; (8007f30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8007f2e:	4770      	bx	lr
 8007f30:	20000194 	.word	0x20000194

08007f34 <ucdr_serialize_bool>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	460d      	mov	r5, r1
 8007f38:	2101      	movs	r1, #1
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	f001 f922 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8007f40:	b148      	cbz	r0, 8007f56 <ucdr_serialize_bool+0x22>
 8007f42:	68a3      	ldr	r3, [r4, #8]
 8007f44:	701d      	strb	r5, [r3, #0]
 8007f46:	68a2      	ldr	r2, [r4, #8]
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	440a      	add	r2, r1
 8007f4e:	440b      	add	r3, r1
 8007f50:	60a2      	str	r2, [r4, #8]
 8007f52:	6123      	str	r3, [r4, #16]
 8007f54:	7561      	strb	r1, [r4, #21]
 8007f56:	7da0      	ldrb	r0, [r4, #22]
 8007f58:	f080 0001 	eor.w	r0, r0, #1
 8007f5c:	bd38      	pop	{r3, r4, r5, pc}
 8007f5e:	bf00      	nop

08007f60 <ucdr_deserialize_bool>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	460d      	mov	r5, r1
 8007f64:	2101      	movs	r1, #1
 8007f66:	4604      	mov	r4, r0
 8007f68:	f001 f90c 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8007f6c:	b160      	cbz	r0, 8007f88 <ucdr_deserialize_bool+0x28>
 8007f6e:	68a2      	ldr	r2, [r4, #8]
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007f76:	3900      	subs	r1, #0
 8007f78:	bf18      	it	ne
 8007f7a:	2101      	movne	r1, #1
 8007f7c:	7029      	strb	r1, [r5, #0]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	2101      	movs	r1, #1
 8007f82:	60a2      	str	r2, [r4, #8]
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	7561      	strb	r1, [r4, #21]
 8007f88:	7da0      	ldrb	r0, [r4, #22]
 8007f8a:	f080 0001 	eor.w	r0, r0, #1
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}

08007f90 <ucdr_serialize_uint8_t>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	460d      	mov	r5, r1
 8007f94:	2101      	movs	r1, #1
 8007f96:	4604      	mov	r4, r0
 8007f98:	f001 f8f4 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8007f9c:	b148      	cbz	r0, 8007fb2 <ucdr_serialize_uint8_t+0x22>
 8007f9e:	68a3      	ldr	r3, [r4, #8]
 8007fa0:	701d      	strb	r5, [r3, #0]
 8007fa2:	68a2      	ldr	r2, [r4, #8]
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	440a      	add	r2, r1
 8007faa:	440b      	add	r3, r1
 8007fac:	60a2      	str	r2, [r4, #8]
 8007fae:	6123      	str	r3, [r4, #16]
 8007fb0:	7561      	strb	r1, [r4, #21]
 8007fb2:	7da0      	ldrb	r0, [r4, #22]
 8007fb4:	f080 0001 	eor.w	r0, r0, #1
 8007fb8:	bd38      	pop	{r3, r4, r5, pc}
 8007fba:	bf00      	nop

08007fbc <ucdr_deserialize_uint8_t>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	f001 f8de 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8007fc8:	b150      	cbz	r0, 8007fe0 <ucdr_deserialize_uint8_t+0x24>
 8007fca:	68a3      	ldr	r3, [r4, #8]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	702b      	strb	r3, [r5, #0]
 8007fd0:	68a2      	ldr	r2, [r4, #8]
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	440a      	add	r2, r1
 8007fd8:	440b      	add	r3, r1
 8007fda:	60a2      	str	r2, [r4, #8]
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	7561      	strb	r1, [r4, #21]
 8007fe0:	7da0      	ldrb	r0, [r4, #22]
 8007fe2:	f080 0001 	eor.w	r0, r0, #1
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}

08007fe8 <ucdr_serialize_uint16_t>:
 8007fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	460b      	mov	r3, r1
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007ff8:	f001 f918 	bl	800922c <ucdr_buffer_alignment>
 8007ffc:	4601      	mov	r1, r0
 8007ffe:	4620      	mov	r0, r4
 8008000:	7d67      	ldrb	r7, [r4, #21]
 8008002:	f001 f957 	bl	80092b4 <ucdr_advance_buffer>
 8008006:	2102      	movs	r1, #2
 8008008:	4620      	mov	r0, r4
 800800a:	f001 f8af 	bl	800916c <ucdr_check_buffer_available_for>
 800800e:	bb78      	cbnz	r0, 8008070 <ucdr_serialize_uint16_t+0x88>
 8008010:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008014:	42ab      	cmp	r3, r5
 8008016:	d926      	bls.n	8008066 <ucdr_serialize_uint16_t+0x7e>
 8008018:	1b5e      	subs	r6, r3, r5
 800801a:	60a3      	str	r3, [r4, #8]
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	f1c6 0802 	rsb	r8, r6, #2
 8008022:	4433      	add	r3, r6
 8008024:	6123      	str	r3, [r4, #16]
 8008026:	4641      	mov	r1, r8
 8008028:	4620      	mov	r0, r4
 800802a:	f001 f8ab 	bl	8009184 <ucdr_check_final_buffer_behavior>
 800802e:	2800      	cmp	r0, #0
 8008030:	d03b      	beq.n	80080aa <ucdr_serialize_uint16_t+0xc2>
 8008032:	7d23      	ldrb	r3, [r4, #20]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d04a      	beq.n	80080ce <ucdr_serialize_uint16_t+0xe6>
 8008038:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800803c:	702b      	strb	r3, [r5, #0]
 800803e:	2e00      	cmp	r6, #0
 8008040:	d040      	beq.n	80080c4 <ucdr_serialize_uint16_t+0xdc>
 8008042:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008046:	706b      	strb	r3, [r5, #1]
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	68a2      	ldr	r2, [r4, #8]
 800804c:	7da0      	ldrb	r0, [r4, #22]
 800804e:	3302      	adds	r3, #2
 8008050:	1b9e      	subs	r6, r3, r6
 8008052:	4442      	add	r2, r8
 8008054:	2302      	movs	r3, #2
 8008056:	f080 0001 	eor.w	r0, r0, #1
 800805a:	60a2      	str	r2, [r4, #8]
 800805c:	6126      	str	r6, [r4, #16]
 800805e:	7563      	strb	r3, [r4, #21]
 8008060:	b002      	add	sp, #8
 8008062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008066:	2102      	movs	r1, #2
 8008068:	4620      	mov	r0, r4
 800806a:	f001 f88b 	bl	8009184 <ucdr_check_final_buffer_behavior>
 800806e:	b190      	cbz	r0, 8008096 <ucdr_serialize_uint16_t+0xae>
 8008070:	7d23      	ldrb	r3, [r4, #20]
 8008072:	2b01      	cmp	r3, #1
 8008074:	68a3      	ldr	r3, [r4, #8]
 8008076:	d014      	beq.n	80080a2 <ucdr_serialize_uint16_t+0xba>
 8008078:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008084:	705a      	strb	r2, [r3, #1]
 8008086:	68a2      	ldr	r2, [r4, #8]
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	3202      	adds	r2, #2
 800808c:	3302      	adds	r3, #2
 800808e:	2102      	movs	r1, #2
 8008090:	60a2      	str	r2, [r4, #8]
 8008092:	6123      	str	r3, [r4, #16]
 8008094:	7561      	strb	r1, [r4, #21]
 8008096:	7da0      	ldrb	r0, [r4, #22]
 8008098:	f080 0001 	eor.w	r0, r0, #1
 800809c:	b002      	add	sp, #8
 800809e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80080a6:	801a      	strh	r2, [r3, #0]
 80080a8:	e7ed      	b.n	8008086 <ucdr_serialize_uint16_t+0x9e>
 80080aa:	68a2      	ldr	r2, [r4, #8]
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	7da0      	ldrb	r0, [r4, #22]
 80080b0:	7567      	strb	r7, [r4, #21]
 80080b2:	1b92      	subs	r2, r2, r6
 80080b4:	1b9b      	subs	r3, r3, r6
 80080b6:	f080 0001 	eor.w	r0, r0, #1
 80080ba:	60a2      	str	r2, [r4, #8]
 80080bc:	6123      	str	r3, [r4, #16]
 80080be:	b002      	add	sp, #8
 80080c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c4:	68a3      	ldr	r3, [r4, #8]
 80080c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80080ca:	701a      	strb	r2, [r3, #0]
 80080cc:	e7bc      	b.n	8008048 <ucdr_serialize_uint16_t+0x60>
 80080ce:	4628      	mov	r0, r5
 80080d0:	f10d 0506 	add.w	r5, sp, #6
 80080d4:	4629      	mov	r1, r5
 80080d6:	4632      	mov	r2, r6
 80080d8:	f00d f9cf 	bl	801547a <memcpy>
 80080dc:	68a0      	ldr	r0, [r4, #8]
 80080de:	4642      	mov	r2, r8
 80080e0:	19a9      	adds	r1, r5, r6
 80080e2:	f00d f9ca 	bl	801547a <memcpy>
 80080e6:	e7af      	b.n	8008048 <ucdr_serialize_uint16_t+0x60>

080080e8 <ucdr_serialize_endian_uint16_t>:
 80080e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080ec:	b083      	sub	sp, #12
 80080ee:	460d      	mov	r5, r1
 80080f0:	2102      	movs	r1, #2
 80080f2:	4604      	mov	r4, r0
 80080f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80080f8:	f001 f898 	bl	800922c <ucdr_buffer_alignment>
 80080fc:	4601      	mov	r1, r0
 80080fe:	4620      	mov	r0, r4
 8008100:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008104:	f001 f8d6 	bl	80092b4 <ucdr_advance_buffer>
 8008108:	2102      	movs	r1, #2
 800810a:	4620      	mov	r0, r4
 800810c:	f001 f82e 	bl	800916c <ucdr_check_buffer_available_for>
 8008110:	bb70      	cbnz	r0, 8008170 <ucdr_serialize_endian_uint16_t+0x88>
 8008112:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008116:	42be      	cmp	r6, r7
 8008118:	d925      	bls.n	8008166 <ucdr_serialize_endian_uint16_t+0x7e>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	60a6      	str	r6, [r4, #8]
 800811e:	1bf6      	subs	r6, r6, r7
 8008120:	4433      	add	r3, r6
 8008122:	f1c6 0902 	rsb	r9, r6, #2
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	4649      	mov	r1, r9
 800812a:	4620      	mov	r0, r4
 800812c:	f001 f82a 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008130:	2800      	cmp	r0, #0
 8008132:	d039      	beq.n	80081a8 <ucdr_serialize_endian_uint16_t+0xc0>
 8008134:	2d01      	cmp	r5, #1
 8008136:	d04a      	beq.n	80081ce <ucdr_serialize_endian_uint16_t+0xe6>
 8008138:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800813c:	703b      	strb	r3, [r7, #0]
 800813e:	2e00      	cmp	r6, #0
 8008140:	d040      	beq.n	80081c4 <ucdr_serialize_endian_uint16_t+0xdc>
 8008142:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008146:	707b      	strb	r3, [r7, #1]
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	68a2      	ldr	r2, [r4, #8]
 800814c:	7da0      	ldrb	r0, [r4, #22]
 800814e:	3302      	adds	r3, #2
 8008150:	444a      	add	r2, r9
 8008152:	1b9b      	subs	r3, r3, r6
 8008154:	2102      	movs	r1, #2
 8008156:	f080 0001 	eor.w	r0, r0, #1
 800815a:	60a2      	str	r2, [r4, #8]
 800815c:	6123      	str	r3, [r4, #16]
 800815e:	7561      	strb	r1, [r4, #21]
 8008160:	b003      	add	sp, #12
 8008162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008166:	2102      	movs	r1, #2
 8008168:	4620      	mov	r0, r4
 800816a:	f001 f80b 	bl	8009184 <ucdr_check_final_buffer_behavior>
 800816e:	b188      	cbz	r0, 8008194 <ucdr_serialize_endian_uint16_t+0xac>
 8008170:	2d01      	cmp	r5, #1
 8008172:	68a3      	ldr	r3, [r4, #8]
 8008174:	d014      	beq.n	80081a0 <ucdr_serialize_endian_uint16_t+0xb8>
 8008176:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	68a3      	ldr	r3, [r4, #8]
 800817e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008182:	705a      	strb	r2, [r3, #1]
 8008184:	68a2      	ldr	r2, [r4, #8]
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	3202      	adds	r2, #2
 800818a:	3302      	adds	r3, #2
 800818c:	2102      	movs	r1, #2
 800818e:	60a2      	str	r2, [r4, #8]
 8008190:	6123      	str	r3, [r4, #16]
 8008192:	7561      	strb	r1, [r4, #21]
 8008194:	7da0      	ldrb	r0, [r4, #22]
 8008196:	f080 0001 	eor.w	r0, r0, #1
 800819a:	b003      	add	sp, #12
 800819c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	e7ed      	b.n	8008184 <ucdr_serialize_endian_uint16_t+0x9c>
 80081a8:	68a2      	ldr	r2, [r4, #8]
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	7da0      	ldrb	r0, [r4, #22]
 80081ae:	f884 8015 	strb.w	r8, [r4, #21]
 80081b2:	1b92      	subs	r2, r2, r6
 80081b4:	1b9b      	subs	r3, r3, r6
 80081b6:	f080 0001 	eor.w	r0, r0, #1
 80081ba:	60a2      	str	r2, [r4, #8]
 80081bc:	6123      	str	r3, [r4, #16]
 80081be:	b003      	add	sp, #12
 80081c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	e7bc      	b.n	8008148 <ucdr_serialize_endian_uint16_t+0x60>
 80081ce:	f10d 0506 	add.w	r5, sp, #6
 80081d2:	4629      	mov	r1, r5
 80081d4:	4632      	mov	r2, r6
 80081d6:	4638      	mov	r0, r7
 80081d8:	f00d f94f 	bl	801547a <memcpy>
 80081dc:	68a0      	ldr	r0, [r4, #8]
 80081de:	464a      	mov	r2, r9
 80081e0:	19a9      	adds	r1, r5, r6
 80081e2:	f00d f94a 	bl	801547a <memcpy>
 80081e6:	e7af      	b.n	8008148 <ucdr_serialize_endian_uint16_t+0x60>

080081e8 <ucdr_deserialize_uint16_t>:
 80081e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ec:	460d      	mov	r5, r1
 80081ee:	2102      	movs	r1, #2
 80081f0:	4604      	mov	r4, r0
 80081f2:	f001 f81b 	bl	800922c <ucdr_buffer_alignment>
 80081f6:	4601      	mov	r1, r0
 80081f8:	4620      	mov	r0, r4
 80081fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80081fe:	f001 f859 	bl	80092b4 <ucdr_advance_buffer>
 8008202:	2102      	movs	r1, #2
 8008204:	4620      	mov	r0, r4
 8008206:	f000 ffb1 	bl	800916c <ucdr_check_buffer_available_for>
 800820a:	bb60      	cbnz	r0, 8008266 <ucdr_deserialize_uint16_t+0x7e>
 800820c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008210:	42be      	cmp	r6, r7
 8008212:	d923      	bls.n	800825c <ucdr_deserialize_uint16_t+0x74>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	60a6      	str	r6, [r4, #8]
 8008218:	1bf6      	subs	r6, r6, r7
 800821a:	4433      	add	r3, r6
 800821c:	f1c6 0902 	rsb	r9, r6, #2
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	4649      	mov	r1, r9
 8008224:	4620      	mov	r0, r4
 8008226:	f000 ffad 	bl	8009184 <ucdr_check_final_buffer_behavior>
 800822a:	2800      	cmp	r0, #0
 800822c:	d034      	beq.n	8008298 <ucdr_deserialize_uint16_t+0xb0>
 800822e:	7d23      	ldrb	r3, [r4, #20]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d042      	beq.n	80082ba <ucdr_deserialize_uint16_t+0xd2>
 8008234:	787b      	ldrb	r3, [r7, #1]
 8008236:	702b      	strb	r3, [r5, #0]
 8008238:	2e00      	cmp	r6, #0
 800823a:	d03a      	beq.n	80082b2 <ucdr_deserialize_uint16_t+0xca>
 800823c:	783b      	ldrb	r3, [r7, #0]
 800823e:	706b      	strb	r3, [r5, #1]
 8008240:	6923      	ldr	r3, [r4, #16]
 8008242:	68a2      	ldr	r2, [r4, #8]
 8008244:	7da0      	ldrb	r0, [r4, #22]
 8008246:	2102      	movs	r1, #2
 8008248:	3302      	adds	r3, #2
 800824a:	444a      	add	r2, r9
 800824c:	1b9b      	subs	r3, r3, r6
 800824e:	7561      	strb	r1, [r4, #21]
 8008250:	60a2      	str	r2, [r4, #8]
 8008252:	6123      	str	r3, [r4, #16]
 8008254:	f080 0001 	eor.w	r0, r0, #1
 8008258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800825c:	2102      	movs	r1, #2
 800825e:	4620      	mov	r0, r4
 8008260:	f000 ff90 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008264:	b180      	cbz	r0, 8008288 <ucdr_deserialize_uint16_t+0xa0>
 8008266:	7d23      	ldrb	r3, [r4, #20]
 8008268:	2b01      	cmp	r3, #1
 800826a:	68a3      	ldr	r3, [r4, #8]
 800826c:	d011      	beq.n	8008292 <ucdr_deserialize_uint16_t+0xaa>
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	702b      	strb	r3, [r5, #0]
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	706b      	strb	r3, [r5, #1]
 8008278:	68a2      	ldr	r2, [r4, #8]
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	3202      	adds	r2, #2
 800827e:	3302      	adds	r3, #2
 8008280:	2102      	movs	r1, #2
 8008282:	60a2      	str	r2, [r4, #8]
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	7561      	strb	r1, [r4, #21]
 8008288:	7da0      	ldrb	r0, [r4, #22]
 800828a:	f080 0001 	eor.w	r0, r0, #1
 800828e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	802b      	strh	r3, [r5, #0]
 8008296:	e7ef      	b.n	8008278 <ucdr_deserialize_uint16_t+0x90>
 8008298:	68a2      	ldr	r2, [r4, #8]
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	7da0      	ldrb	r0, [r4, #22]
 800829e:	f884 8015 	strb.w	r8, [r4, #21]
 80082a2:	1b92      	subs	r2, r2, r6
 80082a4:	1b9b      	subs	r3, r3, r6
 80082a6:	60a2      	str	r2, [r4, #8]
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	f080 0001 	eor.w	r0, r0, #1
 80082ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b2:	68a3      	ldr	r3, [r4, #8]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	706b      	strb	r3, [r5, #1]
 80082b8:	e7c2      	b.n	8008240 <ucdr_deserialize_uint16_t+0x58>
 80082ba:	4639      	mov	r1, r7
 80082bc:	4632      	mov	r2, r6
 80082be:	4628      	mov	r0, r5
 80082c0:	f00d f8db 	bl	801547a <memcpy>
 80082c4:	68a1      	ldr	r1, [r4, #8]
 80082c6:	464a      	mov	r2, r9
 80082c8:	19a8      	adds	r0, r5, r6
 80082ca:	f00d f8d6 	bl	801547a <memcpy>
 80082ce:	e7b7      	b.n	8008240 <ucdr_deserialize_uint16_t+0x58>

080082d0 <ucdr_deserialize_endian_uint16_t>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	460e      	mov	r6, r1
 80082d6:	2102      	movs	r1, #2
 80082d8:	4604      	mov	r4, r0
 80082da:	4615      	mov	r5, r2
 80082dc:	f000 ffa6 	bl	800922c <ucdr_buffer_alignment>
 80082e0:	4601      	mov	r1, r0
 80082e2:	4620      	mov	r0, r4
 80082e4:	f894 9015 	ldrb.w	r9, [r4, #21]
 80082e8:	f000 ffe4 	bl	80092b4 <ucdr_advance_buffer>
 80082ec:	2102      	movs	r1, #2
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 ff3c 	bl	800916c <ucdr_check_buffer_available_for>
 80082f4:	bb70      	cbnz	r0, 8008354 <ucdr_deserialize_endian_uint16_t+0x84>
 80082f6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80082fa:	4547      	cmp	r7, r8
 80082fc:	d925      	bls.n	800834a <ucdr_deserialize_endian_uint16_t+0x7a>
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	60a7      	str	r7, [r4, #8]
 8008302:	eba7 0708 	sub.w	r7, r7, r8
 8008306:	443b      	add	r3, r7
 8008308:	f1c7 0a02 	rsb	sl, r7, #2
 800830c:	6123      	str	r3, [r4, #16]
 800830e:	4651      	mov	r1, sl
 8008310:	4620      	mov	r0, r4
 8008312:	f000 ff37 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008316:	2800      	cmp	r0, #0
 8008318:	d034      	beq.n	8008384 <ucdr_deserialize_endian_uint16_t+0xb4>
 800831a:	2e01      	cmp	r6, #1
 800831c:	d043      	beq.n	80083a6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800831e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008322:	702b      	strb	r3, [r5, #0]
 8008324:	2f00      	cmp	r7, #0
 8008326:	d03a      	beq.n	800839e <ucdr_deserialize_endian_uint16_t+0xce>
 8008328:	f898 3000 	ldrb.w	r3, [r8]
 800832c:	706b      	strb	r3, [r5, #1]
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	68a2      	ldr	r2, [r4, #8]
 8008332:	7da0      	ldrb	r0, [r4, #22]
 8008334:	2102      	movs	r1, #2
 8008336:	3302      	adds	r3, #2
 8008338:	4452      	add	r2, sl
 800833a:	1bdb      	subs	r3, r3, r7
 800833c:	7561      	strb	r1, [r4, #21]
 800833e:	60a2      	str	r2, [r4, #8]
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	f080 0001 	eor.w	r0, r0, #1
 8008346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834a:	2102      	movs	r1, #2
 800834c:	4620      	mov	r0, r4
 800834e:	f000 ff19 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008352:	b178      	cbz	r0, 8008374 <ucdr_deserialize_endian_uint16_t+0xa4>
 8008354:	2e01      	cmp	r6, #1
 8008356:	68a3      	ldr	r3, [r4, #8]
 8008358:	d011      	beq.n	800837e <ucdr_deserialize_endian_uint16_t+0xae>
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	702b      	strb	r3, [r5, #0]
 800835e:	68a3      	ldr	r3, [r4, #8]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	706b      	strb	r3, [r5, #1]
 8008364:	68a2      	ldr	r2, [r4, #8]
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	3202      	adds	r2, #2
 800836a:	3302      	adds	r3, #2
 800836c:	2102      	movs	r1, #2
 800836e:	60a2      	str	r2, [r4, #8]
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	7561      	strb	r1, [r4, #21]
 8008374:	7da0      	ldrb	r0, [r4, #22]
 8008376:	f080 0001 	eor.w	r0, r0, #1
 800837a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	802b      	strh	r3, [r5, #0]
 8008382:	e7ef      	b.n	8008364 <ucdr_deserialize_endian_uint16_t+0x94>
 8008384:	68a2      	ldr	r2, [r4, #8]
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	7da0      	ldrb	r0, [r4, #22]
 800838a:	f884 9015 	strb.w	r9, [r4, #21]
 800838e:	1bd2      	subs	r2, r2, r7
 8008390:	1bdb      	subs	r3, r3, r7
 8008392:	60a2      	str	r2, [r4, #8]
 8008394:	6123      	str	r3, [r4, #16]
 8008396:	f080 0001 	eor.w	r0, r0, #1
 800839a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839e:	68a3      	ldr	r3, [r4, #8]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	706b      	strb	r3, [r5, #1]
 80083a4:	e7c3      	b.n	800832e <ucdr_deserialize_endian_uint16_t+0x5e>
 80083a6:	4641      	mov	r1, r8
 80083a8:	463a      	mov	r2, r7
 80083aa:	4628      	mov	r0, r5
 80083ac:	f00d f865 	bl	801547a <memcpy>
 80083b0:	68a1      	ldr	r1, [r4, #8]
 80083b2:	4652      	mov	r2, sl
 80083b4:	19e8      	adds	r0, r5, r7
 80083b6:	f00d f860 	bl	801547a <memcpy>
 80083ba:	e7b8      	b.n	800832e <ucdr_deserialize_endian_uint16_t+0x5e>

080083bc <ucdr_serialize_uint32_t>:
 80083bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	4604      	mov	r4, r0
 80083c4:	9101      	str	r1, [sp, #4]
 80083c6:	2104      	movs	r1, #4
 80083c8:	f000 ff30 	bl	800922c <ucdr_buffer_alignment>
 80083cc:	4601      	mov	r1, r0
 80083ce:	4620      	mov	r0, r4
 80083d0:	7d67      	ldrb	r7, [r4, #21]
 80083d2:	f000 ff6f 	bl	80092b4 <ucdr_advance_buffer>
 80083d6:	2104      	movs	r1, #4
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 fec7 	bl	800916c <ucdr_check_buffer_available_for>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d139      	bne.n	8008456 <ucdr_serialize_uint32_t+0x9a>
 80083e2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80083e6:	42ab      	cmp	r3, r5
 80083e8:	d930      	bls.n	800844c <ucdr_serialize_uint32_t+0x90>
 80083ea:	1b5e      	subs	r6, r3, r5
 80083ec:	60a3      	str	r3, [r4, #8]
 80083ee:	6923      	ldr	r3, [r4, #16]
 80083f0:	f1c6 0804 	rsb	r8, r6, #4
 80083f4:	4433      	add	r3, r6
 80083f6:	6123      	str	r3, [r4, #16]
 80083f8:	4641      	mov	r1, r8
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fec2 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008400:	2800      	cmp	r0, #0
 8008402:	d04c      	beq.n	800849e <ucdr_serialize_uint32_t+0xe2>
 8008404:	7d23      	ldrb	r3, [r4, #20]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d063      	beq.n	80084d2 <ucdr_serialize_uint32_t+0x116>
 800840a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800840e:	702b      	strb	r3, [r5, #0]
 8008410:	2e00      	cmp	r6, #0
 8008412:	d051      	beq.n	80084b8 <ucdr_serialize_uint32_t+0xfc>
 8008414:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008418:	706b      	strb	r3, [r5, #1]
 800841a:	2e01      	cmp	r6, #1
 800841c:	d050      	beq.n	80084c0 <ucdr_serialize_uint32_t+0x104>
 800841e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008422:	70ab      	strb	r3, [r5, #2]
 8008424:	2e02      	cmp	r6, #2
 8008426:	d04f      	beq.n	80084c8 <ucdr_serialize_uint32_t+0x10c>
 8008428:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800842c:	70eb      	strb	r3, [r5, #3]
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	68a2      	ldr	r2, [r4, #8]
 8008432:	7da0      	ldrb	r0, [r4, #22]
 8008434:	3304      	adds	r3, #4
 8008436:	1b9e      	subs	r6, r3, r6
 8008438:	4442      	add	r2, r8
 800843a:	2304      	movs	r3, #4
 800843c:	f080 0001 	eor.w	r0, r0, #1
 8008440:	60a2      	str	r2, [r4, #8]
 8008442:	6126      	str	r6, [r4, #16]
 8008444:	7563      	strb	r3, [r4, #21]
 8008446:	b002      	add	sp, #8
 8008448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800844c:	2104      	movs	r1, #4
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fe98 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008454:	b1d0      	cbz	r0, 800848c <ucdr_serialize_uint32_t+0xd0>
 8008456:	7d23      	ldrb	r3, [r4, #20]
 8008458:	2b01      	cmp	r3, #1
 800845a:	68a3      	ldr	r3, [r4, #8]
 800845c:	d01c      	beq.n	8008498 <ucdr_serialize_uint32_t+0xdc>
 800845e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800846a:	705a      	strb	r2, [r3, #1]
 800846c:	68a3      	ldr	r3, [r4, #8]
 800846e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008472:	709a      	strb	r2, [r3, #2]
 8008474:	68a3      	ldr	r3, [r4, #8]
 8008476:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800847a:	70da      	strb	r2, [r3, #3]
 800847c:	68a2      	ldr	r2, [r4, #8]
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	3204      	adds	r2, #4
 8008482:	3304      	adds	r3, #4
 8008484:	2104      	movs	r1, #4
 8008486:	60a2      	str	r2, [r4, #8]
 8008488:	6123      	str	r3, [r4, #16]
 800848a:	7561      	strb	r1, [r4, #21]
 800848c:	7da0      	ldrb	r0, [r4, #22]
 800848e:	f080 0001 	eor.w	r0, r0, #1
 8008492:	b002      	add	sp, #8
 8008494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008498:	9a01      	ldr	r2, [sp, #4]
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e7ee      	b.n	800847c <ucdr_serialize_uint32_t+0xc0>
 800849e:	68a2      	ldr	r2, [r4, #8]
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	7da0      	ldrb	r0, [r4, #22]
 80084a4:	7567      	strb	r7, [r4, #21]
 80084a6:	1b92      	subs	r2, r2, r6
 80084a8:	1b9b      	subs	r3, r3, r6
 80084aa:	f080 0001 	eor.w	r0, r0, #1
 80084ae:	60a2      	str	r2, [r4, #8]
 80084b0:	6123      	str	r3, [r4, #16]
 80084b2:	b002      	add	sp, #8
 80084b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b8:	68a3      	ldr	r3, [r4, #8]
 80084ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80084be:	701a      	strb	r2, [r3, #0]
 80084c0:	68a3      	ldr	r3, [r4, #8]
 80084c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80084ce:	701a      	strb	r2, [r3, #0]
 80084d0:	e7ad      	b.n	800842e <ucdr_serialize_uint32_t+0x72>
 80084d2:	4628      	mov	r0, r5
 80084d4:	ad01      	add	r5, sp, #4
 80084d6:	4629      	mov	r1, r5
 80084d8:	4632      	mov	r2, r6
 80084da:	f00c ffce 	bl	801547a <memcpy>
 80084de:	68a0      	ldr	r0, [r4, #8]
 80084e0:	4642      	mov	r2, r8
 80084e2:	19a9      	adds	r1, r5, r6
 80084e4:	f00c ffc9 	bl	801547a <memcpy>
 80084e8:	e7a1      	b.n	800842e <ucdr_serialize_uint32_t+0x72>
 80084ea:	bf00      	nop

080084ec <ucdr_serialize_endian_uint32_t>:
 80084ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084f0:	b083      	sub	sp, #12
 80084f2:	460d      	mov	r5, r1
 80084f4:	2104      	movs	r1, #4
 80084f6:	4604      	mov	r4, r0
 80084f8:	9201      	str	r2, [sp, #4]
 80084fa:	f000 fe97 	bl	800922c <ucdr_buffer_alignment>
 80084fe:	4601      	mov	r1, r0
 8008500:	4620      	mov	r0, r4
 8008502:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008506:	f000 fed5 	bl	80092b4 <ucdr_advance_buffer>
 800850a:	2104      	movs	r1, #4
 800850c:	4620      	mov	r0, r4
 800850e:	f000 fe2d 	bl	800916c <ucdr_check_buffer_available_for>
 8008512:	2800      	cmp	r0, #0
 8008514:	d138      	bne.n	8008588 <ucdr_serialize_endian_uint32_t+0x9c>
 8008516:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800851a:	42b7      	cmp	r7, r6
 800851c:	d92f      	bls.n	800857e <ucdr_serialize_endian_uint32_t+0x92>
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	60a7      	str	r7, [r4, #8]
 8008522:	1bbf      	subs	r7, r7, r6
 8008524:	443b      	add	r3, r7
 8008526:	f1c7 0904 	rsb	r9, r7, #4
 800852a:	6123      	str	r3, [r4, #16]
 800852c:	4649      	mov	r1, r9
 800852e:	4620      	mov	r0, r4
 8008530:	f000 fe28 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008534:	2800      	cmp	r0, #0
 8008536:	d04a      	beq.n	80085ce <ucdr_serialize_endian_uint32_t+0xe2>
 8008538:	2d01      	cmp	r5, #1
 800853a:	d063      	beq.n	8008604 <ucdr_serialize_endian_uint32_t+0x118>
 800853c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008540:	7033      	strb	r3, [r6, #0]
 8008542:	2f00      	cmp	r7, #0
 8008544:	d051      	beq.n	80085ea <ucdr_serialize_endian_uint32_t+0xfe>
 8008546:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800854a:	7073      	strb	r3, [r6, #1]
 800854c:	2f01      	cmp	r7, #1
 800854e:	d050      	beq.n	80085f2 <ucdr_serialize_endian_uint32_t+0x106>
 8008550:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008554:	70b3      	strb	r3, [r6, #2]
 8008556:	2f02      	cmp	r7, #2
 8008558:	d04f      	beq.n	80085fa <ucdr_serialize_endian_uint32_t+0x10e>
 800855a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800855e:	70f3      	strb	r3, [r6, #3]
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	68a2      	ldr	r2, [r4, #8]
 8008564:	7da0      	ldrb	r0, [r4, #22]
 8008566:	3304      	adds	r3, #4
 8008568:	444a      	add	r2, r9
 800856a:	1bdb      	subs	r3, r3, r7
 800856c:	2104      	movs	r1, #4
 800856e:	f080 0001 	eor.w	r0, r0, #1
 8008572:	60a2      	str	r2, [r4, #8]
 8008574:	6123      	str	r3, [r4, #16]
 8008576:	7561      	strb	r1, [r4, #21]
 8008578:	b003      	add	sp, #12
 800857a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800857e:	2104      	movs	r1, #4
 8008580:	4620      	mov	r0, r4
 8008582:	f000 fdff 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008586:	b1c8      	cbz	r0, 80085bc <ucdr_serialize_endian_uint32_t+0xd0>
 8008588:	2d01      	cmp	r5, #1
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	d01c      	beq.n	80085c8 <ucdr_serialize_endian_uint32_t+0xdc>
 800858e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008592:	701a      	strb	r2, [r3, #0]
 8008594:	68a3      	ldr	r3, [r4, #8]
 8008596:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800859a:	705a      	strb	r2, [r3, #1]
 800859c:	68a3      	ldr	r3, [r4, #8]
 800859e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80085a2:	709a      	strb	r2, [r3, #2]
 80085a4:	68a3      	ldr	r3, [r4, #8]
 80085a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80085aa:	70da      	strb	r2, [r3, #3]
 80085ac:	68a2      	ldr	r2, [r4, #8]
 80085ae:	6923      	ldr	r3, [r4, #16]
 80085b0:	3204      	adds	r2, #4
 80085b2:	3304      	adds	r3, #4
 80085b4:	2104      	movs	r1, #4
 80085b6:	60a2      	str	r2, [r4, #8]
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	7561      	strb	r1, [r4, #21]
 80085bc:	7da0      	ldrb	r0, [r4, #22]
 80085be:	f080 0001 	eor.w	r0, r0, #1
 80085c2:	b003      	add	sp, #12
 80085c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085c8:	9a01      	ldr	r2, [sp, #4]
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	e7ee      	b.n	80085ac <ucdr_serialize_endian_uint32_t+0xc0>
 80085ce:	68a2      	ldr	r2, [r4, #8]
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	7da0      	ldrb	r0, [r4, #22]
 80085d4:	f884 8015 	strb.w	r8, [r4, #21]
 80085d8:	1bd2      	subs	r2, r2, r7
 80085da:	1bdb      	subs	r3, r3, r7
 80085dc:	f080 0001 	eor.w	r0, r0, #1
 80085e0:	60a2      	str	r2, [r4, #8]
 80085e2:	6123      	str	r3, [r4, #16]
 80085e4:	b003      	add	sp, #12
 80085e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	68a3      	ldr	r3, [r4, #8]
 80085fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	e7ad      	b.n	8008560 <ucdr_serialize_endian_uint32_t+0x74>
 8008604:	ad01      	add	r5, sp, #4
 8008606:	4629      	mov	r1, r5
 8008608:	463a      	mov	r2, r7
 800860a:	4630      	mov	r0, r6
 800860c:	f00c ff35 	bl	801547a <memcpy>
 8008610:	68a0      	ldr	r0, [r4, #8]
 8008612:	464a      	mov	r2, r9
 8008614:	19e9      	adds	r1, r5, r7
 8008616:	f00c ff30 	bl	801547a <memcpy>
 800861a:	e7a1      	b.n	8008560 <ucdr_serialize_endian_uint32_t+0x74>

0800861c <ucdr_deserialize_uint32_t>:
 800861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008620:	460d      	mov	r5, r1
 8008622:	2104      	movs	r1, #4
 8008624:	4604      	mov	r4, r0
 8008626:	f000 fe01 	bl	800922c <ucdr_buffer_alignment>
 800862a:	4601      	mov	r1, r0
 800862c:	4620      	mov	r0, r4
 800862e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008632:	f000 fe3f 	bl	80092b4 <ucdr_advance_buffer>
 8008636:	2104      	movs	r1, #4
 8008638:	4620      	mov	r0, r4
 800863a:	f000 fd97 	bl	800916c <ucdr_check_buffer_available_for>
 800863e:	2800      	cmp	r0, #0
 8008640:	d138      	bne.n	80086b4 <ucdr_deserialize_uint32_t+0x98>
 8008642:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008646:	42b7      	cmp	r7, r6
 8008648:	d92f      	bls.n	80086aa <ucdr_deserialize_uint32_t+0x8e>
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	60a7      	str	r7, [r4, #8]
 800864e:	1bbf      	subs	r7, r7, r6
 8008650:	443b      	add	r3, r7
 8008652:	f1c7 0904 	rsb	r9, r7, #4
 8008656:	6123      	str	r3, [r4, #16]
 8008658:	4649      	mov	r1, r9
 800865a:	4620      	mov	r0, r4
 800865c:	f000 fd92 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008660:	2800      	cmp	r0, #0
 8008662:	d046      	beq.n	80086f2 <ucdr_deserialize_uint32_t+0xd6>
 8008664:	7d23      	ldrb	r3, [r4, #20]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d05c      	beq.n	8008724 <ucdr_deserialize_uint32_t+0x108>
 800866a:	78f3      	ldrb	r3, [r6, #3]
 800866c:	702b      	strb	r3, [r5, #0]
 800866e:	2f00      	cmp	r7, #0
 8008670:	d04c      	beq.n	800870c <ucdr_deserialize_uint32_t+0xf0>
 8008672:	78b3      	ldrb	r3, [r6, #2]
 8008674:	706b      	strb	r3, [r5, #1]
 8008676:	2f01      	cmp	r7, #1
 8008678:	f105 0302 	add.w	r3, r5, #2
 800867c:	d04a      	beq.n	8008714 <ucdr_deserialize_uint32_t+0xf8>
 800867e:	7873      	ldrb	r3, [r6, #1]
 8008680:	70ab      	strb	r3, [r5, #2]
 8008682:	2f02      	cmp	r7, #2
 8008684:	f105 0303 	add.w	r3, r5, #3
 8008688:	d048      	beq.n	800871c <ucdr_deserialize_uint32_t+0x100>
 800868a:	7833      	ldrb	r3, [r6, #0]
 800868c:	70eb      	strb	r3, [r5, #3]
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	68a2      	ldr	r2, [r4, #8]
 8008692:	7da0      	ldrb	r0, [r4, #22]
 8008694:	2104      	movs	r1, #4
 8008696:	3304      	adds	r3, #4
 8008698:	444a      	add	r2, r9
 800869a:	1bdb      	subs	r3, r3, r7
 800869c:	7561      	strb	r1, [r4, #21]
 800869e:	60a2      	str	r2, [r4, #8]
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	f080 0001 	eor.w	r0, r0, #1
 80086a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086aa:	2104      	movs	r1, #4
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fd69 	bl	8009184 <ucdr_check_final_buffer_behavior>
 80086b2:	b1b0      	cbz	r0, 80086e2 <ucdr_deserialize_uint32_t+0xc6>
 80086b4:	7d23      	ldrb	r3, [r4, #20]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	68a3      	ldr	r3, [r4, #8]
 80086ba:	d017      	beq.n	80086ec <ucdr_deserialize_uint32_t+0xd0>
 80086bc:	78db      	ldrb	r3, [r3, #3]
 80086be:	702b      	strb	r3, [r5, #0]
 80086c0:	68a3      	ldr	r3, [r4, #8]
 80086c2:	789b      	ldrb	r3, [r3, #2]
 80086c4:	706b      	strb	r3, [r5, #1]
 80086c6:	68a3      	ldr	r3, [r4, #8]
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	70ab      	strb	r3, [r5, #2]
 80086cc:	68a3      	ldr	r3, [r4, #8]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	70eb      	strb	r3, [r5, #3]
 80086d2:	68a2      	ldr	r2, [r4, #8]
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	3204      	adds	r2, #4
 80086d8:	3304      	adds	r3, #4
 80086da:	2104      	movs	r1, #4
 80086dc:	60a2      	str	r2, [r4, #8]
 80086de:	6123      	str	r3, [r4, #16]
 80086e0:	7561      	strb	r1, [r4, #21]
 80086e2:	7da0      	ldrb	r0, [r4, #22]
 80086e4:	f080 0001 	eor.w	r0, r0, #1
 80086e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	602b      	str	r3, [r5, #0]
 80086f0:	e7ef      	b.n	80086d2 <ucdr_deserialize_uint32_t+0xb6>
 80086f2:	68a2      	ldr	r2, [r4, #8]
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	7da0      	ldrb	r0, [r4, #22]
 80086f8:	f884 8015 	strb.w	r8, [r4, #21]
 80086fc:	1bd2      	subs	r2, r2, r7
 80086fe:	1bdb      	subs	r3, r3, r7
 8008700:	60a2      	str	r2, [r4, #8]
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	f080 0001 	eor.w	r0, r0, #1
 8008708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870c:	68a3      	ldr	r3, [r4, #8]
 800870e:	789b      	ldrb	r3, [r3, #2]
 8008710:	706b      	strb	r3, [r5, #1]
 8008712:	1cab      	adds	r3, r5, #2
 8008714:	68a2      	ldr	r2, [r4, #8]
 8008716:	7852      	ldrb	r2, [r2, #1]
 8008718:	f803 2b01 	strb.w	r2, [r3], #1
 800871c:	68a2      	ldr	r2, [r4, #8]
 800871e:	7812      	ldrb	r2, [r2, #0]
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	e7b4      	b.n	800868e <ucdr_deserialize_uint32_t+0x72>
 8008724:	4631      	mov	r1, r6
 8008726:	463a      	mov	r2, r7
 8008728:	4628      	mov	r0, r5
 800872a:	f00c fea6 	bl	801547a <memcpy>
 800872e:	68a1      	ldr	r1, [r4, #8]
 8008730:	464a      	mov	r2, r9
 8008732:	19e8      	adds	r0, r5, r7
 8008734:	f00c fea1 	bl	801547a <memcpy>
 8008738:	e7a9      	b.n	800868e <ucdr_deserialize_uint32_t+0x72>
 800873a:	bf00      	nop

0800873c <ucdr_deserialize_endian_uint32_t>:
 800873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	460e      	mov	r6, r1
 8008742:	2104      	movs	r1, #4
 8008744:	4604      	mov	r4, r0
 8008746:	4615      	mov	r5, r2
 8008748:	f000 fd70 	bl	800922c <ucdr_buffer_alignment>
 800874c:	4601      	mov	r1, r0
 800874e:	4620      	mov	r0, r4
 8008750:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008754:	f000 fdae 	bl	80092b4 <ucdr_advance_buffer>
 8008758:	2104      	movs	r1, #4
 800875a:	4620      	mov	r0, r4
 800875c:	f000 fd06 	bl	800916c <ucdr_check_buffer_available_for>
 8008760:	2800      	cmp	r0, #0
 8008762:	d13c      	bne.n	80087de <ucdr_deserialize_endian_uint32_t+0xa2>
 8008764:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8008768:	42bb      	cmp	r3, r7
 800876a:	d933      	bls.n	80087d4 <ucdr_deserialize_endian_uint32_t+0x98>
 800876c:	eba3 0807 	sub.w	r8, r3, r7
 8008770:	60a3      	str	r3, [r4, #8]
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	f1c8 0a04 	rsb	sl, r8, #4
 8008778:	4443      	add	r3, r8
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	4651      	mov	r1, sl
 800877e:	4620      	mov	r0, r4
 8008780:	f000 fd00 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008784:	2800      	cmp	r0, #0
 8008786:	d048      	beq.n	800881a <ucdr_deserialize_endian_uint32_t+0xde>
 8008788:	2e01      	cmp	r6, #1
 800878a:	d061      	beq.n	8008850 <ucdr_deserialize_endian_uint32_t+0x114>
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	702b      	strb	r3, [r5, #0]
 8008790:	f1b8 0f00 	cmp.w	r8, #0
 8008794:	d050      	beq.n	8008838 <ucdr_deserialize_endian_uint32_t+0xfc>
 8008796:	78bb      	ldrb	r3, [r7, #2]
 8008798:	706b      	strb	r3, [r5, #1]
 800879a:	f1b8 0f01 	cmp.w	r8, #1
 800879e:	f105 0302 	add.w	r3, r5, #2
 80087a2:	d04d      	beq.n	8008840 <ucdr_deserialize_endian_uint32_t+0x104>
 80087a4:	787b      	ldrb	r3, [r7, #1]
 80087a6:	70ab      	strb	r3, [r5, #2]
 80087a8:	f1b8 0f02 	cmp.w	r8, #2
 80087ac:	f105 0303 	add.w	r3, r5, #3
 80087b0:	d04a      	beq.n	8008848 <ucdr_deserialize_endian_uint32_t+0x10c>
 80087b2:	783b      	ldrb	r3, [r7, #0]
 80087b4:	70eb      	strb	r3, [r5, #3]
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	68a2      	ldr	r2, [r4, #8]
 80087ba:	7da0      	ldrb	r0, [r4, #22]
 80087bc:	2104      	movs	r1, #4
 80087be:	3304      	adds	r3, #4
 80087c0:	4452      	add	r2, sl
 80087c2:	eba3 0308 	sub.w	r3, r3, r8
 80087c6:	7561      	strb	r1, [r4, #21]
 80087c8:	60a2      	str	r2, [r4, #8]
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	f080 0001 	eor.w	r0, r0, #1
 80087d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d4:	2104      	movs	r1, #4
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 fcd4 	bl	8009184 <ucdr_check_final_buffer_behavior>
 80087dc:	b1a8      	cbz	r0, 800880a <ucdr_deserialize_endian_uint32_t+0xce>
 80087de:	2e01      	cmp	r6, #1
 80087e0:	68a3      	ldr	r3, [r4, #8]
 80087e2:	d017      	beq.n	8008814 <ucdr_deserialize_endian_uint32_t+0xd8>
 80087e4:	78db      	ldrb	r3, [r3, #3]
 80087e6:	702b      	strb	r3, [r5, #0]
 80087e8:	68a3      	ldr	r3, [r4, #8]
 80087ea:	789b      	ldrb	r3, [r3, #2]
 80087ec:	706b      	strb	r3, [r5, #1]
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	70ab      	strb	r3, [r5, #2]
 80087f4:	68a3      	ldr	r3, [r4, #8]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	70eb      	strb	r3, [r5, #3]
 80087fa:	68a2      	ldr	r2, [r4, #8]
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	3204      	adds	r2, #4
 8008800:	3304      	adds	r3, #4
 8008802:	2104      	movs	r1, #4
 8008804:	60a2      	str	r2, [r4, #8]
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	7561      	strb	r1, [r4, #21]
 800880a:	7da0      	ldrb	r0, [r4, #22]
 800880c:	f080 0001 	eor.w	r0, r0, #1
 8008810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	602b      	str	r3, [r5, #0]
 8008818:	e7ef      	b.n	80087fa <ucdr_deserialize_endian_uint32_t+0xbe>
 800881a:	68a2      	ldr	r2, [r4, #8]
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	7da0      	ldrb	r0, [r4, #22]
 8008820:	f884 9015 	strb.w	r9, [r4, #21]
 8008824:	eba2 0208 	sub.w	r2, r2, r8
 8008828:	eba3 0308 	sub.w	r3, r3, r8
 800882c:	60a2      	str	r2, [r4, #8]
 800882e:	6123      	str	r3, [r4, #16]
 8008830:	f080 0001 	eor.w	r0, r0, #1
 8008834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008838:	68a3      	ldr	r3, [r4, #8]
 800883a:	789b      	ldrb	r3, [r3, #2]
 800883c:	706b      	strb	r3, [r5, #1]
 800883e:	1cab      	adds	r3, r5, #2
 8008840:	68a2      	ldr	r2, [r4, #8]
 8008842:	7852      	ldrb	r2, [r2, #1]
 8008844:	f803 2b01 	strb.w	r2, [r3], #1
 8008848:	68a2      	ldr	r2, [r4, #8]
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	e7b2      	b.n	80087b6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8008850:	4639      	mov	r1, r7
 8008852:	4642      	mov	r2, r8
 8008854:	4628      	mov	r0, r5
 8008856:	f00c fe10 	bl	801547a <memcpy>
 800885a:	68a1      	ldr	r1, [r4, #8]
 800885c:	4652      	mov	r2, sl
 800885e:	eb05 0008 	add.w	r0, r5, r8
 8008862:	f00c fe0a 	bl	801547a <memcpy>
 8008866:	e7a6      	b.n	80087b6 <ucdr_deserialize_endian_uint32_t+0x7a>

08008868 <ucdr_serialize_uint64_t>:
 8008868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886c:	2108      	movs	r1, #8
 800886e:	b082      	sub	sp, #8
 8008870:	4604      	mov	r4, r0
 8008872:	e9cd 2300 	strd	r2, r3, [sp]
 8008876:	f000 fcd9 	bl	800922c <ucdr_buffer_alignment>
 800887a:	4601      	mov	r1, r0
 800887c:	4620      	mov	r0, r4
 800887e:	7d67      	ldrb	r7, [r4, #21]
 8008880:	f000 fd18 	bl	80092b4 <ucdr_advance_buffer>
 8008884:	2108      	movs	r1, #8
 8008886:	4620      	mov	r0, r4
 8008888:	f000 fc70 	bl	800916c <ucdr_check_buffer_available_for>
 800888c:	2800      	cmp	r0, #0
 800888e:	d14e      	bne.n	800892e <ucdr_serialize_uint64_t+0xc6>
 8008890:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008894:	42ab      	cmp	r3, r5
 8008896:	d945      	bls.n	8008924 <ucdr_serialize_uint64_t+0xbc>
 8008898:	1b5e      	subs	r6, r3, r5
 800889a:	60a3      	str	r3, [r4, #8]
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	f1c6 0808 	rsb	r8, r6, #8
 80088a2:	4433      	add	r3, r6
 80088a4:	6123      	str	r3, [r4, #16]
 80088a6:	4641      	mov	r1, r8
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fc6b 	bl	8009184 <ucdr_check_final_buffer_behavior>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d074      	beq.n	800899c <ucdr_serialize_uint64_t+0x134>
 80088b2:	7d23      	ldrb	r3, [r4, #20]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	f000 809b 	beq.w	80089f0 <ucdr_serialize_uint64_t+0x188>
 80088ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088be:	702b      	strb	r3, [r5, #0]
 80088c0:	2e00      	cmp	r6, #0
 80088c2:	d078      	beq.n	80089b6 <ucdr_serialize_uint64_t+0x14e>
 80088c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80088c8:	706b      	strb	r3, [r5, #1]
 80088ca:	2e01      	cmp	r6, #1
 80088cc:	d077      	beq.n	80089be <ucdr_serialize_uint64_t+0x156>
 80088ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80088d2:	70ab      	strb	r3, [r5, #2]
 80088d4:	2e02      	cmp	r6, #2
 80088d6:	d076      	beq.n	80089c6 <ucdr_serialize_uint64_t+0x15e>
 80088d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80088dc:	70eb      	strb	r3, [r5, #3]
 80088de:	2e03      	cmp	r6, #3
 80088e0:	d075      	beq.n	80089ce <ucdr_serialize_uint64_t+0x166>
 80088e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80088e6:	712b      	strb	r3, [r5, #4]
 80088e8:	2e04      	cmp	r6, #4
 80088ea:	d074      	beq.n	80089d6 <ucdr_serialize_uint64_t+0x16e>
 80088ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80088f0:	716b      	strb	r3, [r5, #5]
 80088f2:	2e05      	cmp	r6, #5
 80088f4:	d073      	beq.n	80089de <ucdr_serialize_uint64_t+0x176>
 80088f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80088fa:	71ab      	strb	r3, [r5, #6]
 80088fc:	2e06      	cmp	r6, #6
 80088fe:	d072      	beq.n	80089e6 <ucdr_serialize_uint64_t+0x17e>
 8008900:	f89d 3000 	ldrb.w	r3, [sp]
 8008904:	71eb      	strb	r3, [r5, #7]
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	68a2      	ldr	r2, [r4, #8]
 800890a:	7da0      	ldrb	r0, [r4, #22]
 800890c:	3308      	adds	r3, #8
 800890e:	1b9e      	subs	r6, r3, r6
 8008910:	4442      	add	r2, r8
 8008912:	2308      	movs	r3, #8
 8008914:	f080 0001 	eor.w	r0, r0, #1
 8008918:	60a2      	str	r2, [r4, #8]
 800891a:	6126      	str	r6, [r4, #16]
 800891c:	7563      	strb	r3, [r4, #21]
 800891e:	b002      	add	sp, #8
 8008920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008924:	2108      	movs	r1, #8
 8008926:	4620      	mov	r0, r4
 8008928:	f000 fc2c 	bl	8009184 <ucdr_check_final_buffer_behavior>
 800892c:	b350      	cbz	r0, 8008984 <ucdr_serialize_uint64_t+0x11c>
 800892e:	7d23      	ldrb	r3, [r4, #20]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d02d      	beq.n	8008990 <ucdr_serialize_uint64_t+0x128>
 8008934:	68a3      	ldr	r3, [r4, #8]
 8008936:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	68a3      	ldr	r3, [r4, #8]
 800893e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008942:	705a      	strb	r2, [r3, #1]
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800894a:	709a      	strb	r2, [r3, #2]
 800894c:	68a3      	ldr	r3, [r4, #8]
 800894e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008952:	70da      	strb	r2, [r3, #3]
 8008954:	68a3      	ldr	r3, [r4, #8]
 8008956:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800895a:	711a      	strb	r2, [r3, #4]
 800895c:	68a3      	ldr	r3, [r4, #8]
 800895e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008962:	715a      	strb	r2, [r3, #5]
 8008964:	68a3      	ldr	r3, [r4, #8]
 8008966:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800896a:	719a      	strb	r2, [r3, #6]
 800896c:	68a3      	ldr	r3, [r4, #8]
 800896e:	f89d 2000 	ldrb.w	r2, [sp]
 8008972:	71da      	strb	r2, [r3, #7]
 8008974:	68a2      	ldr	r2, [r4, #8]
 8008976:	6923      	ldr	r3, [r4, #16]
 8008978:	3208      	adds	r2, #8
 800897a:	3308      	adds	r3, #8
 800897c:	2108      	movs	r1, #8
 800897e:	60a2      	str	r2, [r4, #8]
 8008980:	6123      	str	r3, [r4, #16]
 8008982:	7561      	strb	r1, [r4, #21]
 8008984:	7da0      	ldrb	r0, [r4, #22]
 8008986:	f080 0001 	eor.w	r0, r0, #1
 800898a:	b002      	add	sp, #8
 800898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008990:	466b      	mov	r3, sp
 8008992:	cb03      	ldmia	r3!, {r0, r1}
 8008994:	68a3      	ldr	r3, [r4, #8]
 8008996:	6018      	str	r0, [r3, #0]
 8008998:	6059      	str	r1, [r3, #4]
 800899a:	e7eb      	b.n	8008974 <ucdr_serialize_uint64_t+0x10c>
 800899c:	68a2      	ldr	r2, [r4, #8]
 800899e:	6923      	ldr	r3, [r4, #16]
 80089a0:	7da0      	ldrb	r0, [r4, #22]
 80089a2:	7567      	strb	r7, [r4, #21]
 80089a4:	1b92      	subs	r2, r2, r6
 80089a6:	1b9b      	subs	r3, r3, r6
 80089a8:	f080 0001 	eor.w	r0, r0, #1
 80089ac:	60a2      	str	r2, [r4, #8]
 80089ae:	6123      	str	r3, [r4, #16]
 80089b0:	b002      	add	sp, #8
 80089b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b6:	68a3      	ldr	r3, [r4, #8]
 80089b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80089bc:	701a      	strb	r2, [r3, #0]
 80089be:	68a3      	ldr	r3, [r4, #8]
 80089c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	68a3      	ldr	r3, [r4, #8]
 80089e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	68a3      	ldr	r3, [r4, #8]
 80089e8:	f89d 2000 	ldrb.w	r2, [sp]
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	e78a      	b.n	8008906 <ucdr_serialize_uint64_t+0x9e>
 80089f0:	4628      	mov	r0, r5
 80089f2:	466d      	mov	r5, sp
 80089f4:	4629      	mov	r1, r5
 80089f6:	4632      	mov	r2, r6
 80089f8:	f00c fd3f 	bl	801547a <memcpy>
 80089fc:	68a0      	ldr	r0, [r4, #8]
 80089fe:	4642      	mov	r2, r8
 8008a00:	19a9      	adds	r1, r5, r6
 8008a02:	f00c fd3a 	bl	801547a <memcpy>
 8008a06:	e77e      	b.n	8008906 <ucdr_serialize_uint64_t+0x9e>

08008a08 <ucdr_serialize_int16_t>:
 8008a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	460b      	mov	r3, r1
 8008a10:	2102      	movs	r1, #2
 8008a12:	4604      	mov	r4, r0
 8008a14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008a18:	f000 fc08 	bl	800922c <ucdr_buffer_alignment>
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	4620      	mov	r0, r4
 8008a20:	7d67      	ldrb	r7, [r4, #21]
 8008a22:	f000 fc47 	bl	80092b4 <ucdr_advance_buffer>
 8008a26:	2102      	movs	r1, #2
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fb9f 	bl	800916c <ucdr_check_buffer_available_for>
 8008a2e:	bb78      	cbnz	r0, 8008a90 <ucdr_serialize_int16_t+0x88>
 8008a30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008a34:	42ab      	cmp	r3, r5
 8008a36:	d926      	bls.n	8008a86 <ucdr_serialize_int16_t+0x7e>
 8008a38:	1b5e      	subs	r6, r3, r5
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	f1c6 0802 	rsb	r8, r6, #2
 8008a42:	4433      	add	r3, r6
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	4641      	mov	r1, r8
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fb9b 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d03b      	beq.n	8008aca <ucdr_serialize_int16_t+0xc2>
 8008a52:	7d23      	ldrb	r3, [r4, #20]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d04a      	beq.n	8008aee <ucdr_serialize_int16_t+0xe6>
 8008a58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a5c:	702b      	strb	r3, [r5, #0]
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	d040      	beq.n	8008ae4 <ucdr_serialize_int16_t+0xdc>
 8008a62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a66:	706b      	strb	r3, [r5, #1]
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	68a2      	ldr	r2, [r4, #8]
 8008a6c:	7da0      	ldrb	r0, [r4, #22]
 8008a6e:	3302      	adds	r3, #2
 8008a70:	1b9e      	subs	r6, r3, r6
 8008a72:	4442      	add	r2, r8
 8008a74:	2302      	movs	r3, #2
 8008a76:	f080 0001 	eor.w	r0, r0, #1
 8008a7a:	60a2      	str	r2, [r4, #8]
 8008a7c:	6126      	str	r6, [r4, #16]
 8008a7e:	7563      	strb	r3, [r4, #21]
 8008a80:	b002      	add	sp, #8
 8008a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a86:	2102      	movs	r1, #2
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fb7b 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008a8e:	b190      	cbz	r0, 8008ab6 <ucdr_serialize_int16_t+0xae>
 8008a90:	7d23      	ldrb	r3, [r4, #20]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	68a3      	ldr	r3, [r4, #8]
 8008a96:	d014      	beq.n	8008ac2 <ucdr_serialize_int16_t+0xba>
 8008a98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008aa4:	705a      	strb	r2, [r3, #1]
 8008aa6:	68a2      	ldr	r2, [r4, #8]
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	3202      	adds	r2, #2
 8008aac:	3302      	adds	r3, #2
 8008aae:	2102      	movs	r1, #2
 8008ab0:	60a2      	str	r2, [r4, #8]
 8008ab2:	6123      	str	r3, [r4, #16]
 8008ab4:	7561      	strb	r1, [r4, #21]
 8008ab6:	7da0      	ldrb	r0, [r4, #22]
 8008ab8:	f080 0001 	eor.w	r0, r0, #1
 8008abc:	b002      	add	sp, #8
 8008abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	e7ed      	b.n	8008aa6 <ucdr_serialize_int16_t+0x9e>
 8008aca:	68a2      	ldr	r2, [r4, #8]
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	7da0      	ldrb	r0, [r4, #22]
 8008ad0:	7567      	strb	r7, [r4, #21]
 8008ad2:	1b92      	subs	r2, r2, r6
 8008ad4:	1b9b      	subs	r3, r3, r6
 8008ad6:	f080 0001 	eor.w	r0, r0, #1
 8008ada:	60a2      	str	r2, [r4, #8]
 8008adc:	6123      	str	r3, [r4, #16]
 8008ade:	b002      	add	sp, #8
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	68a3      	ldr	r3, [r4, #8]
 8008ae6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	e7bc      	b.n	8008a68 <ucdr_serialize_int16_t+0x60>
 8008aee:	4628      	mov	r0, r5
 8008af0:	f10d 0506 	add.w	r5, sp, #6
 8008af4:	4629      	mov	r1, r5
 8008af6:	4632      	mov	r2, r6
 8008af8:	f00c fcbf 	bl	801547a <memcpy>
 8008afc:	68a0      	ldr	r0, [r4, #8]
 8008afe:	4642      	mov	r2, r8
 8008b00:	19a9      	adds	r1, r5, r6
 8008b02:	f00c fcba 	bl	801547a <memcpy>
 8008b06:	e7af      	b.n	8008a68 <ucdr_serialize_int16_t+0x60>

08008b08 <ucdr_deserialize_int16_t>:
 8008b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	2102      	movs	r1, #2
 8008b10:	4604      	mov	r4, r0
 8008b12:	f000 fb8b 	bl	800922c <ucdr_buffer_alignment>
 8008b16:	4601      	mov	r1, r0
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008b1e:	f000 fbc9 	bl	80092b4 <ucdr_advance_buffer>
 8008b22:	2102      	movs	r1, #2
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fb21 	bl	800916c <ucdr_check_buffer_available_for>
 8008b2a:	bb60      	cbnz	r0, 8008b86 <ucdr_deserialize_int16_t+0x7e>
 8008b2c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008b30:	42be      	cmp	r6, r7
 8008b32:	d923      	bls.n	8008b7c <ucdr_deserialize_int16_t+0x74>
 8008b34:	6923      	ldr	r3, [r4, #16]
 8008b36:	60a6      	str	r6, [r4, #8]
 8008b38:	1bf6      	subs	r6, r6, r7
 8008b3a:	4433      	add	r3, r6
 8008b3c:	f1c6 0902 	rsb	r9, r6, #2
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	4649      	mov	r1, r9
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 fb1d 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d034      	beq.n	8008bb8 <ucdr_deserialize_int16_t+0xb0>
 8008b4e:	7d23      	ldrb	r3, [r4, #20]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d042      	beq.n	8008bda <ucdr_deserialize_int16_t+0xd2>
 8008b54:	787b      	ldrb	r3, [r7, #1]
 8008b56:	702b      	strb	r3, [r5, #0]
 8008b58:	2e00      	cmp	r6, #0
 8008b5a:	d03a      	beq.n	8008bd2 <ucdr_deserialize_int16_t+0xca>
 8008b5c:	783b      	ldrb	r3, [r7, #0]
 8008b5e:	706b      	strb	r3, [r5, #1]
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	68a2      	ldr	r2, [r4, #8]
 8008b64:	7da0      	ldrb	r0, [r4, #22]
 8008b66:	2102      	movs	r1, #2
 8008b68:	3302      	adds	r3, #2
 8008b6a:	444a      	add	r2, r9
 8008b6c:	1b9b      	subs	r3, r3, r6
 8008b6e:	7561      	strb	r1, [r4, #21]
 8008b70:	60a2      	str	r2, [r4, #8]
 8008b72:	6123      	str	r3, [r4, #16]
 8008b74:	f080 0001 	eor.w	r0, r0, #1
 8008b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7c:	2102      	movs	r1, #2
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f000 fb00 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008b84:	b180      	cbz	r0, 8008ba8 <ucdr_deserialize_int16_t+0xa0>
 8008b86:	7d23      	ldrb	r3, [r4, #20]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	d011      	beq.n	8008bb2 <ucdr_deserialize_int16_t+0xaa>
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	702b      	strb	r3, [r5, #0]
 8008b92:	68a3      	ldr	r3, [r4, #8]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	706b      	strb	r3, [r5, #1]
 8008b98:	68a2      	ldr	r2, [r4, #8]
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	3202      	adds	r2, #2
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	60a2      	str	r2, [r4, #8]
 8008ba4:	6123      	str	r3, [r4, #16]
 8008ba6:	7561      	strb	r1, [r4, #21]
 8008ba8:	7da0      	ldrb	r0, [r4, #22]
 8008baa:	f080 0001 	eor.w	r0, r0, #1
 8008bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	802b      	strh	r3, [r5, #0]
 8008bb6:	e7ef      	b.n	8008b98 <ucdr_deserialize_int16_t+0x90>
 8008bb8:	68a2      	ldr	r2, [r4, #8]
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	7da0      	ldrb	r0, [r4, #22]
 8008bbe:	f884 8015 	strb.w	r8, [r4, #21]
 8008bc2:	1b92      	subs	r2, r2, r6
 8008bc4:	1b9b      	subs	r3, r3, r6
 8008bc6:	60a2      	str	r2, [r4, #8]
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	f080 0001 	eor.w	r0, r0, #1
 8008bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd2:	68a3      	ldr	r3, [r4, #8]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	706b      	strb	r3, [r5, #1]
 8008bd8:	e7c2      	b.n	8008b60 <ucdr_deserialize_int16_t+0x58>
 8008bda:	4639      	mov	r1, r7
 8008bdc:	4632      	mov	r2, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	f00c fc4b 	bl	801547a <memcpy>
 8008be4:	68a1      	ldr	r1, [r4, #8]
 8008be6:	464a      	mov	r2, r9
 8008be8:	19a8      	adds	r0, r5, r6
 8008bea:	f00c fc46 	bl	801547a <memcpy>
 8008bee:	e7b7      	b.n	8008b60 <ucdr_deserialize_int16_t+0x58>

08008bf0 <ucdr_serialize_int32_t>:
 8008bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	9101      	str	r1, [sp, #4]
 8008bfa:	2104      	movs	r1, #4
 8008bfc:	f000 fb16 	bl	800922c <ucdr_buffer_alignment>
 8008c00:	4601      	mov	r1, r0
 8008c02:	4620      	mov	r0, r4
 8008c04:	7d67      	ldrb	r7, [r4, #21]
 8008c06:	f000 fb55 	bl	80092b4 <ucdr_advance_buffer>
 8008c0a:	2104      	movs	r1, #4
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f000 faad 	bl	800916c <ucdr_check_buffer_available_for>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d139      	bne.n	8008c8a <ucdr_serialize_int32_t+0x9a>
 8008c16:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008c1a:	42ab      	cmp	r3, r5
 8008c1c:	d930      	bls.n	8008c80 <ucdr_serialize_int32_t+0x90>
 8008c1e:	1b5e      	subs	r6, r3, r5
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	6923      	ldr	r3, [r4, #16]
 8008c24:	f1c6 0804 	rsb	r8, r6, #4
 8008c28:	4433      	add	r3, r6
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	4641      	mov	r1, r8
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 faa8 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d04c      	beq.n	8008cd2 <ucdr_serialize_int32_t+0xe2>
 8008c38:	7d23      	ldrb	r3, [r4, #20]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d063      	beq.n	8008d06 <ucdr_serialize_int32_t+0x116>
 8008c3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008c42:	702b      	strb	r3, [r5, #0]
 8008c44:	2e00      	cmp	r6, #0
 8008c46:	d051      	beq.n	8008cec <ucdr_serialize_int32_t+0xfc>
 8008c48:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008c4c:	706b      	strb	r3, [r5, #1]
 8008c4e:	2e01      	cmp	r6, #1
 8008c50:	d050      	beq.n	8008cf4 <ucdr_serialize_int32_t+0x104>
 8008c52:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008c56:	70ab      	strb	r3, [r5, #2]
 8008c58:	2e02      	cmp	r6, #2
 8008c5a:	d04f      	beq.n	8008cfc <ucdr_serialize_int32_t+0x10c>
 8008c5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008c60:	70eb      	strb	r3, [r5, #3]
 8008c62:	6923      	ldr	r3, [r4, #16]
 8008c64:	68a2      	ldr	r2, [r4, #8]
 8008c66:	7da0      	ldrb	r0, [r4, #22]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	1b9e      	subs	r6, r3, r6
 8008c6c:	4442      	add	r2, r8
 8008c6e:	2304      	movs	r3, #4
 8008c70:	f080 0001 	eor.w	r0, r0, #1
 8008c74:	60a2      	str	r2, [r4, #8]
 8008c76:	6126      	str	r6, [r4, #16]
 8008c78:	7563      	strb	r3, [r4, #21]
 8008c7a:	b002      	add	sp, #8
 8008c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c80:	2104      	movs	r1, #4
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 fa7e 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008c88:	b1d0      	cbz	r0, 8008cc0 <ucdr_serialize_int32_t+0xd0>
 8008c8a:	7d23      	ldrb	r3, [r4, #20]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	d01c      	beq.n	8008ccc <ucdr_serialize_int32_t+0xdc>
 8008c92:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	68a3      	ldr	r3, [r4, #8]
 8008c9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008c9e:	705a      	strb	r2, [r3, #1]
 8008ca0:	68a3      	ldr	r3, [r4, #8]
 8008ca2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008ca6:	709a      	strb	r2, [r3, #2]
 8008ca8:	68a3      	ldr	r3, [r4, #8]
 8008caa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008cae:	70da      	strb	r2, [r3, #3]
 8008cb0:	68a2      	ldr	r2, [r4, #8]
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	3204      	adds	r2, #4
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	2104      	movs	r1, #4
 8008cba:	60a2      	str	r2, [r4, #8]
 8008cbc:	6123      	str	r3, [r4, #16]
 8008cbe:	7561      	strb	r1, [r4, #21]
 8008cc0:	7da0      	ldrb	r0, [r4, #22]
 8008cc2:	f080 0001 	eor.w	r0, r0, #1
 8008cc6:	b002      	add	sp, #8
 8008cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ccc:	9a01      	ldr	r2, [sp, #4]
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	e7ee      	b.n	8008cb0 <ucdr_serialize_int32_t+0xc0>
 8008cd2:	68a2      	ldr	r2, [r4, #8]
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	7da0      	ldrb	r0, [r4, #22]
 8008cd8:	7567      	strb	r7, [r4, #21]
 8008cda:	1b92      	subs	r2, r2, r6
 8008cdc:	1b9b      	subs	r3, r3, r6
 8008cde:	f080 0001 	eor.w	r0, r0, #1
 8008ce2:	60a2      	str	r2, [r4, #8]
 8008ce4:	6123      	str	r3, [r4, #16]
 8008ce6:	b002      	add	sp, #8
 8008ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cec:	68a3      	ldr	r3, [r4, #8]
 8008cee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008cf2:	701a      	strb	r2, [r3, #0]
 8008cf4:	68a3      	ldr	r3, [r4, #8]
 8008cf6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	68a3      	ldr	r3, [r4, #8]
 8008cfe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	e7ad      	b.n	8008c62 <ucdr_serialize_int32_t+0x72>
 8008d06:	4628      	mov	r0, r5
 8008d08:	ad01      	add	r5, sp, #4
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	f00c fbb4 	bl	801547a <memcpy>
 8008d12:	68a0      	ldr	r0, [r4, #8]
 8008d14:	4642      	mov	r2, r8
 8008d16:	19a9      	adds	r1, r5, r6
 8008d18:	f00c fbaf 	bl	801547a <memcpy>
 8008d1c:	e7a1      	b.n	8008c62 <ucdr_serialize_int32_t+0x72>
 8008d1e:	bf00      	nop

08008d20 <ucdr_deserialize_int32_t>:
 8008d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d24:	460d      	mov	r5, r1
 8008d26:	2104      	movs	r1, #4
 8008d28:	4604      	mov	r4, r0
 8008d2a:	f000 fa7f 	bl	800922c <ucdr_buffer_alignment>
 8008d2e:	4601      	mov	r1, r0
 8008d30:	4620      	mov	r0, r4
 8008d32:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008d36:	f000 fabd 	bl	80092b4 <ucdr_advance_buffer>
 8008d3a:	2104      	movs	r1, #4
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f000 fa15 	bl	800916c <ucdr_check_buffer_available_for>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d138      	bne.n	8008db8 <ucdr_deserialize_int32_t+0x98>
 8008d46:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008d4a:	42b7      	cmp	r7, r6
 8008d4c:	d92f      	bls.n	8008dae <ucdr_deserialize_int32_t+0x8e>
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	60a7      	str	r7, [r4, #8]
 8008d52:	1bbf      	subs	r7, r7, r6
 8008d54:	443b      	add	r3, r7
 8008d56:	f1c7 0904 	rsb	r9, r7, #4
 8008d5a:	6123      	str	r3, [r4, #16]
 8008d5c:	4649      	mov	r1, r9
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fa10 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d046      	beq.n	8008df6 <ucdr_deserialize_int32_t+0xd6>
 8008d68:	7d23      	ldrb	r3, [r4, #20]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d05c      	beq.n	8008e28 <ucdr_deserialize_int32_t+0x108>
 8008d6e:	78f3      	ldrb	r3, [r6, #3]
 8008d70:	702b      	strb	r3, [r5, #0]
 8008d72:	2f00      	cmp	r7, #0
 8008d74:	d04c      	beq.n	8008e10 <ucdr_deserialize_int32_t+0xf0>
 8008d76:	78b3      	ldrb	r3, [r6, #2]
 8008d78:	706b      	strb	r3, [r5, #1]
 8008d7a:	2f01      	cmp	r7, #1
 8008d7c:	f105 0302 	add.w	r3, r5, #2
 8008d80:	d04a      	beq.n	8008e18 <ucdr_deserialize_int32_t+0xf8>
 8008d82:	7873      	ldrb	r3, [r6, #1]
 8008d84:	70ab      	strb	r3, [r5, #2]
 8008d86:	2f02      	cmp	r7, #2
 8008d88:	f105 0303 	add.w	r3, r5, #3
 8008d8c:	d048      	beq.n	8008e20 <ucdr_deserialize_int32_t+0x100>
 8008d8e:	7833      	ldrb	r3, [r6, #0]
 8008d90:	70eb      	strb	r3, [r5, #3]
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	68a2      	ldr	r2, [r4, #8]
 8008d96:	7da0      	ldrb	r0, [r4, #22]
 8008d98:	2104      	movs	r1, #4
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	444a      	add	r2, r9
 8008d9e:	1bdb      	subs	r3, r3, r7
 8008da0:	7561      	strb	r1, [r4, #21]
 8008da2:	60a2      	str	r2, [r4, #8]
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	f080 0001 	eor.w	r0, r0, #1
 8008daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dae:	2104      	movs	r1, #4
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 f9e7 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008db6:	b1b0      	cbz	r0, 8008de6 <ucdr_deserialize_int32_t+0xc6>
 8008db8:	7d23      	ldrb	r3, [r4, #20]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	68a3      	ldr	r3, [r4, #8]
 8008dbe:	d017      	beq.n	8008df0 <ucdr_deserialize_int32_t+0xd0>
 8008dc0:	78db      	ldrb	r3, [r3, #3]
 8008dc2:	702b      	strb	r3, [r5, #0]
 8008dc4:	68a3      	ldr	r3, [r4, #8]
 8008dc6:	789b      	ldrb	r3, [r3, #2]
 8008dc8:	706b      	strb	r3, [r5, #1]
 8008dca:	68a3      	ldr	r3, [r4, #8]
 8008dcc:	785b      	ldrb	r3, [r3, #1]
 8008dce:	70ab      	strb	r3, [r5, #2]
 8008dd0:	68a3      	ldr	r3, [r4, #8]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	70eb      	strb	r3, [r5, #3]
 8008dd6:	68a2      	ldr	r2, [r4, #8]
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	3204      	adds	r2, #4
 8008ddc:	3304      	adds	r3, #4
 8008dde:	2104      	movs	r1, #4
 8008de0:	60a2      	str	r2, [r4, #8]
 8008de2:	6123      	str	r3, [r4, #16]
 8008de4:	7561      	strb	r1, [r4, #21]
 8008de6:	7da0      	ldrb	r0, [r4, #22]
 8008de8:	f080 0001 	eor.w	r0, r0, #1
 8008dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	602b      	str	r3, [r5, #0]
 8008df4:	e7ef      	b.n	8008dd6 <ucdr_deserialize_int32_t+0xb6>
 8008df6:	68a2      	ldr	r2, [r4, #8]
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	7da0      	ldrb	r0, [r4, #22]
 8008dfc:	f884 8015 	strb.w	r8, [r4, #21]
 8008e00:	1bd2      	subs	r2, r2, r7
 8008e02:	1bdb      	subs	r3, r3, r7
 8008e04:	60a2      	str	r2, [r4, #8]
 8008e06:	6123      	str	r3, [r4, #16]
 8008e08:	f080 0001 	eor.w	r0, r0, #1
 8008e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e10:	68a3      	ldr	r3, [r4, #8]
 8008e12:	789b      	ldrb	r3, [r3, #2]
 8008e14:	706b      	strb	r3, [r5, #1]
 8008e16:	1cab      	adds	r3, r5, #2
 8008e18:	68a2      	ldr	r2, [r4, #8]
 8008e1a:	7852      	ldrb	r2, [r2, #1]
 8008e1c:	f803 2b01 	strb.w	r2, [r3], #1
 8008e20:	68a2      	ldr	r2, [r4, #8]
 8008e22:	7812      	ldrb	r2, [r2, #0]
 8008e24:	701a      	strb	r2, [r3, #0]
 8008e26:	e7b4      	b.n	8008d92 <ucdr_deserialize_int32_t+0x72>
 8008e28:	4631      	mov	r1, r6
 8008e2a:	463a      	mov	r2, r7
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f00c fb24 	bl	801547a <memcpy>
 8008e32:	68a1      	ldr	r1, [r4, #8]
 8008e34:	464a      	mov	r2, r9
 8008e36:	19e8      	adds	r0, r5, r7
 8008e38:	f00c fb1f 	bl	801547a <memcpy>
 8008e3c:	e7a9      	b.n	8008d92 <ucdr_deserialize_int32_t+0x72>
 8008e3e:	bf00      	nop

08008e40 <ucdr_serialize_double>:
 8008e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e44:	2108      	movs	r1, #8
 8008e46:	b082      	sub	sp, #8
 8008e48:	4604      	mov	r4, r0
 8008e4a:	ed8d 0b00 	vstr	d0, [sp]
 8008e4e:	f000 f9ed 	bl	800922c <ucdr_buffer_alignment>
 8008e52:	4601      	mov	r1, r0
 8008e54:	4620      	mov	r0, r4
 8008e56:	7d67      	ldrb	r7, [r4, #21]
 8008e58:	f000 fa2c 	bl	80092b4 <ucdr_advance_buffer>
 8008e5c:	2108      	movs	r1, #8
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 f984 	bl	800916c <ucdr_check_buffer_available_for>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d14e      	bne.n	8008f06 <ucdr_serialize_double+0xc6>
 8008e68:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008e6c:	42ab      	cmp	r3, r5
 8008e6e:	d945      	bls.n	8008efc <ucdr_serialize_double+0xbc>
 8008e70:	1b5e      	subs	r6, r3, r5
 8008e72:	60a3      	str	r3, [r4, #8]
 8008e74:	6923      	ldr	r3, [r4, #16]
 8008e76:	f1c6 0808 	rsb	r8, r6, #8
 8008e7a:	4433      	add	r3, r6
 8008e7c:	6123      	str	r3, [r4, #16]
 8008e7e:	4641      	mov	r1, r8
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 f97f 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d074      	beq.n	8008f74 <ucdr_serialize_double+0x134>
 8008e8a:	7d23      	ldrb	r3, [r4, #20]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	f000 809b 	beq.w	8008fc8 <ucdr_serialize_double+0x188>
 8008e92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e96:	702b      	strb	r3, [r5, #0]
 8008e98:	2e00      	cmp	r6, #0
 8008e9a:	d078      	beq.n	8008f8e <ucdr_serialize_double+0x14e>
 8008e9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008ea0:	706b      	strb	r3, [r5, #1]
 8008ea2:	2e01      	cmp	r6, #1
 8008ea4:	d077      	beq.n	8008f96 <ucdr_serialize_double+0x156>
 8008ea6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008eaa:	70ab      	strb	r3, [r5, #2]
 8008eac:	2e02      	cmp	r6, #2
 8008eae:	d076      	beq.n	8008f9e <ucdr_serialize_double+0x15e>
 8008eb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008eb4:	70eb      	strb	r3, [r5, #3]
 8008eb6:	2e03      	cmp	r6, #3
 8008eb8:	d075      	beq.n	8008fa6 <ucdr_serialize_double+0x166>
 8008eba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008ebe:	712b      	strb	r3, [r5, #4]
 8008ec0:	2e04      	cmp	r6, #4
 8008ec2:	d074      	beq.n	8008fae <ucdr_serialize_double+0x16e>
 8008ec4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008ec8:	716b      	strb	r3, [r5, #5]
 8008eca:	2e05      	cmp	r6, #5
 8008ecc:	d073      	beq.n	8008fb6 <ucdr_serialize_double+0x176>
 8008ece:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008ed2:	71ab      	strb	r3, [r5, #6]
 8008ed4:	2e06      	cmp	r6, #6
 8008ed6:	d072      	beq.n	8008fbe <ucdr_serialize_double+0x17e>
 8008ed8:	f89d 3000 	ldrb.w	r3, [sp]
 8008edc:	71eb      	strb	r3, [r5, #7]
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	68a2      	ldr	r2, [r4, #8]
 8008ee2:	7da0      	ldrb	r0, [r4, #22]
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	1b9e      	subs	r6, r3, r6
 8008ee8:	4442      	add	r2, r8
 8008eea:	2308      	movs	r3, #8
 8008eec:	f080 0001 	eor.w	r0, r0, #1
 8008ef0:	60a2      	str	r2, [r4, #8]
 8008ef2:	6126      	str	r6, [r4, #16]
 8008ef4:	7563      	strb	r3, [r4, #21]
 8008ef6:	b002      	add	sp, #8
 8008ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008efc:	2108      	movs	r1, #8
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 f940 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8008f04:	b350      	cbz	r0, 8008f5c <ucdr_serialize_double+0x11c>
 8008f06:	7d23      	ldrb	r3, [r4, #20]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d02d      	beq.n	8008f68 <ucdr_serialize_double+0x128>
 8008f0c:	68a3      	ldr	r3, [r4, #8]
 8008f0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008f12:	701a      	strb	r2, [r3, #0]
 8008f14:	68a3      	ldr	r3, [r4, #8]
 8008f16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f1a:	705a      	strb	r2, [r3, #1]
 8008f1c:	68a3      	ldr	r3, [r4, #8]
 8008f1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f22:	709a      	strb	r2, [r3, #2]
 8008f24:	68a3      	ldr	r3, [r4, #8]
 8008f26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008f2a:	70da      	strb	r2, [r3, #3]
 8008f2c:	68a3      	ldr	r3, [r4, #8]
 8008f2e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008f32:	711a      	strb	r2, [r3, #4]
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008f3a:	715a      	strb	r2, [r3, #5]
 8008f3c:	68a3      	ldr	r3, [r4, #8]
 8008f3e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008f42:	719a      	strb	r2, [r3, #6]
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	f89d 2000 	ldrb.w	r2, [sp]
 8008f4a:	71da      	strb	r2, [r3, #7]
 8008f4c:	68a2      	ldr	r2, [r4, #8]
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	3208      	adds	r2, #8
 8008f52:	3308      	adds	r3, #8
 8008f54:	2108      	movs	r1, #8
 8008f56:	60a2      	str	r2, [r4, #8]
 8008f58:	6123      	str	r3, [r4, #16]
 8008f5a:	7561      	strb	r1, [r4, #21]
 8008f5c:	7da0      	ldrb	r0, [r4, #22]
 8008f5e:	f080 0001 	eor.w	r0, r0, #1
 8008f62:	b002      	add	sp, #8
 8008f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f68:	466b      	mov	r3, sp
 8008f6a:	cb03      	ldmia	r3!, {r0, r1}
 8008f6c:	68a3      	ldr	r3, [r4, #8]
 8008f6e:	6018      	str	r0, [r3, #0]
 8008f70:	6059      	str	r1, [r3, #4]
 8008f72:	e7eb      	b.n	8008f4c <ucdr_serialize_double+0x10c>
 8008f74:	68a2      	ldr	r2, [r4, #8]
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	7da0      	ldrb	r0, [r4, #22]
 8008f7a:	7567      	strb	r7, [r4, #21]
 8008f7c:	1b92      	subs	r2, r2, r6
 8008f7e:	1b9b      	subs	r3, r3, r6
 8008f80:	f080 0001 	eor.w	r0, r0, #1
 8008f84:	60a2      	str	r2, [r4, #8]
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	b002      	add	sp, #8
 8008f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f94:	701a      	strb	r2, [r3, #0]
 8008f96:	68a3      	ldr	r3, [r4, #8]
 8008f98:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	68a3      	ldr	r3, [r4, #8]
 8008fa0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	68a3      	ldr	r3, [r4, #8]
 8008fa8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	68a3      	ldr	r3, [r4, #8]
 8008fb0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	68a3      	ldr	r3, [r4, #8]
 8008fb8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008fbc:	701a      	strb	r2, [r3, #0]
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	f89d 2000 	ldrb.w	r2, [sp]
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	e78a      	b.n	8008ede <ucdr_serialize_double+0x9e>
 8008fc8:	4628      	mov	r0, r5
 8008fca:	466d      	mov	r5, sp
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4632      	mov	r2, r6
 8008fd0:	f00c fa53 	bl	801547a <memcpy>
 8008fd4:	68a0      	ldr	r0, [r4, #8]
 8008fd6:	4642      	mov	r2, r8
 8008fd8:	19a9      	adds	r1, r5, r6
 8008fda:	f00c fa4e 	bl	801547a <memcpy>
 8008fde:	e77e      	b.n	8008ede <ucdr_serialize_double+0x9e>

08008fe0 <ucdr_deserialize_double>:
 8008fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe4:	460d      	mov	r5, r1
 8008fe6:	2108      	movs	r1, #8
 8008fe8:	4604      	mov	r4, r0
 8008fea:	f000 f91f 	bl	800922c <ucdr_buffer_alignment>
 8008fee:	4601      	mov	r1, r0
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008ff6:	f000 f95d 	bl	80092b4 <ucdr_advance_buffer>
 8008ffa:	2108      	movs	r1, #8
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 f8b5 	bl	800916c <ucdr_check_buffer_available_for>
 8009002:	2800      	cmp	r0, #0
 8009004:	d151      	bne.n	80090aa <ucdr_deserialize_double+0xca>
 8009006:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800900a:	42be      	cmp	r6, r7
 800900c:	d948      	bls.n	80090a0 <ucdr_deserialize_double+0xc0>
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	60a6      	str	r6, [r4, #8]
 8009012:	1bf6      	subs	r6, r6, r7
 8009014:	4433      	add	r3, r6
 8009016:	f1c6 0808 	rsb	r8, r6, #8
 800901a:	6123      	str	r3, [r4, #16]
 800901c:	4641      	mov	r1, r8
 800901e:	4620      	mov	r0, r4
 8009020:	f000 f8b0 	bl	8009184 <ucdr_check_final_buffer_behavior>
 8009024:	2800      	cmp	r0, #0
 8009026:	d06d      	beq.n	8009104 <ucdr_deserialize_double+0x124>
 8009028:	7d23      	ldrb	r3, [r4, #20]
 800902a:	2b01      	cmp	r3, #1
 800902c:	f000 8093 	beq.w	8009156 <ucdr_deserialize_double+0x176>
 8009030:	79fb      	ldrb	r3, [r7, #7]
 8009032:	702b      	strb	r3, [r5, #0]
 8009034:	2e00      	cmp	r6, #0
 8009036:	d072      	beq.n	800911e <ucdr_deserialize_double+0x13e>
 8009038:	79bb      	ldrb	r3, [r7, #6]
 800903a:	706b      	strb	r3, [r5, #1]
 800903c:	2e01      	cmp	r6, #1
 800903e:	f105 0302 	add.w	r3, r5, #2
 8009042:	d070      	beq.n	8009126 <ucdr_deserialize_double+0x146>
 8009044:	797b      	ldrb	r3, [r7, #5]
 8009046:	70ab      	strb	r3, [r5, #2]
 8009048:	2e02      	cmp	r6, #2
 800904a:	f105 0303 	add.w	r3, r5, #3
 800904e:	d06e      	beq.n	800912e <ucdr_deserialize_double+0x14e>
 8009050:	793b      	ldrb	r3, [r7, #4]
 8009052:	70eb      	strb	r3, [r5, #3]
 8009054:	2e03      	cmp	r6, #3
 8009056:	f105 0304 	add.w	r3, r5, #4
 800905a:	d06c      	beq.n	8009136 <ucdr_deserialize_double+0x156>
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	712b      	strb	r3, [r5, #4]
 8009060:	2e04      	cmp	r6, #4
 8009062:	f105 0305 	add.w	r3, r5, #5
 8009066:	d06a      	beq.n	800913e <ucdr_deserialize_double+0x15e>
 8009068:	78bb      	ldrb	r3, [r7, #2]
 800906a:	716b      	strb	r3, [r5, #5]
 800906c:	2e05      	cmp	r6, #5
 800906e:	f105 0306 	add.w	r3, r5, #6
 8009072:	d068      	beq.n	8009146 <ucdr_deserialize_double+0x166>
 8009074:	787b      	ldrb	r3, [r7, #1]
 8009076:	71ab      	strb	r3, [r5, #6]
 8009078:	2e06      	cmp	r6, #6
 800907a:	f105 0307 	add.w	r3, r5, #7
 800907e:	d066      	beq.n	800914e <ucdr_deserialize_double+0x16e>
 8009080:	783b      	ldrb	r3, [r7, #0]
 8009082:	71eb      	strb	r3, [r5, #7]
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	68a2      	ldr	r2, [r4, #8]
 8009088:	7da0      	ldrb	r0, [r4, #22]
 800908a:	3308      	adds	r3, #8
 800908c:	1b9e      	subs	r6, r3, r6
 800908e:	2308      	movs	r3, #8
 8009090:	4442      	add	r2, r8
 8009092:	7563      	strb	r3, [r4, #21]
 8009094:	60a2      	str	r2, [r4, #8]
 8009096:	6126      	str	r6, [r4, #16]
 8009098:	f080 0001 	eor.w	r0, r0, #1
 800909c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a0:	2108      	movs	r1, #8
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 f86e 	bl	8009184 <ucdr_check_final_buffer_behavior>
 80090a8:	b310      	cbz	r0, 80090f0 <ucdr_deserialize_double+0x110>
 80090aa:	7d23      	ldrb	r3, [r4, #20]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	d023      	beq.n	80090fa <ucdr_deserialize_double+0x11a>
 80090b2:	79db      	ldrb	r3, [r3, #7]
 80090b4:	702b      	strb	r3, [r5, #0]
 80090b6:	68a3      	ldr	r3, [r4, #8]
 80090b8:	799b      	ldrb	r3, [r3, #6]
 80090ba:	706b      	strb	r3, [r5, #1]
 80090bc:	68a3      	ldr	r3, [r4, #8]
 80090be:	795b      	ldrb	r3, [r3, #5]
 80090c0:	70ab      	strb	r3, [r5, #2]
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	791b      	ldrb	r3, [r3, #4]
 80090c6:	70eb      	strb	r3, [r5, #3]
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	78db      	ldrb	r3, [r3, #3]
 80090cc:	712b      	strb	r3, [r5, #4]
 80090ce:	68a3      	ldr	r3, [r4, #8]
 80090d0:	789b      	ldrb	r3, [r3, #2]
 80090d2:	716b      	strb	r3, [r5, #5]
 80090d4:	68a3      	ldr	r3, [r4, #8]
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	71ab      	strb	r3, [r5, #6]
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	71eb      	strb	r3, [r5, #7]
 80090e0:	68a2      	ldr	r2, [r4, #8]
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	3208      	adds	r2, #8
 80090e6:	3308      	adds	r3, #8
 80090e8:	2108      	movs	r1, #8
 80090ea:	60a2      	str	r2, [r4, #8]
 80090ec:	6123      	str	r3, [r4, #16]
 80090ee:	7561      	strb	r1, [r4, #21]
 80090f0:	7da0      	ldrb	r0, [r4, #22]
 80090f2:	f080 0001 	eor.w	r0, r0, #1
 80090f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	606b      	str	r3, [r5, #4]
 8009100:	602a      	str	r2, [r5, #0]
 8009102:	e7ed      	b.n	80090e0 <ucdr_deserialize_double+0x100>
 8009104:	68a2      	ldr	r2, [r4, #8]
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	7da0      	ldrb	r0, [r4, #22]
 800910a:	f884 9015 	strb.w	r9, [r4, #21]
 800910e:	1b92      	subs	r2, r2, r6
 8009110:	1b9b      	subs	r3, r3, r6
 8009112:	60a2      	str	r2, [r4, #8]
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	f080 0001 	eor.w	r0, r0, #1
 800911a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800911e:	68a3      	ldr	r3, [r4, #8]
 8009120:	799b      	ldrb	r3, [r3, #6]
 8009122:	706b      	strb	r3, [r5, #1]
 8009124:	1cab      	adds	r3, r5, #2
 8009126:	68a2      	ldr	r2, [r4, #8]
 8009128:	7952      	ldrb	r2, [r2, #5]
 800912a:	f803 2b01 	strb.w	r2, [r3], #1
 800912e:	68a2      	ldr	r2, [r4, #8]
 8009130:	7912      	ldrb	r2, [r2, #4]
 8009132:	f803 2b01 	strb.w	r2, [r3], #1
 8009136:	68a2      	ldr	r2, [r4, #8]
 8009138:	78d2      	ldrb	r2, [r2, #3]
 800913a:	f803 2b01 	strb.w	r2, [r3], #1
 800913e:	68a2      	ldr	r2, [r4, #8]
 8009140:	7892      	ldrb	r2, [r2, #2]
 8009142:	f803 2b01 	strb.w	r2, [r3], #1
 8009146:	68a2      	ldr	r2, [r4, #8]
 8009148:	7852      	ldrb	r2, [r2, #1]
 800914a:	f803 2b01 	strb.w	r2, [r3], #1
 800914e:	68a2      	ldr	r2, [r4, #8]
 8009150:	7812      	ldrb	r2, [r2, #0]
 8009152:	701a      	strb	r2, [r3, #0]
 8009154:	e796      	b.n	8009084 <ucdr_deserialize_double+0xa4>
 8009156:	4639      	mov	r1, r7
 8009158:	4632      	mov	r2, r6
 800915a:	4628      	mov	r0, r5
 800915c:	f00c f98d 	bl	801547a <memcpy>
 8009160:	68a1      	ldr	r1, [r4, #8]
 8009162:	4642      	mov	r2, r8
 8009164:	19a8      	adds	r0, r5, r6
 8009166:	f00c f988 	bl	801547a <memcpy>
 800916a:	e78b      	b.n	8009084 <ucdr_deserialize_double+0xa4>

0800916c <ucdr_check_buffer_available_for>:
 800916c:	7d83      	ldrb	r3, [r0, #22]
 800916e:	b93b      	cbnz	r3, 8009180 <ucdr_check_buffer_available_for+0x14>
 8009170:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009174:	4419      	add	r1, r3
 8009176:	4288      	cmp	r0, r1
 8009178:	bf34      	ite	cc
 800917a:	2000      	movcc	r0, #0
 800917c:	2001      	movcs	r0, #1
 800917e:	4770      	bx	lr
 8009180:	2000      	movs	r0, #0
 8009182:	4770      	bx	lr

08009184 <ucdr_check_final_buffer_behavior>:
 8009184:	7d83      	ldrb	r3, [r0, #22]
 8009186:	b943      	cbnz	r3, 800919a <ucdr_check_final_buffer_behavior+0x16>
 8009188:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800918c:	4291      	cmp	r1, r2
 800918e:	b510      	push	{r4, lr}
 8009190:	4604      	mov	r4, r0
 8009192:	d205      	bcs.n	80091a0 <ucdr_check_final_buffer_behavior+0x1c>
 8009194:	2301      	movs	r3, #1
 8009196:	4618      	mov	r0, r3
 8009198:	bd10      	pop	{r4, pc}
 800919a:	2300      	movs	r3, #0
 800919c:	4618      	mov	r0, r3
 800919e:	4770      	bx	lr
 80091a0:	6982      	ldr	r2, [r0, #24]
 80091a2:	b13a      	cbz	r2, 80091b4 <ucdr_check_final_buffer_behavior+0x30>
 80091a4:	69c1      	ldr	r1, [r0, #28]
 80091a6:	4790      	blx	r2
 80091a8:	f080 0301 	eor.w	r3, r0, #1
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	75a0      	strb	r0, [r4, #22]
 80091b0:	4618      	mov	r0, r3
 80091b2:	bd10      	pop	{r4, pc}
 80091b4:	2001      	movs	r0, #1
 80091b6:	75a0      	strb	r0, [r4, #22]
 80091b8:	e7fa      	b.n	80091b0 <ucdr_check_final_buffer_behavior+0x2c>
 80091ba:	bf00      	nop

080091bc <ucdr_set_on_full_buffer_callback>:
 80091bc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop

080091c4 <ucdr_init_buffer_origin_offset_endian>:
 80091c4:	b410      	push	{r4}
 80091c6:	9c01      	ldr	r4, [sp, #4]
 80091c8:	6001      	str	r1, [r0, #0]
 80091ca:	440a      	add	r2, r1
 80091cc:	6042      	str	r2, [r0, #4]
 80091ce:	190a      	adds	r2, r1, r4
 80091d0:	441c      	add	r4, r3
 80091d2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80091d6:	6082      	str	r2, [r0, #8]
 80091d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80091dc:	7503      	strb	r3, [r0, #20]
 80091de:	2200      	movs	r2, #0
 80091e0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80091e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e8:	7542      	strb	r2, [r0, #21]
 80091ea:	7582      	strb	r2, [r0, #22]
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop

080091f0 <ucdr_init_buffer_origin_offset>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	9c04      	ldr	r4, [sp, #16]
 80091f6:	9400      	str	r4, [sp, #0]
 80091f8:	2401      	movs	r4, #1
 80091fa:	9401      	str	r4, [sp, #4]
 80091fc:	f7ff ffe2 	bl	80091c4 <ucdr_init_buffer_origin_offset_endian>
 8009200:	b002      	add	sp, #8
 8009202:	bd10      	pop	{r4, pc}

08009204 <ucdr_init_buffer_origin>:
 8009204:	b510      	push	{r4, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	2400      	movs	r4, #0
 800920a:	9400      	str	r4, [sp, #0]
 800920c:	f7ff fff0 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 8009210:	b002      	add	sp, #8
 8009212:	bd10      	pop	{r4, pc}

08009214 <ucdr_init_buffer>:
 8009214:	2300      	movs	r3, #0
 8009216:	f7ff bff5 	b.w	8009204 <ucdr_init_buffer_origin>
 800921a:	bf00      	nop

0800921c <ucdr_alignment>:
 800921c:	fbb0 f3f1 	udiv	r3, r0, r1
 8009220:	fb03 0011 	mls	r0, r3, r1, r0
 8009224:	1a08      	subs	r0, r1, r0
 8009226:	3901      	subs	r1, #1
 8009228:	4008      	ands	r0, r1
 800922a:	4770      	bx	lr

0800922c <ucdr_buffer_alignment>:
 800922c:	7d43      	ldrb	r3, [r0, #21]
 800922e:	428b      	cmp	r3, r1
 8009230:	d208      	bcs.n	8009244 <ucdr_buffer_alignment+0x18>
 8009232:	6900      	ldr	r0, [r0, #16]
 8009234:	fbb0 f3f1 	udiv	r3, r0, r1
 8009238:	fb01 0013 	mls	r0, r1, r3, r0
 800923c:	1a08      	subs	r0, r1, r0
 800923e:	3901      	subs	r1, #1
 8009240:	4008      	ands	r0, r1
 8009242:	4770      	bx	lr
 8009244:	2000      	movs	r0, #0
 8009246:	4770      	bx	lr

08009248 <ucdr_align_to>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4604      	mov	r4, r0
 800924c:	460d      	mov	r5, r1
 800924e:	f7ff ffed 	bl	800922c <ucdr_buffer_alignment>
 8009252:	68a3      	ldr	r3, [r4, #8]
 8009254:	6921      	ldr	r1, [r4, #16]
 8009256:	7565      	strb	r5, [r4, #21]
 8009258:	181a      	adds	r2, r3, r0
 800925a:	6863      	ldr	r3, [r4, #4]
 800925c:	4293      	cmp	r3, r2
 800925e:	4408      	add	r0, r1
 8009260:	bf28      	it	cs
 8009262:	4613      	movcs	r3, r2
 8009264:	6120      	str	r0, [r4, #16]
 8009266:	60a3      	str	r3, [r4, #8]
 8009268:	bd38      	pop	{r3, r4, r5, pc}
 800926a:	bf00      	nop

0800926c <ucdr_buffer_length>:
 800926c:	6882      	ldr	r2, [r0, #8]
 800926e:	6800      	ldr	r0, [r0, #0]
 8009270:	1a10      	subs	r0, r2, r0
 8009272:	4770      	bx	lr

08009274 <ucdr_buffer_remaining>:
 8009274:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009278:	1a10      	subs	r0, r2, r0
 800927a:	4770      	bx	lr

0800927c <ucdr_check_final_buffer_behavior_array>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	7d83      	ldrb	r3, [r0, #22]
 8009280:	b963      	cbnz	r3, 800929c <ucdr_check_final_buffer_behavior_array+0x20>
 8009282:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	4604      	mov	r4, r0
 800928a:	460d      	mov	r5, r1
 800928c:	d308      	bcc.n	80092a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800928e:	b139      	cbz	r1, 80092a0 <ucdr_check_final_buffer_behavior_array+0x24>
 8009290:	6983      	ldr	r3, [r0, #24]
 8009292:	b163      	cbz	r3, 80092ae <ucdr_check_final_buffer_behavior_array+0x32>
 8009294:	69c1      	ldr	r1, [r0, #28]
 8009296:	4798      	blx	r3
 8009298:	75a0      	strb	r0, [r4, #22]
 800929a:	b108      	cbz	r0, 80092a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800929c:	2000      	movs	r0, #0
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	4620      	mov	r0, r4
 80092a2:	f7ff ffe7 	bl	8009274 <ucdr_buffer_remaining>
 80092a6:	42a8      	cmp	r0, r5
 80092a8:	bf28      	it	cs
 80092aa:	4628      	movcs	r0, r5
 80092ac:	bd38      	pop	{r3, r4, r5, pc}
 80092ae:	2301      	movs	r3, #1
 80092b0:	7583      	strb	r3, [r0, #22]
 80092b2:	e7f3      	b.n	800929c <ucdr_check_final_buffer_behavior_array+0x20>

080092b4 <ucdr_advance_buffer>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	f7ff ff57 	bl	800916c <ucdr_check_buffer_available_for>
 80092be:	b178      	cbz	r0, 80092e0 <ucdr_advance_buffer+0x2c>
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	68a2      	ldr	r2, [r4, #8]
 80092c4:	442b      	add	r3, r5
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	2301      	movs	r3, #1
 80092ca:	442a      	add	r2, r5
 80092cc:	7563      	strb	r3, [r4, #21]
 80092ce:	60a2      	str	r2, [r4, #8]
 80092d0:	bd38      	pop	{r3, r4, r5, pc}
 80092d2:	68a2      	ldr	r2, [r4, #8]
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	4402      	add	r2, r0
 80092d8:	4403      	add	r3, r0
 80092da:	1a2d      	subs	r5, r5, r0
 80092dc:	60a2      	str	r2, [r4, #8]
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	4629      	mov	r1, r5
 80092e2:	2201      	movs	r2, #1
 80092e4:	4620      	mov	r0, r4
 80092e6:	f7ff ffc9 	bl	800927c <ucdr_check_final_buffer_behavior_array>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d1f1      	bne.n	80092d2 <ucdr_advance_buffer+0x1e>
 80092ee:	2301      	movs	r3, #1
 80092f0:	7563      	strb	r3, [r4, #21]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}

080092f4 <rcl_get_zero_initialized_node>:
 80092f4:	4a03      	ldr	r2, [pc, #12]	; (8009304 <rcl_get_zero_initialized_node+0x10>)
 80092f6:	4603      	mov	r3, r0
 80092f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80092fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8009300:	4618      	mov	r0, r3
 8009302:	4770      	bx	lr
 8009304:	080163f8 	.word	0x080163f8

08009308 <rcl_node_init>:
 8009308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930c:	b0a9      	sub	sp, #164	; 0xa4
 800930e:	4604      	mov	r4, r0
 8009310:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8009314:	a823      	add	r0, sp, #140	; 0x8c
 8009316:	460e      	mov	r6, r1
 8009318:	4615      	mov	r5, r2
 800931a:	461f      	mov	r7, r3
 800931c:	f006 f802 	bl	800f324 <rcl_guard_condition_get_default_options>
 8009320:	f1b8 0f00 	cmp.w	r8, #0
 8009324:	f000 80e6 	beq.w	80094f4 <rcl_node_init+0x1ec>
 8009328:	4640      	mov	r0, r8
 800932a:	f001 fbf1 	bl	800ab10 <rcutils_allocator_is_valid>
 800932e:	2800      	cmp	r0, #0
 8009330:	f000 80e0 	beq.w	80094f4 <rcl_node_init+0x1ec>
 8009334:	2e00      	cmp	r6, #0
 8009336:	f000 80dd 	beq.w	80094f4 <rcl_node_init+0x1ec>
 800933a:	2d00      	cmp	r5, #0
 800933c:	f000 80da 	beq.w	80094f4 <rcl_node_init+0x1ec>
 8009340:	2c00      	cmp	r4, #0
 8009342:	f000 80d7 	beq.w	80094f4 <rcl_node_init+0x1ec>
 8009346:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800934a:	f1b9 0f00 	cmp.w	r9, #0
 800934e:	f040 80fd 	bne.w	800954c <rcl_node_init+0x244>
 8009352:	2f00      	cmp	r7, #0
 8009354:	f000 80ce 	beq.w	80094f4 <rcl_node_init+0x1ec>
 8009358:	4638      	mov	r0, r7
 800935a:	f005 feed 	bl	800f138 <rcl_context_is_valid>
 800935e:	4682      	mov	sl, r0
 8009360:	2800      	cmp	r0, #0
 8009362:	f000 80cd 	beq.w	8009500 <rcl_node_init+0x1f8>
 8009366:	464a      	mov	r2, r9
 8009368:	a922      	add	r1, sp, #136	; 0x88
 800936a:	4630      	mov	r0, r6
 800936c:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8009370:	f001 fe66 	bl	800b040 <rmw_validate_node_name>
 8009374:	4681      	mov	r9, r0
 8009376:	2800      	cmp	r0, #0
 8009378:	f040 80be 	bne.w	80094f8 <rcl_node_init+0x1f0>
 800937c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800937e:	2800      	cmp	r0, #0
 8009380:	f040 80f0 	bne.w	8009564 <rcl_node_init+0x25c>
 8009384:	4628      	mov	r0, r5
 8009386:	f7f6 ff35 	bl	80001f4 <strlen>
 800938a:	2800      	cmp	r0, #0
 800938c:	f040 80bb 	bne.w	8009506 <rcl_node_init+0x1fe>
 8009390:	4d7c      	ldr	r5, [pc, #496]	; (8009584 <rcl_node_init+0x27c>)
 8009392:	a922      	add	r1, sp, #136	; 0x88
 8009394:	2200      	movs	r2, #0
 8009396:	4628      	mov	r0, r5
 8009398:	f001 fe34 	bl	800b004 <rmw_validate_namespace>
 800939c:	4681      	mov	r9, r0
 800939e:	2800      	cmp	r0, #0
 80093a0:	f040 80aa 	bne.w	80094f8 <rcl_node_init+0x1f0>
 80093a4:	4682      	mov	sl, r0
 80093a6:	9822      	ldr	r0, [sp, #136]	; 0x88
 80093a8:	2800      	cmp	r0, #0
 80093aa:	f040 80e0 	bne.w	800956e <rcl_node_init+0x266>
 80093ae:	f8d8 3000 	ldr.w	r3, [r8]
 80093b2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80093b6:	2078      	movs	r0, #120	; 0x78
 80093b8:	4798      	blx	r3
 80093ba:	4681      	mov	r9, r0
 80093bc:	6060      	str	r0, [r4, #4]
 80093be:	2800      	cmp	r0, #0
 80093c0:	f000 80ca 	beq.w	8009558 <rcl_node_init+0x250>
 80093c4:	2200      	movs	r2, #0
 80093c6:	2300      	movs	r3, #0
 80093c8:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 80093cc:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 80093d0:	a808      	add	r0, sp, #32
 80093d2:	f000 f939 	bl	8009648 <rcl_node_get_default_options>
 80093d6:	a908      	add	r1, sp, #32
 80093d8:	4648      	mov	r0, r9
 80093da:	2268      	movs	r2, #104	; 0x68
 80093dc:	f00c f84d 	bl	801547a <memcpy>
 80093e0:	6861      	ldr	r1, [r4, #4]
 80093e2:	6027      	str	r7, [r4, #0]
 80093e4:	4640      	mov	r0, r8
 80093e6:	f000 f93d 	bl	8009664 <rcl_node_options_copy>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d158      	bne.n	80094a0 <rcl_node_init+0x198>
 80093ee:	4628      	mov	r0, r5
 80093f0:	f7f6 ff00 	bl	80001f4 <strlen>
 80093f4:	4428      	add	r0, r5
 80093f6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80093fa:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80093fe:	2b2f      	cmp	r3, #47	; 0x2f
 8009400:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	bf0c      	ite	eq
 8009408:	4b5f      	ldreq	r3, [pc, #380]	; (8009588 <rcl_node_init+0x280>)
 800940a:	4b60      	ldrne	r3, [pc, #384]	; (800958c <rcl_node_init+0x284>)
 800940c:	9302      	str	r3, [sp, #8]
 800940e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8009418:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800941c:	f001 fbd0 	bl	800abc0 <rcutils_format_string_limit>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	4631      	mov	r1, r6
 800942a:	3028      	adds	r0, #40	; 0x28
 800942c:	462a      	mov	r2, r5
 800942e:	6866      	ldr	r6, [r4, #4]
 8009430:	f001 fef4 	bl	800b21c <rmw_create_node>
 8009434:	6863      	ldr	r3, [r4, #4]
 8009436:	66b0      	str	r0, [r6, #104]	; 0x68
 8009438:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800943a:	2800      	cmp	r0, #0
 800943c:	d032      	beq.n	80094a4 <rcl_node_init+0x19c>
 800943e:	f001 ff81 	bl	800b344 <rmw_node_get_graph_guard_condition>
 8009442:	4681      	mov	r9, r0
 8009444:	b360      	cbz	r0, 80094a0 <rcl_node_init+0x198>
 8009446:	f8d8 3000 	ldr.w	r3, [r8]
 800944a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800944e:	6866      	ldr	r6, [r4, #4]
 8009450:	2008      	movs	r0, #8
 8009452:	4798      	blx	r3
 8009454:	6863      	ldr	r3, [r4, #4]
 8009456:	66f0      	str	r0, [r6, #108]	; 0x6c
 8009458:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800945c:	f1bb 0f00 	cmp.w	fp, #0
 8009460:	d020      	beq.n	80094a4 <rcl_node_init+0x19c>
 8009462:	a806      	add	r0, sp, #24
 8009464:	f005 fece 	bl	800f204 <rcl_get_zero_initialized_guard_condition>
 8009468:	a806      	add	r0, sp, #24
 800946a:	c803      	ldmia	r0, {r0, r1}
 800946c:	6863      	ldr	r3, [r4, #4]
 800946e:	46c4      	mov	ip, r8
 8009470:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8009474:	e88b 0003 	stmia.w	fp, {r0, r1}
 8009478:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800947c:	ae23      	add	r6, sp, #140	; 0x8c
 800947e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009480:	f8dc 3000 	ldr.w	r3, [ip]
 8009484:	6033      	str	r3, [r6, #0]
 8009486:	ab28      	add	r3, sp, #160	; 0xa0
 8009488:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800948c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009490:	4649      	mov	r1, r9
 8009492:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009494:	463a      	mov	r2, r7
 8009496:	4670      	mov	r0, lr
 8009498:	f005 febe 	bl	800f218 <rcl_guard_condition_init_from_rmw>
 800949c:	4681      	mov	r9, r0
 800949e:	b328      	cbz	r0, 80094ec <rcl_node_init+0x1e4>
 80094a0:	6863      	ldr	r3, [r4, #4]
 80094a2:	b1f3      	cbz	r3, 80094e2 <rcl_node_init+0x1da>
 80094a4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80094a6:	b128      	cbz	r0, 80094b4 <rcl_node_init+0x1ac>
 80094a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094ac:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80094b0:	4798      	blx	r3
 80094b2:	6863      	ldr	r3, [r4, #4]
 80094b4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80094b6:	b110      	cbz	r0, 80094be <rcl_node_init+0x1b6>
 80094b8:	f001 fec8 	bl	800b24c <rmw_destroy_node>
 80094bc:	6863      	ldr	r3, [r4, #4]
 80094be:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80094c0:	b148      	cbz	r0, 80094d6 <rcl_node_init+0x1ce>
 80094c2:	f005 ff09 	bl	800f2d8 <rcl_guard_condition_fini>
 80094c6:	6863      	ldr	r3, [r4, #4]
 80094c8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80094cc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80094ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094d2:	4798      	blx	r3
 80094d4:	6863      	ldr	r3, [r4, #4]
 80094d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80094da:	4618      	mov	r0, r3
 80094dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094e0:	4798      	blx	r3
 80094e2:	2300      	movs	r3, #0
 80094e4:	e9c4 3300 	strd	r3, r3, [r4]
 80094e8:	f04f 0901 	mov.w	r9, #1
 80094ec:	f1ba 0f00 	cmp.w	sl, #0
 80094f0:	d125      	bne.n	800953e <rcl_node_init+0x236>
 80094f2:	e001      	b.n	80094f8 <rcl_node_init+0x1f0>
 80094f4:	f04f 090b 	mov.w	r9, #11
 80094f8:	4648      	mov	r0, r9
 80094fa:	b029      	add	sp, #164	; 0xa4
 80094fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009500:	f04f 0965 	mov.w	r9, #101	; 0x65
 8009504:	e7f8      	b.n	80094f8 <rcl_node_init+0x1f0>
 8009506:	782b      	ldrb	r3, [r5, #0]
 8009508:	2b2f      	cmp	r3, #47	; 0x2f
 800950a:	f43f af42 	beq.w	8009392 <rcl_node_init+0x8a>
 800950e:	9503      	str	r5, [sp, #12]
 8009510:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	4b1e      	ldr	r3, [pc, #120]	; (8009590 <rcl_node_init+0x288>)
 8009518:	9302      	str	r3, [sp, #8]
 800951a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8009524:	f001 fb4c 	bl	800abc0 <rcutils_format_string_limit>
 8009528:	4605      	mov	r5, r0
 800952a:	b340      	cbz	r0, 800957e <rcl_node_init+0x276>
 800952c:	2200      	movs	r2, #0
 800952e:	a922      	add	r1, sp, #136	; 0x88
 8009530:	9222      	str	r2, [sp, #136]	; 0x88
 8009532:	f001 fd67 	bl	800b004 <rmw_validate_namespace>
 8009536:	4681      	mov	r9, r0
 8009538:	2800      	cmp	r0, #0
 800953a:	f43f af34 	beq.w	80093a6 <rcl_node_init+0x9e>
 800953e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009542:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009546:	4628      	mov	r0, r5
 8009548:	4798      	blx	r3
 800954a:	e7d5      	b.n	80094f8 <rcl_node_init+0x1f0>
 800954c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009550:	4648      	mov	r0, r9
 8009552:	b029      	add	sp, #164	; 0xa4
 8009554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009558:	f04f 090a 	mov.w	r9, #10
 800955c:	f1ba 0f00 	cmp.w	sl, #0
 8009560:	d1ed      	bne.n	800953e <rcl_node_init+0x236>
 8009562:	e7c9      	b.n	80094f8 <rcl_node_init+0x1f0>
 8009564:	f001 fdbe 	bl	800b0e4 <rmw_node_name_validation_result_string>
 8009568:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800956c:	e7c4      	b.n	80094f8 <rcl_node_init+0x1f0>
 800956e:	f001 fd5b 	bl	800b028 <rmw_namespace_validation_result_string>
 8009572:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8009576:	f1ba 0f00 	cmp.w	sl, #0
 800957a:	d1e0      	bne.n	800953e <rcl_node_init+0x236>
 800957c:	e7bc      	b.n	80094f8 <rcl_node_init+0x1f0>
 800957e:	f04f 090a 	mov.w	r9, #10
 8009582:	e7b9      	b.n	80094f8 <rcl_node_init+0x1f0>
 8009584:	080163e0 	.word	0x080163e0
 8009588:	080163e8 	.word	0x080163e8
 800958c:	080163f0 	.word	0x080163f0
 8009590:	080163e4 	.word	0x080163e4

08009594 <rcl_node_fini>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	b320      	cbz	r0, 80095e2 <rcl_node_fini+0x4e>
 8009598:	6845      	ldr	r5, [r0, #4]
 800959a:	4604      	mov	r4, r0
 800959c:	b1fd      	cbz	r5, 80095de <rcl_node_fini+0x4a>
 800959e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80095a0:	686f      	ldr	r7, [r5, #4]
 80095a2:	692e      	ldr	r6, [r5, #16]
 80095a4:	f001 fe52 	bl	800b24c <rmw_destroy_node>
 80095a8:	6863      	ldr	r3, [r4, #4]
 80095aa:	4605      	mov	r5, r0
 80095ac:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80095ae:	f005 fe93 	bl	800f2d8 <rcl_guard_condition_fini>
 80095b2:	ea55 0300 	orrs.w	r3, r5, r0
 80095b6:	6863      	ldr	r3, [r4, #4]
 80095b8:	4631      	mov	r1, r6
 80095ba:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80095bc:	bf14      	ite	ne
 80095be:	2501      	movne	r5, #1
 80095c0:	2500      	moveq	r5, #0
 80095c2:	47b8      	blx	r7
 80095c4:	6863      	ldr	r3, [r4, #4]
 80095c6:	4631      	mov	r1, r6
 80095c8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80095ca:	47b8      	blx	r7
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	4631      	mov	r1, r6
 80095d0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80095d2:	47b8      	blx	r7
 80095d4:	6860      	ldr	r0, [r4, #4]
 80095d6:	4631      	mov	r1, r6
 80095d8:	47b8      	blx	r7
 80095da:	2300      	movs	r3, #0
 80095dc:	6063      	str	r3, [r4, #4]
 80095de:	4628      	mov	r0, r5
 80095e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e2:	25c8      	movs	r5, #200	; 0xc8
 80095e4:	4628      	mov	r0, r5
 80095e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095e8 <rcl_node_is_valid_except_context>:
 80095e8:	b128      	cbz	r0, 80095f6 <rcl_node_is_valid_except_context+0xe>
 80095ea:	6840      	ldr	r0, [r0, #4]
 80095ec:	b118      	cbz	r0, 80095f6 <rcl_node_is_valid_except_context+0xe>
 80095ee:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80095f0:	3800      	subs	r0, #0
 80095f2:	bf18      	it	ne
 80095f4:	2001      	movne	r0, #1
 80095f6:	4770      	bx	lr

080095f8 <rcl_node_is_valid>:
 80095f8:	b130      	cbz	r0, 8009608 <rcl_node_is_valid+0x10>
 80095fa:	6843      	ldr	r3, [r0, #4]
 80095fc:	b123      	cbz	r3, 8009608 <rcl_node_is_valid+0x10>
 80095fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009600:	b113      	cbz	r3, 8009608 <rcl_node_is_valid+0x10>
 8009602:	6800      	ldr	r0, [r0, #0]
 8009604:	f005 bd98 	b.w	800f138 <rcl_context_is_valid>
 8009608:	2000      	movs	r0, #0
 800960a:	4770      	bx	lr

0800960c <rcl_node_get_name>:
 800960c:	b120      	cbz	r0, 8009618 <rcl_node_get_name+0xc>
 800960e:	6840      	ldr	r0, [r0, #4]
 8009610:	b110      	cbz	r0, 8009618 <rcl_node_get_name+0xc>
 8009612:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009614:	b100      	cbz	r0, 8009618 <rcl_node_get_name+0xc>
 8009616:	6880      	ldr	r0, [r0, #8]
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop

0800961c <rcl_node_get_namespace>:
 800961c:	b120      	cbz	r0, 8009628 <rcl_node_get_namespace+0xc>
 800961e:	6840      	ldr	r0, [r0, #4]
 8009620:	b110      	cbz	r0, 8009628 <rcl_node_get_namespace+0xc>
 8009622:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009624:	b100      	cbz	r0, 8009628 <rcl_node_get_namespace+0xc>
 8009626:	68c0      	ldr	r0, [r0, #12]
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop

0800962c <rcl_node_get_options>:
 800962c:	b128      	cbz	r0, 800963a <rcl_node_get_options+0xe>
 800962e:	6840      	ldr	r0, [r0, #4]
 8009630:	b118      	cbz	r0, 800963a <rcl_node_get_options+0xe>
 8009632:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009634:	2b00      	cmp	r3, #0
 8009636:	bf08      	it	eq
 8009638:	2000      	moveq	r0, #0
 800963a:	4770      	bx	lr

0800963c <rcl_node_get_rmw_handle>:
 800963c:	b110      	cbz	r0, 8009644 <rcl_node_get_rmw_handle+0x8>
 800963e:	6840      	ldr	r0, [r0, #4]
 8009640:	b100      	cbz	r0, 8009644 <rcl_node_get_rmw_handle+0x8>
 8009642:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop

08009648 <rcl_node_get_default_options>:
 8009648:	b510      	push	{r4, lr}
 800964a:	2268      	movs	r2, #104	; 0x68
 800964c:	4604      	mov	r4, r0
 800964e:	2100      	movs	r1, #0
 8009650:	f00b fe4a 	bl	80152e8 <memset>
 8009654:	4620      	mov	r0, r4
 8009656:	f001 fa4d 	bl	800aaf4 <rcutils_get_default_allocator>
 800965a:	2301      	movs	r3, #1
 800965c:	7523      	strb	r3, [r4, #20]
 800965e:	4620      	mov	r0, r4
 8009660:	bd10      	pop	{r4, pc}
 8009662:	bf00      	nop

08009664 <rcl_node_options_copy>:
 8009664:	b1d0      	cbz	r0, 800969c <rcl_node_options_copy+0x38>
 8009666:	b570      	push	{r4, r5, r6, lr}
 8009668:	460c      	mov	r4, r1
 800966a:	b1a9      	cbz	r1, 8009698 <rcl_node_options_copy+0x34>
 800966c:	4288      	cmp	r0, r1
 800966e:	4684      	mov	ip, r0
 8009670:	d012      	beq.n	8009698 <rcl_node_options_copy+0x34>
 8009672:	4605      	mov	r5, r0
 8009674:	8a86      	ldrh	r6, [r0, #20]
 8009676:	468e      	mov	lr, r1
 8009678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800967a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800967e:	682b      	ldr	r3, [r5, #0]
 8009680:	f8ce 3000 	str.w	r3, [lr]
 8009684:	f10c 0118 	add.w	r1, ip, #24
 8009688:	2250      	movs	r2, #80	; 0x50
 800968a:	82a6      	strh	r6, [r4, #20]
 800968c:	f104 0018 	add.w	r0, r4, #24
 8009690:	f00b fef3 	bl	801547a <memcpy>
 8009694:	2000      	movs	r0, #0
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	200b      	movs	r0, #11
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	200b      	movs	r0, #11
 800969e:	4770      	bx	lr

080096a0 <rcl_get_zero_initialized_publisher>:
 80096a0:	4b01      	ldr	r3, [pc, #4]	; (80096a8 <rcl_get_zero_initialized_publisher+0x8>)
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	08016400 	.word	0x08016400

080096ac <rcl_publisher_init>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	b088      	sub	sp, #32
 80096b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80096b4:	2d00      	cmp	r5, #0
 80096b6:	d069      	beq.n	800978c <rcl_publisher_init+0xe0>
 80096b8:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80096bc:	4604      	mov	r4, r0
 80096be:	4648      	mov	r0, r9
 80096c0:	460e      	mov	r6, r1
 80096c2:	4690      	mov	r8, r2
 80096c4:	461f      	mov	r7, r3
 80096c6:	f001 fa23 	bl	800ab10 <rcutils_allocator_is_valid>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d05e      	beq.n	800978c <rcl_publisher_init+0xe0>
 80096ce:	2c00      	cmp	r4, #0
 80096d0:	d05c      	beq.n	800978c <rcl_publisher_init+0xe0>
 80096d2:	f8d4 a000 	ldr.w	sl, [r4]
 80096d6:	f1ba 0f00 	cmp.w	sl, #0
 80096da:	d004      	beq.n	80096e6 <rcl_publisher_init+0x3a>
 80096dc:	2764      	movs	r7, #100	; 0x64
 80096de:	4638      	mov	r0, r7
 80096e0:	b008      	add	sp, #32
 80096e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff ff86 	bl	80095f8 <rcl_node_is_valid>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d052      	beq.n	8009796 <rcl_publisher_init+0xea>
 80096f0:	f1b8 0f00 	cmp.w	r8, #0
 80096f4:	d04a      	beq.n	800978c <rcl_publisher_init+0xe0>
 80096f6:	2f00      	cmp	r7, #0
 80096f8:	d048      	beq.n	800978c <rcl_publisher_init+0xe0>
 80096fa:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80096fe:	aa07      	add	r2, sp, #28
 8009700:	9205      	str	r2, [sp, #20]
 8009702:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8009706:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800970a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800970e:	f8cd a01c 	str.w	sl, [sp, #28]
 8009712:	4639      	mov	r1, r7
 8009714:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009718:	4630      	mov	r0, r6
 800971a:	f006 f849 	bl	800f7b0 <rcl_node_resolve_name>
 800971e:	4607      	mov	r7, r0
 8009720:	2800      	cmp	r0, #0
 8009722:	d14f      	bne.n	80097c4 <rcl_publisher_init+0x118>
 8009724:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009726:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009728:	20c8      	movs	r0, #200	; 0xc8
 800972a:	4798      	blx	r3
 800972c:	6020      	str	r0, [r4, #0]
 800972e:	2800      	cmp	r0, #0
 8009730:	d04e      	beq.n	80097d0 <rcl_publisher_init+0x124>
 8009732:	4630      	mov	r0, r6
 8009734:	f7ff ff82 	bl	800963c <rcl_node_get_rmw_handle>
 8009738:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	9a07      	ldr	r2, [sp, #28]
 8009740:	6827      	ldr	r7, [r4, #0]
 8009742:	462b      	mov	r3, r5
 8009744:	4641      	mov	r1, r8
 8009746:	f001 fe03 	bl	800b350 <rmw_create_publisher>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8009750:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8009754:	b370      	cbz	r0, 80097b4 <rcl_publisher_init+0x108>
 8009756:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800975a:	f001 fed7 	bl	800b50c <rmw_publisher_get_actual_qos>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	4607      	mov	r7, r0
 8009762:	b9d0      	cbnz	r0, 800979a <rcl_publisher_init+0xee>
 8009764:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8009768:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800976c:	4629      	mov	r1, r5
 800976e:	2270      	movs	r2, #112	; 0x70
 8009770:	4618      	mov	r0, r3
 8009772:	f00b fe82 	bl	801547a <memcpy>
 8009776:	6832      	ldr	r2, [r6, #0]
 8009778:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800977c:	9807      	ldr	r0, [sp, #28]
 800977e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8009780:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009782:	4798      	blx	r3
 8009784:	4638      	mov	r0, r7
 8009786:	b008      	add	sp, #32
 8009788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800978c:	270b      	movs	r7, #11
 800978e:	4638      	mov	r0, r7
 8009790:	b008      	add	sp, #32
 8009792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009796:	27c8      	movs	r7, #200	; 0xc8
 8009798:	e7a1      	b.n	80096de <rcl_publisher_init+0x32>
 800979a:	b18b      	cbz	r3, 80097c0 <rcl_publisher_init+0x114>
 800979c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80097a0:	b142      	cbz	r2, 80097b4 <rcl_publisher_init+0x108>
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ff4a 	bl	800963c <rcl_node_get_rmw_handle>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80097ae:	f001 febd 	bl	800b52c <rmw_destroy_publisher>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80097b6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80097b8:	4618      	mov	r0, r3
 80097ba:	4790      	blx	r2
 80097bc:	2300      	movs	r3, #0
 80097be:	6023      	str	r3, [r4, #0]
 80097c0:	2701      	movs	r7, #1
 80097c2:	e7db      	b.n	800977c <rcl_publisher_init+0xd0>
 80097c4:	2867      	cmp	r0, #103	; 0x67
 80097c6:	d0d9      	beq.n	800977c <rcl_publisher_init+0xd0>
 80097c8:	2869      	cmp	r0, #105	; 0x69
 80097ca:	d003      	beq.n	80097d4 <rcl_publisher_init+0x128>
 80097cc:	280a      	cmp	r0, #10
 80097ce:	d1f7      	bne.n	80097c0 <rcl_publisher_init+0x114>
 80097d0:	270a      	movs	r7, #10
 80097d2:	e7d3      	b.n	800977c <rcl_publisher_init+0xd0>
 80097d4:	2767      	movs	r7, #103	; 0x67
 80097d6:	e7d1      	b.n	800977c <rcl_publisher_init+0xd0>

080097d8 <rcl_publisher_fini>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	b300      	cbz	r0, 800981e <rcl_publisher_fini+0x46>
 80097dc:	4604      	mov	r4, r0
 80097de:	4608      	mov	r0, r1
 80097e0:	460d      	mov	r5, r1
 80097e2:	f7ff ff01 	bl	80095e8 <rcl_node_is_valid_except_context>
 80097e6:	b1f0      	cbz	r0, 8009826 <rcl_publisher_fini+0x4e>
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	b1ab      	cbz	r3, 8009818 <rcl_publisher_fini+0x40>
 80097ec:	4628      	mov	r0, r5
 80097ee:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 80097f0:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80097f2:	f7ff ff23 	bl	800963c <rcl_node_get_rmw_handle>
 80097f6:	b1c8      	cbz	r0, 800982c <rcl_publisher_fini+0x54>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80097fe:	f001 fe95 	bl	800b52c <rmw_destroy_publisher>
 8009802:	4603      	mov	r3, r0
 8009804:	4629      	mov	r1, r5
 8009806:	6820      	ldr	r0, [r4, #0]
 8009808:	1e1d      	subs	r5, r3, #0
 800980a:	bf18      	it	ne
 800980c:	2501      	movne	r5, #1
 800980e:	47b0      	blx	r6
 8009810:	2300      	movs	r3, #0
 8009812:	6023      	str	r3, [r4, #0]
 8009814:	4628      	mov	r0, r5
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	461d      	mov	r5, r3
 800981a:	4628      	mov	r0, r5
 800981c:	bd70      	pop	{r4, r5, r6, pc}
 800981e:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8009822:	4628      	mov	r0, r5
 8009824:	bd70      	pop	{r4, r5, r6, pc}
 8009826:	25c8      	movs	r5, #200	; 0xc8
 8009828:	4628      	mov	r0, r5
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	250b      	movs	r5, #11
 800982e:	e7f1      	b.n	8009814 <rcl_publisher_fini+0x3c>

08009830 <rcl_publisher_get_default_options>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	4d14      	ldr	r5, [pc, #80]	; (8009884 <rcl_publisher_get_default_options+0x54>)
 8009834:	4914      	ldr	r1, [pc, #80]	; (8009888 <rcl_publisher_get_default_options+0x58>)
 8009836:	b088      	sub	sp, #32
 8009838:	4604      	mov	r4, r0
 800983a:	2250      	movs	r2, #80	; 0x50
 800983c:	4628      	mov	r0, r5
 800983e:	f00b fe1c 	bl	801547a <memcpy>
 8009842:	a802      	add	r0, sp, #8
 8009844:	f001 f956 	bl	800aaf4 <rcutils_get_default_allocator>
 8009848:	f10d 0c08 	add.w	ip, sp, #8
 800984c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009850:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8009854:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009858:	466e      	mov	r6, sp
 800985a:	f8dc 3000 	ldr.w	r3, [ip]
 800985e:	f8ce 3000 	str.w	r3, [lr]
 8009862:	4630      	mov	r0, r6
 8009864:	f001 fb54 	bl	800af10 <rmw_get_default_publisher_options>
 8009868:	e896 0003 	ldmia.w	r6, {r0, r1}
 800986c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8009870:	e883 0003 	stmia.w	r3, {r0, r1}
 8009874:	2270      	movs	r2, #112	; 0x70
 8009876:	4629      	mov	r1, r5
 8009878:	4620      	mov	r0, r4
 800987a:	f00b fdfe 	bl	801547a <memcpy>
 800987e:	4620      	mov	r0, r4
 8009880:	b008      	add	sp, #32
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	200091b0 	.word	0x200091b0
 8009888:	08016408 	.word	0x08016408

0800988c <rcl_publisher_is_valid>:
 800988c:	b1a0      	cbz	r0, 80098b8 <rcl_publisher_is_valid+0x2c>
 800988e:	6803      	ldr	r3, [r0, #0]
 8009890:	b510      	push	{r4, lr}
 8009892:	4604      	mov	r4, r0
 8009894:	b173      	cbz	r3, 80098b4 <rcl_publisher_is_valid+0x28>
 8009896:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800989a:	b15a      	cbz	r2, 80098b4 <rcl_publisher_is_valid+0x28>
 800989c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80098a0:	f005 fc4a 	bl	800f138 <rcl_context_is_valid>
 80098a4:	b130      	cbz	r0, 80098b4 <rcl_publisher_is_valid+0x28>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80098ac:	3800      	subs	r0, #0
 80098ae:	bf18      	it	ne
 80098b0:	2001      	movne	r0, #1
 80098b2:	bd10      	pop	{r4, pc}
 80098b4:	2000      	movs	r0, #0
 80098b6:	bd10      	pop	{r4, pc}
 80098b8:	2000      	movs	r0, #0
 80098ba:	4770      	bx	lr

080098bc <rcl_publisher_is_valid_except_context>:
 80098bc:	b130      	cbz	r0, 80098cc <rcl_publisher_is_valid_except_context+0x10>
 80098be:	6800      	ldr	r0, [r0, #0]
 80098c0:	b120      	cbz	r0, 80098cc <rcl_publisher_is_valid_except_context+0x10>
 80098c2:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 80098c6:	3800      	subs	r0, #0
 80098c8:	bf18      	it	ne
 80098ca:	2001      	movne	r0, #1
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop

080098d0 <rcl_get_zero_initialized_subscription>:
 80098d0:	4b01      	ldr	r3, [pc, #4]	; (80098d8 <rcl_get_zero_initialized_subscription+0x8>)
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	08016458 	.word	0x08016458

080098dc <rcl_subscription_init>:
 80098dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098e0:	b089      	sub	sp, #36	; 0x24
 80098e2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80098e4:	b1d6      	cbz	r6, 800991c <rcl_subscription_init+0x40>
 80098e6:	f106 0950 	add.w	r9, r6, #80	; 0x50
 80098ea:	4604      	mov	r4, r0
 80098ec:	4648      	mov	r0, r9
 80098ee:	460d      	mov	r5, r1
 80098f0:	4690      	mov	r8, r2
 80098f2:	461f      	mov	r7, r3
 80098f4:	f001 f90c 	bl	800ab10 <rcutils_allocator_is_valid>
 80098f8:	b180      	cbz	r0, 800991c <rcl_subscription_init+0x40>
 80098fa:	b17c      	cbz	r4, 800991c <rcl_subscription_init+0x40>
 80098fc:	4628      	mov	r0, r5
 80098fe:	f7ff fe7b 	bl	80095f8 <rcl_node_is_valid>
 8009902:	2800      	cmp	r0, #0
 8009904:	d054      	beq.n	80099b0 <rcl_subscription_init+0xd4>
 8009906:	f1b8 0f00 	cmp.w	r8, #0
 800990a:	d007      	beq.n	800991c <rcl_subscription_init+0x40>
 800990c:	b137      	cbz	r7, 800991c <rcl_subscription_init+0x40>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	b14b      	cbz	r3, 8009926 <rcl_subscription_init+0x4a>
 8009912:	2764      	movs	r7, #100	; 0x64
 8009914:	4638      	mov	r0, r7
 8009916:	b009      	add	sp, #36	; 0x24
 8009918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800991c:	270b      	movs	r7, #11
 800991e:	4638      	mov	r0, r7
 8009920:	b009      	add	sp, #36	; 0x24
 8009922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009926:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800992a:	aa07      	add	r2, sp, #28
 800992c:	9205      	str	r2, [sp, #20]
 800992e:	9307      	str	r3, [sp, #28]
 8009930:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8009934:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009938:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800993c:	4639      	mov	r1, r7
 800993e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009942:	4628      	mov	r0, r5
 8009944:	f005 ff34 	bl	800f7b0 <rcl_node_resolve_name>
 8009948:	4607      	mov	r7, r0
 800994a:	2800      	cmp	r0, #0
 800994c:	d15f      	bne.n	8009a0e <rcl_subscription_init+0x132>
 800994e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 8009952:	21c8      	movs	r1, #200	; 0xc8
 8009954:	2001      	movs	r0, #1
 8009956:	4798      	blx	r3
 8009958:	6020      	str	r0, [r4, #0]
 800995a:	2800      	cmp	r0, #0
 800995c:	d05d      	beq.n	8009a1a <rcl_subscription_init+0x13e>
 800995e:	4628      	mov	r0, r5
 8009960:	f7ff fe6c 	bl	800963c <rcl_node_get_rmw_handle>
 8009964:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	9a07      	ldr	r2, [sp, #28]
 800996c:	6827      	ldr	r7, [r4, #0]
 800996e:	4641      	mov	r1, r8
 8009970:	4633      	mov	r3, r6
 8009972:	f001 fe71 	bl	800b658 <rmw_create_subscription>
 8009976:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800997a:	6827      	ldr	r7, [r4, #0]
 800997c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8009980:	b348      	cbz	r0, 80099d6 <rcl_subscription_init+0xfa>
 8009982:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8009986:	f001 ff49 	bl	800b81c <rmw_subscription_get_actual_qos>
 800998a:	4607      	mov	r7, r0
 800998c:	b9a8      	cbnz	r0, 80099ba <rcl_subscription_init+0xde>
 800998e:	6820      	ldr	r0, [r4, #0]
 8009990:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8009994:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8009998:	2270      	movs	r2, #112	; 0x70
 800999a:	4631      	mov	r1, r6
 800999c:	f00b fd6d 	bl	801547a <memcpy>
 80099a0:	9807      	ldr	r0, [sp, #28]
 80099a2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80099a4:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80099a6:	4798      	blx	r3
 80099a8:	4638      	mov	r0, r7
 80099aa:	b009      	add	sp, #36	; 0x24
 80099ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099b0:	27c8      	movs	r7, #200	; 0xc8
 80099b2:	4638      	mov	r0, r7
 80099b4:	b009      	add	sp, #36	; 0x24
 80099b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ba:	6827      	ldr	r7, [r4, #0]
 80099bc:	b32f      	cbz	r7, 8009a0a <rcl_subscription_init+0x12e>
 80099be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099c2:	b14b      	cbz	r3, 80099d8 <rcl_subscription_init+0xfc>
 80099c4:	4628      	mov	r0, r5
 80099c6:	f7ff fe39 	bl	800963c <rcl_node_get_rmw_handle>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80099d0:	f001 ff34 	bl	800b83c <rmw_destroy_subscription>
 80099d4:	6827      	ldr	r7, [r4, #0]
 80099d6:	b197      	cbz	r7, 80099fe <rcl_subscription_init+0x122>
 80099d8:	f107 0550 	add.w	r5, r7, #80	; 0x50
 80099dc:	4628      	mov	r0, r5
 80099de:	f001 f897 	bl	800ab10 <rcutils_allocator_is_valid>
 80099e2:	b158      	cbz	r0, 80099fc <rcl_subscription_init+0x120>
 80099e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80099e6:	b148      	cbz	r0, 80099fc <rcl_subscription_init+0x120>
 80099e8:	4629      	mov	r1, r5
 80099ea:	f001 fa95 	bl	800af18 <rmw_subscription_content_filter_options_fini>
 80099ee:	4605      	mov	r5, r0
 80099f0:	b9b8      	cbnz	r0, 8009a22 <rcl_subscription_init+0x146>
 80099f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80099f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80099f8:	4798      	blx	r3
 80099fa:	66fd      	str	r5, [r7, #108]	; 0x6c
 80099fc:	6827      	ldr	r7, [r4, #0]
 80099fe:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009a00:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8009a02:	4638      	mov	r0, r7
 8009a04:	4798      	blx	r3
 8009a06:	2300      	movs	r3, #0
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	2701      	movs	r7, #1
 8009a0c:	e7c8      	b.n	80099a0 <rcl_subscription_init+0xc4>
 8009a0e:	2867      	cmp	r0, #103	; 0x67
 8009a10:	d0c6      	beq.n	80099a0 <rcl_subscription_init+0xc4>
 8009a12:	2869      	cmp	r0, #105	; 0x69
 8009a14:	d003      	beq.n	8009a1e <rcl_subscription_init+0x142>
 8009a16:	280a      	cmp	r0, #10
 8009a18:	d1f7      	bne.n	8009a0a <rcl_subscription_init+0x12e>
 8009a1a:	270a      	movs	r7, #10
 8009a1c:	e7c0      	b.n	80099a0 <rcl_subscription_init+0xc4>
 8009a1e:	2767      	movs	r7, #103	; 0x67
 8009a20:	e7be      	b.n	80099a0 <rcl_subscription_init+0xc4>
 8009a22:	f005 fb6b 	bl	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 8009a26:	6827      	ldr	r7, [r4, #0]
 8009a28:	e7e9      	b.n	80099fe <rcl_subscription_init+0x122>
 8009a2a:	bf00      	nop

08009a2c <rcl_subscription_fini>:
 8009a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d039      	beq.n	8009aa8 <rcl_subscription_fini+0x7c>
 8009a34:	4604      	mov	r4, r0
 8009a36:	4608      	mov	r0, r1
 8009a38:	460d      	mov	r5, r1
 8009a3a:	f7ff fdd5 	bl	80095e8 <rcl_node_is_valid_except_context>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d037      	beq.n	8009ab2 <rcl_subscription_fini+0x86>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	b363      	cbz	r3, 8009aa0 <rcl_subscription_fini+0x74>
 8009a46:	4628      	mov	r0, r5
 8009a48:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8009a4a:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8009a4e:	f7ff fdf5 	bl	800963c <rcl_node_get_rmw_handle>
 8009a52:	b390      	cbz	r0, 8009aba <rcl_subscription_fini+0x8e>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8009a5a:	f001 feef 	bl	800b83c <rmw_destroy_subscription>
 8009a5e:	6826      	ldr	r6, [r4, #0]
 8009a60:	1e05      	subs	r5, r0, #0
 8009a62:	bf18      	it	ne
 8009a64:	2501      	movne	r5, #1
 8009a66:	b37e      	cbz	r6, 8009ac8 <rcl_subscription_fini+0x9c>
 8009a68:	f106 0950 	add.w	r9, r6, #80	; 0x50
 8009a6c:	4648      	mov	r0, r9
 8009a6e:	f001 f84f 	bl	800ab10 <rcutils_allocator_is_valid>
 8009a72:	b358      	cbz	r0, 8009acc <rcl_subscription_fini+0xa0>
 8009a74:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8009a76:	b150      	cbz	r0, 8009a8e <rcl_subscription_fini+0x62>
 8009a78:	4649      	mov	r1, r9
 8009a7a:	f001 fa4d 	bl	800af18 <rmw_subscription_content_filter_options_fini>
 8009a7e:	4681      	mov	r9, r0
 8009a80:	b9e8      	cbnz	r0, 8009abe <rcl_subscription_fini+0x92>
 8009a82:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009a84:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8009a86:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8009a88:	4798      	blx	r3
 8009a8a:	f8c6 906c 	str.w	r9, [r6, #108]	; 0x6c
 8009a8e:	6826      	ldr	r6, [r4, #0]
 8009a90:	4630      	mov	r0, r6
 8009a92:	4641      	mov	r1, r8
 8009a94:	47b8      	blx	r7
 8009a96:	2300      	movs	r3, #0
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa0:	461d      	mov	r5, r3
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa8:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009aac:	4628      	mov	r0, r5
 8009aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab2:	25c8      	movs	r5, #200	; 0xc8
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aba:	250b      	movs	r5, #11
 8009abc:	e7f1      	b.n	8009aa2 <rcl_subscription_fini+0x76>
 8009abe:	f005 fb1d 	bl	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 8009ac2:	6826      	ldr	r6, [r4, #0]
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d0e3      	beq.n	8009a90 <rcl_subscription_fini+0x64>
 8009ac8:	2501      	movs	r5, #1
 8009aca:	e7e1      	b.n	8009a90 <rcl_subscription_fini+0x64>
 8009acc:	6826      	ldr	r6, [r4, #0]
 8009ace:	2501      	movs	r5, #1
 8009ad0:	e7de      	b.n	8009a90 <rcl_subscription_fini+0x64>
 8009ad2:	bf00      	nop

08009ad4 <rcl_subscription_get_default_options>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	4d14      	ldr	r5, [pc, #80]	; (8009b28 <rcl_subscription_get_default_options+0x54>)
 8009ad8:	4914      	ldr	r1, [pc, #80]	; (8009b2c <rcl_subscription_get_default_options+0x58>)
 8009ada:	b08a      	sub	sp, #40	; 0x28
 8009adc:	4604      	mov	r4, r0
 8009ade:	2250      	movs	r2, #80	; 0x50
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f00b fcca 	bl	801547a <memcpy>
 8009ae6:	a804      	add	r0, sp, #16
 8009ae8:	f001 f804 	bl	800aaf4 <rcutils_get_default_allocator>
 8009aec:	f10d 0c10 	add.w	ip, sp, #16
 8009af0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009af4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8009af8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009afc:	466e      	mov	r6, sp
 8009afe:	f8dc 3000 	ldr.w	r3, [ip]
 8009b02:	f8ce 3000 	str.w	r3, [lr]
 8009b06:	4630      	mov	r0, r6
 8009b08:	f001 fa20 	bl	800af4c <rmw_get_default_subscription_options>
 8009b0c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009b10:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8009b14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009b18:	2270      	movs	r2, #112	; 0x70
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f00b fcac 	bl	801547a <memcpy>
 8009b22:	4620      	mov	r0, r4
 8009b24:	b00a      	add	sp, #40	; 0x28
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	20009220 	.word	0x20009220
 8009b2c:	08016460 	.word	0x08016460

08009b30 <rcl_take>:
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d04a      	beq.n	8009bca <rcl_take+0x9a>
 8009b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	4604      	mov	r4, r0
 8009b3a:	6800      	ldr	r0, [r0, #0]
 8009b3c:	b0a4      	sub	sp, #144	; 0x90
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d03b      	beq.n	8009bba <rcl_take+0x8a>
 8009b42:	461f      	mov	r7, r3
 8009b44:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d036      	beq.n	8009bba <rcl_take+0x8a>
 8009b4c:	460e      	mov	r6, r1
 8009b4e:	2900      	cmp	r1, #0
 8009b50:	d039      	beq.n	8009bc6 <rcl_take+0x96>
 8009b52:	4615      	mov	r5, r2
 8009b54:	2a00      	cmp	r2, #0
 8009b56:	d03c      	beq.n	8009bd2 <rcl_take+0xa2>
 8009b58:	a802      	add	r0, sp, #8
 8009b5a:	f001 f9fd 	bl	800af58 <rmw_get_zero_initialized_message_info>
 8009b5e:	f10d 0c08 	add.w	ip, sp, #8
 8009b62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b66:	46ae      	mov	lr, r5
 8009b68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009b6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009b74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009b7c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8009b80:	f04f 0800 	mov.w	r8, #0
 8009b84:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8009b88:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8009b8c:	6822      	ldr	r2, [r4, #0]
 8009b8e:	462b      	mov	r3, r5
 8009b90:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 8009b94:	9700      	str	r7, [sp, #0]
 8009b96:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	f001 feae 	bl	800b8fc <rmw_take_with_info>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	b9c0      	cbnz	r0, 8009bd6 <rcl_take+0xa6>
 8009ba4:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8009ba8:	f240 1291 	movw	r2, #401	; 0x191
 8009bac:	2900      	cmp	r1, #0
 8009bae:	bf08      	it	eq
 8009bb0:	4613      	moveq	r3, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	b024      	add	sp, #144	; 0x90
 8009bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	b024      	add	sp, #144	; 0x90
 8009bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc6:	230b      	movs	r3, #11
 8009bc8:	e7f3      	b.n	8009bb2 <rcl_take+0x82>
 8009bca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009bce:	4618      	mov	r0, r3
 8009bd0:	4770      	bx	lr
 8009bd2:	ad14      	add	r5, sp, #80	; 0x50
 8009bd4:	e7c0      	b.n	8009b58 <rcl_take+0x28>
 8009bd6:	f005 fa91 	bl	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	e7e9      	b.n	8009bb2 <rcl_take+0x82>
 8009bde:	bf00      	nop

08009be0 <rcl_subscription_get_rmw_handle>:
 8009be0:	b118      	cbz	r0, 8009bea <rcl_subscription_get_rmw_handle+0xa>
 8009be2:	6800      	ldr	r0, [r0, #0]
 8009be4:	b108      	cbz	r0, 8009bea <rcl_subscription_get_rmw_handle+0xa>
 8009be6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8009bea:	4770      	bx	lr

08009bec <rcl_subscription_is_valid>:
 8009bec:	b130      	cbz	r0, 8009bfc <rcl_subscription_is_valid+0x10>
 8009bee:	6800      	ldr	r0, [r0, #0]
 8009bf0:	b120      	cbz	r0, 8009bfc <rcl_subscription_is_valid+0x10>
 8009bf2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8009bf6:	3800      	subs	r0, #0
 8009bf8:	bf18      	it	ne
 8009bfa:	2001      	movne	r0, #1
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop

08009c00 <_rclc_check_for_new_data>:
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d046      	beq.n	8009c92 <_rclc_check_for_new_data+0x92>
 8009c04:	b510      	push	{r4, lr}
 8009c06:	7802      	ldrb	r2, [r0, #0]
 8009c08:	b084      	sub	sp, #16
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2a0a      	cmp	r2, #10
 8009c0e:	d842      	bhi.n	8009c96 <_rclc_check_for_new_data+0x96>
 8009c10:	e8df f002 	tbb	[pc, r2]
 8009c14:	14181212 	.word	0x14181212
 8009c18:	06060614 	.word	0x06060614
 8009c1c:	2e1a      	.short	0x2e1a
 8009c1e:	16          	.byte	0x16
 8009c1f:	00          	.byte	0x00
 8009c20:	6a0a      	ldr	r2, [r1, #32]
 8009c22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009c24:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009c28:	2000      	movs	r0, #0
 8009c2a:	1a12      	subs	r2, r2, r0
 8009c2c:	bf18      	it	ne
 8009c2e:	2201      	movne	r2, #1
 8009c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009c34:	b004      	add	sp, #16
 8009c36:	bd10      	pop	{r4, pc}
 8009c38:	680a      	ldr	r2, [r1, #0]
 8009c3a:	e7f2      	b.n	8009c22 <_rclc_check_for_new_data+0x22>
 8009c3c:	698a      	ldr	r2, [r1, #24]
 8009c3e:	e7f0      	b.n	8009c22 <_rclc_check_for_new_data+0x22>
 8009c40:	688a      	ldr	r2, [r1, #8]
 8009c42:	e7ee      	b.n	8009c22 <_rclc_check_for_new_data+0x22>
 8009c44:	690a      	ldr	r2, [r1, #16]
 8009c46:	e7ec      	b.n	8009c22 <_rclc_check_for_new_data+0x22>
 8009c48:	685c      	ldr	r4, [r3, #4]
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8009c50:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8009c54:	f104 0342 	add.w	r3, r4, #66	; 0x42
 8009c58:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8009c62:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8009c66:	f104 0110 	add.w	r1, r4, #16
 8009c6a:	f007 f929 	bl	8010ec0 <rcl_action_client_wait_set_get_entities_ready>
 8009c6e:	e7e1      	b.n	8009c34 <_rclc_check_for_new_data+0x34>
 8009c70:	685c      	ldr	r4, [r3, #4]
 8009c72:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8009c76:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8009c7a:	e9cd 3200 	strd	r3, r2, [sp]
 8009c7e:	4608      	mov	r0, r1
 8009c80:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8009c84:	f104 0220 	add.w	r2, r4, #32
 8009c88:	f104 0110 	add.w	r1, r4, #16
 8009c8c:	f007 fb2e 	bl	80112ec <rcl_action_server_wait_set_get_entities_ready>
 8009c90:	e7d0      	b.n	8009c34 <_rclc_check_for_new_data+0x34>
 8009c92:	200b      	movs	r0, #11
 8009c94:	4770      	bx	lr
 8009c96:	2001      	movs	r0, #1
 8009c98:	e7cc      	b.n	8009c34 <_rclc_check_for_new_data+0x34>
 8009c9a:	bf00      	nop

08009c9c <_rclc_take_new_data>:
 8009c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c9e:	b09b      	sub	sp, #108	; 0x6c
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	f000 8088 	beq.w	8009db6 <_rclc_take_new_data+0x11a>
 8009ca6:	7803      	ldrb	r3, [r0, #0]
 8009ca8:	4604      	mov	r4, r0
 8009caa:	2b0a      	cmp	r3, #10
 8009cac:	f200 8167 	bhi.w	8009f7e <_rclc_take_new_data+0x2e2>
 8009cb0:	e8df f003 	tbb	[pc, r3]
 8009cb4:	44152d2d 	.word	0x44152d2d
 8009cb8:	19191944 	.word	0x19191944
 8009cbc:	065a      	.short	0x065a
 8009cbe:	15          	.byte	0x15
 8009cbf:	00          	.byte	0x00
 8009cc0:	6840      	ldr	r0, [r0, #4]
 8009cc2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f040 80b2 	bne.w	8009e30 <_rclc_take_new_data+0x194>
 8009ccc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f040 80e4 	bne.w	8009e9e <_rclc_take_new_data+0x202>
 8009cd6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d16f      	bne.n	8009dbe <_rclc_take_new_data+0x122>
 8009cde:	2500      	movs	r5, #0
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	b01b      	add	sp, #108	; 0x6c
 8009ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009ce8:	6a0b      	ldr	r3, [r1, #32]
 8009cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0f5      	beq.n	8009cde <_rclc_take_new_data+0x42>
 8009cf2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009cf6:	f104 0110 	add.w	r1, r4, #16
 8009cfa:	f005 ff03 	bl	800fb04 <rcl_take_request>
 8009cfe:	4605      	mov	r5, r0
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d0ec      	beq.n	8009cde <_rclc_take_new_data+0x42>
 8009d04:	f240 2359 	movw	r3, #601	; 0x259
 8009d08:	4298      	cmp	r0, r3
 8009d0a:	d013      	beq.n	8009d34 <_rclc_take_new_data+0x98>
 8009d0c:	e029      	b.n	8009d62 <_rclc_take_new_data+0xc6>
 8009d0e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009d10:	680b      	ldr	r3, [r1, #0]
 8009d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0e1      	beq.n	8009cde <_rclc_take_new_data+0x42>
 8009d1a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	aa0a      	add	r2, sp, #40	; 0x28
 8009d22:	f7ff ff05 	bl	8009b30 <rcl_take>
 8009d26:	4605      	mov	r5, r0
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d0d9      	beq.n	8009ce0 <_rclc_take_new_data+0x44>
 8009d2c:	f240 1391 	movw	r3, #401	; 0x191
 8009d30:	4298      	cmp	r0, r3
 8009d32:	d116      	bne.n	8009d62 <_rclc_take_new_data+0xc6>
 8009d34:	2300      	movs	r3, #0
 8009d36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8009d3a:	e7d1      	b.n	8009ce0 <_rclc_take_new_data+0x44>
 8009d3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009d3e:	698b      	ldr	r3, [r1, #24]
 8009d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0ca      	beq.n	8009cde <_rclc_take_new_data+0x42>
 8009d48:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009d4c:	f104 0110 	add.w	r1, r4, #16
 8009d50:	f005 f982 	bl	800f058 <rcl_take_response>
 8009d54:	4605      	mov	r5, r0
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d0c1      	beq.n	8009cde <_rclc_take_new_data+0x42>
 8009d5a:	f240 13f5 	movw	r3, #501	; 0x1f5
 8009d5e:	4298      	cmp	r0, r3
 8009d60:	d0be      	beq.n	8009ce0 <_rclc_take_new_data+0x44>
 8009d62:	f000 ff11 	bl	800ab88 <rcutils_reset_error>
 8009d66:	e7bb      	b.n	8009ce0 <_rclc_take_new_data+0x44>
 8009d68:	6840      	ldr	r0, [r0, #4]
 8009d6a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d17d      	bne.n	8009e6e <_rclc_take_new_data+0x1d2>
 8009d72:	69c3      	ldr	r3, [r0, #28]
 8009d74:	b11b      	cbz	r3, 8009d7e <_rclc_take_new_data+0xe2>
 8009d76:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d144      	bne.n	8009e08 <_rclc_take_new_data+0x16c>
 8009d7e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f040 80ac 	bne.w	8009ee0 <_rclc_take_new_data+0x244>
 8009d88:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0a6      	beq.n	8009cde <_rclc_take_new_data+0x42>
 8009d90:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009d92:	a90a      	add	r1, sp, #40	; 0x28
 8009d94:	3010      	adds	r0, #16
 8009d96:	f006 ff6b 	bl	8010c70 <rcl_action_take_result_response>
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d1e0      	bne.n	8009d62 <_rclc_take_new_data+0xc6>
 8009da0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009da4:	6860      	ldr	r0, [r4, #4]
 8009da6:	f007 fbc5 	bl	8011534 <rclc_action_find_handle_by_result_request_sequence_number>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d098      	beq.n	8009ce0 <_rclc_take_new_data+0x44>
 8009dae:	2301      	movs	r3, #1
 8009db0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8009db4:	e794      	b.n	8009ce0 <_rclc_take_new_data+0x44>
 8009db6:	250b      	movs	r5, #11
 8009db8:	4628      	mov	r0, r5
 8009dba:	b01b      	add	sp, #108	; 0x6c
 8009dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dbe:	ae04      	add	r6, sp, #16
 8009dc0:	aa0a      	add	r2, sp, #40	; 0x28
 8009dc2:	3010      	adds	r0, #16
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	f007 f9c5 	bl	8011154 <rcl_action_take_cancel_request>
 8009dca:	4605      	mov	r5, r0
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d1c8      	bne.n	8009d62 <_rclc_take_new_data+0xc6>
 8009dd0:	6860      	ldr	r0, [r4, #4]
 8009dd2:	a90a      	add	r1, sp, #40	; 0x28
 8009dd4:	f007 fb6c 	bl	80114b0 <rclc_action_find_goal_handle_by_uuid>
 8009dd8:	4607      	mov	r7, r0
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	f000 80bb 	beq.w	8009f56 <_rclc_take_new_data+0x2ba>
 8009de0:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009de4:	2101      	movs	r1, #1
 8009de6:	f007 faed 	bl	80113c4 <rcl_action_transition_goal_state>
 8009dea:	2803      	cmp	r0, #3
 8009dec:	4684      	mov	ip, r0
 8009dee:	f040 80a7 	bne.w	8009f40 <_rclc_take_new_data+0x2a4>
 8009df2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009df4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dfa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009dfe:	e884 0003 	stmia.w	r4, {r0, r1}
 8009e02:	f887 c008 	strb.w	ip, [r7, #8]
 8009e06:	e76b      	b.n	8009ce0 <_rclc_take_new_data+0x44>
 8009e08:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009e0a:	3010      	adds	r0, #16
 8009e0c:	f006 ffb0 	bl	8010d70 <rcl_action_take_feedback>
 8009e10:	4605      	mov	r5, r0
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d1a5      	bne.n	8009d62 <_rclc_take_new_data+0xc6>
 8009e16:	6860      	ldr	r0, [r4, #4]
 8009e18:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009e1a:	f007 fb49 	bl	80114b0 <rclc_action_find_goal_handle_by_uuid>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2800      	cmp	r0, #0
 8009e22:	f000 80a3 	beq.w	8009f6c <_rclc_take_new_data+0x2d0>
 8009e26:	2201      	movs	r2, #1
 8009e28:	6860      	ldr	r0, [r4, #4]
 8009e2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8009e2e:	e7a6      	b.n	8009d7e <_rclc_take_new_data+0xe2>
 8009e30:	f007 fb18 	bl	8011464 <rclc_action_take_goal_handle>
 8009e34:	4606      	mov	r6, r0
 8009e36:	6860      	ldr	r0, [r4, #4]
 8009e38:	2e00      	cmp	r6, #0
 8009e3a:	f43f af47 	beq.w	8009ccc <_rclc_take_new_data+0x30>
 8009e3e:	6070      	str	r0, [r6, #4]
 8009e40:	69f2      	ldr	r2, [r6, #28]
 8009e42:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8009e46:	3010      	adds	r0, #16
 8009e48:	f007 f8ce 	bl	8010fe8 <rcl_action_take_goal_request>
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	f040 808e 	bne.w	8009f70 <_rclc_take_new_data+0x2d4>
 8009e54:	69f7      	ldr	r7, [r6, #28]
 8009e56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009e58:	7235      	strb	r5, [r6, #8]
 8009e5a:	f8c6 0009 	str.w	r0, [r6, #9]
 8009e5e:	f8c6 100d 	str.w	r1, [r6, #13]
 8009e62:	6860      	ldr	r0, [r4, #4]
 8009e64:	f8c6 2011 	str.w	r2, [r6, #17]
 8009e68:	f8c6 3015 	str.w	r3, [r6, #21]
 8009e6c:	e72e      	b.n	8009ccc <_rclc_take_new_data+0x30>
 8009e6e:	aa04      	add	r2, sp, #16
 8009e70:	a90a      	add	r1, sp, #40	; 0x28
 8009e72:	3010      	adds	r0, #16
 8009e74:	f006 fe84 	bl	8010b80 <rcl_action_take_goal_response>
 8009e78:	4605      	mov	r5, r0
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	f47f af71 	bne.w	8009d62 <_rclc_take_new_data+0xc6>
 8009e80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e84:	6860      	ldr	r0, [r4, #4]
 8009e86:	f007 fb43 	bl	8011510 <rclc_action_find_handle_by_goal_request_sequence_number>
 8009e8a:	b130      	cbz	r0, 8009e9a <_rclc_take_new_data+0x1fe>
 8009e8c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009e90:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8009e94:	2201      	movs	r2, #1
 8009e96:	f880 2020 	strb.w	r2, [r0, #32]
 8009e9a:	6860      	ldr	r0, [r4, #4]
 8009e9c:	e769      	b.n	8009d72 <_rclc_take_new_data+0xd6>
 8009e9e:	aa04      	add	r2, sp, #16
 8009ea0:	3010      	adds	r0, #16
 8009ea2:	a90a      	add	r1, sp, #40	; 0x28
 8009ea4:	f007 f916 	bl	80110d4 <rcl_action_take_result_request>
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	f47f af59 	bne.w	8009d62 <_rclc_take_new_data+0xc6>
 8009eb0:	6860      	ldr	r0, [r4, #4]
 8009eb2:	a904      	add	r1, sp, #16
 8009eb4:	f007 fafc 	bl	80114b0 <rclc_action_find_goal_handle_by_uuid>
 8009eb8:	4607      	mov	r7, r0
 8009eba:	b160      	cbz	r0, 8009ed6 <_rclc_take_new_data+0x23a>
 8009ebc:	ad0a      	add	r5, sp, #40	; 0x28
 8009ebe:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8009ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ec4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009ec6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009eca:	f04f 0c02 	mov.w	ip, #2
 8009ece:	e886 0003 	stmia.w	r6, {r0, r1}
 8009ed2:	f887 c008 	strb.w	ip, [r7, #8]
 8009ed6:	6860      	ldr	r0, [r4, #4]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8009ede:	e6fa      	b.n	8009cd6 <_rclc_take_new_data+0x3a>
 8009ee0:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8009ee4:	a90a      	add	r1, sp, #40	; 0x28
 8009ee6:	3010      	adds	r0, #16
 8009ee8:	f006 ff02 	bl	8010cf0 <rcl_action_take_cancel_response>
 8009eec:	4605      	mov	r5, r0
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f47f af37 	bne.w	8009d62 <_rclc_take_new_data+0xc6>
 8009ef4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ef8:	6860      	ldr	r0, [r4, #4]
 8009efa:	f007 fb2d 	bl	8011558 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009efe:	4606      	mov	r6, r0
 8009f00:	6860      	ldr	r0, [r4, #4]
 8009f02:	2e00      	cmp	r6, #0
 8009f04:	f43f af40 	beq.w	8009d88 <_rclc_take_new_data+0xec>
 8009f08:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009f0a:	2701      	movs	r7, #1
 8009f0c:	84b7      	strh	r7, [r6, #36]	; 0x24
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f43f af3a 	beq.w	8009d88 <_rclc_take_new_data+0xec>
 8009f14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009f16:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009f1a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009f1e:	f007 fac7 	bl	80114b0 <rclc_action_find_goal_handle_by_uuid>
 8009f22:	b138      	cbz	r0, 8009f34 <_rclc_take_new_data+0x298>
 8009f24:	6860      	ldr	r0, [r4, #4]
 8009f26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009f28:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8009f2c:	3501      	adds	r5, #1
 8009f2e:	42ab      	cmp	r3, r5
 8009f30:	d8f0      	bhi.n	8009f14 <_rclc_take_new_data+0x278>
 8009f32:	e729      	b.n	8009d88 <_rclc_take_new_data+0xec>
 8009f34:	6860      	ldr	r0, [r4, #4]
 8009f36:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009f38:	3501      	adds	r5, #1
 8009f3a:	42ab      	cmp	r3, r5
 8009f3c:	d8ea      	bhi.n	8009f14 <_rclc_take_new_data+0x278>
 8009f3e:	e723      	b.n	8009d88 <_rclc_take_new_data+0xec>
 8009f40:	ab06      	add	r3, sp, #24
 8009f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f44:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f48:	2103      	movs	r1, #3
 8009f4a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009f4e:	6860      	ldr	r0, [r4, #4]
 8009f50:	f007 fb76 	bl	8011640 <rclc_action_server_goal_cancel_reject>
 8009f54:	e6c4      	b.n	8009ce0 <_rclc_take_new_data+0x44>
 8009f56:	ab06      	add	r3, sp, #24
 8009f58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f5a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f5e:	2102      	movs	r1, #2
 8009f60:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009f64:	6860      	ldr	r0, [r4, #4]
 8009f66:	f007 fb6b 	bl	8011640 <rclc_action_server_goal_cancel_reject>
 8009f6a:	e6b9      	b.n	8009ce0 <_rclc_take_new_data+0x44>
 8009f6c:	6860      	ldr	r0, [r4, #4]
 8009f6e:	e706      	b.n	8009d7e <_rclc_take_new_data+0xe2>
 8009f70:	6860      	ldr	r0, [r4, #4]
 8009f72:	4631      	mov	r1, r6
 8009f74:	f007 fa86 	bl	8011484 <rclc_action_remove_used_goal_handle>
 8009f78:	f000 fe06 	bl	800ab88 <rcutils_reset_error>
 8009f7c:	e6b0      	b.n	8009ce0 <_rclc_take_new_data+0x44>
 8009f7e:	2501      	movs	r5, #1
 8009f80:	e6ae      	b.n	8009ce0 <_rclc_take_new_data+0x44>
 8009f82:	bf00      	nop

08009f84 <_rclc_execute.part.0>:
 8009f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f86:	7803      	ldrb	r3, [r0, #0]
 8009f88:	b087      	sub	sp, #28
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	2b0a      	cmp	r3, #10
 8009f8e:	f200 8136 	bhi.w	800a1fe <_rclc_execute.part.0+0x27a>
 8009f92:	e8df f003 	tbb	[pc, r3]
 8009f96:	435e      	.short	0x435e
 8009f98:	06a1664f 	.word	0x06a1664f
 8009f9c:	6c1e0606 	.word	0x6c1e0606
 8009fa0:	59          	.byte	0x59
 8009fa1:	00          	.byte	0x00
 8009fa2:	2b06      	cmp	r3, #6
 8009fa4:	f000 8122 	beq.w	800a1ec <_rclc_execute.part.0+0x268>
 8009fa8:	2b07      	cmp	r3, #7
 8009faa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009fac:	f040 8118 	bne.w	800a1e0 <_rclc_execute.part.0+0x25c>
 8009fb0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8009fb4:	6880      	ldr	r0, [r0, #8]
 8009fb6:	4798      	blx	r3
 8009fb8:	f104 0110 	add.w	r1, r4, #16
 8009fbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009fbe:	6860      	ldr	r0, [r4, #4]
 8009fc0:	f005 fde0 	bl	800fb84 <rcl_send_response>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d033      	beq.n	800a030 <_rclc_execute.part.0+0xac>
 8009fc8:	9005      	str	r0, [sp, #20]
 8009fca:	f000 fddd 	bl	800ab88 <rcutils_reset_error>
 8009fce:	9805      	ldr	r0, [sp, #20]
 8009fd0:	e02e      	b.n	800a030 <_rclc_execute.part.0+0xac>
 8009fd2:	6840      	ldr	r0, [r0, #4]
 8009fd4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8086 	beq.w	800a0ea <_rclc_execute.part.0+0x166>
 8009fde:	2600      	movs	r6, #0
 8009fe0:	2701      	movs	r7, #1
 8009fe2:	e004      	b.n	8009fee <_rclc_execute.part.0+0x6a>
 8009fe4:	f007 fa18 	bl	8011418 <rclc_action_send_result_request>
 8009fe8:	b998      	cbnz	r0, 800a012 <_rclc_execute.part.0+0x8e>
 8009fea:	722f      	strb	r7, [r5, #8]
 8009fec:	6860      	ldr	r0, [r4, #4]
 8009fee:	f007 fac5 	bl	801157c <rclc_action_find_first_handle_with_goal_response>
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d077      	beq.n	800a0e8 <_rclc_execute.part.0+0x164>
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800a002:	f885 6020 	strb.w	r6, [r5, #32]
 800a006:	4798      	blx	r3
 800a008:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800a00c:	4628      	mov	r0, r5
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e8      	bne.n	8009fe4 <_rclc_execute.part.0+0x60>
 800a012:	6860      	ldr	r0, [r4, #4]
 800a014:	4629      	mov	r1, r5
 800a016:	f007 fa35 	bl	8011484 <rclc_action_remove_used_goal_handle>
 800a01a:	e7e7      	b.n	8009fec <_rclc_execute.part.0+0x68>
 800a01c:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a020:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800a024:	2d00      	cmp	r5, #0
 800a026:	f000 80c9 	beq.w	800a1bc <_rclc_execute.part.0+0x238>
 800a02a:	6880      	ldr	r0, [r0, #8]
 800a02c:	4798      	blx	r3
 800a02e:	2000      	movs	r0, #0
 800a030:	b007      	add	sp, #28
 800a032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a034:	6840      	ldr	r0, [r0, #4]
 800a036:	f005 fe63 	bl	800fd00 <rcl_timer_call>
 800a03a:	f240 3321 	movw	r3, #801	; 0x321
 800a03e:	4298      	cmp	r0, r3
 800a040:	d004      	beq.n	800a04c <_rclc_execute.part.0+0xc8>
 800a042:	2800      	cmp	r0, #0
 800a044:	d0f4      	beq.n	800a030 <_rclc_execute.part.0+0xac>
 800a046:	e7bf      	b.n	8009fc8 <_rclc_execute.part.0+0x44>
 800a048:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a04a:	4798      	blx	r3
 800a04c:	2000      	movs	r0, #0
 800a04e:	b007      	add	sp, #28
 800a050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a052:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a056:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a058:	b925      	cbnz	r5, 800a064 <_rclc_execute.part.0+0xe0>
 800a05a:	4628      	mov	r0, r5
 800a05c:	4798      	blx	r3
 800a05e:	4628      	mov	r0, r5
 800a060:	e7e6      	b.n	800a030 <_rclc_execute.part.0+0xac>
 800a062:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a064:	68a0      	ldr	r0, [r4, #8]
 800a066:	4798      	blx	r3
 800a068:	2000      	movs	r0, #0
 800a06a:	b007      	add	sp, #28
 800a06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a06e:	6840      	ldr	r0, [r0, #4]
 800a070:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a074:	bb3b      	cbnz	r3, 800a0c6 <_rclc_execute.part.0+0x142>
 800a076:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d07b      	beq.n	800a176 <_rclc_execute.part.0+0x1f2>
 800a07e:	f640 0634 	movw	r6, #2100	; 0x834
 800a082:	2701      	movs	r7, #1
 800a084:	e007      	b.n	800a096 <_rclc_execute.part.0+0x112>
 800a086:	4628      	mov	r0, r5
 800a088:	f007 fa90 	bl	80115ac <rclc_action_server_response_goal_request>
 800a08c:	6860      	ldr	r0, [r4, #4]
 800a08e:	4629      	mov	r1, r5
 800a090:	f007 f9f8 	bl	8011484 <rclc_action_remove_used_goal_handle>
 800a094:	6860      	ldr	r0, [r4, #4]
 800a096:	2100      	movs	r1, #0
 800a098:	f007 fa22 	bl	80114e0 <rclc_action_find_first_handle_by_status>
 800a09c:	4605      	mov	r5, r0
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d066      	beq.n	800a170 <_rclc_execute.part.0+0x1ec>
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	4798      	blx	r3
 800a0aa:	42b0      	cmp	r0, r6
 800a0ac:	f04f 0100 	mov.w	r1, #0
 800a0b0:	d1e9      	bne.n	800a086 <_rclc_execute.part.0+0x102>
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f007 fa79 	bl	80115ac <rclc_action_server_response_goal_request>
 800a0ba:	722f      	strb	r7, [r5, #8]
 800a0bc:	e7ea      	b.n	800a094 <_rclc_execute.part.0+0x110>
 800a0be:	6848      	ldr	r0, [r1, #4]
 800a0c0:	f007 f9e0 	bl	8011484 <rclc_action_remove_used_goal_handle>
 800a0c4:	6860      	ldr	r0, [r4, #4]
 800a0c6:	f007 fa17 	bl	80114f8 <rclc_action_find_first_terminated_handle>
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d1f6      	bne.n	800a0be <_rclc_execute.part.0+0x13a>
 800a0d0:	6860      	ldr	r0, [r4, #4]
 800a0d2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800a0d6:	e7ce      	b.n	800a076 <_rclc_execute.part.0+0xf2>
 800a0d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a0da:	6880      	ldr	r0, [r0, #8]
 800a0dc:	f104 0110 	add.w	r1, r4, #16
 800a0e0:	4798      	blx	r3
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	b007      	add	sp, #28
 800a0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e8:	6860      	ldr	r0, [r4, #4]
 800a0ea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a0ee:	b18b      	cbz	r3, 800a114 <_rclc_execute.part.0+0x190>
 800a0f0:	68c5      	ldr	r5, [r0, #12]
 800a0f2:	b32d      	cbz	r5, 800a140 <_rclc_execute.part.0+0x1bc>
 800a0f4:	2600      	movs	r6, #0
 800a0f6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a0fa:	b143      	cbz	r3, 800a10e <_rclc_execute.part.0+0x18a>
 800a0fc:	69c3      	ldr	r3, [r0, #28]
 800a0fe:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800a102:	b123      	cbz	r3, 800a10e <_rclc_execute.part.0+0x18a>
 800a104:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a106:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a108:	4628      	mov	r0, r5
 800a10a:	4798      	blx	r3
 800a10c:	6860      	ldr	r0, [r4, #4]
 800a10e:	682d      	ldr	r5, [r5, #0]
 800a110:	2d00      	cmp	r5, #0
 800a112:	d1f0      	bne.n	800a0f6 <_rclc_execute.part.0+0x172>
 800a114:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a118:	b193      	cbz	r3, 800a140 <_rclc_execute.part.0+0x1bc>
 800a11a:	68c5      	ldr	r5, [r0, #12]
 800a11c:	b185      	cbz	r5, 800a140 <_rclc_execute.part.0+0x1bc>
 800a11e:	2600      	movs	r6, #0
 800a120:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800a124:	b14b      	cbz	r3, 800a13a <_rclc_execute.part.0+0x1b6>
 800a126:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a128:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800a12c:	b12b      	cbz	r3, 800a13a <_rclc_execute.part.0+0x1b6>
 800a12e:	4628      	mov	r0, r5
 800a130:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800a134:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a136:	4798      	blx	r3
 800a138:	6860      	ldr	r0, [r4, #4]
 800a13a:	682d      	ldr	r5, [r5, #0]
 800a13c:	2d00      	cmp	r5, #0
 800a13e:	d1ef      	bne.n	800a120 <_rclc_execute.part.0+0x19c>
 800a140:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a144:	2b00      	cmp	r3, #0
 800a146:	d081      	beq.n	800a04c <_rclc_execute.part.0+0xc8>
 800a148:	2700      	movs	r7, #0
 800a14a:	e00b      	b.n	800a164 <_rclc_execute.part.0+0x1e0>
 800a14c:	6863      	ldr	r3, [r4, #4]
 800a14e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a152:	6a1e      	ldr	r6, [r3, #32]
 800a154:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800a158:	47b0      	blx	r6
 800a15a:	6860      	ldr	r0, [r4, #4]
 800a15c:	4629      	mov	r1, r5
 800a15e:	f007 f991 	bl	8011484 <rclc_action_remove_used_goal_handle>
 800a162:	6860      	ldr	r0, [r4, #4]
 800a164:	f007 fa16 	bl	8011594 <rclc_action_find_first_handle_with_result_response>
 800a168:	4605      	mov	r5, r0
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d1ee      	bne.n	800a14c <_rclc_execute.part.0+0x1c8>
 800a16e:	e76d      	b.n	800a04c <_rclc_execute.part.0+0xc8>
 800a170:	6860      	ldr	r0, [r4, #4]
 800a172:	f880 5020 	strb.w	r5, [r0, #32]
 800a176:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f43f af66 	beq.w	800a04c <_rclc_execute.part.0+0xc8>
 800a180:	68c5      	ldr	r5, [r0, #12]
 800a182:	b1b5      	cbz	r5, 800a1b2 <_rclc_execute.part.0+0x22e>
 800a184:	2602      	movs	r6, #2
 800a186:	e001      	b.n	800a18c <_rclc_execute.part.0+0x208>
 800a188:	682d      	ldr	r5, [r5, #0]
 800a18a:	b195      	cbz	r5, 800a1b2 <_rclc_execute.part.0+0x22e>
 800a18c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a190:	2b03      	cmp	r3, #3
 800a192:	d1f9      	bne.n	800a188 <_rclc_execute.part.0+0x204>
 800a194:	69c3      	ldr	r3, [r0, #28]
 800a196:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a198:	4628      	mov	r0, r5
 800a19a:	4798      	blx	r3
 800a19c:	4603      	mov	r3, r0
 800a19e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a1a8:	b163      	cbz	r3, 800a1c4 <_rclc_execute.part.0+0x240>
 800a1aa:	f007 fa1d 	bl	80115e8 <rclc_action_server_goal_cancel_accept>
 800a1ae:	6860      	ldr	r0, [r4, #4]
 800a1b0:	e7ea      	b.n	800a188 <_rclc_execute.part.0+0x204>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	e739      	b.n	800a030 <_rclc_execute.part.0+0xac>
 800a1bc:	4628      	mov	r0, r5
 800a1be:	4798      	blx	r3
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	e735      	b.n	800a030 <_rclc_execute.part.0+0xac>
 800a1c4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a1c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a1ca:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800a1ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d2:	6860      	ldr	r0, [r4, #4]
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	f007 fa33 	bl	8011640 <rclc_action_server_goal_cancel_reject>
 800a1da:	722e      	strb	r6, [r5, #8]
 800a1dc:	6860      	ldr	r0, [r4, #4]
 800a1de:	e7d3      	b.n	800a188 <_rclc_execute.part.0+0x204>
 800a1e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a1e2:	6880      	ldr	r0, [r0, #8]
 800a1e4:	4798      	blx	r3
 800a1e6:	f104 0110 	add.w	r1, r4, #16
 800a1ea:	e6e7      	b.n	8009fbc <_rclc_execute.part.0+0x38>
 800a1ec:	f100 0110 	add.w	r1, r0, #16
 800a1f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a1f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a1f4:	6880      	ldr	r0, [r0, #8]
 800a1f6:	9105      	str	r1, [sp, #20]
 800a1f8:	4798      	blx	r3
 800a1fa:	9905      	ldr	r1, [sp, #20]
 800a1fc:	e6de      	b.n	8009fbc <_rclc_execute.part.0+0x38>
 800a1fe:	2001      	movs	r0, #1
 800a200:	e716      	b.n	800a030 <_rclc_execute.part.0+0xac>
 800a202:	bf00      	nop

0800a204 <rclc_executor_trigger_any>:
 800a204:	2800      	cmp	r0, #0
 800a206:	d03f      	beq.n	800a288 <rclc_executor_trigger_any+0x84>
 800a208:	2900      	cmp	r1, #0
 800a20a:	d03e      	beq.n	800a28a <rclc_executor_trigger_any+0x86>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800a212:	2200      	movs	r2, #0
 800a214:	2800      	cmp	r0, #0
 800a216:	d037      	beq.n	800a288 <rclc_executor_trigger_any+0x84>
 800a218:	b430      	push	{r4, r5}
 800a21a:	f893 c000 	ldrb.w	ip, [r3]
 800a21e:	f1bc 0f08 	cmp.w	ip, #8
 800a222:	d11e      	bne.n	800a262 <rclc_executor_trigger_any+0x5e>
 800a224:	685c      	ldr	r4, [r3, #4]
 800a226:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800a228:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800a22c:	d105      	bne.n	800a23a <rclc_executor_trigger_any+0x36>
 800a22e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800a232:	b910      	cbnz	r0, 800a23a <rclc_executor_trigger_any+0x36>
 800a234:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800a238:	b128      	cbz	r0, 800a246 <rclc_executor_trigger_any+0x42>
 800a23a:	bc30      	pop	{r4, r5}
 800a23c:	4770      	bx	lr
 800a23e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a242:	2800      	cmp	r0, #0
 800a244:	d1f9      	bne.n	800a23a <rclc_executor_trigger_any+0x36>
 800a246:	3201      	adds	r2, #1
 800a248:	4291      	cmp	r1, r2
 800a24a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a24e:	d018      	beq.n	800a282 <rclc_executor_trigger_any+0x7e>
 800a250:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a254:	2800      	cmp	r0, #0
 800a256:	d0f0      	beq.n	800a23a <rclc_executor_trigger_any+0x36>
 800a258:	f893 c000 	ldrb.w	ip, [r3]
 800a25c:	f1bc 0f08 	cmp.w	ip, #8
 800a260:	d0e0      	beq.n	800a224 <rclc_executor_trigger_any+0x20>
 800a262:	f1bc 0f09 	cmp.w	ip, #9
 800a266:	d1ea      	bne.n	800a23e <rclc_executor_trigger_any+0x3a>
 800a268:	685c      	ldr	r4, [r3, #4]
 800a26a:	6a25      	ldr	r5, [r4, #32]
 800a26c:	2d00      	cmp	r5, #0
 800a26e:	d1e4      	bne.n	800a23a <rclc_executor_trigger_any+0x36>
 800a270:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800a274:	2800      	cmp	r0, #0
 800a276:	d1e0      	bne.n	800a23a <rclc_executor_trigger_any+0x36>
 800a278:	3201      	adds	r2, #1
 800a27a:	4291      	cmp	r1, r2
 800a27c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a280:	d1e6      	bne.n	800a250 <rclc_executor_trigger_any+0x4c>
 800a282:	2000      	movs	r0, #0
 800a284:	bc30      	pop	{r4, r5}
 800a286:	4770      	bx	lr
 800a288:	4770      	bx	lr
 800a28a:	4608      	mov	r0, r1
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop

0800a290 <rclc_executor_get_zero_initialized_executor>:
 800a290:	b510      	push	{r4, lr}
 800a292:	4903      	ldr	r1, [pc, #12]	; (800a2a0 <rclc_executor_get_zero_initialized_executor+0x10>)
 800a294:	4604      	mov	r4, r0
 800a296:	2288      	movs	r2, #136	; 0x88
 800a298:	f00b f8ef 	bl	801547a <memcpy>
 800a29c:	4620      	mov	r0, r4
 800a29e:	bd10      	pop	{r4, pc}
 800a2a0:	080164b0 	.word	0x080164b0
 800a2a4:	00000000 	.word	0x00000000

0800a2a8 <rclc_executor_init>:
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d05f      	beq.n	800a36c <rclc_executor_init+0xc4>
 800a2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	b0b0      	sub	sp, #192	; 0xc0
 800a2b4:	2900      	cmp	r1, #0
 800a2b6:	d051      	beq.n	800a35c <rclc_executor_init+0xb4>
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	4616      	mov	r6, r2
 800a2be:	461f      	mov	r7, r3
 800a2c0:	f000 fc26 	bl	800ab10 <rcutils_allocator_is_valid>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d049      	beq.n	800a35c <rclc_executor_init+0xb4>
 800a2c8:	2e00      	cmp	r6, #0
 800a2ca:	d047      	beq.n	800a35c <rclc_executor_init+0xb4>
 800a2cc:	492c      	ldr	r1, [pc, #176]	; (800a380 <rclc_executor_init+0xd8>)
 800a2ce:	2288      	movs	r2, #136	; 0x88
 800a2d0:	a80e      	add	r0, sp, #56	; 0x38
 800a2d2:	f00b f8d2 	bl	801547a <memcpy>
 800a2d6:	a90e      	add	r1, sp, #56	; 0x38
 800a2d8:	2288      	movs	r2, #136	; 0x88
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f00b f8cd 	bl	801547a <memcpy>
 800a2e0:	602c      	str	r4, [r5, #0]
 800a2e2:	4668      	mov	r0, sp
 800a2e4:	60ae      	str	r6, [r5, #8]
 800a2e6:	466c      	mov	r4, sp
 800a2e8:	f005 fe7c 	bl	800ffe4 <rcl_get_zero_initialized_wait_set>
 800a2ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2ee:	f105 0c14 	add.w	ip, r5, #20
 800a2f2:	f8d7 8000 	ldr.w	r8, [r7]
 800a2f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a302:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a306:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 800a378 <rclc_executor_init+0xd0>
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	f8cc 3000 	str.w	r3, [ip]
 800a310:	6939      	ldr	r1, [r7, #16]
 800a312:	612f      	str	r7, [r5, #16]
 800a314:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800a318:	01b0      	lsls	r0, r6, #6
 800a31a:	47c0      	blx	r8
 800a31c:	6068      	str	r0, [r5, #4]
 800a31e:	b338      	cbz	r0, 800a370 <rclc_executor_init+0xc8>
 800a320:	2400      	movs	r4, #0
 800a322:	e000      	b.n	800a326 <rclc_executor_init+0x7e>
 800a324:	6868      	ldr	r0, [r5, #4]
 800a326:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a32a:	4631      	mov	r1, r6
 800a32c:	3401      	adds	r4, #1
 800a32e:	f000 fa73 	bl	800a818 <rclc_executor_handle_init>
 800a332:	42a6      	cmp	r6, r4
 800a334:	d1f6      	bne.n	800a324 <rclc_executor_init+0x7c>
 800a336:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800a33a:	f000 fa63 	bl	800a804 <rclc_executor_handle_counters_zero_init>
 800a33e:	4a11      	ldr	r2, [pc, #68]	; (800a384 <rclc_executor_init+0xdc>)
 800a340:	686b      	ldr	r3, [r5, #4]
 800a342:	2000      	movs	r0, #0
 800a344:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 800a348:	b163      	cbz	r3, 800a364 <rclc_executor_init+0xbc>
 800a34a:	692b      	ldr	r3, [r5, #16]
 800a34c:	b153      	cbz	r3, 800a364 <rclc_executor_init+0xbc>
 800a34e:	68ab      	ldr	r3, [r5, #8]
 800a350:	b143      	cbz	r3, 800a364 <rclc_executor_init+0xbc>
 800a352:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 800a356:	b030      	add	sp, #192	; 0xc0
 800a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35c:	200b      	movs	r0, #11
 800a35e:	b030      	add	sp, #192	; 0xc0
 800a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a364:	4618      	mov	r0, r3
 800a366:	b030      	add	sp, #192	; 0xc0
 800a368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36c:	200b      	movs	r0, #11
 800a36e:	4770      	bx	lr
 800a370:	200a      	movs	r0, #10
 800a372:	e7f4      	b.n	800a35e <rclc_executor_init+0xb6>
 800a374:	f3af 8000 	nop.w
 800a378:	3b9aca00 	.word	0x3b9aca00
 800a37c:	00000000 	.word	0x00000000
 800a380:	080164b0 	.word	0x080164b0
 800a384:	0800a205 	.word	0x0800a205

0800a388 <rclc_executor_add_subscription>:
 800a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800a38e:	b338      	cbz	r0, 800a3e0 <rclc_executor_add_subscription+0x58>
 800a390:	b331      	cbz	r1, 800a3e0 <rclc_executor_add_subscription+0x58>
 800a392:	b32a      	cbz	r2, 800a3e0 <rclc_executor_add_subscription+0x58>
 800a394:	b323      	cbz	r3, 800a3e0 <rclc_executor_add_subscription+0x58>
 800a396:	4604      	mov	r4, r0
 800a398:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800a39c:	42a8      	cmp	r0, r5
 800a39e:	d301      	bcc.n	800a3a4 <rclc_executor_add_subscription+0x1c>
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a4:	6866      	ldr	r6, [r4, #4]
 800a3a6:	0187      	lsls	r7, r0, #6
 800a3a8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800a3ac:	2500      	movs	r5, #0
 800a3ae:	55f5      	strb	r5, [r6, r7]
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 800a3b6:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	f104 0514 	add.w	r5, r4, #20
 800a3c0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a3c4:	f88c e001 	strb.w	lr, [ip, #1]
 800a3c8:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 800a3cc:	60e0      	str	r0, [r4, #12]
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f005 fe1c 	bl	801000c <rcl_wait_set_is_valid>
 800a3d4:	b930      	cbnz	r0, 800a3e4 <rclc_executor_add_subscription+0x5c>
 800a3d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a3d8:	3301      	adds	r3, #1
 800a3da:	2000      	movs	r0, #0
 800a3dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800a3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e0:	200b      	movs	r0, #11
 800a3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f005 fe17 	bl	8010018 <rcl_wait_set_fini>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d0f3      	beq.n	800a3d6 <rclc_executor_add_subscription+0x4e>
 800a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3f0 <rclc_executor_prepare>:
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d044      	beq.n	800a47e <rclc_executor_prepare+0x8e>
 800a3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f6:	f100 0514 	add.w	r5, r0, #20
 800a3fa:	b09b      	sub	sp, #108	; 0x6c
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	4628      	mov	r0, r5
 800a400:	f005 fe04 	bl	801000c <rcl_wait_set_is_valid>
 800a404:	b110      	cbz	r0, 800a40c <rclc_executor_prepare+0x1c>
 800a406:	2000      	movs	r0, #0
 800a408:	b01b      	add	sp, #108	; 0x6c
 800a40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a40c:	4628      	mov	r0, r5
 800a40e:	f005 fe03 	bl	8010018 <rcl_wait_set_fini>
 800a412:	2800      	cmp	r0, #0
 800a414:	d130      	bne.n	800a478 <rclc_executor_prepare+0x88>
 800a416:	a80c      	add	r0, sp, #48	; 0x30
 800a418:	f005 fde4 	bl	800ffe4 <rcl_get_zero_initialized_wait_set>
 800a41c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800a420:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a424:	46ae      	mov	lr, r5
 800a426:	6927      	ldr	r7, [r4, #16]
 800a428:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a42c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a430:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a434:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a438:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a43c:	f8dc 3000 	ldr.w	r3, [ip]
 800a440:	f8ce 3000 	str.w	r3, [lr]
 800a444:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a446:	ae04      	add	r6, sp, #16
 800a448:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	6033      	str	r3, [r6, #0]
 800a450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a452:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a454:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a458:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800a45c:	e9cd 2100 	strd	r2, r1, [sp]
 800a460:	4628      	mov	r0, r5
 800a462:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a464:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a466:	f006 f8d5 	bl	8010614 <rcl_wait_set_init>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d0cc      	beq.n	800a408 <rclc_executor_prepare+0x18>
 800a46e:	900b      	str	r0, [sp, #44]	; 0x2c
 800a470:	f000 fb8a 	bl	800ab88 <rcutils_reset_error>
 800a474:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a476:	e7c7      	b.n	800a408 <rclc_executor_prepare+0x18>
 800a478:	f000 fb86 	bl	800ab88 <rcutils_reset_error>
 800a47c:	e7cb      	b.n	800a416 <rclc_executor_prepare+0x26>
 800a47e:	200b      	movs	r0, #11
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop

0800a484 <rclc_executor_spin_some.part.0>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	f100 0614 	add.w	r6, r0, #20
 800a48c:	b083      	sub	sp, #12
 800a48e:	4691      	mov	r9, r2
 800a490:	4698      	mov	r8, r3
 800a492:	4605      	mov	r5, r0
 800a494:	f7ff ffac 	bl	800a3f0 <rclc_executor_prepare>
 800a498:	4630      	mov	r0, r6
 800a49a:	f005 fe89 	bl	80101b0 <rcl_wait_set_clear>
 800a49e:	4607      	mov	r7, r0
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	f040 80ed 	bne.w	800a680 <rclc_executor_spin_some.part.0+0x1fc>
 800a4a6:	68ab      	ldr	r3, [r5, #8]
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	b303      	cbz	r3, 800a4ee <rclc_executor_spin_some.part.0+0x6a>
 800a4ac:	6869      	ldr	r1, [r5, #4]
 800a4ae:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a4b2:	01a2      	lsls	r2, r4, #6
 800a4b4:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800a4b8:	b1cb      	cbz	r3, 800a4ee <rclc_executor_spin_some.part.0+0x6a>
 800a4ba:	5c8b      	ldrb	r3, [r1, r2]
 800a4bc:	2b0a      	cmp	r3, #10
 800a4be:	f200 80d8 	bhi.w	800a672 <rclc_executor_spin_some.part.0+0x1ee>
 800a4c2:	e8df f003 	tbb	[pc, r3]
 800a4c6:	9c9c      	.short	0x9c9c
 800a4c8:	068c8ca7 	.word	0x068c8ca7
 800a4cc:	bdc90606 	.word	0xbdc90606
 800a4d0:	b2          	.byte	0xb2
 800a4d1:	00          	.byte	0x00
 800a4d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a4d6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f006 f9b0 	bl	8010840 <rcl_wait_set_add_service>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	f040 8086 	bne.w	800a5f2 <rclc_executor_spin_some.part.0+0x16e>
 800a4e6:	68ab      	ldr	r3, [r5, #8]
 800a4e8:	3401      	adds	r4, #1
 800a4ea:	429c      	cmp	r4, r3
 800a4ec:	d3de      	bcc.n	800a4ac <rclc_executor_spin_some.part.0+0x28>
 800a4ee:	4643      	mov	r3, r8
 800a4f0:	464a      	mov	r2, r9
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f006 f9d0 	bl	8010898 <rcl_wait>
 800a4f8:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 80c7 	beq.w	800a690 <rclc_executor_spin_some.part.0+0x20c>
 800a502:	2b01      	cmp	r3, #1
 800a504:	f040 80b5 	bne.w	800a672 <rclc_executor_spin_some.part.0+0x1ee>
 800a508:	68ab      	ldr	r3, [r5, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 8159 	beq.w	800a7c2 <rclc_executor_spin_some.part.0+0x33e>
 800a510:	2400      	movs	r4, #0
 800a512:	46a0      	mov	r8, r4
 800a514:	f240 1991 	movw	r9, #401	; 0x191
 800a518:	e00a      	b.n	800a530 <rclc_executor_spin_some.part.0+0xac>
 800a51a:	f7ff fb71 	bl	8009c00 <_rclc_check_for_new_data>
 800a51e:	4604      	mov	r4, r0
 800a520:	b110      	cbz	r0, 800a528 <rclc_executor_spin_some.part.0+0xa4>
 800a522:	4548      	cmp	r0, r9
 800a524:	f040 80b2 	bne.w	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a528:	68ab      	ldr	r3, [r5, #8]
 800a52a:	4598      	cmp	r8, r3
 800a52c:	f080 8126 	bcs.w	800a77c <rclc_executor_spin_some.part.0+0x2f8>
 800a530:	686a      	ldr	r2, [r5, #4]
 800a532:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a536:	4631      	mov	r1, r6
 800a538:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a53c:	f108 0801 	add.w	r8, r8, #1
 800a540:	f1bc 0f00 	cmp.w	ip, #0
 800a544:	d1e9      	bne.n	800a51a <rclc_executor_spin_some.part.0+0x96>
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a54e:	4798      	blx	r3
 800a550:	2800      	cmp	r0, #0
 800a552:	f000 809b 	beq.w	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a556:	68ab      	ldr	r3, [r5, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 8097 	beq.w	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a55e:	f04f 0800 	mov.w	r8, #0
 800a562:	f240 1991 	movw	r9, #401	; 0x191
 800a566:	e009      	b.n	800a57c <rclc_executor_spin_some.part.0+0xf8>
 800a568:	f7ff fb98 	bl	8009c9c <_rclc_take_new_data>
 800a56c:	4604      	mov	r4, r0
 800a56e:	b110      	cbz	r0, 800a576 <rclc_executor_spin_some.part.0+0xf2>
 800a570:	4548      	cmp	r0, r9
 800a572:	f040 808b 	bne.w	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a576:	68ab      	ldr	r3, [r5, #8]
 800a578:	4598      	cmp	r8, r3
 800a57a:	d209      	bcs.n	800a590 <rclc_executor_spin_some.part.0+0x10c>
 800a57c:	6868      	ldr	r0, [r5, #4]
 800a57e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a582:	4631      	mov	r1, r6
 800a584:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a588:	f108 0801 	add.w	r8, r8, #1
 800a58c:	2a00      	cmp	r2, #0
 800a58e:	d1eb      	bne.n	800a568 <rclc_executor_spin_some.part.0+0xe4>
 800a590:	2600      	movs	r6, #0
 800a592:	b97b      	cbnz	r3, 800a5b4 <rclc_executor_spin_some.part.0+0x130>
 800a594:	e07a      	b.n	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a596:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a59a:	2a08      	cmp	r2, #8
 800a59c:	f000 80fd 	beq.w	800a79a <rclc_executor_spin_some.part.0+0x316>
 800a5a0:	2a09      	cmp	r2, #9
 800a5a2:	f000 80ef 	beq.w	800a784 <rclc_executor_spin_some.part.0+0x300>
 800a5a6:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800a5aa:	b98a      	cbnz	r2, 800a5d0 <rclc_executor_spin_some.part.0+0x14c>
 800a5ac:	3601      	adds	r6, #1
 800a5ae:	429e      	cmp	r6, r3
 800a5b0:	d262      	bcs.n	800a678 <rclc_executor_spin_some.part.0+0x1f4>
 800a5b2:	2400      	movs	r4, #0
 800a5b4:	686a      	ldr	r2, [r5, #4]
 800a5b6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a5ba:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a5be:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800a5c2:	2900      	cmp	r1, #0
 800a5c4:	d062      	beq.n	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a5c6:	7841      	ldrb	r1, [r0, #1]
 800a5c8:	2900      	cmp	r1, #0
 800a5ca:	d0e4      	beq.n	800a596 <rclc_executor_spin_some.part.0+0x112>
 800a5cc:	2901      	cmp	r1, #1
 800a5ce:	d1ed      	bne.n	800a5ac <rclc_executor_spin_some.part.0+0x128>
 800a5d0:	f7ff fcd8 	bl	8009f84 <_rclc_execute.part.0>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f040 80b6 	bne.w	800a746 <rclc_executor_spin_some.part.0+0x2c2>
 800a5da:	68ab      	ldr	r3, [r5, #8]
 800a5dc:	e7e6      	b.n	800a5ac <rclc_executor_spin_some.part.0+0x128>
 800a5de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a5e2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f006 f8fe 	bl	80107e8 <rcl_wait_set_add_client>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	f43f af7a 	beq.w	800a4e6 <rclc_executor_spin_some.part.0+0x62>
 800a5f2:	9001      	str	r0, [sp, #4]
 800a5f4:	f000 fac8 	bl	800ab88 <rcutils_reset_error>
 800a5f8:	9801      	ldr	r0, [sp, #4]
 800a5fa:	4607      	mov	r7, r0
 800a5fc:	e03c      	b.n	800a678 <rclc_executor_spin_some.part.0+0x1f4>
 800a5fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a602:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a606:	4630      	mov	r0, r6
 800a608:	f005 fda6 	bl	8010158 <rcl_wait_set_add_subscription>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f43f af6a 	beq.w	800a4e6 <rclc_executor_spin_some.part.0+0x62>
 800a612:	e7ee      	b.n	800a5f2 <rclc_executor_spin_some.part.0+0x16e>
 800a614:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a618:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a61c:	4630      	mov	r0, r6
 800a61e:	f006 f8b3 	bl	8010788 <rcl_wait_set_add_timer>
 800a622:	2800      	cmp	r0, #0
 800a624:	f43f af5f 	beq.w	800a4e6 <rclc_executor_spin_some.part.0+0x62>
 800a628:	e7e3      	b.n	800a5f2 <rclc_executor_spin_some.part.0+0x16e>
 800a62a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a62e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a632:	4630      	mov	r0, r6
 800a634:	f006 f87c 	bl	8010730 <rcl_wait_set_add_guard_condition>
 800a638:	2800      	cmp	r0, #0
 800a63a:	f43f af54 	beq.w	800a4e6 <rclc_executor_spin_some.part.0+0x62>
 800a63e:	e7d8      	b.n	800a5f2 <rclc_executor_spin_some.part.0+0x16e>
 800a640:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a644:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a648:	3110      	adds	r1, #16
 800a64a:	4630      	mov	r0, r6
 800a64c:	f006 fdfa 	bl	8011244 <rcl_action_wait_set_add_action_server>
 800a650:	2800      	cmp	r0, #0
 800a652:	f43f af48 	beq.w	800a4e6 <rclc_executor_spin_some.part.0+0x62>
 800a656:	e7cc      	b.n	800a5f2 <rclc_executor_spin_some.part.0+0x16e>
 800a658:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a65c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a660:	3110      	adds	r1, #16
 800a662:	2300      	movs	r3, #0
 800a664:	4630      	mov	r0, r6
 800a666:	f006 fbc7 	bl	8010df8 <rcl_action_wait_set_add_action_client>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f43f af3b 	beq.w	800a4e6 <rclc_executor_spin_some.part.0+0x62>
 800a670:	e7bf      	b.n	800a5f2 <rclc_executor_spin_some.part.0+0x16e>
 800a672:	f000 fa89 	bl	800ab88 <rcutils_reset_error>
 800a676:	2701      	movs	r7, #1
 800a678:	4638      	mov	r0, r7
 800a67a:	b003      	add	sp, #12
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	f000 fa82 	bl	800ab88 <rcutils_reset_error>
 800a684:	4638      	mov	r0, r7
 800a686:	b003      	add	sp, #12
 800a688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68c:	4627      	mov	r7, r4
 800a68e:	e7f3      	b.n	800a678 <rclc_executor_spin_some.part.0+0x1f4>
 800a690:	68ab      	ldr	r3, [r5, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 8092 	beq.w	800a7bc <rclc_executor_spin_some.part.0+0x338>
 800a698:	2400      	movs	r4, #0
 800a69a:	46a0      	mov	r8, r4
 800a69c:	f240 1991 	movw	r9, #401	; 0x191
 800a6a0:	e008      	b.n	800a6b4 <rclc_executor_spin_some.part.0+0x230>
 800a6a2:	f7ff faad 	bl	8009c00 <_rclc_check_for_new_data>
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	b108      	cbz	r0, 800a6ae <rclc_executor_spin_some.part.0+0x22a>
 800a6aa:	4548      	cmp	r0, r9
 800a6ac:	d1ee      	bne.n	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a6ae:	68ab      	ldr	r3, [r5, #8]
 800a6b0:	4598      	cmp	r8, r3
 800a6b2:	d265      	bcs.n	800a780 <rclc_executor_spin_some.part.0+0x2fc>
 800a6b4:	686a      	ldr	r2, [r5, #4]
 800a6b6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a6c0:	f108 0801 	add.w	r8, r8, #1
 800a6c4:	f1bc 0f00 	cmp.w	ip, #0
 800a6c8:	d1eb      	bne.n	800a6a2 <rclc_executor_spin_some.part.0+0x21e>
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a6d2:	4798      	blx	r3
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d0d9      	beq.n	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a6d8:	68ab      	ldr	r3, [r5, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0d6      	beq.n	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a6de:	f04f 0800 	mov.w	r8, #0
 800a6e2:	f240 1991 	movw	r9, #401	; 0x191
 800a6e6:	f240 2a59 	movw	sl, #601	; 0x259
 800a6ea:	e00e      	b.n	800a70a <rclc_executor_spin_some.part.0+0x286>
 800a6ec:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a6f0:	2b08      	cmp	r3, #8
 800a6f2:	d033      	beq.n	800a75c <rclc_executor_spin_some.part.0+0x2d8>
 800a6f4:	2b09      	cmp	r3, #9
 800a6f6:	d028      	beq.n	800a74a <rclc_executor_spin_some.part.0+0x2c6>
 800a6f8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a6fc:	b9fb      	cbnz	r3, 800a73e <rclc_executor_spin_some.part.0+0x2ba>
 800a6fe:	68ab      	ldr	r3, [r5, #8]
 800a700:	f108 0801 	add.w	r8, r8, #1
 800a704:	4598      	cmp	r8, r3
 800a706:	d2b7      	bcs.n	800a678 <rclc_executor_spin_some.part.0+0x1f4>
 800a708:	2400      	movs	r4, #0
 800a70a:	6868      	ldr	r0, [r5, #4]
 800a70c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a710:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a714:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0b7      	beq.n	800a68c <rclc_executor_spin_some.part.0+0x208>
 800a71c:	4631      	mov	r1, r6
 800a71e:	f7ff fabd 	bl	8009c9c <_rclc_take_new_data>
 800a722:	b118      	cbz	r0, 800a72c <rclc_executor_spin_some.part.0+0x2a8>
 800a724:	4548      	cmp	r0, r9
 800a726:	d001      	beq.n	800a72c <rclc_executor_spin_some.part.0+0x2a8>
 800a728:	4550      	cmp	r0, sl
 800a72a:	d10c      	bne.n	800a746 <rclc_executor_spin_some.part.0+0x2c2>
 800a72c:	686b      	ldr	r3, [r5, #4]
 800a72e:	eb13 000b 	adds.w	r0, r3, fp
 800a732:	d021      	beq.n	800a778 <rclc_executor_spin_some.part.0+0x2f4>
 800a734:	7842      	ldrb	r2, [r0, #1]
 800a736:	2a00      	cmp	r2, #0
 800a738:	d0d8      	beq.n	800a6ec <rclc_executor_spin_some.part.0+0x268>
 800a73a:	2a01      	cmp	r2, #1
 800a73c:	d1df      	bne.n	800a6fe <rclc_executor_spin_some.part.0+0x27a>
 800a73e:	f7ff fc21 	bl	8009f84 <_rclc_execute.part.0>
 800a742:	2800      	cmp	r0, #0
 800a744:	d0db      	beq.n	800a6fe <rclc_executor_spin_some.part.0+0x27a>
 800a746:	4607      	mov	r7, r0
 800a748:	e796      	b.n	800a678 <rclc_executor_spin_some.part.0+0x1f4>
 800a74a:	6843      	ldr	r3, [r0, #4]
 800a74c:	6a1a      	ldr	r2, [r3, #32]
 800a74e:	2a00      	cmp	r2, #0
 800a750:	d1f5      	bne.n	800a73e <rclc_executor_spin_some.part.0+0x2ba>
 800a752:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a756:	2b00      	cmp	r3, #0
 800a758:	d0d1      	beq.n	800a6fe <rclc_executor_spin_some.part.0+0x27a>
 800a75a:	e7f0      	b.n	800a73e <rclc_executor_spin_some.part.0+0x2ba>
 800a75c:	6843      	ldr	r3, [r0, #4]
 800a75e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a760:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800a764:	d1eb      	bne.n	800a73e <rclc_executor_spin_some.part.0+0x2ba>
 800a766:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a76a:	2a00      	cmp	r2, #0
 800a76c:	d1e7      	bne.n	800a73e <rclc_executor_spin_some.part.0+0x2ba>
 800a76e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0c3      	beq.n	800a6fe <rclc_executor_spin_some.part.0+0x27a>
 800a776:	e7e2      	b.n	800a73e <rclc_executor_spin_some.part.0+0x2ba>
 800a778:	270b      	movs	r7, #11
 800a77a:	e77d      	b.n	800a678 <rclc_executor_spin_some.part.0+0x1f4>
 800a77c:	686a      	ldr	r2, [r5, #4]
 800a77e:	e6e2      	b.n	800a546 <rclc_executor_spin_some.part.0+0xc2>
 800a780:	686a      	ldr	r2, [r5, #4]
 800a782:	e7a2      	b.n	800a6ca <rclc_executor_spin_some.part.0+0x246>
 800a784:	6842      	ldr	r2, [r0, #4]
 800a786:	6a11      	ldr	r1, [r2, #32]
 800a788:	2900      	cmp	r1, #0
 800a78a:	f47f af21 	bne.w	800a5d0 <rclc_executor_spin_some.part.0+0x14c>
 800a78e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a792:	2a00      	cmp	r2, #0
 800a794:	f43f af0a 	beq.w	800a5ac <rclc_executor_spin_some.part.0+0x128>
 800a798:	e71a      	b.n	800a5d0 <rclc_executor_spin_some.part.0+0x14c>
 800a79a:	6842      	ldr	r2, [r0, #4]
 800a79c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a79e:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800a7a2:	f47f af15 	bne.w	800a5d0 <rclc_executor_spin_some.part.0+0x14c>
 800a7a6:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800a7aa:	2900      	cmp	r1, #0
 800a7ac:	f47f af10 	bne.w	800a5d0 <rclc_executor_spin_some.part.0+0x14c>
 800a7b0:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800a7b4:	2a00      	cmp	r2, #0
 800a7b6:	f43f aef9 	beq.w	800a5ac <rclc_executor_spin_some.part.0+0x128>
 800a7ba:	e709      	b.n	800a5d0 <rclc_executor_spin_some.part.0+0x14c>
 800a7bc:	686a      	ldr	r2, [r5, #4]
 800a7be:	461c      	mov	r4, r3
 800a7c0:	e783      	b.n	800a6ca <rclc_executor_spin_some.part.0+0x246>
 800a7c2:	686a      	ldr	r2, [r5, #4]
 800a7c4:	461c      	mov	r4, r3
 800a7c6:	e6be      	b.n	800a546 <rclc_executor_spin_some.part.0+0xc2>

0800a7c8 <rclc_executor_spin>:
 800a7c8:	b1d0      	cbz	r0, 800a800 <rclc_executor_spin+0x38>
 800a7ca:	b510      	push	{r4, lr}
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 800a7d4:	6820      	ldr	r0, [r4, #0]
 800a7d6:	e9cd 2300 	strd	r2, r3, [sp]
 800a7da:	f004 fcad 	bl	800f138 <rcl_context_is_valid>
 800a7de:	4601      	mov	r1, r0
 800a7e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	b131      	cbz	r1, 800a7f6 <rclc_executor_spin+0x2e>
 800a7e8:	f7ff fe4c 	bl	800a484 <rclc_executor_spin_some.part.0>
 800a7ec:	f030 0302 	bics.w	r3, r0, #2
 800a7f0:	d0ee      	beq.n	800a7d0 <rclc_executor_spin+0x8>
 800a7f2:	b002      	add	sp, #8
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	f000 f9c7 	bl	800ab88 <rcutils_reset_error>
 800a7fa:	2001      	movs	r0, #1
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bd10      	pop	{r4, pc}
 800a800:	200b      	movs	r0, #11
 800a802:	4770      	bx	lr

0800a804 <rclc_executor_handle_counters_zero_init>:
 800a804:	b130      	cbz	r0, 800a814 <rclc_executor_handle_counters_zero_init+0x10>
 800a806:	b508      	push	{r3, lr}
 800a808:	2220      	movs	r2, #32
 800a80a:	2100      	movs	r1, #0
 800a80c:	f00a fd6c 	bl	80152e8 <memset>
 800a810:	2000      	movs	r0, #0
 800a812:	bd08      	pop	{r3, pc}
 800a814:	200b      	movs	r0, #11
 800a816:	4770      	bx	lr

0800a818 <rclc_executor_handle_init>:
 800a818:	b168      	cbz	r0, 800a836 <rclc_executor_handle_init+0x1e>
 800a81a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800a840 <rclc_executor_handle_init+0x28>
 800a81e:	2300      	movs	r3, #0
 800a820:	220b      	movs	r2, #11
 800a822:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800a826:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a82a:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800a82e:	8002      	strh	r2, [r0, #0]
 800a830:	8703      	strh	r3, [r0, #56]	; 0x38
 800a832:	4618      	mov	r0, r3
 800a834:	4770      	bx	lr
 800a836:	200b      	movs	r0, #11
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	f3af 8000 	nop.w
	...

0800a848 <rclc_support_init>:
 800a848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84c:	b086      	sub	sp, #24
 800a84e:	b3b8      	cbz	r0, 800a8c0 <rclc_support_init+0x78>
 800a850:	461c      	mov	r4, r3
 800a852:	b3ab      	cbz	r3, 800a8c0 <rclc_support_init+0x78>
 800a854:	460f      	mov	r7, r1
 800a856:	4690      	mov	r8, r2
 800a858:	4606      	mov	r6, r0
 800a85a:	f004 fe89 	bl	800f570 <rcl_get_zero_initialized_init_options>
 800a85e:	f104 030c 	add.w	r3, r4, #12
 800a862:	9005      	str	r0, [sp, #20]
 800a864:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a868:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a86c:	a805      	add	r0, sp, #20
 800a86e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a872:	f004 fe7f 	bl	800f574 <rcl_init_options_init>
 800a876:	4605      	mov	r5, r0
 800a878:	b9e0      	cbnz	r0, 800a8b4 <rclc_support_init+0x6c>
 800a87a:	ad02      	add	r5, sp, #8
 800a87c:	4628      	mov	r0, r5
 800a87e:	f004 fc51 	bl	800f124 <rcl_get_zero_initialized_context>
 800a882:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a886:	4633      	mov	r3, r6
 800a888:	e886 0003 	stmia.w	r6, {r0, r1}
 800a88c:	aa05      	add	r2, sp, #20
 800a88e:	4641      	mov	r1, r8
 800a890:	4638      	mov	r0, r7
 800a892:	f004 fd69 	bl	800f368 <rcl_init>
 800a896:	4605      	mov	r5, r0
 800a898:	b9b8      	cbnz	r0, 800a8ca <rclc_support_init+0x82>
 800a89a:	60b4      	str	r4, [r6, #8]
 800a89c:	4622      	mov	r2, r4
 800a89e:	f106 010c 	add.w	r1, r6, #12
 800a8a2:	2003      	movs	r0, #3
 800a8a4:	f005 f9a8 	bl	800fbf8 <rcl_clock_init>
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	b970      	cbnz	r0, 800a8ca <rclc_support_init+0x82>
 800a8ac:	a805      	add	r0, sp, #20
 800a8ae:	f004 fec7 	bl	800f640 <rcl_init_options_fini>
 800a8b2:	b108      	cbz	r0, 800a8b8 <rclc_support_init+0x70>
 800a8b4:	f000 f968 	bl	800ab88 <rcutils_reset_error>
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	b006      	add	sp, #24
 800a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c0:	250b      	movs	r5, #11
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	b006      	add	sp, #24
 800a8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ca:	f000 f95d 	bl	800ab88 <rcutils_reset_error>
 800a8ce:	a805      	add	r0, sp, #20
 800a8d0:	f004 feb6 	bl	800f640 <rcl_init_options_fini>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d0ef      	beq.n	800a8b8 <rclc_support_init+0x70>
 800a8d8:	e7ec      	b.n	800a8b4 <rclc_support_init+0x6c>
 800a8da:	bf00      	nop

0800a8dc <rclc_node_init_default>:
 800a8dc:	b3b8      	cbz	r0, 800a94e <rclc_node_init_default+0x72>
 800a8de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8e2:	460d      	mov	r5, r1
 800a8e4:	b0a1      	sub	sp, #132	; 0x84
 800a8e6:	b329      	cbz	r1, 800a934 <rclc_node_init_default+0x58>
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	b31a      	cbz	r2, 800a934 <rclc_node_init_default+0x58>
 800a8ec:	461f      	mov	r7, r3
 800a8ee:	b30b      	cbz	r3, 800a934 <rclc_node_init_default+0x58>
 800a8f0:	f10d 0810 	add.w	r8, sp, #16
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	f7fe fcfc 	bl	80092f4 <rcl_get_zero_initialized_node>
 800a8fc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a900:	f10d 0918 	add.w	r9, sp, #24
 800a904:	e884 0003 	stmia.w	r4, {r0, r1}
 800a908:	4648      	mov	r0, r9
 800a90a:	f7fe fe9d 	bl	8009648 <rcl_node_get_default_options>
 800a90e:	4640      	mov	r0, r8
 800a910:	f7fe fcf0 	bl	80092f4 <rcl_get_zero_initialized_node>
 800a914:	f8cd 9000 	str.w	r9, [sp]
 800a918:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a91c:	463b      	mov	r3, r7
 800a91e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a922:	4632      	mov	r2, r6
 800a924:	4629      	mov	r1, r5
 800a926:	4620      	mov	r0, r4
 800a928:	f7fe fcee 	bl	8009308 <rcl_node_init>
 800a92c:	b930      	cbnz	r0, 800a93c <rclc_node_init_default+0x60>
 800a92e:	b021      	add	sp, #132	; 0x84
 800a930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a934:	200b      	movs	r0, #11
 800a936:	b021      	add	sp, #132	; 0x84
 800a938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a93c:	9003      	str	r0, [sp, #12]
 800a93e:	f000 f923 	bl	800ab88 <rcutils_reset_error>
 800a942:	f000 f921 	bl	800ab88 <rcutils_reset_error>
 800a946:	9803      	ldr	r0, [sp, #12]
 800a948:	b021      	add	sp, #132	; 0x84
 800a94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a94e:	200b      	movs	r0, #11
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop

0800a954 <rclc_publisher_init_default>:
 800a954:	b368      	cbz	r0, 800a9b2 <rclc_publisher_init_default+0x5e>
 800a956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95a:	460d      	mov	r5, r1
 800a95c:	b0a0      	sub	sp, #128	; 0x80
 800a95e:	b321      	cbz	r1, 800a9aa <rclc_publisher_init_default+0x56>
 800a960:	4616      	mov	r6, r2
 800a962:	b312      	cbz	r2, 800a9aa <rclc_publisher_init_default+0x56>
 800a964:	461f      	mov	r7, r3
 800a966:	b303      	cbz	r3, 800a9aa <rclc_publisher_init_default+0x56>
 800a968:	4604      	mov	r4, r0
 800a96a:	f7fe fe99 	bl	80096a0 <rcl_get_zero_initialized_publisher>
 800a96e:	f10d 0810 	add.w	r8, sp, #16
 800a972:	6020      	str	r0, [r4, #0]
 800a974:	4640      	mov	r0, r8
 800a976:	f7fe ff5b 	bl	8009830 <rcl_publisher_get_default_options>
 800a97a:	490f      	ldr	r1, [pc, #60]	; (800a9b8 <rclc_publisher_init_default+0x64>)
 800a97c:	2250      	movs	r2, #80	; 0x50
 800a97e:	4640      	mov	r0, r8
 800a980:	f00a fd7b 	bl	801547a <memcpy>
 800a984:	f8cd 8000 	str.w	r8, [sp]
 800a988:	463b      	mov	r3, r7
 800a98a:	4632      	mov	r2, r6
 800a98c:	4629      	mov	r1, r5
 800a98e:	4620      	mov	r0, r4
 800a990:	f7fe fe8c 	bl	80096ac <rcl_publisher_init>
 800a994:	b910      	cbnz	r0, 800a99c <rclc_publisher_init_default+0x48>
 800a996:	b020      	add	sp, #128	; 0x80
 800a998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a99c:	9003      	str	r0, [sp, #12]
 800a99e:	f000 f8f3 	bl	800ab88 <rcutils_reset_error>
 800a9a2:	9803      	ldr	r0, [sp, #12]
 800a9a4:	b020      	add	sp, #128	; 0x80
 800a9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9aa:	200b      	movs	r0, #11
 800a9ac:	b020      	add	sp, #128	; 0x80
 800a9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b2:	200b      	movs	r0, #11
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	08016538 	.word	0x08016538

0800a9bc <rclc_publisher_init_best_effort>:
 800a9bc:	b368      	cbz	r0, 800aa1a <rclc_publisher_init_best_effort+0x5e>
 800a9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	b0a0      	sub	sp, #128	; 0x80
 800a9c6:	b321      	cbz	r1, 800aa12 <rclc_publisher_init_best_effort+0x56>
 800a9c8:	4616      	mov	r6, r2
 800a9ca:	b312      	cbz	r2, 800aa12 <rclc_publisher_init_best_effort+0x56>
 800a9cc:	461f      	mov	r7, r3
 800a9ce:	b303      	cbz	r3, 800aa12 <rclc_publisher_init_best_effort+0x56>
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	f7fe fe65 	bl	80096a0 <rcl_get_zero_initialized_publisher>
 800a9d6:	f10d 0810 	add.w	r8, sp, #16
 800a9da:	6020      	str	r0, [r4, #0]
 800a9dc:	4640      	mov	r0, r8
 800a9de:	f7fe ff27 	bl	8009830 <rcl_publisher_get_default_options>
 800a9e2:	490f      	ldr	r1, [pc, #60]	; (800aa20 <rclc_publisher_init_best_effort+0x64>)
 800a9e4:	2250      	movs	r2, #80	; 0x50
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	f00a fd47 	bl	801547a <memcpy>
 800a9ec:	f8cd 8000 	str.w	r8, [sp]
 800a9f0:	463b      	mov	r3, r7
 800a9f2:	4632      	mov	r2, r6
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f7fe fe58 	bl	80096ac <rcl_publisher_init>
 800a9fc:	b910      	cbnz	r0, 800aa04 <rclc_publisher_init_best_effort+0x48>
 800a9fe:	b020      	add	sp, #128	; 0x80
 800aa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa04:	9003      	str	r0, [sp, #12]
 800aa06:	f000 f8bf 	bl	800ab88 <rcutils_reset_error>
 800aa0a:	9803      	ldr	r0, [sp, #12]
 800aa0c:	b020      	add	sp, #128	; 0x80
 800aa0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa12:	200b      	movs	r0, #11
 800aa14:	b020      	add	sp, #128	; 0x80
 800aa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa1a:	200b      	movs	r0, #11
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	08016588 	.word	0x08016588

0800aa24 <rclc_subscription_init_default>:
 800aa24:	b368      	cbz	r0, 800aa82 <rclc_subscription_init_default+0x5e>
 800aa26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	b0a0      	sub	sp, #128	; 0x80
 800aa2e:	b321      	cbz	r1, 800aa7a <rclc_subscription_init_default+0x56>
 800aa30:	4616      	mov	r6, r2
 800aa32:	b312      	cbz	r2, 800aa7a <rclc_subscription_init_default+0x56>
 800aa34:	461f      	mov	r7, r3
 800aa36:	b303      	cbz	r3, 800aa7a <rclc_subscription_init_default+0x56>
 800aa38:	4604      	mov	r4, r0
 800aa3a:	f7fe ff49 	bl	80098d0 <rcl_get_zero_initialized_subscription>
 800aa3e:	f10d 0810 	add.w	r8, sp, #16
 800aa42:	6020      	str	r0, [r4, #0]
 800aa44:	4640      	mov	r0, r8
 800aa46:	f7ff f845 	bl	8009ad4 <rcl_subscription_get_default_options>
 800aa4a:	490f      	ldr	r1, [pc, #60]	; (800aa88 <rclc_subscription_init_default+0x64>)
 800aa4c:	2250      	movs	r2, #80	; 0x50
 800aa4e:	4640      	mov	r0, r8
 800aa50:	f00a fd13 	bl	801547a <memcpy>
 800aa54:	f8cd 8000 	str.w	r8, [sp]
 800aa58:	463b      	mov	r3, r7
 800aa5a:	4632      	mov	r2, r6
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f7fe ff3c 	bl	80098dc <rcl_subscription_init>
 800aa64:	b910      	cbnz	r0, 800aa6c <rclc_subscription_init_default+0x48>
 800aa66:	b020      	add	sp, #128	; 0x80
 800aa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa6c:	9003      	str	r0, [sp, #12]
 800aa6e:	f000 f88b 	bl	800ab88 <rcutils_reset_error>
 800aa72:	9803      	ldr	r0, [sp, #12]
 800aa74:	b020      	add	sp, #128	; 0x80
 800aa76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7a:	200b      	movs	r0, #11
 800aa7c:	b020      	add	sp, #128	; 0x80
 800aa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa82:	200b      	movs	r0, #11
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	080165d8 	.word	0x080165d8

0800aa8c <__default_zero_allocate>:
 800aa8c:	f009 bf3a 	b.w	8014904 <calloc>

0800aa90 <__default_reallocate>:
 800aa90:	f00a b8d8 	b.w	8014c44 <realloc>

0800aa94 <__default_deallocate>:
 800aa94:	f009 bfb6 	b.w	8014a04 <free>

0800aa98 <__default_allocate>:
 800aa98:	f009 bfac 	b.w	80149f4 <malloc>

0800aa9c <rcutils_get_zero_initialized_allocator>:
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	4c05      	ldr	r4, [pc, #20]	; (800aab4 <rcutils_get_zero_initialized_allocator+0x18>)
 800aaa0:	4686      	mov	lr, r0
 800aaa2:	4684      	mov	ip, r0
 800aaa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	f8cc 3000 	str.w	r3, [ip]
 800aab0:	4670      	mov	r0, lr
 800aab2:	bd10      	pop	{r4, pc}
 800aab4:	08016628 	.word	0x08016628

0800aab8 <rcutils_set_default_allocator>:
 800aab8:	b1a8      	cbz	r0, 800aae6 <rcutils_set_default_allocator+0x2e>
 800aaba:	6802      	ldr	r2, [r0, #0]
 800aabc:	b1a2      	cbz	r2, 800aae8 <rcutils_set_default_allocator+0x30>
 800aabe:	6841      	ldr	r1, [r0, #4]
 800aac0:	b1a1      	cbz	r1, 800aaec <rcutils_set_default_allocator+0x34>
 800aac2:	b410      	push	{r4}
 800aac4:	68c4      	ldr	r4, [r0, #12]
 800aac6:	b164      	cbz	r4, 800aae2 <rcutils_set_default_allocator+0x2a>
 800aac8:	6880      	ldr	r0, [r0, #8]
 800aaca:	b138      	cbz	r0, 800aadc <rcutils_set_default_allocator+0x24>
 800aacc:	4b08      	ldr	r3, [pc, #32]	; (800aaf0 <rcutils_set_default_allocator+0x38>)
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	2200      	movs	r2, #0
 800aad2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800aad6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800aada:	2001      	movs	r0, #1
 800aadc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	4620      	mov	r0, r4
 800aae4:	e7fa      	b.n	800aadc <rcutils_set_default_allocator+0x24>
 800aae6:	4770      	bx	lr
 800aae8:	4610      	mov	r0, r2
 800aaea:	4770      	bx	lr
 800aaec:	4608      	mov	r0, r1
 800aaee:	4770      	bx	lr
 800aaf0:	200001bc 	.word	0x200001bc

0800aaf4 <rcutils_get_default_allocator>:
 800aaf4:	b510      	push	{r4, lr}
 800aaf6:	4c05      	ldr	r4, [pc, #20]	; (800ab0c <rcutils_get_default_allocator+0x18>)
 800aaf8:	4686      	mov	lr, r0
 800aafa:	4684      	mov	ip, r0
 800aafc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aafe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	f8cc 3000 	str.w	r3, [ip]
 800ab08:	4670      	mov	r0, lr
 800ab0a:	bd10      	pop	{r4, pc}
 800ab0c:	200001bc 	.word	0x200001bc

0800ab10 <rcutils_allocator_is_valid>:
 800ab10:	b158      	cbz	r0, 800ab2a <rcutils_allocator_is_valid+0x1a>
 800ab12:	6803      	ldr	r3, [r0, #0]
 800ab14:	b143      	cbz	r3, 800ab28 <rcutils_allocator_is_valid+0x18>
 800ab16:	6843      	ldr	r3, [r0, #4]
 800ab18:	b133      	cbz	r3, 800ab28 <rcutils_allocator_is_valid+0x18>
 800ab1a:	68c3      	ldr	r3, [r0, #12]
 800ab1c:	b123      	cbz	r3, 800ab28 <rcutils_allocator_is_valid+0x18>
 800ab1e:	6880      	ldr	r0, [r0, #8]
 800ab20:	3800      	subs	r0, #0
 800ab22:	bf18      	it	ne
 800ab24:	2001      	movne	r0, #1
 800ab26:	4770      	bx	lr
 800ab28:	4618      	mov	r0, r3
 800ab2a:	4770      	bx	lr

0800ab2c <rcutils_get_env>:
 800ab2c:	b168      	cbz	r0, 800ab4a <rcutils_get_env+0x1e>
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	460c      	mov	r4, r1
 800ab32:	b129      	cbz	r1, 800ab40 <rcutils_get_env+0x14>
 800ab34:	f009 ff16 	bl	8014964 <getenv>
 800ab38:	b120      	cbz	r0, 800ab44 <rcutils_get_env+0x18>
 800ab3a:	6020      	str	r0, [r4, #0]
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	bd10      	pop	{r4, pc}
 800ab40:	4803      	ldr	r0, [pc, #12]	; (800ab50 <rcutils_get_env+0x24>)
 800ab42:	bd10      	pop	{r4, pc}
 800ab44:	4b03      	ldr	r3, [pc, #12]	; (800ab54 <rcutils_get_env+0x28>)
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	bd10      	pop	{r4, pc}
 800ab4a:	4803      	ldr	r0, [pc, #12]	; (800ab58 <rcutils_get_env+0x2c>)
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	08016658 	.word	0x08016658
 800ab54:	08016f78 	.word	0x08016f78
 800ab58:	0801663c 	.word	0x0801663c

0800ab5c <rcutils_get_error_string>:
 800ab5c:	4b06      	ldr	r3, [pc, #24]	; (800ab78 <rcutils_get_error_string+0x1c>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	b13b      	cbz	r3, 800ab72 <rcutils_get_error_string+0x16>
 800ab62:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <rcutils_get_error_string+0x20>)
 800ab64:	781a      	ldrb	r2, [r3, #0]
 800ab66:	b90a      	cbnz	r2, 800ab6c <rcutils_get_error_string+0x10>
 800ab68:	2201      	movs	r2, #1
 800ab6a:	701a      	strb	r2, [r3, #0]
 800ab6c:	4b04      	ldr	r3, [pc, #16]	; (800ab80 <rcutils_get_error_string+0x24>)
 800ab6e:	7818      	ldrb	r0, [r3, #0]
 800ab70:	4770      	bx	lr
 800ab72:	4b04      	ldr	r3, [pc, #16]	; (800ab84 <rcutils_get_error_string+0x28>)
 800ab74:	7818      	ldrb	r0, [r3, #0]
 800ab76:	4770      	bx	lr
 800ab78:	20009290 	.word	0x20009290
 800ab7c:	200092a9 	.word	0x200092a9
 800ab80:	200092a8 	.word	0x200092a8
 800ab84:	08016674 	.word	0x08016674

0800ab88 <rcutils_reset_error>:
 800ab88:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800aba8 <rcutils_reset_error+0x20>
 800ab8c:	4a08      	ldr	r2, [pc, #32]	; (800abb0 <rcutils_reset_error+0x28>)
 800ab8e:	4809      	ldr	r0, [pc, #36]	; (800abb4 <rcutils_reset_error+0x2c>)
 800ab90:	4909      	ldr	r1, [pc, #36]	; (800abb8 <rcutils_reset_error+0x30>)
 800ab92:	2300      	movs	r3, #0
 800ab94:	8013      	strh	r3, [r2, #0]
 800ab96:	ed82 7b02 	vstr	d7, [r2, #8]
 800ab9a:	4a08      	ldr	r2, [pc, #32]	; (800abbc <rcutils_reset_error+0x34>)
 800ab9c:	7003      	strb	r3, [r0, #0]
 800ab9e:	700b      	strb	r3, [r1, #0]
 800aba0:	7013      	strb	r3, [r2, #0]
 800aba2:	4770      	bx	lr
 800aba4:	f3af 8000 	nop.w
	...
 800abb0:	20009298 	.word	0x20009298
 800abb4:	200092a9 	.word	0x200092a9
 800abb8:	200092a8 	.word	0x200092a8
 800abbc:	20009290 	.word	0x20009290

0800abc0 <rcutils_format_string_limit>:
 800abc0:	b40f      	push	{r0, r1, r2, r3}
 800abc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abc4:	b083      	sub	sp, #12
 800abc6:	ac08      	add	r4, sp, #32
 800abc8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800abca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800abce:	b34e      	cbz	r6, 800ac24 <rcutils_format_string_limit+0x64>
 800abd0:	a808      	add	r0, sp, #32
 800abd2:	f7ff ff9d 	bl	800ab10 <rcutils_allocator_is_valid>
 800abd6:	b328      	cbz	r0, 800ac24 <rcutils_format_string_limit+0x64>
 800abd8:	2100      	movs	r1, #0
 800abda:	ab0f      	add	r3, sp, #60	; 0x3c
 800abdc:	4632      	mov	r2, r6
 800abde:	4608      	mov	r0, r1
 800abe0:	e9cd 3300 	strd	r3, r3, [sp]
 800abe4:	f000 f8f4 	bl	800add0 <rcutils_vsnprintf>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	4605      	mov	r5, r0
 800abec:	d01a      	beq.n	800ac24 <rcutils_format_string_limit+0x64>
 800abee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abf2:	1c47      	adds	r7, r0, #1
 800abf4:	429f      	cmp	r7, r3
 800abf6:	bf84      	itt	hi
 800abf8:	461f      	movhi	r7, r3
 800abfa:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800abfe:	4638      	mov	r0, r7
 800ac00:	9b08      	ldr	r3, [sp, #32]
 800ac02:	4798      	blx	r3
 800ac04:	4604      	mov	r4, r0
 800ac06:	b168      	cbz	r0, 800ac24 <rcutils_format_string_limit+0x64>
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	4632      	mov	r2, r6
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	f000 f8df 	bl	800add0 <rcutils_vsnprintf>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	db02      	blt.n	800ac1c <rcutils_format_string_limit+0x5c>
 800ac16:	2300      	movs	r3, #0
 800ac18:	5563      	strb	r3, [r4, r5]
 800ac1a:	e004      	b.n	800ac26 <rcutils_format_string_limit+0x66>
 800ac1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac20:	4620      	mov	r0, r4
 800ac22:	4798      	blx	r3
 800ac24:	2400      	movs	r4, #0
 800ac26:	4620      	mov	r0, r4
 800ac28:	b003      	add	sp, #12
 800ac2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ac2e:	b004      	add	sp, #16
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop

0800ac34 <rcutils_repl_str>:
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	ed2d 8b02 	vpush	{d8}
 800ac3c:	b087      	sub	sp, #28
 800ac3e:	4680      	mov	r8, r0
 800ac40:	4608      	mov	r0, r1
 800ac42:	f8cd 8004 	str.w	r8, [sp, #4]
 800ac46:	ee08 2a10 	vmov	s16, r2
 800ac4a:	468a      	mov	sl, r1
 800ac4c:	4699      	mov	r9, r3
 800ac4e:	f7f5 fad1 	bl	80001f4 <strlen>
 800ac52:	2600      	movs	r6, #0
 800ac54:	4647      	mov	r7, r8
 800ac56:	9002      	str	r0, [sp, #8]
 800ac58:	46b3      	mov	fp, r6
 800ac5a:	2510      	movs	r5, #16
 800ac5c:	46b0      	mov	r8, r6
 800ac5e:	e01d      	b.n	800ac9c <rcutils_repl_str+0x68>
 800ac60:	f10b 0b01 	add.w	fp, fp, #1
 800ac64:	455e      	cmp	r6, fp
 800ac66:	d211      	bcs.n	800ac8c <rcutils_repl_str+0x58>
 800ac68:	442e      	add	r6, r5
 800ac6a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ac6e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ac72:	00b1      	lsls	r1, r6, #2
 800ac74:	4798      	blx	r3
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f000 8088 	beq.w	800ad8c <rcutils_repl_str+0x158>
 800ac7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac80:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800ac84:	4680      	mov	r8, r0
 800ac86:	bf28      	it	cs
 800ac88:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800ac8c:	9a01      	ldr	r2, [sp, #4]
 800ac8e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800ac92:	1aa2      	subs	r2, r4, r2
 800ac94:	f843 2c04 	str.w	r2, [r3, #-4]
 800ac98:	9b02      	ldr	r3, [sp, #8]
 800ac9a:	18e7      	adds	r7, r4, r3
 800ac9c:	4651      	mov	r1, sl
 800ac9e:	4638      	mov	r0, r7
 800aca0:	f00a fb49 	bl	8015336 <strstr>
 800aca4:	4604      	mov	r4, r0
 800aca6:	4640      	mov	r0, r8
 800aca8:	2c00      	cmp	r4, #0
 800acaa:	d1d9      	bne.n	800ac60 <rcutils_repl_str+0x2c>
 800acac:	46b8      	mov	r8, r7
 800acae:	4607      	mov	r7, r0
 800acb0:	4640      	mov	r0, r8
 800acb2:	f7f5 fa9f 	bl	80001f4 <strlen>
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	eba8 0303 	sub.w	r3, r8, r3
 800acbc:	181c      	adds	r4, r3, r0
 800acbe:	9404      	str	r4, [sp, #16]
 800acc0:	f1bb 0f00 	cmp.w	fp, #0
 800acc4:	d04a      	beq.n	800ad5c <rcutils_repl_str+0x128>
 800acc6:	ee18 0a10 	vmov	r0, s16
 800acca:	f7f5 fa93 	bl	80001f4 <strlen>
 800acce:	9b02      	ldr	r3, [sp, #8]
 800acd0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800acd4:	1ac3      	subs	r3, r0, r3
 800acd6:	fb0b 4303 	mla	r3, fp, r3, r4
 800acda:	461a      	mov	r2, r3
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	4606      	mov	r6, r0
 800ace0:	f8d9 3000 	ldr.w	r3, [r9]
 800ace4:	1c50      	adds	r0, r2, #1
 800ace6:	4798      	blx	r3
 800ace8:	9003      	str	r0, [sp, #12]
 800acea:	2800      	cmp	r0, #0
 800acec:	d04f      	beq.n	800ad8e <rcutils_repl_str+0x15a>
 800acee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	4641      	mov	r1, r8
 800acf6:	f00a fbc0 	bl	801547a <memcpy>
 800acfa:	683d      	ldr	r5, [r7, #0]
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	9701      	str	r7, [sp, #4]
 800ad00:	46ba      	mov	sl, r7
 800ad02:	441d      	add	r5, r3
 800ad04:	9f02      	ldr	r7, [sp, #8]
 800ad06:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad0a:	2401      	movs	r4, #1
 800ad0c:	46d1      	mov	r9, sl
 800ad0e:	ee18 aa10 	vmov	sl, s16
 800ad12:	e00a      	b.n	800ad2a <rcutils_repl_str+0xf6>
 800ad14:	f8d9 5000 	ldr.w	r5, [r9]
 800ad18:	1aaa      	subs	r2, r5, r2
 800ad1a:	1885      	adds	r5, r0, r2
 800ad1c:	f00a fbad 	bl	801547a <memcpy>
 800ad20:	45a3      	cmp	fp, r4
 800ad22:	f104 0201 	add.w	r2, r4, #1
 800ad26:	d935      	bls.n	800ad94 <rcutils_repl_str+0x160>
 800ad28:	4614      	mov	r4, r2
 800ad2a:	4632      	mov	r2, r6
 800ad2c:	4651      	mov	r1, sl
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f00a fba3 	bl	801547a <memcpy>
 800ad34:	f859 2b04 	ldr.w	r2, [r9], #4
 800ad38:	45a3      	cmp	fp, r4
 800ad3a:	443a      	add	r2, r7
 800ad3c:	eb05 0006 	add.w	r0, r5, r6
 800ad40:	eb08 0102 	add.w	r1, r8, r2
 800ad44:	d1e6      	bne.n	800ad14 <rcutils_repl_str+0xe0>
 800ad46:	9b04      	ldr	r3, [sp, #16]
 800ad48:	1a9a      	subs	r2, r3, r2
 800ad4a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800ad4e:	f00a fb94 	bl	801547a <memcpy>
 800ad52:	9a03      	ldr	r2, [sp, #12]
 800ad54:	9905      	ldr	r1, [sp, #20]
 800ad56:	2300      	movs	r3, #0
 800ad58:	5453      	strb	r3, [r2, r1]
 800ad5a:	e00b      	b.n	800ad74 <rcutils_repl_str+0x140>
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f8d9 3000 	ldr.w	r3, [r9]
 800ad62:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ad66:	3001      	adds	r0, #1
 800ad68:	4798      	blx	r3
 800ad6a:	9003      	str	r0, [sp, #12]
 800ad6c:	b110      	cbz	r0, 800ad74 <rcutils_repl_str+0x140>
 800ad6e:	9901      	ldr	r1, [sp, #4]
 800ad70:	f00a fb7b 	bl	801546a <strcpy>
 800ad74:	4638      	mov	r0, r7
 800ad76:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ad7a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ad7e:	4798      	blx	r3
 800ad80:	9803      	ldr	r0, [sp, #12]
 800ad82:	b007      	add	sp, #28
 800ad84:	ecbd 8b02 	vpop	{d8}
 800ad88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8c:	4647      	mov	r7, r8
 800ad8e:	2300      	movs	r3, #0
 800ad90:	9303      	str	r3, [sp, #12]
 800ad92:	e7ef      	b.n	800ad74 <rcutils_repl_str+0x140>
 800ad94:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800ad98:	e7db      	b.n	800ad52 <rcutils_repl_str+0x11e>
 800ad9a:	bf00      	nop

0800ad9c <rcutils_snprintf>:
 800ad9c:	b40c      	push	{r2, r3}
 800ad9e:	b530      	push	{r4, r5, lr}
 800ada0:	b083      	sub	sp, #12
 800ada2:	ab06      	add	r3, sp, #24
 800ada4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada8:	9301      	str	r3, [sp, #4]
 800adaa:	b152      	cbz	r2, 800adc2 <rcutils_snprintf+0x26>
 800adac:	b138      	cbz	r0, 800adbe <rcutils_snprintf+0x22>
 800adae:	b141      	cbz	r1, 800adc2 <rcutils_snprintf+0x26>
 800adb0:	f00a f9cc 	bl	801514c <vsniprintf>
 800adb4:	b003      	add	sp, #12
 800adb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adba:	b002      	add	sp, #8
 800adbc:	4770      	bx	lr
 800adbe:	2900      	cmp	r1, #0
 800adc0:	d0f6      	beq.n	800adb0 <rcutils_snprintf+0x14>
 800adc2:	f00a fb25 	bl	8015410 <__errno>
 800adc6:	2316      	movs	r3, #22
 800adc8:	6003      	str	r3, [r0, #0]
 800adca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adce:	e7f1      	b.n	800adb4 <rcutils_snprintf+0x18>

0800add0 <rcutils_vsnprintf>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	b13a      	cbz	r2, 800ade4 <rcutils_vsnprintf+0x14>
 800add4:	b120      	cbz	r0, 800ade0 <rcutils_vsnprintf+0x10>
 800add6:	b129      	cbz	r1, 800ade4 <rcutils_vsnprintf+0x14>
 800add8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800addc:	f00a b9b6 	b.w	801514c <vsniprintf>
 800ade0:	2900      	cmp	r1, #0
 800ade2:	d0f9      	beq.n	800add8 <rcutils_vsnprintf+0x8>
 800ade4:	f00a fb14 	bl	8015410 <__errno>
 800ade8:	2316      	movs	r3, #22
 800adea:	6003      	str	r3, [r0, #0]
 800adec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adf0:	bd70      	pop	{r4, r5, r6, pc}
 800adf2:	bf00      	nop

0800adf4 <rcutils_strdup>:
 800adf4:	b084      	sub	sp, #16
 800adf6:	b570      	push	{r4, r5, r6, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	ac07      	add	r4, sp, #28
 800adfc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800ae00:	4605      	mov	r5, r0
 800ae02:	b1b0      	cbz	r0, 800ae32 <rcutils_strdup+0x3e>
 800ae04:	f7f5 f9f6 	bl	80001f4 <strlen>
 800ae08:	1c42      	adds	r2, r0, #1
 800ae0a:	9b07      	ldr	r3, [sp, #28]
 800ae0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae0e:	9201      	str	r2, [sp, #4]
 800ae10:	4606      	mov	r6, r0
 800ae12:	4610      	mov	r0, r2
 800ae14:	4798      	blx	r3
 800ae16:	4604      	mov	r4, r0
 800ae18:	b128      	cbz	r0, 800ae26 <rcutils_strdup+0x32>
 800ae1a:	9a01      	ldr	r2, [sp, #4]
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	f00a fb2c 	bl	801547a <memcpy>
 800ae22:	2300      	movs	r3, #0
 800ae24:	55a3      	strb	r3, [r4, r6]
 800ae26:	4620      	mov	r0, r4
 800ae28:	b002      	add	sp, #8
 800ae2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae2e:	b004      	add	sp, #16
 800ae30:	4770      	bx	lr
 800ae32:	4604      	mov	r4, r0
 800ae34:	e7f7      	b.n	800ae26 <rcutils_strdup+0x32>
 800ae36:	bf00      	nop

0800ae38 <rcutils_strndup>:
 800ae38:	b082      	sub	sp, #8
 800ae3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3c:	ac06      	add	r4, sp, #24
 800ae3e:	e884 000c 	stmia.w	r4, {r2, r3}
 800ae42:	4605      	mov	r5, r0
 800ae44:	b188      	cbz	r0, 800ae6a <rcutils_strndup+0x32>
 800ae46:	1c4f      	adds	r7, r1, #1
 800ae48:	460e      	mov	r6, r1
 800ae4a:	4638      	mov	r0, r7
 800ae4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae4e:	4790      	blx	r2
 800ae50:	4604      	mov	r4, r0
 800ae52:	b128      	cbz	r0, 800ae60 <rcutils_strndup+0x28>
 800ae54:	463a      	mov	r2, r7
 800ae56:	4629      	mov	r1, r5
 800ae58:	f00a fb0f 	bl	801547a <memcpy>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	55a3      	strb	r3, [r4, r6]
 800ae60:	4620      	mov	r0, r4
 800ae62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae66:	b002      	add	sp, #8
 800ae68:	4770      	bx	lr
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	e7f8      	b.n	800ae60 <rcutils_strndup+0x28>
 800ae6e:	bf00      	nop

0800ae70 <rcutils_system_time_now>:
 800ae70:	b308      	cbz	r0, 800aeb6 <rcutils_system_time_now+0x46>
 800ae72:	b570      	push	{r4, r5, r6, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	4604      	mov	r4, r0
 800ae78:	4669      	mov	r1, sp
 800ae7a:	2001      	movs	r0, #1
 800ae7c:	f7f6 fa9c 	bl	80013b8 <clock_gettime>
 800ae80:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ae84:	2d00      	cmp	r5, #0
 800ae86:	db13      	blt.n	800aeb0 <rcutils_system_time_now+0x40>
 800ae88:	9902      	ldr	r1, [sp, #8]
 800ae8a:	2900      	cmp	r1, #0
 800ae8c:	db0d      	blt.n	800aeaa <rcutils_system_time_now+0x3a>
 800ae8e:	4e0b      	ldr	r6, [pc, #44]	; (800aebc <rcutils_system_time_now+0x4c>)
 800ae90:	fba3 3206 	umull	r3, r2, r3, r6
 800ae94:	185b      	adds	r3, r3, r1
 800ae96:	fb06 2205 	mla	r2, r6, r5, r2
 800ae9a:	f04f 0000 	mov.w	r0, #0
 800ae9e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800aea2:	e9c4 3200 	strd	r3, r2, [r4]
 800aea6:	b004      	add	sp, #16
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	ea53 0205 	orrs.w	r2, r3, r5
 800aeae:	d1ee      	bne.n	800ae8e <rcutils_system_time_now+0x1e>
 800aeb0:	2002      	movs	r0, #2
 800aeb2:	b004      	add	sp, #16
 800aeb4:	bd70      	pop	{r4, r5, r6, pc}
 800aeb6:	200b      	movs	r0, #11
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	3b9aca00 	.word	0x3b9aca00

0800aec0 <rcutils_steady_time_now>:
 800aec0:	b308      	cbz	r0, 800af06 <rcutils_steady_time_now+0x46>
 800aec2:	b570      	push	{r4, r5, r6, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	4604      	mov	r4, r0
 800aec8:	4669      	mov	r1, sp
 800aeca:	2000      	movs	r0, #0
 800aecc:	f7f6 fa74 	bl	80013b8 <clock_gettime>
 800aed0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800aed4:	2d00      	cmp	r5, #0
 800aed6:	db13      	blt.n	800af00 <rcutils_steady_time_now+0x40>
 800aed8:	9902      	ldr	r1, [sp, #8]
 800aeda:	2900      	cmp	r1, #0
 800aedc:	db0d      	blt.n	800aefa <rcutils_steady_time_now+0x3a>
 800aede:	4e0b      	ldr	r6, [pc, #44]	; (800af0c <rcutils_steady_time_now+0x4c>)
 800aee0:	fba3 3206 	umull	r3, r2, r3, r6
 800aee4:	185b      	adds	r3, r3, r1
 800aee6:	fb06 2205 	mla	r2, r6, r5, r2
 800aeea:	f04f 0000 	mov.w	r0, #0
 800aeee:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800aef2:	e9c4 3200 	strd	r3, r2, [r4]
 800aef6:	b004      	add	sp, #16
 800aef8:	bd70      	pop	{r4, r5, r6, pc}
 800aefa:	ea53 0205 	orrs.w	r2, r3, r5
 800aefe:	d1ee      	bne.n	800aede <rcutils_steady_time_now+0x1e>
 800af00:	2002      	movs	r0, #2
 800af02:	b004      	add	sp, #16
 800af04:	bd70      	pop	{r4, r5, r6, pc}
 800af06:	200b      	movs	r0, #11
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	3b9aca00 	.word	0x3b9aca00

0800af10 <rmw_get_default_publisher_options>:
 800af10:	2200      	movs	r2, #0
 800af12:	6002      	str	r2, [r0, #0]
 800af14:	7102      	strb	r2, [r0, #4]
 800af16:	4770      	bx	lr

0800af18 <rmw_subscription_content_filter_options_fini>:
 800af18:	b1b0      	cbz	r0, 800af48 <rmw_subscription_content_filter_options_fini+0x30>
 800af1a:	b538      	push	{r3, r4, r5, lr}
 800af1c:	4604      	mov	r4, r0
 800af1e:	4608      	mov	r0, r1
 800af20:	460d      	mov	r5, r1
 800af22:	f7ff fdf5 	bl	800ab10 <rcutils_allocator_is_valid>
 800af26:	b168      	cbz	r0, 800af44 <rmw_subscription_content_filter_options_fini+0x2c>
 800af28:	6820      	ldr	r0, [r4, #0]
 800af2a:	b120      	cbz	r0, 800af36 <rmw_subscription_content_filter_options_fini+0x1e>
 800af2c:	686b      	ldr	r3, [r5, #4]
 800af2e:	6929      	ldr	r1, [r5, #16]
 800af30:	4798      	blx	r3
 800af32:	2300      	movs	r3, #0
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	1d20      	adds	r0, r4, #4
 800af38:	f006 fc56 	bl	80117e8 <rcutils_string_array_fini>
 800af3c:	3800      	subs	r0, #0
 800af3e:	bf18      	it	ne
 800af40:	2001      	movne	r0, #1
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	200b      	movs	r0, #11
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	200b      	movs	r0, #11
 800af4a:	4770      	bx	lr

0800af4c <rmw_get_default_subscription_options>:
 800af4c:	2200      	movs	r2, #0
 800af4e:	e9c0 2200 	strd	r2, r2, [r0]
 800af52:	6082      	str	r2, [r0, #8]
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop

0800af58 <rmw_get_zero_initialized_message_info>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	2240      	movs	r2, #64	; 0x40
 800af5c:	4604      	mov	r4, r0
 800af5e:	2100      	movs	r1, #0
 800af60:	f00a f9c2 	bl	80152e8 <memset>
 800af64:	4620      	mov	r0, r4
 800af66:	bd10      	pop	{r4, pc}

0800af68 <rmw_validate_namespace_with_size>:
 800af68:	b340      	cbz	r0, 800afbc <rmw_validate_namespace_with_size+0x54>
 800af6a:	b570      	push	{r4, r5, r6, lr}
 800af6c:	4614      	mov	r4, r2
 800af6e:	b0c2      	sub	sp, #264	; 0x108
 800af70:	b332      	cbz	r2, 800afc0 <rmw_validate_namespace_with_size+0x58>
 800af72:	2901      	cmp	r1, #1
 800af74:	460d      	mov	r5, r1
 800af76:	461e      	mov	r6, r3
 800af78:	d102      	bne.n	800af80 <rmw_validate_namespace_with_size+0x18>
 800af7a:	7803      	ldrb	r3, [r0, #0]
 800af7c:	2b2f      	cmp	r3, #47	; 0x2f
 800af7e:	d012      	beq.n	800afa6 <rmw_validate_namespace_with_size+0x3e>
 800af80:	aa01      	add	r2, sp, #4
 800af82:	4669      	mov	r1, sp
 800af84:	f006 fe2c 	bl	8011be0 <rmw_validate_full_topic_name>
 800af88:	b978      	cbnz	r0, 800afaa <rmw_validate_namespace_with_size+0x42>
 800af8a:	9b00      	ldr	r3, [sp, #0]
 800af8c:	b14b      	cbz	r3, 800afa2 <rmw_validate_namespace_with_size+0x3a>
 800af8e:	2b07      	cmp	r3, #7
 800af90:	d007      	beq.n	800afa2 <rmw_validate_namespace_with_size+0x3a>
 800af92:	1e5a      	subs	r2, r3, #1
 800af94:	2a05      	cmp	r2, #5
 800af96:	d82b      	bhi.n	800aff0 <rmw_validate_namespace_with_size+0x88>
 800af98:	e8df f002 	tbb	[pc, r2]
 800af9c:	1e212427 	.word	0x1e212427
 800afa0:	141b      	.short	0x141b
 800afa2:	2df5      	cmp	r5, #245	; 0xf5
 800afa4:	d803      	bhi.n	800afae <rmw_validate_namespace_with_size+0x46>
 800afa6:	2000      	movs	r0, #0
 800afa8:	6020      	str	r0, [r4, #0]
 800afaa:	b042      	add	sp, #264	; 0x108
 800afac:	bd70      	pop	{r4, r5, r6, pc}
 800afae:	2307      	movs	r3, #7
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	2e00      	cmp	r6, #0
 800afb4:	d0f9      	beq.n	800afaa <rmw_validate_namespace_with_size+0x42>
 800afb6:	23f4      	movs	r3, #244	; 0xf4
 800afb8:	6033      	str	r3, [r6, #0]
 800afba:	e7f6      	b.n	800afaa <rmw_validate_namespace_with_size+0x42>
 800afbc:	200b      	movs	r0, #11
 800afbe:	4770      	bx	lr
 800afc0:	200b      	movs	r0, #11
 800afc2:	e7f2      	b.n	800afaa <rmw_validate_namespace_with_size+0x42>
 800afc4:	2306      	movs	r3, #6
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	2e00      	cmp	r6, #0
 800afca:	d0ee      	beq.n	800afaa <rmw_validate_namespace_with_size+0x42>
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	6033      	str	r3, [r6, #0]
 800afd0:	e7eb      	b.n	800afaa <rmw_validate_namespace_with_size+0x42>
 800afd2:	2305      	movs	r3, #5
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	e7f7      	b.n	800afc8 <rmw_validate_namespace_with_size+0x60>
 800afd8:	2304      	movs	r3, #4
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	e7f4      	b.n	800afc8 <rmw_validate_namespace_with_size+0x60>
 800afde:	2303      	movs	r3, #3
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	e7f1      	b.n	800afc8 <rmw_validate_namespace_with_size+0x60>
 800afe4:	2302      	movs	r3, #2
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	e7ee      	b.n	800afc8 <rmw_validate_namespace_with_size+0x60>
 800afea:	2301      	movs	r3, #1
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	e7eb      	b.n	800afc8 <rmw_validate_namespace_with_size+0x60>
 800aff0:	4a03      	ldr	r2, [pc, #12]	; (800b000 <rmw_validate_namespace_with_size+0x98>)
 800aff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aff6:	a802      	add	r0, sp, #8
 800aff8:	f7ff fed0 	bl	800ad9c <rcutils_snprintf>
 800affc:	2001      	movs	r0, #1
 800affe:	e7d4      	b.n	800afaa <rmw_validate_namespace_with_size+0x42>
 800b000:	08016678 	.word	0x08016678

0800b004 <rmw_validate_namespace>:
 800b004:	b168      	cbz	r0, 800b022 <rmw_validate_namespace+0x1e>
 800b006:	b570      	push	{r4, r5, r6, lr}
 800b008:	460d      	mov	r5, r1
 800b00a:	4616      	mov	r6, r2
 800b00c:	4604      	mov	r4, r0
 800b00e:	f7f5 f8f1 	bl	80001f4 <strlen>
 800b012:	4633      	mov	r3, r6
 800b014:	4601      	mov	r1, r0
 800b016:	462a      	mov	r2, r5
 800b018:	4620      	mov	r0, r4
 800b01a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b01e:	f7ff bfa3 	b.w	800af68 <rmw_validate_namespace_with_size>
 800b022:	200b      	movs	r0, #11
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop

0800b028 <rmw_namespace_validation_result_string>:
 800b028:	2807      	cmp	r0, #7
 800b02a:	bf9a      	itte	ls
 800b02c:	4b02      	ldrls	r3, [pc, #8]	; (800b038 <rmw_namespace_validation_result_string+0x10>)
 800b02e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b032:	4802      	ldrhi	r0, [pc, #8]	; (800b03c <rmw_namespace_validation_result_string+0x14>)
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	08016870 	.word	0x08016870
 800b03c:	080166c8 	.word	0x080166c8

0800b040 <rmw_validate_node_name>:
 800b040:	2800      	cmp	r0, #0
 800b042:	d03b      	beq.n	800b0bc <rmw_validate_node_name+0x7c>
 800b044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b048:	460d      	mov	r5, r1
 800b04a:	2900      	cmp	r1, #0
 800b04c:	d038      	beq.n	800b0c0 <rmw_validate_node_name+0x80>
 800b04e:	4616      	mov	r6, r2
 800b050:	4604      	mov	r4, r0
 800b052:	f7f5 f8cf 	bl	80001f4 <strlen>
 800b056:	b1e0      	cbz	r0, 800b092 <rmw_validate_node_name+0x52>
 800b058:	1e63      	subs	r3, r4, #1
 800b05a:	eb03 0800 	add.w	r8, r3, r0
 800b05e:	f1c4 0101 	rsb	r1, r4, #1
 800b062:	18cf      	adds	r7, r1, r3
 800b064:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800b068:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800b06c:	f02e 0c20 	bic.w	ip, lr, #32
 800b070:	2a09      	cmp	r2, #9
 800b072:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800b076:	d914      	bls.n	800b0a2 <rmw_validate_node_name+0x62>
 800b078:	f1bc 0f19 	cmp.w	ip, #25
 800b07c:	d911      	bls.n	800b0a2 <rmw_validate_node_name+0x62>
 800b07e:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800b082:	d00e      	beq.n	800b0a2 <rmw_validate_node_name+0x62>
 800b084:	2302      	movs	r3, #2
 800b086:	602b      	str	r3, [r5, #0]
 800b088:	b106      	cbz	r6, 800b08c <rmw_validate_node_name+0x4c>
 800b08a:	6037      	str	r7, [r6, #0]
 800b08c:	2000      	movs	r0, #0
 800b08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b092:	2301      	movs	r3, #1
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	2e00      	cmp	r6, #0
 800b098:	d0f8      	beq.n	800b08c <rmw_validate_node_name+0x4c>
 800b09a:	2000      	movs	r0, #0
 800b09c:	6030      	str	r0, [r6, #0]
 800b09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a2:	4543      	cmp	r3, r8
 800b0a4:	d1dd      	bne.n	800b062 <rmw_validate_node_name+0x22>
 800b0a6:	7822      	ldrb	r2, [r4, #0]
 800b0a8:	4b0d      	ldr	r3, [pc, #52]	; (800b0e0 <rmw_validate_node_name+0xa0>)
 800b0aa:	5cd3      	ldrb	r3, [r2, r3]
 800b0ac:	f013 0304 	ands.w	r3, r3, #4
 800b0b0:	d110      	bne.n	800b0d4 <rmw_validate_node_name+0x94>
 800b0b2:	28ff      	cmp	r0, #255	; 0xff
 800b0b4:	d806      	bhi.n	800b0c4 <rmw_validate_node_name+0x84>
 800b0b6:	602b      	str	r3, [r5, #0]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	e7e8      	b.n	800b08e <rmw_validate_node_name+0x4e>
 800b0bc:	200b      	movs	r0, #11
 800b0be:	4770      	bx	lr
 800b0c0:	200b      	movs	r0, #11
 800b0c2:	e7e4      	b.n	800b08e <rmw_validate_node_name+0x4e>
 800b0c4:	2204      	movs	r2, #4
 800b0c6:	602a      	str	r2, [r5, #0]
 800b0c8:	2e00      	cmp	r6, #0
 800b0ca:	d0df      	beq.n	800b08c <rmw_validate_node_name+0x4c>
 800b0cc:	22fe      	movs	r2, #254	; 0xfe
 800b0ce:	6032      	str	r2, [r6, #0]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	e7dc      	b.n	800b08e <rmw_validate_node_name+0x4e>
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	602b      	str	r3, [r5, #0]
 800b0d8:	2e00      	cmp	r6, #0
 800b0da:	d1de      	bne.n	800b09a <rmw_validate_node_name+0x5a>
 800b0dc:	e7d6      	b.n	800b08c <rmw_validate_node_name+0x4c>
 800b0de:	bf00      	nop
 800b0e0:	0801708e 	.word	0x0801708e

0800b0e4 <rmw_node_name_validation_result_string>:
 800b0e4:	2804      	cmp	r0, #4
 800b0e6:	bf9a      	itte	ls
 800b0e8:	4b02      	ldrls	r3, [pc, #8]	; (800b0f4 <rmw_node_name_validation_result_string+0x10>)
 800b0ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b0ee:	4802      	ldrhi	r0, [pc, #8]	; (800b0f8 <rmw_node_name_validation_result_string+0x14>)
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	0801697c 	.word	0x0801697c
 800b0f8:	08016890 	.word	0x08016890

0800b0fc <rmw_uros_set_custom_transport>:
 800b0fc:	b470      	push	{r4, r5, r6}
 800b0fe:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b102:	b162      	cbz	r2, 800b11e <rmw_uros_set_custom_transport+0x22>
 800b104:	b15b      	cbz	r3, 800b11e <rmw_uros_set_custom_transport+0x22>
 800b106:	b155      	cbz	r5, 800b11e <rmw_uros_set_custom_transport+0x22>
 800b108:	b14e      	cbz	r6, 800b11e <rmw_uros_set_custom_transport+0x22>
 800b10a:	4c06      	ldr	r4, [pc, #24]	; (800b124 <rmw_uros_set_custom_transport+0x28>)
 800b10c:	7020      	strb	r0, [r4, #0]
 800b10e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b112:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b116:	6166      	str	r6, [r4, #20]
 800b118:	2000      	movs	r0, #0
 800b11a:	bc70      	pop	{r4, r5, r6}
 800b11c:	4770      	bx	lr
 800b11e:	200b      	movs	r0, #11
 800b120:	bc70      	pop	{r4, r5, r6}
 800b122:	4770      	bx	lr
 800b124:	200092ac 	.word	0x200092ac

0800b128 <create_node>:
 800b128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b12c:	b083      	sub	sp, #12
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d05f      	beq.n	800b1f2 <create_node+0xca>
 800b132:	4606      	mov	r6, r0
 800b134:	4835      	ldr	r0, [pc, #212]	; (800b20c <create_node+0xe4>)
 800b136:	460f      	mov	r7, r1
 800b138:	4690      	mov	r8, r2
 800b13a:	461d      	mov	r5, r3
 800b13c:	f006 fdc6 	bl	8011ccc <get_memory>
 800b140:	2800      	cmp	r0, #0
 800b142:	d056      	beq.n	800b1f2 <create_node+0xca>
 800b144:	6884      	ldr	r4, [r0, #8]
 800b146:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b148:	6123      	str	r3, [r4, #16]
 800b14a:	f006 fe27 	bl	8011d9c <rmw_get_implementation_identifier>
 800b14e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800b152:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b156:	f8c4 9020 	str.w	r9, [r4, #32]
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7f5 f84a 	bl	80001f4 <strlen>
 800b160:	1c42      	adds	r2, r0, #1
 800b162:	2a3c      	cmp	r2, #60	; 0x3c
 800b164:	f104 0518 	add.w	r5, r4, #24
 800b168:	d840      	bhi.n	800b1ec <create_node+0xc4>
 800b16a:	4648      	mov	r0, r9
 800b16c:	4631      	mov	r1, r6
 800b16e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800b172:	f00a f982 	bl	801547a <memcpy>
 800b176:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800b17a:	4638      	mov	r0, r7
 800b17c:	f7f5 f83a 	bl	80001f4 <strlen>
 800b180:	1c42      	adds	r2, r0, #1
 800b182:	2a3c      	cmp	r2, #60	; 0x3c
 800b184:	d832      	bhi.n	800b1ec <create_node+0xc4>
 800b186:	4639      	mov	r1, r7
 800b188:	4648      	mov	r0, r9
 800b18a:	f00a f976 	bl	801547a <memcpy>
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b194:	2101      	movs	r1, #1
 800b196:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800b19a:	1842      	adds	r2, r0, r1
 800b19c:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800b1a0:	f001 fac0 	bl	800c724 <uxr_object_id>
 800b1a4:	6160      	str	r0, [r4, #20]
 800b1a6:	783b      	ldrb	r3, [r7, #0]
 800b1a8:	2b2f      	cmp	r3, #47	; 0x2f
 800b1aa:	d127      	bne.n	800b1fc <create_node+0xd4>
 800b1ac:	787b      	ldrb	r3, [r7, #1]
 800b1ae:	bb2b      	cbnz	r3, 800b1fc <create_node+0xd4>
 800b1b0:	4a17      	ldr	r2, [pc, #92]	; (800b210 <create_node+0xe8>)
 800b1b2:	4818      	ldr	r0, [pc, #96]	; (800b214 <create_node+0xec>)
 800b1b4:	4633      	mov	r3, r6
 800b1b6:	213c      	movs	r1, #60	; 0x3c
 800b1b8:	f009 ff26 	bl	8015008 <sniprintf>
 800b1bc:	6920      	ldr	r0, [r4, #16]
 800b1be:	4915      	ldr	r1, [pc, #84]	; (800b214 <create_node+0xec>)
 800b1c0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800b1c4:	9100      	str	r1, [sp, #0]
 800b1c6:	2106      	movs	r1, #6
 800b1c8:	9101      	str	r1, [sp, #4]
 800b1ca:	6811      	ldr	r1, [r2, #0]
 800b1cc:	6962      	ldr	r2, [r4, #20]
 800b1ce:	fa1f f388 	uxth.w	r3, r8
 800b1d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b1d6:	f001 f8ef 	bl	800c3b8 <uxr_buffer_create_participant_bin>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	6920      	ldr	r0, [r4, #16]
 800b1de:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b1e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b1e6:	f000 feb5 	bl	800bf54 <run_xrce_session>
 800b1ea:	b918      	cbnz	r0, 800b1f4 <create_node+0xcc>
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f000 fd3f 	bl	800bc70 <rmw_uxrce_fini_node_memory>
 800b1f2:	2500      	movs	r5, #0
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	b003      	add	sp, #12
 800b1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1fc:	4a06      	ldr	r2, [pc, #24]	; (800b218 <create_node+0xf0>)
 800b1fe:	9600      	str	r6, [sp, #0]
 800b200:	463b      	mov	r3, r7
 800b202:	213c      	movs	r1, #60	; 0x3c
 800b204:	4803      	ldr	r0, [pc, #12]	; (800b214 <create_node+0xec>)
 800b206:	f009 feff 	bl	8015008 <sniprintf>
 800b20a:	e7d7      	b.n	800b1bc <create_node+0x94>
 800b20c:	2000dbd4 	.word	0x2000dbd4
 800b210:	080169a0 	.word	0x080169a0
 800b214:	200092c8 	.word	0x200092c8
 800b218:	080163f0 	.word	0x080163f0

0800b21c <rmw_create_node>:
 800b21c:	b199      	cbz	r1, 800b246 <rmw_create_node+0x2a>
 800b21e:	780b      	ldrb	r3, [r1, #0]
 800b220:	468c      	mov	ip, r1
 800b222:	b183      	cbz	r3, 800b246 <rmw_create_node+0x2a>
 800b224:	b410      	push	{r4}
 800b226:	4614      	mov	r4, r2
 800b228:	b14a      	cbz	r2, 800b23e <rmw_create_node+0x22>
 800b22a:	7813      	ldrb	r3, [r2, #0]
 800b22c:	b13b      	cbz	r3, 800b23e <rmw_create_node+0x22>
 800b22e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800b230:	4603      	mov	r3, r0
 800b232:	4621      	mov	r1, r4
 800b234:	4660      	mov	r0, ip
 800b236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b23a:	f7ff bf75 	b.w	800b128 <create_node>
 800b23e:	2000      	movs	r0, #0
 800b240:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	2000      	movs	r0, #0
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop

0800b24c <rmw_destroy_node>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	b328      	cbz	r0, 800b29c <rmw_destroy_node+0x50>
 800b250:	4607      	mov	r7, r0
 800b252:	6800      	ldr	r0, [r0, #0]
 800b254:	b120      	cbz	r0, 800b260 <rmw_destroy_node+0x14>
 800b256:	4b36      	ldr	r3, [pc, #216]	; (800b330 <rmw_destroy_node+0xe4>)
 800b258:	6819      	ldr	r1, [r3, #0]
 800b25a:	f7f4 ffc1 	bl	80001e0 <strcmp>
 800b25e:	b9e8      	cbnz	r0, 800b29c <rmw_destroy_node+0x50>
 800b260:	687d      	ldr	r5, [r7, #4]
 800b262:	b1dd      	cbz	r5, 800b29c <rmw_destroy_node+0x50>
 800b264:	4b33      	ldr	r3, [pc, #204]	; (800b334 <rmw_destroy_node+0xe8>)
 800b266:	681c      	ldr	r4, [r3, #0]
 800b268:	2c00      	cmp	r4, #0
 800b26a:	d05f      	beq.n	800b32c <rmw_destroy_node+0xe0>
 800b26c:	2600      	movs	r6, #0
 800b26e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b272:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800b276:	429d      	cmp	r5, r3
 800b278:	d013      	beq.n	800b2a2 <rmw_destroy_node+0x56>
 800b27a:	2c00      	cmp	r4, #0
 800b27c:	d1f7      	bne.n	800b26e <rmw_destroy_node+0x22>
 800b27e:	4b2e      	ldr	r3, [pc, #184]	; (800b338 <rmw_destroy_node+0xec>)
 800b280:	681c      	ldr	r4, [r3, #0]
 800b282:	b1c4      	cbz	r4, 800b2b6 <rmw_destroy_node+0x6a>
 800b284:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b288:	6a0b      	ldr	r3, [r1, #32]
 800b28a:	429d      	cmp	r5, r3
 800b28c:	d1f9      	bne.n	800b282 <rmw_destroy_node+0x36>
 800b28e:	317c      	adds	r1, #124	; 0x7c
 800b290:	4638      	mov	r0, r7
 800b292:	f000 fad3 	bl	800b83c <rmw_destroy_subscription>
 800b296:	2801      	cmp	r0, #1
 800b298:	4606      	mov	r6, r0
 800b29a:	d1f2      	bne.n	800b282 <rmw_destroy_node+0x36>
 800b29c:	2601      	movs	r6, #1
 800b29e:	4630      	mov	r0, r6
 800b2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a2:	3184      	adds	r1, #132	; 0x84
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f000 f941 	bl	800b52c <rmw_destroy_publisher>
 800b2aa:	2801      	cmp	r0, #1
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	d0f5      	beq.n	800b29c <rmw_destroy_node+0x50>
 800b2b0:	2c00      	cmp	r4, #0
 800b2b2:	d1dc      	bne.n	800b26e <rmw_destroy_node+0x22>
 800b2b4:	e7e3      	b.n	800b27e <rmw_destroy_node+0x32>
 800b2b6:	4b21      	ldr	r3, [pc, #132]	; (800b33c <rmw_destroy_node+0xf0>)
 800b2b8:	681c      	ldr	r4, [r3, #0]
 800b2ba:	b16c      	cbz	r4, 800b2d8 <rmw_destroy_node+0x8c>
 800b2bc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b2c0:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800b2c2:	429d      	cmp	r5, r3
 800b2c4:	d1f9      	bne.n	800b2ba <rmw_destroy_node+0x6e>
 800b2c6:	317c      	adds	r1, #124	; 0x7c
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	f000 f981 	bl	800b5d0 <rmw_destroy_service>
 800b2ce:	2801      	cmp	r0, #1
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	d0e3      	beq.n	800b29c <rmw_destroy_node+0x50>
 800b2d4:	2c00      	cmp	r4, #0
 800b2d6:	d1f1      	bne.n	800b2bc <rmw_destroy_node+0x70>
 800b2d8:	4b19      	ldr	r3, [pc, #100]	; (800b340 <rmw_destroy_node+0xf4>)
 800b2da:	681c      	ldr	r4, [r3, #0]
 800b2dc:	b16c      	cbz	r4, 800b2fa <rmw_destroy_node+0xae>
 800b2de:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b2e2:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800b2e4:	429d      	cmp	r5, r3
 800b2e6:	d1f9      	bne.n	800b2dc <rmw_destroy_node+0x90>
 800b2e8:	317c      	adds	r1, #124	; 0x7c
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	f006 fd12 	bl	8011d14 <rmw_destroy_client>
 800b2f0:	2801      	cmp	r0, #1
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	d0d2      	beq.n	800b29c <rmw_destroy_node+0x50>
 800b2f6:	2c00      	cmp	r4, #0
 800b2f8:	d1f1      	bne.n	800b2de <rmw_destroy_node+0x92>
 800b2fa:	6928      	ldr	r0, [r5, #16]
 800b2fc:	696a      	ldr	r2, [r5, #20]
 800b2fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b302:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b306:	6819      	ldr	r1, [r3, #0]
 800b308:	f001 f80a 	bl	800c320 <uxr_buffer_delete_entity>
 800b30c:	4602      	mov	r2, r0
 800b30e:	6928      	ldr	r0, [r5, #16]
 800b310:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b314:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b318:	f000 fe1c 	bl	800bf54 <run_xrce_session>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	bf08      	it	eq
 800b320:	2602      	moveq	r6, #2
 800b322:	4638      	mov	r0, r7
 800b324:	f000 fca4 	bl	800bc70 <rmw_uxrce_fini_node_memory>
 800b328:	4630      	mov	r0, r6
 800b32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b32c:	4626      	mov	r6, r4
 800b32e:	e7a6      	b.n	800b27e <rmw_destroy_node+0x32>
 800b330:	08016cf4 	.word	0x08016cf4
 800b334:	2000dbe4 	.word	0x2000dbe4
 800b338:	2000dc24 	.word	0x2000dc24
 800b33c:	2000dbf4 	.word	0x2000dbf4
 800b340:	20009304 	.word	0x20009304

0800b344 <rmw_node_get_graph_guard_condition>:
 800b344:	6843      	ldr	r3, [r0, #4]
 800b346:	6918      	ldr	r0, [r3, #16]
 800b348:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop

0800b350 <rmw_create_publisher>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	b087      	sub	sp, #28
 800b356:	2800      	cmp	r0, #0
 800b358:	f000 80cc 	beq.w	800b4f4 <rmw_create_publisher+0x1a4>
 800b35c:	460e      	mov	r6, r1
 800b35e:	2900      	cmp	r1, #0
 800b360:	f000 80c8 	beq.w	800b4f4 <rmw_create_publisher+0x1a4>
 800b364:	4604      	mov	r4, r0
 800b366:	6800      	ldr	r0, [r0, #0]
 800b368:	4615      	mov	r5, r2
 800b36a:	4698      	mov	r8, r3
 800b36c:	f000 fe72 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 800b370:	2800      	cmp	r0, #0
 800b372:	f000 80bf 	beq.w	800b4f4 <rmw_create_publisher+0x1a4>
 800b376:	2d00      	cmp	r5, #0
 800b378:	f000 80bc 	beq.w	800b4f4 <rmw_create_publisher+0x1a4>
 800b37c:	782b      	ldrb	r3, [r5, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f000 80b8 	beq.w	800b4f4 <rmw_create_publisher+0x1a4>
 800b384:	f1b8 0f00 	cmp.w	r8, #0
 800b388:	f000 80b4 	beq.w	800b4f4 <rmw_create_publisher+0x1a4>
 800b38c:	485c      	ldr	r0, [pc, #368]	; (800b500 <rmw_create_publisher+0x1b0>)
 800b38e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b392:	f006 fc9b 	bl	8011ccc <get_memory>
 800b396:	2800      	cmp	r0, #0
 800b398:	f000 80ac 	beq.w	800b4f4 <rmw_create_publisher+0x1a4>
 800b39c:	6884      	ldr	r4, [r0, #8]
 800b39e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800b3a2:	f006 fcfb 	bl	8011d9c <rmw_get_implementation_identifier>
 800b3a6:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800b3aa:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800b3ae:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f7f4 ff1e 	bl	80001f4 <strlen>
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	283c      	cmp	r0, #60	; 0x3c
 800b3bc:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800b3c0:	f200 8091 	bhi.w	800b4e6 <rmw_create_publisher+0x196>
 800b3c4:	4a4f      	ldr	r2, [pc, #316]	; (800b504 <rmw_create_publisher+0x1b4>)
 800b3c6:	462b      	mov	r3, r5
 800b3c8:	213c      	movs	r1, #60	; 0x3c
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	f009 fe1c 	bl	8015008 <sniprintf>
 800b3d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3d4:	67e3      	str	r3, [r4, #124]	; 0x7c
 800b3d6:	4641      	mov	r1, r8
 800b3d8:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800b3dc:	2250      	movs	r2, #80	; 0x50
 800b3de:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b3e2:	f00a f84a 	bl	801547a <memcpy>
 800b3e6:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b3ea:	4947      	ldr	r1, [pc, #284]	; (800b508 <rmw_create_publisher+0x1b8>)
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3f2:	bf0c      	ite	eq
 800b3f4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800b3f8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800b3fc:	67a3      	str	r3, [r4, #120]	; 0x78
 800b3fe:	2300      	movs	r3, #0
 800b400:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b404:	4630      	mov	r0, r6
 800b406:	f000 fe33 	bl	800c070 <get_message_typesupport_handle>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d06b      	beq.n	800b4e6 <rmw_create_publisher+0x196>
 800b40e:	6842      	ldr	r2, [r0, #4]
 800b410:	61a2      	str	r2, [r4, #24]
 800b412:	2a00      	cmp	r2, #0
 800b414:	d067      	beq.n	800b4e6 <rmw_create_publisher+0x196>
 800b416:	4629      	mov	r1, r5
 800b418:	4643      	mov	r3, r8
 800b41a:	4648      	mov	r0, r9
 800b41c:	f006 ff4c 	bl	80122b8 <create_topic>
 800b420:	6260      	str	r0, [r4, #36]	; 0x24
 800b422:	2800      	cmp	r0, #0
 800b424:	d063      	beq.n	800b4ee <rmw_create_publisher+0x19e>
 800b426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b42e:	2103      	movs	r1, #3
 800b430:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800b434:	1c42      	adds	r2, r0, #1
 800b436:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800b43a:	f001 f973 	bl	800c724 <uxr_object_id>
 800b43e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800b442:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b446:	6120      	str	r0, [r4, #16]
 800b448:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800b44c:	6910      	ldr	r0, [r2, #16]
 800b44e:	2506      	movs	r5, #6
 800b450:	9500      	str	r5, [sp, #0]
 800b452:	6819      	ldr	r1, [r3, #0]
 800b454:	6922      	ldr	r2, [r4, #16]
 800b456:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b45a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b45e:	f001 f813 	bl	800c488 <uxr_buffer_create_publisher_bin>
 800b462:	4602      	mov	r2, r0
 800b464:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b468:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b46c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b470:	f000 fd70 	bl	800bf54 <run_xrce_session>
 800b474:	b3b8      	cbz	r0, 800b4e6 <rmw_create_publisher+0x196>
 800b476:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b47e:	2105      	movs	r1, #5
 800b480:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800b484:	1c42      	adds	r2, r0, #1
 800b486:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800b48a:	f001 f94b 	bl	800c724 <uxr_object_id>
 800b48e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b492:	6160      	str	r0, [r4, #20]
 800b494:	691e      	ldr	r6, [r3, #16]
 800b496:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b49a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800b49e:	f10d 0a10 	add.w	sl, sp, #16
 800b4a2:	4641      	mov	r1, r8
 800b4a4:	4650      	mov	r0, sl
 800b4a6:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800b4aa:	f000 fd6f 	bl	800bf8c <convert_qos_profile>
 800b4ae:	9503      	str	r5, [sp, #12]
 800b4b0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b4b4:	9001      	str	r0, [sp, #4]
 800b4b6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b4ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800b4c4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b4c8:	f8d8 1000 	ldr.w	r1, [r8]
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f001 f83b 	bl	800c548 <uxr_buffer_create_datawriter_bin>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b4d8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b4dc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b4e0:	f000 fd38 	bl	800bf54 <run_xrce_session>
 800b4e4:	b938      	cbnz	r0, 800b4f6 <rmw_create_publisher+0x1a6>
 800b4e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4e8:	b108      	cbz	r0, 800b4ee <rmw_create_publisher+0x19e>
 800b4ea:	f000 fc31 	bl	800bd50 <rmw_uxrce_fini_topic_memory>
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f000 fbd6 	bl	800bca0 <rmw_uxrce_fini_publisher_memory>
 800b4f4:	2700      	movs	r7, #0
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	b007      	add	sp, #28
 800b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fe:	bf00      	nop
 800b500:	2000dbe4 	.word	0x2000dbe4
 800b504:	080169a0 	.word	0x080169a0
 800b508:	08016310 	.word	0x08016310

0800b50c <rmw_publisher_get_actual_qos>:
 800b50c:	b150      	cbz	r0, 800b524 <rmw_publisher_get_actual_qos+0x18>
 800b50e:	b508      	push	{r3, lr}
 800b510:	460b      	mov	r3, r1
 800b512:	b149      	cbz	r1, 800b528 <rmw_publisher_get_actual_qos+0x1c>
 800b514:	6841      	ldr	r1, [r0, #4]
 800b516:	2250      	movs	r2, #80	; 0x50
 800b518:	3128      	adds	r1, #40	; 0x28
 800b51a:	4618      	mov	r0, r3
 800b51c:	f009 ffad 	bl	801547a <memcpy>
 800b520:	2000      	movs	r0, #0
 800b522:	bd08      	pop	{r3, pc}
 800b524:	200b      	movs	r0, #11
 800b526:	4770      	bx	lr
 800b528:	200b      	movs	r0, #11
 800b52a:	bd08      	pop	{r3, pc}

0800b52c <rmw_destroy_publisher>:
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	b128      	cbz	r0, 800b53c <rmw_destroy_publisher+0x10>
 800b530:	4604      	mov	r4, r0
 800b532:	6800      	ldr	r0, [r0, #0]
 800b534:	460d      	mov	r5, r1
 800b536:	f000 fd8d 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 800b53a:	b910      	cbnz	r0, 800b542 <rmw_destroy_publisher+0x16>
 800b53c:	2401      	movs	r4, #1
 800b53e:	4620      	mov	r0, r4
 800b540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b542:	6863      	ldr	r3, [r4, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d0f9      	beq.n	800b53c <rmw_destroy_publisher+0x10>
 800b548:	2d00      	cmp	r5, #0
 800b54a:	d0f7      	beq.n	800b53c <rmw_destroy_publisher+0x10>
 800b54c:	6828      	ldr	r0, [r5, #0]
 800b54e:	f000 fd81 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 800b552:	2800      	cmp	r0, #0
 800b554:	d0f2      	beq.n	800b53c <rmw_destroy_publisher+0x10>
 800b556:	686c      	ldr	r4, [r5, #4]
 800b558:	2c00      	cmp	r4, #0
 800b55a:	d0ef      	beq.n	800b53c <rmw_destroy_publisher+0x10>
 800b55c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b55e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800b562:	f006 fef9 	bl	8012358 <destroy_topic>
 800b566:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b56a:	6962      	ldr	r2, [r4, #20]
 800b56c:	6918      	ldr	r0, [r3, #16]
 800b56e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b572:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b576:	6819      	ldr	r1, [r3, #0]
 800b578:	f000 fed2 	bl	800c320 <uxr_buffer_delete_entity>
 800b57c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800b588:	4604      	mov	r4, r0
 800b58a:	6809      	ldr	r1, [r1, #0]
 800b58c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b590:	f000 fec6 	bl	800c320 <uxr_buffer_delete_entity>
 800b594:	693e      	ldr	r6, [r7, #16]
 800b596:	4622      	mov	r2, r4
 800b598:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800b59c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f000 fcd6 	bl	800bf54 <run_xrce_session>
 800b5a8:	693e      	ldr	r6, [r7, #16]
 800b5aa:	4622      	mov	r2, r4
 800b5ac:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800b5b0:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f000 fccc 	bl	800bf54 <run_xrce_session>
 800b5bc:	b12c      	cbz	r4, 800b5ca <rmw_destroy_publisher+0x9e>
 800b5be:	b120      	cbz	r0, 800b5ca <rmw_destroy_publisher+0x9e>
 800b5c0:	2400      	movs	r4, #0
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	f000 fb6c 	bl	800bca0 <rmw_uxrce_fini_publisher_memory>
 800b5c8:	e7b9      	b.n	800b53e <rmw_destroy_publisher+0x12>
 800b5ca:	2402      	movs	r4, #2
 800b5cc:	e7f9      	b.n	800b5c2 <rmw_destroy_publisher+0x96>
 800b5ce:	bf00      	nop

0800b5d0 <rmw_destroy_service>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	b128      	cbz	r0, 800b5e0 <rmw_destroy_service+0x10>
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	6800      	ldr	r0, [r0, #0]
 800b5d8:	460d      	mov	r5, r1
 800b5da:	f000 fd3b 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 800b5de:	b910      	cbnz	r0, 800b5e6 <rmw_destroy_service+0x16>
 800b5e0:	2401      	movs	r4, #1
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	bd70      	pop	{r4, r5, r6, pc}
 800b5e6:	6863      	ldr	r3, [r4, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0f9      	beq.n	800b5e0 <rmw_destroy_service+0x10>
 800b5ec:	2d00      	cmp	r5, #0
 800b5ee:	d0f7      	beq.n	800b5e0 <rmw_destroy_service+0x10>
 800b5f0:	6828      	ldr	r0, [r5, #0]
 800b5f2:	f000 fd2f 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d0f2      	beq.n	800b5e0 <rmw_destroy_service+0x10>
 800b5fa:	686e      	ldr	r6, [r5, #4]
 800b5fc:	2e00      	cmp	r6, #0
 800b5fe:	d0ef      	beq.n	800b5e0 <rmw_destroy_service+0x10>
 800b600:	6864      	ldr	r4, [r4, #4]
 800b602:	6932      	ldr	r2, [r6, #16]
 800b604:	6920      	ldr	r0, [r4, #16]
 800b606:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b60a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b60e:	6819      	ldr	r1, [r3, #0]
 800b610:	f001 f8f2 	bl	800c7f8 <uxr_buffer_cancel_data>
 800b614:	4602      	mov	r2, r0
 800b616:	6920      	ldr	r0, [r4, #16]
 800b618:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b61c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b620:	f000 fc98 	bl	800bf54 <run_xrce_session>
 800b624:	6920      	ldr	r0, [r4, #16]
 800b626:	6932      	ldr	r2, [r6, #16]
 800b628:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b62c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b630:	6819      	ldr	r1, [r3, #0]
 800b632:	f000 fe75 	bl	800c320 <uxr_buffer_delete_entity>
 800b636:	4602      	mov	r2, r0
 800b638:	6920      	ldr	r0, [r4, #16]
 800b63a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b63e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b642:	f000 fc87 	bl	800bf54 <run_xrce_session>
 800b646:	2800      	cmp	r0, #0
 800b648:	4628      	mov	r0, r5
 800b64a:	bf14      	ite	ne
 800b64c:	2400      	movne	r4, #0
 800b64e:	2402      	moveq	r4, #2
 800b650:	f000 fb52 	bl	800bcf8 <rmw_uxrce_fini_service_memory>
 800b654:	e7c5      	b.n	800b5e2 <rmw_destroy_service+0x12>
 800b656:	bf00      	nop

0800b658 <rmw_create_subscription>:
 800b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	b08d      	sub	sp, #52	; 0x34
 800b65e:	2800      	cmp	r0, #0
 800b660:	f000 80d1 	beq.w	800b806 <rmw_create_subscription+0x1ae>
 800b664:	460e      	mov	r6, r1
 800b666:	2900      	cmp	r1, #0
 800b668:	f000 80cd 	beq.w	800b806 <rmw_create_subscription+0x1ae>
 800b66c:	4604      	mov	r4, r0
 800b66e:	6800      	ldr	r0, [r0, #0]
 800b670:	4615      	mov	r5, r2
 800b672:	4698      	mov	r8, r3
 800b674:	f000 fcee 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 800b678:	2800      	cmp	r0, #0
 800b67a:	f000 80c4 	beq.w	800b806 <rmw_create_subscription+0x1ae>
 800b67e:	2d00      	cmp	r5, #0
 800b680:	f000 80c1 	beq.w	800b806 <rmw_create_subscription+0x1ae>
 800b684:	782b      	ldrb	r3, [r5, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 80bd 	beq.w	800b806 <rmw_create_subscription+0x1ae>
 800b68c:	f1b8 0f00 	cmp.w	r8, #0
 800b690:	f000 80b9 	beq.w	800b806 <rmw_create_subscription+0x1ae>
 800b694:	485e      	ldr	r0, [pc, #376]	; (800b810 <rmw_create_subscription+0x1b8>)
 800b696:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b69a:	f006 fb17 	bl	8011ccc <get_memory>
 800b69e:	4604      	mov	r4, r0
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	f000 80b1 	beq.w	800b808 <rmw_create_subscription+0x1b0>
 800b6a6:	6887      	ldr	r7, [r0, #8]
 800b6a8:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800b6ac:	f006 fb76 	bl	8011d9c <rmw_get_implementation_identifier>
 800b6b0:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 800b6b4:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b6b6:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f7f4 fd9a 	bl	80001f4 <strlen>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	283c      	cmp	r0, #60	; 0x3c
 800b6c4:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800b6c8:	f200 8096 	bhi.w	800b7f8 <rmw_create_subscription+0x1a0>
 800b6cc:	4a51      	ldr	r2, [pc, #324]	; (800b814 <rmw_create_subscription+0x1bc>)
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	213c      	movs	r1, #60	; 0x3c
 800b6d2:	4650      	mov	r0, sl
 800b6d4:	f009 fc98 	bl	8015008 <sniprintf>
 800b6d8:	4641      	mov	r1, r8
 800b6da:	f8c7 9020 	str.w	r9, [r7, #32]
 800b6de:	2250      	movs	r2, #80	; 0x50
 800b6e0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800b6e4:	f009 fec9 	bl	801547a <memcpy>
 800b6e8:	494b      	ldr	r1, [pc, #300]	; (800b818 <rmw_create_subscription+0x1c0>)
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f000 fcc0 	bl	800c070 <get_message_typesupport_handle>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	f000 8081 	beq.w	800b7f8 <rmw_create_subscription+0x1a0>
 800b6f6:	6842      	ldr	r2, [r0, #4]
 800b6f8:	61ba      	str	r2, [r7, #24]
 800b6fa:	2a00      	cmp	r2, #0
 800b6fc:	d07c      	beq.n	800b7f8 <rmw_create_subscription+0x1a0>
 800b6fe:	4629      	mov	r1, r5
 800b700:	4643      	mov	r3, r8
 800b702:	4648      	mov	r0, r9
 800b704:	f006 fdd8 	bl	80122b8 <create_topic>
 800b708:	61f8      	str	r0, [r7, #28]
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d078      	beq.n	800b800 <rmw_create_subscription+0x1a8>
 800b70e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b716:	2104      	movs	r1, #4
 800b718:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 800b71c:	1c42      	adds	r2, r0, #1
 800b71e:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 800b722:	f000 ffff 	bl	800c724 <uxr_object_id>
 800b726:	6138      	str	r0, [r7, #16]
 800b728:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b72c:	2506      	movs	r5, #6
 800b72e:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800b732:	9500      	str	r5, [sp, #0]
 800b734:	6819      	ldr	r1, [r3, #0]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b73c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b740:	f000 fed2 	bl	800c4e8 <uxr_buffer_create_subscriber_bin>
 800b744:	4602      	mov	r2, r0
 800b746:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b74a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b74e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b752:	f000 fbff 	bl	800bf54 <run_xrce_session>
 800b756:	2800      	cmp	r0, #0
 800b758:	d04e      	beq.n	800b7f8 <rmw_create_subscription+0x1a0>
 800b75a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b75e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b762:	4629      	mov	r1, r5
 800b764:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 800b768:	1c42      	adds	r2, r0, #1
 800b76a:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 800b76e:	f000 ffd9 	bl	800c724 <uxr_object_id>
 800b772:	ae08      	add	r6, sp, #32
 800b774:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	6178      	str	r0, [r7, #20]
 800b77c:	4641      	mov	r1, r8
 800b77e:	4630      	mov	r0, r6
 800b780:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800b784:	9305      	str	r3, [sp, #20]
 800b786:	f000 fc01 	bl	800bf8c <convert_qos_profile>
 800b78a:	9503      	str	r5, [sp, #12]
 800b78c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b790:	9b05      	ldr	r3, [sp, #20]
 800b792:	9001      	str	r0, [sp, #4]
 800b794:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800b7a0:	f8db 1000 	ldr.w	r1, [fp]
 800b7a4:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800b7a8:	f000 ff44 	bl	800c634 <uxr_buffer_create_datareader_bin>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b7b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b7b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b7ba:	f000 fbcb 	bl	800bf54 <run_xrce_session>
 800b7be:	b1d8      	cbz	r0, 800b7f8 <rmw_create_subscription+0x1a0>
 800b7c0:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b7c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	bf0c      	ite	eq
 800b7cc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800b7d0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800b7d4:	9307      	str	r3, [sp, #28]
 800b7d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b7da:	2200      	movs	r2, #0
 800b7dc:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800b7e0:	ab0a      	add	r3, sp, #40	; 0x28
 800b7e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	9b07      	ldr	r3, [sp, #28]
 800b7ec:	6809      	ldr	r1, [r1, #0]
 800b7ee:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b7f2:	f000 ffc7 	bl	800c784 <uxr_buffer_request_data>
 800b7f6:	e007      	b.n	800b808 <rmw_create_subscription+0x1b0>
 800b7f8:	69f8      	ldr	r0, [r7, #28]
 800b7fa:	b108      	cbz	r0, 800b800 <rmw_create_subscription+0x1a8>
 800b7fc:	f000 faa8 	bl	800bd50 <rmw_uxrce_fini_topic_memory>
 800b800:	4620      	mov	r0, r4
 800b802:	f000 fa63 	bl	800bccc <rmw_uxrce_fini_subscription_memory>
 800b806:	2400      	movs	r4, #0
 800b808:	4620      	mov	r0, r4
 800b80a:	b00d      	add	sp, #52	; 0x34
 800b80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b810:	2000dc24 	.word	0x2000dc24
 800b814:	080169a0 	.word	0x080169a0
 800b818:	08016310 	.word	0x08016310

0800b81c <rmw_subscription_get_actual_qos>:
 800b81c:	b150      	cbz	r0, 800b834 <rmw_subscription_get_actual_qos+0x18>
 800b81e:	b508      	push	{r3, lr}
 800b820:	460b      	mov	r3, r1
 800b822:	b149      	cbz	r1, 800b838 <rmw_subscription_get_actual_qos+0x1c>
 800b824:	6841      	ldr	r1, [r0, #4]
 800b826:	2250      	movs	r2, #80	; 0x50
 800b828:	3128      	adds	r1, #40	; 0x28
 800b82a:	4618      	mov	r0, r3
 800b82c:	f009 fe25 	bl	801547a <memcpy>
 800b830:	2000      	movs	r0, #0
 800b832:	bd08      	pop	{r3, pc}
 800b834:	200b      	movs	r0, #11
 800b836:	4770      	bx	lr
 800b838:	200b      	movs	r0, #11
 800b83a:	bd08      	pop	{r3, pc}

0800b83c <rmw_destroy_subscription>:
 800b83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83e:	b128      	cbz	r0, 800b84c <rmw_destroy_subscription+0x10>
 800b840:	4604      	mov	r4, r0
 800b842:	6800      	ldr	r0, [r0, #0]
 800b844:	460d      	mov	r5, r1
 800b846:	f000 fc05 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 800b84a:	b910      	cbnz	r0, 800b852 <rmw_destroy_subscription+0x16>
 800b84c:	2401      	movs	r4, #1
 800b84e:	4620      	mov	r0, r4
 800b850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b852:	6863      	ldr	r3, [r4, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d0f9      	beq.n	800b84c <rmw_destroy_subscription+0x10>
 800b858:	2d00      	cmp	r5, #0
 800b85a:	d0f7      	beq.n	800b84c <rmw_destroy_subscription+0x10>
 800b85c:	6828      	ldr	r0, [r5, #0]
 800b85e:	f000 fbf9 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 800b862:	2800      	cmp	r0, #0
 800b864:	d0f2      	beq.n	800b84c <rmw_destroy_subscription+0x10>
 800b866:	686c      	ldr	r4, [r5, #4]
 800b868:	2c00      	cmp	r4, #0
 800b86a:	d0ef      	beq.n	800b84c <rmw_destroy_subscription+0x10>
 800b86c:	6a26      	ldr	r6, [r4, #32]
 800b86e:	6962      	ldr	r2, [r4, #20]
 800b870:	6930      	ldr	r0, [r6, #16]
 800b872:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b876:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b87a:	6819      	ldr	r1, [r3, #0]
 800b87c:	f000 ffbc 	bl	800c7f8 <uxr_buffer_cancel_data>
 800b880:	4602      	mov	r2, r0
 800b882:	6930      	ldr	r0, [r6, #16]
 800b884:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b888:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b88c:	f000 fb62 	bl	800bf54 <run_xrce_session>
 800b890:	69e0      	ldr	r0, [r4, #28]
 800b892:	f006 fd61 	bl	8012358 <destroy_topic>
 800b896:	6a23      	ldr	r3, [r4, #32]
 800b898:	6962      	ldr	r2, [r4, #20]
 800b89a:	6918      	ldr	r0, [r3, #16]
 800b89c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b8a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b8a4:	6819      	ldr	r1, [r3, #0]
 800b8a6:	f000 fd3b 	bl	800c320 <uxr_buffer_delete_entity>
 800b8aa:	6a23      	ldr	r3, [r4, #32]
 800b8ac:	6922      	ldr	r2, [r4, #16]
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	6809      	ldr	r1, [r1, #0]
 800b8b8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b8bc:	f000 fd30 	bl	800c320 <uxr_buffer_delete_entity>
 800b8c0:	6937      	ldr	r7, [r6, #16]
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800b8c8:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	f000 fb40 	bl	800bf54 <run_xrce_session>
 800b8d4:	6936      	ldr	r6, [r6, #16]
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800b8dc:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	f000 fb36 	bl	800bf54 <run_xrce_session>
 800b8e8:	b12c      	cbz	r4, 800b8f6 <rmw_destroy_subscription+0xba>
 800b8ea:	b120      	cbz	r0, 800b8f6 <rmw_destroy_subscription+0xba>
 800b8ec:	2400      	movs	r4, #0
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f000 f9ec 	bl	800bccc <rmw_uxrce_fini_subscription_memory>
 800b8f4:	e7ab      	b.n	800b84e <rmw_destroy_subscription+0x12>
 800b8f6:	2402      	movs	r4, #2
 800b8f8:	e7f9      	b.n	800b8ee <rmw_destroy_subscription+0xb2>
 800b8fa:	bf00      	nop

0800b8fc <rmw_take_with_info>:
 800b8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8fe:	4604      	mov	r4, r0
 800b900:	6800      	ldr	r0, [r0, #0]
 800b902:	b089      	sub	sp, #36	; 0x24
 800b904:	460f      	mov	r7, r1
 800b906:	4615      	mov	r5, r2
 800b908:	b128      	cbz	r0, 800b916 <rmw_take_with_info+0x1a>
 800b90a:	4b24      	ldr	r3, [pc, #144]	; (800b99c <rmw_take_with_info+0xa0>)
 800b90c:	6819      	ldr	r1, [r3, #0]
 800b90e:	f7f4 fc67 	bl	80001e0 <strcmp>
 800b912:	2800      	cmp	r0, #0
 800b914:	d13e      	bne.n	800b994 <rmw_take_with_info+0x98>
 800b916:	b305      	cbz	r5, 800b95a <rmw_take_with_info+0x5e>
 800b918:	6864      	ldr	r4, [r4, #4]
 800b91a:	2300      	movs	r3, #0
 800b91c:	702b      	strb	r3, [r5, #0]
 800b91e:	f000 fa9b 	bl	800be58 <rmw_uxrce_clean_expired_static_input_buffer>
 800b922:	4620      	mov	r0, r4
 800b924:	f000 fa70 	bl	800be08 <rmw_uxrce_find_static_input_buffer_by_owner>
 800b928:	4606      	mov	r6, r0
 800b92a:	b1f0      	cbz	r0, 800b96a <rmw_take_with_info+0x6e>
 800b92c:	6881      	ldr	r1, [r0, #8]
 800b92e:	4668      	mov	r0, sp
 800b930:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800b934:	3110      	adds	r1, #16
 800b936:	f7fd fc6d 	bl	8009214 <ucdr_init_buffer>
 800b93a:	69a3      	ldr	r3, [r4, #24]
 800b93c:	4639      	mov	r1, r7
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	4668      	mov	r0, sp
 800b942:	4798      	blx	r3
 800b944:	4631      	mov	r1, r6
 800b946:	4604      	mov	r4, r0
 800b948:	4815      	ldr	r0, [pc, #84]	; (800b9a0 <rmw_take_with_info+0xa4>)
 800b94a:	f006 f9cf 	bl	8011cec <put_memory>
 800b94e:	702c      	strb	r4, [r5, #0]
 800b950:	f084 0001 	eor.w	r0, r4, #1
 800b954:	b2c0      	uxtb	r0, r0
 800b956:	b009      	add	sp, #36	; 0x24
 800b958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b95a:	6864      	ldr	r4, [r4, #4]
 800b95c:	f000 fa7c 	bl	800be58 <rmw_uxrce_clean_expired_static_input_buffer>
 800b960:	4620      	mov	r0, r4
 800b962:	f000 fa51 	bl	800be08 <rmw_uxrce_find_static_input_buffer_by_owner>
 800b966:	4605      	mov	r5, r0
 800b968:	b910      	cbnz	r0, 800b970 <rmw_take_with_info+0x74>
 800b96a:	2001      	movs	r0, #1
 800b96c:	b009      	add	sp, #36	; 0x24
 800b96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b970:	68a9      	ldr	r1, [r5, #8]
 800b972:	4668      	mov	r0, sp
 800b974:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800b978:	3110      	adds	r1, #16
 800b97a:	f7fd fc4b 	bl	8009214 <ucdr_init_buffer>
 800b97e:	69a3      	ldr	r3, [r4, #24]
 800b980:	4639      	mov	r1, r7
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	4668      	mov	r0, sp
 800b986:	4798      	blx	r3
 800b988:	4629      	mov	r1, r5
 800b98a:	4604      	mov	r4, r0
 800b98c:	4804      	ldr	r0, [pc, #16]	; (800b9a0 <rmw_take_with_info+0xa4>)
 800b98e:	f006 f9ad 	bl	8011cec <put_memory>
 800b992:	e7dd      	b.n	800b950 <rmw_take_with_info+0x54>
 800b994:	200c      	movs	r0, #12
 800b996:	b009      	add	sp, #36	; 0x24
 800b998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b99a:	bf00      	nop
 800b99c:	08016cf4 	.word	0x08016cf4
 800b9a0:	2000dc14 	.word	0x2000dc14

0800b9a4 <rmw_uxrce_init_service_memory>:
 800b9a4:	b1e2      	cbz	r2, 800b9e0 <rmw_uxrce_init_service_memory+0x3c>
 800b9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9aa:	7b05      	ldrb	r5, [r0, #12]
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	b9ad      	cbnz	r5, 800b9dc <rmw_uxrce_init_service_memory+0x38>
 800b9b0:	23c8      	movs	r3, #200	; 0xc8
 800b9b2:	e9c0 5500 	strd	r5, r5, [r0]
 800b9b6:	6083      	str	r3, [r0, #8]
 800b9b8:	f240 1301 	movw	r3, #257	; 0x101
 800b9bc:	4617      	mov	r7, r2
 800b9be:	8183      	strh	r3, [r0, #12]
 800b9c0:	460c      	mov	r4, r1
 800b9c2:	46a8      	mov	r8, r5
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	3501      	adds	r5, #1
 800b9ca:	f006 f98f 	bl	8011cec <put_memory>
 800b9ce:	42af      	cmp	r7, r5
 800b9d0:	60a4      	str	r4, [r4, #8]
 800b9d2:	f884 800c 	strb.w	r8, [r4, #12]
 800b9d6:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800b9da:	d1f3      	bne.n	800b9c4 <rmw_uxrce_init_service_memory+0x20>
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop

0800b9e4 <rmw_uxrce_init_client_memory>:
 800b9e4:	b1e2      	cbz	r2, 800ba20 <rmw_uxrce_init_client_memory+0x3c>
 800b9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ea:	7b05      	ldrb	r5, [r0, #12]
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	b9ad      	cbnz	r5, 800ba1c <rmw_uxrce_init_client_memory+0x38>
 800b9f0:	23c8      	movs	r3, #200	; 0xc8
 800b9f2:	e9c0 5500 	strd	r5, r5, [r0]
 800b9f6:	6083      	str	r3, [r0, #8]
 800b9f8:	f240 1301 	movw	r3, #257	; 0x101
 800b9fc:	4617      	mov	r7, r2
 800b9fe:	8183      	strh	r3, [r0, #12]
 800ba00:	460c      	mov	r4, r1
 800ba02:	46a8      	mov	r8, r5
 800ba04:	4621      	mov	r1, r4
 800ba06:	4630      	mov	r0, r6
 800ba08:	3501      	adds	r5, #1
 800ba0a:	f006 f96f 	bl	8011cec <put_memory>
 800ba0e:	42af      	cmp	r7, r5
 800ba10:	60a4      	str	r4, [r4, #8]
 800ba12:	f884 800c 	strb.w	r8, [r4, #12]
 800ba16:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800ba1a:	d1f3      	bne.n	800ba04 <rmw_uxrce_init_client_memory+0x20>
 800ba1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop

0800ba24 <rmw_uxrce_init_publisher_memory>:
 800ba24:	b1e2      	cbz	r2, 800ba60 <rmw_uxrce_init_publisher_memory+0x3c>
 800ba26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2a:	7b05      	ldrb	r5, [r0, #12]
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	b9ad      	cbnz	r5, 800ba5c <rmw_uxrce_init_publisher_memory+0x38>
 800ba30:	23d8      	movs	r3, #216	; 0xd8
 800ba32:	e9c0 5500 	strd	r5, r5, [r0]
 800ba36:	6083      	str	r3, [r0, #8]
 800ba38:	f240 1301 	movw	r3, #257	; 0x101
 800ba3c:	4617      	mov	r7, r2
 800ba3e:	8183      	strh	r3, [r0, #12]
 800ba40:	460c      	mov	r4, r1
 800ba42:	46a8      	mov	r8, r5
 800ba44:	4621      	mov	r1, r4
 800ba46:	4630      	mov	r0, r6
 800ba48:	3501      	adds	r5, #1
 800ba4a:	f006 f94f 	bl	8011cec <put_memory>
 800ba4e:	42af      	cmp	r7, r5
 800ba50:	60a4      	str	r4, [r4, #8]
 800ba52:	f884 800c 	strb.w	r8, [r4, #12]
 800ba56:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ba5a:	d1f3      	bne.n	800ba44 <rmw_uxrce_init_publisher_memory+0x20>
 800ba5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop

0800ba64 <rmw_uxrce_init_subscription_memory>:
 800ba64:	b1e2      	cbz	r2, 800baa0 <rmw_uxrce_init_subscription_memory+0x3c>
 800ba66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6a:	7b05      	ldrb	r5, [r0, #12]
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	b9ad      	cbnz	r5, 800ba9c <rmw_uxrce_init_subscription_memory+0x38>
 800ba70:	23d8      	movs	r3, #216	; 0xd8
 800ba72:	e9c0 5500 	strd	r5, r5, [r0]
 800ba76:	6083      	str	r3, [r0, #8]
 800ba78:	f240 1301 	movw	r3, #257	; 0x101
 800ba7c:	4617      	mov	r7, r2
 800ba7e:	8183      	strh	r3, [r0, #12]
 800ba80:	460c      	mov	r4, r1
 800ba82:	46a8      	mov	r8, r5
 800ba84:	4621      	mov	r1, r4
 800ba86:	4630      	mov	r0, r6
 800ba88:	3501      	adds	r5, #1
 800ba8a:	f006 f92f 	bl	8011cec <put_memory>
 800ba8e:	42af      	cmp	r7, r5
 800ba90:	60a4      	str	r4, [r4, #8]
 800ba92:	f884 800c 	strb.w	r8, [r4, #12]
 800ba96:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ba9a:	d1f3      	bne.n	800ba84 <rmw_uxrce_init_subscription_memory+0x20>
 800ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop

0800baa4 <rmw_uxrce_init_node_memory>:
 800baa4:	b1e2      	cbz	r2, 800bae0 <rmw_uxrce_init_node_memory+0x3c>
 800baa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baaa:	7b05      	ldrb	r5, [r0, #12]
 800baac:	4606      	mov	r6, r0
 800baae:	b9ad      	cbnz	r5, 800badc <rmw_uxrce_init_node_memory+0x38>
 800bab0:	23a4      	movs	r3, #164	; 0xa4
 800bab2:	e9c0 5500 	strd	r5, r5, [r0]
 800bab6:	6083      	str	r3, [r0, #8]
 800bab8:	f240 1301 	movw	r3, #257	; 0x101
 800babc:	4617      	mov	r7, r2
 800babe:	8183      	strh	r3, [r0, #12]
 800bac0:	460c      	mov	r4, r1
 800bac2:	46a8      	mov	r8, r5
 800bac4:	4621      	mov	r1, r4
 800bac6:	4630      	mov	r0, r6
 800bac8:	3501      	adds	r5, #1
 800baca:	f006 f90f 	bl	8011cec <put_memory>
 800bace:	42af      	cmp	r7, r5
 800bad0:	60a4      	str	r4, [r4, #8]
 800bad2:	f884 800c 	strb.w	r8, [r4, #12]
 800bad6:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800bada:	d1f3      	bne.n	800bac4 <rmw_uxrce_init_node_memory+0x20>
 800badc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop

0800bae4 <rmw_uxrce_init_session_memory>:
 800bae4:	b1ea      	cbz	r2, 800bb22 <rmw_uxrce_init_session_memory+0x3e>
 800bae6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baea:	7b05      	ldrb	r5, [r0, #12]
 800baec:	4606      	mov	r6, r0
 800baee:	b9b5      	cbnz	r5, 800bb1e <rmw_uxrce_init_session_memory+0x3a>
 800baf0:	e9c0 5500 	strd	r5, r5, [r0]
 800baf4:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800baf8:	f240 1301 	movw	r3, #257	; 0x101
 800bafc:	4617      	mov	r7, r2
 800bafe:	f8c0 8008 	str.w	r8, [r0, #8]
 800bb02:	460c      	mov	r4, r1
 800bb04:	8183      	strh	r3, [r0, #12]
 800bb06:	46a9      	mov	r9, r5
 800bb08:	4621      	mov	r1, r4
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	3501      	adds	r5, #1
 800bb0e:	f006 f8ed 	bl	8011cec <put_memory>
 800bb12:	42af      	cmp	r7, r5
 800bb14:	60a4      	str	r4, [r4, #8]
 800bb16:	f884 900c 	strb.w	r9, [r4, #12]
 800bb1a:	4444      	add	r4, r8
 800bb1c:	d1f4      	bne.n	800bb08 <rmw_uxrce_init_session_memory+0x24>
 800bb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb22:	4770      	bx	lr

0800bb24 <rmw_uxrce_init_topic_memory>:
 800bb24:	b1e2      	cbz	r2, 800bb60 <rmw_uxrce_init_topic_memory+0x3c>
 800bb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2a:	7b05      	ldrb	r5, [r0, #12]
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	b9ad      	cbnz	r5, 800bb5c <rmw_uxrce_init_topic_memory+0x38>
 800bb30:	231c      	movs	r3, #28
 800bb32:	e9c0 5500 	strd	r5, r5, [r0]
 800bb36:	6083      	str	r3, [r0, #8]
 800bb38:	f240 1301 	movw	r3, #257	; 0x101
 800bb3c:	4617      	mov	r7, r2
 800bb3e:	8183      	strh	r3, [r0, #12]
 800bb40:	460c      	mov	r4, r1
 800bb42:	46a8      	mov	r8, r5
 800bb44:	4621      	mov	r1, r4
 800bb46:	4630      	mov	r0, r6
 800bb48:	3501      	adds	r5, #1
 800bb4a:	f006 f8cf 	bl	8011cec <put_memory>
 800bb4e:	42af      	cmp	r7, r5
 800bb50:	60a4      	str	r4, [r4, #8]
 800bb52:	f884 800c 	strb.w	r8, [r4, #12]
 800bb56:	f104 041c 	add.w	r4, r4, #28
 800bb5a:	d1f3      	bne.n	800bb44 <rmw_uxrce_init_topic_memory+0x20>
 800bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop

0800bb64 <rmw_uxrce_init_static_input_buffer_memory>:
 800bb64:	b1ea      	cbz	r2, 800bba2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800bb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6a:	7b05      	ldrb	r5, [r0, #12]
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	b9b5      	cbnz	r5, 800bb9e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800bb70:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800bb74:	e9c0 5500 	strd	r5, r5, [r0]
 800bb78:	6083      	str	r3, [r0, #8]
 800bb7a:	f240 1301 	movw	r3, #257	; 0x101
 800bb7e:	4617      	mov	r7, r2
 800bb80:	8183      	strh	r3, [r0, #12]
 800bb82:	460c      	mov	r4, r1
 800bb84:	46a8      	mov	r8, r5
 800bb86:	4621      	mov	r1, r4
 800bb88:	4630      	mov	r0, r6
 800bb8a:	3501      	adds	r5, #1
 800bb8c:	f006 f8ae 	bl	8011cec <put_memory>
 800bb90:	42af      	cmp	r7, r5
 800bb92:	60a4      	str	r4, [r4, #8]
 800bb94:	f884 800c 	strb.w	r8, [r4, #12]
 800bb98:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800bb9c:	d1f3      	bne.n	800bb86 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800bb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba2:	4770      	bx	lr

0800bba4 <rmw_uxrce_init_init_options_impl_memory>:
 800bba4:	b1e2      	cbz	r2, 800bbe0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800bba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbaa:	7b05      	ldrb	r5, [r0, #12]
 800bbac:	4606      	mov	r6, r0
 800bbae:	b9ad      	cbnz	r5, 800bbdc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800bbb0:	232c      	movs	r3, #44	; 0x2c
 800bbb2:	e9c0 5500 	strd	r5, r5, [r0]
 800bbb6:	6083      	str	r3, [r0, #8]
 800bbb8:	f240 1301 	movw	r3, #257	; 0x101
 800bbbc:	4617      	mov	r7, r2
 800bbbe:	8183      	strh	r3, [r0, #12]
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	46a8      	mov	r8, r5
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	3501      	adds	r5, #1
 800bbca:	f006 f88f 	bl	8011cec <put_memory>
 800bbce:	42af      	cmp	r7, r5
 800bbd0:	60a4      	str	r4, [r4, #8]
 800bbd2:	f884 800c 	strb.w	r8, [r4, #12]
 800bbd6:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800bbda:	d1f3      	bne.n	800bbc4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop

0800bbe4 <rmw_uxrce_init_wait_set_memory>:
 800bbe4:	b1e2      	cbz	r2, 800bc20 <rmw_uxrce_init_wait_set_memory+0x3c>
 800bbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbea:	7b05      	ldrb	r5, [r0, #12]
 800bbec:	4606      	mov	r6, r0
 800bbee:	b9ad      	cbnz	r5, 800bc1c <rmw_uxrce_init_wait_set_memory+0x38>
 800bbf0:	231c      	movs	r3, #28
 800bbf2:	e9c0 5500 	strd	r5, r5, [r0]
 800bbf6:	6083      	str	r3, [r0, #8]
 800bbf8:	f240 1301 	movw	r3, #257	; 0x101
 800bbfc:	4617      	mov	r7, r2
 800bbfe:	8183      	strh	r3, [r0, #12]
 800bc00:	460c      	mov	r4, r1
 800bc02:	46a8      	mov	r8, r5
 800bc04:	4621      	mov	r1, r4
 800bc06:	4630      	mov	r0, r6
 800bc08:	3501      	adds	r5, #1
 800bc0a:	f006 f86f 	bl	8011cec <put_memory>
 800bc0e:	42af      	cmp	r7, r5
 800bc10:	60a4      	str	r4, [r4, #8]
 800bc12:	f884 800c 	strb.w	r8, [r4, #12]
 800bc16:	f104 041c 	add.w	r4, r4, #28
 800bc1a:	d1f3      	bne.n	800bc04 <rmw_uxrce_init_wait_set_memory+0x20>
 800bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop

0800bc24 <rmw_uxrce_init_guard_condition_memory>:
 800bc24:	b1e2      	cbz	r2, 800bc60 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800bc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2a:	7b05      	ldrb	r5, [r0, #12]
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	b9ad      	cbnz	r5, 800bc5c <rmw_uxrce_init_guard_condition_memory+0x38>
 800bc30:	2320      	movs	r3, #32
 800bc32:	e9c0 5500 	strd	r5, r5, [r0]
 800bc36:	6083      	str	r3, [r0, #8]
 800bc38:	f240 1301 	movw	r3, #257	; 0x101
 800bc3c:	4617      	mov	r7, r2
 800bc3e:	8183      	strh	r3, [r0, #12]
 800bc40:	460c      	mov	r4, r1
 800bc42:	46a8      	mov	r8, r5
 800bc44:	4621      	mov	r1, r4
 800bc46:	4630      	mov	r0, r6
 800bc48:	3501      	adds	r5, #1
 800bc4a:	f006 f84f 	bl	8011cec <put_memory>
 800bc4e:	42af      	cmp	r7, r5
 800bc50:	60a4      	str	r4, [r4, #8]
 800bc52:	f884 800c 	strb.w	r8, [r4, #12]
 800bc56:	f104 0420 	add.w	r4, r4, #32
 800bc5a:	d1f3      	bne.n	800bc44 <rmw_uxrce_init_guard_condition_memory+0x20>
 800bc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop

0800bc64 <rmw_uxrce_fini_session_memory>:
 800bc64:	4601      	mov	r1, r0
 800bc66:	4801      	ldr	r0, [pc, #4]	; (800bc6c <rmw_uxrce_fini_session_memory+0x8>)
 800bc68:	f006 b840 	b.w	8011cec <put_memory>
 800bc6c:	2000dc04 	.word	0x2000dc04

0800bc70 <rmw_uxrce_fini_node_memory>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4604      	mov	r4, r0
 800bc74:	6800      	ldr	r0, [r0, #0]
 800bc76:	b128      	cbz	r0, 800bc84 <rmw_uxrce_fini_node_memory+0x14>
 800bc78:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <rmw_uxrce_fini_node_memory+0x28>)
 800bc7a:	6819      	ldr	r1, [r3, #0]
 800bc7c:	f7f4 fab0 	bl	80001e0 <strcmp>
 800bc80:	b940      	cbnz	r0, 800bc94 <rmw_uxrce_fini_node_memory+0x24>
 800bc82:	6020      	str	r0, [r4, #0]
 800bc84:	6861      	ldr	r1, [r4, #4]
 800bc86:	b129      	cbz	r1, 800bc94 <rmw_uxrce_fini_node_memory+0x24>
 800bc88:	2500      	movs	r5, #0
 800bc8a:	4804      	ldr	r0, [pc, #16]	; (800bc9c <rmw_uxrce_fini_node_memory+0x2c>)
 800bc8c:	610d      	str	r5, [r1, #16]
 800bc8e:	f006 f82d 	bl	8011cec <put_memory>
 800bc92:	6065      	str	r5, [r4, #4]
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
 800bc96:	bf00      	nop
 800bc98:	08016cf4 	.word	0x08016cf4
 800bc9c:	2000dbd4 	.word	0x2000dbd4

0800bca0 <rmw_uxrce_fini_publisher_memory>:
 800bca0:	b510      	push	{r4, lr}
 800bca2:	4604      	mov	r4, r0
 800bca4:	6800      	ldr	r0, [r0, #0]
 800bca6:	b128      	cbz	r0, 800bcb4 <rmw_uxrce_fini_publisher_memory+0x14>
 800bca8:	4b06      	ldr	r3, [pc, #24]	; (800bcc4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800bcaa:	6819      	ldr	r1, [r3, #0]
 800bcac:	f7f4 fa98 	bl	80001e0 <strcmp>
 800bcb0:	b938      	cbnz	r0, 800bcc2 <rmw_uxrce_fini_publisher_memory+0x22>
 800bcb2:	6020      	str	r0, [r4, #0]
 800bcb4:	6861      	ldr	r1, [r4, #4]
 800bcb6:	b121      	cbz	r1, 800bcc2 <rmw_uxrce_fini_publisher_memory+0x22>
 800bcb8:	4803      	ldr	r0, [pc, #12]	; (800bcc8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800bcba:	f006 f817 	bl	8011cec <put_memory>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	6063      	str	r3, [r4, #4]
 800bcc2:	bd10      	pop	{r4, pc}
 800bcc4:	08016cf4 	.word	0x08016cf4
 800bcc8:	2000dbe4 	.word	0x2000dbe4

0800bccc <rmw_uxrce_fini_subscription_memory>:
 800bccc:	b510      	push	{r4, lr}
 800bcce:	4604      	mov	r4, r0
 800bcd0:	6800      	ldr	r0, [r0, #0]
 800bcd2:	b128      	cbz	r0, 800bce0 <rmw_uxrce_fini_subscription_memory+0x14>
 800bcd4:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800bcd6:	6819      	ldr	r1, [r3, #0]
 800bcd8:	f7f4 fa82 	bl	80001e0 <strcmp>
 800bcdc:	b938      	cbnz	r0, 800bcee <rmw_uxrce_fini_subscription_memory+0x22>
 800bcde:	6020      	str	r0, [r4, #0]
 800bce0:	6861      	ldr	r1, [r4, #4]
 800bce2:	b121      	cbz	r1, 800bcee <rmw_uxrce_fini_subscription_memory+0x22>
 800bce4:	4803      	ldr	r0, [pc, #12]	; (800bcf4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800bce6:	f006 f801 	bl	8011cec <put_memory>
 800bcea:	2300      	movs	r3, #0
 800bcec:	6063      	str	r3, [r4, #4]
 800bcee:	bd10      	pop	{r4, pc}
 800bcf0:	08016cf4 	.word	0x08016cf4
 800bcf4:	2000dc24 	.word	0x2000dc24

0800bcf8 <rmw_uxrce_fini_service_memory>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	6800      	ldr	r0, [r0, #0]
 800bcfe:	b128      	cbz	r0, 800bd0c <rmw_uxrce_fini_service_memory+0x14>
 800bd00:	4b06      	ldr	r3, [pc, #24]	; (800bd1c <rmw_uxrce_fini_service_memory+0x24>)
 800bd02:	6819      	ldr	r1, [r3, #0]
 800bd04:	f7f4 fa6c 	bl	80001e0 <strcmp>
 800bd08:	b938      	cbnz	r0, 800bd1a <rmw_uxrce_fini_service_memory+0x22>
 800bd0a:	6020      	str	r0, [r4, #0]
 800bd0c:	6861      	ldr	r1, [r4, #4]
 800bd0e:	b121      	cbz	r1, 800bd1a <rmw_uxrce_fini_service_memory+0x22>
 800bd10:	4803      	ldr	r0, [pc, #12]	; (800bd20 <rmw_uxrce_fini_service_memory+0x28>)
 800bd12:	f005 ffeb 	bl	8011cec <put_memory>
 800bd16:	2300      	movs	r3, #0
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	bd10      	pop	{r4, pc}
 800bd1c:	08016cf4 	.word	0x08016cf4
 800bd20:	2000dbf4 	.word	0x2000dbf4

0800bd24 <rmw_uxrce_fini_client_memory>:
 800bd24:	b510      	push	{r4, lr}
 800bd26:	4604      	mov	r4, r0
 800bd28:	6800      	ldr	r0, [r0, #0]
 800bd2a:	b128      	cbz	r0, 800bd38 <rmw_uxrce_fini_client_memory+0x14>
 800bd2c:	4b06      	ldr	r3, [pc, #24]	; (800bd48 <rmw_uxrce_fini_client_memory+0x24>)
 800bd2e:	6819      	ldr	r1, [r3, #0]
 800bd30:	f7f4 fa56 	bl	80001e0 <strcmp>
 800bd34:	b938      	cbnz	r0, 800bd46 <rmw_uxrce_fini_client_memory+0x22>
 800bd36:	6020      	str	r0, [r4, #0]
 800bd38:	6861      	ldr	r1, [r4, #4]
 800bd3a:	b121      	cbz	r1, 800bd46 <rmw_uxrce_fini_client_memory+0x22>
 800bd3c:	4803      	ldr	r0, [pc, #12]	; (800bd4c <rmw_uxrce_fini_client_memory+0x28>)
 800bd3e:	f005 ffd5 	bl	8011cec <put_memory>
 800bd42:	2300      	movs	r3, #0
 800bd44:	6063      	str	r3, [r4, #4]
 800bd46:	bd10      	pop	{r4, pc}
 800bd48:	08016cf4 	.word	0x08016cf4
 800bd4c:	20009304 	.word	0x20009304

0800bd50 <rmw_uxrce_fini_topic_memory>:
 800bd50:	b510      	push	{r4, lr}
 800bd52:	4604      	mov	r4, r0
 800bd54:	4621      	mov	r1, r4
 800bd56:	4803      	ldr	r0, [pc, #12]	; (800bd64 <rmw_uxrce_fini_topic_memory+0x14>)
 800bd58:	f005 ffc8 	bl	8011cec <put_memory>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	61a3      	str	r3, [r4, #24]
 800bd60:	bd10      	pop	{r4, pc}
 800bd62:	bf00      	nop
 800bd64:	2000dc34 	.word	0x2000dc34

0800bd68 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800bd68:	b082      	sub	sp, #8
 800bd6a:	b530      	push	{r4, r5, lr}
 800bd6c:	4925      	ldr	r1, [pc, #148]	; (800be04 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bd6e:	680d      	ldr	r5, [r1, #0]
 800bd70:	ac03      	add	r4, sp, #12
 800bd72:	e884 000c 	stmia.w	r4, {r2, r3}
 800bd76:	461c      	mov	r4, r3
 800bd78:	2d00      	cmp	r5, #0
 800bd7a:	d041      	beq.n	800be00 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	2100      	movs	r1, #0
 800bd80:	689a      	ldr	r2, [r3, #8]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800bd88:	4290      	cmp	r0, r2
 800bd8a:	bf08      	it	eq
 800bd8c:	3101      	addeq	r1, #1
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1f6      	bne.n	800bd80 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800bd92:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d029      	beq.n	800bdee <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800bd9a:	d907      	bls.n	800bdac <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	d005      	beq.n	800bdac <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bda0:	2100      	movs	r1, #0
 800bda2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bda6:	4608      	mov	r0, r1
 800bda8:	b002      	add	sp, #8
 800bdaa:	4770      	bx	lr
 800bdac:	b314      	cbz	r4, 800bdf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bdae:	428c      	cmp	r4, r1
 800bdb0:	d820      	bhi.n	800bdf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bdb2:	2d00      	cmp	r5, #0
 800bdb4:	d0f4      	beq.n	800bda0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bdbc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800bdc0:	e002      	b.n	800bdc8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800bdc2:	686d      	ldr	r5, [r5, #4]
 800bdc4:	2d00      	cmp	r5, #0
 800bdc6:	d0ec      	beq.n	800bda2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800bdc8:	68ab      	ldr	r3, [r5, #8]
 800bdca:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800bdce:	4290      	cmp	r0, r2
 800bdd0:	d1f7      	bne.n	800bdc2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bdd2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800bdd6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800bdda:	4562      	cmp	r2, ip
 800bddc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bde0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800bde4:	daed      	bge.n	800bdc2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bde6:	4694      	mov	ip, r2
 800bde8:	461c      	mov	r4, r3
 800bdea:	4629      	mov	r1, r5
 800bdec:	e7e9      	b.n	800bdc2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bdee:	b10c      	cbz	r4, 800bdf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bdf0:	428c      	cmp	r4, r1
 800bdf2:	d9d5      	bls.n	800bda0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bdf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdf8:	4802      	ldr	r0, [pc, #8]	; (800be04 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bdfa:	b002      	add	sp, #8
 800bdfc:	f005 bf66 	b.w	8011ccc <get_memory>
 800be00:	4629      	mov	r1, r5
 800be02:	e7c6      	b.n	800bd92 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800be04:	2000dc14 	.word	0x2000dc14

0800be08 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800be08:	4b11      	ldr	r3, [pc, #68]	; (800be50 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	b530      	push	{r4, r5, lr}
 800be0e:	b1e3      	cbz	r3, 800be4a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800be10:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800be14:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800be18:	2400      	movs	r4, #0
 800be1a:	e001      	b.n	800be20 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	b193      	cbz	r3, 800be46 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800be20:	689a      	ldr	r2, [r3, #8]
 800be22:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800be26:	4288      	cmp	r0, r1
 800be28:	d1f8      	bne.n	800be1c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800be2a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800be2e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800be32:	4571      	cmp	r1, lr
 800be34:	eb72 050c 	sbcs.w	r5, r2, ip
 800be38:	daf0      	bge.n	800be1c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800be3a:	461c      	mov	r4, r3
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	468e      	mov	lr, r1
 800be40:	4694      	mov	ip, r2
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1ec      	bne.n	800be20 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800be46:	4620      	mov	r0, r4
 800be48:	bd30      	pop	{r4, r5, pc}
 800be4a:	461c      	mov	r4, r3
 800be4c:	4620      	mov	r0, r4
 800be4e:	bd30      	pop	{r4, r5, pc}
 800be50:	2000dc14 	.word	0x2000dc14
 800be54:	00000000 	.word	0x00000000

0800be58 <rmw_uxrce_clean_expired_static_input_buffer>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	4b3c      	ldr	r3, [pc, #240]	; (800bf50 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800be5e:	ed2d 8b06 	vpush	{d8-d10}
 800be62:	681f      	ldr	r7, [r3, #0]
 800be64:	b08d      	sub	sp, #52	; 0x34
 800be66:	f006 fd99 	bl	801299c <rmw_uros_epoch_nanos>
 800be6a:	2f00      	cmp	r7, #0
 800be6c:	d05d      	beq.n	800bf2a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800be6e:	46b8      	mov	r8, r7
 800be70:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800bf38 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800be74:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800be78:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	ed9f ab30 	vldr	d10, [pc, #192]	; 800bf40 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800be82:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800bf48 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800be86:	4681      	mov	r9, r0
 800be88:	468a      	mov	sl, r1
 800be8a:	ac04      	add	r4, sp, #16
 800be8c:	d03f      	beq.n	800bf0e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800be8e:	2b05      	cmp	r3, #5
 800be90:	d044      	beq.n	800bf1c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800be92:	2b03      	cmp	r3, #3
 800be94:	d03b      	beq.n	800bf0e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800be96:	ed8d 8b04 	vstr	d8, [sp, #16]
 800be9a:	ed8d ab06 	vstr	d10, [sp, #24]
 800be9e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800bea2:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800bea6:	ab08      	add	r3, sp, #32
 800bea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800beaa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800beae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800beb2:	f005 fe11 	bl	8011ad8 <rmw_time_equal>
 800beb6:	b118      	cbz	r0, 800bec0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800beb8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800bebc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bec0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bec4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800bec8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800becc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800bed0:	f005 fe56 	bl	8011b80 <rmw_time_total_nsec>
 800bed4:	1830      	adds	r0, r6, r0
 800bed6:	eb47 0101 	adc.w	r1, r7, r1
 800beda:	4548      	cmp	r0, r9
 800bedc:	eb71 030a 	sbcs.w	r3, r1, sl
 800bee0:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800bee4:	db05      	blt.n	800bef2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800bee6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800beea:	4591      	cmp	r9, r2
 800beec:	eb7a 0303 	sbcs.w	r3, sl, r3
 800bef0:	da03      	bge.n	800befa <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800bef2:	4817      	ldr	r0, [pc, #92]	; (800bf50 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bef4:	4641      	mov	r1, r8
 800bef6:	f005 fef9 	bl	8011cec <put_memory>
 800befa:	f1bb 0f00 	cmp.w	fp, #0
 800befe:	d014      	beq.n	800bf2a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bf00:	46d8      	mov	r8, fp
 800bf02:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bf06:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800bf0a:	2b04      	cmp	r3, #4
 800bf0c:	d1bf      	bne.n	800be8e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800bf0e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800bf12:	3340      	adds	r3, #64	; 0x40
 800bf14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bf1a:	e7c0      	b.n	800be9e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bf1c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800bf20:	3348      	adds	r3, #72	; 0x48
 800bf22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bf28:	e7b9      	b.n	800be9e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bf2a:	b00d      	add	sp, #52	; 0x34
 800bf2c:	ecbd 8b06 	vpop	{d8-d10}
 800bf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf34:	f3af 8000 	nop.w
	...
 800bf40:	00000001 	.word	0x00000001
 800bf44:	00000000 	.word	0x00000000
 800bf48:	0000001e 	.word	0x0000001e
 800bf4c:	00000000 	.word	0x00000000
 800bf50:	2000dc14 	.word	0x2000dc14

0800bf54 <run_xrce_session>:
 800bf54:	b510      	push	{r4, lr}
 800bf56:	788c      	ldrb	r4, [r1, #2]
 800bf58:	b086      	sub	sp, #24
 800bf5a:	2c01      	cmp	r4, #1
 800bf5c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bf60:	d00c      	beq.n	800bf7c <run_xrce_session+0x28>
 800bf62:	4619      	mov	r1, r3
 800bf64:	2301      	movs	r3, #1
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	f10d 020e 	add.w	r2, sp, #14
 800bf6c:	f10d 0317 	add.w	r3, sp, #23
 800bf70:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bf74:	f001 fa3a 	bl	800d3ec <uxr_run_session_until_all_status>
 800bf78:	b006      	add	sp, #24
 800bf7a:	bd10      	pop	{r4, pc}
 800bf7c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bf80:	f000 fe4e 	bl	800cc20 <uxr_flash_output_streams>
 800bf84:	4620      	mov	r0, r4
 800bf86:	b006      	add	sp, #24
 800bf88:	bd10      	pop	{r4, pc}
 800bf8a:	bf00      	nop

0800bf8c <convert_qos_profile>:
 800bf8c:	7a4a      	ldrb	r2, [r1, #9]
 800bf8e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bf92:	2a02      	cmp	r2, #2
 800bf94:	bf18      	it	ne
 800bf96:	2200      	movne	r2, #0
 800bf98:	7002      	strb	r2, [r0, #0]
 800bf9a:	780a      	ldrb	r2, [r1, #0]
 800bf9c:	8889      	ldrh	r1, [r1, #4]
 800bf9e:	8081      	strh	r1, [r0, #4]
 800bfa0:	f1ac 0c02 	sub.w	ip, ip, #2
 800bfa4:	f1a2 0202 	sub.w	r2, r2, #2
 800bfa8:	fabc fc8c 	clz	ip, ip
 800bfac:	fab2 f282 	clz	r2, r2
 800bfb0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bfb4:	0952      	lsrs	r2, r2, #5
 800bfb6:	f880 c001 	strb.w	ip, [r0, #1]
 800bfba:	7082      	strb	r2, [r0, #2]
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop

0800bfc0 <generate_type_name>:
 800bfc0:	b530      	push	{r4, r5, lr}
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	700b      	strb	r3, [r1, #0]
 800bfc6:	6803      	ldr	r3, [r0, #0]
 800bfc8:	b087      	sub	sp, #28
 800bfca:	4614      	mov	r4, r2
 800bfcc:	b1d3      	cbz	r3, 800c004 <generate_type_name+0x44>
 800bfce:	4a0f      	ldr	r2, [pc, #60]	; (800c00c <generate_type_name+0x4c>)
 800bfd0:	4615      	mov	r5, r2
 800bfd2:	9203      	str	r2, [sp, #12]
 800bfd4:	9500      	str	r5, [sp, #0]
 800bfd6:	6842      	ldr	r2, [r0, #4]
 800bfd8:	480d      	ldr	r0, [pc, #52]	; (800c010 <generate_type_name+0x50>)
 800bfda:	9001      	str	r0, [sp, #4]
 800bfdc:	4608      	mov	r0, r1
 800bfde:	490d      	ldr	r1, [pc, #52]	; (800c014 <generate_type_name+0x54>)
 800bfe0:	9204      	str	r2, [sp, #16]
 800bfe2:	9105      	str	r1, [sp, #20]
 800bfe4:	9102      	str	r1, [sp, #8]
 800bfe6:	4a0c      	ldr	r2, [pc, #48]	; (800c018 <generate_type_name+0x58>)
 800bfe8:	4621      	mov	r1, r4
 800bfea:	f009 f80d 	bl	8015008 <sniprintf>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	db05      	blt.n	800bffe <generate_type_name+0x3e>
 800bff2:	4284      	cmp	r4, r0
 800bff4:	bfd4      	ite	le
 800bff6:	2000      	movle	r0, #0
 800bff8:	2001      	movgt	r0, #1
 800bffa:	b007      	add	sp, #28
 800bffc:	bd30      	pop	{r4, r5, pc}
 800bffe:	2000      	movs	r0, #0
 800c000:	b007      	add	sp, #28
 800c002:	bd30      	pop	{r4, r5, pc}
 800c004:	4b05      	ldr	r3, [pc, #20]	; (800c01c <generate_type_name+0x5c>)
 800c006:	4a01      	ldr	r2, [pc, #4]	; (800c00c <generate_type_name+0x4c>)
 800c008:	461d      	mov	r5, r3
 800c00a:	e7e2      	b.n	800bfd2 <generate_type_name+0x12>
 800c00c:	08016990 	.word	0x08016990
 800c010:	080169a8 	.word	0x080169a8
 800c014:	080169a4 	.word	0x080169a4
 800c018:	08016994 	.word	0x08016994
 800c01c:	08016f78 	.word	0x08016f78

0800c020 <generate_topic_name>:
 800c020:	b510      	push	{r4, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	4614      	mov	r4, r2
 800c026:	9000      	str	r0, [sp, #0]
 800c028:	4b08      	ldr	r3, [pc, #32]	; (800c04c <generate_topic_name+0x2c>)
 800c02a:	4a09      	ldr	r2, [pc, #36]	; (800c050 <generate_topic_name+0x30>)
 800c02c:	4608      	mov	r0, r1
 800c02e:	4621      	mov	r1, r4
 800c030:	f008 ffea 	bl	8015008 <sniprintf>
 800c034:	2800      	cmp	r0, #0
 800c036:	db05      	blt.n	800c044 <generate_topic_name+0x24>
 800c038:	4284      	cmp	r4, r0
 800c03a:	bfd4      	ite	le
 800c03c:	2000      	movle	r0, #0
 800c03e:	2001      	movgt	r0, #1
 800c040:	b002      	add	sp, #8
 800c042:	bd10      	pop	{r4, pc}
 800c044:	2000      	movs	r0, #0
 800c046:	b002      	add	sp, #8
 800c048:	bd10      	pop	{r4, pc}
 800c04a:	bf00      	nop
 800c04c:	080169ac 	.word	0x080169ac
 800c050:	080163e8 	.word	0x080163e8

0800c054 <is_uxrce_rmw_identifier_valid>:
 800c054:	b510      	push	{r4, lr}
 800c056:	4604      	mov	r4, r0
 800c058:	b140      	cbz	r0, 800c06c <is_uxrce_rmw_identifier_valid+0x18>
 800c05a:	f005 fe9f 	bl	8011d9c <rmw_get_implementation_identifier>
 800c05e:	4601      	mov	r1, r0
 800c060:	4620      	mov	r0, r4
 800c062:	f7f4 f8bd 	bl	80001e0 <strcmp>
 800c066:	fab0 f080 	clz	r0, r0
 800c06a:	0940      	lsrs	r0, r0, #5
 800c06c:	bd10      	pop	{r4, pc}
 800c06e:	bf00      	nop

0800c070 <get_message_typesupport_handle>:
 800c070:	6883      	ldr	r3, [r0, #8]
 800c072:	4718      	bx	r3

0800c074 <get_message_typesupport_handle_function>:
 800c074:	b510      	push	{r4, lr}
 800c076:	4604      	mov	r4, r0
 800c078:	6800      	ldr	r0, [r0, #0]
 800c07a:	f7f4 f8b1 	bl	80001e0 <strcmp>
 800c07e:	2800      	cmp	r0, #0
 800c080:	bf0c      	ite	eq
 800c082:	4620      	moveq	r0, r4
 800c084:	2000      	movne	r0, #0
 800c086:	bd10      	pop	{r4, pc}

0800c088 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08c:	6805      	ldr	r5, [r0, #0]
 800c08e:	4604      	mov	r4, r0
 800c090:	4628      	mov	r0, r5
 800c092:	460e      	mov	r6, r1
 800c094:	f7f4 f8a4 	bl	80001e0 <strcmp>
 800c098:	b1c8      	cbz	r0, 800c0ce <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c09a:	4b11      	ldr	r3, [pc, #68]	; (800c0e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	429d      	cmp	r5, r3
 800c0a0:	d112      	bne.n	800c0c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c0a2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c0a6:	f8d8 4000 	ldr.w	r4, [r8]
 800c0aa:	b16c      	cbz	r4, 800c0c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c0ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c0b0:	2700      	movs	r7, #0
 800c0b2:	3d04      	subs	r5, #4
 800c0b4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c0b8:	4631      	mov	r1, r6
 800c0ba:	f7f4 f891 	bl	80001e0 <strcmp>
 800c0be:	00bb      	lsls	r3, r7, #2
 800c0c0:	b140      	cbz	r0, 800c0d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c0c2:	3701      	adds	r7, #1
 800c0c4:	42bc      	cmp	r4, r7
 800c0c6:	d1f5      	bne.n	800c0b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c0d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0dc:	58d3      	ldr	r3, [r2, r3]
 800c0de:	4718      	bx	r3
 800c0e0:	200001d0 	.word	0x200001d0

0800c0e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800c0e4:	4b04      	ldr	r3, [pc, #16]	; (800c0f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	b10a      	cbz	r2, 800c0ee <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800c0ea:	4803      	ldr	r0, [pc, #12]	; (800c0f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c0ec:	4770      	bx	lr
 800c0ee:	4a03      	ldr	r2, [pc, #12]	; (800c0fc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800c0f0:	4801      	ldr	r0, [pc, #4]	; (800c0f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c0f2:	6812      	ldr	r2, [r2, #0]
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	4770      	bx	lr
 800c0f8:	200001e0 	.word	0x200001e0
 800c0fc:	200001d0 	.word	0x200001d0

0800c100 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800c100:	4a02      	ldr	r2, [pc, #8]	; (800c10c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800c102:	4b03      	ldr	r3, [pc, #12]	; (800c110 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800c104:	6812      	ldr	r2, [r2, #0]
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	200001d0 	.word	0x200001d0
 800c110:	200001e0 	.word	0x200001e0

0800c114 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800c114:	f006 bc50 	b.w	80129b8 <std_msgs__msg__String__init>

0800c118 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800c118:	f006 bc60 	b.w	80129dc <std_msgs__msg__String__fini>

0800c11c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800c11c:	4b04      	ldr	r3, [pc, #16]	; (800c130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	b10a      	cbz	r2, 800c126 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800c122:	4803      	ldr	r0, [pc, #12]	; (800c130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c124:	4770      	bx	lr
 800c126:	4a03      	ldr	r2, [pc, #12]	; (800c134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800c128:	4801      	ldr	r0, [pc, #4]	; (800c130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c12a:	6812      	ldr	r2, [r2, #0]
 800c12c:	601a      	str	r2, [r3, #0]
 800c12e:	4770      	bx	lr
 800c130:	20000228 	.word	0x20000228
 800c134:	200001d4 	.word	0x200001d4

0800c138 <_String__max_serialized_size>:
 800c138:	2000      	movs	r0, #0
 800c13a:	4770      	bx	lr

0800c13c <_String__cdr_serialize>:
 800c13c:	b1c0      	cbz	r0, 800c170 <_String__cdr_serialize+0x34>
 800c13e:	b570      	push	{r4, r5, r6, lr}
 800c140:	6806      	ldr	r6, [r0, #0]
 800c142:	460d      	mov	r5, r1
 800c144:	4604      	mov	r4, r0
 800c146:	b156      	cbz	r6, 800c15e <_String__cdr_serialize+0x22>
 800c148:	4630      	mov	r0, r6
 800c14a:	f7f4 f853 	bl	80001f4 <strlen>
 800c14e:	4631      	mov	r1, r6
 800c150:	6060      	str	r0, [r4, #4]
 800c152:	1c42      	adds	r2, r0, #1
 800c154:	4628      	mov	r0, r5
 800c156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c15a:	f000 b889 	b.w	800c270 <ucdr_serialize_sequence_char>
 800c15e:	4630      	mov	r0, r6
 800c160:	6060      	str	r0, [r4, #4]
 800c162:	4632      	mov	r2, r6
 800c164:	4631      	mov	r1, r6
 800c166:	4628      	mov	r0, r5
 800c168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c16c:	f000 b880 	b.w	800c270 <ucdr_serialize_sequence_char>
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop

0800c174 <get_serialized_size_std_msgs__msg__String>:
 800c174:	b510      	push	{r4, lr}
 800c176:	4604      	mov	r4, r0
 800c178:	b138      	cbz	r0, 800c18a <get_serialized_size_std_msgs__msg__String+0x16>
 800c17a:	460b      	mov	r3, r1
 800c17c:	4618      	mov	r0, r3
 800c17e:	2104      	movs	r1, #4
 800c180:	f7fd f84c 	bl	800921c <ucdr_alignment>
 800c184:	6863      	ldr	r3, [r4, #4]
 800c186:	3305      	adds	r3, #5
 800c188:	4418      	add	r0, r3
 800c18a:	bd10      	pop	{r4, pc}

0800c18c <_String__cdr_deserialize>:
 800c18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c18e:	460c      	mov	r4, r1
 800c190:	b083      	sub	sp, #12
 800c192:	b1a1      	cbz	r1, 800c1be <_String__cdr_deserialize+0x32>
 800c194:	688f      	ldr	r7, [r1, #8]
 800c196:	6809      	ldr	r1, [r1, #0]
 800c198:	ab01      	add	r3, sp, #4
 800c19a:	463a      	mov	r2, r7
 800c19c:	4606      	mov	r6, r0
 800c19e:	f000 f879 	bl	800c294 <ucdr_deserialize_sequence_char>
 800c1a2:	9b01      	ldr	r3, [sp, #4]
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	b920      	cbnz	r0, 800c1b2 <_String__cdr_deserialize+0x26>
 800c1a8:	429f      	cmp	r7, r3
 800c1aa:	d30c      	bcc.n	800c1c6 <_String__cdr_deserialize+0x3a>
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	b003      	add	sp, #12
 800c1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1b2:	b103      	cbz	r3, 800c1b6 <_String__cdr_deserialize+0x2a>
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	6063      	str	r3, [r4, #4]
 800c1ba:	b003      	add	sp, #12
 800c1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1be:	460d      	mov	r5, r1
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	b003      	add	sp, #12
 800c1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1c6:	2101      	movs	r1, #1
 800c1c8:	75b0      	strb	r0, [r6, #22]
 800c1ca:	7571      	strb	r1, [r6, #21]
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	6065      	str	r5, [r4, #4]
 800c1d0:	f7fd f83a 	bl	8009248 <ucdr_align_to>
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	9901      	ldr	r1, [sp, #4]
 800c1d8:	f7fd f86c 	bl	80092b4 <ucdr_advance_buffer>
 800c1dc:	4628      	mov	r0, r5
 800c1de:	b003      	add	sp, #12
 800c1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1e2:	bf00      	nop

0800c1e4 <_String__get_serialized_size>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	b130      	cbz	r0, 800c1f8 <_String__get_serialized_size+0x14>
 800c1ea:	2104      	movs	r1, #4
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	f7fd f815 	bl	800921c <ucdr_alignment>
 800c1f2:	6863      	ldr	r3, [r4, #4]
 800c1f4:	3305      	adds	r3, #5
 800c1f6:	4418      	add	r0, r3
 800c1f8:	bd10      	pop	{r4, pc}
 800c1fa:	bf00      	nop

0800c1fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800c1fc:	4800      	ldr	r0, [pc, #0]	; (800c200 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800c1fe:	4770      	bx	lr
 800c200:	20000234 	.word	0x20000234

0800c204 <geometry_msgs__msg__Twist__init>:
 800c204:	b570      	push	{r4, r5, r6, lr}
 800c206:	4605      	mov	r5, r0
 800c208:	b1a8      	cbz	r0, 800c236 <geometry_msgs__msg__Twist__init+0x32>
 800c20a:	f000 f82b 	bl	800c264 <geometry_msgs__msg__Vector3__init>
 800c20e:	4604      	mov	r4, r0
 800c210:	b140      	cbz	r0, 800c224 <geometry_msgs__msg__Twist__init+0x20>
 800c212:	f105 0618 	add.w	r6, r5, #24
 800c216:	4630      	mov	r0, r6
 800c218:	f000 f824 	bl	800c264 <geometry_msgs__msg__Vector3__init>
 800c21c:	4604      	mov	r4, r0
 800c21e:	b168      	cbz	r0, 800c23c <geometry_msgs__msg__Twist__init+0x38>
 800c220:	4620      	mov	r0, r4
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	4628      	mov	r0, r5
 800c226:	f000 f821 	bl	800c26c <geometry_msgs__msg__Vector3__fini>
 800c22a:	f105 0018 	add.w	r0, r5, #24
 800c22e:	f000 f81d 	bl	800c26c <geometry_msgs__msg__Vector3__fini>
 800c232:	4620      	mov	r0, r4
 800c234:	bd70      	pop	{r4, r5, r6, pc}
 800c236:	4604      	mov	r4, r0
 800c238:	4620      	mov	r0, r4
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	4628      	mov	r0, r5
 800c23e:	f000 f815 	bl	800c26c <geometry_msgs__msg__Vector3__fini>
 800c242:	4630      	mov	r0, r6
 800c244:	f000 f812 	bl	800c26c <geometry_msgs__msg__Vector3__fini>
 800c248:	e7ea      	b.n	800c220 <geometry_msgs__msg__Twist__init+0x1c>
 800c24a:	bf00      	nop

0800c24c <geometry_msgs__msg__Twist__fini>:
 800c24c:	b148      	cbz	r0, 800c262 <geometry_msgs__msg__Twist__fini+0x16>
 800c24e:	b510      	push	{r4, lr}
 800c250:	4604      	mov	r4, r0
 800c252:	f000 f80b 	bl	800c26c <geometry_msgs__msg__Vector3__fini>
 800c256:	f104 0018 	add.w	r0, r4, #24
 800c25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c25e:	f000 b805 	b.w	800c26c <geometry_msgs__msg__Vector3__fini>
 800c262:	4770      	bx	lr

0800c264 <geometry_msgs__msg__Vector3__init>:
 800c264:	3800      	subs	r0, #0
 800c266:	bf18      	it	ne
 800c268:	2001      	movne	r0, #1
 800c26a:	4770      	bx	lr

0800c26c <geometry_msgs__msg__Vector3__fini>:
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop

0800c270 <ucdr_serialize_sequence_char>:
 800c270:	b570      	push	{r4, r5, r6, lr}
 800c272:	4615      	mov	r5, r2
 800c274:	460e      	mov	r6, r1
 800c276:	7d01      	ldrb	r1, [r0, #20]
 800c278:	4604      	mov	r4, r0
 800c27a:	f7fc f937 	bl	80084ec <ucdr_serialize_endian_uint32_t>
 800c27e:	b90d      	cbnz	r5, 800c284 <ucdr_serialize_sequence_char+0x14>
 800c280:	2001      	movs	r0, #1
 800c282:	bd70      	pop	{r4, r5, r6, pc}
 800c284:	7d21      	ldrb	r1, [r4, #20]
 800c286:	462b      	mov	r3, r5
 800c288:	4632      	mov	r2, r6
 800c28a:	4620      	mov	r0, r4
 800c28c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c290:	f006 bba8 	b.w	80129e4 <ucdr_serialize_endian_array_char>

0800c294 <ucdr_deserialize_sequence_char>:
 800c294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c298:	461d      	mov	r5, r3
 800c29a:	4616      	mov	r6, r2
 800c29c:	460f      	mov	r7, r1
 800c29e:	461a      	mov	r2, r3
 800c2a0:	7d01      	ldrb	r1, [r0, #20]
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	f7fc fa4a 	bl	800873c <ucdr_deserialize_endian_uint32_t>
 800c2a8:	682b      	ldr	r3, [r5, #0]
 800c2aa:	429e      	cmp	r6, r3
 800c2ac:	bf3c      	itt	cc
 800c2ae:	2201      	movcc	r2, #1
 800c2b0:	75a2      	strbcc	r2, [r4, #22]
 800c2b2:	b913      	cbnz	r3, 800c2ba <ucdr_deserialize_sequence_char+0x26>
 800c2b4:	2001      	movs	r0, #1
 800c2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ba:	7d21      	ldrb	r1, [r4, #20]
 800c2bc:	463a      	mov	r2, r7
 800c2be:	4620      	mov	r0, r4
 800c2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c4:	f006 bbc0 	b.w	8012a48 <ucdr_deserialize_endian_array_char>

0800c2c8 <ucdr_serialize_sequence_uint8_t>:
 800c2c8:	b570      	push	{r4, r5, r6, lr}
 800c2ca:	4615      	mov	r5, r2
 800c2cc:	460e      	mov	r6, r1
 800c2ce:	7d01      	ldrb	r1, [r0, #20]
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	f7fc f90b 	bl	80084ec <ucdr_serialize_endian_uint32_t>
 800c2d6:	b90d      	cbnz	r5, 800c2dc <ucdr_serialize_sequence_uint8_t+0x14>
 800c2d8:	2001      	movs	r0, #1
 800c2da:	bd70      	pop	{r4, r5, r6, pc}
 800c2dc:	7d21      	ldrb	r1, [r4, #20]
 800c2de:	462b      	mov	r3, r5
 800c2e0:	4632      	mov	r2, r6
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2e8:	f006 bc12 	b.w	8012b10 <ucdr_serialize_endian_array_uint8_t>

0800c2ec <ucdr_deserialize_sequence_uint8_t>:
 800c2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f0:	461d      	mov	r5, r3
 800c2f2:	4616      	mov	r6, r2
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	7d01      	ldrb	r1, [r0, #20]
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	f7fc fa1e 	bl	800873c <ucdr_deserialize_endian_uint32_t>
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	429e      	cmp	r6, r3
 800c304:	bf3c      	itt	cc
 800c306:	2201      	movcc	r2, #1
 800c308:	75a2      	strbcc	r2, [r4, #22]
 800c30a:	b913      	cbnz	r3, 800c312 <ucdr_deserialize_sequence_uint8_t+0x26>
 800c30c:	2001      	movs	r0, #1
 800c30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c312:	7d21      	ldrb	r1, [r4, #20]
 800c314:	463a      	mov	r2, r7
 800c316:	4620      	mov	r0, r4
 800c318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c31c:	f006 bc5c 	b.w	8012bd8 <ucdr_deserialize_endian_array_uint8_t>

0800c320 <uxr_buffer_delete_entity>:
 800c320:	b510      	push	{r4, lr}
 800c322:	2300      	movs	r3, #0
 800c324:	b08e      	sub	sp, #56	; 0x38
 800c326:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c32a:	2303      	movs	r3, #3
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	2204      	movs	r2, #4
 800c330:	ab06      	add	r3, sp, #24
 800c332:	4604      	mov	r4, r0
 800c334:	9103      	str	r1, [sp, #12]
 800c336:	f001 fa81 	bl	800d83c <uxr_prepare_stream_to_write_submessage>
 800c33a:	b918      	cbnz	r0, 800c344 <uxr_buffer_delete_entity+0x24>
 800c33c:	4604      	mov	r4, r0
 800c33e:	4620      	mov	r0, r4
 800c340:	b00e      	add	sp, #56	; 0x38
 800c342:	bd10      	pop	{r4, pc}
 800c344:	9902      	ldr	r1, [sp, #8]
 800c346:	aa05      	add	r2, sp, #20
 800c348:	4620      	mov	r0, r4
 800c34a:	f001 fbad 	bl	800daa8 <uxr_init_base_object_request>
 800c34e:	a905      	add	r1, sp, #20
 800c350:	4604      	mov	r4, r0
 800c352:	a806      	add	r0, sp, #24
 800c354:	f002 fcaa 	bl	800ecac <uxr_serialize_DELETE_Payload>
 800c358:	4620      	mov	r0, r4
 800c35a:	b00e      	add	sp, #56	; 0x38
 800c35c:	bd10      	pop	{r4, pc}
 800c35e:	bf00      	nop

0800c360 <uxr_common_create_entity>:
 800c360:	b510      	push	{r4, lr}
 800c362:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c366:	b08c      	sub	sp, #48	; 0x30
 800c368:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c36c:	f1bc 0f01 	cmp.w	ip, #1
 800c370:	bf0c      	ite	eq
 800c372:	f003 0201 	andeq.w	r2, r3, #1
 800c376:	2200      	movne	r2, #0
 800c378:	330e      	adds	r3, #14
 800c37a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c37e:	9101      	str	r1, [sp, #4]
 800c380:	441a      	add	r2, r3
 800c382:	2301      	movs	r3, #1
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	9903      	ldr	r1, [sp, #12]
 800c388:	ab04      	add	r3, sp, #16
 800c38a:	b292      	uxth	r2, r2
 800c38c:	4604      	mov	r4, r0
 800c38e:	f001 fa55 	bl	800d83c <uxr_prepare_stream_to_write_submessage>
 800c392:	b918      	cbnz	r0, 800c39c <uxr_common_create_entity+0x3c>
 800c394:	4604      	mov	r4, r0
 800c396:	4620      	mov	r0, r4
 800c398:	b00c      	add	sp, #48	; 0x30
 800c39a:	bd10      	pop	{r4, pc}
 800c39c:	9902      	ldr	r1, [sp, #8]
 800c39e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f001 fb81 	bl	800daa8 <uxr_init_base_object_request>
 800c3a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	a804      	add	r0, sp, #16
 800c3ac:	f002 fbda 	bl	800eb64 <uxr_serialize_CREATE_Payload>
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	b00c      	add	sp, #48	; 0x30
 800c3b4:	bd10      	pop	{r4, pc}
 800c3b6:	bf00      	nop

0800c3b8 <uxr_buffer_create_participant_bin>:
 800c3b8:	b570      	push	{r4, r5, r6, lr}
 800c3ba:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800c3be:	ac11      	add	r4, sp, #68	; 0x44
 800c3c0:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800c3c4:	2303      	movs	r3, #3
 800c3c6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c3ca:	7223      	strb	r3, [r4, #8]
 800c3cc:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800c3ce:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	7122      	strb	r2, [r4, #4]
 800c3da:	f88d 1014 	strb.w	r1, [sp, #20]
 800c3de:	b1cb      	cbz	r3, 800c414 <uxr_buffer_create_participant_bin+0x5c>
 800c3e0:	f88d 201c 	strb.w	r2, [sp, #28]
 800c3e4:	9308      	str	r3, [sp, #32]
 800c3e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3ea:	a915      	add	r1, sp, #84	; 0x54
 800c3ec:	a809      	add	r0, sp, #36	; 0x24
 800c3ee:	f7fc ff11 	bl	8009214 <ucdr_init_buffer>
 800c3f2:	a905      	add	r1, sp, #20
 800c3f4:	a809      	add	r0, sp, #36	; 0x24
 800c3f6:	f001 ff97 	bl	800e328 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3fc:	9600      	str	r6, [sp, #0]
 800c3fe:	9401      	str	r4, [sp, #4]
 800c400:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c404:	60e3      	str	r3, [r4, #12]
 800c406:	4628      	mov	r0, r5
 800c408:	b29b      	uxth	r3, r3
 800c40a:	f7ff ffa9 	bl	800c360 <uxr_common_create_entity>
 800c40e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800c412:	bd70      	pop	{r4, r5, r6, pc}
 800c414:	f88d 301c 	strb.w	r3, [sp, #28]
 800c418:	e7e5      	b.n	800c3e6 <uxr_buffer_create_participant_bin+0x2e>
 800c41a:	bf00      	nop

0800c41c <uxr_buffer_create_topic_bin>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800c422:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c426:	9105      	str	r1, [sp, #20]
 800c428:	4605      	mov	r5, r0
 800c42a:	a997      	add	r1, sp, #604	; 0x25c
 800c42c:	4618      	mov	r0, r3
 800c42e:	2302      	movs	r3, #2
 800c430:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800c434:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800c438:	f000 f996 	bl	800c768 <uxr_object_id_to_raw>
 800c43c:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800c43e:	9306      	str	r3, [sp, #24]
 800c440:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800c442:	930a      	str	r3, [sp, #40]	; 0x28
 800c444:	2303      	movs	r3, #3
 800c446:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c44a:	2301      	movs	r3, #1
 800c44c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c450:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c454:	a917      	add	r1, sp, #92	; 0x5c
 800c456:	2300      	movs	r3, #0
 800c458:	a80b      	add	r0, sp, #44	; 0x2c
 800c45a:	f88d 301c 	strb.w	r3, [sp, #28]
 800c45e:	f7fc fed9 	bl	8009214 <ucdr_init_buffer>
 800c462:	a906      	add	r1, sp, #24
 800c464:	a80b      	add	r0, sp, #44	; 0x2c
 800c466:	f001 ff81 	bl	800e36c <uxr_serialize_OBJK_Topic_Binary>
 800c46a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c46c:	9316      	str	r3, [sp, #88]	; 0x58
 800c46e:	ac13      	add	r4, sp, #76	; 0x4c
 800c470:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c474:	9600      	str	r6, [sp, #0]
 800c476:	9401      	str	r4, [sp, #4]
 800c478:	b29b      	uxth	r3, r3
 800c47a:	4628      	mov	r0, r5
 800c47c:	f7ff ff70 	bl	800c360 <uxr_common_create_entity>
 800c480:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800c484:	bd70      	pop	{r4, r5, r6, pc}
 800c486:	bf00      	nop

0800c488 <uxr_buffer_create_publisher_bin>:
 800c488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c48a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800c48e:	4605      	mov	r5, r0
 800c490:	9105      	str	r1, [sp, #20]
 800c492:	4618      	mov	r0, r3
 800c494:	2603      	movs	r6, #3
 800c496:	a992      	add	r1, sp, #584	; 0x248
 800c498:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c49c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800c4a0:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800c4a4:	f000 f960 	bl	800c768 <uxr_object_id_to_raw>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4ae:	a912      	add	r1, sp, #72	; 0x48
 800c4b0:	a806      	add	r0, sp, #24
 800c4b2:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800c4b6:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800c4ba:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800c4be:	f7fc fea9 	bl	8009214 <ucdr_init_buffer>
 800c4c2:	a993      	add	r1, sp, #588	; 0x24c
 800c4c4:	a806      	add	r0, sp, #24
 800c4c6:	f002 f805 	bl	800e4d4 <uxr_serialize_OBJK_Publisher_Binary>
 800c4ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4cc:	9311      	str	r3, [sp, #68]	; 0x44
 800c4ce:	ac0e      	add	r4, sp, #56	; 0x38
 800c4d0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c4d4:	9700      	str	r7, [sp, #0]
 800c4d6:	9401      	str	r4, [sp, #4]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	4628      	mov	r0, r5
 800c4dc:	f7ff ff40 	bl	800c360 <uxr_common_create_entity>
 800c4e0:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800c4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e6:	bf00      	nop

0800c4e8 <uxr_buffer_create_subscriber_bin>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800c4ee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c4f2:	9105      	str	r1, [sp, #20]
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	a992      	add	r1, sp, #584	; 0x248
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	2304      	movs	r3, #4
 800c4fc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800c500:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800c504:	f000 f930 	bl	800c768 <uxr_object_id_to_raw>
 800c508:	2300      	movs	r3, #0
 800c50a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c50e:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800c512:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800c516:	a912      	add	r1, sp, #72	; 0x48
 800c518:	2303      	movs	r3, #3
 800c51a:	a806      	add	r0, sp, #24
 800c51c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800c520:	f7fc fe78 	bl	8009214 <ucdr_init_buffer>
 800c524:	a993      	add	r1, sp, #588	; 0x24c
 800c526:	a806      	add	r0, sp, #24
 800c528:	f002 f884 	bl	800e634 <uxr_serialize_OBJK_Subscriber_Binary>
 800c52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c52e:	9311      	str	r3, [sp, #68]	; 0x44
 800c530:	ac0e      	add	r4, sp, #56	; 0x38
 800c532:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c536:	9600      	str	r6, [sp, #0]
 800c538:	9401      	str	r4, [sp, #4]
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	4628      	mov	r0, r5
 800c53e:	f7ff ff0f 	bl	800c360 <uxr_common_create_entity>
 800c542:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800c546:	bd70      	pop	{r4, r5, r6, pc}

0800c548 <uxr_buffer_create_datawriter_bin>:
 800c548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c550:	ac1d      	add	r4, sp, #116	; 0x74
 800c552:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c556:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800c55a:	9105      	str	r1, [sp, #20]
 800c55c:	4606      	mov	r6, r0
 800c55e:	a9a1      	add	r1, sp, #644	; 0x284
 800c560:	4618      	mov	r0, r3
 800c562:	2305      	movs	r3, #5
 800c564:	7123      	strb	r3, [r4, #4]
 800c566:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800c56a:	2703      	movs	r7, #3
 800c56c:	f000 f8fc 	bl	800c768 <uxr_object_id_to_raw>
 800c570:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800c572:	7227      	strb	r7, [r4, #8]
 800c574:	a90e      	add	r1, sp, #56	; 0x38
 800c576:	f000 f8f7 	bl	800c768 <uxr_object_id_to_raw>
 800c57a:	2300      	movs	r3, #0
 800c57c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800c580:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800c584:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800c588:	3d00      	subs	r5, #0
 800c58a:	bf18      	it	ne
 800c58c:	2501      	movne	r5, #1
 800c58e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800c592:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800c596:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c59a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c59e:	2301      	movs	r3, #1
 800c5a0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800c5a4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800c5a8:	bb8a      	cbnz	r2, 800c60e <uxr_buffer_create_datawriter_bin+0xc6>
 800c5aa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c5ae:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800c5b2:	f04f 0c13 	mov.w	ip, #19
 800c5b6:	250b      	movs	r5, #11
 800c5b8:	2221      	movs	r2, #33	; 0x21
 800c5ba:	2111      	movs	r1, #17
 800c5bc:	2009      	movs	r0, #9
 800c5be:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800c5c2:	b923      	cbnz	r3, 800c5ce <uxr_buffer_create_datawriter_bin+0x86>
 800c5c4:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800c5c8:	4672      	mov	r2, lr
 800c5ca:	4661      	mov	r1, ip
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d025      	beq.n	800c622 <uxr_buffer_create_datawriter_bin+0xda>
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	d029      	beq.n	800c62e <uxr_buffer_create_datawriter_bin+0xe6>
 800c5da:	b32b      	cbz	r3, 800c628 <uxr_buffer_create_datawriter_bin+0xe0>
 800c5dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5e0:	a921      	add	r1, sp, #132	; 0x84
 800c5e2:	a806      	add	r0, sp, #24
 800c5e4:	f7fc fe16 	bl	8009214 <ucdr_init_buffer>
 800c5e8:	a90e      	add	r1, sp, #56	; 0x38
 800c5ea:	a806      	add	r0, sp, #24
 800c5ec:	f002 f8d4 	bl	800e798 <uxr_serialize_OBJK_DataWriter_Binary>
 800c5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f2:	f8cd 8000 	str.w	r8, [sp]
 800c5f6:	9401      	str	r4, [sp, #4]
 800c5f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c5fc:	60e3      	str	r3, [r4, #12]
 800c5fe:	4630      	mov	r0, r6
 800c600:	b29b      	uxth	r3, r3
 800c602:	f7ff fead 	bl	800c360 <uxr_common_create_entity>
 800c606:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800c612:	f04f 0c12 	mov.w	ip, #18
 800c616:	250a      	movs	r5, #10
 800c618:	2220      	movs	r2, #32
 800c61a:	2110      	movs	r1, #16
 800c61c:	2008      	movs	r0, #8
 800c61e:	2702      	movs	r7, #2
 800c620:	e7cd      	b.n	800c5be <uxr_buffer_create_datawriter_bin+0x76>
 800c622:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800c626:	e7d9      	b.n	800c5dc <uxr_buffer_create_datawriter_bin+0x94>
 800c628:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800c62c:	e7d6      	b.n	800c5dc <uxr_buffer_create_datawriter_bin+0x94>
 800c62e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800c632:	e7d3      	b.n	800c5dc <uxr_buffer_create_datawriter_bin+0x94>

0800c634 <uxr_buffer_create_datareader_bin>:
 800c634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c638:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800c63c:	ac1f      	add	r4, sp, #124	; 0x7c
 800c63e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c642:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800c646:	9105      	str	r1, [sp, #20]
 800c648:	4606      	mov	r6, r0
 800c64a:	a9a3      	add	r1, sp, #652	; 0x28c
 800c64c:	4618      	mov	r0, r3
 800c64e:	2306      	movs	r3, #6
 800c650:	7123      	strb	r3, [r4, #4]
 800c652:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800c656:	2703      	movs	r7, #3
 800c658:	f000 f886 	bl	800c768 <uxr_object_id_to_raw>
 800c65c:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800c65e:	7227      	strb	r7, [r4, #8]
 800c660:	a90e      	add	r1, sp, #56	; 0x38
 800c662:	f000 f881 	bl	800c768 <uxr_object_id_to_raw>
 800c666:	2300      	movs	r3, #0
 800c668:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800c66c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800c670:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800c674:	3d00      	subs	r5, #0
 800c676:	bf18      	it	ne
 800c678:	2501      	movne	r5, #1
 800c67a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800c67e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800c682:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800c686:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c68a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c68e:	2301      	movs	r3, #1
 800c690:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800c694:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800c698:	bb8a      	cbnz	r2, 800c6fe <uxr_buffer_create_datareader_bin+0xca>
 800c69a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c69e:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800c6a2:	f04f 0c13 	mov.w	ip, #19
 800c6a6:	250b      	movs	r5, #11
 800c6a8:	2221      	movs	r2, #33	; 0x21
 800c6aa:	2111      	movs	r1, #17
 800c6ac:	2009      	movs	r0, #9
 800c6ae:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800c6b2:	b923      	cbnz	r3, 800c6be <uxr_buffer_create_datareader_bin+0x8a>
 800c6b4:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800c6b8:	4672      	mov	r2, lr
 800c6ba:	4661      	mov	r1, ip
 800c6bc:	4628      	mov	r0, r5
 800c6be:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d025      	beq.n	800c712 <uxr_buffer_create_datareader_bin+0xde>
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d029      	beq.n	800c71e <uxr_buffer_create_datareader_bin+0xea>
 800c6ca:	b32b      	cbz	r3, 800c718 <uxr_buffer_create_datareader_bin+0xe4>
 800c6cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6d0:	a923      	add	r1, sp, #140	; 0x8c
 800c6d2:	a806      	add	r0, sp, #24
 800c6d4:	f7fc fd9e 	bl	8009214 <ucdr_init_buffer>
 800c6d8:	a90e      	add	r1, sp, #56	; 0x38
 800c6da:	a806      	add	r0, sp, #24
 800c6dc:	f002 f820 	bl	800e720 <uxr_serialize_OBJK_DataReader_Binary>
 800c6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6e2:	f8cd 8000 	str.w	r8, [sp]
 800c6e6:	9401      	str	r4, [sp, #4]
 800c6e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c6ec:	60e3      	str	r3, [r4, #12]
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	f7ff fe35 	bl	800c360 <uxr_common_create_entity>
 800c6f6:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800c6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6fe:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800c702:	f04f 0c12 	mov.w	ip, #18
 800c706:	250a      	movs	r5, #10
 800c708:	2220      	movs	r2, #32
 800c70a:	2110      	movs	r1, #16
 800c70c:	2008      	movs	r0, #8
 800c70e:	2702      	movs	r7, #2
 800c710:	e7cd      	b.n	800c6ae <uxr_buffer_create_datareader_bin+0x7a>
 800c712:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800c716:	e7d9      	b.n	800c6cc <uxr_buffer_create_datareader_bin+0x98>
 800c718:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800c71c:	e7d6      	b.n	800c6cc <uxr_buffer_create_datareader_bin+0x98>
 800c71e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800c722:	e7d3      	b.n	800c6cc <uxr_buffer_create_datareader_bin+0x98>

0800c724 <uxr_object_id>:
 800c724:	b082      	sub	sp, #8
 800c726:	2300      	movs	r3, #0
 800c728:	f88d 1006 	strb.w	r1, [sp, #6]
 800c72c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c730:	f360 030f 	bfi	r3, r0, #0, #16
 800c734:	f362 431f 	bfi	r3, r2, #16, #16
 800c738:	4618      	mov	r0, r3
 800c73a:	b002      	add	sp, #8
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop

0800c740 <uxr_object_id_from_raw>:
 800c740:	7843      	ldrb	r3, [r0, #1]
 800c742:	7801      	ldrb	r1, [r0, #0]
 800c744:	b082      	sub	sp, #8
 800c746:	f003 020f 	and.w	r2, r3, #15
 800c74a:	f88d 2006 	strb.w	r2, [sp, #6]
 800c74e:	091b      	lsrs	r3, r3, #4
 800c750:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c754:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c758:	2000      	movs	r0, #0
 800c75a:	f363 000f 	bfi	r0, r3, #0, #16
 800c75e:	f362 401f 	bfi	r0, r2, #16, #16
 800c762:	b002      	add	sp, #8
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop

0800c768 <uxr_object_id_to_raw>:
 800c768:	4602      	mov	r2, r0
 800c76a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c76e:	b082      	sub	sp, #8
 800c770:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800c774:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c778:	f881 c000 	strb.w	ip, [r1]
 800c77c:	7048      	strb	r0, [r1, #1]
 800c77e:	b002      	add	sp, #8
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop

0800c784 <uxr_buffer_request_data>:
 800c784:	b530      	push	{r4, r5, lr}
 800c786:	b095      	sub	sp, #84	; 0x54
 800c788:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800c78c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c78e:	9303      	str	r3, [sp, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	2d00      	cmp	r5, #0
 800c794:	bf14      	ite	ne
 800c796:	2101      	movne	r1, #1
 800c798:	4611      	moveq	r1, r2
 800c79a:	4604      	mov	r4, r0
 800c79c:	f88d 301c 	strb.w	r3, [sp, #28]
 800c7a0:	f88d 201d 	strb.w	r2, [sp, #29]
 800c7a4:	f88d 201e 	strb.w	r2, [sp, #30]
 800c7a8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800c7ac:	d021      	beq.n	800c7f2 <uxr_buffer_request_data+0x6e>
 800c7ae:	682a      	ldr	r2, [r5, #0]
 800c7b0:	686b      	ldr	r3, [r5, #4]
 800c7b2:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 800c7b6:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800c7ba:	2210      	movs	r2, #16
 800c7bc:	2308      	movs	r3, #8
 800c7be:	2100      	movs	r1, #0
 800c7c0:	e9cd 3100 	strd	r3, r1, [sp]
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	9905      	ldr	r1, [sp, #20]
 800c7c8:	ab0c      	add	r3, sp, #48	; 0x30
 800c7ca:	f001 f837 	bl	800d83c <uxr_prepare_stream_to_write_submessage>
 800c7ce:	b918      	cbnz	r0, 800c7d8 <uxr_buffer_request_data+0x54>
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	b015      	add	sp, #84	; 0x54
 800c7d6:	bd30      	pop	{r4, r5, pc}
 800c7d8:	9904      	ldr	r1, [sp, #16]
 800c7da:	aa06      	add	r2, sp, #24
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f001 f963 	bl	800daa8 <uxr_init_base_object_request>
 800c7e2:	a906      	add	r1, sp, #24
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	a80c      	add	r0, sp, #48	; 0x30
 800c7e8:	f002 fb0a 	bl	800ee00 <uxr_serialize_READ_DATA_Payload>
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	b015      	add	sp, #84	; 0x54
 800c7f0:	bd30      	pop	{r4, r5, pc}
 800c7f2:	2208      	movs	r2, #8
 800c7f4:	e7e2      	b.n	800c7bc <uxr_buffer_request_data+0x38>
 800c7f6:	bf00      	nop

0800c7f8 <uxr_buffer_cancel_data>:
 800c7f8:	b510      	push	{r4, lr}
 800c7fa:	b094      	sub	sp, #80	; 0x50
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	9202      	str	r2, [sp, #8]
 800c800:	9205      	str	r2, [sp, #20]
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	2201      	movs	r2, #1
 800c806:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c80a:	f88d 301e 	strb.w	r3, [sp, #30]
 800c80e:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800c812:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800c816:	2308      	movs	r3, #8
 800c818:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	2210      	movs	r2, #16
 800c820:	ab0c      	add	r3, sp, #48	; 0x30
 800c822:	4604      	mov	r4, r0
 800c824:	9103      	str	r1, [sp, #12]
 800c826:	f001 f809 	bl	800d83c <uxr_prepare_stream_to_write_submessage>
 800c82a:	b918      	cbnz	r0, 800c834 <uxr_buffer_cancel_data+0x3c>
 800c82c:	4604      	mov	r4, r0
 800c82e:	4620      	mov	r0, r4
 800c830:	b014      	add	sp, #80	; 0x50
 800c832:	bd10      	pop	{r4, pc}
 800c834:	9905      	ldr	r1, [sp, #20]
 800c836:	aa06      	add	r2, sp, #24
 800c838:	4620      	mov	r0, r4
 800c83a:	f001 f935 	bl	800daa8 <uxr_init_base_object_request>
 800c83e:	a906      	add	r1, sp, #24
 800c840:	4604      	mov	r4, r0
 800c842:	a80c      	add	r0, sp, #48	; 0x30
 800c844:	f002 fadc 	bl	800ee00 <uxr_serialize_READ_DATA_Payload>
 800c848:	4620      	mov	r0, r4
 800c84a:	b014      	add	sp, #80	; 0x50
 800c84c:	bd10      	pop	{r4, pc}
 800c84e:	bf00      	nop

0800c850 <read_submessage_format>:
 800c850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c854:	b095      	sub	sp, #84	; 0x54
 800c856:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 800c85a:	b113      	cbz	r3, 800c862 <read_submessage_format+0x12>
 800c85c:	b015      	add	sp, #84	; 0x54
 800c85e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c862:	460c      	mov	r4, r1
 800c864:	4615      	mov	r5, r2
 800c866:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800c86a:	4607      	mov	r7, r0
 800c86c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c86e:	9004      	str	r0, [sp, #16]
 800c870:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c872:	9005      	str	r0, [sp, #20]
 800c874:	1a52      	subs	r2, r2, r1
 800c876:	a80c      	add	r0, sp, #48	; 0x30
 800c878:	4699      	mov	r9, r3
 800c87a:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800c87e:	f7fc fcc9 	bl	8009214 <ucdr_init_buffer>
 800c882:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c886:	a80c      	add	r0, sp, #48	; 0x30
 800c888:	f7fc fc98 	bl	80091bc <ucdr_set_on_full_buffer_callback>
 800c88c:	69e2      	ldr	r2, [r4, #28]
 800c88e:	b19a      	cbz	r2, 800c8b8 <read_submessage_format+0x68>
 800c890:	f1b8 0f07 	cmp.w	r8, #7
 800c894:	f882 9014 	strb.w	r9, [r2, #20]
 800c898:	d040      	beq.n	800c91c <read_submessage_format+0xcc>
 800c89a:	f1b8 0f08 	cmp.w	r8, #8
 800c89e:	d02e      	beq.n	800c8fe <read_submessage_format+0xae>
 800c8a0:	f1b8 0f06 	cmp.w	r8, #6
 800c8a4:	d011      	beq.n	800c8ca <read_submessage_format+0x7a>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	7513      	strb	r3, [r2, #20]
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f7fc fd01 	bl	80092b4 <ucdr_advance_buffer>
 800c8b2:	b015      	add	sp, #84	; 0x54
 800c8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8b8:	f1b8 0f07 	cmp.w	r8, #7
 800c8bc:	d02e      	beq.n	800c91c <read_submessage_format+0xcc>
 800c8be:	f1b8 0f08 	cmp.w	r8, #8
 800c8c2:	d01c      	beq.n	800c8fe <read_submessage_format+0xae>
 800c8c4:	f1b8 0f06 	cmp.w	r8, #6
 800c8c8:	d1ef      	bne.n	800c8aa <read_submessage_format+0x5a>
 800c8ca:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 800c8ce:	f1b8 0f00 	cmp.w	r8, #0
 800c8d2:	d011      	beq.n	800c8f8 <read_submessage_format+0xa8>
 800c8d4:	ab0c      	add	r3, sp, #48	; 0x30
 800c8d6:	e9cd 3500 	strd	r3, r5, [sp]
 800c8da:	2306      	movs	r3, #6
 800c8dc:	f88d 3016 	strb.w	r3, [sp, #22]
 800c8e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8e4:	9302      	str	r3, [sp, #8]
 800c8e6:	4632      	mov	r2, r6
 800c8e8:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	47c0      	blx	r8
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	69e2      	ldr	r2, [r4, #28]
 800c8f4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800c8f8:	2a00      	cmp	r2, #0
 800c8fa:	d1d4      	bne.n	800c8a6 <read_submessage_format+0x56>
 800c8fc:	e7d5      	b.n	800c8aa <read_submessage_format+0x5a>
 800c8fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c902:	2b00      	cmp	r3, #0
 800c904:	d0f8      	beq.n	800c8f8 <read_submessage_format+0xa8>
 800c906:	a906      	add	r1, sp, #24
 800c908:	a80c      	add	r0, sp, #48	; 0x30
 800c90a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c90e:	f002 fb3d 	bl	800ef8c <uxr_deserialize_SampleIdentity>
 800c912:	b9a0      	cbnz	r0, 800c93e <read_submessage_format+0xee>
 800c914:	69e2      	ldr	r2, [r4, #28]
 800c916:	2a00      	cmp	r2, #0
 800c918:	d1c5      	bne.n	800c8a6 <read_submessage_format+0x56>
 800c91a:	e7c6      	b.n	800c8aa <read_submessage_format+0x5a>
 800c91c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c920:	b13b      	cbz	r3, 800c932 <read_submessage_format+0xe2>
 800c922:	a906      	add	r1, sp, #24
 800c924:	a80c      	add	r0, sp, #48	; 0x30
 800c926:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c92a:	f002 f803 	bl	800e934 <uxr_deserialize_BaseObjectRequest>
 800c92e:	bb60      	cbnz	r0, 800c98a <read_submessage_format+0x13a>
 800c930:	69e2      	ldr	r2, [r4, #28]
 800c932:	68a3      	ldr	r3, [r4, #8]
 800c934:	442b      	add	r3, r5
 800c936:	60a3      	str	r3, [r4, #8]
 800c938:	2a00      	cmp	r2, #0
 800c93a:	d1b4      	bne.n	800c8a6 <read_submessage_format+0x56>
 800c93c:	e7b5      	b.n	800c8aa <read_submessage_format+0x5a>
 800c93e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800c942:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c944:	1a52      	subs	r2, r2, r1
 800c946:	eba8 0803 	sub.w	r8, r8, r3
 800c94a:	a80c      	add	r0, sp, #48	; 0x30
 800c94c:	f7fc fc62 	bl	8009214 <ucdr_init_buffer>
 800c950:	44a8      	add	r8, r5
 800c952:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c956:	a80c      	add	r0, sp, #48	; 0x30
 800c958:	f7fc fc30 	bl	80091bc <ucdr_set_on_full_buffer_callback>
 800c95c:	fa1f f888 	uxth.w	r8, r8
 800c960:	ab0c      	add	r3, sp, #48	; 0x30
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	f8cd 8004 	str.w	r8, [sp, #4]
 800c968:	2108      	movs	r1, #8
 800c96a:	f88d 1016 	strb.w	r1, [sp, #22]
 800c96e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800c972:	9102      	str	r1, [sp, #8]
 800c974:	ab06      	add	r3, sp, #24
 800c976:	4632      	mov	r2, r6
 800c978:	9905      	ldr	r1, [sp, #20]
 800c97a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 800c97e:	4638      	mov	r0, r7
 800c980:	47b0      	blx	r6
 800c982:	2301      	movs	r3, #1
 800c984:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800c988:	e7c4      	b.n	800c914 <read_submessage_format+0xc4>
 800c98a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800c98e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c990:	1a52      	subs	r2, r2, r1
 800c992:	a80c      	add	r0, sp, #48	; 0x30
 800c994:	eba8 0803 	sub.w	r8, r8, r3
 800c998:	f7fc fc3c 	bl	8009214 <ucdr_init_buffer>
 800c99c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c9a0:	a80c      	add	r0, sp, #48	; 0x30
 800c9a2:	f7fc fc0b 	bl	80091bc <ucdr_set_on_full_buffer_callback>
 800c9a6:	ab0c      	add	r3, sp, #48	; 0x30
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800c9ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c9b2:	44a8      	add	r8, r5
 800c9b4:	fa1f f888 	uxth.w	r8, r8
 800c9b8:	f8cd 8004 	str.w	r8, [sp, #4]
 800c9bc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800c9c0:	2107      	movs	r1, #7
 800c9c2:	f88d 1016 	strb.w	r1, [sp, #22]
 800c9c6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800c9ca:	9102      	str	r1, [sp, #8]
 800c9cc:	4632      	mov	r2, r6
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 800c9d4:	9905      	ldr	r1, [sp, #20]
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	47b0      	blx	r6
 800c9da:	2301      	movs	r3, #1
 800c9dc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800c9e0:	e7a6      	b.n	800c930 <read_submessage_format+0xe0>
 800c9e2:	bf00      	nop

0800c9e4 <on_get_fragmentation_info>:
 800c9e4:	b500      	push	{lr}
 800c9e6:	b08b      	sub	sp, #44	; 0x2c
 800c9e8:	4601      	mov	r1, r0
 800c9ea:	2204      	movs	r2, #4
 800c9ec:	a802      	add	r0, sp, #8
 800c9ee:	f7fc fc11 	bl	8009214 <ucdr_init_buffer>
 800c9f2:	f10d 0305 	add.w	r3, sp, #5
 800c9f6:	f10d 0206 	add.w	r2, sp, #6
 800c9fa:	a901      	add	r1, sp, #4
 800c9fc:	a802      	add	r0, sp, #8
 800c9fe:	f001 f9d5 	bl	800ddac <uxr_read_submessage_header>
 800ca02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ca06:	2b0d      	cmp	r3, #13
 800ca08:	d003      	beq.n	800ca12 <on_get_fragmentation_info+0x2e>
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	b00b      	add	sp, #44	; 0x2c
 800ca0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ca16:	f013 0f02 	tst.w	r3, #2
 800ca1a:	bf14      	ite	ne
 800ca1c:	2002      	movne	r0, #2
 800ca1e:	2001      	moveq	r0, #1
 800ca20:	b00b      	add	sp, #44	; 0x2c
 800ca22:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca26:	bf00      	nop

0800ca28 <read_submessage_get_info>:
 800ca28:	b570      	push	{r4, r5, r6, lr}
 800ca2a:	2500      	movs	r5, #0
 800ca2c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800ca30:	4604      	mov	r4, r0
 800ca32:	f44f 7224 	mov.w	r2, #656	; 0x290
 800ca36:	460e      	mov	r6, r1
 800ca38:	a810      	add	r0, sp, #64	; 0x40
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ca40:	f008 fc52 	bl	80152e8 <memset>
 800ca44:	a903      	add	r1, sp, #12
 800ca46:	4630      	mov	r0, r6
 800ca48:	f002 f91c 	bl	800ec84 <uxr_deserialize_GET_INFO_Payload>
 800ca4c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ca50:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ca54:	4620      	mov	r0, r4
 800ca56:	f001 f81f 	bl	800da98 <uxr_session_header_offset>
 800ca5a:	462b      	mov	r3, r5
 800ca5c:	9000      	str	r0, [sp, #0]
 800ca5e:	220c      	movs	r2, #12
 800ca60:	a905      	add	r1, sp, #20
 800ca62:	a808      	add	r0, sp, #32
 800ca64:	f7fc fbc4 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 800ca68:	a910      	add	r1, sp, #64	; 0x40
 800ca6a:	a808      	add	r0, sp, #32
 800ca6c:	f002 f97c 	bl	800ed68 <uxr_serialize_INFO_Payload>
 800ca70:	9b08      	ldr	r3, [sp, #32]
 800ca72:	462a      	mov	r2, r5
 800ca74:	4629      	mov	r1, r5
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 ffb8 	bl	800d9ec <uxr_stamp_session_header>
 800ca7c:	a808      	add	r0, sp, #32
 800ca7e:	f7fc fbf5 	bl	800926c <ucdr_buffer_length>
 800ca82:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ca84:	4602      	mov	r2, r0
 800ca86:	a905      	add	r1, sp, #20
 800ca88:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ca8c:	47a0      	blx	r4
 800ca8e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800ca92:	bd70      	pop	{r4, r5, r6, pc}

0800ca94 <write_submessage_acknack.isra.0>:
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	b092      	sub	sp, #72	; 0x48
 800ca98:	4605      	mov	r5, r0
 800ca9a:	460e      	mov	r6, r1
 800ca9c:	4614      	mov	r4, r2
 800ca9e:	f000 fffb 	bl	800da98 <uxr_session_header_offset>
 800caa2:	a905      	add	r1, sp, #20
 800caa4:	9000      	str	r0, [sp, #0]
 800caa6:	2300      	movs	r3, #0
 800caa8:	a80a      	add	r0, sp, #40	; 0x28
 800caaa:	2211      	movs	r2, #17
 800caac:	f7fc fba0 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 800cab0:	2218      	movs	r2, #24
 800cab2:	fb02 5404 	mla	r4, r2, r4, r5
 800cab6:	2300      	movs	r3, #0
 800cab8:	2205      	movs	r2, #5
 800caba:	3450      	adds	r4, #80	; 0x50
 800cabc:	210a      	movs	r1, #10
 800cabe:	a80a      	add	r0, sp, #40	; 0x28
 800cac0:	f001 f95a 	bl	800dd78 <uxr_buffer_submessage_header>
 800cac4:	a903      	add	r1, sp, #12
 800cac6:	4620      	mov	r0, r4
 800cac8:	f006 fb34 	bl	8013134 <uxr_compute_acknack>
 800cacc:	ba40      	rev16	r0, r0
 800cace:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cad2:	a903      	add	r1, sp, #12
 800cad4:	a80a      	add	r0, sp, #40	; 0x28
 800cad6:	f88d 6010 	strb.w	r6, [sp, #16]
 800cada:	f002 f9b5 	bl	800ee48 <uxr_serialize_ACKNACK_Payload>
 800cade:	2200      	movs	r2, #0
 800cae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae2:	4611      	mov	r1, r2
 800cae4:	4628      	mov	r0, r5
 800cae6:	f000 ff81 	bl	800d9ec <uxr_stamp_session_header>
 800caea:	a80a      	add	r0, sp, #40	; 0x28
 800caec:	f7fc fbbe 	bl	800926c <ucdr_buffer_length>
 800caf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800caf2:	4602      	mov	r2, r0
 800caf4:	a905      	add	r1, sp, #20
 800caf6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cafa:	47a0      	blx	r4
 800cafc:	b012      	add	sp, #72	; 0x48
 800cafe:	bd70      	pop	{r4, r5, r6, pc}

0800cb00 <uxr_init_session>:
 800cb00:	b510      	push	{r4, lr}
 800cb02:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800cb38 <uxr_init_session+0x38>
 800cb06:	2300      	movs	r3, #0
 800cb08:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800cb12:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800cb16:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800cb1a:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800cb1e:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800cb22:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800cb26:	2181      	movs	r1, #129	; 0x81
 800cb28:	f000 fecc 	bl	800d8c4 <uxr_init_session_info>
 800cb2c:	f104 0008 	add.w	r0, r4, #8
 800cb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb34:	f001 b83c 	b.w	800dbb0 <uxr_init_stream_storage>
	...

0800cb40 <uxr_set_status_callback>:
 800cb40:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop

0800cb48 <uxr_set_topic_callback>:
 800cb48:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop

0800cb50 <uxr_set_request_callback>:
 800cb50:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop

0800cb58 <uxr_set_reply_callback>:
 800cb58:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop

0800cb60 <uxr_create_output_best_effort_stream>:
 800cb60:	b510      	push	{r4, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	e9cd 2100 	strd	r2, r1, [sp]
 800cb68:	4604      	mov	r4, r0
 800cb6a:	f000 ff95 	bl	800da98 <uxr_session_header_offset>
 800cb6e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cb72:	4603      	mov	r3, r0
 800cb74:	f104 0008 	add.w	r0, r4, #8
 800cb78:	b004      	add	sp, #16
 800cb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb7e:	f001 b861 	b.w	800dc44 <uxr_add_output_best_effort_buffer>
 800cb82:	bf00      	nop

0800cb84 <uxr_create_output_reliable_stream>:
 800cb84:	b510      	push	{r4, lr}
 800cb86:	b088      	sub	sp, #32
 800cb88:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	9303      	str	r3, [sp, #12]
 800cb90:	f000 ff82 	bl	800da98 <uxr_session_header_offset>
 800cb94:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cb98:	9000      	str	r0, [sp, #0]
 800cb9a:	9905      	ldr	r1, [sp, #20]
 800cb9c:	f104 0008 	add.w	r0, r4, #8
 800cba0:	f001 f864 	bl	800dc6c <uxr_add_output_reliable_buffer>
 800cba4:	2200      	movs	r2, #0
 800cba6:	b2c3      	uxtb	r3, r0
 800cba8:	f363 0207 	bfi	r2, r3, #0, #8
 800cbac:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cbb0:	f363 220f 	bfi	r2, r3, #8, #8
 800cbb4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cbb8:	f363 4217 	bfi	r2, r3, #16, #8
 800cbbc:	0e03      	lsrs	r3, r0, #24
 800cbbe:	f363 621f 	bfi	r2, r3, #24, #8
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	b008      	add	sp, #32
 800cbc6:	bd10      	pop	{r4, pc}

0800cbc8 <uxr_create_input_best_effort_stream>:
 800cbc8:	b082      	sub	sp, #8
 800cbca:	3008      	adds	r0, #8
 800cbcc:	b002      	add	sp, #8
 800cbce:	f001 b867 	b.w	800dca0 <uxr_add_input_best_effort_buffer>
 800cbd2:	bf00      	nop

0800cbd4 <uxr_create_input_reliable_stream>:
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	4c0b      	ldr	r4, [pc, #44]	; (800cc08 <uxr_create_input_reliable_stream+0x34>)
 800cbda:	9400      	str	r4, [sp, #0]
 800cbdc:	3008      	adds	r0, #8
 800cbde:	f001 f875 	bl	800dccc <uxr_add_input_reliable_buffer>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	b2c3      	uxtb	r3, r0
 800cbe6:	f363 0207 	bfi	r2, r3, #0, #8
 800cbea:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cbee:	f363 220f 	bfi	r2, r3, #8, #8
 800cbf2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cbf6:	f363 4217 	bfi	r2, r3, #16, #8
 800cbfa:	0e03      	lsrs	r3, r0, #24
 800cbfc:	f363 621f 	bfi	r2, r3, #24, #8
 800cc00:	4610      	mov	r0, r2
 800cc02:	b004      	add	sp, #16
 800cc04:	bd10      	pop	{r4, pc}
 800cc06:	bf00      	nop
 800cc08:	0800c9e5 	.word	0x0800c9e5

0800cc0c <uxr_epoch_nanos>:
 800cc0c:	b510      	push	{r4, lr}
 800cc0e:	4604      	mov	r4, r0
 800cc10:	f001 f912 	bl	800de38 <uxr_nanos>
 800cc14:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800cc18:	1ac0      	subs	r0, r0, r3
 800cc1a:	eb61 0102 	sbc.w	r1, r1, r2
 800cc1e:	bd10      	pop	{r4, pc}

0800cc20 <uxr_flash_output_streams>:
 800cc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc24:	7e03      	ldrb	r3, [r0, #24]
 800cc26:	b084      	sub	sp, #16
 800cc28:	4604      	mov	r4, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d035      	beq.n	800cc9a <uxr_flash_output_streams+0x7a>
 800cc2e:	f04f 0900 	mov.w	r9, #0
 800cc32:	4648      	mov	r0, r9
 800cc34:	f10d 0802 	add.w	r8, sp, #2
 800cc38:	af03      	add	r7, sp, #12
 800cc3a:	ae02      	add	r6, sp, #8
 800cc3c:	e006      	b.n	800cc4c <uxr_flash_output_streams+0x2c>
 800cc3e:	7e23      	ldrb	r3, [r4, #24]
 800cc40:	f109 0901 	add.w	r9, r9, #1
 800cc44:	fa5f f089 	uxtb.w	r0, r9
 800cc48:	4283      	cmp	r3, r0
 800cc4a:	d926      	bls.n	800cc9a <uxr_flash_output_streams+0x7a>
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	4611      	mov	r1, r2
 800cc50:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800cc54:	f000 ff58 	bl	800db08 <uxr_stream_id>
 800cc58:	3508      	adds	r5, #8
 800cc5a:	4684      	mov	ip, r0
 800cc5c:	4643      	mov	r3, r8
 800cc5e:	463a      	mov	r2, r7
 800cc60:	4631      	mov	r1, r6
 800cc62:	4628      	mov	r0, r5
 800cc64:	f8cd c004 	str.w	ip, [sp, #4]
 800cc68:	f006 faea 	bl	8013240 <uxr_prepare_best_effort_buffer_to_send>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d0e6      	beq.n	800cc3e <uxr_flash_output_streams+0x1e>
 800cc70:	9b02      	ldr	r3, [sp, #8]
 800cc72:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cc76:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f000 feb6 	bl	800d9ec <uxr_stamp_session_header>
 800cc80:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cc82:	9a03      	ldr	r2, [sp, #12]
 800cc84:	685d      	ldr	r5, [r3, #4]
 800cc86:	6818      	ldr	r0, [r3, #0]
 800cc88:	9902      	ldr	r1, [sp, #8]
 800cc8a:	47a8      	blx	r5
 800cc8c:	f109 0901 	add.w	r9, r9, #1
 800cc90:	7e23      	ldrb	r3, [r4, #24]
 800cc92:	fa5f f089 	uxtb.w	r0, r9
 800cc96:	4283      	cmp	r3, r0
 800cc98:	d8d8      	bhi.n	800cc4c <uxr_flash_output_streams+0x2c>
 800cc9a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800cc9e:	b38b      	cbz	r3, 800cd04 <uxr_flash_output_streams+0xe4>
 800cca0:	f04f 0900 	mov.w	r9, #0
 800cca4:	f10d 0802 	add.w	r8, sp, #2
 800cca8:	af03      	add	r7, sp, #12
 800ccaa:	ae02      	add	r6, sp, #8
 800ccac:	4648      	mov	r0, r9
 800ccae:	2201      	movs	r2, #1
 800ccb0:	2102      	movs	r1, #2
 800ccb2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ccb6:	f000 ff27 	bl	800db08 <uxr_stream_id>
 800ccba:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ccbe:	3520      	adds	r5, #32
 800ccc0:	9001      	str	r0, [sp, #4]
 800ccc2:	e00d      	b.n	800cce0 <uxr_flash_output_streams+0xc0>
 800ccc4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ccc8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cccc:	9b02      	ldr	r3, [sp, #8]
 800ccce:	f000 fe8d 	bl	800d9ec <uxr_stamp_session_header>
 800ccd2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ccd4:	9a03      	ldr	r2, [sp, #12]
 800ccd6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ccda:	9902      	ldr	r1, [sp, #8]
 800ccdc:	6818      	ldr	r0, [r3, #0]
 800ccde:	47d0      	blx	sl
 800cce0:	4643      	mov	r3, r8
 800cce2:	463a      	mov	r2, r7
 800cce4:	4631      	mov	r1, r6
 800cce6:	4628      	mov	r0, r5
 800cce8:	f006 fcc8 	bl	801367c <uxr_prepare_next_reliable_buffer_to_send>
 800ccec:	4603      	mov	r3, r0
 800ccee:	4620      	mov	r0, r4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1e7      	bne.n	800ccc4 <uxr_flash_output_streams+0xa4>
 800ccf4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ccf8:	f109 0901 	add.w	r9, r9, #1
 800ccfc:	fa5f f089 	uxtb.w	r0, r9
 800cd00:	4283      	cmp	r3, r0
 800cd02:	d8d4      	bhi.n	800ccae <uxr_flash_output_streams+0x8e>
 800cd04:	b004      	add	sp, #16
 800cd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd0a:	bf00      	nop

0800cd0c <read_submessage_info>:
 800cd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd10:	460d      	mov	r5, r1
 800cd12:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800cd16:	4669      	mov	r1, sp
 800cd18:	4607      	mov	r7, r0
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f001 fec0 	bl	800eaa0 <uxr_deserialize_BaseObjectReply>
 800cd20:	a902      	add	r1, sp, #8
 800cd22:	4604      	mov	r4, r0
 800cd24:	4628      	mov	r0, r5
 800cd26:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cd2a:	f7fb f919 	bl	8007f60 <ucdr_deserialize_bool>
 800cd2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cd32:	4004      	ands	r4, r0
 800cd34:	b2e4      	uxtb	r4, r4
 800cd36:	b95b      	cbnz	r3, 800cd50 <read_submessage_info+0x44>
 800cd38:	a987      	add	r1, sp, #540	; 0x21c
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f7fb f910 	bl	8007f60 <ucdr_deserialize_bool>
 800cd40:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800cd44:	4606      	mov	r6, r0
 800cd46:	b94b      	cbnz	r3, 800cd5c <read_submessage_info+0x50>
 800cd48:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800cd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd50:	a903      	add	r1, sp, #12
 800cd52:	4628      	mov	r0, r5
 800cd54:	f001 fd4c 	bl	800e7f0 <uxr_deserialize_ObjectVariant>
 800cd58:	4004      	ands	r4, r0
 800cd5a:	e7ed      	b.n	800cd38 <read_submessage_info+0x2c>
 800cd5c:	a988      	add	r1, sp, #544	; 0x220
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f7fb f92c 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800cd64:	4234      	tst	r4, r6
 800cd66:	d0ef      	beq.n	800cd48 <read_submessage_info+0x3c>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d0ed      	beq.n	800cd48 <read_submessage_info+0x3c>
 800cd6c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800cd70:	2b0d      	cmp	r3, #13
 800cd72:	d1e9      	bne.n	800cd48 <read_submessage_info+0x3c>
 800cd74:	a98a      	add	r1, sp, #552	; 0x228
 800cd76:	4628      	mov	r0, r5
 800cd78:	f7fb fec6 	bl	8008b08 <ucdr_deserialize_int16_t>
 800cd7c:	b140      	cbz	r0, 800cd90 <read_submessage_info+0x84>
 800cd7e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	dd07      	ble.n	800cd96 <read_submessage_info+0x8a>
 800cd86:	f1b8 0f00 	cmp.w	r8, #0
 800cd8a:	bf14      	ite	ne
 800cd8c:	2001      	movne	r0, #1
 800cd8e:	2002      	moveq	r0, #2
 800cd90:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800cd94:	e7d8      	b.n	800cd48 <read_submessage_info+0x3c>
 800cd96:	2000      	movs	r0, #0
 800cd98:	e7fa      	b.n	800cd90 <read_submessage_info+0x84>
 800cd9a:	bf00      	nop

0800cd9c <read_submessage_list>:
 800cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda0:	b097      	sub	sp, #92	; 0x5c
 800cda2:	4ec1      	ldr	r6, [pc, #772]	; (800d0a8 <read_submessage_list+0x30c>)
 800cda4:	9209      	str	r2, [sp, #36]	; 0x24
 800cda6:	4604      	mov	r4, r0
 800cda8:	460d      	mov	r5, r1
 800cdaa:	f04f 0801 	mov.w	r8, #1
 800cdae:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800cdb2:	aa0c      	add	r2, sp, #48	; 0x30
 800cdb4:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800cdb8:	4628      	mov	r0, r5
 800cdba:	f000 fff7 	bl	800ddac <uxr_read_submessage_header>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	f000 813e 	beq.w	800d040 <read_submessage_list+0x2a4>
 800cdc4:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800cdc8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800cdcc:	3b02      	subs	r3, #2
 800cdce:	2b0d      	cmp	r3, #13
 800cdd0:	d8ed      	bhi.n	800cdae <read_submessage_list+0x12>
 800cdd2:	a101      	add	r1, pc, #4	; (adr r1, 800cdd8 <read_submessage_list+0x3c>)
 800cdd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdd8:	0800d037 	.word	0x0800d037
 800cddc:	0800cdaf 	.word	0x0800cdaf
 800cde0:	0800d027 	.word	0x0800d027
 800cde4:	0800cfc5 	.word	0x0800cfc5
 800cde8:	0800cfbb 	.word	0x0800cfbb
 800cdec:	0800cdaf 	.word	0x0800cdaf
 800cdf0:	0800cdaf 	.word	0x0800cdaf
 800cdf4:	0800cf1b 	.word	0x0800cf1b
 800cdf8:	0800ceab 	.word	0x0800ceab
 800cdfc:	0800ce6b 	.word	0x0800ce6b
 800ce00:	0800cdaf 	.word	0x0800cdaf
 800ce04:	0800cdaf 	.word	0x0800cdaf
 800ce08:	0800cdaf 	.word	0x0800cdaf
 800ce0c:	0800ce11 	.word	0x0800ce11
 800ce10:	a910      	add	r1, sp, #64	; 0x40
 800ce12:	4628      	mov	r0, r5
 800ce14:	f002 f868 	bl	800eee8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ce18:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800ce1c:	f1b9 0f00 	cmp.w	r9, #0
 800ce20:	f000 8116 	beq.w	800d050 <read_submessage_list+0x2b4>
 800ce24:	f001 f808 	bl	800de38 <uxr_nanos>
 800ce28:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ce30:	2100      	movs	r1, #0
 800ce32:	468c      	mov	ip, r1
 800ce34:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ce38:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ce3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce3e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800ce40:	468c      	mov	ip, r1
 800ce42:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ce46:	46e2      	mov	sl, ip
 800ce48:	46bc      	mov	ip, r7
 800ce4a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800ce4e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ce52:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ce56:	e9cd 7100 	strd	r7, r1, [sp]
 800ce5a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ce5e:	9106      	str	r1, [sp, #24]
 800ce60:	4620      	mov	r0, r4
 800ce62:	47c8      	blx	r9
 800ce64:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800ce68:	e7a1      	b.n	800cdae <read_submessage_list+0x12>
 800ce6a:	a910      	add	r1, sp, #64	; 0x40
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	f002 f829 	bl	800eec4 <uxr_deserialize_HEARTBEAT_Payload>
 800ce72:	2100      	movs	r1, #0
 800ce74:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800ce78:	f000 fe70 	bl	800db5c <uxr_stream_id_from_raw>
 800ce7c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ce80:	900f      	str	r0, [sp, #60]	; 0x3c
 800ce82:	4639      	mov	r1, r7
 800ce84:	f104 0008 	add.w	r0, r4, #8
 800ce88:	f000 ff56 	bl	800dd38 <uxr_get_input_reliable_stream>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d08e      	beq.n	800cdae <read_submessage_list+0x12>
 800ce90:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800ce94:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800ce98:	f006 f940 	bl	801311c <uxr_process_heartbeat>
 800ce9c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800cea0:	463a      	mov	r2, r7
 800cea2:	4620      	mov	r0, r4
 800cea4:	f7ff fdf6 	bl	800ca94 <write_submessage_acknack.isra.0>
 800cea8:	e781      	b.n	800cdae <read_submessage_list+0x12>
 800ceaa:	a910      	add	r1, sp, #64	; 0x40
 800ceac:	4628      	mov	r0, r5
 800ceae:	f001 ffe1 	bl	800ee74 <uxr_deserialize_ACKNACK_Payload>
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800ceb8:	f000 fe50 	bl	800db5c <uxr_stream_id_from_raw>
 800cebc:	900d      	str	r0, [sp, #52]	; 0x34
 800cebe:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800cec2:	f104 0008 	add.w	r0, r4, #8
 800cec6:	f000 ff23 	bl	800dd10 <uxr_get_output_reliable_stream>
 800ceca:	4607      	mov	r7, r0
 800cecc:	2800      	cmp	r0, #0
 800cece:	f43f af6e 	beq.w	800cdae <read_submessage_list+0x12>
 800ced2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800ced6:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800ceda:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800cede:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800cee2:	b289      	uxth	r1, r1
 800cee4:	f006 fc74 	bl	80137d0 <uxr_process_acknack>
 800cee8:	4638      	mov	r0, r7
 800ceea:	f006 fc31 	bl	8013750 <uxr_begin_output_nack_buffer_it>
 800ceee:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800cef2:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800cef6:	e006      	b.n	800cf06 <read_submessage_list+0x16a>
 800cef8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cefa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cefc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800cf00:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cf02:	6818      	ldr	r0, [r3, #0]
 800cf04:	47c8      	blx	r9
 800cf06:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800cf0a:	aa0f      	add	r2, sp, #60	; 0x3c
 800cf0c:	4651      	mov	r1, sl
 800cf0e:	4638      	mov	r0, r7
 800cf10:	f006 fc20 	bl	8013754 <uxr_next_reliable_nack_buffer_to_send>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	d1ef      	bne.n	800cef8 <read_submessage_list+0x15c>
 800cf18:	e749      	b.n	800cdae <read_submessage_list+0x12>
 800cf1a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800cf1e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800cf22:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800cf26:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800cf2a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800cf2e:	4651      	mov	r1, sl
 800cf30:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800cf34:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800cf38:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800cf3c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800cf40:	4628      	mov	r0, r5
 800cf42:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800cf46:	f001 fcf5 	bl	800e934 <uxr_deserialize_BaseObjectRequest>
 800cf4a:	4650      	mov	r0, sl
 800cf4c:	a90f      	add	r1, sp, #60	; 0x3c
 800cf4e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800cf52:	f000 fdc7 	bl	800dae4 <uxr_parse_base_object_request>
 800cf56:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800cf5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cf5c:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800cf60:	9110      	str	r1, [sp, #64]	; 0x40
 800cf62:	3f04      	subs	r7, #4
 800cf64:	f009 090e 	and.w	r9, r9, #14
 800cf68:	b2bf      	uxth	r7, r7
 800cf6a:	f1bb 0f00 	cmp.w	fp, #0
 800cf6e:	d006      	beq.n	800cf7e <read_submessage_list+0x1e2>
 800cf70:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	4652      	mov	r2, sl
 800cf78:	2300      	movs	r3, #0
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	47d8      	blx	fp
 800cf7e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800cf80:	b16a      	cbz	r2, 800cf9e <read_submessage_list+0x202>
 800cf82:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800cf84:	2100      	movs	r1, #0
 800cf86:	3802      	subs	r0, #2
 800cf88:	e002      	b.n	800cf90 <read_submessage_list+0x1f4>
 800cf8a:	3101      	adds	r1, #1
 800cf8c:	4291      	cmp	r1, r2
 800cf8e:	d006      	beq.n	800cf9e <read_submessage_list+0x202>
 800cf90:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800cf94:	4553      	cmp	r3, sl
 800cf96:	d1f8      	bne.n	800cf8a <read_submessage_list+0x1ee>
 800cf98:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	545a      	strb	r2, [r3, r1]
 800cf9e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800cfa2:	9102      	str	r1, [sp, #8]
 800cfa4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cfa6:	9101      	str	r1, [sp, #4]
 800cfa8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cfaa:	9100      	str	r1, [sp, #0]
 800cfac:	464b      	mov	r3, r9
 800cfae:	463a      	mov	r2, r7
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f7ff fc4c 	bl	800c850 <read_submessage_format>
 800cfb8:	e6f9      	b.n	800cdae <read_submessage_list+0x12>
 800cfba:	4629      	mov	r1, r5
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f7ff fea5 	bl	800cd0c <read_submessage_info>
 800cfc2:	e6f4      	b.n	800cdae <read_submessage_list+0x12>
 800cfc4:	2a00      	cmp	r2, #0
 800cfc6:	d03e      	beq.n	800d046 <read_submessage_list+0x2aa>
 800cfc8:	a910      	add	r1, sp, #64	; 0x40
 800cfca:	4628      	mov	r0, r5
 800cfcc:	f001 feae 	bl	800ed2c <uxr_deserialize_STATUS_Payload>
 800cfd0:	a90e      	add	r1, sp, #56	; 0x38
 800cfd2:	aa0d      	add	r2, sp, #52	; 0x34
 800cfd4:	a810      	add	r0, sp, #64	; 0x40
 800cfd6:	f000 fd85 	bl	800dae4 <uxr_parse_base_object_request>
 800cfda:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800cfde:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cfe0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800cfe4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800cfe8:	910f      	str	r1, [sp, #60]	; 0x3c
 800cfea:	f1ba 0f00 	cmp.w	sl, #0
 800cfee:	d006      	beq.n	800cffe <read_submessage_list+0x262>
 800cff0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	463a      	mov	r2, r7
 800cff8:	464b      	mov	r3, r9
 800cffa:	4620      	mov	r0, r4
 800cffc:	47d0      	blx	sl
 800cffe:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d000:	2a00      	cmp	r2, #0
 800d002:	f43f aed4 	beq.w	800cdae <read_submessage_list+0x12>
 800d006:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d008:	2100      	movs	r1, #0
 800d00a:	3802      	subs	r0, #2
 800d00c:	e003      	b.n	800d016 <read_submessage_list+0x27a>
 800d00e:	3101      	adds	r1, #1
 800d010:	4291      	cmp	r1, r2
 800d012:	f43f aecc 	beq.w	800cdae <read_submessage_list+0x12>
 800d016:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d01a:	42bb      	cmp	r3, r7
 800d01c:	d1f7      	bne.n	800d00e <read_submessage_list+0x272>
 800d01e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d020:	f803 9001 	strb.w	r9, [r3, r1]
 800d024:	e6c3      	b.n	800cdae <read_submessage_list+0x12>
 800d026:	2a00      	cmp	r2, #0
 800d028:	f47f aec1 	bne.w	800cdae <read_submessage_list+0x12>
 800d02c:	4629      	mov	r1, r5
 800d02e:	4620      	mov	r0, r4
 800d030:	f000 fc9e 	bl	800d970 <uxr_read_create_session_status>
 800d034:	e6bb      	b.n	800cdae <read_submessage_list+0x12>
 800d036:	4629      	mov	r1, r5
 800d038:	4620      	mov	r0, r4
 800d03a:	f7ff fcf5 	bl	800ca28 <read_submessage_get_info>
 800d03e:	e6b6      	b.n	800cdae <read_submessage_list+0x12>
 800d040:	b017      	add	sp, #92	; 0x5c
 800d042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d046:	4629      	mov	r1, r5
 800d048:	4620      	mov	r0, r4
 800d04a:	f000 fc9d 	bl	800d988 <uxr_read_delete_session_status>
 800d04e:	e6ae      	b.n	800cdae <read_submessage_list+0x12>
 800d050:	f000 fef2 	bl	800de38 <uxr_nanos>
 800d054:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d056:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d058:	464f      	mov	r7, r9
 800d05a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d05e:	1812      	adds	r2, r2, r0
 800d060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d062:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d064:	eb47 0101 	adc.w	r1, r7, r1
 800d068:	464f      	mov	r7, r9
 800d06a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d06e:	463b      	mov	r3, r7
 800d070:	4684      	mov	ip, r0
 800d072:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800d076:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d07a:	eb1c 0c00 	adds.w	ip, ip, r0
 800d07e:	464f      	mov	r7, r9
 800d080:	eb43 0307 	adc.w	r3, r3, r7
 800d084:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d088:	eb61 0303 	sbc.w	r3, r1, r3
 800d08c:	0fda      	lsrs	r2, r3, #31
 800d08e:	eb12 020c 	adds.w	r2, r2, ip
 800d092:	f143 0300 	adc.w	r3, r3, #0
 800d096:	0852      	lsrs	r2, r2, #1
 800d098:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d09c:	105b      	asrs	r3, r3, #1
 800d09e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800d0a2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800d0a6:	e6dd      	b.n	800ce64 <read_submessage_list+0xc8>
 800d0a8:	3b9aca00 	.word	0x3b9aca00

0800d0ac <listen_message_reliably>:
 800d0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b0:	1e0b      	subs	r3, r1, #0
 800d0b2:	b09d      	sub	sp, #116	; 0x74
 800d0b4:	bfb8      	it	lt
 800d0b6:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800d0ba:	4680      	mov	r8, r0
 800d0bc:	9305      	str	r3, [sp, #20]
 800d0be:	f000 fea1 	bl	800de04 <uxr_millis>
 800d0c2:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800d0c6:	4681      	mov	r9, r0
 800d0c8:	2a00      	cmp	r2, #0
 800d0ca:	f000 80a1 	beq.w	800d210 <listen_message_reliably+0x164>
 800d0ce:	2600      	movs	r6, #0
 800d0d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d0d4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d0d8:	9303      	str	r3, [sp, #12]
 800d0da:	4630      	mov	r0, r6
 800d0dc:	460f      	mov	r7, r1
 800d0de:	e00f      	b.n	800d100 <listen_message_reliably+0x54>
 800d0e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d0e4:	9903      	ldr	r1, [sp, #12]
 800d0e6:	455a      	cmp	r2, fp
 800d0e8:	f106 0601 	add.w	r6, r6, #1
 800d0ec:	eb73 0101 	sbcs.w	r1, r3, r1
 800d0f0:	b2f0      	uxtb	r0, r6
 800d0f2:	da01      	bge.n	800d0f8 <listen_message_reliably+0x4c>
 800d0f4:	4693      	mov	fp, r2
 800d0f6:	9303      	str	r3, [sp, #12]
 800d0f8:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d0fc:	4283      	cmp	r3, r0
 800d0fe:	d960      	bls.n	800d1c2 <listen_message_reliably+0x116>
 800d100:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d104:	2102      	movs	r1, #2
 800d106:	2201      	movs	r2, #1
 800d108:	f000 fcfe 	bl	800db08 <uxr_stream_id>
 800d10c:	00e4      	lsls	r4, r4, #3
 800d10e:	f104 0520 	add.w	r5, r4, #32
 800d112:	4445      	add	r5, r8
 800d114:	4601      	mov	r1, r0
 800d116:	463b      	mov	r3, r7
 800d118:	464a      	mov	r2, r9
 800d11a:	4628      	mov	r0, r5
 800d11c:	9109      	str	r1, [sp, #36]	; 0x24
 800d11e:	f006 faed 	bl	80136fc <uxr_update_output_stream_heartbeat_timestamp>
 800d122:	eb08 0304 	add.w	r3, r8, r4
 800d126:	2800      	cmp	r0, #0
 800d128:	d0da      	beq.n	800d0e0 <listen_message_reliably+0x34>
 800d12a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d12e:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800d132:	9304      	str	r3, [sp, #16]
 800d134:	4640      	mov	r0, r8
 800d136:	f000 fcaf 	bl	800da98 <uxr_session_header_offset>
 800d13a:	3501      	adds	r5, #1
 800d13c:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800d140:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d144:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d148:	2300      	movs	r3, #0
 800d14a:	2211      	movs	r2, #17
 800d14c:	9000      	str	r0, [sp, #0]
 800d14e:	a90c      	add	r1, sp, #48	; 0x30
 800d150:	4650      	mov	r0, sl
 800d152:	f7fc f84d 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 800d156:	2300      	movs	r3, #0
 800d158:	2205      	movs	r2, #5
 800d15a:	210b      	movs	r1, #11
 800d15c:	4650      	mov	r0, sl
 800d15e:	f000 fe0b 	bl	800dd78 <uxr_buffer_submessage_header>
 800d162:	8968      	ldrh	r0, [r5, #10]
 800d164:	2101      	movs	r1, #1
 800d166:	f006 fb6b 	bl	8013840 <uxr_seq_num_add>
 800d16a:	892b      	ldrh	r3, [r5, #8]
 800d16c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d170:	4602      	mov	r2, r0
 800d172:	9b04      	ldr	r3, [sp, #16]
 800d174:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d178:	a90a      	add	r1, sp, #40	; 0x28
 800d17a:	4650      	mov	r0, sl
 800d17c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d180:	f001 fe8c 	bl	800ee9c <uxr_serialize_HEARTBEAT_Payload>
 800d184:	2200      	movs	r2, #0
 800d186:	4611      	mov	r1, r2
 800d188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d18a:	4640      	mov	r0, r8
 800d18c:	f000 fc2e 	bl	800d9ec <uxr_stamp_session_header>
 800d190:	4650      	mov	r0, sl
 800d192:	f7fc f86b 	bl	800926c <ucdr_buffer_length>
 800d196:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800d19a:	4602      	mov	r2, r0
 800d19c:	a90c      	add	r1, sp, #48	; 0x30
 800d19e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d1a2:	4444      	add	r4, r8
 800d1a4:	47a8      	blx	r5
 800d1a6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800d1aa:	9903      	ldr	r1, [sp, #12]
 800d1ac:	455a      	cmp	r2, fp
 800d1ae:	f106 0601 	add.w	r6, r6, #1
 800d1b2:	eb73 0101 	sbcs.w	r1, r3, r1
 800d1b6:	b2f0      	uxtb	r0, r6
 800d1b8:	db9c      	blt.n	800d0f4 <listen_message_reliably+0x48>
 800d1ba:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d1be:	4283      	cmp	r3, r0
 800d1c0:	d89e      	bhi.n	800d100 <listen_message_reliably+0x54>
 800d1c2:	9a03      	ldr	r2, [sp, #12]
 800d1c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	bf08      	it	eq
 800d1cc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800d1d0:	d01e      	beq.n	800d210 <listen_message_reliably+0x164>
 800d1d2:	ebab 0309 	sub.w	r3, fp, r9
 800d1d6:	9905      	ldr	r1, [sp, #20]
 800d1d8:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	bf08      	it	eq
 800d1e0:	2301      	moveq	r3, #1
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	bfa8      	it	ge
 800d1e6:	4619      	movge	r1, r3
 800d1e8:	6894      	ldr	r4, [r2, #8]
 800d1ea:	6810      	ldr	r0, [r2, #0]
 800d1ec:	4689      	mov	r9, r1
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	aa08      	add	r2, sp, #32
 800d1f2:	a907      	add	r1, sp, #28
 800d1f4:	47a0      	blx	r4
 800d1f6:	b968      	cbnz	r0, 800d214 <listen_message_reliably+0x168>
 800d1f8:	9b05      	ldr	r3, [sp, #20]
 800d1fa:	eba3 0309 	sub.w	r3, r3, r9
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	9305      	str	r3, [sp, #20]
 800d202:	f73f af5c 	bgt.w	800d0be <listen_message_reliably+0x12>
 800d206:	4604      	mov	r4, r0
 800d208:	4620      	mov	r0, r4
 800d20a:	b01d      	add	sp, #116	; 0x74
 800d20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d210:	9b05      	ldr	r3, [sp, #20]
 800d212:	e7e0      	b.n	800d1d6 <listen_message_reliably+0x12a>
 800d214:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d218:	4604      	mov	r4, r0
 800d21a:	a80c      	add	r0, sp, #48	; 0x30
 800d21c:	f7fb fffa 	bl	8009214 <ucdr_init_buffer>
 800d220:	2500      	movs	r5, #0
 800d222:	f10d 031a 	add.w	r3, sp, #26
 800d226:	aa06      	add	r2, sp, #24
 800d228:	a90c      	add	r1, sp, #48	; 0x30
 800d22a:	4640      	mov	r0, r8
 800d22c:	f88d 5018 	strb.w	r5, [sp, #24]
 800d230:	f000 fbf0 	bl	800da14 <uxr_read_session_header>
 800d234:	b918      	cbnz	r0, 800d23e <listen_message_reliably+0x192>
 800d236:	4620      	mov	r0, r4
 800d238:	b01d      	add	sp, #116	; 0x74
 800d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23e:	4629      	mov	r1, r5
 800d240:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d244:	f000 fc8a 	bl	800db5c <uxr_stream_id_from_raw>
 800d248:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d24c:	2d01      	cmp	r5, #1
 800d24e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d252:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d256:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d25a:	d04b      	beq.n	800d2f4 <listen_message_reliably+0x248>
 800d25c:	2d02      	cmp	r5, #2
 800d25e:	d00f      	beq.n	800d280 <listen_message_reliably+0x1d4>
 800d260:	2d00      	cmp	r5, #0
 800d262:	d1e8      	bne.n	800d236 <listen_message_reliably+0x18a>
 800d264:	4629      	mov	r1, r5
 800d266:	4628      	mov	r0, r5
 800d268:	f000 fc78 	bl	800db5c <uxr_stream_id_from_raw>
 800d26c:	a90c      	add	r1, sp, #48	; 0x30
 800d26e:	4602      	mov	r2, r0
 800d270:	4640      	mov	r0, r8
 800d272:	920a      	str	r2, [sp, #40]	; 0x28
 800d274:	f7ff fd92 	bl	800cd9c <read_submessage_list>
 800d278:	4620      	mov	r0, r4
 800d27a:	b01d      	add	sp, #116	; 0x74
 800d27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d280:	4631      	mov	r1, r6
 800d282:	f108 0008 	add.w	r0, r8, #8
 800d286:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d28a:	f000 fd55 	bl	800dd38 <uxr_get_input_reliable_stream>
 800d28e:	4607      	mov	r7, r0
 800d290:	b338      	cbz	r0, 800d2e2 <listen_message_reliably+0x236>
 800d292:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d294:	9203      	str	r2, [sp, #12]
 800d296:	a80c      	add	r0, sp, #48	; 0x30
 800d298:	f7fb ffec 	bl	8009274 <ucdr_buffer_remaining>
 800d29c:	4603      	mov	r3, r0
 800d29e:	f10d 0019 	add.w	r0, sp, #25
 800d2a2:	9000      	str	r0, [sp, #0]
 800d2a4:	9a03      	ldr	r2, [sp, #12]
 800d2a6:	4651      	mov	r1, sl
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	f005 fe3d 	bl	8012f28 <uxr_receive_reliable_message>
 800d2ae:	b1c0      	cbz	r0, 800d2e2 <listen_message_reliably+0x236>
 800d2b0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d2b4:	b393      	cbz	r3, 800d31c <listen_message_reliably+0x270>
 800d2b6:	ad14      	add	r5, sp, #80	; 0x50
 800d2b8:	f04f 0a02 	mov.w	sl, #2
 800d2bc:	e00a      	b.n	800d2d4 <listen_message_reliably+0x228>
 800d2be:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800d2c2:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800d2c6:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800d2ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4640      	mov	r0, r8
 800d2d0:	f7ff fd64 	bl	800cd9c <read_submessage_list>
 800d2d4:	2204      	movs	r2, #4
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	4638      	mov	r0, r7
 800d2da:	f005 fea5 	bl	8013028 <uxr_next_input_reliable_buffer_available>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d1ed      	bne.n	800d2be <listen_message_reliably+0x212>
 800d2e2:	4640      	mov	r0, r8
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	f7ff fbd4 	bl	800ca94 <write_submessage_acknack.isra.0>
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	b01d      	add	sp, #116	; 0x74
 800d2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f4:	4631      	mov	r1, r6
 800d2f6:	f108 0008 	add.w	r0, r8, #8
 800d2fa:	f000 fd13 	bl	800dd24 <uxr_get_input_best_effort_stream>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d099      	beq.n	800d236 <listen_message_reliably+0x18a>
 800d302:	4651      	mov	r1, sl
 800d304:	f005 fd7c 	bl	8012e00 <uxr_receive_best_effort_message>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d094      	beq.n	800d236 <listen_message_reliably+0x18a>
 800d30c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800d310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d312:	a90c      	add	r1, sp, #48	; 0x30
 800d314:	4640      	mov	r0, r8
 800d316:	f7ff fd41 	bl	800cd9c <read_submessage_list>
 800d31a:	e78c      	b.n	800d236 <listen_message_reliably+0x18a>
 800d31c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800d320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d322:	a90c      	add	r1, sp, #48	; 0x30
 800d324:	4640      	mov	r0, r8
 800d326:	f7ff fd39 	bl	800cd9c <read_submessage_list>
 800d32a:	e7c4      	b.n	800d2b6 <listen_message_reliably+0x20a>

0800d32c <uxr_run_session_timeout>:
 800d32c:	b570      	push	{r4, r5, r6, lr}
 800d32e:	4604      	mov	r4, r0
 800d330:	460d      	mov	r5, r1
 800d332:	f000 fd67 	bl	800de04 <uxr_millis>
 800d336:	4606      	mov	r6, r0
 800d338:	4620      	mov	r0, r4
 800d33a:	f7ff fc71 	bl	800cc20 <uxr_flash_output_streams>
 800d33e:	4629      	mov	r1, r5
 800d340:	4620      	mov	r0, r4
 800d342:	f7ff feb3 	bl	800d0ac <listen_message_reliably>
 800d346:	f000 fd5d 	bl	800de04 <uxr_millis>
 800d34a:	1b83      	subs	r3, r0, r6
 800d34c:	1ae9      	subs	r1, r5, r3
 800d34e:	2900      	cmp	r1, #0
 800d350:	dcf6      	bgt.n	800d340 <uxr_run_session_timeout+0x14>
 800d352:	f104 0008 	add.w	r0, r4, #8
 800d356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d35a:	f000 bcf7 	b.w	800dd4c <uxr_output_streams_confirmed>
 800d35e:	bf00      	nop

0800d360 <uxr_run_session_until_data>:
 800d360:	b570      	push	{r4, r5, r6, lr}
 800d362:	4604      	mov	r4, r0
 800d364:	460d      	mov	r5, r1
 800d366:	f000 fd4d 	bl	800de04 <uxr_millis>
 800d36a:	4606      	mov	r6, r0
 800d36c:	4620      	mov	r0, r4
 800d36e:	f7ff fc57 	bl	800cc20 <uxr_flash_output_streams>
 800d372:	2300      	movs	r3, #0
 800d374:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800d378:	4629      	mov	r1, r5
 800d37a:	e005      	b.n	800d388 <uxr_run_session_until_data+0x28>
 800d37c:	f000 fd42 	bl	800de04 <uxr_millis>
 800d380:	1b83      	subs	r3, r0, r6
 800d382:	1ae9      	subs	r1, r5, r3
 800d384:	2900      	cmp	r1, #0
 800d386:	dd07      	ble.n	800d398 <uxr_run_session_until_data+0x38>
 800d388:	4620      	mov	r0, r4
 800d38a:	f7ff fe8f 	bl	800d0ac <listen_message_reliably>
 800d38e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d392:	2800      	cmp	r0, #0
 800d394:	d0f2      	beq.n	800d37c <uxr_run_session_until_data+0x1c>
 800d396:	bd70      	pop	{r4, r5, r6, pc}
 800d398:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d39c:	bd70      	pop	{r4, r5, r6, pc}
 800d39e:	bf00      	nop

0800d3a0 <uxr_run_session_until_confirm_delivery>:
 800d3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a4:	4606      	mov	r6, r0
 800d3a6:	460d      	mov	r5, r1
 800d3a8:	f000 fd2c 	bl	800de04 <uxr_millis>
 800d3ac:	4607      	mov	r7, r0
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	f7ff fc36 	bl	800cc20 <uxr_flash_output_streams>
 800d3b4:	2d00      	cmp	r5, #0
 800d3b6:	f106 0808 	add.w	r8, r6, #8
 800d3ba:	bfa8      	it	ge
 800d3bc:	462c      	movge	r4, r5
 800d3be:	da07      	bge.n	800d3d0 <uxr_run_session_until_confirm_delivery+0x30>
 800d3c0:	e00e      	b.n	800d3e0 <uxr_run_session_until_confirm_delivery+0x40>
 800d3c2:	f7ff fe73 	bl	800d0ac <listen_message_reliably>
 800d3c6:	f000 fd1d 	bl	800de04 <uxr_millis>
 800d3ca:	1bc3      	subs	r3, r0, r7
 800d3cc:	1aec      	subs	r4, r5, r3
 800d3ce:	d407      	bmi.n	800d3e0 <uxr_run_session_until_confirm_delivery+0x40>
 800d3d0:	4640      	mov	r0, r8
 800d3d2:	f000 fcbb 	bl	800dd4c <uxr_output_streams_confirmed>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	4621      	mov	r1, r4
 800d3da:	4630      	mov	r0, r6
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d0f0      	beq.n	800d3c2 <uxr_run_session_until_confirm_delivery+0x22>
 800d3e0:	4640      	mov	r0, r8
 800d3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e6:	f000 bcb1 	b.w	800dd4c <uxr_output_streams_confirmed>
 800d3ea:	bf00      	nop

0800d3ec <uxr_run_session_until_all_status>:
 800d3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3f0:	9c08      	ldr	r4, [sp, #32]
 800d3f2:	4606      	mov	r6, r0
 800d3f4:	460f      	mov	r7, r1
 800d3f6:	4691      	mov	r9, r2
 800d3f8:	461d      	mov	r5, r3
 800d3fa:	f7ff fc11 	bl	800cc20 <uxr_flash_output_streams>
 800d3fe:	b124      	cbz	r4, 800d40a <uxr_run_session_until_all_status+0x1e>
 800d400:	4622      	mov	r2, r4
 800d402:	21ff      	movs	r1, #255	; 0xff
 800d404:	4628      	mov	r0, r5
 800d406:	f007 ff6f 	bl	80152e8 <memset>
 800d40a:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800d40e:	67f4      	str	r4, [r6, #124]	; 0x7c
 800d410:	f000 fcf8 	bl	800de04 <uxr_millis>
 800d414:	3d01      	subs	r5, #1
 800d416:	f1a9 0902 	sub.w	r9, r9, #2
 800d41a:	4680      	mov	r8, r0
 800d41c:	4639      	mov	r1, r7
 800d41e:	4630      	mov	r0, r6
 800d420:	f7ff fe44 	bl	800d0ac <listen_message_reliably>
 800d424:	f000 fcee 	bl	800de04 <uxr_millis>
 800d428:	eba0 0008 	sub.w	r0, r0, r8
 800d42c:	1a39      	subs	r1, r7, r0
 800d42e:	b344      	cbz	r4, 800d482 <uxr_run_session_until_all_status+0x96>
 800d430:	4628      	mov	r0, r5
 800d432:	46ac      	mov	ip, r5
 800d434:	2301      	movs	r3, #1
 800d436:	e002      	b.n	800d43e <uxr_run_session_until_all_status+0x52>
 800d438:	42a3      	cmp	r3, r4
 800d43a:	d20d      	bcs.n	800d458 <uxr_run_session_until_all_status+0x6c>
 800d43c:	3301      	adds	r3, #1
 800d43e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d442:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800d446:	d1f7      	bne.n	800d438 <uxr_run_session_until_all_status+0x4c>
 800d448:	42a3      	cmp	r3, r4
 800d44a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d44e:	d213      	bcs.n	800d478 <uxr_run_session_until_all_status+0x8c>
 800d450:	2a00      	cmp	r2, #0
 800d452:	d0f3      	beq.n	800d43c <uxr_run_session_until_all_status+0x50>
 800d454:	2900      	cmp	r1, #0
 800d456:	dce2      	bgt.n	800d41e <uxr_run_session_until_all_status+0x32>
 800d458:	2300      	movs	r3, #0
 800d45a:	67f3      	str	r3, [r6, #124]	; 0x7c
 800d45c:	442c      	add	r4, r5
 800d45e:	e001      	b.n	800d464 <uxr_run_session_until_all_status+0x78>
 800d460:	2b01      	cmp	r3, #1
 800d462:	d812      	bhi.n	800d48a <uxr_run_session_until_all_status+0x9e>
 800d464:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d468:	4284      	cmp	r4, r0
 800d46a:	d1f9      	bne.n	800d460 <uxr_run_session_until_all_status+0x74>
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	bf8c      	ite	hi
 800d470:	2000      	movhi	r0, #0
 800d472:	2001      	movls	r0, #1
 800d474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d478:	2900      	cmp	r1, #0
 800d47a:	dded      	ble.n	800d458 <uxr_run_session_until_all_status+0x6c>
 800d47c:	2a00      	cmp	r2, #0
 800d47e:	d1ce      	bne.n	800d41e <uxr_run_session_until_all_status+0x32>
 800d480:	e7ea      	b.n	800d458 <uxr_run_session_until_all_status+0x6c>
 800d482:	67f4      	str	r4, [r6, #124]	; 0x7c
 800d484:	2001      	movs	r0, #1
 800d486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d48a:	2000      	movs	r0, #0
 800d48c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d490 <wait_session_status>:
 800d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d494:	4604      	mov	r4, r0
 800d496:	b09d      	sub	sp, #116	; 0x74
 800d498:	20ff      	movs	r0, #255	; 0xff
 800d49a:	7160      	strb	r0, [r4, #5]
 800d49c:	9303      	str	r3, [sp, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f000 80b6 	beq.w	800d610 <wait_session_status+0x180>
 800d4a4:	468a      	mov	sl, r1
 800d4a6:	4691      	mov	r9, r2
 800d4a8:	f04f 0b00 	mov.w	fp, #0
 800d4ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d4ae:	464a      	mov	r2, r9
 800d4b0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d4b4:	4651      	mov	r1, sl
 800d4b6:	47a8      	blx	r5
 800d4b8:	f000 fca4 	bl	800de04 <uxr_millis>
 800d4bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d4c0:	4605      	mov	r5, r0
 800d4c2:	e009      	b.n	800d4d8 <wait_session_status+0x48>
 800d4c4:	f000 fc9e 	bl	800de04 <uxr_millis>
 800d4c8:	1b40      	subs	r0, r0, r5
 800d4ca:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	dd40      	ble.n	800d554 <wait_session_status+0xc4>
 800d4d2:	7960      	ldrb	r0, [r4, #5]
 800d4d4:	28ff      	cmp	r0, #255	; 0xff
 800d4d6:	d145      	bne.n	800d564 <wait_session_status+0xd4>
 800d4d8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d4da:	a908      	add	r1, sp, #32
 800d4dc:	6896      	ldr	r6, [r2, #8]
 800d4de:	6810      	ldr	r0, [r2, #0]
 800d4e0:	aa09      	add	r2, sp, #36	; 0x24
 800d4e2:	47b0      	blx	r6
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d0ed      	beq.n	800d4c4 <wait_session_status+0x34>
 800d4e8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d4ec:	a80c      	add	r0, sp, #48	; 0x30
 800d4ee:	f7fb fe91 	bl	8009214 <ucdr_init_buffer>
 800d4f2:	2600      	movs	r6, #0
 800d4f4:	f10d 031e 	add.w	r3, sp, #30
 800d4f8:	aa07      	add	r2, sp, #28
 800d4fa:	a90c      	add	r1, sp, #48	; 0x30
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f88d 601c 	strb.w	r6, [sp, #28]
 800d502:	f000 fa87 	bl	800da14 <uxr_read_session_header>
 800d506:	2800      	cmp	r0, #0
 800d508:	d0dc      	beq.n	800d4c4 <wait_session_status+0x34>
 800d50a:	4631      	mov	r1, r6
 800d50c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d510:	f000 fb24 	bl	800db5c <uxr_stream_id_from_raw>
 800d514:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d518:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d51c:	9302      	str	r3, [sp, #8]
 800d51e:	2f01      	cmp	r7, #1
 800d520:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800d524:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d528:	d05c      	beq.n	800d5e4 <wait_session_status+0x154>
 800d52a:	2f02      	cmp	r7, #2
 800d52c:	d020      	beq.n	800d570 <wait_session_status+0xe0>
 800d52e:	2f00      	cmp	r7, #0
 800d530:	d1c8      	bne.n	800d4c4 <wait_session_status+0x34>
 800d532:	4639      	mov	r1, r7
 800d534:	4638      	mov	r0, r7
 800d536:	f000 fb11 	bl	800db5c <uxr_stream_id_from_raw>
 800d53a:	a90c      	add	r1, sp, #48	; 0x30
 800d53c:	4602      	mov	r2, r0
 800d53e:	900b      	str	r0, [sp, #44]	; 0x2c
 800d540:	4620      	mov	r0, r4
 800d542:	f7ff fc2b 	bl	800cd9c <read_submessage_list>
 800d546:	f000 fc5d 	bl	800de04 <uxr_millis>
 800d54a:	1b40      	subs	r0, r0, r5
 800d54c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d550:	2b00      	cmp	r3, #0
 800d552:	dcbe      	bgt.n	800d4d2 <wait_session_status+0x42>
 800d554:	9b03      	ldr	r3, [sp, #12]
 800d556:	7960      	ldrb	r0, [r4, #5]
 800d558:	f10b 0b01 	add.w	fp, fp, #1
 800d55c:	455b      	cmp	r3, fp
 800d55e:	d001      	beq.n	800d564 <wait_session_status+0xd4>
 800d560:	28ff      	cmp	r0, #255	; 0xff
 800d562:	d0a3      	beq.n	800d4ac <wait_session_status+0x1c>
 800d564:	38ff      	subs	r0, #255	; 0xff
 800d566:	bf18      	it	ne
 800d568:	2001      	movne	r0, #1
 800d56a:	b01d      	add	sp, #116	; 0x74
 800d56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d570:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d574:	9304      	str	r3, [sp, #16]
 800d576:	4631      	mov	r1, r6
 800d578:	f104 0008 	add.w	r0, r4, #8
 800d57c:	f000 fbdc 	bl	800dd38 <uxr_get_input_reliable_stream>
 800d580:	4680      	mov	r8, r0
 800d582:	b348      	cbz	r0, 800d5d8 <wait_session_status+0x148>
 800d584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d586:	9205      	str	r2, [sp, #20]
 800d588:	a80c      	add	r0, sp, #48	; 0x30
 800d58a:	f7fb fe73 	bl	8009274 <ucdr_buffer_remaining>
 800d58e:	4603      	mov	r3, r0
 800d590:	f10d 001d 	add.w	r0, sp, #29
 800d594:	9000      	str	r0, [sp, #0]
 800d596:	9a05      	ldr	r2, [sp, #20]
 800d598:	9902      	ldr	r1, [sp, #8]
 800d59a:	4640      	mov	r0, r8
 800d59c:	f005 fcc4 	bl	8012f28 <uxr_receive_reliable_message>
 800d5a0:	b1d0      	cbz	r0, 800d5d8 <wait_session_status+0x148>
 800d5a2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d03a      	beq.n	800d620 <wait_session_status+0x190>
 800d5aa:	9f04      	ldr	r7, [sp, #16]
 800d5ac:	e00a      	b.n	800d5c4 <wait_session_status+0x134>
 800d5ae:	f04f 0302 	mov.w	r3, #2
 800d5b2:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800d5b6:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800d5ba:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800d5be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5c0:	f7ff fbec 	bl	800cd9c <read_submessage_list>
 800d5c4:	a914      	add	r1, sp, #80	; 0x50
 800d5c6:	2204      	movs	r2, #4
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	f005 fd2d 	bl	8013028 <uxr_next_input_reliable_buffer_available>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	a914      	add	r1, sp, #80	; 0x50
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1ea      	bne.n	800d5ae <wait_session_status+0x11e>
 800d5d8:	9904      	ldr	r1, [sp, #16]
 800d5da:	4632      	mov	r2, r6
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f7ff fa59 	bl	800ca94 <write_submessage_acknack.isra.0>
 800d5e2:	e76f      	b.n	800d4c4 <wait_session_status+0x34>
 800d5e4:	4631      	mov	r1, r6
 800d5e6:	f104 0008 	add.w	r0, r4, #8
 800d5ea:	f000 fb9b 	bl	800dd24 <uxr_get_input_best_effort_stream>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	f43f af68 	beq.w	800d4c4 <wait_session_status+0x34>
 800d5f4:	9902      	ldr	r1, [sp, #8]
 800d5f6:	f005 fc03 	bl	8012e00 <uxr_receive_best_effort_message>
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	f43f af62 	beq.w	800d4c4 <wait_session_status+0x34>
 800d600:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d606:	a90c      	add	r1, sp, #48	; 0x30
 800d608:	4620      	mov	r0, r4
 800d60a:	f7ff fbc7 	bl	800cd9c <read_submessage_list>
 800d60e:	e759      	b.n	800d4c4 <wait_session_status+0x34>
 800d610:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d612:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d616:	47a0      	blx	r4
 800d618:	2001      	movs	r0, #1
 800d61a:	b01d      	add	sp, #116	; 0x74
 800d61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d620:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d624:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d626:	a90c      	add	r1, sp, #48	; 0x30
 800d628:	4620      	mov	r0, r4
 800d62a:	f7ff fbb7 	bl	800cd9c <read_submessage_list>
 800d62e:	e7bc      	b.n	800d5aa <wait_session_status+0x11a>

0800d630 <uxr_delete_session_retries>:
 800d630:	b530      	push	{r4, r5, lr}
 800d632:	b08f      	sub	sp, #60	; 0x3c
 800d634:	4604      	mov	r4, r0
 800d636:	460d      	mov	r5, r1
 800d638:	f000 fa2e 	bl	800da98 <uxr_session_header_offset>
 800d63c:	2300      	movs	r3, #0
 800d63e:	2210      	movs	r2, #16
 800d640:	9000      	str	r0, [sp, #0]
 800d642:	a902      	add	r1, sp, #8
 800d644:	a806      	add	r0, sp, #24
 800d646:	f7fb fdd3 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 800d64a:	a906      	add	r1, sp, #24
 800d64c:	4620      	mov	r0, r4
 800d64e:	f000 f973 	bl	800d938 <uxr_buffer_delete_session>
 800d652:	2200      	movs	r2, #0
 800d654:	4611      	mov	r1, r2
 800d656:	9b06      	ldr	r3, [sp, #24]
 800d658:	4620      	mov	r0, r4
 800d65a:	f000 f9c7 	bl	800d9ec <uxr_stamp_session_header>
 800d65e:	a806      	add	r0, sp, #24
 800d660:	f7fb fe04 	bl	800926c <ucdr_buffer_length>
 800d664:	462b      	mov	r3, r5
 800d666:	4602      	mov	r2, r0
 800d668:	a902      	add	r1, sp, #8
 800d66a:	4620      	mov	r0, r4
 800d66c:	f7ff ff10 	bl	800d490 <wait_session_status>
 800d670:	b118      	cbz	r0, 800d67a <uxr_delete_session_retries+0x4a>
 800d672:	7960      	ldrb	r0, [r4, #5]
 800d674:	fab0 f080 	clz	r0, r0
 800d678:	0940      	lsrs	r0, r0, #5
 800d67a:	b00f      	add	sp, #60	; 0x3c
 800d67c:	bd30      	pop	{r4, r5, pc}
 800d67e:	bf00      	nop

0800d680 <uxr_create_session>:
 800d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d684:	f100 0b08 	add.w	fp, r0, #8
 800d688:	b0ab      	sub	sp, #172	; 0xac
 800d68a:	4604      	mov	r4, r0
 800d68c:	4658      	mov	r0, fp
 800d68e:	f000 fa99 	bl	800dbc4 <uxr_reset_stream_storage>
 800d692:	4620      	mov	r0, r4
 800d694:	f000 fa00 	bl	800da98 <uxr_session_header_offset>
 800d698:	2300      	movs	r3, #0
 800d69a:	9000      	str	r0, [sp, #0]
 800d69c:	221c      	movs	r2, #28
 800d69e:	a90b      	add	r1, sp, #44	; 0x2c
 800d6a0:	a812      	add	r0, sp, #72	; 0x48
 800d6a2:	f7fb fda5 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 800d6a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d6a8:	8a1a      	ldrh	r2, [r3, #16]
 800d6aa:	3a04      	subs	r2, #4
 800d6ac:	b292      	uxth	r2, r2
 800d6ae:	a912      	add	r1, sp, #72	; 0x48
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 f917 	bl	800d8e4 <uxr_buffer_create_session>
 800d6b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f000 f983 	bl	800d9c4 <uxr_stamp_create_session_header>
 800d6be:	a812      	add	r0, sp, #72	; 0x48
 800d6c0:	f7fb fdd4 	bl	800926c <ucdr_buffer_length>
 800d6c4:	23ff      	movs	r3, #255	; 0xff
 800d6c6:	7163      	strb	r3, [r4, #5]
 800d6c8:	230a      	movs	r3, #10
 800d6ca:	46da      	mov	sl, fp
 800d6cc:	9303      	str	r3, [sp, #12]
 800d6ce:	4683      	mov	fp, r0
 800d6d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d6d2:	465a      	mov	r2, fp
 800d6d4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d6d8:	a90b      	add	r1, sp, #44	; 0x2c
 800d6da:	47a8      	blx	r5
 800d6dc:	f000 fb92 	bl	800de04 <uxr_millis>
 800d6e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6e4:	4605      	mov	r5, r0
 800d6e6:	e009      	b.n	800d6fc <uxr_create_session+0x7c>
 800d6e8:	f000 fb8c 	bl	800de04 <uxr_millis>
 800d6ec:	1b40      	subs	r0, r0, r5
 800d6ee:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	7962      	ldrb	r2, [r4, #5]
 800d6f6:	dd38      	ble.n	800d76a <uxr_create_session+0xea>
 800d6f8:	2aff      	cmp	r2, #255	; 0xff
 800d6fa:	d13c      	bne.n	800d776 <uxr_create_session+0xf6>
 800d6fc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d6fe:	a907      	add	r1, sp, #28
 800d700:	6896      	ldr	r6, [r2, #8]
 800d702:	6810      	ldr	r0, [r2, #0]
 800d704:	aa08      	add	r2, sp, #32
 800d706:	47b0      	blx	r6
 800d708:	2800      	cmp	r0, #0
 800d70a:	d0ed      	beq.n	800d6e8 <uxr_create_session+0x68>
 800d70c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d710:	a81a      	add	r0, sp, #104	; 0x68
 800d712:	f7fb fd7f 	bl	8009214 <ucdr_init_buffer>
 800d716:	2600      	movs	r6, #0
 800d718:	f10d 031a 	add.w	r3, sp, #26
 800d71c:	aa06      	add	r2, sp, #24
 800d71e:	a91a      	add	r1, sp, #104	; 0x68
 800d720:	4620      	mov	r0, r4
 800d722:	f88d 6018 	strb.w	r6, [sp, #24]
 800d726:	f000 f975 	bl	800da14 <uxr_read_session_header>
 800d72a:	2800      	cmp	r0, #0
 800d72c:	d0dc      	beq.n	800d6e8 <uxr_create_session+0x68>
 800d72e:	4631      	mov	r1, r6
 800d730:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d734:	f000 fa12 	bl	800db5c <uxr_stream_id_from_raw>
 800d738:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d73c:	2e01      	cmp	r6, #1
 800d73e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d742:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d746:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d74a:	d053      	beq.n	800d7f4 <uxr_create_session+0x174>
 800d74c:	2e02      	cmp	r6, #2
 800d74e:	d018      	beq.n	800d782 <uxr_create_session+0x102>
 800d750:	2e00      	cmp	r6, #0
 800d752:	d1c9      	bne.n	800d6e8 <uxr_create_session+0x68>
 800d754:	4631      	mov	r1, r6
 800d756:	4630      	mov	r0, r6
 800d758:	f000 fa00 	bl	800db5c <uxr_stream_id_from_raw>
 800d75c:	a91a      	add	r1, sp, #104	; 0x68
 800d75e:	4602      	mov	r2, r0
 800d760:	900a      	str	r0, [sp, #40]	; 0x28
 800d762:	4620      	mov	r0, r4
 800d764:	f7ff fb1a 	bl	800cd9c <read_submessage_list>
 800d768:	e7be      	b.n	800d6e8 <uxr_create_session+0x68>
 800d76a:	9b03      	ldr	r3, [sp, #12]
 800d76c:	3b01      	subs	r3, #1
 800d76e:	9303      	str	r3, [sp, #12]
 800d770:	d001      	beq.n	800d776 <uxr_create_session+0xf6>
 800d772:	2aff      	cmp	r2, #255	; 0xff
 800d774:	d0ac      	beq.n	800d6d0 <uxr_create_session+0x50>
 800d776:	2a00      	cmp	r2, #0
 800d778:	d051      	beq.n	800d81e <uxr_create_session+0x19e>
 800d77a:	2000      	movs	r0, #0
 800d77c:	b02b      	add	sp, #172	; 0xac
 800d77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d782:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d786:	9304      	str	r3, [sp, #16]
 800d788:	4639      	mov	r1, r7
 800d78a:	4650      	mov	r0, sl
 800d78c:	f000 fad4 	bl	800dd38 <uxr_get_input_reliable_stream>
 800d790:	4680      	mov	r8, r0
 800d792:	b348      	cbz	r0, 800d7e8 <uxr_create_session+0x168>
 800d794:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d796:	9205      	str	r2, [sp, #20]
 800d798:	a81a      	add	r0, sp, #104	; 0x68
 800d79a:	f7fb fd6b 	bl	8009274 <ucdr_buffer_remaining>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	f10d 0019 	add.w	r0, sp, #25
 800d7a4:	9000      	str	r0, [sp, #0]
 800d7a6:	9a05      	ldr	r2, [sp, #20]
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	f005 fbbc 	bl	8012f28 <uxr_receive_reliable_message>
 800d7b0:	b1d0      	cbz	r0, 800d7e8 <uxr_create_session+0x168>
 800d7b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d038      	beq.n	800d82c <uxr_create_session+0x1ac>
 800d7ba:	9e04      	ldr	r6, [sp, #16]
 800d7bc:	e00a      	b.n	800d7d4 <uxr_create_session+0x154>
 800d7be:	f04f 0302 	mov.w	r3, #2
 800d7c2:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800d7c6:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800d7ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7d0:	f7ff fae4 	bl	800cd9c <read_submessage_list>
 800d7d4:	a922      	add	r1, sp, #136	; 0x88
 800d7d6:	2204      	movs	r2, #4
 800d7d8:	4640      	mov	r0, r8
 800d7da:	f005 fc25 	bl	8013028 <uxr_next_input_reliable_buffer_available>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	a922      	add	r1, sp, #136	; 0x88
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d1ea      	bne.n	800d7be <uxr_create_session+0x13e>
 800d7e8:	9904      	ldr	r1, [sp, #16]
 800d7ea:	463a      	mov	r2, r7
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7ff f951 	bl	800ca94 <write_submessage_acknack.isra.0>
 800d7f2:	e779      	b.n	800d6e8 <uxr_create_session+0x68>
 800d7f4:	4639      	mov	r1, r7
 800d7f6:	4650      	mov	r0, sl
 800d7f8:	f000 fa94 	bl	800dd24 <uxr_get_input_best_effort_stream>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	f43f af73 	beq.w	800d6e8 <uxr_create_session+0x68>
 800d802:	4649      	mov	r1, r9
 800d804:	f005 fafc 	bl	8012e00 <uxr_receive_best_effort_message>
 800d808:	2800      	cmp	r0, #0
 800d80a:	f43f af6d 	beq.w	800d6e8 <uxr_create_session+0x68>
 800d80e:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d814:	a91a      	add	r1, sp, #104	; 0x68
 800d816:	4620      	mov	r0, r4
 800d818:	f7ff fac0 	bl	800cd9c <read_submessage_list>
 800d81c:	e764      	b.n	800d6e8 <uxr_create_session+0x68>
 800d81e:	4650      	mov	r0, sl
 800d820:	f000 f9d0 	bl	800dbc4 <uxr_reset_stream_storage>
 800d824:	2001      	movs	r0, #1
 800d826:	b02b      	add	sp, #172	; 0xac
 800d828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82c:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800d830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d832:	a91a      	add	r1, sp, #104	; 0x68
 800d834:	4620      	mov	r0, r4
 800d836:	f7ff fab1 	bl	800cd9c <read_submessage_list>
 800d83a:	e7be      	b.n	800d7ba <uxr_create_session+0x13a>

0800d83c <uxr_prepare_stream_to_write_submessage>:
 800d83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	4682      	mov	sl, r0
 800d844:	4610      	mov	r0, r2
 800d846:	4615      	mov	r5, r2
 800d848:	461e      	mov	r6, r3
 800d84a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800d84e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800d852:	9101      	str	r1, [sp, #4]
 800d854:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d858:	f000 face 	bl	800ddf8 <uxr_submessage_padding>
 800d85c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d860:	f105 0904 	add.w	r9, r5, #4
 800d864:	2b01      	cmp	r3, #1
 800d866:	4481      	add	r9, r0
 800d868:	d01d      	beq.n	800d8a6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d116      	bne.n	800d89c <uxr_prepare_stream_to_write_submessage+0x60>
 800d86e:	4621      	mov	r1, r4
 800d870:	f10a 0008 	add.w	r0, sl, #8
 800d874:	f000 fa4c 	bl	800dd10 <uxr_get_output_reliable_stream>
 800d878:	4604      	mov	r4, r0
 800d87a:	b158      	cbz	r0, 800d894 <uxr_prepare_stream_to_write_submessage+0x58>
 800d87c:	4649      	mov	r1, r9
 800d87e:	4632      	mov	r2, r6
 800d880:	f005 fd8e 	bl	80133a0 <uxr_prepare_reliable_buffer_to_write>
 800d884:	4604      	mov	r4, r0
 800d886:	b12c      	cbz	r4, 800d894 <uxr_prepare_stream_to_write_submessage+0x58>
 800d888:	4643      	mov	r3, r8
 800d88a:	b2aa      	uxth	r2, r5
 800d88c:	4639      	mov	r1, r7
 800d88e:	4630      	mov	r0, r6
 800d890:	f000 fa72 	bl	800dd78 <uxr_buffer_submessage_header>
 800d894:	4620      	mov	r0, r4
 800d896:	b002      	add	sp, #8
 800d898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d89c:	2400      	movs	r4, #0
 800d89e:	4620      	mov	r0, r4
 800d8a0:	b002      	add	sp, #8
 800d8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a6:	4621      	mov	r1, r4
 800d8a8:	f10a 0008 	add.w	r0, sl, #8
 800d8ac:	f000 fa28 	bl	800dd00 <uxr_get_output_best_effort_stream>
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d0ee      	beq.n	800d894 <uxr_prepare_stream_to_write_submessage+0x58>
 800d8b6:	4649      	mov	r1, r9
 800d8b8:	4632      	mov	r2, r6
 800d8ba:	f005 fca1 	bl	8013200 <uxr_prepare_best_effort_buffer_to_write>
 800d8be:	4604      	mov	r4, r0
 800d8c0:	e7e1      	b.n	800d886 <uxr_prepare_stream_to_write_submessage+0x4a>
 800d8c2:	bf00      	nop

0800d8c4 <uxr_init_session_info>:
 800d8c4:	0e13      	lsrs	r3, r2, #24
 800d8c6:	7043      	strb	r3, [r0, #1]
 800d8c8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d8cc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d8d0:	7001      	strb	r1, [r0, #0]
 800d8d2:	70c3      	strb	r3, [r0, #3]
 800d8d4:	2109      	movs	r1, #9
 800d8d6:	23ff      	movs	r3, #255	; 0xff
 800d8d8:	f880 c002 	strb.w	ip, [r0, #2]
 800d8dc:	7102      	strb	r2, [r0, #4]
 800d8de:	80c1      	strh	r1, [r0, #6]
 800d8e0:	7143      	strb	r3, [r0, #5]
 800d8e2:	4770      	bx	lr

0800d8e4 <uxr_buffer_create_session>:
 800d8e4:	b530      	push	{r4, r5, lr}
 800d8e6:	b089      	sub	sp, #36	; 0x24
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4d12      	ldr	r5, [pc, #72]	; (800d934 <uxr_buffer_create_session+0x50>)
 800d8ec:	9307      	str	r3, [sp, #28]
 800d8ee:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	80c2      	strh	r2, [r0, #6]
 800d8f8:	f88d 2004 	strb.w	r2, [sp, #4]
 800d8fc:	682a      	ldr	r2, [r5, #0]
 800d8fe:	9200      	str	r2, [sp, #0]
 800d900:	88aa      	ldrh	r2, [r5, #4]
 800d902:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d906:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800d90a:	9202      	str	r2, [sp, #8]
 800d90c:	460c      	mov	r4, r1
 800d90e:	7802      	ldrb	r2, [r0, #0]
 800d910:	9303      	str	r3, [sp, #12]
 800d912:	4619      	mov	r1, r3
 800d914:	f88d 200c 	strb.w	r2, [sp, #12]
 800d918:	4620      	mov	r0, r4
 800d91a:	2210      	movs	r2, #16
 800d91c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d920:	9306      	str	r3, [sp, #24]
 800d922:	f000 fa29 	bl	800dd78 <uxr_buffer_submessage_header>
 800d926:	4669      	mov	r1, sp
 800d928:	4620      	mov	r0, r4
 800d92a:	f001 f919 	bl	800eb60 <uxr_serialize_CREATE_CLIENT_Payload>
 800d92e:	b009      	add	sp, #36	; 0x24
 800d930:	bd30      	pop	{r4, r5, pc}
 800d932:	bf00      	nop
 800d934:	080161b8 	.word	0x080161b8

0800d938 <uxr_buffer_delete_session>:
 800d938:	b510      	push	{r4, lr}
 800d93a:	4b0c      	ldr	r3, [pc, #48]	; (800d96c <uxr_buffer_delete_session+0x34>)
 800d93c:	b082      	sub	sp, #8
 800d93e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800d942:	f8ad c006 	strh.w	ip, [sp, #6]
 800d946:	460c      	mov	r4, r1
 800d948:	2202      	movs	r2, #2
 800d94a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d94e:	80c2      	strh	r2, [r0, #6]
 800d950:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d954:	2204      	movs	r2, #4
 800d956:	2300      	movs	r3, #0
 800d958:	2103      	movs	r1, #3
 800d95a:	4620      	mov	r0, r4
 800d95c:	f000 fa0c 	bl	800dd78 <uxr_buffer_submessage_header>
 800d960:	a901      	add	r1, sp, #4
 800d962:	4620      	mov	r0, r4
 800d964:	f001 f9a2 	bl	800ecac <uxr_serialize_DELETE_Payload>
 800d968:	b002      	add	sp, #8
 800d96a:	bd10      	pop	{r4, pc}
 800d96c:	080161b8 	.word	0x080161b8

0800d970 <uxr_read_create_session_status>:
 800d970:	b510      	push	{r4, lr}
 800d972:	b088      	sub	sp, #32
 800d974:	4604      	mov	r4, r0
 800d976:	4608      	mov	r0, r1
 800d978:	a901      	add	r1, sp, #4
 800d97a:	f001 f9a7 	bl	800eccc <uxr_deserialize_STATUS_AGENT_Payload>
 800d97e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d982:	7163      	strb	r3, [r4, #5]
 800d984:	b008      	add	sp, #32
 800d986:	bd10      	pop	{r4, pc}

0800d988 <uxr_read_delete_session_status>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	4604      	mov	r4, r0
 800d98c:	b084      	sub	sp, #16
 800d98e:	4608      	mov	r0, r1
 800d990:	a902      	add	r1, sp, #8
 800d992:	f001 f9cb 	bl	800ed2c <uxr_deserialize_STATUS_Payload>
 800d996:	88e3      	ldrh	r3, [r4, #6]
 800d998:	2b02      	cmp	r3, #2
 800d99a:	d001      	beq.n	800d9a0 <uxr_read_delete_session_status+0x18>
 800d99c:	b004      	add	sp, #16
 800d99e:	bd10      	pop	{r4, pc}
 800d9a0:	f10d 000a 	add.w	r0, sp, #10
 800d9a4:	f7fe fecc 	bl	800c740 <uxr_object_id_from_raw>
 800d9a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800d9ac:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d9b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	bf04      	itt	eq
 800d9ba:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800d9be:	7163      	strbeq	r3, [r4, #5]
 800d9c0:	b004      	add	sp, #16
 800d9c2:	bd10      	pop	{r4, pc}

0800d9c4 <uxr_stamp_create_session_header>:
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	2208      	movs	r2, #8
 800d9c8:	b08a      	sub	sp, #40	; 0x28
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	eb0d 0002 	add.w	r0, sp, r2
 800d9d0:	f7fb fc20 	bl	8009214 <ucdr_init_buffer>
 800d9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d8:	9400      	str	r4, [sp, #0]
 800d9da:	2300      	movs	r3, #0
 800d9dc:	461a      	mov	r2, r3
 800d9de:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800d9e2:	a802      	add	r0, sp, #8
 800d9e4:	f000 fa6e 	bl	800dec4 <uxr_serialize_message_header>
 800d9e8:	b00a      	add	sp, #40	; 0x28
 800d9ea:	bd10      	pop	{r4, pc}

0800d9ec <uxr_stamp_session_header>:
 800d9ec:	b530      	push	{r4, r5, lr}
 800d9ee:	b08d      	sub	sp, #52	; 0x34
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	460d      	mov	r5, r1
 800d9f4:	9203      	str	r2, [sp, #12]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	a804      	add	r0, sp, #16
 800d9fa:	2208      	movs	r2, #8
 800d9fc:	f7fb fc0a 	bl	8009214 <ucdr_init_buffer>
 800da00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da04:	9b03      	ldr	r3, [sp, #12]
 800da06:	9400      	str	r4, [sp, #0]
 800da08:	462a      	mov	r2, r5
 800da0a:	a804      	add	r0, sp, #16
 800da0c:	f000 fa5a 	bl	800dec4 <uxr_serialize_message_header>
 800da10:	b00d      	add	sp, #52	; 0x34
 800da12:	bd30      	pop	{r4, r5, pc}

0800da14 <uxr_read_session_header>:
 800da14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da18:	4607      	mov	r7, r0
 800da1a:	b084      	sub	sp, #16
 800da1c:	4608      	mov	r0, r1
 800da1e:	460c      	mov	r4, r1
 800da20:	4615      	mov	r5, r2
 800da22:	461e      	mov	r6, r3
 800da24:	f7fb fc26 	bl	8009274 <ucdr_buffer_remaining>
 800da28:	2808      	cmp	r0, #8
 800da2a:	d803      	bhi.n	800da34 <uxr_read_session_header+0x20>
 800da2c:	2000      	movs	r0, #0
 800da2e:	b004      	add	sp, #16
 800da30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da34:	f10d 080c 	add.w	r8, sp, #12
 800da38:	4633      	mov	r3, r6
 800da3a:	462a      	mov	r2, r5
 800da3c:	f8cd 8000 	str.w	r8, [sp]
 800da40:	4620      	mov	r0, r4
 800da42:	f10d 010b 	add.w	r1, sp, #11
 800da46:	f000 fa5b 	bl	800df00 <uxr_deserialize_message_header>
 800da4a:	783a      	ldrb	r2, [r7, #0]
 800da4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800da50:	4293      	cmp	r3, r2
 800da52:	d1eb      	bne.n	800da2c <uxr_read_session_header+0x18>
 800da54:	061b      	lsls	r3, r3, #24
 800da56:	d41c      	bmi.n	800da92 <uxr_read_session_header+0x7e>
 800da58:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800da5c:	787b      	ldrb	r3, [r7, #1]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d003      	beq.n	800da6a <uxr_read_session_header+0x56>
 800da62:	2001      	movs	r0, #1
 800da64:	f080 0001 	eor.w	r0, r0, #1
 800da68:	e7e1      	b.n	800da2e <uxr_read_session_header+0x1a>
 800da6a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800da6e:	78bb      	ldrb	r3, [r7, #2]
 800da70:	429a      	cmp	r2, r3
 800da72:	f107 0102 	add.w	r1, r7, #2
 800da76:	d1f4      	bne.n	800da62 <uxr_read_session_header+0x4e>
 800da78:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800da7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800da80:	429a      	cmp	r2, r3
 800da82:	d1ee      	bne.n	800da62 <uxr_read_session_header+0x4e>
 800da84:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800da88:	784b      	ldrb	r3, [r1, #1]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d1e9      	bne.n	800da62 <uxr_read_session_header+0x4e>
 800da8e:	2000      	movs	r0, #0
 800da90:	e7e8      	b.n	800da64 <uxr_read_session_header+0x50>
 800da92:	2001      	movs	r0, #1
 800da94:	e7cb      	b.n	800da2e <uxr_read_session_header+0x1a>
 800da96:	bf00      	nop

0800da98 <uxr_session_header_offset>:
 800da98:	f990 3000 	ldrsb.w	r3, [r0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	bfac      	ite	ge
 800daa0:	2008      	movge	r0, #8
 800daa2:	2004      	movlt	r0, #4
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop

0800daa8 <uxr_init_base_object_request>:
 800daa8:	b510      	push	{r4, lr}
 800daaa:	88c3      	ldrh	r3, [r0, #6]
 800daac:	b082      	sub	sp, #8
 800daae:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800dab2:	9101      	str	r1, [sp, #4]
 800dab4:	f1a3 010a 	sub.w	r1, r3, #10
 800dab8:	b289      	uxth	r1, r1
 800daba:	42a1      	cmp	r1, r4
 800dabc:	d80e      	bhi.n	800dadc <uxr_init_base_object_request+0x34>
 800dabe:	3301      	adds	r3, #1
 800dac0:	b29c      	uxth	r4, r3
 800dac2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	80c4      	strh	r4, [r0, #6]
 800daca:	9801      	ldr	r0, [sp, #4]
 800dacc:	7011      	strb	r1, [r2, #0]
 800dace:	7053      	strb	r3, [r2, #1]
 800dad0:	1c91      	adds	r1, r2, #2
 800dad2:	f7fe fe49 	bl	800c768 <uxr_object_id_to_raw>
 800dad6:	4620      	mov	r0, r4
 800dad8:	b002      	add	sp, #8
 800dada:	bd10      	pop	{r4, pc}
 800dadc:	230a      	movs	r3, #10
 800dade:	2100      	movs	r1, #0
 800dae0:	461c      	mov	r4, r3
 800dae2:	e7f1      	b.n	800dac8 <uxr_init_base_object_request+0x20>

0800dae4 <uxr_parse_base_object_request>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	4604      	mov	r4, r0
 800dae8:	3002      	adds	r0, #2
 800daea:	460d      	mov	r5, r1
 800daec:	4616      	mov	r6, r2
 800daee:	f7fe fe27 	bl	800c740 <uxr_object_id_from_raw>
 800daf2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800daf6:	8028      	strh	r0, [r5, #0]
 800daf8:	806b      	strh	r3, [r5, #2]
 800dafa:	7822      	ldrb	r2, [r4, #0]
 800dafc:	7863      	ldrb	r3, [r4, #1]
 800dafe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800db02:	8033      	strh	r3, [r6, #0]
 800db04:	bd70      	pop	{r4, r5, r6, pc}
 800db06:	bf00      	nop

0800db08 <uxr_stream_id>:
 800db08:	2901      	cmp	r1, #1
 800db0a:	b082      	sub	sp, #8
 800db0c:	d01d      	beq.n	800db4a <uxr_stream_id+0x42>
 800db0e:	2902      	cmp	r1, #2
 800db10:	f04f 0c00 	mov.w	ip, #0
 800db14:	d01e      	beq.n	800db54 <uxr_stream_id+0x4c>
 800db16:	2300      	movs	r3, #0
 800db18:	f36c 0307 	bfi	r3, ip, #0, #8
 800db1c:	f360 230f 	bfi	r3, r0, #8, #8
 800db20:	f361 4317 	bfi	r3, r1, #16, #8
 800db24:	f362 631f 	bfi	r3, r2, #24, #8
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	2000      	movs	r0, #0
 800db2c:	f362 0007 	bfi	r0, r2, #0, #8
 800db30:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800db34:	f362 200f 	bfi	r0, r2, #8, #8
 800db38:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800db3c:	f362 4017 	bfi	r0, r2, #16, #8
 800db40:	0e1b      	lsrs	r3, r3, #24
 800db42:	f363 601f 	bfi	r0, r3, #24, #8
 800db46:	b002      	add	sp, #8
 800db48:	4770      	bx	lr
 800db4a:	f100 0c01 	add.w	ip, r0, #1
 800db4e:	fa5f fc8c 	uxtb.w	ip, ip
 800db52:	e7e0      	b.n	800db16 <uxr_stream_id+0xe>
 800db54:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800db58:	e7dd      	b.n	800db16 <uxr_stream_id+0xe>
 800db5a:	bf00      	nop

0800db5c <uxr_stream_id_from_raw>:
 800db5c:	b082      	sub	sp, #8
 800db5e:	b130      	cbz	r0, 800db6e <uxr_stream_id_from_raw+0x12>
 800db60:	0603      	lsls	r3, r0, #24
 800db62:	d420      	bmi.n	800dba6 <uxr_stream_id_from_raw+0x4a>
 800db64:	1e42      	subs	r2, r0, #1
 800db66:	b2d2      	uxtb	r2, r2
 800db68:	f04f 0c01 	mov.w	ip, #1
 800db6c:	e001      	b.n	800db72 <uxr_stream_id_from_raw+0x16>
 800db6e:	4684      	mov	ip, r0
 800db70:	4602      	mov	r2, r0
 800db72:	2300      	movs	r3, #0
 800db74:	f360 0307 	bfi	r3, r0, #0, #8
 800db78:	f362 230f 	bfi	r3, r2, #8, #8
 800db7c:	f36c 4317 	bfi	r3, ip, #16, #8
 800db80:	f361 631f 	bfi	r3, r1, #24, #8
 800db84:	b2da      	uxtb	r2, r3
 800db86:	2000      	movs	r0, #0
 800db88:	f362 0007 	bfi	r0, r2, #0, #8
 800db8c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800db90:	f362 200f 	bfi	r0, r2, #8, #8
 800db94:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800db98:	f362 4017 	bfi	r0, r2, #16, #8
 800db9c:	0e1b      	lsrs	r3, r3, #24
 800db9e:	f363 601f 	bfi	r0, r3, #24, #8
 800dba2:	b002      	add	sp, #8
 800dba4:	4770      	bx	lr
 800dba6:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800dbaa:	f04f 0c02 	mov.w	ip, #2
 800dbae:	e7e0      	b.n	800db72 <uxr_stream_id_from_raw+0x16>

0800dbb0 <uxr_init_stream_storage>:
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	7403      	strb	r3, [r0, #16]
 800dbb4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800dbb8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800dbbc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop

0800dbc4 <uxr_reset_stream_storage>:
 800dbc4:	b570      	push	{r4, r5, r6, lr}
 800dbc6:	7c03      	ldrb	r3, [r0, #16]
 800dbc8:	4604      	mov	r4, r0
 800dbca:	b153      	cbz	r3, 800dbe2 <uxr_reset_stream_storage+0x1e>
 800dbcc:	4606      	mov	r6, r0
 800dbce:	2500      	movs	r5, #0
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	f005 fb0f 	bl	80131f4 <uxr_reset_output_best_effort_stream>
 800dbd6:	7c23      	ldrb	r3, [r4, #16]
 800dbd8:	3501      	adds	r5, #1
 800dbda:	42ab      	cmp	r3, r5
 800dbdc:	f106 0610 	add.w	r6, r6, #16
 800dbe0:	d8f6      	bhi.n	800dbd0 <uxr_reset_stream_storage+0xc>
 800dbe2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dbe6:	b163      	cbz	r3, 800dc02 <uxr_reset_stream_storage+0x3e>
 800dbe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dbec:	2500      	movs	r5, #0
 800dbee:	4630      	mov	r0, r6
 800dbf0:	f005 f902 	bl	8012df8 <uxr_reset_input_best_effort_stream>
 800dbf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dbf8:	3501      	adds	r5, #1
 800dbfa:	42ab      	cmp	r3, r5
 800dbfc:	f106 0602 	add.w	r6, r6, #2
 800dc00:	d8f5      	bhi.n	800dbee <uxr_reset_stream_storage+0x2a>
 800dc02:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dc06:	b163      	cbz	r3, 800dc22 <uxr_reset_stream_storage+0x5e>
 800dc08:	f104 0618 	add.w	r6, r4, #24
 800dc0c:	2500      	movs	r5, #0
 800dc0e:	4630      	mov	r0, r6
 800dc10:	f005 fb9c 	bl	801334c <uxr_reset_output_reliable_stream>
 800dc14:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dc18:	3501      	adds	r5, #1
 800dc1a:	42ab      	cmp	r3, r5
 800dc1c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800dc20:	d8f5      	bhi.n	800dc0e <uxr_reset_stream_storage+0x4a>
 800dc22:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800dc26:	b163      	cbz	r3, 800dc42 <uxr_reset_stream_storage+0x7e>
 800dc28:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800dc2c:	2500      	movs	r5, #0
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f005 f956 	bl	8012ee0 <uxr_reset_input_reliable_stream>
 800dc34:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800dc38:	3501      	adds	r5, #1
 800dc3a:	42ab      	cmp	r3, r5
 800dc3c:	f106 0618 	add.w	r6, r6, #24
 800dc40:	d8f5      	bhi.n	800dc2e <uxr_reset_stream_storage+0x6a>
 800dc42:	bd70      	pop	{r4, r5, r6, pc}

0800dc44 <uxr_add_output_best_effort_buffer>:
 800dc44:	b510      	push	{r4, lr}
 800dc46:	7c04      	ldrb	r4, [r0, #16]
 800dc48:	f104 0c01 	add.w	ip, r4, #1
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	f880 c010 	strb.w	ip, [r0, #16]
 800dc52:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800dc56:	f005 fac3 	bl	80131e0 <uxr_init_output_best_effort_stream>
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	4620      	mov	r0, r4
 800dc60:	b002      	add	sp, #8
 800dc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc66:	f7ff bf4f 	b.w	800db08 <uxr_stream_id>
 800dc6a:	bf00      	nop

0800dc6c <uxr_add_output_reliable_buffer>:
 800dc6c:	b510      	push	{r4, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	4684      	mov	ip, r0
 800dc72:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dc76:	9000      	str	r0, [sp, #0]
 800dc78:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800dc7c:	2028      	movs	r0, #40	; 0x28
 800dc7e:	fb00 c004 	mla	r0, r0, r4, ip
 800dc82:	f104 0e01 	add.w	lr, r4, #1
 800dc86:	3018      	adds	r0, #24
 800dc88:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800dc8c:	f005 fb26 	bl	80132dc <uxr_init_output_reliable_stream>
 800dc90:	2201      	movs	r2, #1
 800dc92:	2102      	movs	r1, #2
 800dc94:	4620      	mov	r0, r4
 800dc96:	b004      	add	sp, #16
 800dc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc9c:	f7ff bf34 	b.w	800db08 <uxr_stream_id>

0800dca0 <uxr_add_input_best_effort_buffer>:
 800dca0:	b510      	push	{r4, lr}
 800dca2:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800dca6:	4603      	mov	r3, r0
 800dca8:	1c62      	adds	r2, r4, #1
 800dcaa:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800dcae:	b082      	sub	sp, #8
 800dcb0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800dcb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dcb8:	f005 f89a 	bl	8012df0 <uxr_init_input_best_effort_stream>
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2101      	movs	r1, #1
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	b002      	add	sp, #8
 800dcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcc8:	f7ff bf1e 	b.w	800db08 <uxr_stream_id>

0800dccc <uxr_add_input_reliable_buffer>:
 800dccc:	b510      	push	{r4, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	4684      	mov	ip, r0
 800dcd2:	9806      	ldr	r0, [sp, #24]
 800dcd4:	9000      	str	r0, [sp, #0]
 800dcd6:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800dcda:	2018      	movs	r0, #24
 800dcdc:	fb00 c004 	mla	r0, r0, r4, ip
 800dce0:	f104 0e01 	add.w	lr, r4, #1
 800dce4:	3048      	adds	r0, #72	; 0x48
 800dce6:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800dcea:	f005 f8cd 	bl	8012e88 <uxr_init_input_reliable_stream>
 800dcee:	2200      	movs	r2, #0
 800dcf0:	2102      	movs	r1, #2
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	b004      	add	sp, #16
 800dcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcfa:	f7ff bf05 	b.w	800db08 <uxr_stream_id>
 800dcfe:	bf00      	nop

0800dd00 <uxr_get_output_best_effort_stream>:
 800dd00:	7c03      	ldrb	r3, [r0, #16]
 800dd02:	428b      	cmp	r3, r1
 800dd04:	bf8c      	ite	hi
 800dd06:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800dd0a:	2000      	movls	r0, #0
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop

0800dd10 <uxr_get_output_reliable_stream>:
 800dd10:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dd14:	428b      	cmp	r3, r1
 800dd16:	bf83      	ittte	hi
 800dd18:	2328      	movhi	r3, #40	; 0x28
 800dd1a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800dd1e:	3018      	addhi	r0, #24
 800dd20:	2000      	movls	r0, #0
 800dd22:	4770      	bx	lr

0800dd24 <uxr_get_input_best_effort_stream>:
 800dd24:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800dd28:	428b      	cmp	r3, r1
 800dd2a:	bf86      	itte	hi
 800dd2c:	3121      	addhi	r1, #33	; 0x21
 800dd2e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800dd32:	2000      	movls	r0, #0
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop

0800dd38 <uxr_get_input_reliable_stream>:
 800dd38:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800dd3c:	428b      	cmp	r3, r1
 800dd3e:	bf83      	ittte	hi
 800dd40:	2318      	movhi	r3, #24
 800dd42:	fb03 0001 	mlahi	r0, r3, r1, r0
 800dd46:	3048      	addhi	r0, #72	; 0x48
 800dd48:	2000      	movls	r0, #0
 800dd4a:	4770      	bx	lr

0800dd4c <uxr_output_streams_confirmed>:
 800dd4c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dd50:	b183      	cbz	r3, 800dd74 <uxr_output_streams_confirmed+0x28>
 800dd52:	b570      	push	{r4, r5, r6, lr}
 800dd54:	4606      	mov	r6, r0
 800dd56:	f100 0518 	add.w	r5, r0, #24
 800dd5a:	2400      	movs	r4, #0
 800dd5c:	e001      	b.n	800dd62 <uxr_output_streams_confirmed+0x16>
 800dd5e:	3528      	adds	r5, #40	; 0x28
 800dd60:	b138      	cbz	r0, 800dd72 <uxr_output_streams_confirmed+0x26>
 800dd62:	4628      	mov	r0, r5
 800dd64:	f005 fd62 	bl	801382c <uxr_is_output_up_to_date>
 800dd68:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800dd6c:	3401      	adds	r4, #1
 800dd6e:	42a3      	cmp	r3, r4
 800dd70:	d8f5      	bhi.n	800dd5e <uxr_output_streams_confirmed+0x12>
 800dd72:	bd70      	pop	{r4, r5, r6, pc}
 800dd74:	2001      	movs	r0, #1
 800dd76:	4770      	bx	lr

0800dd78 <uxr_buffer_submessage_header>:
 800dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	460e      	mov	r6, r1
 800dd7e:	2104      	movs	r1, #4
 800dd80:	4615      	mov	r5, r2
 800dd82:	461f      	mov	r7, r3
 800dd84:	f7fb fa60 	bl	8009248 <ucdr_align_to>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	ea47 0203 	orr.w	r2, r7, r3
 800dd8e:	4631      	mov	r1, r6
 800dd90:	7523      	strb	r3, [r4, #20]
 800dd92:	4620      	mov	r0, r4
 800dd94:	462b      	mov	r3, r5
 800dd96:	f000 f8d3 	bl	800df40 <uxr_serialize_submessage_header>
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f7fb fa6a 	bl	8009274 <ucdr_buffer_remaining>
 800dda0:	42a8      	cmp	r0, r5
 800dda2:	bf34      	ite	cc
 800dda4:	2000      	movcc	r0, #0
 800dda6:	2001      	movcs	r0, #1
 800dda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddaa:	bf00      	nop

0800ddac <uxr_read_submessage_header>:
 800ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	2104      	movs	r1, #4
 800ddb6:	4616      	mov	r6, r2
 800ddb8:	4698      	mov	r8, r3
 800ddba:	f7fb fa45 	bl	8009248 <ucdr_align_to>
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f7fb fa58 	bl	8009274 <ucdr_buffer_remaining>
 800ddc4:	2803      	cmp	r0, #3
 800ddc6:	bf8c      	ite	hi
 800ddc8:	2701      	movhi	r7, #1
 800ddca:	2700      	movls	r7, #0
 800ddcc:	d802      	bhi.n	800ddd4 <uxr_read_submessage_header+0x28>
 800ddce:	4638      	mov	r0, r7
 800ddd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd4:	4633      	mov	r3, r6
 800ddd6:	4642      	mov	r2, r8
 800ddd8:	4620      	mov	r0, r4
 800ddda:	4629      	mov	r1, r5
 800dddc:	f000 f8c4 	bl	800df68 <uxr_deserialize_submessage_header>
 800dde0:	f898 3000 	ldrb.w	r3, [r8]
 800dde4:	f003 0201 	and.w	r2, r3, #1
 800dde8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ddec:	f888 3000 	strb.w	r3, [r8]
 800ddf0:	7522      	strb	r2, [r4, #20]
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ddf8 <uxr_submessage_padding>:
 800ddf8:	f010 0003 	ands.w	r0, r0, #3
 800ddfc:	bf18      	it	ne
 800ddfe:	f1c0 0004 	rsbne	r0, r0, #4
 800de02:	4770      	bx	lr

0800de04 <uxr_millis>:
 800de04:	b510      	push	{r4, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	4669      	mov	r1, sp
 800de0a:	2001      	movs	r0, #1
 800de0c:	f7f3 fad4 	bl	80013b8 <clock_gettime>
 800de10:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800de14:	4906      	ldr	r1, [pc, #24]	; (800de30 <uxr_millis+0x2c>)
 800de16:	fba0 0301 	umull	r0, r3, r0, r1
 800de1a:	1900      	adds	r0, r0, r4
 800de1c:	fb01 3102 	mla	r1, r1, r2, r3
 800de20:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800de24:	4a03      	ldr	r2, [pc, #12]	; (800de34 <uxr_millis+0x30>)
 800de26:	2300      	movs	r3, #0
 800de28:	f7f2 faca 	bl	80003c0 <__aeabi_ldivmod>
 800de2c:	b004      	add	sp, #16
 800de2e:	bd10      	pop	{r4, pc}
 800de30:	3b9aca00 	.word	0x3b9aca00
 800de34:	000f4240 	.word	0x000f4240

0800de38 <uxr_nanos>:
 800de38:	b510      	push	{r4, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	4669      	mov	r1, sp
 800de3e:	2001      	movs	r0, #1
 800de40:	f7f3 faba 	bl	80013b8 <clock_gettime>
 800de44:	4a06      	ldr	r2, [pc, #24]	; (800de60 <uxr_nanos+0x28>)
 800de46:	9800      	ldr	r0, [sp, #0]
 800de48:	9902      	ldr	r1, [sp, #8]
 800de4a:	9c01      	ldr	r4, [sp, #4]
 800de4c:	fba0 0302 	umull	r0, r3, r0, r2
 800de50:	1840      	adds	r0, r0, r1
 800de52:	fb02 3304 	mla	r3, r2, r4, r3
 800de56:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800de5a:	b004      	add	sp, #16
 800de5c:	bd10      	pop	{r4, pc}
 800de5e:	bf00      	nop
 800de60:	3b9aca00 	.word	0x3b9aca00

0800de64 <uxr_prepare_output_stream>:
 800de64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de66:	b087      	sub	sp, #28
 800de68:	2707      	movs	r7, #7
 800de6a:	9202      	str	r2, [sp, #8]
 800de6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de6e:	9103      	str	r1, [sp, #12]
 800de70:	2500      	movs	r5, #0
 800de72:	3204      	adds	r2, #4
 800de74:	e9cd 7500 	strd	r7, r5, [sp]
 800de78:	461c      	mov	r4, r3
 800de7a:	4606      	mov	r6, r0
 800de7c:	f7ff fcde 	bl	800d83c <uxr_prepare_stream_to_write_submessage>
 800de80:	f080 0201 	eor.w	r2, r0, #1
 800de84:	b2d2      	uxtb	r2, r2
 800de86:	75a2      	strb	r2, [r4, #22]
 800de88:	b112      	cbz	r2, 800de90 <uxr_prepare_output_stream+0x2c>
 800de8a:	4628      	mov	r0, r5
 800de8c:	b007      	add	sp, #28
 800de8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de90:	aa05      	add	r2, sp, #20
 800de92:	9902      	ldr	r1, [sp, #8]
 800de94:	4630      	mov	r0, r6
 800de96:	f7ff fe07 	bl	800daa8 <uxr_init_base_object_request>
 800de9a:	a905      	add	r1, sp, #20
 800de9c:	4605      	mov	r5, r0
 800de9e:	4620      	mov	r0, r4
 800dea0:	f000 ffc2 	bl	800ee28 <uxr_serialize_WRITE_DATA_Payload_Data>
 800dea4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800dea8:	69a6      	ldr	r6, [r4, #24]
 800deaa:	69e7      	ldr	r7, [r4, #28]
 800deac:	1a52      	subs	r2, r2, r1
 800deae:	4620      	mov	r0, r4
 800deb0:	f7fb f9b0 	bl	8009214 <ucdr_init_buffer>
 800deb4:	4620      	mov	r0, r4
 800deb6:	463a      	mov	r2, r7
 800deb8:	4631      	mov	r1, r6
 800deba:	f7fb f97f 	bl	80091bc <ucdr_set_on_full_buffer_callback>
 800debe:	4628      	mov	r0, r5
 800dec0:	b007      	add	sp, #28
 800dec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dec4 <uxr_serialize_message_header>:
 800dec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dec6:	b083      	sub	sp, #12
 800dec8:	4616      	mov	r6, r2
 800deca:	4604      	mov	r4, r0
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	460d      	mov	r5, r1
 800ded0:	9f08      	ldr	r7, [sp, #32]
 800ded2:	f7fa f85d 	bl	8007f90 <ucdr_serialize_uint8_t>
 800ded6:	4631      	mov	r1, r6
 800ded8:	4620      	mov	r0, r4
 800deda:	f7fa f859 	bl	8007f90 <ucdr_serialize_uint8_t>
 800dede:	9a01      	ldr	r2, [sp, #4]
 800dee0:	2101      	movs	r1, #1
 800dee2:	4620      	mov	r0, r4
 800dee4:	f7fa f900 	bl	80080e8 <ucdr_serialize_endian_uint16_t>
 800dee8:	062b      	lsls	r3, r5, #24
 800deea:	d501      	bpl.n	800def0 <uxr_serialize_message_header+0x2c>
 800deec:	b003      	add	sp, #12
 800deee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800def0:	2204      	movs	r2, #4
 800def2:	4639      	mov	r1, r7
 800def4:	4620      	mov	r0, r4
 800def6:	b003      	add	sp, #12
 800def8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800defc:	f004 bdd6 	b.w	8012aac <ucdr_serialize_array_uint8_t>

0800df00 <uxr_deserialize_message_header>:
 800df00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df02:	b083      	sub	sp, #12
 800df04:	4616      	mov	r6, r2
 800df06:	4604      	mov	r4, r0
 800df08:	9301      	str	r3, [sp, #4]
 800df0a:	460d      	mov	r5, r1
 800df0c:	9f08      	ldr	r7, [sp, #32]
 800df0e:	f7fa f855 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800df12:	4631      	mov	r1, r6
 800df14:	4620      	mov	r0, r4
 800df16:	f7fa f851 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800df1a:	9a01      	ldr	r2, [sp, #4]
 800df1c:	2101      	movs	r1, #1
 800df1e:	4620      	mov	r0, r4
 800df20:	f7fa f9d6 	bl	80082d0 <ucdr_deserialize_endian_uint16_t>
 800df24:	f995 3000 	ldrsb.w	r3, [r5]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	da01      	bge.n	800df30 <uxr_deserialize_message_header+0x30>
 800df2c:	b003      	add	sp, #12
 800df2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df30:	2204      	movs	r2, #4
 800df32:	4639      	mov	r1, r7
 800df34:	4620      	mov	r0, r4
 800df36:	b003      	add	sp, #12
 800df38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df3c:	f004 be1a 	b.w	8012b74 <ucdr_deserialize_array_uint8_t>

0800df40 <uxr_serialize_submessage_header>:
 800df40:	b530      	push	{r4, r5, lr}
 800df42:	b083      	sub	sp, #12
 800df44:	4615      	mov	r5, r2
 800df46:	4604      	mov	r4, r0
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	f7fa f821 	bl	8007f90 <ucdr_serialize_uint8_t>
 800df4e:	4629      	mov	r1, r5
 800df50:	4620      	mov	r0, r4
 800df52:	f7fa f81d 	bl	8007f90 <ucdr_serialize_uint8_t>
 800df56:	9a01      	ldr	r2, [sp, #4]
 800df58:	2101      	movs	r1, #1
 800df5a:	4620      	mov	r0, r4
 800df5c:	b003      	add	sp, #12
 800df5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df62:	f7fa b8c1 	b.w	80080e8 <ucdr_serialize_endian_uint16_t>
 800df66:	bf00      	nop

0800df68 <uxr_deserialize_submessage_header>:
 800df68:	b530      	push	{r4, r5, lr}
 800df6a:	b083      	sub	sp, #12
 800df6c:	4615      	mov	r5, r2
 800df6e:	4604      	mov	r4, r0
 800df70:	9301      	str	r3, [sp, #4]
 800df72:	f7fa f823 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800df76:	4629      	mov	r1, r5
 800df78:	4620      	mov	r0, r4
 800df7a:	f7fa f81f 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800df7e:	9a01      	ldr	r2, [sp, #4]
 800df80:	2101      	movs	r1, #1
 800df82:	4620      	mov	r0, r4
 800df84:	b003      	add	sp, #12
 800df86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df8a:	f7fa b9a1 	b.w	80082d0 <ucdr_deserialize_endian_uint16_t>
 800df8e:	bf00      	nop

0800df90 <uxr_serialize_CLIENT_Representation>:
 800df90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df94:	2204      	movs	r2, #4
 800df96:	460e      	mov	r6, r1
 800df98:	4605      	mov	r5, r0
 800df9a:	f004 fd87 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800df9e:	2202      	movs	r2, #2
 800dfa0:	4607      	mov	r7, r0
 800dfa2:	1d31      	adds	r1, r6, #4
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	f004 fd81 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800dfaa:	4038      	ands	r0, r7
 800dfac:	2202      	movs	r2, #2
 800dfae:	1db1      	adds	r1, r6, #6
 800dfb0:	b2c7      	uxtb	r7, r0
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f004 fd7a 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800dfb8:	2204      	movs	r2, #4
 800dfba:	4007      	ands	r7, r0
 800dfbc:	f106 0108 	add.w	r1, r6, #8
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	f004 fd73 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800dfc6:	7b31      	ldrb	r1, [r6, #12]
 800dfc8:	4007      	ands	r7, r0
 800dfca:	4628      	mov	r0, r5
 800dfcc:	f7f9 ffe0 	bl	8007f90 <ucdr_serialize_uint8_t>
 800dfd0:	7b71      	ldrb	r1, [r6, #13]
 800dfd2:	4007      	ands	r7, r0
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	f7f9 ffad 	bl	8007f34 <ucdr_serialize_bool>
 800dfda:	7b73      	ldrb	r3, [r6, #13]
 800dfdc:	ea07 0800 	and.w	r8, r7, r0
 800dfe0:	b93b      	cbnz	r3, 800dff2 <uxr_serialize_CLIENT_Representation+0x62>
 800dfe2:	8bb1      	ldrh	r1, [r6, #28]
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f7f9 ffff 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800dfea:	ea08 0000 	and.w	r0, r8, r0
 800dfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dff2:	6931      	ldr	r1, [r6, #16]
 800dff4:	4628      	mov	r0, r5
 800dff6:	f7fa f9e1 	bl	80083bc <ucdr_serialize_uint32_t>
 800dffa:	6933      	ldr	r3, [r6, #16]
 800dffc:	b1e3      	cbz	r3, 800e038 <uxr_serialize_CLIENT_Representation+0xa8>
 800dffe:	b1c0      	cbz	r0, 800e032 <uxr_serialize_CLIENT_Representation+0xa2>
 800e000:	4637      	mov	r7, r6
 800e002:	f04f 0900 	mov.w	r9, #0
 800e006:	e001      	b.n	800e00c <uxr_serialize_CLIENT_Representation+0x7c>
 800e008:	3708      	adds	r7, #8
 800e00a:	b194      	cbz	r4, 800e032 <uxr_serialize_CLIENT_Representation+0xa2>
 800e00c:	6979      	ldr	r1, [r7, #20]
 800e00e:	4628      	mov	r0, r5
 800e010:	f004 fe14 	bl	8012c3c <ucdr_serialize_string>
 800e014:	69b9      	ldr	r1, [r7, #24]
 800e016:	4604      	mov	r4, r0
 800e018:	4628      	mov	r0, r5
 800e01a:	f004 fe0f 	bl	8012c3c <ucdr_serialize_string>
 800e01e:	6933      	ldr	r3, [r6, #16]
 800e020:	f109 0901 	add.w	r9, r9, #1
 800e024:	4004      	ands	r4, r0
 800e026:	4599      	cmp	r9, r3
 800e028:	b2e4      	uxtb	r4, r4
 800e02a:	d3ed      	bcc.n	800e008 <uxr_serialize_CLIENT_Representation+0x78>
 800e02c:	ea08 0804 	and.w	r8, r8, r4
 800e030:	e7d7      	b.n	800dfe2 <uxr_serialize_CLIENT_Representation+0x52>
 800e032:	f04f 0800 	mov.w	r8, #0
 800e036:	e7d4      	b.n	800dfe2 <uxr_serialize_CLIENT_Representation+0x52>
 800e038:	ea08 0800 	and.w	r8, r8, r0
 800e03c:	e7d1      	b.n	800dfe2 <uxr_serialize_CLIENT_Representation+0x52>
 800e03e:	bf00      	nop

0800e040 <uxr_deserialize_CLIENT_Representation>:
 800e040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e044:	2204      	movs	r2, #4
 800e046:	460c      	mov	r4, r1
 800e048:	4605      	mov	r5, r0
 800e04a:	f004 fd93 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e04e:	2202      	movs	r2, #2
 800e050:	4607      	mov	r7, r0
 800e052:	1d21      	adds	r1, r4, #4
 800e054:	4628      	mov	r0, r5
 800e056:	f004 fd8d 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e05a:	4038      	ands	r0, r7
 800e05c:	2202      	movs	r2, #2
 800e05e:	1da1      	adds	r1, r4, #6
 800e060:	b2c6      	uxtb	r6, r0
 800e062:	4628      	mov	r0, r5
 800e064:	f004 fd86 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e068:	2204      	movs	r2, #4
 800e06a:	4006      	ands	r6, r0
 800e06c:	f104 0108 	add.w	r1, r4, #8
 800e070:	4628      	mov	r0, r5
 800e072:	f004 fd7f 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e076:	f104 010c 	add.w	r1, r4, #12
 800e07a:	4006      	ands	r6, r0
 800e07c:	4628      	mov	r0, r5
 800e07e:	f7f9 ff9d 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800e082:	f104 010d 	add.w	r1, r4, #13
 800e086:	ea06 0700 	and.w	r7, r6, r0
 800e08a:	4628      	mov	r0, r5
 800e08c:	f7f9 ff68 	bl	8007f60 <ucdr_deserialize_bool>
 800e090:	7b63      	ldrb	r3, [r4, #13]
 800e092:	4007      	ands	r7, r0
 800e094:	b93b      	cbnz	r3, 800e0a6 <uxr_deserialize_CLIENT_Representation+0x66>
 800e096:	f104 011c 	add.w	r1, r4, #28
 800e09a:	4628      	mov	r0, r5
 800e09c:	f7fa f8a4 	bl	80081e8 <ucdr_deserialize_uint16_t>
 800e0a0:	4038      	ands	r0, r7
 800e0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0a6:	f104 0110 	add.w	r1, r4, #16
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	f7fa fab6 	bl	800861c <ucdr_deserialize_uint32_t>
 800e0b0:	6923      	ldr	r3, [r4, #16]
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d903      	bls.n	800e0be <uxr_deserialize_CLIENT_Representation+0x7e>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	75ab      	strb	r3, [r5, #22]
 800e0ba:	2700      	movs	r7, #0
 800e0bc:	e7eb      	b.n	800e096 <uxr_deserialize_CLIENT_Representation+0x56>
 800e0be:	b30b      	cbz	r3, 800e104 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d0fa      	beq.n	800e0ba <uxr_deserialize_CLIENT_Representation+0x7a>
 800e0c4:	46a0      	mov	r8, r4
 800e0c6:	f04f 0900 	mov.w	r9, #0
 800e0ca:	e001      	b.n	800e0d0 <uxr_deserialize_CLIENT_Representation+0x90>
 800e0cc:	2e00      	cmp	r6, #0
 800e0ce:	d0f4      	beq.n	800e0ba <uxr_deserialize_CLIENT_Representation+0x7a>
 800e0d0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e0d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0d8:	4628      	mov	r0, r5
 800e0da:	f004 fdbf 	bl	8012c5c <ucdr_deserialize_string>
 800e0de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	f004 fdb7 	bl	8012c5c <ucdr_deserialize_string>
 800e0ee:	6923      	ldr	r3, [r4, #16]
 800e0f0:	f109 0901 	add.w	r9, r9, #1
 800e0f4:	4006      	ands	r6, r0
 800e0f6:	4599      	cmp	r9, r3
 800e0f8:	f108 0808 	add.w	r8, r8, #8
 800e0fc:	b2f6      	uxtb	r6, r6
 800e0fe:	d3e5      	bcc.n	800e0cc <uxr_deserialize_CLIENT_Representation+0x8c>
 800e100:	4037      	ands	r7, r6
 800e102:	e7c8      	b.n	800e096 <uxr_deserialize_CLIENT_Representation+0x56>
 800e104:	4007      	ands	r7, r0
 800e106:	e7c6      	b.n	800e096 <uxr_deserialize_CLIENT_Representation+0x56>

0800e108 <uxr_serialize_AGENT_Representation>:
 800e108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e10c:	2204      	movs	r2, #4
 800e10e:	460f      	mov	r7, r1
 800e110:	4605      	mov	r5, r0
 800e112:	f004 fccb 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800e116:	2202      	movs	r2, #2
 800e118:	4604      	mov	r4, r0
 800e11a:	1d39      	adds	r1, r7, #4
 800e11c:	4628      	mov	r0, r5
 800e11e:	f004 fcc5 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800e122:	4020      	ands	r0, r4
 800e124:	2202      	movs	r2, #2
 800e126:	1db9      	adds	r1, r7, #6
 800e128:	b2c4      	uxtb	r4, r0
 800e12a:	4628      	mov	r0, r5
 800e12c:	f004 fcbe 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800e130:	7a39      	ldrb	r1, [r7, #8]
 800e132:	4004      	ands	r4, r0
 800e134:	4628      	mov	r0, r5
 800e136:	f7f9 fefd 	bl	8007f34 <ucdr_serialize_bool>
 800e13a:	7a3b      	ldrb	r3, [r7, #8]
 800e13c:	ea00 0804 	and.w	r8, r0, r4
 800e140:	b913      	cbnz	r3, 800e148 <uxr_serialize_AGENT_Representation+0x40>
 800e142:	4640      	mov	r0, r8
 800e144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e148:	68f9      	ldr	r1, [r7, #12]
 800e14a:	4628      	mov	r0, r5
 800e14c:	f7fa f936 	bl	80083bc <ucdr_serialize_uint32_t>
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	b303      	cbz	r3, 800e196 <uxr_serialize_AGENT_Representation+0x8e>
 800e154:	b1d0      	cbz	r0, 800e18c <uxr_serialize_AGENT_Representation+0x84>
 800e156:	463e      	mov	r6, r7
 800e158:	f04f 0900 	mov.w	r9, #0
 800e15c:	e001      	b.n	800e162 <uxr_serialize_AGENT_Representation+0x5a>
 800e15e:	3608      	adds	r6, #8
 800e160:	b1a4      	cbz	r4, 800e18c <uxr_serialize_AGENT_Representation+0x84>
 800e162:	6931      	ldr	r1, [r6, #16]
 800e164:	4628      	mov	r0, r5
 800e166:	f004 fd69 	bl	8012c3c <ucdr_serialize_string>
 800e16a:	6971      	ldr	r1, [r6, #20]
 800e16c:	4604      	mov	r4, r0
 800e16e:	4628      	mov	r0, r5
 800e170:	f004 fd64 	bl	8012c3c <ucdr_serialize_string>
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f109 0901 	add.w	r9, r9, #1
 800e17a:	4004      	ands	r4, r0
 800e17c:	4599      	cmp	r9, r3
 800e17e:	b2e4      	uxtb	r4, r4
 800e180:	d3ed      	bcc.n	800e15e <uxr_serialize_AGENT_Representation+0x56>
 800e182:	ea08 0804 	and.w	r8, r8, r4
 800e186:	4640      	mov	r0, r8
 800e188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e18c:	f04f 0800 	mov.w	r8, #0
 800e190:	4640      	mov	r0, r8
 800e192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e196:	ea08 0800 	and.w	r8, r8, r0
 800e19a:	e7d2      	b.n	800e142 <uxr_serialize_AGENT_Representation+0x3a>

0800e19c <uxr_serialize_DATAWRITER_Representation>:
 800e19c:	b570      	push	{r4, r5, r6, lr}
 800e19e:	460d      	mov	r5, r1
 800e1a0:	7809      	ldrb	r1, [r1, #0]
 800e1a2:	4606      	mov	r6, r0
 800e1a4:	f7f9 fef4 	bl	8007f90 <ucdr_serialize_uint8_t>
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	b130      	cbz	r0, 800e1ba <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e1ac:	782b      	ldrb	r3, [r5, #0]
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	d00c      	beq.n	800e1cc <uxr_serialize_DATAWRITER_Representation+0x30>
 800e1b2:	2b03      	cmp	r3, #3
 800e1b4:	d010      	beq.n	800e1d8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d008      	beq.n	800e1cc <uxr_serialize_DATAWRITER_Representation+0x30>
 800e1ba:	2202      	movs	r2, #2
 800e1bc:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	f004 fc73 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800e1c6:	4020      	ands	r0, r4
 800e1c8:	b2c0      	uxtb	r0, r0
 800e1ca:	bd70      	pop	{r4, r5, r6, pc}
 800e1cc:	6869      	ldr	r1, [r5, #4]
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	f004 fd34 	bl	8012c3c <ucdr_serialize_string>
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	e7f0      	b.n	800e1ba <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e1d8:	4629      	mov	r1, r5
 800e1da:	4630      	mov	r0, r6
 800e1dc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e1e0:	3104      	adds	r1, #4
 800e1e2:	f7fe f871 	bl	800c2c8 <ucdr_serialize_sequence_uint8_t>
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	e7e7      	b.n	800e1ba <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e1ea:	bf00      	nop

0800e1ec <uxr_serialize_ObjectVariant.part.0>:
 800e1ec:	b570      	push	{r4, r5, r6, lr}
 800e1ee:	780b      	ldrb	r3, [r1, #0]
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	2b0d      	cmp	r3, #13
 800e1f8:	d854      	bhi.n	800e2a4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e1fa:	e8df f003 	tbb	[pc, r3]
 800e1fe:	0730      	.short	0x0730
 800e200:	07071b1b 	.word	0x07071b1b
 800e204:	0c530707 	.word	0x0c530707
 800e208:	494e0c0c 	.word	0x494e0c0c
 800e20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e210:	3104      	adds	r1, #4
 800e212:	f7ff bfc3 	b.w	800e19c <uxr_serialize_DATAWRITER_Representation>
 800e216:	7909      	ldrb	r1, [r1, #4]
 800e218:	f7f9 feba 	bl	8007f90 <ucdr_serialize_uint8_t>
 800e21c:	b1e8      	cbz	r0, 800e25a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800e21e:	7923      	ldrb	r3, [r4, #4]
 800e220:	2b01      	cmp	r3, #1
 800e222:	d001      	beq.n	800e228 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e224:	2b02      	cmp	r3, #2
 800e226:	d13d      	bne.n	800e2a4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e228:	68a1      	ldr	r1, [r4, #8]
 800e22a:	4628      	mov	r0, r5
 800e22c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e230:	f004 bd04 	b.w	8012c3c <ucdr_serialize_string>
 800e234:	7909      	ldrb	r1, [r1, #4]
 800e236:	f7f9 feab 	bl	8007f90 <ucdr_serialize_uint8_t>
 800e23a:	4606      	mov	r6, r0
 800e23c:	b120      	cbz	r0, 800e248 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e23e:	7923      	ldrb	r3, [r4, #4]
 800e240:	2b02      	cmp	r3, #2
 800e242:	d039      	beq.n	800e2b8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e244:	2b03      	cmp	r3, #3
 800e246:	d02f      	beq.n	800e2a8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e248:	2202      	movs	r2, #2
 800e24a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800e24e:	4628      	mov	r0, r5
 800e250:	f004 fc2c 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800e254:	4030      	ands	r0, r6
 800e256:	b2c0      	uxtb	r0, r0
 800e258:	bd70      	pop	{r4, r5, r6, pc}
 800e25a:	2000      	movs	r0, #0
 800e25c:	bd70      	pop	{r4, r5, r6, pc}
 800e25e:	7909      	ldrb	r1, [r1, #4]
 800e260:	f7f9 fe96 	bl	8007f90 <ucdr_serialize_uint8_t>
 800e264:	4606      	mov	r6, r0
 800e266:	b158      	cbz	r0, 800e280 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e268:	7923      	ldrb	r3, [r4, #4]
 800e26a:	2b02      	cmp	r3, #2
 800e26c:	d003      	beq.n	800e276 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e26e:	2b03      	cmp	r3, #3
 800e270:	d028      	beq.n	800e2c4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e272:	2b01      	cmp	r3, #1
 800e274:	d104      	bne.n	800e280 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e276:	68a1      	ldr	r1, [r4, #8]
 800e278:	4628      	mov	r0, r5
 800e27a:	f004 fcdf 	bl	8012c3c <ucdr_serialize_string>
 800e27e:	4606      	mov	r6, r0
 800e280:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800e284:	4628      	mov	r0, r5
 800e286:	f7fa fbbf 	bl	8008a08 <ucdr_serialize_int16_t>
 800e28a:	4030      	ands	r0, r6
 800e28c:	b2c0      	uxtb	r0, r0
 800e28e:	bd70      	pop	{r4, r5, r6, pc}
 800e290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e294:	3104      	adds	r1, #4
 800e296:	f7ff be7b 	b.w	800df90 <uxr_serialize_CLIENT_Representation>
 800e29a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e29e:	3104      	adds	r1, #4
 800e2a0:	f7ff bf32 	b.w	800e108 <uxr_serialize_AGENT_Representation>
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}
 800e2a8:	68a2      	ldr	r2, [r4, #8]
 800e2aa:	f104 010c 	add.w	r1, r4, #12
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	f7fe f80a 	bl	800c2c8 <ucdr_serialize_sequence_uint8_t>
 800e2b4:	4606      	mov	r6, r0
 800e2b6:	e7c7      	b.n	800e248 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e2b8:	68a1      	ldr	r1, [r4, #8]
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	f004 fcbe 	bl	8012c3c <ucdr_serialize_string>
 800e2c0:	4606      	mov	r6, r0
 800e2c2:	e7c1      	b.n	800e248 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e2c4:	68a2      	ldr	r2, [r4, #8]
 800e2c6:	f104 010c 	add.w	r1, r4, #12
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f7fd fffc 	bl	800c2c8 <ucdr_serialize_sequence_uint8_t>
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	e7d5      	b.n	800e280 <uxr_serialize_ObjectVariant.part.0+0x94>

0800e2d4 <uxr_deserialize_DATAWRITER_Representation>:
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	4606      	mov	r6, r0
 800e2d8:	460d      	mov	r5, r1
 800e2da:	f7f9 fe6f 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	b130      	cbz	r0, 800e2f0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e2e2:	782b      	ldrb	r3, [r5, #0]
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	d00c      	beq.n	800e302 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	d012      	beq.n	800e312 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d008      	beq.n	800e302 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e2f0:	2202      	movs	r2, #2
 800e2f2:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f004 fc3c 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e2fc:	4020      	ands	r0, r4
 800e2fe:	b2c0      	uxtb	r0, r0
 800e300:	bd70      	pop	{r4, r5, r6, pc}
 800e302:	6869      	ldr	r1, [r5, #4]
 800e304:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e308:	4630      	mov	r0, r6
 800e30a:	f004 fca7 	bl	8012c5c <ucdr_deserialize_string>
 800e30e:	4604      	mov	r4, r0
 800e310:	e7ee      	b.n	800e2f0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e312:	1d2b      	adds	r3, r5, #4
 800e314:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e318:	f105 0108 	add.w	r1, r5, #8
 800e31c:	4630      	mov	r0, r6
 800e31e:	f7fd ffe5 	bl	800c2ec <ucdr_deserialize_sequence_uint8_t>
 800e322:	4604      	mov	r4, r0
 800e324:	e7e4      	b.n	800e2f0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e326:	bf00      	nop

0800e328 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e328:	b570      	push	{r4, r5, r6, lr}
 800e32a:	460d      	mov	r5, r1
 800e32c:	7809      	ldrb	r1, [r1, #0]
 800e32e:	4606      	mov	r6, r0
 800e330:	f7f9 fe00 	bl	8007f34 <ucdr_serialize_bool>
 800e334:	782b      	ldrb	r3, [r5, #0]
 800e336:	4604      	mov	r4, r0
 800e338:	b94b      	cbnz	r3, 800e34e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e33a:	7a29      	ldrb	r1, [r5, #8]
 800e33c:	4630      	mov	r0, r6
 800e33e:	f7f9 fdf9 	bl	8007f34 <ucdr_serialize_bool>
 800e342:	7a2b      	ldrb	r3, [r5, #8]
 800e344:	4004      	ands	r4, r0
 800e346:	b2e4      	uxtb	r4, r4
 800e348:	b943      	cbnz	r3, 800e35c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e34a:	4620      	mov	r0, r4
 800e34c:	bd70      	pop	{r4, r5, r6, pc}
 800e34e:	6869      	ldr	r1, [r5, #4]
 800e350:	4630      	mov	r0, r6
 800e352:	f004 fc73 	bl	8012c3c <ucdr_serialize_string>
 800e356:	4004      	ands	r4, r0
 800e358:	b2e4      	uxtb	r4, r4
 800e35a:	e7ee      	b.n	800e33a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e35c:	68e9      	ldr	r1, [r5, #12]
 800e35e:	4630      	mov	r0, r6
 800e360:	f004 fc6c 	bl	8012c3c <ucdr_serialize_string>
 800e364:	4004      	ands	r4, r0
 800e366:	4620      	mov	r0, r4
 800e368:	bd70      	pop	{r4, r5, r6, pc}
 800e36a:	bf00      	nop

0800e36c <uxr_serialize_OBJK_Topic_Binary>:
 800e36c:	b570      	push	{r4, r5, r6, lr}
 800e36e:	460d      	mov	r5, r1
 800e370:	6809      	ldr	r1, [r1, #0]
 800e372:	4606      	mov	r6, r0
 800e374:	f004 fc62 	bl	8012c3c <ucdr_serialize_string>
 800e378:	7929      	ldrb	r1, [r5, #4]
 800e37a:	4604      	mov	r4, r0
 800e37c:	4630      	mov	r0, r6
 800e37e:	f7f9 fdd9 	bl	8007f34 <ucdr_serialize_bool>
 800e382:	792b      	ldrb	r3, [r5, #4]
 800e384:	4004      	ands	r4, r0
 800e386:	b2e4      	uxtb	r4, r4
 800e388:	b943      	cbnz	r3, 800e39c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800e38a:	7b29      	ldrb	r1, [r5, #12]
 800e38c:	4630      	mov	r0, r6
 800e38e:	f7f9 fdd1 	bl	8007f34 <ucdr_serialize_bool>
 800e392:	7b2b      	ldrb	r3, [r5, #12]
 800e394:	4004      	ands	r4, r0
 800e396:	b93b      	cbnz	r3, 800e3a8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800e398:	4620      	mov	r0, r4
 800e39a:	bd70      	pop	{r4, r5, r6, pc}
 800e39c:	68a9      	ldr	r1, [r5, #8]
 800e39e:	4630      	mov	r0, r6
 800e3a0:	f004 fc4c 	bl	8012c3c <ucdr_serialize_string>
 800e3a4:	4004      	ands	r4, r0
 800e3a6:	e7f0      	b.n	800e38a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800e3a8:	6929      	ldr	r1, [r5, #16]
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f004 fc46 	bl	8012c3c <ucdr_serialize_string>
 800e3b0:	4004      	ands	r4, r0
 800e3b2:	b2e4      	uxtb	r4, r4
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	bd70      	pop	{r4, r5, r6, pc}

0800e3b8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800e3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3bc:	460c      	mov	r4, r1
 800e3be:	7809      	ldrb	r1, [r1, #0]
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	f7f9 fdb7 	bl	8007f34 <ucdr_serialize_bool>
 800e3c6:	7823      	ldrb	r3, [r4, #0]
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	b96b      	cbnz	r3, 800e3e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800e3cc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f7f9 fdaf 	bl	8007f34 <ucdr_serialize_bool>
 800e3d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e3da:	4005      	ands	r5, r0
 800e3dc:	b2ed      	uxtb	r5, r5
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d169      	bne.n	800e4b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e8:	6861      	ldr	r1, [r4, #4]
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	f7f9 ffe6 	bl	80083bc <ucdr_serialize_uint32_t>
 800e3f0:	6863      	ldr	r3, [r4, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d06b      	beq.n	800e4ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d067      	beq.n	800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e3fa:	68a1      	ldr	r1, [r4, #8]
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	f004 fc1d 	bl	8012c3c <ucdr_serialize_string>
 800e402:	6863      	ldr	r3, [r4, #4]
 800e404:	2b01      	cmp	r3, #1
 800e406:	d953      	bls.n	800e4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d05e      	beq.n	800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e40c:	68e1      	ldr	r1, [r4, #12]
 800e40e:	4630      	mov	r0, r6
 800e410:	f004 fc14 	bl	8012c3c <ucdr_serialize_string>
 800e414:	6863      	ldr	r3, [r4, #4]
 800e416:	2b02      	cmp	r3, #2
 800e418:	d94a      	bls.n	800e4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e41a:	2800      	cmp	r0, #0
 800e41c:	d055      	beq.n	800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e41e:	6921      	ldr	r1, [r4, #16]
 800e420:	4630      	mov	r0, r6
 800e422:	f004 fc0b 	bl	8012c3c <ucdr_serialize_string>
 800e426:	6863      	ldr	r3, [r4, #4]
 800e428:	2b03      	cmp	r3, #3
 800e42a:	d941      	bls.n	800e4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d04c      	beq.n	800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e430:	6961      	ldr	r1, [r4, #20]
 800e432:	4630      	mov	r0, r6
 800e434:	f004 fc02 	bl	8012c3c <ucdr_serialize_string>
 800e438:	6863      	ldr	r3, [r4, #4]
 800e43a:	2b04      	cmp	r3, #4
 800e43c:	d938      	bls.n	800e4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e43e:	2800      	cmp	r0, #0
 800e440:	d043      	beq.n	800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e442:	69a1      	ldr	r1, [r4, #24]
 800e444:	4630      	mov	r0, r6
 800e446:	f004 fbf9 	bl	8012c3c <ucdr_serialize_string>
 800e44a:	6863      	ldr	r3, [r4, #4]
 800e44c:	2b05      	cmp	r3, #5
 800e44e:	d92f      	bls.n	800e4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e450:	2800      	cmp	r0, #0
 800e452:	d03a      	beq.n	800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e454:	69e1      	ldr	r1, [r4, #28]
 800e456:	4630      	mov	r0, r6
 800e458:	f004 fbf0 	bl	8012c3c <ucdr_serialize_string>
 800e45c:	6863      	ldr	r3, [r4, #4]
 800e45e:	2b06      	cmp	r3, #6
 800e460:	d926      	bls.n	800e4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e462:	b390      	cbz	r0, 800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e464:	6a21      	ldr	r1, [r4, #32]
 800e466:	4630      	mov	r0, r6
 800e468:	f004 fbe8 	bl	8012c3c <ucdr_serialize_string>
 800e46c:	6863      	ldr	r3, [r4, #4]
 800e46e:	2b07      	cmp	r3, #7
 800e470:	d91e      	bls.n	800e4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e472:	b350      	cbz	r0, 800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e474:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e476:	4630      	mov	r0, r6
 800e478:	f004 fbe0 	bl	8012c3c <ucdr_serialize_string>
 800e47c:	6863      	ldr	r3, [r4, #4]
 800e47e:	2b08      	cmp	r3, #8
 800e480:	d916      	bls.n	800e4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e482:	b310      	cbz	r0, 800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e484:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e486:	4630      	mov	r0, r6
 800e488:	f004 fbd8 	bl	8012c3c <ucdr_serialize_string>
 800e48c:	6863      	ldr	r3, [r4, #4]
 800e48e:	2b09      	cmp	r3, #9
 800e490:	d90e      	bls.n	800e4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e492:	b1d0      	cbz	r0, 800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e494:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800e498:	2709      	movs	r7, #9
 800e49a:	e000      	b.n	800e49e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800e49c:	b1a8      	cbz	r0, 800e4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e49e:	f858 1b04 	ldr.w	r1, [r8], #4
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	f004 fbca 	bl	8012c3c <ucdr_serialize_string>
 800e4a8:	6862      	ldr	r2, [r4, #4]
 800e4aa:	3701      	adds	r7, #1
 800e4ac:	4297      	cmp	r7, r2
 800e4ae:	d3f5      	bcc.n	800e49c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800e4b0:	4005      	ands	r5, r0
 800e4b2:	b2ed      	uxtb	r5, r5
 800e4b4:	e78a      	b.n	800e3cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e4b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e4b8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f7fd ff03 	bl	800c2c8 <ucdr_serialize_sequence_uint8_t>
 800e4c2:	4005      	ands	r5, r0
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ca:	2500      	movs	r5, #0
 800e4cc:	e77e      	b.n	800e3cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e4ce:	4028      	ands	r0, r5
 800e4d0:	b2c5      	uxtb	r5, r0
 800e4d2:	e77b      	b.n	800e3cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800e4d4 <uxr_serialize_OBJK_Publisher_Binary>:
 800e4d4:	b570      	push	{r4, r5, r6, lr}
 800e4d6:	460d      	mov	r5, r1
 800e4d8:	7809      	ldrb	r1, [r1, #0]
 800e4da:	4606      	mov	r6, r0
 800e4dc:	f7f9 fd2a 	bl	8007f34 <ucdr_serialize_bool>
 800e4e0:	782b      	ldrb	r3, [r5, #0]
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	b94b      	cbnz	r3, 800e4fa <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800e4e6:	7a29      	ldrb	r1, [r5, #8]
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f7f9 fd23 	bl	8007f34 <ucdr_serialize_bool>
 800e4ee:	7a2b      	ldrb	r3, [r5, #8]
 800e4f0:	4004      	ands	r4, r0
 800e4f2:	b2e4      	uxtb	r4, r4
 800e4f4:	b943      	cbnz	r3, 800e508 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	bd70      	pop	{r4, r5, r6, pc}
 800e4fa:	6869      	ldr	r1, [r5, #4]
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	f004 fb9d 	bl	8012c3c <ucdr_serialize_string>
 800e502:	4004      	ands	r4, r0
 800e504:	b2e4      	uxtb	r4, r4
 800e506:	e7ee      	b.n	800e4e6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800e508:	f105 010c 	add.w	r1, r5, #12
 800e50c:	4630      	mov	r0, r6
 800e50e:	f7ff ff53 	bl	800e3b8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800e512:	4004      	ands	r4, r0
 800e514:	4620      	mov	r0, r4
 800e516:	bd70      	pop	{r4, r5, r6, pc}

0800e518 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800e518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e51c:	460c      	mov	r4, r1
 800e51e:	7809      	ldrb	r1, [r1, #0]
 800e520:	4606      	mov	r6, r0
 800e522:	f7f9 fd07 	bl	8007f34 <ucdr_serialize_bool>
 800e526:	7823      	ldrb	r3, [r4, #0]
 800e528:	4605      	mov	r5, r0
 800e52a:	b96b      	cbnz	r3, 800e548 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800e52c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800e530:	4630      	mov	r0, r6
 800e532:	f7f9 fcff 	bl	8007f34 <ucdr_serialize_bool>
 800e536:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e53a:	4005      	ands	r5, r0
 800e53c:	b2ed      	uxtb	r5, r5
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d169      	bne.n	800e616 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800e542:	4628      	mov	r0, r5
 800e544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e548:	6861      	ldr	r1, [r4, #4]
 800e54a:	4630      	mov	r0, r6
 800e54c:	f7f9 ff36 	bl	80083bc <ucdr_serialize_uint32_t>
 800e550:	6863      	ldr	r3, [r4, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d06b      	beq.n	800e62e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800e556:	2800      	cmp	r0, #0
 800e558:	d067      	beq.n	800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e55a:	68a1      	ldr	r1, [r4, #8]
 800e55c:	4630      	mov	r0, r6
 800e55e:	f004 fb6d 	bl	8012c3c <ucdr_serialize_string>
 800e562:	6863      	ldr	r3, [r4, #4]
 800e564:	2b01      	cmp	r3, #1
 800e566:	d953      	bls.n	800e610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d05e      	beq.n	800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e56c:	68e1      	ldr	r1, [r4, #12]
 800e56e:	4630      	mov	r0, r6
 800e570:	f004 fb64 	bl	8012c3c <ucdr_serialize_string>
 800e574:	6863      	ldr	r3, [r4, #4]
 800e576:	2b02      	cmp	r3, #2
 800e578:	d94a      	bls.n	800e610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d055      	beq.n	800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e57e:	6921      	ldr	r1, [r4, #16]
 800e580:	4630      	mov	r0, r6
 800e582:	f004 fb5b 	bl	8012c3c <ucdr_serialize_string>
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	2b03      	cmp	r3, #3
 800e58a:	d941      	bls.n	800e610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e58c:	2800      	cmp	r0, #0
 800e58e:	d04c      	beq.n	800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e590:	6961      	ldr	r1, [r4, #20]
 800e592:	4630      	mov	r0, r6
 800e594:	f004 fb52 	bl	8012c3c <ucdr_serialize_string>
 800e598:	6863      	ldr	r3, [r4, #4]
 800e59a:	2b04      	cmp	r3, #4
 800e59c:	d938      	bls.n	800e610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	d043      	beq.n	800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e5a2:	69a1      	ldr	r1, [r4, #24]
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	f004 fb49 	bl	8012c3c <ucdr_serialize_string>
 800e5aa:	6863      	ldr	r3, [r4, #4]
 800e5ac:	2b05      	cmp	r3, #5
 800e5ae:	d92f      	bls.n	800e610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d03a      	beq.n	800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e5b4:	69e1      	ldr	r1, [r4, #28]
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f004 fb40 	bl	8012c3c <ucdr_serialize_string>
 800e5bc:	6863      	ldr	r3, [r4, #4]
 800e5be:	2b06      	cmp	r3, #6
 800e5c0:	d926      	bls.n	800e610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e5c2:	b390      	cbz	r0, 800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e5c4:	6a21      	ldr	r1, [r4, #32]
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	f004 fb38 	bl	8012c3c <ucdr_serialize_string>
 800e5cc:	6863      	ldr	r3, [r4, #4]
 800e5ce:	2b07      	cmp	r3, #7
 800e5d0:	d91e      	bls.n	800e610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e5d2:	b350      	cbz	r0, 800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e5d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f004 fb30 	bl	8012c3c <ucdr_serialize_string>
 800e5dc:	6863      	ldr	r3, [r4, #4]
 800e5de:	2b08      	cmp	r3, #8
 800e5e0:	d916      	bls.n	800e610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e5e2:	b310      	cbz	r0, 800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e5e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f004 fb28 	bl	8012c3c <ucdr_serialize_string>
 800e5ec:	6863      	ldr	r3, [r4, #4]
 800e5ee:	2b09      	cmp	r3, #9
 800e5f0:	d90e      	bls.n	800e610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e5f2:	b1d0      	cbz	r0, 800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e5f4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800e5f8:	2709      	movs	r7, #9
 800e5fa:	e000      	b.n	800e5fe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800e5fc:	b1a8      	cbz	r0, 800e62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e5fe:	f858 1b04 	ldr.w	r1, [r8], #4
 800e602:	4630      	mov	r0, r6
 800e604:	f004 fb1a 	bl	8012c3c <ucdr_serialize_string>
 800e608:	6862      	ldr	r2, [r4, #4]
 800e60a:	3701      	adds	r7, #1
 800e60c:	4297      	cmp	r7, r2
 800e60e:	d3f5      	bcc.n	800e5fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800e610:	4005      	ands	r5, r0
 800e612:	b2ed      	uxtb	r5, r5
 800e614:	e78a      	b.n	800e52c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e616:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e618:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800e61c:	4630      	mov	r0, r6
 800e61e:	f7fd fe53 	bl	800c2c8 <ucdr_serialize_sequence_uint8_t>
 800e622:	4005      	ands	r5, r0
 800e624:	4628      	mov	r0, r5
 800e626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62a:	2500      	movs	r5, #0
 800e62c:	e77e      	b.n	800e52c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e62e:	4028      	ands	r0, r5
 800e630:	b2c5      	uxtb	r5, r0
 800e632:	e77b      	b.n	800e52c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800e634 <uxr_serialize_OBJK_Subscriber_Binary>:
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	460d      	mov	r5, r1
 800e638:	7809      	ldrb	r1, [r1, #0]
 800e63a:	4606      	mov	r6, r0
 800e63c:	f7f9 fc7a 	bl	8007f34 <ucdr_serialize_bool>
 800e640:	782b      	ldrb	r3, [r5, #0]
 800e642:	4604      	mov	r4, r0
 800e644:	b94b      	cbnz	r3, 800e65a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800e646:	7a29      	ldrb	r1, [r5, #8]
 800e648:	4630      	mov	r0, r6
 800e64a:	f7f9 fc73 	bl	8007f34 <ucdr_serialize_bool>
 800e64e:	7a2b      	ldrb	r3, [r5, #8]
 800e650:	4004      	ands	r4, r0
 800e652:	b2e4      	uxtb	r4, r4
 800e654:	b943      	cbnz	r3, 800e668 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800e656:	4620      	mov	r0, r4
 800e658:	bd70      	pop	{r4, r5, r6, pc}
 800e65a:	6869      	ldr	r1, [r5, #4]
 800e65c:	4630      	mov	r0, r6
 800e65e:	f004 faed 	bl	8012c3c <ucdr_serialize_string>
 800e662:	4004      	ands	r4, r0
 800e664:	b2e4      	uxtb	r4, r4
 800e666:	e7ee      	b.n	800e646 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800e668:	f105 010c 	add.w	r1, r5, #12
 800e66c:	4630      	mov	r0, r6
 800e66e:	f7ff ff53 	bl	800e518 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800e672:	4004      	ands	r4, r0
 800e674:	4620      	mov	r0, r4
 800e676:	bd70      	pop	{r4, r5, r6, pc}

0800e678 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800e678:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800e67c:	4688      	mov	r8, r1
 800e67e:	8809      	ldrh	r1, [r1, #0]
 800e680:	4681      	mov	r9, r0
 800e682:	f7f9 fcb1 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800e686:	f898 1002 	ldrb.w	r1, [r8, #2]
 800e68a:	4606      	mov	r6, r0
 800e68c:	4648      	mov	r0, r9
 800e68e:	f7f9 fc51 	bl	8007f34 <ucdr_serialize_bool>
 800e692:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e696:	4006      	ands	r6, r0
 800e698:	b2f5      	uxtb	r5, r6
 800e69a:	b9eb      	cbnz	r3, 800e6d8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800e69c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800e6a0:	4648      	mov	r0, r9
 800e6a2:	f7f9 fc47 	bl	8007f34 <ucdr_serialize_bool>
 800e6a6:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e6aa:	4005      	ands	r5, r0
 800e6ac:	bb7b      	cbnz	r3, 800e70e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800e6ae:	f898 100c 	ldrb.w	r1, [r8, #12]
 800e6b2:	4648      	mov	r0, r9
 800e6b4:	f7f9 fc3e 	bl	8007f34 <ucdr_serialize_bool>
 800e6b8:	f898 300c 	ldrb.w	r3, [r8, #12]
 800e6bc:	4005      	ands	r5, r0
 800e6be:	b9f3      	cbnz	r3, 800e6fe <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800e6c0:	f898 1014 	ldrb.w	r1, [r8, #20]
 800e6c4:	4648      	mov	r0, r9
 800e6c6:	f7f9 fc35 	bl	8007f34 <ucdr_serialize_bool>
 800e6ca:	f898 3014 	ldrb.w	r3, [r8, #20]
 800e6ce:	4005      	ands	r5, r0
 800e6d0:	b94b      	cbnz	r3, 800e6e6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800e6d8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800e6dc:	4648      	mov	r0, r9
 800e6de:	f7f9 fc83 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800e6e2:	4005      	ands	r5, r0
 800e6e4:	e7da      	b.n	800e69c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800e6e6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800e6ea:	f108 011c 	add.w	r1, r8, #28
 800e6ee:	4648      	mov	r0, r9
 800e6f0:	f7fd fdea 	bl	800c2c8 <ucdr_serialize_sequence_uint8_t>
 800e6f4:	4028      	ands	r0, r5
 800e6f6:	b2c5      	uxtb	r5, r0
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800e6fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e702:	4648      	mov	r0, r9
 800e704:	f7f9 fe5a 	bl	80083bc <ucdr_serialize_uint32_t>
 800e708:	4028      	ands	r0, r5
 800e70a:	b2c5      	uxtb	r5, r0
 800e70c:	e7d8      	b.n	800e6c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800e70e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e712:	4648      	mov	r0, r9
 800e714:	f7f9 fe52 	bl	80083bc <ucdr_serialize_uint32_t>
 800e718:	4028      	ands	r0, r5
 800e71a:	b2c5      	uxtb	r5, r0
 800e71c:	e7c7      	b.n	800e6ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800e71e:	bf00      	nop

0800e720 <uxr_serialize_OBJK_DataReader_Binary>:
 800e720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e722:	2202      	movs	r2, #2
 800e724:	460c      	mov	r4, r1
 800e726:	4606      	mov	r6, r0
 800e728:	f004 f9c0 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800e72c:	78a1      	ldrb	r1, [r4, #2]
 800e72e:	4605      	mov	r5, r0
 800e730:	4630      	mov	r0, r6
 800e732:	f7f9 fbff 	bl	8007f34 <ucdr_serialize_bool>
 800e736:	78a3      	ldrb	r3, [r4, #2]
 800e738:	4005      	ands	r5, r0
 800e73a:	b2ed      	uxtb	r5, r5
 800e73c:	b90b      	cbnz	r3, 800e742 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800e73e:	4628      	mov	r0, r5
 800e740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e742:	f104 0108 	add.w	r1, r4, #8
 800e746:	4630      	mov	r0, r6
 800e748:	f7ff ff96 	bl	800e678 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800e74c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800e750:	4607      	mov	r7, r0
 800e752:	4630      	mov	r0, r6
 800e754:	f7f9 fbee 	bl	8007f34 <ucdr_serialize_bool>
 800e758:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e75c:	4038      	ands	r0, r7
 800e75e:	b2c7      	uxtb	r7, r0
 800e760:	b95b      	cbnz	r3, 800e77a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800e762:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800e766:	4630      	mov	r0, r6
 800e768:	f7f9 fbe4 	bl	8007f34 <ucdr_serialize_bool>
 800e76c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e770:	4007      	ands	r7, r0
 800e772:	b94b      	cbnz	r3, 800e788 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800e774:	403d      	ands	r5, r7
 800e776:	4628      	mov	r0, r5
 800e778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e77a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800e77e:	4630      	mov	r0, r6
 800e780:	f7fa f872 	bl	8008868 <ucdr_serialize_uint64_t>
 800e784:	4007      	ands	r7, r0
 800e786:	e7ec      	b.n	800e762 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800e788:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e78a:	4630      	mov	r0, r6
 800e78c:	f004 fa56 	bl	8012c3c <ucdr_serialize_string>
 800e790:	4007      	ands	r7, r0
 800e792:	b2ff      	uxtb	r7, r7
 800e794:	e7ee      	b.n	800e774 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800e796:	bf00      	nop

0800e798 <uxr_serialize_OBJK_DataWriter_Binary>:
 800e798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79a:	2202      	movs	r2, #2
 800e79c:	460d      	mov	r5, r1
 800e79e:	4606      	mov	r6, r0
 800e7a0:	f004 f984 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800e7a4:	78a9      	ldrb	r1, [r5, #2]
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f7f9 fbc3 	bl	8007f34 <ucdr_serialize_bool>
 800e7ae:	78ab      	ldrb	r3, [r5, #2]
 800e7b0:	4004      	ands	r4, r0
 800e7b2:	b2e4      	uxtb	r4, r4
 800e7b4:	b90b      	cbnz	r3, 800e7ba <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7ba:	f105 0108 	add.w	r1, r5, #8
 800e7be:	4630      	mov	r0, r6
 800e7c0:	f7ff ff5a 	bl	800e678 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800e7c4:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	f7f9 fbb2 	bl	8007f34 <ucdr_serialize_bool>
 800e7d0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800e7d4:	4038      	ands	r0, r7
 800e7d6:	b2c7      	uxtb	r7, r0
 800e7d8:	b913      	cbnz	r3, 800e7e0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800e7da:	403c      	ands	r4, r7
 800e7dc:	4620      	mov	r0, r4
 800e7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7e0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f7fa f83f 	bl	8008868 <ucdr_serialize_uint64_t>
 800e7ea:	4007      	ands	r7, r0
 800e7ec:	e7f5      	b.n	800e7da <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800e7ee:	bf00      	nop

0800e7f0 <uxr_deserialize_ObjectVariant>:
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	4605      	mov	r5, r0
 800e7f4:	460e      	mov	r6, r1
 800e7f6:	f7f9 fbe1 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800e7fa:	b168      	cbz	r0, 800e818 <uxr_deserialize_ObjectVariant+0x28>
 800e7fc:	7833      	ldrb	r3, [r6, #0]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	4604      	mov	r4, r0
 800e802:	2b0d      	cmp	r3, #13
 800e804:	d809      	bhi.n	800e81a <uxr_deserialize_ObjectVariant+0x2a>
 800e806:	e8df f003 	tbb	[pc, r3]
 800e80a:	0a41      	.short	0x0a41
 800e80c:	0a0a2323 	.word	0x0a0a2323
 800e810:	10080a0a 	.word	0x10080a0a
 800e814:	565c1010 	.word	0x565c1010
 800e818:	2400      	movs	r4, #0
 800e81a:	4620      	mov	r0, r4
 800e81c:	bd70      	pop	{r4, r5, r6, pc}
 800e81e:	1d31      	adds	r1, r6, #4
 800e820:	4628      	mov	r0, r5
 800e822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e826:	f7ff bd55 	b.w	800e2d4 <uxr_deserialize_DATAWRITER_Representation>
 800e82a:	1d31      	adds	r1, r6, #4
 800e82c:	4628      	mov	r0, r5
 800e82e:	f7f9 fbc5 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800e832:	2800      	cmp	r0, #0
 800e834:	d0f0      	beq.n	800e818 <uxr_deserialize_ObjectVariant+0x28>
 800e836:	7933      	ldrb	r3, [r6, #4]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d001      	beq.n	800e840 <uxr_deserialize_ObjectVariant+0x50>
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	d1ec      	bne.n	800e81a <uxr_deserialize_ObjectVariant+0x2a>
 800e840:	68b1      	ldr	r1, [r6, #8]
 800e842:	4628      	mov	r0, r5
 800e844:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e84c:	f004 ba06 	b.w	8012c5c <ucdr_deserialize_string>
 800e850:	1d31      	adds	r1, r6, #4
 800e852:	4628      	mov	r0, r5
 800e854:	f7f9 fbb2 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800e858:	4604      	mov	r4, r0
 800e85a:	b170      	cbz	r0, 800e87a <uxr_deserialize_ObjectVariant+0x8a>
 800e85c:	7933      	ldrb	r3, [r6, #4]
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d04c      	beq.n	800e8fc <uxr_deserialize_ObjectVariant+0x10c>
 800e862:	2b03      	cmp	r3, #3
 800e864:	d109      	bne.n	800e87a <uxr_deserialize_ObjectVariant+0x8a>
 800e866:	f106 0308 	add.w	r3, r6, #8
 800e86a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e86e:	f106 010c 	add.w	r1, r6, #12
 800e872:	4628      	mov	r0, r5
 800e874:	f7fd fd3a 	bl	800c2ec <ucdr_deserialize_sequence_uint8_t>
 800e878:	4604      	mov	r4, r0
 800e87a:	2202      	movs	r2, #2
 800e87c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800e880:	4628      	mov	r0, r5
 800e882:	f004 f977 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e886:	4020      	ands	r0, r4
 800e888:	b2c4      	uxtb	r4, r0
 800e88a:	e7c6      	b.n	800e81a <uxr_deserialize_ObjectVariant+0x2a>
 800e88c:	1d31      	adds	r1, r6, #4
 800e88e:	4628      	mov	r0, r5
 800e890:	f7f9 fb94 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800e894:	4604      	mov	r4, r0
 800e896:	b130      	cbz	r0, 800e8a6 <uxr_deserialize_ObjectVariant+0xb6>
 800e898:	7933      	ldrb	r3, [r6, #4]
 800e89a:	2b02      	cmp	r3, #2
 800e89c:	d036      	beq.n	800e90c <uxr_deserialize_ObjectVariant+0x11c>
 800e89e:	2b03      	cmp	r3, #3
 800e8a0:	d03c      	beq.n	800e91c <uxr_deserialize_ObjectVariant+0x12c>
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d032      	beq.n	800e90c <uxr_deserialize_ObjectVariant+0x11c>
 800e8a6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f7fa f92c 	bl	8008b08 <ucdr_deserialize_int16_t>
 800e8b0:	4020      	ands	r0, r4
 800e8b2:	b2c4      	uxtb	r4, r0
 800e8b4:	e7b1      	b.n	800e81a <uxr_deserialize_ObjectVariant+0x2a>
 800e8b6:	1d31      	adds	r1, r6, #4
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8be:	f7ff bbbf 	b.w	800e040 <uxr_deserialize_CLIENT_Representation>
 800e8c2:	2204      	movs	r2, #4
 800e8c4:	18b1      	adds	r1, r6, r2
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f004 f954 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e8cc:	2202      	movs	r2, #2
 800e8ce:	f106 0108 	add.w	r1, r6, #8
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	f004 f94d 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e8da:	2202      	movs	r2, #2
 800e8dc:	4004      	ands	r4, r0
 800e8de:	f106 010a 	add.w	r1, r6, #10
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	f004 f946 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e8e8:	b2e4      	uxtb	r4, r4
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	f106 010c 	add.w	r1, r6, #12
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	401c      	ands	r4, r3
 800e8f4:	f7f9 fb34 	bl	8007f60 <ucdr_deserialize_bool>
 800e8f8:	4004      	ands	r4, r0
 800e8fa:	e78e      	b.n	800e81a <uxr_deserialize_ObjectVariant+0x2a>
 800e8fc:	68b1      	ldr	r1, [r6, #8]
 800e8fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e902:	4628      	mov	r0, r5
 800e904:	f004 f9aa 	bl	8012c5c <ucdr_deserialize_string>
 800e908:	4604      	mov	r4, r0
 800e90a:	e7b6      	b.n	800e87a <uxr_deserialize_ObjectVariant+0x8a>
 800e90c:	68b1      	ldr	r1, [r6, #8]
 800e90e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e912:	4628      	mov	r0, r5
 800e914:	f004 f9a2 	bl	8012c5c <ucdr_deserialize_string>
 800e918:	4604      	mov	r4, r0
 800e91a:	e7c4      	b.n	800e8a6 <uxr_deserialize_ObjectVariant+0xb6>
 800e91c:	f106 0308 	add.w	r3, r6, #8
 800e920:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e924:	f106 010c 	add.w	r1, r6, #12
 800e928:	4628      	mov	r0, r5
 800e92a:	f7fd fcdf 	bl	800c2ec <ucdr_deserialize_sequence_uint8_t>
 800e92e:	4604      	mov	r4, r0
 800e930:	e7b9      	b.n	800e8a6 <uxr_deserialize_ObjectVariant+0xb6>
 800e932:	bf00      	nop

0800e934 <uxr_deserialize_BaseObjectRequest>:
 800e934:	b570      	push	{r4, r5, r6, lr}
 800e936:	2202      	movs	r2, #2
 800e938:	4605      	mov	r5, r0
 800e93a:	460e      	mov	r6, r1
 800e93c:	f004 f91a 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e940:	2202      	movs	r2, #2
 800e942:	4604      	mov	r4, r0
 800e944:	18b1      	adds	r1, r6, r2
 800e946:	4628      	mov	r0, r5
 800e948:	f004 f914 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800e94c:	4020      	ands	r0, r4
 800e94e:	b2c0      	uxtb	r0, r0
 800e950:	bd70      	pop	{r4, r5, r6, pc}
 800e952:	bf00      	nop

0800e954 <uxr_serialize_ActivityInfoVariant>:
 800e954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e958:	460d      	mov	r5, r1
 800e95a:	7809      	ldrb	r1, [r1, #0]
 800e95c:	4607      	mov	r7, r0
 800e95e:	f7f9 fb17 	bl	8007f90 <ucdr_serialize_uint8_t>
 800e962:	4681      	mov	r9, r0
 800e964:	b138      	cbz	r0, 800e976 <uxr_serialize_ActivityInfoVariant+0x22>
 800e966:	782b      	ldrb	r3, [r5, #0]
 800e968:	2b06      	cmp	r3, #6
 800e96a:	f000 8082 	beq.w	800ea72 <uxr_serialize_ActivityInfoVariant+0x11e>
 800e96e:	2b0d      	cmp	r3, #13
 800e970:	d016      	beq.n	800e9a0 <uxr_serialize_ActivityInfoVariant+0x4c>
 800e972:	2b05      	cmp	r3, #5
 800e974:	d002      	beq.n	800e97c <uxr_serialize_ActivityInfoVariant+0x28>
 800e976:	4648      	mov	r0, r9
 800e978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e97c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e980:	4638      	mov	r0, r7
 800e982:	f7fa f841 	bl	8008a08 <ucdr_serialize_int16_t>
 800e986:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800e98a:	4681      	mov	r9, r0
 800e98c:	4638      	mov	r0, r7
 800e98e:	f7f9 ff6b 	bl	8008868 <ucdr_serialize_uint64_t>
 800e992:	ea09 0000 	and.w	r0, r9, r0
 800e996:	fa5f f980 	uxtb.w	r9, r0
 800e99a:	4648      	mov	r0, r9
 800e99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e9a4:	4638      	mov	r0, r7
 800e9a6:	f7fa f82f 	bl	8008a08 <ucdr_serialize_int16_t>
 800e9aa:	68e9      	ldr	r1, [r5, #12]
 800e9ac:	4681      	mov	r9, r0
 800e9ae:	4638      	mov	r0, r7
 800e9b0:	f7f9 fd04 	bl	80083bc <ucdr_serialize_uint32_t>
 800e9b4:	68eb      	ldr	r3, [r5, #12]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0eb      	beq.n	800e992 <uxr_serialize_ActivityInfoVariant+0x3e>
 800e9ba:	b320      	cbz	r0, 800ea06 <uxr_serialize_ActivityInfoVariant+0xb2>
 800e9bc:	f105 080c 	add.w	r8, r5, #12
 800e9c0:	2600      	movs	r6, #0
 800e9c2:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800e9c6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800e9ca:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800e9ce:	4638      	mov	r0, r7
 800e9d0:	f7f9 fade 	bl	8007f90 <ucdr_serialize_uint8_t>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	d053      	beq.n	800ea80 <uxr_serialize_ActivityInfoVariant+0x12c>
 800e9d8:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800e9dc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800e9e0:	0074      	lsls	r4, r6, #1
 800e9e2:	00c9      	lsls	r1, r1, #3
 800e9e4:	2b03      	cmp	r3, #3
 800e9e6:	d854      	bhi.n	800ea92 <uxr_serialize_ActivityInfoVariant+0x13e>
 800e9e8:	e8df f003 	tbb	[pc, r3]
 800e9ec:	02102132 	.word	0x02102132
 800e9f0:	4441      	add	r1, r8
 800e9f2:	4638      	mov	r0, r7
 800e9f4:	6889      	ldr	r1, [r1, #8]
 800e9f6:	f004 f921 	bl	8012c3c <ucdr_serialize_string>
 800e9fa:	68ea      	ldr	r2, [r5, #12]
 800e9fc:	3601      	adds	r6, #1
 800e9fe:	4296      	cmp	r6, r2
 800ea00:	d242      	bcs.n	800ea88 <uxr_serialize_ActivityInfoVariant+0x134>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d1dd      	bne.n	800e9c2 <uxr_serialize_ActivityInfoVariant+0x6e>
 800ea06:	f04f 0900 	mov.w	r9, #0
 800ea0a:	e7b4      	b.n	800e976 <uxr_serialize_ActivityInfoVariant+0x22>
 800ea0c:	3108      	adds	r1, #8
 800ea0e:	4441      	add	r1, r8
 800ea10:	2210      	movs	r2, #16
 800ea12:	4638      	mov	r0, r7
 800ea14:	f004 f84a 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ea18:	4434      	add	r4, r6
 800ea1a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ea1e:	4604      	mov	r4, r0
 800ea20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ea22:	4638      	mov	r0, r7
 800ea24:	f7f9 fcca 	bl	80083bc <ucdr_serialize_uint32_t>
 800ea28:	4020      	ands	r0, r4
 800ea2a:	b2c0      	uxtb	r0, r0
 800ea2c:	e7e5      	b.n	800e9fa <uxr_serialize_ActivityInfoVariant+0xa6>
 800ea2e:	3108      	adds	r1, #8
 800ea30:	4441      	add	r1, r8
 800ea32:	2204      	movs	r2, #4
 800ea34:	4638      	mov	r0, r7
 800ea36:	f004 f839 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ea3a:	4434      	add	r4, r6
 800ea3c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ea40:	4604      	mov	r4, r0
 800ea42:	8b19      	ldrh	r1, [r3, #24]
 800ea44:	4638      	mov	r0, r7
 800ea46:	f7f9 facf 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800ea4a:	4020      	ands	r0, r4
 800ea4c:	b2c0      	uxtb	r0, r0
 800ea4e:	e7d4      	b.n	800e9fa <uxr_serialize_ActivityInfoVariant+0xa6>
 800ea50:	3108      	adds	r1, #8
 800ea52:	4441      	add	r1, r8
 800ea54:	2202      	movs	r2, #2
 800ea56:	4638      	mov	r0, r7
 800ea58:	f004 f828 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ea5c:	4434      	add	r4, r6
 800ea5e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ea62:	4604      	mov	r4, r0
 800ea64:	7d99      	ldrb	r1, [r3, #22]
 800ea66:	4638      	mov	r0, r7
 800ea68:	f7f9 fa92 	bl	8007f90 <ucdr_serialize_uint8_t>
 800ea6c:	4020      	ands	r0, r4
 800ea6e:	b2c0      	uxtb	r0, r0
 800ea70:	e7c3      	b.n	800e9fa <uxr_serialize_ActivityInfoVariant+0xa6>
 800ea72:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ea76:	4638      	mov	r0, r7
 800ea78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea7c:	f7f9 bfc4 	b.w	8008a08 <ucdr_serialize_int16_t>
 800ea80:	68ea      	ldr	r2, [r5, #12]
 800ea82:	3601      	adds	r6, #1
 800ea84:	42b2      	cmp	r2, r6
 800ea86:	d8be      	bhi.n	800ea06 <uxr_serialize_ActivityInfoVariant+0xb2>
 800ea88:	ea09 0900 	and.w	r9, r9, r0
 800ea8c:	fa5f f989 	uxtb.w	r9, r9
 800ea90:	e771      	b.n	800e976 <uxr_serialize_ActivityInfoVariant+0x22>
 800ea92:	68eb      	ldr	r3, [r5, #12]
 800ea94:	3601      	adds	r6, #1
 800ea96:	429e      	cmp	r6, r3
 800ea98:	f10a 0a18 	add.w	sl, sl, #24
 800ea9c:	d395      	bcc.n	800e9ca <uxr_serialize_ActivityInfoVariant+0x76>
 800ea9e:	e76a      	b.n	800e976 <uxr_serialize_ActivityInfoVariant+0x22>

0800eaa0 <uxr_deserialize_BaseObjectReply>:
 800eaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa4:	2202      	movs	r2, #2
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	460f      	mov	r7, r1
 800eaaa:	f004 f863 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800eaae:	2202      	movs	r2, #2
 800eab0:	18b9      	adds	r1, r7, r2
 800eab2:	4605      	mov	r5, r0
 800eab4:	4630      	mov	r0, r6
 800eab6:	f004 f85d 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800eaba:	1d39      	adds	r1, r7, #4
 800eabc:	4680      	mov	r8, r0
 800eabe:	4630      	mov	r0, r6
 800eac0:	f7f9 fa7c 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800eac4:	1d79      	adds	r1, r7, #5
 800eac6:	4604      	mov	r4, r0
 800eac8:	4630      	mov	r0, r6
 800eaca:	f7f9 fa77 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800eace:	ea05 0508 	and.w	r5, r5, r8
 800ead2:	402c      	ands	r4, r5
 800ead4:	4020      	ands	r0, r4
 800ead6:	b2c0      	uxtb	r0, r0
 800ead8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eadc <uxr_serialize_ReadSpecification>:
 800eadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae0:	460e      	mov	r6, r1
 800eae2:	7809      	ldrb	r1, [r1, #0]
 800eae4:	4607      	mov	r7, r0
 800eae6:	f7f9 fa53 	bl	8007f90 <ucdr_serialize_uint8_t>
 800eaea:	7871      	ldrb	r1, [r6, #1]
 800eaec:	4604      	mov	r4, r0
 800eaee:	4638      	mov	r0, r7
 800eaf0:	f7f9 fa4e 	bl	8007f90 <ucdr_serialize_uint8_t>
 800eaf4:	78b1      	ldrb	r1, [r6, #2]
 800eaf6:	4004      	ands	r4, r0
 800eaf8:	4638      	mov	r0, r7
 800eafa:	f7f9 fa1b 	bl	8007f34 <ucdr_serialize_bool>
 800eafe:	78b3      	ldrb	r3, [r6, #2]
 800eb00:	b2e4      	uxtb	r4, r4
 800eb02:	4004      	ands	r4, r0
 800eb04:	b94b      	cbnz	r3, 800eb1a <uxr_serialize_ReadSpecification+0x3e>
 800eb06:	7a31      	ldrb	r1, [r6, #8]
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f7f9 fa13 	bl	8007f34 <ucdr_serialize_bool>
 800eb0e:	7a33      	ldrb	r3, [r6, #8]
 800eb10:	4004      	ands	r4, r0
 800eb12:	b943      	cbnz	r3, 800eb26 <uxr_serialize_ReadSpecification+0x4a>
 800eb14:	4620      	mov	r0, r4
 800eb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1a:	6871      	ldr	r1, [r6, #4]
 800eb1c:	4638      	mov	r0, r7
 800eb1e:	f004 f88d 	bl	8012c3c <ucdr_serialize_string>
 800eb22:	4004      	ands	r4, r0
 800eb24:	e7ef      	b.n	800eb06 <uxr_serialize_ReadSpecification+0x2a>
 800eb26:	8971      	ldrh	r1, [r6, #10]
 800eb28:	4638      	mov	r0, r7
 800eb2a:	f7f9 fa5d 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800eb2e:	89b1      	ldrh	r1, [r6, #12]
 800eb30:	4605      	mov	r5, r0
 800eb32:	4638      	mov	r0, r7
 800eb34:	f7f9 fa58 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800eb38:	89f1      	ldrh	r1, [r6, #14]
 800eb3a:	4005      	ands	r5, r0
 800eb3c:	4638      	mov	r0, r7
 800eb3e:	f7f9 fa53 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800eb42:	8a31      	ldrh	r1, [r6, #16]
 800eb44:	4680      	mov	r8, r0
 800eb46:	4638      	mov	r0, r7
 800eb48:	f7f9 fa4e 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800eb4c:	b2ed      	uxtb	r5, r5
 800eb4e:	4025      	ands	r5, r4
 800eb50:	ea08 0505 	and.w	r5, r8, r5
 800eb54:	ea00 0405 	and.w	r4, r0, r5
 800eb58:	4620      	mov	r0, r4
 800eb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb5e:	bf00      	nop

0800eb60 <uxr_serialize_CREATE_CLIENT_Payload>:
 800eb60:	f7ff ba16 	b.w	800df90 <uxr_serialize_CLIENT_Representation>

0800eb64 <uxr_serialize_CREATE_Payload>:
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	2202      	movs	r2, #2
 800eb68:	4607      	mov	r7, r0
 800eb6a:	460e      	mov	r6, r1
 800eb6c:	f003 ff9e 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800eb70:	2202      	movs	r2, #2
 800eb72:	18b1      	adds	r1, r6, r2
 800eb74:	4605      	mov	r5, r0
 800eb76:	4638      	mov	r0, r7
 800eb78:	f003 ff98 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800eb7c:	7931      	ldrb	r1, [r6, #4]
 800eb7e:	4604      	mov	r4, r0
 800eb80:	4638      	mov	r0, r7
 800eb82:	f7f9 fa05 	bl	8007f90 <ucdr_serialize_uint8_t>
 800eb86:	b170      	cbz	r0, 800eba6 <uxr_serialize_CREATE_Payload+0x42>
 800eb88:	7933      	ldrb	r3, [r6, #4]
 800eb8a:	402c      	ands	r4, r5
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	b2e4      	uxtb	r4, r4
 800eb90:	2b0d      	cmp	r3, #13
 800eb92:	d809      	bhi.n	800eba8 <uxr_serialize_CREATE_Payload+0x44>
 800eb94:	e8df f003 	tbb	[pc, r3]
 800eb98:	23230a4c 	.word	0x23230a4c
 800eb9c:	0a0a0a0a 	.word	0x0a0a0a0a
 800eba0:	12121208 	.word	0x12121208
 800eba4:	3e45      	.short	0x3e45
 800eba6:	2400      	movs	r4, #0
 800eba8:	4620      	mov	r0, r4
 800ebaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebac:	f106 0108 	add.w	r1, r6, #8
 800ebb0:	4638      	mov	r0, r7
 800ebb2:	f7ff faf3 	bl	800e19c <uxr_serialize_DATAWRITER_Representation>
 800ebb6:	4004      	ands	r4, r0
 800ebb8:	4620      	mov	r0, r4
 800ebba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebbc:	7a31      	ldrb	r1, [r6, #8]
 800ebbe:	4638      	mov	r0, r7
 800ebc0:	f7f9 f9e6 	bl	8007f90 <ucdr_serialize_uint8_t>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d0ee      	beq.n	800eba6 <uxr_serialize_CREATE_Payload+0x42>
 800ebc8:	7a33      	ldrb	r3, [r6, #8]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d001      	beq.n	800ebd2 <uxr_serialize_CREATE_Payload+0x6e>
 800ebce:	2b02      	cmp	r3, #2
 800ebd0:	d1ea      	bne.n	800eba8 <uxr_serialize_CREATE_Payload+0x44>
 800ebd2:	68f1      	ldr	r1, [r6, #12]
 800ebd4:	4638      	mov	r0, r7
 800ebd6:	f004 f831 	bl	8012c3c <ucdr_serialize_string>
 800ebda:	4004      	ands	r4, r0
 800ebdc:	e7e4      	b.n	800eba8 <uxr_serialize_CREATE_Payload+0x44>
 800ebde:	7a31      	ldrb	r1, [r6, #8]
 800ebe0:	4638      	mov	r0, r7
 800ebe2:	f7f9 f9d5 	bl	8007f90 <ucdr_serialize_uint8_t>
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	b158      	cbz	r0, 800ec02 <uxr_serialize_CREATE_Payload+0x9e>
 800ebea:	7a33      	ldrb	r3, [r6, #8]
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d034      	beq.n	800ec5a <uxr_serialize_CREATE_Payload+0xf6>
 800ebf0:	2b03      	cmp	r3, #3
 800ebf2:	d106      	bne.n	800ec02 <uxr_serialize_CREATE_Payload+0x9e>
 800ebf4:	68f2      	ldr	r2, [r6, #12]
 800ebf6:	f106 0110 	add.w	r1, r6, #16
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	f7fd fb64 	bl	800c2c8 <ucdr_serialize_sequence_uint8_t>
 800ec00:	4605      	mov	r5, r0
 800ec02:	2202      	movs	r2, #2
 800ec04:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800ec08:	4638      	mov	r0, r7
 800ec0a:	f003 ff4f 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ec0e:	4028      	ands	r0, r5
 800ec10:	4004      	ands	r4, r0
 800ec12:	e7c9      	b.n	800eba8 <uxr_serialize_CREATE_Payload+0x44>
 800ec14:	f106 0108 	add.w	r1, r6, #8
 800ec18:	4638      	mov	r0, r7
 800ec1a:	f7ff f9b9 	bl	800df90 <uxr_serialize_CLIENT_Representation>
 800ec1e:	4004      	ands	r4, r0
 800ec20:	e7c2      	b.n	800eba8 <uxr_serialize_CREATE_Payload+0x44>
 800ec22:	f106 0108 	add.w	r1, r6, #8
 800ec26:	4638      	mov	r0, r7
 800ec28:	f7ff fa6e 	bl	800e108 <uxr_serialize_AGENT_Representation>
 800ec2c:	4004      	ands	r4, r0
 800ec2e:	e7bb      	b.n	800eba8 <uxr_serialize_CREATE_Payload+0x44>
 800ec30:	7a31      	ldrb	r1, [r6, #8]
 800ec32:	4638      	mov	r0, r7
 800ec34:	f7f9 f9ac 	bl	8007f90 <ucdr_serialize_uint8_t>
 800ec38:	4605      	mov	r5, r0
 800ec3a:	b130      	cbz	r0, 800ec4a <uxr_serialize_CREATE_Payload+0xe6>
 800ec3c:	7a33      	ldrb	r3, [r6, #8]
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d011      	beq.n	800ec66 <uxr_serialize_CREATE_Payload+0x102>
 800ec42:	2b03      	cmp	r3, #3
 800ec44:	d015      	beq.n	800ec72 <uxr_serialize_CREATE_Payload+0x10e>
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d00d      	beq.n	800ec66 <uxr_serialize_CREATE_Payload+0x102>
 800ec4a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800ec4e:	4638      	mov	r0, r7
 800ec50:	f7f9 feda 	bl	8008a08 <ucdr_serialize_int16_t>
 800ec54:	4028      	ands	r0, r5
 800ec56:	4004      	ands	r4, r0
 800ec58:	e7a6      	b.n	800eba8 <uxr_serialize_CREATE_Payload+0x44>
 800ec5a:	68f1      	ldr	r1, [r6, #12]
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	f003 ffed 	bl	8012c3c <ucdr_serialize_string>
 800ec62:	4605      	mov	r5, r0
 800ec64:	e7cd      	b.n	800ec02 <uxr_serialize_CREATE_Payload+0x9e>
 800ec66:	68f1      	ldr	r1, [r6, #12]
 800ec68:	4638      	mov	r0, r7
 800ec6a:	f003 ffe7 	bl	8012c3c <ucdr_serialize_string>
 800ec6e:	4605      	mov	r5, r0
 800ec70:	e7eb      	b.n	800ec4a <uxr_serialize_CREATE_Payload+0xe6>
 800ec72:	68f2      	ldr	r2, [r6, #12]
 800ec74:	f106 0110 	add.w	r1, r6, #16
 800ec78:	4638      	mov	r0, r7
 800ec7a:	f7fd fb25 	bl	800c2c8 <ucdr_serialize_sequence_uint8_t>
 800ec7e:	4605      	mov	r5, r0
 800ec80:	e7e3      	b.n	800ec4a <uxr_serialize_CREATE_Payload+0xe6>
 800ec82:	bf00      	nop

0800ec84 <uxr_deserialize_GET_INFO_Payload>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	2202      	movs	r2, #2
 800ec88:	4605      	mov	r5, r0
 800ec8a:	460e      	mov	r6, r1
 800ec8c:	f003 ff72 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800ec90:	2202      	movs	r2, #2
 800ec92:	18b1      	adds	r1, r6, r2
 800ec94:	4604      	mov	r4, r0
 800ec96:	4628      	mov	r0, r5
 800ec98:	f003 ff6c 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800ec9c:	1d31      	adds	r1, r6, #4
 800ec9e:	4004      	ands	r4, r0
 800eca0:	4628      	mov	r0, r5
 800eca2:	f7f9 fcbb 	bl	800861c <ucdr_deserialize_uint32_t>
 800eca6:	b2e4      	uxtb	r4, r4
 800eca8:	4020      	ands	r0, r4
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}

0800ecac <uxr_serialize_DELETE_Payload>:
 800ecac:	b570      	push	{r4, r5, r6, lr}
 800ecae:	2202      	movs	r2, #2
 800ecb0:	4605      	mov	r5, r0
 800ecb2:	460e      	mov	r6, r1
 800ecb4:	f003 fefa 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ecb8:	2202      	movs	r2, #2
 800ecba:	4604      	mov	r4, r0
 800ecbc:	18b1      	adds	r1, r6, r2
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	f003 fef4 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ecc4:	4020      	ands	r0, r4
 800ecc6:	b2c0      	uxtb	r0, r0
 800ecc8:	bd70      	pop	{r4, r5, r6, pc}
 800ecca:	bf00      	nop

0800eccc <uxr_deserialize_STATUS_AGENT_Payload>:
 800eccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd0:	4605      	mov	r5, r0
 800ecd2:	460e      	mov	r6, r1
 800ecd4:	f7f9 f972 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800ecd8:	1c71      	adds	r1, r6, #1
 800ecda:	4604      	mov	r4, r0
 800ecdc:	4628      	mov	r0, r5
 800ecde:	f7f9 f96d 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800ece2:	2204      	movs	r2, #4
 800ece4:	18b1      	adds	r1, r6, r2
 800ece6:	4680      	mov	r8, r0
 800ece8:	4628      	mov	r0, r5
 800ecea:	f003 ff43 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800ecee:	f106 0108 	add.w	r1, r6, #8
 800ecf2:	4607      	mov	r7, r0
 800ecf4:	2202      	movs	r2, #2
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	f003 ff3c 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800ecfc:	ea04 0308 	and.w	r3, r4, r8
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	ea03 0407 	and.w	r4, r3, r7
 800ed06:	2202      	movs	r2, #2
 800ed08:	4607      	mov	r7, r0
 800ed0a:	f106 010a 	add.w	r1, r6, #10
 800ed0e:	4628      	mov	r0, r5
 800ed10:	f003 ff30 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800ed14:	f106 010c 	add.w	r1, r6, #12
 800ed18:	4603      	mov	r3, r0
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	461d      	mov	r5, r3
 800ed1e:	f7f9 f91f 	bl	8007f60 <ucdr_deserialize_bool>
 800ed22:	403c      	ands	r4, r7
 800ed24:	4025      	ands	r5, r4
 800ed26:	4028      	ands	r0, r5
 800ed28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed2c <uxr_deserialize_STATUS_Payload>:
 800ed2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed30:	2202      	movs	r2, #2
 800ed32:	4606      	mov	r6, r0
 800ed34:	460f      	mov	r7, r1
 800ed36:	f003 ff1d 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	18b9      	adds	r1, r7, r2
 800ed3e:	4605      	mov	r5, r0
 800ed40:	4630      	mov	r0, r6
 800ed42:	f003 ff17 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800ed46:	1d39      	adds	r1, r7, #4
 800ed48:	4680      	mov	r8, r0
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f7f9 f936 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800ed50:	1d79      	adds	r1, r7, #5
 800ed52:	4604      	mov	r4, r0
 800ed54:	4630      	mov	r0, r6
 800ed56:	f7f9 f931 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800ed5a:	ea05 0508 	and.w	r5, r5, r8
 800ed5e:	402c      	ands	r4, r5
 800ed60:	4020      	ands	r0, r4
 800ed62:	b2c0      	uxtb	r0, r0
 800ed64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed68 <uxr_serialize_INFO_Payload>:
 800ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	460c      	mov	r4, r1
 800ed70:	4605      	mov	r5, r0
 800ed72:	f003 fe9b 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ed76:	2202      	movs	r2, #2
 800ed78:	18a1      	adds	r1, r4, r2
 800ed7a:	4680      	mov	r8, r0
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	f003 fe95 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ed82:	7921      	ldrb	r1, [r4, #4]
 800ed84:	4607      	mov	r7, r0
 800ed86:	4628      	mov	r0, r5
 800ed88:	f7f9 f902 	bl	8007f90 <ucdr_serialize_uint8_t>
 800ed8c:	7961      	ldrb	r1, [r4, #5]
 800ed8e:	4606      	mov	r6, r0
 800ed90:	4628      	mov	r0, r5
 800ed92:	f7f9 f8fd 	bl	8007f90 <ucdr_serialize_uint8_t>
 800ed96:	ea08 0807 	and.w	r8, r8, r7
 800ed9a:	ea06 0608 	and.w	r6, r6, r8
 800ed9e:	4006      	ands	r6, r0
 800eda0:	7a21      	ldrb	r1, [r4, #8]
 800eda2:	4628      	mov	r0, r5
 800eda4:	f7f9 f8c6 	bl	8007f34 <ucdr_serialize_bool>
 800eda8:	7a23      	ldrb	r3, [r4, #8]
 800edaa:	b2f7      	uxtb	r7, r6
 800edac:	4606      	mov	r6, r0
 800edae:	b96b      	cbnz	r3, 800edcc <uxr_serialize_INFO_Payload+0x64>
 800edb0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800edb4:	4628      	mov	r0, r5
 800edb6:	f7f9 f8bd 	bl	8007f34 <ucdr_serialize_bool>
 800edba:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800edbe:	4030      	ands	r0, r6
 800edc0:	b2c6      	uxtb	r6, r0
 800edc2:	b983      	cbnz	r3, 800ede6 <uxr_serialize_INFO_Payload+0x7e>
 800edc4:	ea06 0007 	and.w	r0, r6, r7
 800edc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edcc:	7b21      	ldrb	r1, [r4, #12]
 800edce:	4628      	mov	r0, r5
 800edd0:	f7f9 f8de 	bl	8007f90 <ucdr_serialize_uint8_t>
 800edd4:	b188      	cbz	r0, 800edfa <uxr_serialize_INFO_Payload+0x92>
 800edd6:	f104 010c 	add.w	r1, r4, #12
 800edda:	4628      	mov	r0, r5
 800eddc:	f7ff fa06 	bl	800e1ec <uxr_serialize_ObjectVariant.part.0>
 800ede0:	4030      	ands	r0, r6
 800ede2:	b2c6      	uxtb	r6, r0
 800ede4:	e7e4      	b.n	800edb0 <uxr_serialize_INFO_Payload+0x48>
 800ede6:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800edea:	4628      	mov	r0, r5
 800edec:	f7ff fdb2 	bl	800e954 <uxr_serialize_ActivityInfoVariant>
 800edf0:	4006      	ands	r6, r0
 800edf2:	ea06 0007 	and.w	r0, r6, r7
 800edf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edfa:	4606      	mov	r6, r0
 800edfc:	e7d8      	b.n	800edb0 <uxr_serialize_INFO_Payload+0x48>
 800edfe:	bf00      	nop

0800ee00 <uxr_serialize_READ_DATA_Payload>:
 800ee00:	b570      	push	{r4, r5, r6, lr}
 800ee02:	2202      	movs	r2, #2
 800ee04:	4605      	mov	r5, r0
 800ee06:	460e      	mov	r6, r1
 800ee08:	f003 fe50 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	18b1      	adds	r1, r6, r2
 800ee10:	4604      	mov	r4, r0
 800ee12:	4628      	mov	r0, r5
 800ee14:	f003 fe4a 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ee18:	1d31      	adds	r1, r6, #4
 800ee1a:	4004      	ands	r4, r0
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	f7ff fe5d 	bl	800eadc <uxr_serialize_ReadSpecification>
 800ee22:	b2e4      	uxtb	r4, r4
 800ee24:	4020      	ands	r0, r4
 800ee26:	bd70      	pop	{r4, r5, r6, pc}

0800ee28 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800ee28:	b570      	push	{r4, r5, r6, lr}
 800ee2a:	2202      	movs	r2, #2
 800ee2c:	4605      	mov	r5, r0
 800ee2e:	460e      	mov	r6, r1
 800ee30:	f003 fe3c 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ee34:	2202      	movs	r2, #2
 800ee36:	4604      	mov	r4, r0
 800ee38:	18b1      	adds	r1, r6, r2
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f003 fe36 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ee40:	4020      	ands	r0, r4
 800ee42:	b2c0      	uxtb	r0, r0
 800ee44:	bd70      	pop	{r4, r5, r6, pc}
 800ee46:	bf00      	nop

0800ee48 <uxr_serialize_ACKNACK_Payload>:
 800ee48:	b570      	push	{r4, r5, r6, lr}
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	460e      	mov	r6, r1
 800ee4e:	f834 1b02 	ldrh.w	r1, [r4], #2
 800ee52:	4605      	mov	r5, r0
 800ee54:	f7f9 f8c8 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800ee58:	2202      	movs	r2, #2
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	4628      	mov	r0, r5
 800ee60:	f003 fe24 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ee64:	7931      	ldrb	r1, [r6, #4]
 800ee66:	4004      	ands	r4, r0
 800ee68:	4628      	mov	r0, r5
 800ee6a:	f7f9 f891 	bl	8007f90 <ucdr_serialize_uint8_t>
 800ee6e:	b2e4      	uxtb	r4, r4
 800ee70:	4020      	ands	r0, r4
 800ee72:	bd70      	pop	{r4, r5, r6, pc}

0800ee74 <uxr_deserialize_ACKNACK_Payload>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	4605      	mov	r5, r0
 800ee78:	460e      	mov	r6, r1
 800ee7a:	f7f9 f9b5 	bl	80081e8 <ucdr_deserialize_uint16_t>
 800ee7e:	2202      	movs	r2, #2
 800ee80:	18b1      	adds	r1, r6, r2
 800ee82:	4604      	mov	r4, r0
 800ee84:	4628      	mov	r0, r5
 800ee86:	f003 fe75 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800ee8a:	1d31      	adds	r1, r6, #4
 800ee8c:	4004      	ands	r4, r0
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f7f9 f894 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800ee94:	b2e4      	uxtb	r4, r4
 800ee96:	4020      	ands	r0, r4
 800ee98:	bd70      	pop	{r4, r5, r6, pc}
 800ee9a:	bf00      	nop

0800ee9c <uxr_serialize_HEARTBEAT_Payload>:
 800ee9c:	b570      	push	{r4, r5, r6, lr}
 800ee9e:	460d      	mov	r5, r1
 800eea0:	8809      	ldrh	r1, [r1, #0]
 800eea2:	4606      	mov	r6, r0
 800eea4:	f7f9 f8a0 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800eea8:	8869      	ldrh	r1, [r5, #2]
 800eeaa:	4604      	mov	r4, r0
 800eeac:	4630      	mov	r0, r6
 800eeae:	f7f9 f89b 	bl	8007fe8 <ucdr_serialize_uint16_t>
 800eeb2:	7929      	ldrb	r1, [r5, #4]
 800eeb4:	4004      	ands	r4, r0
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f7f9 f86a 	bl	8007f90 <ucdr_serialize_uint8_t>
 800eebc:	b2e4      	uxtb	r4, r4
 800eebe:	4020      	ands	r0, r4
 800eec0:	bd70      	pop	{r4, r5, r6, pc}
 800eec2:	bf00      	nop

0800eec4 <uxr_deserialize_HEARTBEAT_Payload>:
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	4605      	mov	r5, r0
 800eec8:	460e      	mov	r6, r1
 800eeca:	f7f9 f98d 	bl	80081e8 <ucdr_deserialize_uint16_t>
 800eece:	1cb1      	adds	r1, r6, #2
 800eed0:	4604      	mov	r4, r0
 800eed2:	4628      	mov	r0, r5
 800eed4:	f7f9 f988 	bl	80081e8 <ucdr_deserialize_uint16_t>
 800eed8:	1d31      	adds	r1, r6, #4
 800eeda:	4004      	ands	r4, r0
 800eedc:	4628      	mov	r0, r5
 800eede:	f7f9 f86d 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800eee2:	b2e4      	uxtb	r4, r4
 800eee4:	4020      	ands	r0, r4
 800eee6:	bd70      	pop	{r4, r5, r6, pc}

0800eee8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800eee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeec:	4605      	mov	r5, r0
 800eeee:	460e      	mov	r6, r1
 800eef0:	f7f9 ff16 	bl	8008d20 <ucdr_deserialize_int32_t>
 800eef4:	1d31      	adds	r1, r6, #4
 800eef6:	4607      	mov	r7, r0
 800eef8:	4628      	mov	r0, r5
 800eefa:	f7f9 fb8f 	bl	800861c <ucdr_deserialize_uint32_t>
 800eefe:	f106 0108 	add.w	r1, r6, #8
 800ef02:	4680      	mov	r8, r0
 800ef04:	4628      	mov	r0, r5
 800ef06:	f7f9 ff0b 	bl	8008d20 <ucdr_deserialize_int32_t>
 800ef0a:	f106 010c 	add.w	r1, r6, #12
 800ef0e:	4604      	mov	r4, r0
 800ef10:	4628      	mov	r0, r5
 800ef12:	f7f9 fb83 	bl	800861c <ucdr_deserialize_uint32_t>
 800ef16:	ea07 0708 	and.w	r7, r7, r8
 800ef1a:	403c      	ands	r4, r7
 800ef1c:	f106 0110 	add.w	r1, r6, #16
 800ef20:	4004      	ands	r4, r0
 800ef22:	4628      	mov	r0, r5
 800ef24:	f7f9 fefc 	bl	8008d20 <ucdr_deserialize_int32_t>
 800ef28:	f106 0114 	add.w	r1, r6, #20
 800ef2c:	4607      	mov	r7, r0
 800ef2e:	4628      	mov	r0, r5
 800ef30:	f7f9 fb74 	bl	800861c <ucdr_deserialize_uint32_t>
 800ef34:	b2e4      	uxtb	r4, r4
 800ef36:	403c      	ands	r4, r7
 800ef38:	4020      	ands	r0, r4
 800ef3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef3e:	bf00      	nop

0800ef40 <uxr_serialize_SampleIdentity>:
 800ef40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef44:	220c      	movs	r2, #12
 800ef46:	4604      	mov	r4, r0
 800ef48:	460d      	mov	r5, r1
 800ef4a:	f003 fdaf 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ef4e:	2203      	movs	r2, #3
 800ef50:	f105 010c 	add.w	r1, r5, #12
 800ef54:	4607      	mov	r7, r0
 800ef56:	4620      	mov	r0, r4
 800ef58:	f003 fda8 	bl	8012aac <ucdr_serialize_array_uint8_t>
 800ef5c:	7be9      	ldrb	r1, [r5, #15]
 800ef5e:	4680      	mov	r8, r0
 800ef60:	4620      	mov	r0, r4
 800ef62:	f7f9 f815 	bl	8007f90 <ucdr_serialize_uint8_t>
 800ef66:	6929      	ldr	r1, [r5, #16]
 800ef68:	4606      	mov	r6, r0
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7f9 fe40 	bl	8008bf0 <ucdr_serialize_int32_t>
 800ef70:	6969      	ldr	r1, [r5, #20]
 800ef72:	4603      	mov	r3, r0
 800ef74:	4620      	mov	r0, r4
 800ef76:	ea07 0708 	and.w	r7, r7, r8
 800ef7a:	461c      	mov	r4, r3
 800ef7c:	f7f9 fa1e 	bl	80083bc <ucdr_serialize_uint32_t>
 800ef80:	403e      	ands	r6, r7
 800ef82:	4034      	ands	r4, r6
 800ef84:	4020      	ands	r0, r4
 800ef86:	b2c0      	uxtb	r0, r0
 800ef88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef8c <uxr_deserialize_SampleIdentity>:
 800ef8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef90:	220c      	movs	r2, #12
 800ef92:	4604      	mov	r4, r0
 800ef94:	460d      	mov	r5, r1
 800ef96:	f003 fded 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800ef9a:	2203      	movs	r2, #3
 800ef9c:	f105 010c 	add.w	r1, r5, #12
 800efa0:	4607      	mov	r7, r0
 800efa2:	4620      	mov	r0, r4
 800efa4:	f003 fde6 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 800efa8:	f105 010f 	add.w	r1, r5, #15
 800efac:	4680      	mov	r8, r0
 800efae:	4620      	mov	r0, r4
 800efb0:	f7f9 f804 	bl	8007fbc <ucdr_deserialize_uint8_t>
 800efb4:	f105 0110 	add.w	r1, r5, #16
 800efb8:	4606      	mov	r6, r0
 800efba:	4620      	mov	r0, r4
 800efbc:	f7f9 feb0 	bl	8008d20 <ucdr_deserialize_int32_t>
 800efc0:	f105 0114 	add.w	r1, r5, #20
 800efc4:	4603      	mov	r3, r0
 800efc6:	4620      	mov	r0, r4
 800efc8:	ea07 0708 	and.w	r7, r7, r8
 800efcc:	461c      	mov	r4, r3
 800efce:	f7f9 fb25 	bl	800861c <ucdr_deserialize_uint32_t>
 800efd2:	403e      	ands	r6, r7
 800efd4:	4034      	ands	r4, r6
 800efd6:	4020      	ands	r0, r4
 800efd8:	b2c0      	uxtb	r0, r0
 800efda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efde:	bf00      	nop

0800efe0 <rcl_client_get_rmw_handle>:
 800efe0:	b118      	cbz	r0, 800efea <rcl_client_get_rmw_handle+0xa>
 800efe2:	6800      	ldr	r0, [r0, #0]
 800efe4:	b108      	cbz	r0, 800efea <rcl_client_get_rmw_handle+0xa>
 800efe6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800efea:	4770      	bx	lr

0800efec <rcl_send_request>:
 800efec:	b570      	push	{r4, r5, r6, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	b1e8      	cbz	r0, 800f02e <rcl_send_request+0x42>
 800eff2:	4604      	mov	r4, r0
 800eff4:	6800      	ldr	r0, [r0, #0]
 800eff6:	b1d0      	cbz	r0, 800f02e <rcl_send_request+0x42>
 800eff8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800effc:	b1bb      	cbz	r3, 800f02e <rcl_send_request+0x42>
 800effe:	460e      	mov	r6, r1
 800f000:	b1d1      	cbz	r1, 800f038 <rcl_send_request+0x4c>
 800f002:	4615      	mov	r5, r2
 800f004:	b1c2      	cbz	r2, 800f038 <rcl_send_request+0x4c>
 800f006:	2105      	movs	r1, #5
 800f008:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f00c:	f002 fb38 	bl	8011680 <__atomic_load_8>
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	e9c5 0100 	strd	r0, r1, [r5]
 800f016:	462a      	mov	r2, r5
 800f018:	4631      	mov	r1, r6
 800f01a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f01e:	f003 f9bd 	bl	801239c <rmw_send_request>
 800f022:	4606      	mov	r6, r0
 800f024:	b160      	cbz	r0, 800f040 <rcl_send_request+0x54>
 800f026:	2601      	movs	r6, #1
 800f028:	4630      	mov	r0, r6
 800f02a:	b002      	add	sp, #8
 800f02c:	bd70      	pop	{r4, r5, r6, pc}
 800f02e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800f032:	4630      	mov	r0, r6
 800f034:	b002      	add	sp, #8
 800f036:	bd70      	pop	{r4, r5, r6, pc}
 800f038:	260b      	movs	r6, #11
 800f03a:	4630      	mov	r0, r6
 800f03c:	b002      	add	sp, #8
 800f03e:	bd70      	pop	{r4, r5, r6, pc}
 800f040:	6820      	ldr	r0, [r4, #0]
 800f042:	2105      	movs	r1, #5
 800f044:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f048:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f04c:	9100      	str	r1, [sp, #0]
 800f04e:	f002 fb83 	bl	8011758 <__atomic_exchange_8>
 800f052:	4630      	mov	r0, r6
 800f054:	b002      	add	sp, #8
 800f056:	bd70      	pop	{r4, r5, r6, pc}

0800f058 <rcl_take_response>:
 800f058:	b570      	push	{r4, r5, r6, lr}
 800f05a:	468e      	mov	lr, r1
 800f05c:	460c      	mov	r4, r1
 800f05e:	4616      	mov	r6, r2
 800f060:	4605      	mov	r5, r0
 800f062:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f066:	b08c      	sub	sp, #48	; 0x30
 800f068:	f10d 0c18 	add.w	ip, sp, #24
 800f06c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f070:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f074:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f078:	b35d      	cbz	r5, 800f0d2 <rcl_take_response+0x7a>
 800f07a:	682b      	ldr	r3, [r5, #0]
 800f07c:	b34b      	cbz	r3, 800f0d2 <rcl_take_response+0x7a>
 800f07e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f082:	b330      	cbz	r0, 800f0d2 <rcl_take_response+0x7a>
 800f084:	b346      	cbz	r6, 800f0d8 <rcl_take_response+0x80>
 800f086:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f0e0 <rcl_take_response+0x88>
 800f08a:	2300      	movs	r3, #0
 800f08c:	f88d 3007 	strb.w	r3, [sp, #7]
 800f090:	4632      	mov	r2, r6
 800f092:	f10d 0307 	add.w	r3, sp, #7
 800f096:	a902      	add	r1, sp, #8
 800f098:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f09c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f0a0:	f003 fa84 	bl	80125ac <rmw_take_response>
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	b9c8      	cbnz	r0, 800f0dc <rcl_take_response+0x84>
 800f0a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f0ac:	f240 13f5 	movw	r3, #501	; 0x1f5
 800f0b0:	2a00      	cmp	r2, #0
 800f0b2:	bf08      	it	eq
 800f0b4:	461d      	moveq	r5, r3
 800f0b6:	f10d 0e18 	add.w	lr, sp, #24
 800f0ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f0be:	46a4      	mov	ip, r4
 800f0c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f0c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f0c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	b00c      	add	sp, #48	; 0x30
 800f0d0:	bd70      	pop	{r4, r5, r6, pc}
 800f0d2:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800f0d6:	e7ee      	b.n	800f0b6 <rcl_take_response+0x5e>
 800f0d8:	250b      	movs	r5, #11
 800f0da:	e7ec      	b.n	800f0b6 <rcl_take_response+0x5e>
 800f0dc:	2501      	movs	r5, #1
 800f0de:	e7ea      	b.n	800f0b6 <rcl_take_response+0x5e>
	...

0800f0e8 <rcl_client_is_valid>:
 800f0e8:	b130      	cbz	r0, 800f0f8 <rcl_client_is_valid+0x10>
 800f0ea:	6800      	ldr	r0, [r0, #0]
 800f0ec:	b120      	cbz	r0, 800f0f8 <rcl_client_is_valid+0x10>
 800f0ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f0f2:	3800      	subs	r0, #0
 800f0f4:	bf18      	it	ne
 800f0f6:	2001      	movne	r0, #1
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop

0800f0fc <rcl_convert_rmw_ret_to_rcl_ret>:
 800f0fc:	280b      	cmp	r0, #11
 800f0fe:	dc0d      	bgt.n	800f11c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f100:	2800      	cmp	r0, #0
 800f102:	db09      	blt.n	800f118 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f104:	280b      	cmp	r0, #11
 800f106:	d807      	bhi.n	800f118 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f108:	e8df f000 	tbb	[pc, r0]
 800f10c:	07060607 	.word	0x07060607
 800f110:	06060606 	.word	0x06060606
 800f114:	07070606 	.word	0x07070606
 800f118:	2001      	movs	r0, #1
 800f11a:	4770      	bx	lr
 800f11c:	28cb      	cmp	r0, #203	; 0xcb
 800f11e:	bf18      	it	ne
 800f120:	2001      	movne	r0, #1
 800f122:	4770      	bx	lr

0800f124 <rcl_get_zero_initialized_context>:
 800f124:	4a03      	ldr	r2, [pc, #12]	; (800f134 <rcl_get_zero_initialized_context+0x10>)
 800f126:	4603      	mov	r3, r0
 800f128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f12c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f130:	4618      	mov	r0, r3
 800f132:	4770      	bx	lr
 800f134:	08016af4 	.word	0x08016af4

0800f138 <rcl_context_is_valid>:
 800f138:	b118      	cbz	r0, 800f142 <rcl_context_is_valid+0xa>
 800f13a:	6840      	ldr	r0, [r0, #4]
 800f13c:	3800      	subs	r0, #0
 800f13e:	bf18      	it	ne
 800f140:	2001      	movne	r0, #1
 800f142:	4770      	bx	lr

0800f144 <__cleanup_context>:
 800f144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f148:	4606      	mov	r6, r0
 800f14a:	6800      	ldr	r0, [r0, #0]
 800f14c:	2300      	movs	r3, #0
 800f14e:	6073      	str	r3, [r6, #4]
 800f150:	2800      	cmp	r0, #0
 800f152:	d049      	beq.n	800f1e8 <__cleanup_context+0xa4>
 800f154:	6947      	ldr	r7, [r0, #20]
 800f156:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f15a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f15e:	b137      	cbz	r7, 800f16e <__cleanup_context+0x2a>
 800f160:	3014      	adds	r0, #20
 800f162:	f000 fa6d 	bl	800f640 <rcl_init_options_fini>
 800f166:	4607      	mov	r7, r0
 800f168:	2800      	cmp	r0, #0
 800f16a:	d144      	bne.n	800f1f6 <__cleanup_context+0xb2>
 800f16c:	6830      	ldr	r0, [r6, #0]
 800f16e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f170:	b143      	cbz	r3, 800f184 <__cleanup_context+0x40>
 800f172:	3028      	adds	r0, #40	; 0x28
 800f174:	f003 f86e 	bl	8012254 <rmw_context_fini>
 800f178:	b118      	cbz	r0, 800f182 <__cleanup_context+0x3e>
 800f17a:	2f00      	cmp	r7, #0
 800f17c:	d03e      	beq.n	800f1fc <__cleanup_context+0xb8>
 800f17e:	f7fb fd03 	bl	800ab88 <rcutils_reset_error>
 800f182:	6830      	ldr	r0, [r6, #0]
 800f184:	6a03      	ldr	r3, [r0, #32]
 800f186:	b1db      	cbz	r3, 800f1c0 <__cleanup_context+0x7c>
 800f188:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f18c:	2a01      	cmp	r2, #1
 800f18e:	f17c 0100 	sbcs.w	r1, ip, #0
 800f192:	db11      	blt.n	800f1b8 <__cleanup_context+0x74>
 800f194:	2400      	movs	r4, #0
 800f196:	4625      	mov	r5, r4
 800f198:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f19c:	4649      	mov	r1, r9
 800f19e:	b1b8      	cbz	r0, 800f1d0 <__cleanup_context+0x8c>
 800f1a0:	47c0      	blx	r8
 800f1a2:	6833      	ldr	r3, [r6, #0]
 800f1a4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f1a8:	3401      	adds	r4, #1
 800f1aa:	f145 0500 	adc.w	r5, r5, #0
 800f1ae:	4294      	cmp	r4, r2
 800f1b0:	eb75 010c 	sbcs.w	r1, r5, ip
 800f1b4:	6a1b      	ldr	r3, [r3, #32]
 800f1b6:	dbef      	blt.n	800f198 <__cleanup_context+0x54>
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	4649      	mov	r1, r9
 800f1bc:	47c0      	blx	r8
 800f1be:	6830      	ldr	r0, [r6, #0]
 800f1c0:	4649      	mov	r1, r9
 800f1c2:	47c0      	blx	r8
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	e9c6 3300 	strd	r3, r3, [r6]
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d0:	3401      	adds	r4, #1
 800f1d2:	f145 0500 	adc.w	r5, r5, #0
 800f1d6:	4294      	cmp	r4, r2
 800f1d8:	eb75 010c 	sbcs.w	r1, r5, ip
 800f1dc:	dbdc      	blt.n	800f198 <__cleanup_context+0x54>
 800f1de:	4618      	mov	r0, r3
 800f1e0:	4649      	mov	r1, r9
 800f1e2:	47c0      	blx	r8
 800f1e4:	6830      	ldr	r0, [r6, #0]
 800f1e6:	e7eb      	b.n	800f1c0 <__cleanup_context+0x7c>
 800f1e8:	4607      	mov	r7, r0
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	e9c6 3300 	strd	r3, r3, [r6]
 800f1f0:	4638      	mov	r0, r7
 800f1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1f6:	f7fb fcc7 	bl	800ab88 <rcutils_reset_error>
 800f1fa:	e7b7      	b.n	800f16c <__cleanup_context+0x28>
 800f1fc:	f7ff ff7e 	bl	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800f200:	4607      	mov	r7, r0
 800f202:	e7bc      	b.n	800f17e <__cleanup_context+0x3a>

0800f204 <rcl_get_zero_initialized_guard_condition>:
 800f204:	4a03      	ldr	r2, [pc, #12]	; (800f214 <rcl_get_zero_initialized_guard_condition+0x10>)
 800f206:	4603      	mov	r3, r0
 800f208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f20c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f210:	4618      	mov	r0, r3
 800f212:	4770      	bx	lr
 800f214:	08016afc 	.word	0x08016afc

0800f218 <rcl_guard_condition_init_from_rmw>:
 800f218:	b082      	sub	sp, #8
 800f21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800f224:	4604      	mov	r4, r0
 800f226:	f84c 3f04 	str.w	r3, [ip, #4]!
 800f22a:	460e      	mov	r6, r1
 800f22c:	4617      	mov	r7, r2
 800f22e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f232:	f10d 0e04 	add.w	lr, sp, #4
 800f236:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f23a:	f8dc 3000 	ldr.w	r3, [ip]
 800f23e:	f8ce 3000 	str.w	r3, [lr]
 800f242:	a801      	add	r0, sp, #4
 800f244:	f7fb fc64 	bl	800ab10 <rcutils_allocator_is_valid>
 800f248:	b350      	cbz	r0, 800f2a0 <rcl_guard_condition_init_from_rmw+0x88>
 800f24a:	b34c      	cbz	r4, 800f2a0 <rcl_guard_condition_init_from_rmw+0x88>
 800f24c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f250:	f1b8 0f00 	cmp.w	r8, #0
 800f254:	d11e      	bne.n	800f294 <rcl_guard_condition_init_from_rmw+0x7c>
 800f256:	b31f      	cbz	r7, 800f2a0 <rcl_guard_condition_init_from_rmw+0x88>
 800f258:	4638      	mov	r0, r7
 800f25a:	f7ff ff6d 	bl	800f138 <rcl_context_is_valid>
 800f25e:	b328      	cbz	r0, 800f2ac <rcl_guard_condition_init_from_rmw+0x94>
 800f260:	9b01      	ldr	r3, [sp, #4]
 800f262:	9905      	ldr	r1, [sp, #20]
 800f264:	201c      	movs	r0, #28
 800f266:	4798      	blx	r3
 800f268:	4605      	mov	r5, r0
 800f26a:	6060      	str	r0, [r4, #4]
 800f26c:	b358      	cbz	r0, 800f2c6 <rcl_guard_condition_init_from_rmw+0xae>
 800f26e:	b1fe      	cbz	r6, 800f2b0 <rcl_guard_condition_init_from_rmw+0x98>
 800f270:	6006      	str	r6, [r0, #0]
 800f272:	f880 8004 	strb.w	r8, [r0, #4]
 800f276:	ac01      	add	r4, sp, #4
 800f278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f27a:	f105 0c08 	add.w	ip, r5, #8
 800f27e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	f8cc 3000 	str.w	r3, [ip]
 800f288:	2000      	movs	r0, #0
 800f28a:	b006      	add	sp, #24
 800f28c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f290:	b002      	add	sp, #8
 800f292:	4770      	bx	lr
 800f294:	2064      	movs	r0, #100	; 0x64
 800f296:	b006      	add	sp, #24
 800f298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f29c:	b002      	add	sp, #8
 800f29e:	4770      	bx	lr
 800f2a0:	200b      	movs	r0, #11
 800f2a2:	b006      	add	sp, #24
 800f2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	b002      	add	sp, #8
 800f2aa:	4770      	bx	lr
 800f2ac:	2065      	movs	r0, #101	; 0x65
 800f2ae:	e7f2      	b.n	800f296 <rcl_guard_condition_init_from_rmw+0x7e>
 800f2b0:	6838      	ldr	r0, [r7, #0]
 800f2b2:	3028      	adds	r0, #40	; 0x28
 800f2b4:	f002 fd78 	bl	8011da8 <rmw_create_guard_condition>
 800f2b8:	6028      	str	r0, [r5, #0]
 800f2ba:	6865      	ldr	r5, [r4, #4]
 800f2bc:	682e      	ldr	r6, [r5, #0]
 800f2be:	b126      	cbz	r6, 800f2ca <rcl_guard_condition_init_from_rmw+0xb2>
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	712b      	strb	r3, [r5, #4]
 800f2c4:	e7d7      	b.n	800f276 <rcl_guard_condition_init_from_rmw+0x5e>
 800f2c6:	200a      	movs	r0, #10
 800f2c8:	e7e5      	b.n	800f296 <rcl_guard_condition_init_from_rmw+0x7e>
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	9b02      	ldr	r3, [sp, #8]
 800f2ce:	9905      	ldr	r1, [sp, #20]
 800f2d0:	4798      	blx	r3
 800f2d2:	6066      	str	r6, [r4, #4]
 800f2d4:	2001      	movs	r0, #1
 800f2d6:	e7de      	b.n	800f296 <rcl_guard_condition_init_from_rmw+0x7e>

0800f2d8 <rcl_guard_condition_fini>:
 800f2d8:	b570      	push	{r4, r5, r6, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	b1f0      	cbz	r0, 800f31c <rcl_guard_condition_fini+0x44>
 800f2de:	6843      	ldr	r3, [r0, #4]
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	b163      	cbz	r3, 800f2fe <rcl_guard_condition_fini+0x26>
 800f2e4:	6818      	ldr	r0, [r3, #0]
 800f2e6:	68de      	ldr	r6, [r3, #12]
 800f2e8:	6999      	ldr	r1, [r3, #24]
 800f2ea:	b160      	cbz	r0, 800f306 <rcl_guard_condition_fini+0x2e>
 800f2ec:	791d      	ldrb	r5, [r3, #4]
 800f2ee:	b965      	cbnz	r5, 800f30a <rcl_guard_condition_fini+0x32>
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	47b0      	blx	r6
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	6063      	str	r3, [r4, #4]
 800f2fa:	b002      	add	sp, #8
 800f2fc:	bd70      	pop	{r4, r5, r6, pc}
 800f2fe:	461d      	mov	r5, r3
 800f300:	4628      	mov	r0, r5
 800f302:	b002      	add	sp, #8
 800f304:	bd70      	pop	{r4, r5, r6, pc}
 800f306:	4605      	mov	r5, r0
 800f308:	e7f2      	b.n	800f2f0 <rcl_guard_condition_fini+0x18>
 800f30a:	9101      	str	r1, [sp, #4]
 800f30c:	f002 fd60 	bl	8011dd0 <rmw_destroy_guard_condition>
 800f310:	1e05      	subs	r5, r0, #0
 800f312:	6863      	ldr	r3, [r4, #4]
 800f314:	9901      	ldr	r1, [sp, #4]
 800f316:	bf18      	it	ne
 800f318:	2501      	movne	r5, #1
 800f31a:	e7e9      	b.n	800f2f0 <rcl_guard_condition_fini+0x18>
 800f31c:	250b      	movs	r5, #11
 800f31e:	4628      	mov	r0, r5
 800f320:	b002      	add	sp, #8
 800f322:	bd70      	pop	{r4, r5, r6, pc}

0800f324 <rcl_guard_condition_get_default_options>:
 800f324:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f326:	b087      	sub	sp, #28
 800f328:	4606      	mov	r6, r0
 800f32a:	4668      	mov	r0, sp
 800f32c:	f7fb fbe2 	bl	800aaf4 <rcutils_get_default_allocator>
 800f330:	4b09      	ldr	r3, [pc, #36]	; (800f358 <rcl_guard_condition_get_default_options+0x34>)
 800f332:	46ee      	mov	lr, sp
 800f334:	469c      	mov	ip, r3
 800f336:	461d      	mov	r5, r3
 800f338:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f33c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f342:	4634      	mov	r4, r6
 800f344:	f8de 7000 	ldr.w	r7, [lr]
 800f348:	f8cc 7000 	str.w	r7, [ip]
 800f34c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f34e:	4630      	mov	r0, r6
 800f350:	6027      	str	r7, [r4, #0]
 800f352:	b007      	add	sp, #28
 800f354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f356:	bf00      	nop
 800f358:	2000dc54 	.word	0x2000dc54

0800f35c <rcl_guard_condition_get_rmw_handle>:
 800f35c:	b110      	cbz	r0, 800f364 <rcl_guard_condition_get_rmw_handle+0x8>
 800f35e:	6840      	ldr	r0, [r0, #4]
 800f360:	b100      	cbz	r0, 800f364 <rcl_guard_condition_get_rmw_handle+0x8>
 800f362:	6800      	ldr	r0, [r0, #0]
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop

0800f368 <rcl_init>:
 800f368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f36c:	1e05      	subs	r5, r0, #0
 800f36e:	b09e      	sub	sp, #120	; 0x78
 800f370:	460e      	mov	r6, r1
 800f372:	4690      	mov	r8, r2
 800f374:	461f      	mov	r7, r3
 800f376:	f340 809c 	ble.w	800f4b2 <rcl_init+0x14a>
 800f37a:	2900      	cmp	r1, #0
 800f37c:	f000 809c 	beq.w	800f4b8 <rcl_init+0x150>
 800f380:	f1a1 0e04 	sub.w	lr, r1, #4
 800f384:	f04f 0c00 	mov.w	ip, #0
 800f388:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f38c:	f10c 0c01 	add.w	ip, ip, #1
 800f390:	2c00      	cmp	r4, #0
 800f392:	f000 8091 	beq.w	800f4b8 <rcl_init+0x150>
 800f396:	4565      	cmp	r5, ip
 800f398:	d1f6      	bne.n	800f388 <rcl_init+0x20>
 800f39a:	f1b8 0f00 	cmp.w	r8, #0
 800f39e:	f000 808b 	beq.w	800f4b8 <rcl_init+0x150>
 800f3a2:	f8d8 4000 	ldr.w	r4, [r8]
 800f3a6:	2c00      	cmp	r4, #0
 800f3a8:	f000 8086 	beq.w	800f4b8 <rcl_init+0x150>
 800f3ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f3ae:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f3b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3b6:	6823      	ldr	r3, [r4, #0]
 800f3b8:	f8cc 3000 	str.w	r3, [ip]
 800f3bc:	a819      	add	r0, sp, #100	; 0x64
 800f3be:	f7fb fba7 	bl	800ab10 <rcutils_allocator_is_valid>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d078      	beq.n	800f4b8 <rcl_init+0x150>
 800f3c6:	2f00      	cmp	r7, #0
 800f3c8:	d076      	beq.n	800f4b8 <rcl_init+0x150>
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d178      	bne.n	800f4c2 <rcl_init+0x15a>
 800f3d0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800f3d4:	2178      	movs	r1, #120	; 0x78
 800f3d6:	2001      	movs	r0, #1
 800f3d8:	4798      	blx	r3
 800f3da:	4604      	mov	r4, r0
 800f3dc:	6038      	str	r0, [r7, #0]
 800f3de:	2800      	cmp	r0, #0
 800f3e0:	f000 80b6 	beq.w	800f550 <rcl_init+0x1e8>
 800f3e4:	a802      	add	r0, sp, #8
 800f3e6:	f002 fb53 	bl	8011a90 <rmw_get_zero_initialized_context>
 800f3ea:	a902      	add	r1, sp, #8
 800f3ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f3f0:	2250      	movs	r2, #80	; 0x50
 800f3f2:	ac19      	add	r4, sp, #100	; 0x64
 800f3f4:	f006 f841 	bl	801547a <memcpy>
 800f3f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f3fa:	f8d7 e000 	ldr.w	lr, [r7]
 800f3fe:	46f4      	mov	ip, lr
 800f400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	f8cc 3000 	str.w	r3, [ip]
 800f40a:	f10e 0114 	add.w	r1, lr, #20
 800f40e:	4640      	mov	r0, r8
 800f410:	f000 f940 	bl	800f694 <rcl_init_options_copy>
 800f414:	4604      	mov	r4, r0
 800f416:	2800      	cmp	r0, #0
 800f418:	d144      	bne.n	800f4a4 <rcl_init+0x13c>
 800f41a:	f8d7 9000 	ldr.w	r9, [r7]
 800f41e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f422:	f8c9 0020 	str.w	r0, [r9, #32]
 800f426:	f8c9 5018 	str.w	r5, [r9, #24]
 800f42a:	f8c9 801c 	str.w	r8, [r9, #28]
 800f42e:	2d00      	cmp	r5, #0
 800f430:	d04e      	beq.n	800f4d0 <rcl_init+0x168>
 800f432:	2e00      	cmp	r6, #0
 800f434:	d04c      	beq.n	800f4d0 <rcl_init+0x168>
 800f436:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800f43a:	2104      	movs	r1, #4
 800f43c:	4628      	mov	r0, r5
 800f43e:	4798      	blx	r3
 800f440:	f8c9 0020 	str.w	r0, [r9, #32]
 800f444:	f8d7 9000 	ldr.w	r9, [r7]
 800f448:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f44c:	46ca      	mov	sl, r9
 800f44e:	b343      	cbz	r3, 800f4a2 <rcl_init+0x13a>
 800f450:	2d01      	cmp	r5, #1
 800f452:	f178 0300 	sbcs.w	r3, r8, #0
 800f456:	db3b      	blt.n	800f4d0 <rcl_init+0x168>
 800f458:	2400      	movs	r4, #0
 800f45a:	3e04      	subs	r6, #4
 800f45c:	46a1      	mov	r9, r4
 800f45e:	e00b      	b.n	800f478 <rcl_init+0x110>
 800f460:	6831      	ldr	r1, [r6, #0]
 800f462:	f006 f80a 	bl	801547a <memcpy>
 800f466:	3401      	adds	r4, #1
 800f468:	f149 0900 	adc.w	r9, r9, #0
 800f46c:	45c8      	cmp	r8, r9
 800f46e:	bf08      	it	eq
 800f470:	42a5      	cmpeq	r5, r4
 800f472:	d02b      	beq.n	800f4cc <rcl_init+0x164>
 800f474:	f8d7 a000 	ldr.w	sl, [r7]
 800f478:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f47c:	f7f0 feba 	bl	80001f4 <strlen>
 800f480:	1c42      	adds	r2, r0, #1
 800f482:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f484:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f486:	f8da a020 	ldr.w	sl, [sl, #32]
 800f48a:	9201      	str	r2, [sp, #4]
 800f48c:	4610      	mov	r0, r2
 800f48e:	4798      	blx	r3
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800f496:	6a1b      	ldr	r3, [r3, #32]
 800f498:	9a01      	ldr	r2, [sp, #4]
 800f49a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	d1de      	bne.n	800f460 <rcl_init+0xf8>
 800f4a2:	240a      	movs	r4, #10
 800f4a4:	4638      	mov	r0, r7
 800f4a6:	f7ff fe4d 	bl	800f144 <__cleanup_context>
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	b01e      	add	sp, #120	; 0x78
 800f4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b2:	2900      	cmp	r1, #0
 800f4b4:	f43f af71 	beq.w	800f39a <rcl_init+0x32>
 800f4b8:	240b      	movs	r4, #11
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	b01e      	add	sp, #120	; 0x78
 800f4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c2:	2464      	movs	r4, #100	; 0x64
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	b01e      	add	sp, #120	; 0x78
 800f4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4cc:	f8d7 9000 	ldr.w	r9, [r7]
 800f4d0:	4926      	ldr	r1, [pc, #152]	; (800f56c <rcl_init+0x204>)
 800f4d2:	680b      	ldr	r3, [r1, #0]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	d036      	beq.n	800f546 <rcl_init+0x1de>
 800f4d8:	600b      	str	r3, [r1, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	2400      	movs	r4, #0
 800f4de:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f4e2:	607b      	str	r3, [r7, #4]
 800f4e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800f4ec:	d034      	beq.n	800f558 <rcl_init+0x1f0>
 800f4ee:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f4f2:	b93b      	cbnz	r3, 800f504 <rcl_init+0x19c>
 800f4f4:	3030      	adds	r0, #48	; 0x30
 800f4f6:	f000 f939 	bl	800f76c <rcl_get_localhost_only>
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d1d1      	bne.n	800f4a4 <rcl_init+0x13c>
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	6958      	ldr	r0, [r3, #20]
 800f504:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800f506:	aa18      	add	r2, sp, #96	; 0x60
 800f508:	a917      	add	r1, sp, #92	; 0x5c
 800f50a:	f000 fd59 	bl	800ffc0 <rcl_validate_enclave_name>
 800f50e:	4604      	mov	r4, r0
 800f510:	2800      	cmp	r0, #0
 800f512:	d1c7      	bne.n	800f4a4 <rcl_init+0x13c>
 800f514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f516:	b9eb      	cbnz	r3, 800f554 <rcl_init+0x1ec>
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	694b      	ldr	r3, [r1, #20]
 800f51c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f51e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f522:	f000 fa99 	bl	800fa58 <rcl_get_security_options_from_environment>
 800f526:	4604      	mov	r4, r0
 800f528:	2800      	cmp	r0, #0
 800f52a:	d1bb      	bne.n	800f4a4 <rcl_init+0x13c>
 800f52c:	6839      	ldr	r1, [r7, #0]
 800f52e:	6948      	ldr	r0, [r1, #20]
 800f530:	3128      	adds	r1, #40	; 0x28
 800f532:	3018      	adds	r0, #24
 800f534:	f002 fd58 	bl	8011fe8 <rmw_init>
 800f538:	4604      	mov	r4, r0
 800f53a:	2800      	cmp	r0, #0
 800f53c:	d0bd      	beq.n	800f4ba <rcl_init+0x152>
 800f53e:	f7ff fddd 	bl	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800f542:	4604      	mov	r4, r0
 800f544:	e7ae      	b.n	800f4a4 <rcl_init+0x13c>
 800f546:	2201      	movs	r2, #1
 800f548:	461c      	mov	r4, r3
 800f54a:	600a      	str	r2, [r1, #0]
 800f54c:	4613      	mov	r3, r2
 800f54e:	e7c6      	b.n	800f4de <rcl_init+0x176>
 800f550:	240a      	movs	r4, #10
 800f552:	e7b2      	b.n	800f4ba <rcl_init+0x152>
 800f554:	2401      	movs	r4, #1
 800f556:	e7a5      	b.n	800f4a4 <rcl_init+0x13c>
 800f558:	3024      	adds	r0, #36	; 0x24
 800f55a:	f004 fe23 	bl	80141a4 <rcl_get_default_domain_id>
 800f55e:	4604      	mov	r4, r0
 800f560:	2800      	cmp	r0, #0
 800f562:	d19f      	bne.n	800f4a4 <rcl_init+0x13c>
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	6958      	ldr	r0, [r3, #20]
 800f568:	e7c1      	b.n	800f4ee <rcl_init+0x186>
 800f56a:	bf00      	nop
 800f56c:	2000dc68 	.word	0x2000dc68

0800f570 <rcl_get_zero_initialized_init_options>:
 800f570:	2000      	movs	r0, #0
 800f572:	4770      	bx	lr

0800f574 <rcl_init_options_init>:
 800f574:	b084      	sub	sp, #16
 800f576:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f578:	b097      	sub	sp, #92	; 0x5c
 800f57a:	ae1d      	add	r6, sp, #116	; 0x74
 800f57c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f580:	2800      	cmp	r0, #0
 800f582:	d058      	beq.n	800f636 <rcl_init_options_init+0xc2>
 800f584:	6803      	ldr	r3, [r0, #0]
 800f586:	4605      	mov	r5, r0
 800f588:	b133      	cbz	r3, 800f598 <rcl_init_options_init+0x24>
 800f58a:	2464      	movs	r4, #100	; 0x64
 800f58c:	4620      	mov	r0, r4
 800f58e:	b017      	add	sp, #92	; 0x5c
 800f590:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f594:	b004      	add	sp, #16
 800f596:	4770      	bx	lr
 800f598:	4630      	mov	r0, r6
 800f59a:	f7fb fab9 	bl	800ab10 <rcutils_allocator_is_valid>
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	d049      	beq.n	800f636 <rcl_init_options_init+0xc2>
 800f5a2:	46b4      	mov	ip, r6
 800f5a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5a8:	ac11      	add	r4, sp, #68	; 0x44
 800f5aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f5ac:	f8dc 3000 	ldr.w	r3, [ip]
 800f5b0:	6023      	str	r3, [r4, #0]
 800f5b2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f5b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f5b6:	2050      	movs	r0, #80	; 0x50
 800f5b8:	4798      	blx	r3
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	6028      	str	r0, [r5, #0]
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	d03b      	beq.n	800f63a <rcl_init_options_init+0xc6>
 800f5c2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800f5c6:	4686      	mov	lr, r0
 800f5c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f5d0:	f8dc 3000 	ldr.w	r3, [ip]
 800f5d4:	f8ce 3000 	str.w	r3, [lr]
 800f5d8:	a802      	add	r0, sp, #8
 800f5da:	f002 fa69 	bl	8011ab0 <rmw_get_zero_initialized_init_options>
 800f5de:	f10d 0e08 	add.w	lr, sp, #8
 800f5e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5e6:	f104 0c18 	add.w	ip, r4, #24
 800f5ea:	682f      	ldr	r7, [r5, #0]
 800f5ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f600:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f604:	ac20      	add	r4, sp, #128	; 0x80
 800f606:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f60a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f60e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f612:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f616:	f107 0018 	add.w	r0, r7, #24
 800f61a:	f002 fbed 	bl	8011df8 <rmw_init_options_init>
 800f61e:	4604      	mov	r4, r0
 800f620:	2800      	cmp	r0, #0
 800f622:	d0b3      	beq.n	800f58c <rcl_init_options_init+0x18>
 800f624:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f626:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f628:	6828      	ldr	r0, [r5, #0]
 800f62a:	4798      	blx	r3
 800f62c:	4620      	mov	r0, r4
 800f62e:	f7ff fd65 	bl	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800f632:	4604      	mov	r4, r0
 800f634:	e7aa      	b.n	800f58c <rcl_init_options_init+0x18>
 800f636:	240b      	movs	r4, #11
 800f638:	e7a8      	b.n	800f58c <rcl_init_options_init+0x18>
 800f63a:	240a      	movs	r4, #10
 800f63c:	e7a6      	b.n	800f58c <rcl_init_options_init+0x18>
 800f63e:	bf00      	nop

0800f640 <rcl_init_options_fini>:
 800f640:	b530      	push	{r4, r5, lr}
 800f642:	b087      	sub	sp, #28
 800f644:	b1f0      	cbz	r0, 800f684 <rcl_init_options_fini+0x44>
 800f646:	6803      	ldr	r3, [r0, #0]
 800f648:	4604      	mov	r4, r0
 800f64a:	b1db      	cbz	r3, 800f684 <rcl_init_options_fini+0x44>
 800f64c:	469c      	mov	ip, r3
 800f64e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f652:	f10d 0e04 	add.w	lr, sp, #4
 800f656:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f65a:	f8dc 3000 	ldr.w	r3, [ip]
 800f65e:	f8ce 3000 	str.w	r3, [lr]
 800f662:	a801      	add	r0, sp, #4
 800f664:	f7fb fa54 	bl	800ab10 <rcutils_allocator_is_valid>
 800f668:	b160      	cbz	r0, 800f684 <rcl_init_options_fini+0x44>
 800f66a:	6820      	ldr	r0, [r4, #0]
 800f66c:	3018      	adds	r0, #24
 800f66e:	f002 fc73 	bl	8011f58 <rmw_init_options_fini>
 800f672:	4605      	mov	r5, r0
 800f674:	b950      	cbnz	r0, 800f68c <rcl_init_options_fini+0x4c>
 800f676:	6820      	ldr	r0, [r4, #0]
 800f678:	9b02      	ldr	r3, [sp, #8]
 800f67a:	9905      	ldr	r1, [sp, #20]
 800f67c:	4798      	blx	r3
 800f67e:	4628      	mov	r0, r5
 800f680:	b007      	add	sp, #28
 800f682:	bd30      	pop	{r4, r5, pc}
 800f684:	250b      	movs	r5, #11
 800f686:	4628      	mov	r0, r5
 800f688:	b007      	add	sp, #28
 800f68a:	bd30      	pop	{r4, r5, pc}
 800f68c:	f7ff fd36 	bl	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800f690:	4605      	mov	r5, r0
 800f692:	e7f8      	b.n	800f686 <rcl_init_options_fini+0x46>

0800f694 <rcl_init_options_copy>:
 800f694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f698:	b094      	sub	sp, #80	; 0x50
 800f69a:	2800      	cmp	r0, #0
 800f69c:	d058      	beq.n	800f750 <rcl_init_options_copy+0xbc>
 800f69e:	4604      	mov	r4, r0
 800f6a0:	6800      	ldr	r0, [r0, #0]
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d054      	beq.n	800f750 <rcl_init_options_copy+0xbc>
 800f6a6:	460e      	mov	r6, r1
 800f6a8:	f7fb fa32 	bl	800ab10 <rcutils_allocator_is_valid>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d04f      	beq.n	800f750 <rcl_init_options_copy+0xbc>
 800f6b0:	2e00      	cmp	r6, #0
 800f6b2:	d04d      	beq.n	800f750 <rcl_init_options_copy+0xbc>
 800f6b4:	6833      	ldr	r3, [r6, #0]
 800f6b6:	b123      	cbz	r3, 800f6c2 <rcl_init_options_copy+0x2e>
 800f6b8:	2464      	movs	r4, #100	; 0x64
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	b014      	add	sp, #80	; 0x50
 800f6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c2:	6827      	ldr	r7, [r4, #0]
 800f6c4:	46bc      	mov	ip, r7
 800f6c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6ca:	ad0f      	add	r5, sp, #60	; 0x3c
 800f6cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f6ce:	f8dc 3000 	ldr.w	r3, [ip]
 800f6d2:	f8d7 8000 	ldr.w	r8, [r7]
 800f6d6:	602b      	str	r3, [r5, #0]
 800f6d8:	4619      	mov	r1, r3
 800f6da:	2050      	movs	r0, #80	; 0x50
 800f6dc:	47c0      	blx	r8
 800f6de:	4605      	mov	r5, r0
 800f6e0:	6030      	str	r0, [r6, #0]
 800f6e2:	b3d0      	cbz	r0, 800f75a <rcl_init_options_copy+0xc6>
 800f6e4:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800f6e8:	4686      	mov	lr, r0
 800f6ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f6f2:	f8dc 3000 	ldr.w	r3, [ip]
 800f6f6:	f8ce 3000 	str.w	r3, [lr]
 800f6fa:	4668      	mov	r0, sp
 800f6fc:	f002 f9d8 	bl	8011ab0 <rmw_get_zero_initialized_init_options>
 800f700:	46ee      	mov	lr, sp
 800f702:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f706:	f105 0c18 	add.w	ip, r5, #24
 800f70a:	6824      	ldr	r4, [r4, #0]
 800f70c:	6835      	ldr	r5, [r6, #0]
 800f70e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f712:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f716:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f71a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f71e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f722:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f726:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f72a:	f104 0018 	add.w	r0, r4, #24
 800f72e:	f105 0118 	add.w	r1, r5, #24
 800f732:	f002 fbc9 	bl	8011ec8 <rmw_init_options_copy>
 800f736:	4604      	mov	r4, r0
 800f738:	2800      	cmp	r0, #0
 800f73a:	d0be      	beq.n	800f6ba <rcl_init_options_copy+0x26>
 800f73c:	f7fb fa0e 	bl	800ab5c <rcutils_get_error_string>
 800f740:	f7fb fa22 	bl	800ab88 <rcutils_reset_error>
 800f744:	4630      	mov	r0, r6
 800f746:	f7ff ff7b 	bl	800f640 <rcl_init_options_fini>
 800f74a:	b140      	cbz	r0, 800f75e <rcl_init_options_copy+0xca>
 800f74c:	4604      	mov	r4, r0
 800f74e:	e7b4      	b.n	800f6ba <rcl_init_options_copy+0x26>
 800f750:	240b      	movs	r4, #11
 800f752:	4620      	mov	r0, r4
 800f754:	b014      	add	sp, #80	; 0x50
 800f756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f75a:	240a      	movs	r4, #10
 800f75c:	e7ad      	b.n	800f6ba <rcl_init_options_copy+0x26>
 800f75e:	4620      	mov	r0, r4
 800f760:	b014      	add	sp, #80	; 0x50
 800f762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f766:	f7ff bcc9 	b.w	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800f76a:	bf00      	nop

0800f76c <rcl_get_localhost_only>:
 800f76c:	b510      	push	{r4, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	2300      	movs	r3, #0
 800f772:	9301      	str	r3, [sp, #4]
 800f774:	b1b8      	cbz	r0, 800f7a6 <rcl_get_localhost_only+0x3a>
 800f776:	4604      	mov	r4, r0
 800f778:	a901      	add	r1, sp, #4
 800f77a:	480c      	ldr	r0, [pc, #48]	; (800f7ac <rcl_get_localhost_only+0x40>)
 800f77c:	f7fb f9d6 	bl	800ab2c <rcutils_get_env>
 800f780:	b110      	cbz	r0, 800f788 <rcl_get_localhost_only+0x1c>
 800f782:	2001      	movs	r0, #1
 800f784:	b002      	add	sp, #8
 800f786:	bd10      	pop	{r4, pc}
 800f788:	9b01      	ldr	r3, [sp, #4]
 800f78a:	b113      	cbz	r3, 800f792 <rcl_get_localhost_only+0x26>
 800f78c:	781a      	ldrb	r2, [r3, #0]
 800f78e:	2a31      	cmp	r2, #49	; 0x31
 800f790:	d004      	beq.n	800f79c <rcl_get_localhost_only+0x30>
 800f792:	2302      	movs	r3, #2
 800f794:	2000      	movs	r0, #0
 800f796:	7023      	strb	r3, [r4, #0]
 800f798:	b002      	add	sp, #8
 800f79a:	bd10      	pop	{r4, pc}
 800f79c:	785b      	ldrb	r3, [r3, #1]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1f7      	bne.n	800f792 <rcl_get_localhost_only+0x26>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e7f6      	b.n	800f794 <rcl_get_localhost_only+0x28>
 800f7a6:	200b      	movs	r0, #11
 800f7a8:	b002      	add	sp, #8
 800f7aa:	bd10      	pop	{r4, pc}
 800f7ac:	08016b04 	.word	0x08016b04

0800f7b0 <rcl_node_resolve_name>:
 800f7b0:	b082      	sub	sp, #8
 800f7b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b6:	b091      	sub	sp, #68	; 0x44
 800f7b8:	ac1a      	add	r4, sp, #104	; 0x68
 800f7ba:	e884 000c 	stmia.w	r4, {r2, r3}
 800f7be:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d03b      	beq.n	800f83e <rcl_node_resolve_name+0x8e>
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	4605      	mov	r5, r0
 800f7ca:	f7f9 ff2f 	bl	800962c <rcl_node_get_options>
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	d037      	beq.n	800f842 <rcl_node_resolve_name+0x92>
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f7f9 ff1a 	bl	800960c <rcl_node_get_name>
 800f7d8:	4606      	mov	r6, r0
 800f7da:	4628      	mov	r0, r5
 800f7dc:	f7f9 ff1e 	bl	800961c <rcl_node_get_namespace>
 800f7e0:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800f7e4:	4681      	mov	r9, r0
 800f7e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7ea:	ad0b      	add	r5, sp, #44	; 0x2c
 800f7ec:	46ac      	mov	ip, r5
 800f7ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7f2:	f8de 3000 	ldr.w	r3, [lr]
 800f7f6:	f8cc 3000 	str.w	r3, [ip]
 800f7fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7fc:	b1fb      	cbz	r3, 800f83e <rcl_node_resolve_name+0x8e>
 800f7fe:	468a      	mov	sl, r1
 800f800:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800f804:	f002 f818 	bl	8011838 <rcutils_get_zero_initialized_string_map>
 800f808:	ab10      	add	r3, sp, #64	; 0x40
 800f80a:	9008      	str	r0, [sp, #32]
 800f80c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800f810:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f814:	2100      	movs	r1, #0
 800f816:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f81a:	a808      	add	r0, sp, #32
 800f81c:	f002 f884 	bl	8011928 <rcutils_string_map_init>
 800f820:	4607      	mov	r7, r0
 800f822:	b180      	cbz	r0, 800f846 <rcl_node_resolve_name+0x96>
 800f824:	f7fb f99a 	bl	800ab5c <rcutils_get_error_string>
 800f828:	f7fb f9ae 	bl	800ab88 <rcutils_reset_error>
 800f82c:	2f0a      	cmp	r7, #10
 800f82e:	bf18      	it	ne
 800f830:	2701      	movne	r7, #1
 800f832:	4638      	mov	r0, r7
 800f834:	b011      	add	sp, #68	; 0x44
 800f836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83a:	b002      	add	sp, #8
 800f83c:	4770      	bx	lr
 800f83e:	270b      	movs	r7, #11
 800f840:	e7f7      	b.n	800f832 <rcl_node_resolve_name+0x82>
 800f842:	2701      	movs	r7, #1
 800f844:	e7f5      	b.n	800f832 <rcl_node_resolve_name+0x82>
 800f846:	9009      	str	r0, [sp, #36]	; 0x24
 800f848:	9007      	str	r0, [sp, #28]
 800f84a:	a808      	add	r0, sp, #32
 800f84c:	f004 fe3c 	bl	80144c8 <rcl_get_default_topic_name_substitutions>
 800f850:	4607      	mov	r7, r0
 800f852:	b1a8      	cbz	r0, 800f880 <rcl_node_resolve_name+0xd0>
 800f854:	280a      	cmp	r0, #10
 800f856:	9c07      	ldr	r4, [sp, #28]
 800f858:	d000      	beq.n	800f85c <rcl_node_resolve_name+0xac>
 800f85a:	2701      	movs	r7, #1
 800f85c:	a808      	add	r0, sp, #32
 800f85e:	f002 f8a3 	bl	80119a8 <rcutils_string_map_fini>
 800f862:	2800      	cmp	r0, #0
 800f864:	d13d      	bne.n	800f8e2 <rcl_node_resolve_name+0x132>
 800f866:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f868:	4659      	mov	r1, fp
 800f86a:	47d0      	blx	sl
 800f86c:	4659      	mov	r1, fp
 800f86e:	4620      	mov	r0, r4
 800f870:	47d0      	blx	sl
 800f872:	f1b8 0f00 	cmp.w	r8, #0
 800f876:	d0dc      	beq.n	800f832 <rcl_node_resolve_name+0x82>
 800f878:	2f67      	cmp	r7, #103	; 0x67
 800f87a:	bf08      	it	eq
 800f87c:	2768      	moveq	r7, #104	; 0x68
 800f87e:	e7d8      	b.n	800f832 <rcl_node_resolve_name+0x82>
 800f880:	ab09      	add	r3, sp, #36	; 0x24
 800f882:	9305      	str	r3, [sp, #20]
 800f884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f886:	46ec      	mov	ip, sp
 800f888:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	f8cc 3000 	str.w	r3, [ip]
 800f892:	464a      	mov	r2, r9
 800f894:	4631      	mov	r1, r6
 800f896:	4620      	mov	r0, r4
 800f898:	ab08      	add	r3, sp, #32
 800f89a:	f004 fcb7 	bl	801420c <rcl_expand_topic_name>
 800f89e:	4607      	mov	r7, r0
 800f8a0:	b9b8      	cbnz	r0, 800f8d2 <rcl_node_resolve_name+0x122>
 800f8a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f8a4:	9009      	str	r0, [sp, #36]	; 0x24
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	a90a      	add	r1, sp, #40	; 0x28
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f002 f998 	bl	8011be0 <rmw_validate_full_topic_name>
 800f8b0:	b988      	cbnz	r0, 800f8d6 <rcl_node_resolve_name+0x126>
 800f8b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f8b4:	b9d5      	cbnz	r5, 800f8ec <rcl_node_resolve_name+0x13c>
 800f8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8b8:	a808      	add	r0, sp, #32
 800f8ba:	601c      	str	r4, [r3, #0]
 800f8bc:	f002 f874 	bl	80119a8 <rcutils_string_map_fini>
 800f8c0:	4607      	mov	r7, r0
 800f8c2:	b1a8      	cbz	r0, 800f8f0 <rcl_node_resolve_name+0x140>
 800f8c4:	f7fb f94a 	bl	800ab5c <rcutils_get_error_string>
 800f8c8:	462c      	mov	r4, r5
 800f8ca:	f7fb f95d 	bl	800ab88 <rcutils_reset_error>
 800f8ce:	2701      	movs	r7, #1
 800f8d0:	e7c9      	b.n	800f866 <rcl_node_resolve_name+0xb6>
 800f8d2:	9c07      	ldr	r4, [sp, #28]
 800f8d4:	e7c2      	b.n	800f85c <rcl_node_resolve_name+0xac>
 800f8d6:	f7fb f941 	bl	800ab5c <rcutils_get_error_string>
 800f8da:	2701      	movs	r7, #1
 800f8dc:	f7fb f954 	bl	800ab88 <rcutils_reset_error>
 800f8e0:	e7bc      	b.n	800f85c <rcl_node_resolve_name+0xac>
 800f8e2:	f7fb f93b 	bl	800ab5c <rcutils_get_error_string>
 800f8e6:	f7fb f94f 	bl	800ab88 <rcutils_reset_error>
 800f8ea:	e7bc      	b.n	800f866 <rcl_node_resolve_name+0xb6>
 800f8ec:	2767      	movs	r7, #103	; 0x67
 800f8ee:	e7b5      	b.n	800f85c <rcl_node_resolve_name+0xac>
 800f8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8f2:	4659      	mov	r1, fp
 800f8f4:	47d0      	blx	sl
 800f8f6:	4659      	mov	r1, fp
 800f8f8:	4638      	mov	r0, r7
 800f8fa:	47d0      	blx	sl
 800f8fc:	e799      	b.n	800f832 <rcl_node_resolve_name+0x82>
 800f8fe:	bf00      	nop

0800f900 <exact_match_lookup>:
 800f900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f902:	f102 0708 	add.w	r7, r2, #8
 800f906:	460b      	mov	r3, r1
 800f908:	4614      	mov	r4, r2
 800f90a:	4606      	mov	r6, r0
 800f90c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f910:	b085      	sub	sp, #20
 800f912:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f916:	4618      	mov	r0, r3
 800f918:	4919      	ldr	r1, [pc, #100]	; (800f980 <exact_match_lookup+0x80>)
 800f91a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f91e:	f001 ff55 	bl	80117cc <rcutils_join_path>
 800f922:	7833      	ldrb	r3, [r6, #0]
 800f924:	2b2f      	cmp	r3, #47	; 0x2f
 800f926:	4605      	mov	r5, r0
 800f928:	d023      	beq.n	800f972 <exact_match_lookup+0x72>
 800f92a:	f104 030c 	add.w	r3, r4, #12
 800f92e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f932:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f936:	1c70      	adds	r0, r6, #1
 800f938:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f93c:	f001 ff4c 	bl	80117d8 <rcutils_to_native_path>
 800f940:	4606      	mov	r6, r0
 800f942:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f946:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f94a:	4631      	mov	r1, r6
 800f94c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f950:	4628      	mov	r0, r5
 800f952:	f001 ff3b 	bl	80117cc <rcutils_join_path>
 800f956:	6862      	ldr	r2, [r4, #4]
 800f958:	6921      	ldr	r1, [r4, #16]
 800f95a:	4603      	mov	r3, r0
 800f95c:	4630      	mov	r0, r6
 800f95e:	461e      	mov	r6, r3
 800f960:	4790      	blx	r2
 800f962:	4628      	mov	r0, r5
 800f964:	6863      	ldr	r3, [r4, #4]
 800f966:	6921      	ldr	r1, [r4, #16]
 800f968:	4798      	blx	r3
 800f96a:	4635      	mov	r5, r6
 800f96c:	4628      	mov	r0, r5
 800f96e:	b005      	add	sp, #20
 800f970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f972:	7873      	ldrb	r3, [r6, #1]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d1d8      	bne.n	800f92a <exact_match_lookup+0x2a>
 800f978:	4628      	mov	r0, r5
 800f97a:	b005      	add	sp, #20
 800f97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f97e:	bf00      	nop
 800f980:	08016b54 	.word	0x08016b54

0800f984 <rcl_get_secure_root>:
 800f984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f988:	b085      	sub	sp, #20
 800f98a:	b168      	cbz	r0, 800f9a8 <rcl_get_secure_root+0x24>
 800f98c:	4607      	mov	r7, r0
 800f98e:	4608      	mov	r0, r1
 800f990:	460c      	mov	r4, r1
 800f992:	f7fb f8bd 	bl	800ab10 <rcutils_allocator_is_valid>
 800f996:	b138      	cbz	r0, 800f9a8 <rcl_get_secure_root+0x24>
 800f998:	2300      	movs	r3, #0
 800f99a:	482d      	ldr	r0, [pc, #180]	; (800fa50 <rcl_get_secure_root+0xcc>)
 800f99c:	9303      	str	r3, [sp, #12]
 800f99e:	a903      	add	r1, sp, #12
 800f9a0:	f7fb f8c4 	bl	800ab2c <rcutils_get_env>
 800f9a4:	4605      	mov	r5, r0
 800f9a6:	b120      	cbz	r0, 800f9b2 <rcl_get_secure_root+0x2e>
 800f9a8:	2500      	movs	r5, #0
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	b005      	add	sp, #20
 800f9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9b2:	9b03      	ldr	r3, [sp, #12]
 800f9b4:	781a      	ldrb	r2, [r3, #0]
 800f9b6:	2a00      	cmp	r2, #0
 800f9b8:	d0f6      	beq.n	800f9a8 <rcl_get_secure_root+0x24>
 800f9ba:	f104 090c 	add.w	r9, r4, #12
 800f9be:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f9c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f9cc:	f7fb fa12 	bl	800adf4 <rcutils_strdup>
 800f9d0:	4680      	mov	r8, r0
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d0e8      	beq.n	800f9a8 <rcl_get_secure_root+0x24>
 800f9d6:	481f      	ldr	r0, [pc, #124]	; (800fa54 <rcl_get_secure_root+0xd0>)
 800f9d8:	9503      	str	r5, [sp, #12]
 800f9da:	a903      	add	r1, sp, #12
 800f9dc:	f7fb f8a6 	bl	800ab2c <rcutils_get_env>
 800f9e0:	b160      	cbz	r0, 800f9fc <rcl_get_secure_root+0x78>
 800f9e2:	2600      	movs	r6, #0
 800f9e4:	6863      	ldr	r3, [r4, #4]
 800f9e6:	6921      	ldr	r1, [r4, #16]
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	4798      	blx	r3
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	6863      	ldr	r3, [r4, #4]
 800f9f0:	6921      	ldr	r1, [r4, #16]
 800f9f2:	4798      	blx	r3
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	b005      	add	sp, #20
 800f9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9fc:	9b03      	ldr	r3, [sp, #12]
 800f9fe:	781e      	ldrb	r6, [r3, #0]
 800fa00:	b1f6      	cbz	r6, 800fa40 <rcl_get_secure_root+0xbc>
 800fa02:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fa06:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fa10:	f7fb f9f0 	bl	800adf4 <rcutils_strdup>
 800fa14:	4606      	mov	r6, r0
 800fa16:	2800      	cmp	r0, #0
 800fa18:	d0e3      	beq.n	800f9e2 <rcl_get_secure_root+0x5e>
 800fa1a:	4622      	mov	r2, r4
 800fa1c:	4641      	mov	r1, r8
 800fa1e:	f7ff ff6f 	bl	800f900 <exact_match_lookup>
 800fa22:	4605      	mov	r5, r0
 800fa24:	2d00      	cmp	r5, #0
 800fa26:	d0dd      	beq.n	800f9e4 <rcl_get_secure_root+0x60>
 800fa28:	4628      	mov	r0, r5
 800fa2a:	f001 fecd 	bl	80117c8 <rcutils_is_directory>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d1d7      	bne.n	800f9e4 <rcl_get_secure_root+0x60>
 800fa34:	4628      	mov	r0, r5
 800fa36:	6921      	ldr	r1, [r4, #16]
 800fa38:	461d      	mov	r5, r3
 800fa3a:	6863      	ldr	r3, [r4, #4]
 800fa3c:	4798      	blx	r3
 800fa3e:	e7d1      	b.n	800f9e4 <rcl_get_secure_root+0x60>
 800fa40:	4622      	mov	r2, r4
 800fa42:	4638      	mov	r0, r7
 800fa44:	4641      	mov	r1, r8
 800fa46:	f7ff ff5b 	bl	800f900 <exact_match_lookup>
 800fa4a:	4605      	mov	r5, r0
 800fa4c:	e7ea      	b.n	800fa24 <rcl_get_secure_root+0xa0>
 800fa4e:	bf00      	nop
 800fa50:	08016b60 	.word	0x08016b60
 800fa54:	08016b78 	.word	0x08016b78

0800fa58 <rcl_get_security_options_from_environment>:
 800fa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa5c:	b082      	sub	sp, #8
 800fa5e:	2300      	movs	r3, #0
 800fa60:	4606      	mov	r6, r0
 800fa62:	460f      	mov	r7, r1
 800fa64:	4820      	ldr	r0, [pc, #128]	; (800fae8 <rcl_get_security_options_from_environment+0x90>)
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	a901      	add	r1, sp, #4
 800fa6a:	4690      	mov	r8, r2
 800fa6c:	f7fb f85e 	bl	800ab2c <rcutils_get_env>
 800fa70:	b120      	cbz	r0, 800fa7c <rcl_get_security_options_from_environment+0x24>
 800fa72:	2501      	movs	r5, #1
 800fa74:	4628      	mov	r0, r5
 800fa76:	b002      	add	sp, #8
 800fa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa7c:	491b      	ldr	r1, [pc, #108]	; (800faec <rcl_get_security_options_from_environment+0x94>)
 800fa7e:	4604      	mov	r4, r0
 800fa80:	9801      	ldr	r0, [sp, #4]
 800fa82:	f7f0 fbad 	bl	80001e0 <strcmp>
 800fa86:	4605      	mov	r5, r0
 800fa88:	b9e8      	cbnz	r0, 800fac6 <rcl_get_security_options_from_environment+0x6e>
 800fa8a:	9001      	str	r0, [sp, #4]
 800fa8c:	f1b8 0f00 	cmp.w	r8, #0
 800fa90:	d020      	beq.n	800fad4 <rcl_get_security_options_from_environment+0x7c>
 800fa92:	4817      	ldr	r0, [pc, #92]	; (800faf0 <rcl_get_security_options_from_environment+0x98>)
 800fa94:	a901      	add	r1, sp, #4
 800fa96:	f7fb f849 	bl	800ab2c <rcutils_get_env>
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	d1e9      	bne.n	800fa72 <rcl_get_security_options_from_environment+0x1a>
 800fa9e:	4915      	ldr	r1, [pc, #84]	; (800faf4 <rcl_get_security_options_from_environment+0x9c>)
 800faa0:	9801      	ldr	r0, [sp, #4]
 800faa2:	f7f0 fb9d 	bl	80001e0 <strcmp>
 800faa6:	fab0 f080 	clz	r0, r0
 800faaa:	0940      	lsrs	r0, r0, #5
 800faac:	f888 0000 	strb.w	r0, [r8]
 800fab0:	4639      	mov	r1, r7
 800fab2:	4630      	mov	r0, r6
 800fab4:	f7ff ff66 	bl	800f984 <rcl_get_secure_root>
 800fab8:	b170      	cbz	r0, 800fad8 <rcl_get_security_options_from_environment+0x80>
 800faba:	f8c8 0004 	str.w	r0, [r8, #4]
 800fabe:	4628      	mov	r0, r5
 800fac0:	b002      	add	sp, #8
 800fac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac6:	4625      	mov	r5, r4
 800fac8:	4628      	mov	r0, r5
 800faca:	f888 4000 	strb.w	r4, [r8]
 800face:	b002      	add	sp, #8
 800fad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fad4:	250b      	movs	r5, #11
 800fad6:	e7cd      	b.n	800fa74 <rcl_get_security_options_from_environment+0x1c>
 800fad8:	f898 5000 	ldrb.w	r5, [r8]
 800fadc:	f1a5 0501 	sub.w	r5, r5, #1
 800fae0:	fab5 f585 	clz	r5, r5
 800fae4:	096d      	lsrs	r5, r5, #5
 800fae6:	e7c5      	b.n	800fa74 <rcl_get_security_options_from_environment+0x1c>
 800fae8:	08016b18 	.word	0x08016b18
 800faec:	08016b2c 	.word	0x08016b2c
 800faf0:	08016b34 	.word	0x08016b34
 800faf4:	08016b4c 	.word	0x08016b4c

0800faf8 <rcl_service_get_rmw_handle>:
 800faf8:	b118      	cbz	r0, 800fb02 <rcl_service_get_rmw_handle+0xa>
 800fafa:	6800      	ldr	r0, [r0, #0]
 800fafc:	b108      	cbz	r0, 800fb02 <rcl_service_get_rmw_handle+0xa>
 800fafe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fb02:	4770      	bx	lr

0800fb04 <rcl_take_request>:
 800fb04:	b570      	push	{r4, r5, r6, lr}
 800fb06:	468e      	mov	lr, r1
 800fb08:	460c      	mov	r4, r1
 800fb0a:	4616      	mov	r6, r2
 800fb0c:	4605      	mov	r5, r0
 800fb0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb12:	b08c      	sub	sp, #48	; 0x30
 800fb14:	f10d 0c18 	add.w	ip, sp, #24
 800fb18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb1c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fb20:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fb24:	b30d      	cbz	r5, 800fb6a <rcl_take_request+0x66>
 800fb26:	682b      	ldr	r3, [r5, #0]
 800fb28:	b1fb      	cbz	r3, 800fb6a <rcl_take_request+0x66>
 800fb2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fb2e:	b1e0      	cbz	r0, 800fb6a <rcl_take_request+0x66>
 800fb30:	b336      	cbz	r6, 800fb80 <rcl_take_request+0x7c>
 800fb32:	2300      	movs	r3, #0
 800fb34:	f88d 3007 	strb.w	r3, [sp, #7]
 800fb38:	4632      	mov	r2, r6
 800fb3a:	f10d 0307 	add.w	r3, sp, #7
 800fb3e:	a902      	add	r1, sp, #8
 800fb40:	f002 fc7a 	bl	8012438 <rmw_take_request>
 800fb44:	4605      	mov	r5, r0
 800fb46:	b198      	cbz	r0, 800fb70 <rcl_take_request+0x6c>
 800fb48:	280a      	cmp	r0, #10
 800fb4a:	bf18      	it	ne
 800fb4c:	2501      	movne	r5, #1
 800fb4e:	f10d 0e18 	add.w	lr, sp, #24
 800fb52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb56:	46a4      	mov	ip, r4
 800fb58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb5c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fb60:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fb64:	4628      	mov	r0, r5
 800fb66:	b00c      	add	sp, #48	; 0x30
 800fb68:	bd70      	pop	{r4, r5, r6, pc}
 800fb6a:	f44f 7516 	mov.w	r5, #600	; 0x258
 800fb6e:	e7ee      	b.n	800fb4e <rcl_take_request+0x4a>
 800fb70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fb74:	f240 2359 	movw	r3, #601	; 0x259
 800fb78:	2a00      	cmp	r2, #0
 800fb7a:	bf08      	it	eq
 800fb7c:	461d      	moveq	r5, r3
 800fb7e:	e7e6      	b.n	800fb4e <rcl_take_request+0x4a>
 800fb80:	250b      	movs	r5, #11
 800fb82:	e7e4      	b.n	800fb4e <rcl_take_request+0x4a>

0800fb84 <rcl_send_response>:
 800fb84:	b170      	cbz	r0, 800fba4 <rcl_send_response+0x20>
 800fb86:	6800      	ldr	r0, [r0, #0]
 800fb88:	b160      	cbz	r0, 800fba4 <rcl_send_response+0x20>
 800fb8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fb8e:	b148      	cbz	r0, 800fba4 <rcl_send_response+0x20>
 800fb90:	b159      	cbz	r1, 800fbaa <rcl_send_response+0x26>
 800fb92:	b510      	push	{r4, lr}
 800fb94:	b15a      	cbz	r2, 800fbae <rcl_send_response+0x2a>
 800fb96:	f002 fcad 	bl	80124f4 <rmw_send_response>
 800fb9a:	b110      	cbz	r0, 800fba2 <rcl_send_response+0x1e>
 800fb9c:	2802      	cmp	r0, #2
 800fb9e:	bf18      	it	ne
 800fba0:	2001      	movne	r0, #1
 800fba2:	bd10      	pop	{r4, pc}
 800fba4:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fba8:	4770      	bx	lr
 800fbaa:	200b      	movs	r0, #11
 800fbac:	4770      	bx	lr
 800fbae:	200b      	movs	r0, #11
 800fbb0:	bd10      	pop	{r4, pc}
 800fbb2:	bf00      	nop

0800fbb4 <rcl_service_is_valid>:
 800fbb4:	b130      	cbz	r0, 800fbc4 <rcl_service_is_valid+0x10>
 800fbb6:	6800      	ldr	r0, [r0, #0]
 800fbb8:	b120      	cbz	r0, 800fbc4 <rcl_service_is_valid+0x10>
 800fbba:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fbbe:	3800      	subs	r0, #0
 800fbc0:	bf18      	it	ne
 800fbc2:	2001      	movne	r0, #1
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop

0800fbc8 <rcl_get_system_time>:
 800fbc8:	4608      	mov	r0, r1
 800fbca:	f7fb b951 	b.w	800ae70 <rcutils_system_time_now>
 800fbce:	bf00      	nop

0800fbd0 <rcl_get_steady_time>:
 800fbd0:	4608      	mov	r0, r1
 800fbd2:	f7fb b975 	b.w	800aec0 <rcutils_steady_time_now>
 800fbd6:	bf00      	nop

0800fbd8 <rcl_get_ros_time>:
 800fbd8:	7a03      	ldrb	r3, [r0, #8]
 800fbda:	b510      	push	{r4, lr}
 800fbdc:	460c      	mov	r4, r1
 800fbde:	b133      	cbz	r3, 800fbee <rcl_get_ros_time+0x16>
 800fbe0:	2105      	movs	r1, #5
 800fbe2:	f001 fd4d 	bl	8011680 <__atomic_load_8>
 800fbe6:	e9c4 0100 	strd	r0, r1, [r4]
 800fbea:	2000      	movs	r0, #0
 800fbec:	bd10      	pop	{r4, pc}
 800fbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbf2:	4608      	mov	r0, r1
 800fbf4:	f7fb b93c 	b.w	800ae70 <rcutils_system_time_now>

0800fbf8 <rcl_clock_init>:
 800fbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	4614      	mov	r4, r2
 800fc00:	460e      	mov	r6, r1
 800fc02:	f7fa ff85 	bl	800ab10 <rcutils_allocator_is_valid>
 800fc06:	b128      	cbz	r0, 800fc14 <rcl_clock_init+0x1c>
 800fc08:	2d03      	cmp	r5, #3
 800fc0a:	d803      	bhi.n	800fc14 <rcl_clock_init+0x1c>
 800fc0c:	e8df f005 	tbb	[pc, r5]
 800fc10:	06532e1d 	.word	0x06532e1d
 800fc14:	f04f 0c0b 	mov.w	ip, #11
 800fc18:	4660      	mov	r0, ip
 800fc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc1c:	2e00      	cmp	r6, #0
 800fc1e:	d0f9      	beq.n	800fc14 <rcl_clock_init+0x1c>
 800fc20:	2c00      	cmp	r4, #0
 800fc22:	d0f7      	beq.n	800fc14 <rcl_clock_init+0x1c>
 800fc24:	2300      	movs	r3, #0
 800fc26:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800fc2a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800fce0 <rcl_clock_init+0xe8>
 800fc2e:	6133      	str	r3, [r6, #16]
 800fc30:	f106 0514 	add.w	r5, r6, #20
 800fc34:	469c      	mov	ip, r3
 800fc36:	2703      	movs	r7, #3
 800fc38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	602b      	str	r3, [r5, #0]
 800fc40:	7037      	strb	r7, [r6, #0]
 800fc42:	f8c6 e00c 	str.w	lr, [r6, #12]
 800fc46:	4660      	mov	r0, ip
 800fc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc4a:	2e00      	cmp	r6, #0
 800fc4c:	d0e2      	beq.n	800fc14 <rcl_clock_init+0x1c>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	7033      	strb	r3, [r6, #0]
 800fc52:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800fc56:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800fc5a:	469c      	mov	ip, r3
 800fc5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc5e:	f106 0514 	add.w	r5, r6, #20
 800fc62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	602b      	str	r3, [r5, #0]
 800fc68:	4660      	mov	r0, ip
 800fc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc6c:	2e00      	cmp	r6, #0
 800fc6e:	d0d1      	beq.n	800fc14 <rcl_clock_init+0x1c>
 800fc70:	2c00      	cmp	r4, #0
 800fc72:	d0cf      	beq.n	800fc14 <rcl_clock_init+0x1c>
 800fc74:	2700      	movs	r7, #0
 800fc76:	7037      	strb	r7, [r6, #0]
 800fc78:	46a4      	mov	ip, r4
 800fc7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc7e:	f106 0514 	add.w	r5, r6, #20
 800fc82:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800fc86:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800fc8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc8c:	f8dc 3000 	ldr.w	r3, [ip]
 800fc90:	602b      	str	r3, [r5, #0]
 800fc92:	6921      	ldr	r1, [r4, #16]
 800fc94:	6823      	ldr	r3, [r4, #0]
 800fc96:	2010      	movs	r0, #16
 800fc98:	4798      	blx	r3
 800fc9a:	6130      	str	r0, [r6, #16]
 800fc9c:	b1d0      	cbz	r0, 800fcd4 <rcl_clock_init+0xdc>
 800fc9e:	2200      	movs	r2, #0
 800fca0:	2300      	movs	r3, #0
 800fca2:	e9c0 2300 	strd	r2, r3, [r0]
 800fca6:	2301      	movs	r3, #1
 800fca8:	7207      	strb	r7, [r0, #8]
 800fcaa:	4a0c      	ldr	r2, [pc, #48]	; (800fcdc <rcl_clock_init+0xe4>)
 800fcac:	7033      	strb	r3, [r6, #0]
 800fcae:	46bc      	mov	ip, r7
 800fcb0:	60f2      	str	r2, [r6, #12]
 800fcb2:	4660      	mov	r0, ip
 800fcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcb6:	2e00      	cmp	r6, #0
 800fcb8:	d0ac      	beq.n	800fc14 <rcl_clock_init+0x1c>
 800fcba:	2c00      	cmp	r4, #0
 800fcbc:	d0aa      	beq.n	800fc14 <rcl_clock_init+0x1c>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800fcc4:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800fce4 <rcl_clock_init+0xec>
 800fcc8:	6133      	str	r3, [r6, #16]
 800fcca:	f106 0514 	add.w	r5, r6, #20
 800fcce:	469c      	mov	ip, r3
 800fcd0:	2702      	movs	r7, #2
 800fcd2:	e7b1      	b.n	800fc38 <rcl_clock_init+0x40>
 800fcd4:	f04f 0c0a 	mov.w	ip, #10
 800fcd8:	e79e      	b.n	800fc18 <rcl_clock_init+0x20>
 800fcda:	bf00      	nop
 800fcdc:	0800fbd9 	.word	0x0800fbd9
 800fce0:	0800fbd1 	.word	0x0800fbd1
 800fce4:	0800fbc9 	.word	0x0800fbc9

0800fce8 <rcl_clock_get_now>:
 800fce8:	b140      	cbz	r0, 800fcfc <rcl_clock_get_now+0x14>
 800fcea:	b139      	cbz	r1, 800fcfc <rcl_clock_get_now+0x14>
 800fcec:	7803      	ldrb	r3, [r0, #0]
 800fcee:	b11b      	cbz	r3, 800fcf8 <rcl_clock_get_now+0x10>
 800fcf0:	68c3      	ldr	r3, [r0, #12]
 800fcf2:	b10b      	cbz	r3, 800fcf8 <rcl_clock_get_now+0x10>
 800fcf4:	6900      	ldr	r0, [r0, #16]
 800fcf6:	4718      	bx	r3
 800fcf8:	2001      	movs	r0, #1
 800fcfa:	4770      	bx	lr
 800fcfc:	200b      	movs	r0, #11
 800fcfe:	4770      	bx	lr

0800fd00 <rcl_timer_call>:
 800fd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd04:	b087      	sub	sp, #28
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d06d      	beq.n	800fde6 <rcl_timer_call+0xe6>
 800fd0a:	6803      	ldr	r3, [r0, #0]
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d063      	beq.n	800fdda <rcl_timer_call+0xda>
 800fd12:	f3bf 8f5b 	dmb	ish
 800fd16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd1a:	f3bf 8f5b 	dmb	ish
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d150      	bne.n	800fdc4 <rcl_timer_call+0xc4>
 800fd22:	6803      	ldr	r3, [r0, #0]
 800fd24:	a904      	add	r1, sp, #16
 800fd26:	6818      	ldr	r0, [r3, #0]
 800fd28:	f7ff ffde 	bl	800fce8 <rcl_clock_get_now>
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d14a      	bne.n	800fdc8 <rcl_timer_call+0xc8>
 800fd32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	db4a      	blt.n	800fdd0 <rcl_timer_call+0xd0>
 800fd3a:	6820      	ldr	r0, [r4, #0]
 800fd3c:	f04f 0a05 	mov.w	sl, #5
 800fd40:	f8cd a000 	str.w	sl, [sp]
 800fd44:	3020      	adds	r0, #32
 800fd46:	f001 fd07 	bl	8011758 <__atomic_exchange_8>
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	f3bf 8f5b 	dmb	ish
 800fd50:	4680      	mov	r8, r0
 800fd52:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800fd56:	f3bf 8f5b 	dmb	ish
 800fd5a:	6820      	ldr	r0, [r4, #0]
 800fd5c:	4689      	mov	r9, r1
 800fd5e:	3028      	adds	r0, #40	; 0x28
 800fd60:	4651      	mov	r1, sl
 800fd62:	f001 fc8d 	bl	8011680 <__atomic_load_8>
 800fd66:	4606      	mov	r6, r0
 800fd68:	6820      	ldr	r0, [r4, #0]
 800fd6a:	460f      	mov	r7, r1
 800fd6c:	3018      	adds	r0, #24
 800fd6e:	4651      	mov	r1, sl
 800fd70:	f001 fc86 	bl	8011680 <__atomic_load_8>
 800fd74:	1836      	adds	r6, r6, r0
 800fd76:	4602      	mov	r2, r0
 800fd78:	4682      	mov	sl, r0
 800fd7a:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800fd7e:	eb47 0701 	adc.w	r7, r7, r1
 800fd82:	4286      	cmp	r6, r0
 800fd84:	460b      	mov	r3, r1
 800fd86:	eb77 010c 	sbcs.w	r1, r7, ip
 800fd8a:	da04      	bge.n	800fd96 <rcl_timer_call+0x96>
 800fd8c:	ea53 0102 	orrs.w	r1, r3, r2
 800fd90:	d12e      	bne.n	800fdf0 <rcl_timer_call+0xf0>
 800fd92:	4606      	mov	r6, r0
 800fd94:	4667      	mov	r7, ip
 800fd96:	6820      	ldr	r0, [r4, #0]
 800fd98:	2105      	movs	r1, #5
 800fd9a:	4632      	mov	r2, r6
 800fd9c:	463b      	mov	r3, r7
 800fd9e:	3028      	adds	r0, #40	; 0x28
 800fda0:	9100      	str	r1, [sp, #0]
 800fda2:	f001 fca3 	bl	80116ec <__atomic_store_8>
 800fda6:	f1bb 0f00 	cmp.w	fp, #0
 800fdaa:	d00d      	beq.n	800fdc8 <rcl_timer_call+0xc8>
 800fdac:	9a04      	ldr	r2, [sp, #16]
 800fdae:	9b05      	ldr	r3, [sp, #20]
 800fdb0:	ebb2 0208 	subs.w	r2, r2, r8
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	eb63 0309 	sbc.w	r3, r3, r9
 800fdba:	47d8      	blx	fp
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	b007      	add	sp, #28
 800fdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdc4:	f240 3521 	movw	r5, #801	; 0x321
 800fdc8:	4628      	mov	r0, r5
 800fdca:	b007      	add	sp, #28
 800fdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd0:	2501      	movs	r5, #1
 800fdd2:	4628      	mov	r0, r5
 800fdd4:	b007      	add	sp, #28
 800fdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdda:	f44f 7548 	mov.w	r5, #800	; 0x320
 800fdde:	4628      	mov	r0, r5
 800fde0:	b007      	add	sp, #28
 800fde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde6:	250b      	movs	r5, #11
 800fde8:	4628      	mov	r0, r5
 800fdea:	b007      	add	sp, #28
 800fdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf0:	1b80      	subs	r0, r0, r6
 800fdf2:	eb6c 0107 	sbc.w	r1, ip, r7
 800fdf6:	3801      	subs	r0, #1
 800fdf8:	f161 0100 	sbc.w	r1, r1, #0
 800fdfc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800fe00:	f7f0 fade 	bl	80003c0 <__aeabi_ldivmod>
 800fe04:	9b02      	ldr	r3, [sp, #8]
 800fe06:	3001      	adds	r0, #1
 800fe08:	f141 0100 	adc.w	r1, r1, #0
 800fe0c:	fb00 f303 	mul.w	r3, r0, r3
 800fe10:	fb01 330a 	mla	r3, r1, sl, r3
 800fe14:	fba0 0a0a 	umull	r0, sl, r0, sl
 800fe18:	1986      	adds	r6, r0, r6
 800fe1a:	4453      	add	r3, sl
 800fe1c:	eb43 0707 	adc.w	r7, r3, r7
 800fe20:	e7b9      	b.n	800fd96 <rcl_timer_call+0x96>
 800fe22:	bf00      	nop

0800fe24 <rcl_timer_is_ready>:
 800fe24:	b570      	push	{r4, r5, r6, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	b378      	cbz	r0, 800fe8a <rcl_timer_is_ready+0x66>
 800fe2a:	6803      	ldr	r3, [r0, #0]
 800fe2c:	4604      	mov	r4, r0
 800fe2e:	b383      	cbz	r3, 800fe92 <rcl_timer_is_ready+0x6e>
 800fe30:	460d      	mov	r5, r1
 800fe32:	b351      	cbz	r1, 800fe8a <rcl_timer_is_ready+0x66>
 800fe34:	f3bf 8f5b 	dmb	ish
 800fe38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fe3c:	f3bf 8f5b 	dmb	ish
 800fe40:	b953      	cbnz	r3, 800fe58 <rcl_timer_is_ready+0x34>
 800fe42:	6803      	ldr	r3, [r0, #0]
 800fe44:	4669      	mov	r1, sp
 800fe46:	6818      	ldr	r0, [r3, #0]
 800fe48:	f7ff ff4e 	bl	800fce8 <rcl_clock_get_now>
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	b140      	cbz	r0, 800fe62 <rcl_timer_is_ready+0x3e>
 800fe50:	f240 3321 	movw	r3, #801	; 0x321
 800fe54:	4298      	cmp	r0, r3
 800fe56:	d101      	bne.n	800fe5c <rcl_timer_is_ready+0x38>
 800fe58:	2600      	movs	r6, #0
 800fe5a:	702e      	strb	r6, [r5, #0]
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	b002      	add	sp, #8
 800fe60:	bd70      	pop	{r4, r5, r6, pc}
 800fe62:	6820      	ldr	r0, [r4, #0]
 800fe64:	2105      	movs	r1, #5
 800fe66:	3028      	adds	r0, #40	; 0x28
 800fe68:	f001 fc0a 	bl	8011680 <__atomic_load_8>
 800fe6c:	9b00      	ldr	r3, [sp, #0]
 800fe6e:	1ac0      	subs	r0, r0, r3
 800fe70:	9b01      	ldr	r3, [sp, #4]
 800fe72:	eb61 0103 	sbc.w	r1, r1, r3
 800fe76:	2801      	cmp	r0, #1
 800fe78:	f171 0300 	sbcs.w	r3, r1, #0
 800fe7c:	bfb4      	ite	lt
 800fe7e:	2301      	movlt	r3, #1
 800fe80:	2300      	movge	r3, #0
 800fe82:	4630      	mov	r0, r6
 800fe84:	702b      	strb	r3, [r5, #0]
 800fe86:	b002      	add	sp, #8
 800fe88:	bd70      	pop	{r4, r5, r6, pc}
 800fe8a:	260b      	movs	r6, #11
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	b002      	add	sp, #8
 800fe90:	bd70      	pop	{r4, r5, r6, pc}
 800fe92:	f44f 7648 	mov.w	r6, #800	; 0x320
 800fe96:	e7e1      	b.n	800fe5c <rcl_timer_is_ready+0x38>

0800fe98 <rcl_timer_get_time_until_next_call>:
 800fe98:	b570      	push	{r4, r5, r6, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	b330      	cbz	r0, 800feec <rcl_timer_get_time_until_next_call+0x54>
 800fe9e:	6803      	ldr	r3, [r0, #0]
 800fea0:	4604      	mov	r4, r0
 800fea2:	b33b      	cbz	r3, 800fef4 <rcl_timer_get_time_until_next_call+0x5c>
 800fea4:	460d      	mov	r5, r1
 800fea6:	b309      	cbz	r1, 800feec <rcl_timer_get_time_until_next_call+0x54>
 800fea8:	f3bf 8f5b 	dmb	ish
 800feac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800feb0:	f3bf 8f5b 	dmb	ish
 800feb4:	b9ab      	cbnz	r3, 800fee2 <rcl_timer_get_time_until_next_call+0x4a>
 800feb6:	6803      	ldr	r3, [r0, #0]
 800feb8:	4669      	mov	r1, sp
 800feba:	6818      	ldr	r0, [r3, #0]
 800febc:	f7ff ff14 	bl	800fce8 <rcl_clock_get_now>
 800fec0:	4606      	mov	r6, r0
 800fec2:	b958      	cbnz	r0, 800fedc <rcl_timer_get_time_until_next_call+0x44>
 800fec4:	6820      	ldr	r0, [r4, #0]
 800fec6:	2105      	movs	r1, #5
 800fec8:	3028      	adds	r0, #40	; 0x28
 800feca:	f001 fbd9 	bl	8011680 <__atomic_load_8>
 800fece:	9b00      	ldr	r3, [sp, #0]
 800fed0:	1ac0      	subs	r0, r0, r3
 800fed2:	9b01      	ldr	r3, [sp, #4]
 800fed4:	6028      	str	r0, [r5, #0]
 800fed6:	eb61 0103 	sbc.w	r1, r1, r3
 800feda:	6069      	str	r1, [r5, #4]
 800fedc:	4630      	mov	r0, r6
 800fede:	b002      	add	sp, #8
 800fee0:	bd70      	pop	{r4, r5, r6, pc}
 800fee2:	f240 3621 	movw	r6, #801	; 0x321
 800fee6:	4630      	mov	r0, r6
 800fee8:	b002      	add	sp, #8
 800feea:	bd70      	pop	{r4, r5, r6, pc}
 800feec:	260b      	movs	r6, #11
 800feee:	4630      	mov	r0, r6
 800fef0:	b002      	add	sp, #8
 800fef2:	bd70      	pop	{r4, r5, r6, pc}
 800fef4:	f44f 7648 	mov.w	r6, #800	; 0x320
 800fef8:	e7f0      	b.n	800fedc <rcl_timer_get_time_until_next_call+0x44>
 800fefa:	bf00      	nop

0800fefc <rcl_timer_get_guard_condition>:
 800fefc:	b130      	cbz	r0, 800ff0c <rcl_timer_get_guard_condition+0x10>
 800fefe:	6800      	ldr	r0, [r0, #0]
 800ff00:	b120      	cbz	r0, 800ff0c <rcl_timer_get_guard_condition+0x10>
 800ff02:	68c3      	ldr	r3, [r0, #12]
 800ff04:	b10b      	cbz	r3, 800ff0a <rcl_timer_get_guard_condition+0xe>
 800ff06:	3008      	adds	r0, #8
 800ff08:	4770      	bx	lr
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop

0800ff10 <rcl_validate_enclave_name_with_size>:
 800ff10:	b378      	cbz	r0, 800ff72 <rcl_validate_enclave_name_with_size+0x62>
 800ff12:	b570      	push	{r4, r5, r6, lr}
 800ff14:	4615      	mov	r5, r2
 800ff16:	b0c2      	sub	sp, #264	; 0x108
 800ff18:	b302      	cbz	r2, 800ff5c <rcl_validate_enclave_name_with_size+0x4c>
 800ff1a:	461e      	mov	r6, r3
 800ff1c:	466a      	mov	r2, sp
 800ff1e:	ab01      	add	r3, sp, #4
 800ff20:	460c      	mov	r4, r1
 800ff22:	f7fb f821 	bl	800af68 <rmw_validate_namespace_with_size>
 800ff26:	4684      	mov	ip, r0
 800ff28:	b9e8      	cbnz	r0, 800ff66 <rcl_validate_enclave_name_with_size+0x56>
 800ff2a:	9b00      	ldr	r3, [sp, #0]
 800ff2c:	b923      	cbnz	r3, 800ff38 <rcl_validate_enclave_name_with_size+0x28>
 800ff2e:	2300      	movs	r3, #0
 800ff30:	602b      	str	r3, [r5, #0]
 800ff32:	4660      	mov	r0, ip
 800ff34:	b042      	add	sp, #264	; 0x108
 800ff36:	bd70      	pop	{r4, r5, r6, pc}
 800ff38:	2b07      	cmp	r3, #7
 800ff3a:	d007      	beq.n	800ff4c <rcl_validate_enclave_name_with_size+0x3c>
 800ff3c:	1e5a      	subs	r2, r3, #1
 800ff3e:	2a05      	cmp	r2, #5
 800ff40:	d833      	bhi.n	800ffaa <rcl_validate_enclave_name_with_size+0x9a>
 800ff42:	e8df f002 	tbb	[pc, r2]
 800ff46:	2c2f      	.short	0x2c2f
 800ff48:	1a232629 	.word	0x1a232629
 800ff4c:	2cff      	cmp	r4, #255	; 0xff
 800ff4e:	d9ee      	bls.n	800ff2e <rcl_validate_enclave_name_with_size+0x1e>
 800ff50:	602b      	str	r3, [r5, #0]
 800ff52:	2e00      	cmp	r6, #0
 800ff54:	d0ed      	beq.n	800ff32 <rcl_validate_enclave_name_with_size+0x22>
 800ff56:	23fe      	movs	r3, #254	; 0xfe
 800ff58:	6033      	str	r3, [r6, #0]
 800ff5a:	e7ea      	b.n	800ff32 <rcl_validate_enclave_name_with_size+0x22>
 800ff5c:	f04f 0c0b 	mov.w	ip, #11
 800ff60:	4660      	mov	r0, ip
 800ff62:	b042      	add	sp, #264	; 0x108
 800ff64:	bd70      	pop	{r4, r5, r6, pc}
 800ff66:	f7ff f8c9 	bl	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800ff6a:	4684      	mov	ip, r0
 800ff6c:	4660      	mov	r0, ip
 800ff6e:	b042      	add	sp, #264	; 0x108
 800ff70:	bd70      	pop	{r4, r5, r6, pc}
 800ff72:	f04f 0c0b 	mov.w	ip, #11
 800ff76:	4660      	mov	r0, ip
 800ff78:	4770      	bx	lr
 800ff7a:	2306      	movs	r3, #6
 800ff7c:	602b      	str	r3, [r5, #0]
 800ff7e:	2e00      	cmp	r6, #0
 800ff80:	d0d7      	beq.n	800ff32 <rcl_validate_enclave_name_with_size+0x22>
 800ff82:	9b01      	ldr	r3, [sp, #4]
 800ff84:	6033      	str	r3, [r6, #0]
 800ff86:	4660      	mov	r0, ip
 800ff88:	b042      	add	sp, #264	; 0x108
 800ff8a:	bd70      	pop	{r4, r5, r6, pc}
 800ff8c:	2305      	movs	r3, #5
 800ff8e:	602b      	str	r3, [r5, #0]
 800ff90:	e7f5      	b.n	800ff7e <rcl_validate_enclave_name_with_size+0x6e>
 800ff92:	2304      	movs	r3, #4
 800ff94:	602b      	str	r3, [r5, #0]
 800ff96:	e7f2      	b.n	800ff7e <rcl_validate_enclave_name_with_size+0x6e>
 800ff98:	2303      	movs	r3, #3
 800ff9a:	602b      	str	r3, [r5, #0]
 800ff9c:	e7ef      	b.n	800ff7e <rcl_validate_enclave_name_with_size+0x6e>
 800ff9e:	2302      	movs	r3, #2
 800ffa0:	602b      	str	r3, [r5, #0]
 800ffa2:	e7ec      	b.n	800ff7e <rcl_validate_enclave_name_with_size+0x6e>
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	602b      	str	r3, [r5, #0]
 800ffa8:	e7e9      	b.n	800ff7e <rcl_validate_enclave_name_with_size+0x6e>
 800ffaa:	4a04      	ldr	r2, [pc, #16]	; (800ffbc <rcl_validate_enclave_name_with_size+0xac>)
 800ffac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ffb0:	a802      	add	r0, sp, #8
 800ffb2:	f7fa fef3 	bl	800ad9c <rcutils_snprintf>
 800ffb6:	f04f 0c01 	mov.w	ip, #1
 800ffba:	e7ba      	b.n	800ff32 <rcl_validate_enclave_name_with_size+0x22>
 800ffbc:	08016b98 	.word	0x08016b98

0800ffc0 <rcl_validate_enclave_name>:
 800ffc0:	b168      	cbz	r0, 800ffde <rcl_validate_enclave_name+0x1e>
 800ffc2:	b570      	push	{r4, r5, r6, lr}
 800ffc4:	460d      	mov	r5, r1
 800ffc6:	4616      	mov	r6, r2
 800ffc8:	4604      	mov	r4, r0
 800ffca:	f7f0 f913 	bl	80001f4 <strlen>
 800ffce:	4633      	mov	r3, r6
 800ffd0:	4601      	mov	r1, r0
 800ffd2:	462a      	mov	r2, r5
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffda:	f7ff bf99 	b.w	800ff10 <rcl_validate_enclave_name_with_size>
 800ffde:	200b      	movs	r0, #11
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop

0800ffe4 <rcl_get_zero_initialized_wait_set>:
 800ffe4:	b510      	push	{r4, lr}
 800ffe6:	4c08      	ldr	r4, [pc, #32]	; (8010008 <rcl_get_zero_initialized_wait_set+0x24>)
 800ffe8:	4686      	mov	lr, r0
 800ffea:	4684      	mov	ip, r0
 800ffec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fff4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fffa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fffe:	6823      	ldr	r3, [r4, #0]
 8010000:	f8cc 3000 	str.w	r3, [ip]
 8010004:	4670      	mov	r0, lr
 8010006:	bd10      	pop	{r4, pc}
 8010008:	08016bf8 	.word	0x08016bf8

0801000c <rcl_wait_set_is_valid>:
 801000c:	b118      	cbz	r0, 8010016 <rcl_wait_set_is_valid+0xa>
 801000e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010010:	3800      	subs	r0, #0
 8010012:	bf18      	it	ne
 8010014:	2001      	movne	r0, #1
 8010016:	4770      	bx	lr

08010018 <rcl_wait_set_fini>:
 8010018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801001c:	b082      	sub	sp, #8
 801001e:	2800      	cmp	r0, #0
 8010020:	f000 8095 	beq.w	801014e <rcl_wait_set_fini+0x136>
 8010024:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010026:	4604      	mov	r4, r0
 8010028:	2e00      	cmp	r6, #0
 801002a:	f000 808c 	beq.w	8010146 <rcl_wait_set_fini+0x12e>
 801002e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8010030:	f002 fca0 	bl	8012974 <rmw_destroy_wait_set>
 8010034:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010036:	1e06      	subs	r6, r0, #0
 8010038:	bf18      	it	ne
 801003a:	f44f 7661 	movne.w	r6, #900	; 0x384
 801003e:	2d00      	cmp	r5, #0
 8010040:	f000 8081 	beq.w	8010146 <rcl_wait_set_fini+0x12e>
 8010044:	6820      	ldr	r0, [r4, #0]
 8010046:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801004a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801004c:	2700      	movs	r7, #0
 801004e:	6067      	str	r7, [r4, #4]
 8010050:	602f      	str	r7, [r5, #0]
 8010052:	b120      	cbz	r0, 801005e <rcl_wait_set_fini+0x46>
 8010054:	9101      	str	r1, [sp, #4]
 8010056:	47c0      	blx	r8
 8010058:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801005a:	9901      	ldr	r1, [sp, #4]
 801005c:	6027      	str	r7, [r4, #0]
 801005e:	68a8      	ldr	r0, [r5, #8]
 8010060:	b120      	cbz	r0, 801006c <rcl_wait_set_fini+0x54>
 8010062:	47c0      	blx	r8
 8010064:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010066:	2300      	movs	r3, #0
 8010068:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801006c:	68a0      	ldr	r0, [r4, #8]
 801006e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010070:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010072:	f04f 0800 	mov.w	r8, #0
 8010076:	f8c4 800c 	str.w	r8, [r4, #12]
 801007a:	f8c5 800c 	str.w	r8, [r5, #12]
 801007e:	b128      	cbz	r0, 801008c <rcl_wait_set_fini+0x74>
 8010080:	47b8      	blx	r7
 8010082:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010084:	f8c4 8008 	str.w	r8, [r4, #8]
 8010088:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801008a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801008c:	6968      	ldr	r0, [r5, #20]
 801008e:	f04f 0800 	mov.w	r8, #0
 8010092:	f8c5 8010 	str.w	r8, [r5, #16]
 8010096:	b128      	cbz	r0, 80100a4 <rcl_wait_set_fini+0x8c>
 8010098:	47b8      	blx	r7
 801009a:	f8c5 8014 	str.w	r8, [r5, #20]
 801009e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80100a0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80100a2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80100a4:	6920      	ldr	r0, [r4, #16]
 80100a6:	f04f 0800 	mov.w	r8, #0
 80100aa:	f8c4 8014 	str.w	r8, [r4, #20]
 80100ae:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 80100b2:	b128      	cbz	r0, 80100c0 <rcl_wait_set_fini+0xa8>
 80100b4:	47b8      	blx	r7
 80100b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80100b8:	f8c4 8010 	str.w	r8, [r4, #16]
 80100bc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80100be:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80100c0:	69a0      	ldr	r0, [r4, #24]
 80100c2:	f04f 0800 	mov.w	r8, #0
 80100c6:	f8c4 801c 	str.w	r8, [r4, #28]
 80100ca:	f8c5 8018 	str.w	r8, [r5, #24]
 80100ce:	b128      	cbz	r0, 80100dc <rcl_wait_set_fini+0xc4>
 80100d0:	9101      	str	r1, [sp, #4]
 80100d2:	47b8      	blx	r7
 80100d4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80100d6:	9901      	ldr	r1, [sp, #4]
 80100d8:	f8c4 8018 	str.w	r8, [r4, #24]
 80100dc:	6a28      	ldr	r0, [r5, #32]
 80100de:	b120      	cbz	r0, 80100ea <rcl_wait_set_fini+0xd2>
 80100e0:	47b8      	blx	r7
 80100e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80100e4:	2300      	movs	r3, #0
 80100e6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80100ea:	6a20      	ldr	r0, [r4, #32]
 80100ec:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80100f0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80100f2:	2700      	movs	r7, #0
 80100f4:	6267      	str	r7, [r4, #36]	; 0x24
 80100f6:	626f      	str	r7, [r5, #36]	; 0x24
 80100f8:	b120      	cbz	r0, 8010104 <rcl_wait_set_fini+0xec>
 80100fa:	9101      	str	r1, [sp, #4]
 80100fc:	47c0      	blx	r8
 80100fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010100:	9901      	ldr	r1, [sp, #4]
 8010102:	6227      	str	r7, [r4, #32]
 8010104:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8010106:	b120      	cbz	r0, 8010112 <rcl_wait_set_fini+0xfa>
 8010108:	47c0      	blx	r8
 801010a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801010c:	2300      	movs	r3, #0
 801010e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010112:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010114:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010118:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801011a:	2700      	movs	r7, #0
 801011c:	62e7      	str	r7, [r4, #44]	; 0x2c
 801011e:	632f      	str	r7, [r5, #48]	; 0x30
 8010120:	b120      	cbz	r0, 801012c <rcl_wait_set_fini+0x114>
 8010122:	9101      	str	r1, [sp, #4]
 8010124:	47c0      	blx	r8
 8010126:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010128:	9901      	ldr	r1, [sp, #4]
 801012a:	62a7      	str	r7, [r4, #40]	; 0x28
 801012c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801012e:	b120      	cbz	r0, 801013a <rcl_wait_set_fini+0x122>
 8010130:	47c0      	blx	r8
 8010132:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010134:	2300      	movs	r3, #0
 8010136:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801013a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801013c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801013e:	4628      	mov	r0, r5
 8010140:	4798      	blx	r3
 8010142:	2300      	movs	r3, #0
 8010144:	6323      	str	r3, [r4, #48]	; 0x30
 8010146:	4630      	mov	r0, r6
 8010148:	b002      	add	sp, #8
 801014a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801014e:	260b      	movs	r6, #11
 8010150:	4630      	mov	r0, r6
 8010152:	b002      	add	sp, #8
 8010154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010158 <rcl_wait_set_add_subscription>:
 8010158:	b318      	cbz	r0, 80101a2 <rcl_wait_set_add_subscription+0x4a>
 801015a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801015c:	b570      	push	{r4, r5, r6, lr}
 801015e:	4604      	mov	r4, r0
 8010160:	b30b      	cbz	r3, 80101a6 <rcl_wait_set_add_subscription+0x4e>
 8010162:	b319      	cbz	r1, 80101ac <rcl_wait_set_add_subscription+0x54>
 8010164:	681d      	ldr	r5, [r3, #0]
 8010166:	6840      	ldr	r0, [r0, #4]
 8010168:	4285      	cmp	r5, r0
 801016a:	d217      	bcs.n	801019c <rcl_wait_set_add_subscription+0x44>
 801016c:	6820      	ldr	r0, [r4, #0]
 801016e:	1c6e      	adds	r6, r5, #1
 8010170:	601e      	str	r6, [r3, #0]
 8010172:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010176:	b102      	cbz	r2, 801017a <rcl_wait_set_add_subscription+0x22>
 8010178:	6015      	str	r5, [r2, #0]
 801017a:	4608      	mov	r0, r1
 801017c:	f7f9 fd30 	bl	8009be0 <rcl_subscription_get_rmw_handle>
 8010180:	b150      	cbz	r0, 8010198 <rcl_wait_set_add_subscription+0x40>
 8010182:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010184:	6842      	ldr	r2, [r0, #4]
 8010186:	689b      	ldr	r3, [r3, #8]
 8010188:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801018c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801018e:	6853      	ldr	r3, [r2, #4]
 8010190:	3301      	adds	r3, #1
 8010192:	2000      	movs	r0, #0
 8010194:	6053      	str	r3, [r2, #4]
 8010196:	bd70      	pop	{r4, r5, r6, pc}
 8010198:	2001      	movs	r0, #1
 801019a:	bd70      	pop	{r4, r5, r6, pc}
 801019c:	f240 3086 	movw	r0, #902	; 0x386
 80101a0:	bd70      	pop	{r4, r5, r6, pc}
 80101a2:	200b      	movs	r0, #11
 80101a4:	4770      	bx	lr
 80101a6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80101aa:	bd70      	pop	{r4, r5, r6, pc}
 80101ac:	200b      	movs	r0, #11
 80101ae:	bd70      	pop	{r4, r5, r6, pc}

080101b0 <rcl_wait_set_clear>:
 80101b0:	2800      	cmp	r0, #0
 80101b2:	d073      	beq.n	801029c <rcl_wait_set_clear+0xec>
 80101b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80101b6:	b510      	push	{r4, lr}
 80101b8:	4604      	mov	r4, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d070      	beq.n	80102a0 <rcl_wait_set_clear+0xf0>
 80101be:	6800      	ldr	r0, [r0, #0]
 80101c0:	b138      	cbz	r0, 80101d2 <rcl_wait_set_clear+0x22>
 80101c2:	6862      	ldr	r2, [r4, #4]
 80101c4:	2100      	movs	r1, #0
 80101c6:	0092      	lsls	r2, r2, #2
 80101c8:	f005 f88e 	bl	80152e8 <memset>
 80101cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80101ce:	2200      	movs	r2, #0
 80101d0:	601a      	str	r2, [r3, #0]
 80101d2:	68a0      	ldr	r0, [r4, #8]
 80101d4:	b138      	cbz	r0, 80101e6 <rcl_wait_set_clear+0x36>
 80101d6:	68e2      	ldr	r2, [r4, #12]
 80101d8:	2100      	movs	r1, #0
 80101da:	0092      	lsls	r2, r2, #2
 80101dc:	f005 f884 	bl	80152e8 <memset>
 80101e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80101e2:	2200      	movs	r2, #0
 80101e4:	60da      	str	r2, [r3, #12]
 80101e6:	69a0      	ldr	r0, [r4, #24]
 80101e8:	b138      	cbz	r0, 80101fa <rcl_wait_set_clear+0x4a>
 80101ea:	69e2      	ldr	r2, [r4, #28]
 80101ec:	2100      	movs	r1, #0
 80101ee:	0092      	lsls	r2, r2, #2
 80101f0:	f005 f87a 	bl	80152e8 <memset>
 80101f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80101f6:	2200      	movs	r2, #0
 80101f8:	619a      	str	r2, [r3, #24]
 80101fa:	6a20      	ldr	r0, [r4, #32]
 80101fc:	b138      	cbz	r0, 801020e <rcl_wait_set_clear+0x5e>
 80101fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010200:	2100      	movs	r1, #0
 8010202:	0092      	lsls	r2, r2, #2
 8010204:	f005 f870 	bl	80152e8 <memset>
 8010208:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801020a:	2200      	movs	r2, #0
 801020c:	625a      	str	r2, [r3, #36]	; 0x24
 801020e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010210:	b138      	cbz	r0, 8010222 <rcl_wait_set_clear+0x72>
 8010212:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010214:	2100      	movs	r1, #0
 8010216:	0092      	lsls	r2, r2, #2
 8010218:	f005 f866 	bl	80152e8 <memset>
 801021c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801021e:	2200      	movs	r2, #0
 8010220:	631a      	str	r2, [r3, #48]	; 0x30
 8010222:	6920      	ldr	r0, [r4, #16]
 8010224:	b138      	cbz	r0, 8010236 <rcl_wait_set_clear+0x86>
 8010226:	6962      	ldr	r2, [r4, #20]
 8010228:	2100      	movs	r1, #0
 801022a:	0092      	lsls	r2, r2, #2
 801022c:	f005 f85c 	bl	80152e8 <memset>
 8010230:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010232:	2200      	movs	r2, #0
 8010234:	641a      	str	r2, [r3, #64]	; 0x40
 8010236:	6898      	ldr	r0, [r3, #8]
 8010238:	b138      	cbz	r0, 801024a <rcl_wait_set_clear+0x9a>
 801023a:	685a      	ldr	r2, [r3, #4]
 801023c:	2100      	movs	r1, #0
 801023e:	0092      	lsls	r2, r2, #2
 8010240:	f005 f852 	bl	80152e8 <memset>
 8010244:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010246:	2200      	movs	r2, #0
 8010248:	605a      	str	r2, [r3, #4]
 801024a:	6958      	ldr	r0, [r3, #20]
 801024c:	b138      	cbz	r0, 801025e <rcl_wait_set_clear+0xae>
 801024e:	691a      	ldr	r2, [r3, #16]
 8010250:	2100      	movs	r1, #0
 8010252:	0092      	lsls	r2, r2, #2
 8010254:	f005 f848 	bl	80152e8 <memset>
 8010258:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801025a:	2200      	movs	r2, #0
 801025c:	611a      	str	r2, [r3, #16]
 801025e:	6a18      	ldr	r0, [r3, #32]
 8010260:	b138      	cbz	r0, 8010272 <rcl_wait_set_clear+0xc2>
 8010262:	69da      	ldr	r2, [r3, #28]
 8010264:	2100      	movs	r1, #0
 8010266:	0092      	lsls	r2, r2, #2
 8010268:	f005 f83e 	bl	80152e8 <memset>
 801026c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801026e:	2200      	movs	r2, #0
 8010270:	61da      	str	r2, [r3, #28]
 8010272:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010274:	b138      	cbz	r0, 8010286 <rcl_wait_set_clear+0xd6>
 8010276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010278:	2100      	movs	r1, #0
 801027a:	0092      	lsls	r2, r2, #2
 801027c:	f005 f834 	bl	80152e8 <memset>
 8010280:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010282:	2200      	movs	r2, #0
 8010284:	629a      	str	r2, [r3, #40]	; 0x28
 8010286:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010288:	b138      	cbz	r0, 801029a <rcl_wait_set_clear+0xea>
 801028a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801028c:	2100      	movs	r1, #0
 801028e:	0092      	lsls	r2, r2, #2
 8010290:	f005 f82a 	bl	80152e8 <memset>
 8010294:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010296:	2000      	movs	r0, #0
 8010298:	6358      	str	r0, [r3, #52]	; 0x34
 801029a:	bd10      	pop	{r4, pc}
 801029c:	200b      	movs	r0, #11
 801029e:	4770      	bx	lr
 80102a0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80102a4:	bd10      	pop	{r4, pc}
 80102a6:	bf00      	nop

080102a8 <rcl_wait_set_resize>:
 80102a8:	2800      	cmp	r0, #0
 80102aa:	f000 8185 	beq.w	80105b8 <rcl_wait_set_resize+0x310>
 80102ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80102b4:	b083      	sub	sp, #12
 80102b6:	4605      	mov	r5, r0
 80102b8:	2c00      	cmp	r4, #0
 80102ba:	f000 817f 	beq.w	80105bc <rcl_wait_set_resize+0x314>
 80102be:	f04f 0900 	mov.w	r9, #0
 80102c2:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80102c6:	461f      	mov	r7, r3
 80102c8:	4688      	mov	r8, r1
 80102ca:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80102ce:	4616      	mov	r6, r2
 80102d0:	f8c0 9004 	str.w	r9, [r0, #4]
 80102d4:	f8c4 9000 	str.w	r9, [r4]
 80102d8:	2900      	cmp	r1, #0
 80102da:	f000 80bd 	beq.w	8010458 <rcl_wait_set_resize+0x1b0>
 80102de:	008c      	lsls	r4, r1, #2
 80102e0:	6800      	ldr	r0, [r0, #0]
 80102e2:	9301      	str	r3, [sp, #4]
 80102e4:	4652      	mov	r2, sl
 80102e6:	4621      	mov	r1, r4
 80102e8:	4798      	blx	r3
 80102ea:	9b01      	ldr	r3, [sp, #4]
 80102ec:	6028      	str	r0, [r5, #0]
 80102ee:	2800      	cmp	r0, #0
 80102f0:	f000 80cb 	beq.w	801048a <rcl_wait_set_resize+0x1e2>
 80102f4:	4622      	mov	r2, r4
 80102f6:	4649      	mov	r1, r9
 80102f8:	9301      	str	r3, [sp, #4]
 80102fa:	f004 fff5 	bl	80152e8 <memset>
 80102fe:	f8c5 8004 	str.w	r8, [r5, #4]
 8010302:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8010306:	9b01      	ldr	r3, [sp, #4]
 8010308:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801030c:	f8c8 9004 	str.w	r9, [r8, #4]
 8010310:	4652      	mov	r2, sl
 8010312:	4621      	mov	r1, r4
 8010314:	4798      	blx	r3
 8010316:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010318:	f8c8 0008 	str.w	r0, [r8, #8]
 801031c:	689b      	ldr	r3, [r3, #8]
 801031e:	2b00      	cmp	r3, #0
 8010320:	f000 80ac 	beq.w	801047c <rcl_wait_set_resize+0x1d4>
 8010324:	4622      	mov	r2, r4
 8010326:	4649      	mov	r1, r9
 8010328:	4618      	mov	r0, r3
 801032a:	f004 ffdd 	bl	80152e8 <memset>
 801032e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010330:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010334:	f04f 0800 	mov.w	r8, #0
 8010338:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801033c:	f8c5 800c 	str.w	r8, [r5, #12]
 8010340:	f8c4 800c 	str.w	r8, [r4, #12]
 8010344:	2e00      	cmp	r6, #0
 8010346:	f040 80a4 	bne.w	8010492 <rcl_wait_set_resize+0x1ea>
 801034a:	68a8      	ldr	r0, [r5, #8]
 801034c:	b128      	cbz	r0, 801035a <rcl_wait_set_resize+0xb2>
 801034e:	4649      	mov	r1, r9
 8010350:	4790      	blx	r2
 8010352:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010354:	60ae      	str	r6, [r5, #8]
 8010356:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801035a:	f04f 0800 	mov.w	r8, #0
 801035e:	19f6      	adds	r6, r6, r7
 8010360:	f8c4 8010 	str.w	r8, [r4, #16]
 8010364:	f040 80ac 	bne.w	80104c0 <rcl_wait_set_resize+0x218>
 8010368:	6960      	ldr	r0, [r4, #20]
 801036a:	b130      	cbz	r0, 801037a <rcl_wait_set_resize+0xd2>
 801036c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801036e:	4649      	mov	r1, r9
 8010370:	4798      	blx	r3
 8010372:	6166      	str	r6, [r4, #20]
 8010374:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010376:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801037a:	2600      	movs	r6, #0
 801037c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010380:	616e      	str	r6, [r5, #20]
 8010382:	6426      	str	r6, [r4, #64]	; 0x40
 8010384:	2f00      	cmp	r7, #0
 8010386:	f040 80ad 	bne.w	80104e4 <rcl_wait_set_resize+0x23c>
 801038a:	6928      	ldr	r0, [r5, #16]
 801038c:	b138      	cbz	r0, 801039e <rcl_wait_set_resize+0xf6>
 801038e:	4649      	mov	r1, r9
 8010390:	47d0      	blx	sl
 8010392:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010394:	612f      	str	r7, [r5, #16]
 8010396:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801039a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801039e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103a0:	2600      	movs	r6, #0
 80103a2:	61ee      	str	r6, [r5, #28]
 80103a4:	61a6      	str	r6, [r4, #24]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f040 80af 	bne.w	801050a <rcl_wait_set_resize+0x262>
 80103ac:	69a8      	ldr	r0, [r5, #24]
 80103ae:	b120      	cbz	r0, 80103ba <rcl_wait_set_resize+0x112>
 80103b0:	4649      	mov	r1, r9
 80103b2:	47d0      	blx	sl
 80103b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103b6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80103b8:	61ab      	str	r3, [r5, #24]
 80103ba:	6a20      	ldr	r0, [r4, #32]
 80103bc:	b128      	cbz	r0, 80103ca <rcl_wait_set_resize+0x122>
 80103be:	4649      	mov	r1, r9
 80103c0:	47d0      	blx	sl
 80103c2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80103c4:	2300      	movs	r3, #0
 80103c6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80103ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103cc:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80103ce:	2600      	movs	r6, #0
 80103d0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80103d4:	626e      	str	r6, [r5, #36]	; 0x24
 80103d6:	6266      	str	r6, [r4, #36]	; 0x24
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f000 80b6 	beq.w	801054a <rcl_wait_set_resize+0x2a2>
 80103de:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80103e2:	6a28      	ldr	r0, [r5, #32]
 80103e4:	463a      	mov	r2, r7
 80103e6:	4651      	mov	r1, sl
 80103e8:	47c8      	blx	r9
 80103ea:	6228      	str	r0, [r5, #32]
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d04c      	beq.n	801048a <rcl_wait_set_resize+0x1e2>
 80103f0:	4652      	mov	r2, sl
 80103f2:	4631      	mov	r1, r6
 80103f4:	f004 ff78 	bl	80152e8 <memset>
 80103f8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80103fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103fc:	626b      	str	r3, [r5, #36]	; 0x24
 80103fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010400:	62a6      	str	r6, [r4, #40]	; 0x28
 8010402:	463a      	mov	r2, r7
 8010404:	4651      	mov	r1, sl
 8010406:	47c8      	blx	r9
 8010408:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801040a:	62e0      	str	r0, [r4, #44]	; 0x2c
 801040c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801040e:	2c00      	cmp	r4, #0
 8010410:	f000 80f0 	beq.w	80105f4 <rcl_wait_set_resize+0x34c>
 8010414:	4620      	mov	r0, r4
 8010416:	4652      	mov	r2, sl
 8010418:	4631      	mov	r1, r6
 801041a:	f004 ff65 	bl	80152e8 <memset>
 801041e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010422:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010424:	2600      	movs	r6, #0
 8010426:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801042a:	62ee      	str	r6, [r5, #44]	; 0x2c
 801042c:	6326      	str	r6, [r4, #48]	; 0x30
 801042e:	2b00      	cmp	r3, #0
 8010430:	f040 809d 	bne.w	801056e <rcl_wait_set_resize+0x2c6>
 8010434:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010436:	b120      	cbz	r0, 8010442 <rcl_wait_set_resize+0x19a>
 8010438:	4639      	mov	r1, r7
 801043a:	47c0      	blx	r8
 801043c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801043e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010440:	62ab      	str	r3, [r5, #40]	; 0x28
 8010442:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010444:	b310      	cbz	r0, 801048c <rcl_wait_set_resize+0x1e4>
 8010446:	4639      	mov	r1, r7
 8010448:	47c0      	blx	r8
 801044a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801044c:	2000      	movs	r0, #0
 801044e:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8010452:	b003      	add	sp, #12
 8010454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010458:	6800      	ldr	r0, [r0, #0]
 801045a:	b120      	cbz	r0, 8010466 <rcl_wait_set_resize+0x1be>
 801045c:	4651      	mov	r1, sl
 801045e:	47d8      	blx	fp
 8010460:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010462:	f8c5 8000 	str.w	r8, [r5]
 8010466:	68a0      	ldr	r0, [r4, #8]
 8010468:	2800      	cmp	r0, #0
 801046a:	f43f af61 	beq.w	8010330 <rcl_wait_set_resize+0x88>
 801046e:	4651      	mov	r1, sl
 8010470:	47d8      	blx	fp
 8010472:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010474:	2300      	movs	r3, #0
 8010476:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801047a:	e759      	b.n	8010330 <rcl_wait_set_resize+0x88>
 801047c:	6828      	ldr	r0, [r5, #0]
 801047e:	9301      	str	r3, [sp, #4]
 8010480:	4651      	mov	r1, sl
 8010482:	47d8      	blx	fp
 8010484:	9b01      	ldr	r3, [sp, #4]
 8010486:	e9c5 3300 	strd	r3, r3, [r5]
 801048a:	200a      	movs	r0, #10
 801048c:	b003      	add	sp, #12
 801048e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010492:	00b4      	lsls	r4, r6, #2
 8010494:	68a8      	ldr	r0, [r5, #8]
 8010496:	464a      	mov	r2, r9
 8010498:	4621      	mov	r1, r4
 801049a:	4798      	blx	r3
 801049c:	60a8      	str	r0, [r5, #8]
 801049e:	2800      	cmp	r0, #0
 80104a0:	d0f3      	beq.n	801048a <rcl_wait_set_resize+0x1e2>
 80104a2:	4622      	mov	r2, r4
 80104a4:	4641      	mov	r1, r8
 80104a6:	f004 ff1f 	bl	80152e8 <memset>
 80104aa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80104ac:	60ee      	str	r6, [r5, #12]
 80104ae:	f04f 0800 	mov.w	r8, #0
 80104b2:	19f6      	adds	r6, r6, r7
 80104b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80104b8:	f8c4 8010 	str.w	r8, [r4, #16]
 80104bc:	f43f af54 	beq.w	8010368 <rcl_wait_set_resize+0xc0>
 80104c0:	00b6      	lsls	r6, r6, #2
 80104c2:	464a      	mov	r2, r9
 80104c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80104c6:	6960      	ldr	r0, [r4, #20]
 80104c8:	4631      	mov	r1, r6
 80104ca:	4798      	blx	r3
 80104cc:	4681      	mov	r9, r0
 80104ce:	6160      	str	r0, [r4, #20]
 80104d0:	2800      	cmp	r0, #0
 80104d2:	d076      	beq.n	80105c2 <rcl_wait_set_resize+0x31a>
 80104d4:	4632      	mov	r2, r6
 80104d6:	4641      	mov	r1, r8
 80104d8:	f004 ff06 	bl	80152e8 <memset>
 80104dc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80104de:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80104e2:	e74a      	b.n	801037a <rcl_wait_set_resize+0xd2>
 80104e4:	00bc      	lsls	r4, r7, #2
 80104e6:	6928      	ldr	r0, [r5, #16]
 80104e8:	464a      	mov	r2, r9
 80104ea:	4621      	mov	r1, r4
 80104ec:	47c0      	blx	r8
 80104ee:	6128      	str	r0, [r5, #16]
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d0ca      	beq.n	801048a <rcl_wait_set_resize+0x1e2>
 80104f4:	4622      	mov	r2, r4
 80104f6:	4631      	mov	r1, r6
 80104f8:	f004 fef6 	bl	80152e8 <memset>
 80104fc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80104fe:	616f      	str	r7, [r5, #20]
 8010500:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010504:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010508:	e749      	b.n	801039e <rcl_wait_set_resize+0xf6>
 801050a:	009c      	lsls	r4, r3, #2
 801050c:	69a8      	ldr	r0, [r5, #24]
 801050e:	464a      	mov	r2, r9
 8010510:	4621      	mov	r1, r4
 8010512:	47c0      	blx	r8
 8010514:	61a8      	str	r0, [r5, #24]
 8010516:	2800      	cmp	r0, #0
 8010518:	d0b7      	beq.n	801048a <rcl_wait_set_resize+0x1e2>
 801051a:	4622      	mov	r2, r4
 801051c:	4631      	mov	r1, r6
 801051e:	f004 fee3 	bl	80152e8 <memset>
 8010522:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8010524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010526:	61eb      	str	r3, [r5, #28]
 8010528:	6a38      	ldr	r0, [r7, #32]
 801052a:	61fe      	str	r6, [r7, #28]
 801052c:	464a      	mov	r2, r9
 801052e:	4621      	mov	r1, r4
 8010530:	47c0      	blx	r8
 8010532:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010534:	6238      	str	r0, [r7, #32]
 8010536:	6a1f      	ldr	r7, [r3, #32]
 8010538:	2f00      	cmp	r7, #0
 801053a:	d054      	beq.n	80105e6 <rcl_wait_set_resize+0x33e>
 801053c:	4622      	mov	r2, r4
 801053e:	4631      	mov	r1, r6
 8010540:	4638      	mov	r0, r7
 8010542:	f004 fed1 	bl	80152e8 <memset>
 8010546:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010548:	e73f      	b.n	80103ca <rcl_wait_set_resize+0x122>
 801054a:	6a28      	ldr	r0, [r5, #32]
 801054c:	b120      	cbz	r0, 8010558 <rcl_wait_set_resize+0x2b0>
 801054e:	4639      	mov	r1, r7
 8010550:	47c0      	blx	r8
 8010552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010554:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010556:	622b      	str	r3, [r5, #32]
 8010558:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801055a:	2800      	cmp	r0, #0
 801055c:	f43f af60 	beq.w	8010420 <rcl_wait_set_resize+0x178>
 8010560:	4639      	mov	r1, r7
 8010562:	47c0      	blx	r8
 8010564:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010566:	2300      	movs	r3, #0
 8010568:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801056c:	e758      	b.n	8010420 <rcl_wait_set_resize+0x178>
 801056e:	009c      	lsls	r4, r3, #2
 8010570:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010572:	463a      	mov	r2, r7
 8010574:	4621      	mov	r1, r4
 8010576:	47c8      	blx	r9
 8010578:	62a8      	str	r0, [r5, #40]	; 0x28
 801057a:	2800      	cmp	r0, #0
 801057c:	d085      	beq.n	801048a <rcl_wait_set_resize+0x1e2>
 801057e:	4622      	mov	r2, r4
 8010580:	4631      	mov	r1, r6
 8010582:	f004 feb1 	bl	80152e8 <memset>
 8010586:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801058a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801058c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801058e:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8010592:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8010596:	463a      	mov	r2, r7
 8010598:	4621      	mov	r1, r4
 801059a:	47c8      	blx	r9
 801059c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801059e:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80105a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a4:	b36b      	cbz	r3, 8010602 <rcl_wait_set_resize+0x35a>
 80105a6:	4622      	mov	r2, r4
 80105a8:	4631      	mov	r1, r6
 80105aa:	4618      	mov	r0, r3
 80105ac:	f004 fe9c 	bl	80152e8 <memset>
 80105b0:	4630      	mov	r0, r6
 80105b2:	b003      	add	sp, #12
 80105b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105b8:	200b      	movs	r0, #11
 80105ba:	4770      	bx	lr
 80105bc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80105c0:	e764      	b.n	801048c <rcl_wait_set_resize+0x1e4>
 80105c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80105c4:	68a8      	ldr	r0, [r5, #8]
 80105c6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80105c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105ca:	4798      	blx	r3
 80105cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80105ce:	6928      	ldr	r0, [r5, #16]
 80105d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80105d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80105d4:	f8c5 900c 	str.w	r9, [r5, #12]
 80105d8:	f8c5 9008 	str.w	r9, [r5, #8]
 80105dc:	4790      	blx	r2
 80105de:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80105e2:	200a      	movs	r0, #10
 80105e4:	e752      	b.n	801048c <rcl_wait_set_resize+0x1e4>
 80105e6:	69a8      	ldr	r0, [r5, #24]
 80105e8:	4649      	mov	r1, r9
 80105ea:	47d0      	blx	sl
 80105ec:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80105f0:	200a      	movs	r0, #10
 80105f2:	e74b      	b.n	801048c <rcl_wait_set_resize+0x1e4>
 80105f4:	6a28      	ldr	r0, [r5, #32]
 80105f6:	4639      	mov	r1, r7
 80105f8:	47c0      	blx	r8
 80105fa:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80105fe:	200a      	movs	r0, #10
 8010600:	e744      	b.n	801048c <rcl_wait_set_resize+0x1e4>
 8010602:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010604:	9301      	str	r3, [sp, #4]
 8010606:	4639      	mov	r1, r7
 8010608:	47c0      	blx	r8
 801060a:	9b01      	ldr	r3, [sp, #4]
 801060c:	200a      	movs	r0, #10
 801060e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010612:	e73b      	b.n	801048c <rcl_wait_set_resize+0x1e4>

08010614 <rcl_wait_set_init>:
 8010614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010618:	b084      	sub	sp, #16
 801061a:	4604      	mov	r4, r0
 801061c:	a810      	add	r0, sp, #64	; 0x40
 801061e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8010622:	460f      	mov	r7, r1
 8010624:	4690      	mov	r8, r2
 8010626:	4699      	mov	r9, r3
 8010628:	f7fa fa72 	bl	800ab10 <rcutils_allocator_is_valid>
 801062c:	2800      	cmp	r0, #0
 801062e:	d06b      	beq.n	8010708 <rcl_wait_set_init+0xf4>
 8010630:	2c00      	cmp	r4, #0
 8010632:	d069      	beq.n	8010708 <rcl_wait_set_init+0xf4>
 8010634:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010636:	b125      	cbz	r5, 8010642 <rcl_wait_set_init+0x2e>
 8010638:	2564      	movs	r5, #100	; 0x64
 801063a:	4628      	mov	r0, r5
 801063c:	b004      	add	sp, #16
 801063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010642:	f1ba 0f00 	cmp.w	sl, #0
 8010646:	d05f      	beq.n	8010708 <rcl_wait_set_init+0xf4>
 8010648:	4650      	mov	r0, sl
 801064a:	f7fe fd75 	bl	800f138 <rcl_context_is_valid>
 801064e:	2800      	cmp	r0, #0
 8010650:	d067      	beq.n	8010722 <rcl_wait_set_init+0x10e>
 8010652:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010654:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010656:	205c      	movs	r0, #92	; 0x5c
 8010658:	4798      	blx	r3
 801065a:	6320      	str	r0, [r4, #48]	; 0x30
 801065c:	2800      	cmp	r0, #0
 801065e:	d062      	beq.n	8010726 <rcl_wait_set_init+0x112>
 8010660:	4629      	mov	r1, r5
 8010662:	225c      	movs	r2, #92	; 0x5c
 8010664:	f004 fe40 	bl	80152e8 <memset>
 8010668:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801066c:	eb03 0e02 	add.w	lr, r3, r2
 8010670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010672:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8010674:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8010678:	449e      	add	lr, r3
 801067a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801067e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8010682:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8010686:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801068a:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 801068e:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8010692:	f106 0548 	add.w	r5, r6, #72	; 0x48
 8010696:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 801069a:	f8da a000 	ldr.w	sl, [sl]
 801069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80106a0:	44c6      	add	lr, r8
 80106a2:	f8dc 3000 	ldr.w	r3, [ip]
 80106a6:	602b      	str	r3, [r5, #0]
 80106a8:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80106ac:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 80106b0:	f002 f956 	bl	8012960 <rmw_create_wait_set>
 80106b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80106b6:	63f0      	str	r0, [r6, #60]	; 0x3c
 80106b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80106ba:	b350      	cbz	r0, 8010712 <rcl_wait_set_init+0xfe>
 80106bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106be:	9302      	str	r3, [sp, #8]
 80106c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106c2:	9301      	str	r3, [sp, #4]
 80106c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	4642      	mov	r2, r8
 80106ca:	464b      	mov	r3, r9
 80106cc:	4639      	mov	r1, r7
 80106ce:	4620      	mov	r0, r4
 80106d0:	f7ff fdea 	bl	80102a8 <rcl_wait_set_resize>
 80106d4:	4605      	mov	r5, r0
 80106d6:	2800      	cmp	r0, #0
 80106d8:	d0af      	beq.n	801063a <rcl_wait_set_init+0x26>
 80106da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80106dc:	bb2b      	cbnz	r3, 801072a <rcl_wait_set_init+0x116>
 80106de:	2600      	movs	r6, #0
 80106e0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80106e4:	9600      	str	r6, [sp, #0]
 80106e6:	4633      	mov	r3, r6
 80106e8:	4632      	mov	r2, r6
 80106ea:	4631      	mov	r1, r6
 80106ec:	4620      	mov	r0, r4
 80106ee:	f7ff fddb 	bl	80102a8 <rcl_wait_set_resize>
 80106f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80106f4:	2800      	cmp	r0, #0
 80106f6:	d0a0      	beq.n	801063a <rcl_wait_set_init+0x26>
 80106f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80106fa:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80106fc:	4798      	blx	r3
 80106fe:	4628      	mov	r0, r5
 8010700:	6326      	str	r6, [r4, #48]	; 0x30
 8010702:	b004      	add	sp, #16
 8010704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010708:	250b      	movs	r5, #11
 801070a:	4628      	mov	r0, r5
 801070c:	b004      	add	sp, #16
 801070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010712:	2501      	movs	r5, #1
 8010714:	f002 f92e 	bl	8012974 <rmw_destroy_wait_set>
 8010718:	2800      	cmp	r0, #0
 801071a:	bf18      	it	ne
 801071c:	f44f 7561 	movne.w	r5, #900	; 0x384
 8010720:	e7dd      	b.n	80106de <rcl_wait_set_init+0xca>
 8010722:	2565      	movs	r5, #101	; 0x65
 8010724:	e789      	b.n	801063a <rcl_wait_set_init+0x26>
 8010726:	250a      	movs	r5, #10
 8010728:	e787      	b.n	801063a <rcl_wait_set_init+0x26>
 801072a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801072c:	e7f2      	b.n	8010714 <rcl_wait_set_init+0x100>
 801072e:	bf00      	nop

08010730 <rcl_wait_set_add_guard_condition>:
 8010730:	b318      	cbz	r0, 801077a <rcl_wait_set_add_guard_condition+0x4a>
 8010732:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	4604      	mov	r4, r0
 8010738:	b30b      	cbz	r3, 801077e <rcl_wait_set_add_guard_condition+0x4e>
 801073a:	b319      	cbz	r1, 8010784 <rcl_wait_set_add_guard_condition+0x54>
 801073c:	68dd      	ldr	r5, [r3, #12]
 801073e:	68c0      	ldr	r0, [r0, #12]
 8010740:	4285      	cmp	r5, r0
 8010742:	d217      	bcs.n	8010774 <rcl_wait_set_add_guard_condition+0x44>
 8010744:	68a0      	ldr	r0, [r4, #8]
 8010746:	1c6e      	adds	r6, r5, #1
 8010748:	60de      	str	r6, [r3, #12]
 801074a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801074e:	b102      	cbz	r2, 8010752 <rcl_wait_set_add_guard_condition+0x22>
 8010750:	6015      	str	r5, [r2, #0]
 8010752:	4608      	mov	r0, r1
 8010754:	f7fe fe02 	bl	800f35c <rcl_guard_condition_get_rmw_handle>
 8010758:	b150      	cbz	r0, 8010770 <rcl_wait_set_add_guard_condition+0x40>
 801075a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801075c:	6842      	ldr	r2, [r0, #4]
 801075e:	695b      	ldr	r3, [r3, #20]
 8010760:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010764:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010766:	6913      	ldr	r3, [r2, #16]
 8010768:	3301      	adds	r3, #1
 801076a:	2000      	movs	r0, #0
 801076c:	6113      	str	r3, [r2, #16]
 801076e:	bd70      	pop	{r4, r5, r6, pc}
 8010770:	2001      	movs	r0, #1
 8010772:	bd70      	pop	{r4, r5, r6, pc}
 8010774:	f240 3086 	movw	r0, #902	; 0x386
 8010778:	bd70      	pop	{r4, r5, r6, pc}
 801077a:	200b      	movs	r0, #11
 801077c:	4770      	bx	lr
 801077e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010782:	bd70      	pop	{r4, r5, r6, pc}
 8010784:	200b      	movs	r0, #11
 8010786:	bd70      	pop	{r4, r5, r6, pc}

08010788 <rcl_wait_set_add_timer>:
 8010788:	b328      	cbz	r0, 80107d6 <rcl_wait_set_add_timer+0x4e>
 801078a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801078c:	b570      	push	{r4, r5, r6, lr}
 801078e:	4604      	mov	r4, r0
 8010790:	b31b      	cbz	r3, 80107da <rcl_wait_set_add_timer+0x52>
 8010792:	b329      	cbz	r1, 80107e0 <rcl_wait_set_add_timer+0x58>
 8010794:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010796:	6965      	ldr	r5, [r4, #20]
 8010798:	42a8      	cmp	r0, r5
 801079a:	d219      	bcs.n	80107d0 <rcl_wait_set_add_timer+0x48>
 801079c:	6925      	ldr	r5, [r4, #16]
 801079e:	1c46      	adds	r6, r0, #1
 80107a0:	641e      	str	r6, [r3, #64]	; 0x40
 80107a2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80107a6:	b102      	cbz	r2, 80107aa <rcl_wait_set_add_timer+0x22>
 80107a8:	6010      	str	r0, [r2, #0]
 80107aa:	4608      	mov	r0, r1
 80107ac:	f7ff fba6 	bl	800fefc <rcl_timer_get_guard_condition>
 80107b0:	b168      	cbz	r0, 80107ce <rcl_wait_set_add_timer+0x46>
 80107b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80107b4:	68e3      	ldr	r3, [r4, #12]
 80107b6:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80107b8:	3b01      	subs	r3, #1
 80107ba:	441d      	add	r5, r3
 80107bc:	f7fe fdce 	bl	800f35c <rcl_guard_condition_get_rmw_handle>
 80107c0:	b180      	cbz	r0, 80107e4 <rcl_wait_set_add_timer+0x5c>
 80107c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107c4:	6842      	ldr	r2, [r0, #4]
 80107c6:	695b      	ldr	r3, [r3, #20]
 80107c8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80107cc:	2000      	movs	r0, #0
 80107ce:	bd70      	pop	{r4, r5, r6, pc}
 80107d0:	f240 3086 	movw	r0, #902	; 0x386
 80107d4:	bd70      	pop	{r4, r5, r6, pc}
 80107d6:	200b      	movs	r0, #11
 80107d8:	4770      	bx	lr
 80107da:	f44f 7061 	mov.w	r0, #900	; 0x384
 80107de:	bd70      	pop	{r4, r5, r6, pc}
 80107e0:	200b      	movs	r0, #11
 80107e2:	bd70      	pop	{r4, r5, r6, pc}
 80107e4:	2001      	movs	r0, #1
 80107e6:	bd70      	pop	{r4, r5, r6, pc}

080107e8 <rcl_wait_set_add_client>:
 80107e8:	b318      	cbz	r0, 8010832 <rcl_wait_set_add_client+0x4a>
 80107ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80107ec:	b570      	push	{r4, r5, r6, lr}
 80107ee:	4604      	mov	r4, r0
 80107f0:	b30b      	cbz	r3, 8010836 <rcl_wait_set_add_client+0x4e>
 80107f2:	b319      	cbz	r1, 801083c <rcl_wait_set_add_client+0x54>
 80107f4:	699d      	ldr	r5, [r3, #24]
 80107f6:	69c0      	ldr	r0, [r0, #28]
 80107f8:	4285      	cmp	r5, r0
 80107fa:	d217      	bcs.n	801082c <rcl_wait_set_add_client+0x44>
 80107fc:	69a0      	ldr	r0, [r4, #24]
 80107fe:	1c6e      	adds	r6, r5, #1
 8010800:	619e      	str	r6, [r3, #24]
 8010802:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010806:	b102      	cbz	r2, 801080a <rcl_wait_set_add_client+0x22>
 8010808:	6015      	str	r5, [r2, #0]
 801080a:	4608      	mov	r0, r1
 801080c:	f7fe fbe8 	bl	800efe0 <rcl_client_get_rmw_handle>
 8010810:	b150      	cbz	r0, 8010828 <rcl_wait_set_add_client+0x40>
 8010812:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010814:	6842      	ldr	r2, [r0, #4]
 8010816:	6a1b      	ldr	r3, [r3, #32]
 8010818:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801081c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801081e:	69d3      	ldr	r3, [r2, #28]
 8010820:	3301      	adds	r3, #1
 8010822:	2000      	movs	r0, #0
 8010824:	61d3      	str	r3, [r2, #28]
 8010826:	bd70      	pop	{r4, r5, r6, pc}
 8010828:	2001      	movs	r0, #1
 801082a:	bd70      	pop	{r4, r5, r6, pc}
 801082c:	f240 3086 	movw	r0, #902	; 0x386
 8010830:	bd70      	pop	{r4, r5, r6, pc}
 8010832:	200b      	movs	r0, #11
 8010834:	4770      	bx	lr
 8010836:	f44f 7061 	mov.w	r0, #900	; 0x384
 801083a:	bd70      	pop	{r4, r5, r6, pc}
 801083c:	200b      	movs	r0, #11
 801083e:	bd70      	pop	{r4, r5, r6, pc}

08010840 <rcl_wait_set_add_service>:
 8010840:	b318      	cbz	r0, 801088a <rcl_wait_set_add_service+0x4a>
 8010842:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010844:	b570      	push	{r4, r5, r6, lr}
 8010846:	4604      	mov	r4, r0
 8010848:	b30b      	cbz	r3, 801088e <rcl_wait_set_add_service+0x4e>
 801084a:	b319      	cbz	r1, 8010894 <rcl_wait_set_add_service+0x54>
 801084c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801084e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010850:	4285      	cmp	r5, r0
 8010852:	d217      	bcs.n	8010884 <rcl_wait_set_add_service+0x44>
 8010854:	6a20      	ldr	r0, [r4, #32]
 8010856:	1c6e      	adds	r6, r5, #1
 8010858:	625e      	str	r6, [r3, #36]	; 0x24
 801085a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801085e:	b102      	cbz	r2, 8010862 <rcl_wait_set_add_service+0x22>
 8010860:	6015      	str	r5, [r2, #0]
 8010862:	4608      	mov	r0, r1
 8010864:	f7ff f948 	bl	800faf8 <rcl_service_get_rmw_handle>
 8010868:	b150      	cbz	r0, 8010880 <rcl_wait_set_add_service+0x40>
 801086a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801086c:	6842      	ldr	r2, [r0, #4]
 801086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010870:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010874:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010876:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010878:	3301      	adds	r3, #1
 801087a:	2000      	movs	r0, #0
 801087c:	6293      	str	r3, [r2, #40]	; 0x28
 801087e:	bd70      	pop	{r4, r5, r6, pc}
 8010880:	2001      	movs	r0, #1
 8010882:	bd70      	pop	{r4, r5, r6, pc}
 8010884:	f240 3086 	movw	r0, #902	; 0x386
 8010888:	bd70      	pop	{r4, r5, r6, pc}
 801088a:	200b      	movs	r0, #11
 801088c:	4770      	bx	lr
 801088e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010892:	bd70      	pop	{r4, r5, r6, pc}
 8010894:	200b      	movs	r0, #11
 8010896:	bd70      	pop	{r4, r5, r6, pc}

08010898 <rcl_wait>:
 8010898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801089c:	ed2d 8b02 	vpush	{d8}
 80108a0:	b08d      	sub	sp, #52	; 0x34
 80108a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80108a6:	2800      	cmp	r0, #0
 80108a8:	f000 8143 	beq.w	8010b32 <rcl_wait+0x29a>
 80108ac:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80108ae:	4605      	mov	r5, r0
 80108b0:	2e00      	cmp	r6, #0
 80108b2:	f000 8112 	beq.w	8010ada <rcl_wait+0x242>
 80108b6:	6843      	ldr	r3, [r0, #4]
 80108b8:	b983      	cbnz	r3, 80108dc <rcl_wait+0x44>
 80108ba:	68eb      	ldr	r3, [r5, #12]
 80108bc:	b973      	cbnz	r3, 80108dc <rcl_wait+0x44>
 80108be:	696b      	ldr	r3, [r5, #20]
 80108c0:	b963      	cbnz	r3, 80108dc <rcl_wait+0x44>
 80108c2:	69eb      	ldr	r3, [r5, #28]
 80108c4:	b953      	cbnz	r3, 80108dc <rcl_wait+0x44>
 80108c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80108c8:	b943      	cbnz	r3, 80108dc <rcl_wait+0x44>
 80108ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80108cc:	b933      	cbnz	r3, 80108dc <rcl_wait+0x44>
 80108ce:	f240 3085 	movw	r0, #901	; 0x385
 80108d2:	b00d      	add	sp, #52	; 0x34
 80108d4:	ecbd 8b02 	vpop	{d8}
 80108d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108dc:	9b04      	ldr	r3, [sp, #16]
 80108de:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	9b05      	ldr	r3, [sp, #20]
 80108e4:	f173 0300 	sbcs.w	r3, r3, #0
 80108e8:	f2c0 80f0 	blt.w	8010acc <rcl_wait+0x234>
 80108ec:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80108f0:	4643      	mov	r3, r8
 80108f2:	2a00      	cmp	r2, #0
 80108f4:	f000 8133 	beq.w	8010b5e <rcl_wait+0x2c6>
 80108f8:	2400      	movs	r4, #0
 80108fa:	4613      	mov	r3, r2
 80108fc:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8010b70 <rcl_wait+0x2d8>
 8010900:	46a2      	mov	sl, r4
 8010902:	46a3      	mov	fp, r4
 8010904:	f240 3921 	movw	r9, #801	; 0x321
 8010908:	4632      	mov	r2, r6
 801090a:	e014      	b.n	8010936 <rcl_wait+0x9e>
 801090c:	2800      	cmp	r0, #0
 801090e:	d1e0      	bne.n	80108d2 <rcl_wait+0x3a>
 8010910:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010914:	4542      	cmp	r2, r8
 8010916:	eb73 0107 	sbcs.w	r1, r3, r7
 801091a:	da03      	bge.n	8010924 <rcl_wait+0x8c>
 801091c:	4690      	mov	r8, r2
 801091e:	461f      	mov	r7, r3
 8010920:	f04f 0b01 	mov.w	fp, #1
 8010924:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010926:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010928:	3401      	adds	r4, #1
 801092a:	f14a 0a00 	adc.w	sl, sl, #0
 801092e:	429c      	cmp	r4, r3
 8010930:	f17a 0100 	sbcs.w	r1, sl, #0
 8010934:	d228      	bcs.n	8010988 <rcl_wait+0xf0>
 8010936:	6928      	ldr	r0, [r5, #16]
 8010938:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801093c:	a908      	add	r1, sp, #32
 801093e:	00a6      	lsls	r6, r4, #2
 8010940:	2800      	cmp	r0, #0
 8010942:	d0f1      	beq.n	8010928 <rcl_wait+0x90>
 8010944:	68eb      	ldr	r3, [r5, #12]
 8010946:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801094a:	4423      	add	r3, r4
 801094c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010950:	f1be 0f00 	cmp.w	lr, #0
 8010954:	d006      	beq.n	8010964 <rcl_wait+0xcc>
 8010956:	6913      	ldr	r3, [r2, #16]
 8010958:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801095c:	3301      	adds	r3, #1
 801095e:	6113      	str	r3, [r2, #16]
 8010960:	692b      	ldr	r3, [r5, #16]
 8010962:	5998      	ldr	r0, [r3, r6]
 8010964:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010968:	f7ff fa96 	bl	800fe98 <rcl_timer_get_time_until_next_call>
 801096c:	4548      	cmp	r0, r9
 801096e:	d1cd      	bne.n	801090c <rcl_wait+0x74>
 8010970:	692b      	ldr	r3, [r5, #16]
 8010972:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010974:	2100      	movs	r1, #0
 8010976:	5199      	str	r1, [r3, r6]
 8010978:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801097a:	3401      	adds	r4, #1
 801097c:	f14a 0a00 	adc.w	sl, sl, #0
 8010980:	429c      	cmp	r4, r3
 8010982:	f17a 0100 	sbcs.w	r1, sl, #0
 8010986:	d3d6      	bcc.n	8010936 <rcl_wait+0x9e>
 8010988:	4616      	mov	r6, r2
 801098a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801098e:	4313      	orrs	r3, r2
 8010990:	46d9      	mov	r9, fp
 8010992:	f040 80a9 	bne.w	8010ae8 <rcl_wait+0x250>
 8010996:	2300      	movs	r3, #0
 8010998:	2200      	movs	r2, #0
 801099a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801099e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80109a2:	ab08      	add	r3, sp, #32
 80109a4:	9302      	str	r3, [sp, #8]
 80109a6:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80109a8:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80109ac:	e9cd 3200 	strd	r3, r2, [sp]
 80109b0:	f106 0110 	add.w	r1, r6, #16
 80109b4:	f106 031c 	add.w	r3, r6, #28
 80109b8:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80109bc:	1d30      	adds	r0, r6, #4
 80109be:	f001 fe57 	bl	8012670 <rmw_wait>
 80109c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80109c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109c6:	4680      	mov	r8, r0
 80109c8:	b1ca      	cbz	r2, 80109fe <rcl_wait+0x166>
 80109ca:	2400      	movs	r4, #0
 80109cc:	4627      	mov	r7, r4
 80109ce:	692a      	ldr	r2, [r5, #16]
 80109d0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80109d4:	f10d 011f 	add.w	r1, sp, #31
 80109d8:	00a6      	lsls	r6, r4, #2
 80109da:	b160      	cbz	r0, 80109f6 <rcl_wait+0x15e>
 80109dc:	f88d 701f 	strb.w	r7, [sp, #31]
 80109e0:	f7ff fa20 	bl	800fe24 <rcl_timer_is_ready>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	f47f af74 	bne.w	80108d2 <rcl_wait+0x3a>
 80109ea:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80109ee:	b90b      	cbnz	r3, 80109f4 <rcl_wait+0x15c>
 80109f0:	692a      	ldr	r2, [r5, #16]
 80109f2:	5193      	str	r3, [r2, r6]
 80109f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80109f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109f8:	3401      	adds	r4, #1
 80109fa:	42a2      	cmp	r2, r4
 80109fc:	d8e7      	bhi.n	80109ce <rcl_wait+0x136>
 80109fe:	f038 0002 	bics.w	r0, r8, #2
 8010a02:	f040 8090 	bne.w	8010b26 <rcl_wait+0x28e>
 8010a06:	686e      	ldr	r6, [r5, #4]
 8010a08:	4602      	mov	r2, r0
 8010a0a:	b91e      	cbnz	r6, 8010a14 <rcl_wait+0x17c>
 8010a0c:	e00d      	b.n	8010a2a <rcl_wait+0x192>
 8010a0e:	3201      	adds	r2, #1
 8010a10:	42b2      	cmp	r2, r6
 8010a12:	d00a      	beq.n	8010a2a <rcl_wait+0x192>
 8010a14:	6899      	ldr	r1, [r3, #8]
 8010a16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010a1a:	2900      	cmp	r1, #0
 8010a1c:	d1f7      	bne.n	8010a0e <rcl_wait+0x176>
 8010a1e:	682c      	ldr	r4, [r5, #0]
 8010a20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010a24:	3201      	adds	r2, #1
 8010a26:	42b2      	cmp	r2, r6
 8010a28:	d1f4      	bne.n	8010a14 <rcl_wait+0x17c>
 8010a2a:	68ee      	ldr	r6, [r5, #12]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	b91e      	cbnz	r6, 8010a38 <rcl_wait+0x1a0>
 8010a30:	e00d      	b.n	8010a4e <rcl_wait+0x1b6>
 8010a32:	3201      	adds	r2, #1
 8010a34:	42b2      	cmp	r2, r6
 8010a36:	d00a      	beq.n	8010a4e <rcl_wait+0x1b6>
 8010a38:	6959      	ldr	r1, [r3, #20]
 8010a3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010a3e:	2900      	cmp	r1, #0
 8010a40:	d1f7      	bne.n	8010a32 <rcl_wait+0x19a>
 8010a42:	68ac      	ldr	r4, [r5, #8]
 8010a44:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010a48:	3201      	adds	r2, #1
 8010a4a:	42b2      	cmp	r2, r6
 8010a4c:	d1f4      	bne.n	8010a38 <rcl_wait+0x1a0>
 8010a4e:	69ee      	ldr	r6, [r5, #28]
 8010a50:	2200      	movs	r2, #0
 8010a52:	b91e      	cbnz	r6, 8010a5c <rcl_wait+0x1c4>
 8010a54:	e00d      	b.n	8010a72 <rcl_wait+0x1da>
 8010a56:	3201      	adds	r2, #1
 8010a58:	42b2      	cmp	r2, r6
 8010a5a:	d00a      	beq.n	8010a72 <rcl_wait+0x1da>
 8010a5c:	6a19      	ldr	r1, [r3, #32]
 8010a5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010a62:	2900      	cmp	r1, #0
 8010a64:	d1f7      	bne.n	8010a56 <rcl_wait+0x1be>
 8010a66:	69ac      	ldr	r4, [r5, #24]
 8010a68:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010a6c:	3201      	adds	r2, #1
 8010a6e:	42b2      	cmp	r2, r6
 8010a70:	d1f4      	bne.n	8010a5c <rcl_wait+0x1c4>
 8010a72:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8010a74:	2200      	movs	r2, #0
 8010a76:	b91e      	cbnz	r6, 8010a80 <rcl_wait+0x1e8>
 8010a78:	e00d      	b.n	8010a96 <rcl_wait+0x1fe>
 8010a7a:	3201      	adds	r2, #1
 8010a7c:	4296      	cmp	r6, r2
 8010a7e:	d00a      	beq.n	8010a96 <rcl_wait+0x1fe>
 8010a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010a82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010a86:	2900      	cmp	r1, #0
 8010a88:	d1f7      	bne.n	8010a7a <rcl_wait+0x1e2>
 8010a8a:	6a2c      	ldr	r4, [r5, #32]
 8010a8c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010a90:	3201      	adds	r2, #1
 8010a92:	4296      	cmp	r6, r2
 8010a94:	d1f4      	bne.n	8010a80 <rcl_wait+0x1e8>
 8010a96:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8010a98:	2200      	movs	r2, #0
 8010a9a:	b91e      	cbnz	r6, 8010aa4 <rcl_wait+0x20c>
 8010a9c:	e00d      	b.n	8010aba <rcl_wait+0x222>
 8010a9e:	3201      	adds	r2, #1
 8010aa0:	42b2      	cmp	r2, r6
 8010aa2:	d00a      	beq.n	8010aba <rcl_wait+0x222>
 8010aa4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010aa6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010aaa:	2900      	cmp	r1, #0
 8010aac:	d1f7      	bne.n	8010a9e <rcl_wait+0x206>
 8010aae:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8010ab0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010ab4:	3201      	adds	r2, #1
 8010ab6:	42b2      	cmp	r2, r6
 8010ab8:	d1f4      	bne.n	8010aa4 <rcl_wait+0x20c>
 8010aba:	f1b8 0f02 	cmp.w	r8, #2
 8010abe:	f47f af08 	bne.w	80108d2 <rcl_wait+0x3a>
 8010ac2:	464b      	mov	r3, r9
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	bf08      	it	eq
 8010ac8:	2002      	moveq	r0, #2
 8010aca:	e702      	b.n	80108d2 <rcl_wait+0x3a>
 8010acc:	2a00      	cmp	r2, #0
 8010ace:	d03a      	beq.n	8010b46 <rcl_wait+0x2ae>
 8010ad0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010ad4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010ad8:	e70e      	b.n	80108f8 <rcl_wait+0x60>
 8010ada:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010ade:	b00d      	add	sp, #52	; 0x34
 8010ae0:	ecbd 8b02 	vpop	{d8}
 8010ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae8:	9b04      	ldr	r3, [sp, #16]
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	9b05      	ldr	r3, [sp, #20]
 8010aee:	f173 0300 	sbcs.w	r3, r3, #0
 8010af2:	db24      	blt.n	8010b3e <rcl_wait+0x2a6>
 8010af4:	2f00      	cmp	r7, #0
 8010af6:	bfbc      	itt	lt
 8010af8:	f04f 0800 	movlt.w	r8, #0
 8010afc:	4647      	movlt	r7, r8
 8010afe:	a31e      	add	r3, pc, #120	; (adr r3, 8010b78 <rcl_wait+0x2e0>)
 8010b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b04:	4640      	mov	r0, r8
 8010b06:	4639      	mov	r1, r7
 8010b08:	f7ef fc5a 	bl	80003c0 <__aeabi_ldivmod>
 8010b0c:	a31a      	add	r3, pc, #104	; (adr r3, 8010b78 <rcl_wait+0x2e0>)
 8010b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b12:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b16:	4640      	mov	r0, r8
 8010b18:	4639      	mov	r1, r7
 8010b1a:	f7ef fc51 	bl	80003c0 <__aeabi_ldivmod>
 8010b1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010b22:	ab08      	add	r3, sp, #32
 8010b24:	e73e      	b.n	80109a4 <rcl_wait+0x10c>
 8010b26:	2001      	movs	r0, #1
 8010b28:	b00d      	add	sp, #52	; 0x34
 8010b2a:	ecbd 8b02 	vpop	{d8}
 8010b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b32:	200b      	movs	r0, #11
 8010b34:	b00d      	add	sp, #52	; 0x34
 8010b36:	ecbd 8b02 	vpop	{d8}
 8010b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3e:	465b      	mov	r3, fp
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d1d7      	bne.n	8010af4 <rcl_wait+0x25c>
 8010b44:	e72e      	b.n	80109a4 <rcl_wait+0x10c>
 8010b46:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010b4a:	430b      	orrs	r3, r1
 8010b4c:	bf08      	it	eq
 8010b4e:	4691      	moveq	r9, r2
 8010b50:	f43f af21 	beq.w	8010996 <rcl_wait+0xfe>
 8010b54:	9b04      	ldr	r3, [sp, #16]
 8010b56:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010b5a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	9b05      	ldr	r3, [sp, #20]
 8010b62:	f173 0300 	sbcs.w	r3, r3, #0
 8010b66:	f04f 0300 	mov.w	r3, #0
 8010b6a:	4699      	mov	r9, r3
 8010b6c:	dac2      	bge.n	8010af4 <rcl_wait+0x25c>
 8010b6e:	e719      	b.n	80109a4 <rcl_wait+0x10c>
 8010b70:	ffffffff 	.word	0xffffffff
 8010b74:	7fffffff 	.word	0x7fffffff
 8010b78:	3b9aca00 	.word	0x3b9aca00
 8010b7c:	00000000 	.word	0x00000000

08010b80 <rcl_action_take_goal_response>:
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d039      	beq.n	8010bf8 <rcl_action_take_goal_response+0x78>
 8010b84:	b570      	push	{r4, r5, r6, lr}
 8010b86:	4604      	mov	r4, r0
 8010b88:	6800      	ldr	r0, [r0, #0]
 8010b8a:	b380      	cbz	r0, 8010bee <rcl_action_take_goal_response+0x6e>
 8010b8c:	460d      	mov	r5, r1
 8010b8e:	4616      	mov	r6, r2
 8010b90:	f7fe faaa 	bl	800f0e8 <rcl_client_is_valid>
 8010b94:	b330      	cbz	r0, 8010be4 <rcl_action_take_goal_response+0x64>
 8010b96:	6820      	ldr	r0, [r4, #0]
 8010b98:	3004      	adds	r0, #4
 8010b9a:	f7fe faa5 	bl	800f0e8 <rcl_client_is_valid>
 8010b9e:	b308      	cbz	r0, 8010be4 <rcl_action_take_goal_response+0x64>
 8010ba0:	6820      	ldr	r0, [r4, #0]
 8010ba2:	3008      	adds	r0, #8
 8010ba4:	f7fe faa0 	bl	800f0e8 <rcl_client_is_valid>
 8010ba8:	b1e0      	cbz	r0, 8010be4 <rcl_action_take_goal_response+0x64>
 8010baa:	6820      	ldr	r0, [r4, #0]
 8010bac:	300c      	adds	r0, #12
 8010bae:	f7f9 f81d 	bl	8009bec <rcl_subscription_is_valid>
 8010bb2:	b1b8      	cbz	r0, 8010be4 <rcl_action_take_goal_response+0x64>
 8010bb4:	6820      	ldr	r0, [r4, #0]
 8010bb6:	3010      	adds	r0, #16
 8010bb8:	f7f9 f818 	bl	8009bec <rcl_subscription_is_valid>
 8010bbc:	b190      	cbz	r0, 8010be4 <rcl_action_take_goal_response+0x64>
 8010bbe:	b1cd      	cbz	r5, 8010bf4 <rcl_action_take_goal_response+0x74>
 8010bc0:	b1c6      	cbz	r6, 8010bf4 <rcl_action_take_goal_response+0x74>
 8010bc2:	6820      	ldr	r0, [r4, #0]
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	4629      	mov	r1, r5
 8010bc8:	f7fe fa46 	bl	800f058 <rcl_take_response>
 8010bcc:	b148      	cbz	r0, 8010be2 <rcl_action_take_goal_response+0x62>
 8010bce:	280a      	cmp	r0, #10
 8010bd0:	d007      	beq.n	8010be2 <rcl_action_take_goal_response+0x62>
 8010bd2:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010bd6:	f640 0337 	movw	r3, #2103	; 0x837
 8010bda:	4290      	cmp	r0, r2
 8010bdc:	bf0c      	ite	eq
 8010bde:	4618      	moveq	r0, r3
 8010be0:	2001      	movne	r0, #1
 8010be2:	bd70      	pop	{r4, r5, r6, pc}
 8010be4:	f7f9 ffd0 	bl	800ab88 <rcutils_reset_error>
 8010be8:	f640 0036 	movw	r0, #2102	; 0x836
 8010bec:	bd70      	pop	{r4, r5, r6, pc}
 8010bee:	f640 0036 	movw	r0, #2102	; 0x836
 8010bf2:	bd70      	pop	{r4, r5, r6, pc}
 8010bf4:	200b      	movs	r0, #11
 8010bf6:	bd70      	pop	{r4, r5, r6, pc}
 8010bf8:	f640 0036 	movw	r0, #2102	; 0x836
 8010bfc:	4770      	bx	lr
 8010bfe:	bf00      	nop

08010c00 <rcl_action_send_result_request>:
 8010c00:	b390      	cbz	r0, 8010c68 <rcl_action_send_result_request+0x68>
 8010c02:	b570      	push	{r4, r5, r6, lr}
 8010c04:	4604      	mov	r4, r0
 8010c06:	6800      	ldr	r0, [r0, #0]
 8010c08:	b348      	cbz	r0, 8010c5e <rcl_action_send_result_request+0x5e>
 8010c0a:	460d      	mov	r5, r1
 8010c0c:	4616      	mov	r6, r2
 8010c0e:	f7fe fa6b 	bl	800f0e8 <rcl_client_is_valid>
 8010c12:	b1f8      	cbz	r0, 8010c54 <rcl_action_send_result_request+0x54>
 8010c14:	6820      	ldr	r0, [r4, #0]
 8010c16:	3004      	adds	r0, #4
 8010c18:	f7fe fa66 	bl	800f0e8 <rcl_client_is_valid>
 8010c1c:	b1d0      	cbz	r0, 8010c54 <rcl_action_send_result_request+0x54>
 8010c1e:	6820      	ldr	r0, [r4, #0]
 8010c20:	3008      	adds	r0, #8
 8010c22:	f7fe fa61 	bl	800f0e8 <rcl_client_is_valid>
 8010c26:	b1a8      	cbz	r0, 8010c54 <rcl_action_send_result_request+0x54>
 8010c28:	6820      	ldr	r0, [r4, #0]
 8010c2a:	300c      	adds	r0, #12
 8010c2c:	f7f8 ffde 	bl	8009bec <rcl_subscription_is_valid>
 8010c30:	b180      	cbz	r0, 8010c54 <rcl_action_send_result_request+0x54>
 8010c32:	6820      	ldr	r0, [r4, #0]
 8010c34:	3010      	adds	r0, #16
 8010c36:	f7f8 ffd9 	bl	8009bec <rcl_subscription_is_valid>
 8010c3a:	b158      	cbz	r0, 8010c54 <rcl_action_send_result_request+0x54>
 8010c3c:	b195      	cbz	r5, 8010c64 <rcl_action_send_result_request+0x64>
 8010c3e:	b18e      	cbz	r6, 8010c64 <rcl_action_send_result_request+0x64>
 8010c40:	6820      	ldr	r0, [r4, #0]
 8010c42:	4632      	mov	r2, r6
 8010c44:	4629      	mov	r1, r5
 8010c46:	3008      	adds	r0, #8
 8010c48:	f7fe f9d0 	bl	800efec <rcl_send_request>
 8010c4c:	3800      	subs	r0, #0
 8010c4e:	bf18      	it	ne
 8010c50:	2001      	movne	r0, #1
 8010c52:	bd70      	pop	{r4, r5, r6, pc}
 8010c54:	f7f9 ff98 	bl	800ab88 <rcutils_reset_error>
 8010c58:	f640 0036 	movw	r0, #2102	; 0x836
 8010c5c:	bd70      	pop	{r4, r5, r6, pc}
 8010c5e:	f640 0036 	movw	r0, #2102	; 0x836
 8010c62:	bd70      	pop	{r4, r5, r6, pc}
 8010c64:	200b      	movs	r0, #11
 8010c66:	bd70      	pop	{r4, r5, r6, pc}
 8010c68:	f640 0036 	movw	r0, #2102	; 0x836
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop

08010c70 <rcl_action_take_result_response>:
 8010c70:	2800      	cmp	r0, #0
 8010c72:	d03a      	beq.n	8010cea <rcl_action_take_result_response+0x7a>
 8010c74:	b570      	push	{r4, r5, r6, lr}
 8010c76:	4604      	mov	r4, r0
 8010c78:	6800      	ldr	r0, [r0, #0]
 8010c7a:	b388      	cbz	r0, 8010ce0 <rcl_action_take_result_response+0x70>
 8010c7c:	460d      	mov	r5, r1
 8010c7e:	4616      	mov	r6, r2
 8010c80:	f7fe fa32 	bl	800f0e8 <rcl_client_is_valid>
 8010c84:	b338      	cbz	r0, 8010cd6 <rcl_action_take_result_response+0x66>
 8010c86:	6820      	ldr	r0, [r4, #0]
 8010c88:	3004      	adds	r0, #4
 8010c8a:	f7fe fa2d 	bl	800f0e8 <rcl_client_is_valid>
 8010c8e:	b310      	cbz	r0, 8010cd6 <rcl_action_take_result_response+0x66>
 8010c90:	6820      	ldr	r0, [r4, #0]
 8010c92:	3008      	adds	r0, #8
 8010c94:	f7fe fa28 	bl	800f0e8 <rcl_client_is_valid>
 8010c98:	b1e8      	cbz	r0, 8010cd6 <rcl_action_take_result_response+0x66>
 8010c9a:	6820      	ldr	r0, [r4, #0]
 8010c9c:	300c      	adds	r0, #12
 8010c9e:	f7f8 ffa5 	bl	8009bec <rcl_subscription_is_valid>
 8010ca2:	b1c0      	cbz	r0, 8010cd6 <rcl_action_take_result_response+0x66>
 8010ca4:	6820      	ldr	r0, [r4, #0]
 8010ca6:	3010      	adds	r0, #16
 8010ca8:	f7f8 ffa0 	bl	8009bec <rcl_subscription_is_valid>
 8010cac:	b198      	cbz	r0, 8010cd6 <rcl_action_take_result_response+0x66>
 8010cae:	b1d5      	cbz	r5, 8010ce6 <rcl_action_take_result_response+0x76>
 8010cb0:	b1ce      	cbz	r6, 8010ce6 <rcl_action_take_result_response+0x76>
 8010cb2:	6820      	ldr	r0, [r4, #0]
 8010cb4:	4632      	mov	r2, r6
 8010cb6:	4629      	mov	r1, r5
 8010cb8:	3008      	adds	r0, #8
 8010cba:	f7fe f9cd 	bl	800f058 <rcl_take_response>
 8010cbe:	b148      	cbz	r0, 8010cd4 <rcl_action_take_result_response+0x64>
 8010cc0:	280a      	cmp	r0, #10
 8010cc2:	d007      	beq.n	8010cd4 <rcl_action_take_result_response+0x64>
 8010cc4:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010cc8:	f640 0337 	movw	r3, #2103	; 0x837
 8010ccc:	4290      	cmp	r0, r2
 8010cce:	bf0c      	ite	eq
 8010cd0:	4618      	moveq	r0, r3
 8010cd2:	2001      	movne	r0, #1
 8010cd4:	bd70      	pop	{r4, r5, r6, pc}
 8010cd6:	f7f9 ff57 	bl	800ab88 <rcutils_reset_error>
 8010cda:	f640 0036 	movw	r0, #2102	; 0x836
 8010cde:	bd70      	pop	{r4, r5, r6, pc}
 8010ce0:	f640 0036 	movw	r0, #2102	; 0x836
 8010ce4:	bd70      	pop	{r4, r5, r6, pc}
 8010ce6:	200b      	movs	r0, #11
 8010ce8:	bd70      	pop	{r4, r5, r6, pc}
 8010cea:	f640 0036 	movw	r0, #2102	; 0x836
 8010cee:	4770      	bx	lr

08010cf0 <rcl_action_take_cancel_response>:
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d03a      	beq.n	8010d6a <rcl_action_take_cancel_response+0x7a>
 8010cf4:	b570      	push	{r4, r5, r6, lr}
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	6800      	ldr	r0, [r0, #0]
 8010cfa:	b388      	cbz	r0, 8010d60 <rcl_action_take_cancel_response+0x70>
 8010cfc:	460d      	mov	r5, r1
 8010cfe:	4616      	mov	r6, r2
 8010d00:	f7fe f9f2 	bl	800f0e8 <rcl_client_is_valid>
 8010d04:	b338      	cbz	r0, 8010d56 <rcl_action_take_cancel_response+0x66>
 8010d06:	6820      	ldr	r0, [r4, #0]
 8010d08:	3004      	adds	r0, #4
 8010d0a:	f7fe f9ed 	bl	800f0e8 <rcl_client_is_valid>
 8010d0e:	b310      	cbz	r0, 8010d56 <rcl_action_take_cancel_response+0x66>
 8010d10:	6820      	ldr	r0, [r4, #0]
 8010d12:	3008      	adds	r0, #8
 8010d14:	f7fe f9e8 	bl	800f0e8 <rcl_client_is_valid>
 8010d18:	b1e8      	cbz	r0, 8010d56 <rcl_action_take_cancel_response+0x66>
 8010d1a:	6820      	ldr	r0, [r4, #0]
 8010d1c:	300c      	adds	r0, #12
 8010d1e:	f7f8 ff65 	bl	8009bec <rcl_subscription_is_valid>
 8010d22:	b1c0      	cbz	r0, 8010d56 <rcl_action_take_cancel_response+0x66>
 8010d24:	6820      	ldr	r0, [r4, #0]
 8010d26:	3010      	adds	r0, #16
 8010d28:	f7f8 ff60 	bl	8009bec <rcl_subscription_is_valid>
 8010d2c:	b198      	cbz	r0, 8010d56 <rcl_action_take_cancel_response+0x66>
 8010d2e:	b1d5      	cbz	r5, 8010d66 <rcl_action_take_cancel_response+0x76>
 8010d30:	b1ce      	cbz	r6, 8010d66 <rcl_action_take_cancel_response+0x76>
 8010d32:	6820      	ldr	r0, [r4, #0]
 8010d34:	4632      	mov	r2, r6
 8010d36:	4629      	mov	r1, r5
 8010d38:	3004      	adds	r0, #4
 8010d3a:	f7fe f98d 	bl	800f058 <rcl_take_response>
 8010d3e:	b148      	cbz	r0, 8010d54 <rcl_action_take_cancel_response+0x64>
 8010d40:	280a      	cmp	r0, #10
 8010d42:	d007      	beq.n	8010d54 <rcl_action_take_cancel_response+0x64>
 8010d44:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010d48:	f640 0337 	movw	r3, #2103	; 0x837
 8010d4c:	4290      	cmp	r0, r2
 8010d4e:	bf0c      	ite	eq
 8010d50:	4618      	moveq	r0, r3
 8010d52:	2001      	movne	r0, #1
 8010d54:	bd70      	pop	{r4, r5, r6, pc}
 8010d56:	f7f9 ff17 	bl	800ab88 <rcutils_reset_error>
 8010d5a:	f640 0036 	movw	r0, #2102	; 0x836
 8010d5e:	bd70      	pop	{r4, r5, r6, pc}
 8010d60:	f640 0036 	movw	r0, #2102	; 0x836
 8010d64:	bd70      	pop	{r4, r5, r6, pc}
 8010d66:	200b      	movs	r0, #11
 8010d68:	bd70      	pop	{r4, r5, r6, pc}
 8010d6a:	f640 0036 	movw	r0, #2102	; 0x836
 8010d6e:	4770      	bx	lr

08010d70 <rcl_action_take_feedback>:
 8010d70:	2800      	cmp	r0, #0
 8010d72:	d038      	beq.n	8010de6 <rcl_action_take_feedback+0x76>
 8010d74:	b530      	push	{r4, r5, lr}
 8010d76:	4604      	mov	r4, r0
 8010d78:	6800      	ldr	r0, [r0, #0]
 8010d7a:	b091      	sub	sp, #68	; 0x44
 8010d7c:	b378      	cbz	r0, 8010dde <rcl_action_take_feedback+0x6e>
 8010d7e:	460d      	mov	r5, r1
 8010d80:	f7fe f9b2 	bl	800f0e8 <rcl_client_is_valid>
 8010d84:	b328      	cbz	r0, 8010dd2 <rcl_action_take_feedback+0x62>
 8010d86:	6820      	ldr	r0, [r4, #0]
 8010d88:	3004      	adds	r0, #4
 8010d8a:	f7fe f9ad 	bl	800f0e8 <rcl_client_is_valid>
 8010d8e:	b300      	cbz	r0, 8010dd2 <rcl_action_take_feedback+0x62>
 8010d90:	6820      	ldr	r0, [r4, #0]
 8010d92:	3008      	adds	r0, #8
 8010d94:	f7fe f9a8 	bl	800f0e8 <rcl_client_is_valid>
 8010d98:	b1d8      	cbz	r0, 8010dd2 <rcl_action_take_feedback+0x62>
 8010d9a:	6820      	ldr	r0, [r4, #0]
 8010d9c:	300c      	adds	r0, #12
 8010d9e:	f7f8 ff25 	bl	8009bec <rcl_subscription_is_valid>
 8010da2:	b1b0      	cbz	r0, 8010dd2 <rcl_action_take_feedback+0x62>
 8010da4:	6820      	ldr	r0, [r4, #0]
 8010da6:	3010      	adds	r0, #16
 8010da8:	f7f8 ff20 	bl	8009bec <rcl_subscription_is_valid>
 8010dac:	b188      	cbz	r0, 8010dd2 <rcl_action_take_feedback+0x62>
 8010dae:	b1ed      	cbz	r5, 8010dec <rcl_action_take_feedback+0x7c>
 8010db0:	6820      	ldr	r0, [r4, #0]
 8010db2:	2300      	movs	r3, #0
 8010db4:	466a      	mov	r2, sp
 8010db6:	4629      	mov	r1, r5
 8010db8:	300c      	adds	r0, #12
 8010dba:	f7f8 feb9 	bl	8009b30 <rcl_take>
 8010dbe:	b160      	cbz	r0, 8010dda <rcl_action_take_feedback+0x6a>
 8010dc0:	f240 1391 	movw	r3, #401	; 0x191
 8010dc4:	4298      	cmp	r0, r3
 8010dc6:	d014      	beq.n	8010df2 <rcl_action_take_feedback+0x82>
 8010dc8:	280a      	cmp	r0, #10
 8010dca:	bf18      	it	ne
 8010dcc:	2001      	movne	r0, #1
 8010dce:	b011      	add	sp, #68	; 0x44
 8010dd0:	bd30      	pop	{r4, r5, pc}
 8010dd2:	f7f9 fed9 	bl	800ab88 <rcutils_reset_error>
 8010dd6:	f640 0036 	movw	r0, #2102	; 0x836
 8010dda:	b011      	add	sp, #68	; 0x44
 8010ddc:	bd30      	pop	{r4, r5, pc}
 8010dde:	f640 0036 	movw	r0, #2102	; 0x836
 8010de2:	b011      	add	sp, #68	; 0x44
 8010de4:	bd30      	pop	{r4, r5, pc}
 8010de6:	f640 0036 	movw	r0, #2102	; 0x836
 8010dea:	4770      	bx	lr
 8010dec:	200b      	movs	r0, #11
 8010dee:	b011      	add	sp, #68	; 0x44
 8010df0:	bd30      	pop	{r4, r5, pc}
 8010df2:	f640 0037 	movw	r0, #2103	; 0x837
 8010df6:	e7f0      	b.n	8010dda <rcl_action_take_feedback+0x6a>

08010df8 <rcl_action_wait_set_add_action_client>:
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d048      	beq.n	8010e8e <rcl_action_wait_set_add_action_client+0x96>
 8010dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfe:	460c      	mov	r4, r1
 8010e00:	2900      	cmp	r1, #0
 8010e02:	d03c      	beq.n	8010e7e <rcl_action_wait_set_add_action_client+0x86>
 8010e04:	4605      	mov	r5, r0
 8010e06:	6808      	ldr	r0, [r1, #0]
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	d038      	beq.n	8010e7e <rcl_action_wait_set_add_action_client+0x86>
 8010e0c:	4617      	mov	r7, r2
 8010e0e:	461e      	mov	r6, r3
 8010e10:	f7fe f96a 	bl	800f0e8 <rcl_client_is_valid>
 8010e14:	b3b0      	cbz	r0, 8010e84 <rcl_action_wait_set_add_action_client+0x8c>
 8010e16:	6820      	ldr	r0, [r4, #0]
 8010e18:	3004      	adds	r0, #4
 8010e1a:	f7fe f965 	bl	800f0e8 <rcl_client_is_valid>
 8010e1e:	b388      	cbz	r0, 8010e84 <rcl_action_wait_set_add_action_client+0x8c>
 8010e20:	6820      	ldr	r0, [r4, #0]
 8010e22:	3008      	adds	r0, #8
 8010e24:	f7fe f960 	bl	800f0e8 <rcl_client_is_valid>
 8010e28:	b360      	cbz	r0, 8010e84 <rcl_action_wait_set_add_action_client+0x8c>
 8010e2a:	6820      	ldr	r0, [r4, #0]
 8010e2c:	300c      	adds	r0, #12
 8010e2e:	f7f8 fedd 	bl	8009bec <rcl_subscription_is_valid>
 8010e32:	b338      	cbz	r0, 8010e84 <rcl_action_wait_set_add_action_client+0x8c>
 8010e34:	6820      	ldr	r0, [r4, #0]
 8010e36:	3010      	adds	r0, #16
 8010e38:	f7f8 fed8 	bl	8009bec <rcl_subscription_is_valid>
 8010e3c:	b310      	cbz	r0, 8010e84 <rcl_action_wait_set_add_action_client+0x8c>
 8010e3e:	6821      	ldr	r1, [r4, #0]
 8010e40:	4628      	mov	r0, r5
 8010e42:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8010e46:	f7ff fccf 	bl	80107e8 <rcl_wait_set_add_client>
 8010e4a:	b9b8      	cbnz	r0, 8010e7c <rcl_action_wait_set_add_action_client+0x84>
 8010e4c:	6821      	ldr	r1, [r4, #0]
 8010e4e:	4628      	mov	r0, r5
 8010e50:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8010e54:	3104      	adds	r1, #4
 8010e56:	f7ff fcc7 	bl	80107e8 <rcl_wait_set_add_client>
 8010e5a:	b978      	cbnz	r0, 8010e7c <rcl_action_wait_set_add_action_client+0x84>
 8010e5c:	6821      	ldr	r1, [r4, #0]
 8010e5e:	4628      	mov	r0, r5
 8010e60:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8010e64:	3108      	adds	r1, #8
 8010e66:	f7ff fcbf 	bl	80107e8 <rcl_wait_set_add_client>
 8010e6a:	b938      	cbnz	r0, 8010e7c <rcl_action_wait_set_add_action_client+0x84>
 8010e6c:	6821      	ldr	r1, [r4, #0]
 8010e6e:	4628      	mov	r0, r5
 8010e70:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8010e74:	310c      	adds	r1, #12
 8010e76:	f7ff f96f 	bl	8010158 <rcl_wait_set_add_subscription>
 8010e7a:	b158      	cbz	r0, 8010e94 <rcl_action_wait_set_add_action_client+0x9c>
 8010e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e7e:	f640 0036 	movw	r0, #2102	; 0x836
 8010e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e84:	f7f9 fe80 	bl	800ab88 <rcutils_reset_error>
 8010e88:	f640 0036 	movw	r0, #2102	; 0x836
 8010e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e8e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010e92:	4770      	bx	lr
 8010e94:	6821      	ldr	r1, [r4, #0]
 8010e96:	4628      	mov	r0, r5
 8010e98:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8010e9c:	3110      	adds	r1, #16
 8010e9e:	f7ff f95b 	bl	8010158 <rcl_wait_set_add_subscription>
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	d1ea      	bne.n	8010e7c <rcl_action_wait_set_add_action_client+0x84>
 8010ea6:	b11f      	cbz	r7, 8010eb0 <rcl_action_wait_set_add_action_client+0xb8>
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8010eae:	603b      	str	r3, [r7, #0]
 8010eb0:	2e00      	cmp	r6, #0
 8010eb2:	d0e3      	beq.n	8010e7c <rcl_action_wait_set_add_action_client+0x84>
 8010eb4:	6823      	ldr	r3, [r4, #0]
 8010eb6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8010eba:	6033      	str	r3, [r6, #0]
 8010ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ebe:	bf00      	nop

08010ec0 <rcl_action_client_wait_set_get_entities_ready>:
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	f000 808d 	beq.w	8010fe0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8010ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eca:	460c      	mov	r4, r1
 8010ecc:	2900      	cmp	r1, #0
 8010ece:	d077      	beq.n	8010fc0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010ed0:	4605      	mov	r5, r0
 8010ed2:	6808      	ldr	r0, [r1, #0]
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	d073      	beq.n	8010fc0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010ed8:	4616      	mov	r6, r2
 8010eda:	461f      	mov	r7, r3
 8010edc:	f7fe f904 	bl	800f0e8 <rcl_client_is_valid>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d071      	beq.n	8010fc8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010ee4:	6820      	ldr	r0, [r4, #0]
 8010ee6:	3004      	adds	r0, #4
 8010ee8:	f7fe f8fe 	bl	800f0e8 <rcl_client_is_valid>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d06b      	beq.n	8010fc8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010ef0:	6820      	ldr	r0, [r4, #0]
 8010ef2:	3008      	adds	r0, #8
 8010ef4:	f7fe f8f8 	bl	800f0e8 <rcl_client_is_valid>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d065      	beq.n	8010fc8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010efc:	6820      	ldr	r0, [r4, #0]
 8010efe:	300c      	adds	r0, #12
 8010f00:	f7f8 fe74 	bl	8009bec <rcl_subscription_is_valid>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d05f      	beq.n	8010fc8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010f08:	6820      	ldr	r0, [r4, #0]
 8010f0a:	3010      	adds	r0, #16
 8010f0c:	f7f8 fe6e 	bl	8009bec <rcl_subscription_is_valid>
 8010f10:	2800      	cmp	r0, #0
 8010f12:	d059      	beq.n	8010fc8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010f14:	2e00      	cmp	r6, #0
 8010f16:	d060      	beq.n	8010fda <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010f18:	2f00      	cmp	r7, #0
 8010f1a:	d05e      	beq.n	8010fda <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010f1c:	9b06      	ldr	r3, [sp, #24]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d05b      	beq.n	8010fda <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010f22:	9b07      	ldr	r3, [sp, #28]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d058      	beq.n	8010fda <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010f28:	9b08      	ldr	r3, [sp, #32]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d055      	beq.n	8010fda <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010f2e:	6823      	ldr	r3, [r4, #0]
 8010f30:	686a      	ldr	r2, [r5, #4]
 8010f32:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 8010f36:	428a      	cmp	r2, r1
 8010f38:	d94c      	bls.n	8010fd4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010f3a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8010f3e:	4282      	cmp	r2, r0
 8010f40:	d948      	bls.n	8010fd4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010f42:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 8010f46:	69ea      	ldr	r2, [r5, #28]
 8010f48:	42a2      	cmp	r2, r4
 8010f4a:	d943      	bls.n	8010fd4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010f4c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8010f50:	4562      	cmp	r2, ip
 8010f52:	d93f      	bls.n	8010fd4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010f54:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8010f58:	4572      	cmp	r2, lr
 8010f5a:	d93b      	bls.n	8010fd4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010f5c:	69aa      	ldr	r2, [r5, #24]
 8010f5e:	682d      	ldr	r5, [r5, #0]
 8010f60:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8010f64:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8010f68:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8010f6c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8010f70:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8010f74:	f103 0c0c 	add.w	ip, r3, #12
 8010f78:	eba5 050c 	sub.w	r5, r5, ip
 8010f7c:	fab5 f585 	clz	r5, r5
 8010f80:	096d      	lsrs	r5, r5, #5
 8010f82:	7035      	strb	r5, [r6, #0]
 8010f84:	f103 0510 	add.w	r5, r3, #16
 8010f88:	1b64      	subs	r4, r4, r5
 8010f8a:	fab4 f484 	clz	r4, r4
 8010f8e:	0964      	lsrs	r4, r4, #5
 8010f90:	703c      	strb	r4, [r7, #0]
 8010f92:	eba3 0008 	sub.w	r0, r3, r8
 8010f96:	1d1c      	adds	r4, r3, #4
 8010f98:	3308      	adds	r3, #8
 8010f9a:	1ad3      	subs	r3, r2, r3
 8010f9c:	fab0 f080 	clz	r0, r0
 8010fa0:	9a06      	ldr	r2, [sp, #24]
 8010fa2:	0940      	lsrs	r0, r0, #5
 8010fa4:	1b09      	subs	r1, r1, r4
 8010fa6:	7010      	strb	r0, [r2, #0]
 8010fa8:	fab1 f181 	clz	r1, r1
 8010fac:	9a07      	ldr	r2, [sp, #28]
 8010fae:	0949      	lsrs	r1, r1, #5
 8010fb0:	7011      	strb	r1, [r2, #0]
 8010fb2:	fab3 f383 	clz	r3, r3
 8010fb6:	9a08      	ldr	r2, [sp, #32]
 8010fb8:	095b      	lsrs	r3, r3, #5
 8010fba:	2000      	movs	r0, #0
 8010fbc:	7013      	strb	r3, [r2, #0]
 8010fbe:	e001      	b.n	8010fc4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8010fc0:	f640 0036 	movw	r0, #2102	; 0x836
 8010fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc8:	f7f9 fdde 	bl	800ab88 <rcutils_reset_error>
 8010fcc:	f640 0036 	movw	r0, #2102	; 0x836
 8010fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd4:	2001      	movs	r0, #1
 8010fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fda:	200b      	movs	r0, #11
 8010fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fe0:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop

08010fe8 <rcl_action_take_goal_request>:
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	d039      	beq.n	8011060 <rcl_action_take_goal_request+0x78>
 8010fec:	b570      	push	{r4, r5, r6, lr}
 8010fee:	4604      	mov	r4, r0
 8010ff0:	6800      	ldr	r0, [r0, #0]
 8010ff2:	b380      	cbz	r0, 8011056 <rcl_action_take_goal_request+0x6e>
 8010ff4:	460d      	mov	r5, r1
 8010ff6:	4616      	mov	r6, r2
 8010ff8:	f7fe fddc 	bl	800fbb4 <rcl_service_is_valid>
 8010ffc:	b330      	cbz	r0, 801104c <rcl_action_take_goal_request+0x64>
 8010ffe:	6820      	ldr	r0, [r4, #0]
 8011000:	3004      	adds	r0, #4
 8011002:	f7fe fdd7 	bl	800fbb4 <rcl_service_is_valid>
 8011006:	b308      	cbz	r0, 801104c <rcl_action_take_goal_request+0x64>
 8011008:	6820      	ldr	r0, [r4, #0]
 801100a:	3008      	adds	r0, #8
 801100c:	f7fe fdd2 	bl	800fbb4 <rcl_service_is_valid>
 8011010:	b1e0      	cbz	r0, 801104c <rcl_action_take_goal_request+0x64>
 8011012:	6820      	ldr	r0, [r4, #0]
 8011014:	300c      	adds	r0, #12
 8011016:	f7f8 fc39 	bl	800988c <rcl_publisher_is_valid>
 801101a:	b1b8      	cbz	r0, 801104c <rcl_action_take_goal_request+0x64>
 801101c:	6820      	ldr	r0, [r4, #0]
 801101e:	3010      	adds	r0, #16
 8011020:	f7f8 fc34 	bl	800988c <rcl_publisher_is_valid>
 8011024:	b190      	cbz	r0, 801104c <rcl_action_take_goal_request+0x64>
 8011026:	b1cd      	cbz	r5, 801105c <rcl_action_take_goal_request+0x74>
 8011028:	b1c6      	cbz	r6, 801105c <rcl_action_take_goal_request+0x74>
 801102a:	6820      	ldr	r0, [r4, #0]
 801102c:	4632      	mov	r2, r6
 801102e:	4629      	mov	r1, r5
 8011030:	f7fe fd68 	bl	800fb04 <rcl_take_request>
 8011034:	b148      	cbz	r0, 801104a <rcl_action_take_goal_request+0x62>
 8011036:	280a      	cmp	r0, #10
 8011038:	d007      	beq.n	801104a <rcl_action_take_goal_request+0x62>
 801103a:	f240 2259 	movw	r2, #601	; 0x259
 801103e:	f640 0399 	movw	r3, #2201	; 0x899
 8011042:	4290      	cmp	r0, r2
 8011044:	bf0c      	ite	eq
 8011046:	4618      	moveq	r0, r3
 8011048:	2001      	movne	r0, #1
 801104a:	bd70      	pop	{r4, r5, r6, pc}
 801104c:	f7f9 fd9c 	bl	800ab88 <rcutils_reset_error>
 8011050:	f640 0098 	movw	r0, #2200	; 0x898
 8011054:	bd70      	pop	{r4, r5, r6, pc}
 8011056:	f640 0098 	movw	r0, #2200	; 0x898
 801105a:	bd70      	pop	{r4, r5, r6, pc}
 801105c:	200b      	movs	r0, #11
 801105e:	bd70      	pop	{r4, r5, r6, pc}
 8011060:	f640 0098 	movw	r0, #2200	; 0x898
 8011064:	4770      	bx	lr
 8011066:	bf00      	nop

08011068 <rcl_action_send_goal_response>:
 8011068:	b388      	cbz	r0, 80110ce <rcl_action_send_goal_response+0x66>
 801106a:	b570      	push	{r4, r5, r6, lr}
 801106c:	4604      	mov	r4, r0
 801106e:	6800      	ldr	r0, [r0, #0]
 8011070:	b340      	cbz	r0, 80110c4 <rcl_action_send_goal_response+0x5c>
 8011072:	460d      	mov	r5, r1
 8011074:	4616      	mov	r6, r2
 8011076:	f7fe fd9d 	bl	800fbb4 <rcl_service_is_valid>
 801107a:	b1f0      	cbz	r0, 80110ba <rcl_action_send_goal_response+0x52>
 801107c:	6820      	ldr	r0, [r4, #0]
 801107e:	3004      	adds	r0, #4
 8011080:	f7fe fd98 	bl	800fbb4 <rcl_service_is_valid>
 8011084:	b1c8      	cbz	r0, 80110ba <rcl_action_send_goal_response+0x52>
 8011086:	6820      	ldr	r0, [r4, #0]
 8011088:	3008      	adds	r0, #8
 801108a:	f7fe fd93 	bl	800fbb4 <rcl_service_is_valid>
 801108e:	b1a0      	cbz	r0, 80110ba <rcl_action_send_goal_response+0x52>
 8011090:	6820      	ldr	r0, [r4, #0]
 8011092:	300c      	adds	r0, #12
 8011094:	f7f8 fbfa 	bl	800988c <rcl_publisher_is_valid>
 8011098:	b178      	cbz	r0, 80110ba <rcl_action_send_goal_response+0x52>
 801109a:	6820      	ldr	r0, [r4, #0]
 801109c:	3010      	adds	r0, #16
 801109e:	f7f8 fbf5 	bl	800988c <rcl_publisher_is_valid>
 80110a2:	b150      	cbz	r0, 80110ba <rcl_action_send_goal_response+0x52>
 80110a4:	b18d      	cbz	r5, 80110ca <rcl_action_send_goal_response+0x62>
 80110a6:	b186      	cbz	r6, 80110ca <rcl_action_send_goal_response+0x62>
 80110a8:	6820      	ldr	r0, [r4, #0]
 80110aa:	4632      	mov	r2, r6
 80110ac:	4629      	mov	r1, r5
 80110ae:	f7fe fd69 	bl	800fb84 <rcl_send_response>
 80110b2:	3800      	subs	r0, #0
 80110b4:	bf18      	it	ne
 80110b6:	2001      	movne	r0, #1
 80110b8:	bd70      	pop	{r4, r5, r6, pc}
 80110ba:	f7f9 fd65 	bl	800ab88 <rcutils_reset_error>
 80110be:	f640 0098 	movw	r0, #2200	; 0x898
 80110c2:	bd70      	pop	{r4, r5, r6, pc}
 80110c4:	f640 0098 	movw	r0, #2200	; 0x898
 80110c8:	bd70      	pop	{r4, r5, r6, pc}
 80110ca:	200b      	movs	r0, #11
 80110cc:	bd70      	pop	{r4, r5, r6, pc}
 80110ce:	f640 0098 	movw	r0, #2200	; 0x898
 80110d2:	4770      	bx	lr

080110d4 <rcl_action_take_result_request>:
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d03a      	beq.n	801114e <rcl_action_take_result_request+0x7a>
 80110d8:	b570      	push	{r4, r5, r6, lr}
 80110da:	4604      	mov	r4, r0
 80110dc:	6800      	ldr	r0, [r0, #0]
 80110de:	b388      	cbz	r0, 8011144 <rcl_action_take_result_request+0x70>
 80110e0:	460d      	mov	r5, r1
 80110e2:	4616      	mov	r6, r2
 80110e4:	f7fe fd66 	bl	800fbb4 <rcl_service_is_valid>
 80110e8:	b338      	cbz	r0, 801113a <rcl_action_take_result_request+0x66>
 80110ea:	6820      	ldr	r0, [r4, #0]
 80110ec:	3004      	adds	r0, #4
 80110ee:	f7fe fd61 	bl	800fbb4 <rcl_service_is_valid>
 80110f2:	b310      	cbz	r0, 801113a <rcl_action_take_result_request+0x66>
 80110f4:	6820      	ldr	r0, [r4, #0]
 80110f6:	3008      	adds	r0, #8
 80110f8:	f7fe fd5c 	bl	800fbb4 <rcl_service_is_valid>
 80110fc:	b1e8      	cbz	r0, 801113a <rcl_action_take_result_request+0x66>
 80110fe:	6820      	ldr	r0, [r4, #0]
 8011100:	300c      	adds	r0, #12
 8011102:	f7f8 fbc3 	bl	800988c <rcl_publisher_is_valid>
 8011106:	b1c0      	cbz	r0, 801113a <rcl_action_take_result_request+0x66>
 8011108:	6820      	ldr	r0, [r4, #0]
 801110a:	3010      	adds	r0, #16
 801110c:	f7f8 fbbe 	bl	800988c <rcl_publisher_is_valid>
 8011110:	b198      	cbz	r0, 801113a <rcl_action_take_result_request+0x66>
 8011112:	b1d5      	cbz	r5, 801114a <rcl_action_take_result_request+0x76>
 8011114:	b1ce      	cbz	r6, 801114a <rcl_action_take_result_request+0x76>
 8011116:	6820      	ldr	r0, [r4, #0]
 8011118:	4632      	mov	r2, r6
 801111a:	4629      	mov	r1, r5
 801111c:	3008      	adds	r0, #8
 801111e:	f7fe fcf1 	bl	800fb04 <rcl_take_request>
 8011122:	b148      	cbz	r0, 8011138 <rcl_action_take_result_request+0x64>
 8011124:	280a      	cmp	r0, #10
 8011126:	d007      	beq.n	8011138 <rcl_action_take_result_request+0x64>
 8011128:	f240 2259 	movw	r2, #601	; 0x259
 801112c:	f640 0399 	movw	r3, #2201	; 0x899
 8011130:	4290      	cmp	r0, r2
 8011132:	bf0c      	ite	eq
 8011134:	4618      	moveq	r0, r3
 8011136:	2001      	movne	r0, #1
 8011138:	bd70      	pop	{r4, r5, r6, pc}
 801113a:	f7f9 fd25 	bl	800ab88 <rcutils_reset_error>
 801113e:	f640 0098 	movw	r0, #2200	; 0x898
 8011142:	bd70      	pop	{r4, r5, r6, pc}
 8011144:	f640 0098 	movw	r0, #2200	; 0x898
 8011148:	bd70      	pop	{r4, r5, r6, pc}
 801114a:	200b      	movs	r0, #11
 801114c:	bd70      	pop	{r4, r5, r6, pc}
 801114e:	f640 0098 	movw	r0, #2200	; 0x898
 8011152:	4770      	bx	lr

08011154 <rcl_action_take_cancel_request>:
 8011154:	2800      	cmp	r0, #0
 8011156:	d03a      	beq.n	80111ce <rcl_action_take_cancel_request+0x7a>
 8011158:	b570      	push	{r4, r5, r6, lr}
 801115a:	4604      	mov	r4, r0
 801115c:	6800      	ldr	r0, [r0, #0]
 801115e:	b388      	cbz	r0, 80111c4 <rcl_action_take_cancel_request+0x70>
 8011160:	460d      	mov	r5, r1
 8011162:	4616      	mov	r6, r2
 8011164:	f7fe fd26 	bl	800fbb4 <rcl_service_is_valid>
 8011168:	b338      	cbz	r0, 80111ba <rcl_action_take_cancel_request+0x66>
 801116a:	6820      	ldr	r0, [r4, #0]
 801116c:	3004      	adds	r0, #4
 801116e:	f7fe fd21 	bl	800fbb4 <rcl_service_is_valid>
 8011172:	b310      	cbz	r0, 80111ba <rcl_action_take_cancel_request+0x66>
 8011174:	6820      	ldr	r0, [r4, #0]
 8011176:	3008      	adds	r0, #8
 8011178:	f7fe fd1c 	bl	800fbb4 <rcl_service_is_valid>
 801117c:	b1e8      	cbz	r0, 80111ba <rcl_action_take_cancel_request+0x66>
 801117e:	6820      	ldr	r0, [r4, #0]
 8011180:	300c      	adds	r0, #12
 8011182:	f7f8 fb83 	bl	800988c <rcl_publisher_is_valid>
 8011186:	b1c0      	cbz	r0, 80111ba <rcl_action_take_cancel_request+0x66>
 8011188:	6820      	ldr	r0, [r4, #0]
 801118a:	3010      	adds	r0, #16
 801118c:	f7f8 fb7e 	bl	800988c <rcl_publisher_is_valid>
 8011190:	b198      	cbz	r0, 80111ba <rcl_action_take_cancel_request+0x66>
 8011192:	b1d5      	cbz	r5, 80111ca <rcl_action_take_cancel_request+0x76>
 8011194:	b1ce      	cbz	r6, 80111ca <rcl_action_take_cancel_request+0x76>
 8011196:	6820      	ldr	r0, [r4, #0]
 8011198:	4632      	mov	r2, r6
 801119a:	4629      	mov	r1, r5
 801119c:	3004      	adds	r0, #4
 801119e:	f7fe fcb1 	bl	800fb04 <rcl_take_request>
 80111a2:	b148      	cbz	r0, 80111b8 <rcl_action_take_cancel_request+0x64>
 80111a4:	280a      	cmp	r0, #10
 80111a6:	d007      	beq.n	80111b8 <rcl_action_take_cancel_request+0x64>
 80111a8:	f240 2259 	movw	r2, #601	; 0x259
 80111ac:	f640 0399 	movw	r3, #2201	; 0x899
 80111b0:	4290      	cmp	r0, r2
 80111b2:	bf0c      	ite	eq
 80111b4:	4618      	moveq	r0, r3
 80111b6:	2001      	movne	r0, #1
 80111b8:	bd70      	pop	{r4, r5, r6, pc}
 80111ba:	f7f9 fce5 	bl	800ab88 <rcutils_reset_error>
 80111be:	f640 0098 	movw	r0, #2200	; 0x898
 80111c2:	bd70      	pop	{r4, r5, r6, pc}
 80111c4:	f640 0098 	movw	r0, #2200	; 0x898
 80111c8:	bd70      	pop	{r4, r5, r6, pc}
 80111ca:	200b      	movs	r0, #11
 80111cc:	bd70      	pop	{r4, r5, r6, pc}
 80111ce:	f640 0098 	movw	r0, #2200	; 0x898
 80111d2:	4770      	bx	lr

080111d4 <rcl_action_send_cancel_response>:
 80111d4:	b390      	cbz	r0, 801123c <rcl_action_send_cancel_response+0x68>
 80111d6:	b570      	push	{r4, r5, r6, lr}
 80111d8:	4604      	mov	r4, r0
 80111da:	6800      	ldr	r0, [r0, #0]
 80111dc:	b348      	cbz	r0, 8011232 <rcl_action_send_cancel_response+0x5e>
 80111de:	460d      	mov	r5, r1
 80111e0:	4616      	mov	r6, r2
 80111e2:	f7fe fce7 	bl	800fbb4 <rcl_service_is_valid>
 80111e6:	b1f8      	cbz	r0, 8011228 <rcl_action_send_cancel_response+0x54>
 80111e8:	6820      	ldr	r0, [r4, #0]
 80111ea:	3004      	adds	r0, #4
 80111ec:	f7fe fce2 	bl	800fbb4 <rcl_service_is_valid>
 80111f0:	b1d0      	cbz	r0, 8011228 <rcl_action_send_cancel_response+0x54>
 80111f2:	6820      	ldr	r0, [r4, #0]
 80111f4:	3008      	adds	r0, #8
 80111f6:	f7fe fcdd 	bl	800fbb4 <rcl_service_is_valid>
 80111fa:	b1a8      	cbz	r0, 8011228 <rcl_action_send_cancel_response+0x54>
 80111fc:	6820      	ldr	r0, [r4, #0]
 80111fe:	300c      	adds	r0, #12
 8011200:	f7f8 fb44 	bl	800988c <rcl_publisher_is_valid>
 8011204:	b180      	cbz	r0, 8011228 <rcl_action_send_cancel_response+0x54>
 8011206:	6820      	ldr	r0, [r4, #0]
 8011208:	3010      	adds	r0, #16
 801120a:	f7f8 fb3f 	bl	800988c <rcl_publisher_is_valid>
 801120e:	b158      	cbz	r0, 8011228 <rcl_action_send_cancel_response+0x54>
 8011210:	b195      	cbz	r5, 8011238 <rcl_action_send_cancel_response+0x64>
 8011212:	b18e      	cbz	r6, 8011238 <rcl_action_send_cancel_response+0x64>
 8011214:	6820      	ldr	r0, [r4, #0]
 8011216:	4632      	mov	r2, r6
 8011218:	4629      	mov	r1, r5
 801121a:	3004      	adds	r0, #4
 801121c:	f7fe fcb2 	bl	800fb84 <rcl_send_response>
 8011220:	3800      	subs	r0, #0
 8011222:	bf18      	it	ne
 8011224:	2001      	movne	r0, #1
 8011226:	bd70      	pop	{r4, r5, r6, pc}
 8011228:	f7f9 fcae 	bl	800ab88 <rcutils_reset_error>
 801122c:	f640 0098 	movw	r0, #2200	; 0x898
 8011230:	bd70      	pop	{r4, r5, r6, pc}
 8011232:	f640 0098 	movw	r0, #2200	; 0x898
 8011236:	bd70      	pop	{r4, r5, r6, pc}
 8011238:	200b      	movs	r0, #11
 801123a:	bd70      	pop	{r4, r5, r6, pc}
 801123c:	f640 0098 	movw	r0, #2200	; 0x898
 8011240:	4770      	bx	lr
 8011242:	bf00      	nop

08011244 <rcl_action_wait_set_add_action_server>:
 8011244:	2800      	cmp	r0, #0
 8011246:	d04d      	beq.n	80112e4 <rcl_action_wait_set_add_action_server+0xa0>
 8011248:	b570      	push	{r4, r5, r6, lr}
 801124a:	460c      	mov	r4, r1
 801124c:	b159      	cbz	r1, 8011266 <rcl_action_wait_set_add_action_server+0x22>
 801124e:	4605      	mov	r5, r0
 8011250:	6808      	ldr	r0, [r1, #0]
 8011252:	b140      	cbz	r0, 8011266 <rcl_action_wait_set_add_action_server+0x22>
 8011254:	4616      	mov	r6, r2
 8011256:	f7fe fcad 	bl	800fbb4 <rcl_service_is_valid>
 801125a:	b120      	cbz	r0, 8011266 <rcl_action_wait_set_add_action_server+0x22>
 801125c:	6820      	ldr	r0, [r4, #0]
 801125e:	3004      	adds	r0, #4
 8011260:	f7fe fca8 	bl	800fbb4 <rcl_service_is_valid>
 8011264:	b910      	cbnz	r0, 801126c <rcl_action_wait_set_add_action_server+0x28>
 8011266:	f640 0098 	movw	r0, #2200	; 0x898
 801126a:	bd70      	pop	{r4, r5, r6, pc}
 801126c:	6820      	ldr	r0, [r4, #0]
 801126e:	3008      	adds	r0, #8
 8011270:	f7fe fca0 	bl	800fbb4 <rcl_service_is_valid>
 8011274:	2800      	cmp	r0, #0
 8011276:	d0f6      	beq.n	8011266 <rcl_action_wait_set_add_action_server+0x22>
 8011278:	6820      	ldr	r0, [r4, #0]
 801127a:	300c      	adds	r0, #12
 801127c:	f7f8 fb1e 	bl	80098bc <rcl_publisher_is_valid_except_context>
 8011280:	2800      	cmp	r0, #0
 8011282:	d0f0      	beq.n	8011266 <rcl_action_wait_set_add_action_server+0x22>
 8011284:	6820      	ldr	r0, [r4, #0]
 8011286:	3010      	adds	r0, #16
 8011288:	f7f8 fb18 	bl	80098bc <rcl_publisher_is_valid_except_context>
 801128c:	2800      	cmp	r0, #0
 801128e:	d0ea      	beq.n	8011266 <rcl_action_wait_set_add_action_server+0x22>
 8011290:	6821      	ldr	r1, [r4, #0]
 8011292:	4628      	mov	r0, r5
 8011294:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8011298:	f7ff fad2 	bl	8010840 <rcl_wait_set_add_service>
 801129c:	2800      	cmp	r0, #0
 801129e:	d1e4      	bne.n	801126a <rcl_action_wait_set_add_action_server+0x26>
 80112a0:	6821      	ldr	r1, [r4, #0]
 80112a2:	4628      	mov	r0, r5
 80112a4:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 80112a8:	3104      	adds	r1, #4
 80112aa:	f7ff fac9 	bl	8010840 <rcl_wait_set_add_service>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	d1db      	bne.n	801126a <rcl_action_wait_set_add_action_server+0x26>
 80112b2:	6821      	ldr	r1, [r4, #0]
 80112b4:	4628      	mov	r0, r5
 80112b6:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80112ba:	3108      	adds	r1, #8
 80112bc:	f7ff fac0 	bl	8010840 <rcl_wait_set_add_service>
 80112c0:	2800      	cmp	r0, #0
 80112c2:	d1d2      	bne.n	801126a <rcl_action_wait_set_add_action_server+0x26>
 80112c4:	6821      	ldr	r1, [r4, #0]
 80112c6:	4628      	mov	r0, r5
 80112c8:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80112cc:	3114      	adds	r1, #20
 80112ce:	f7ff fa5b 	bl	8010788 <rcl_wait_set_add_timer>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	d1c9      	bne.n	801126a <rcl_action_wait_set_add_action_server+0x26>
 80112d6:	2e00      	cmp	r6, #0
 80112d8:	d0c7      	beq.n	801126a <rcl_action_wait_set_add_action_server+0x26>
 80112da:	6823      	ldr	r3, [r4, #0]
 80112dc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80112e0:	6033      	str	r3, [r6, #0]
 80112e2:	bd70      	pop	{r4, r5, r6, pc}
 80112e4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop

080112ec <rcl_action_server_wait_set_get_entities_ready>:
 80112ec:	2800      	cmp	r0, #0
 80112ee:	d05a      	beq.n	80113a6 <rcl_action_server_wait_set_get_entities_ready+0xba>
 80112f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f2:	460c      	mov	r4, r1
 80112f4:	b161      	cbz	r1, 8011310 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80112f6:	4605      	mov	r5, r0
 80112f8:	6808      	ldr	r0, [r1, #0]
 80112fa:	b148      	cbz	r0, 8011310 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80112fc:	4616      	mov	r6, r2
 80112fe:	461f      	mov	r7, r3
 8011300:	f7fe fc58 	bl	800fbb4 <rcl_service_is_valid>
 8011304:	b120      	cbz	r0, 8011310 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011306:	6820      	ldr	r0, [r4, #0]
 8011308:	3004      	adds	r0, #4
 801130a:	f7fe fc53 	bl	800fbb4 <rcl_service_is_valid>
 801130e:	b910      	cbnz	r0, 8011316 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8011310:	f640 0098 	movw	r0, #2200	; 0x898
 8011314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011316:	6820      	ldr	r0, [r4, #0]
 8011318:	3008      	adds	r0, #8
 801131a:	f7fe fc4b 	bl	800fbb4 <rcl_service_is_valid>
 801131e:	2800      	cmp	r0, #0
 8011320:	d0f6      	beq.n	8011310 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011322:	6820      	ldr	r0, [r4, #0]
 8011324:	300c      	adds	r0, #12
 8011326:	f7f8 fac9 	bl	80098bc <rcl_publisher_is_valid_except_context>
 801132a:	2800      	cmp	r0, #0
 801132c:	d0f0      	beq.n	8011310 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801132e:	6820      	ldr	r0, [r4, #0]
 8011330:	3010      	adds	r0, #16
 8011332:	f7f8 fac3 	bl	80098bc <rcl_publisher_is_valid_except_context>
 8011336:	2800      	cmp	r0, #0
 8011338:	d0ea      	beq.n	8011310 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801133a:	b3be      	cbz	r6, 80113ac <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801133c:	b3b7      	cbz	r7, 80113ac <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801133e:	9b06      	ldr	r3, [sp, #24]
 8011340:	b3a3      	cbz	r3, 80113ac <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011342:	9b07      	ldr	r3, [sp, #28]
 8011344:	b393      	cbz	r3, 80113ac <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011346:	6821      	ldr	r1, [r4, #0]
 8011348:	692a      	ldr	r2, [r5, #16]
 801134a:	6a2c      	ldr	r4, [r5, #32]
 801134c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 8011350:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8011354:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8011358:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 801135c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 8011360:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8011364:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011368:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801136c:	1a64      	subs	r4, r4, r1
 801136e:	fab4 f484 	clz	r4, r4
 8011372:	0964      	lsrs	r4, r4, #5
 8011374:	7034      	strb	r4, [r6, #0]
 8011376:	1d0c      	adds	r4, r1, #4
 8011378:	1b1b      	subs	r3, r3, r4
 801137a:	fab3 f383 	clz	r3, r3
 801137e:	095b      	lsrs	r3, r3, #5
 8011380:	f101 0408 	add.w	r4, r1, #8
 8011384:	703b      	strb	r3, [r7, #0]
 8011386:	f101 0314 	add.w	r3, r1, #20
 801138a:	1b01      	subs	r1, r0, r4
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	fab1 f181 	clz	r1, r1
 8011392:	9a06      	ldr	r2, [sp, #24]
 8011394:	0949      	lsrs	r1, r1, #5
 8011396:	7011      	strb	r1, [r2, #0]
 8011398:	fab3 f383 	clz	r3, r3
 801139c:	9a07      	ldr	r2, [sp, #28]
 801139e:	095b      	lsrs	r3, r3, #5
 80113a0:	2000      	movs	r0, #0
 80113a2:	7013      	strb	r3, [r2, #0]
 80113a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113a6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80113aa:	4770      	bx	lr
 80113ac:	200b      	movs	r0, #11
 80113ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113b0 <_execute_event_handler>:
 80113b0:	2002      	movs	r0, #2
 80113b2:	4770      	bx	lr

080113b4 <_cancel_goal_event_handler>:
 80113b4:	2003      	movs	r0, #3
 80113b6:	4770      	bx	lr

080113b8 <_succeed_event_handler>:
 80113b8:	2004      	movs	r0, #4
 80113ba:	4770      	bx	lr

080113bc <_abort_event_handler>:
 80113bc:	2006      	movs	r0, #6
 80113be:	4770      	bx	lr

080113c0 <_canceled_event_handler>:
 80113c0:	2005      	movs	r0, #5
 80113c2:	4770      	bx	lr

080113c4 <rcl_action_transition_goal_state>:
 80113c4:	b2c2      	uxtb	r2, r0
 80113c6:	2a06      	cmp	r2, #6
 80113c8:	d80c      	bhi.n	80113e4 <rcl_action_transition_goal_state+0x20>
 80113ca:	2904      	cmp	r1, #4
 80113cc:	d80a      	bhi.n	80113e4 <rcl_action_transition_goal_state+0x20>
 80113ce:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80113d2:	b410      	push	{r4}
 80113d4:	1853      	adds	r3, r2, r1
 80113d6:	4c06      	ldr	r4, [pc, #24]	; (80113f0 <rcl_action_transition_goal_state+0x2c>)
 80113d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80113dc:	b123      	cbz	r3, 80113e8 <rcl_action_transition_goal_state+0x24>
 80113de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113e2:	4718      	bx	r3
 80113e4:	2000      	movs	r0, #0
 80113e6:	4770      	bx	lr
 80113e8:	2000      	movs	r0, #0
 80113ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113ee:	4770      	bx	lr
 80113f0:	08016c2c 	.word	0x08016c2c

080113f4 <rcl_action_get_zero_initialized_cancel_response>:
 80113f4:	b510      	push	{r4, lr}
 80113f6:	4c07      	ldr	r4, [pc, #28]	; (8011414 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80113f8:	4686      	mov	lr, r0
 80113fa:	4684      	mov	ip, r0
 80113fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011404:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011408:	6823      	ldr	r3, [r4, #0]
 801140a:	f8cc 3000 	str.w	r3, [ip]
 801140e:	4670      	mov	r0, lr
 8011410:	bd10      	pop	{r4, pc}
 8011412:	bf00      	nop
 8011414:	08016cb8 	.word	0x08016cb8

08011418 <rclc_action_send_result_request>:
 8011418:	b1d0      	cbz	r0, 8011450 <rclc_action_send_result_request+0x38>
 801141a:	b500      	push	{lr}
 801141c:	4684      	mov	ip, r0
 801141e:	b087      	sub	sp, #28
 8011420:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011424:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011428:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801142c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011430:	f10d 0e08 	add.w	lr, sp, #8
 8011434:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011438:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801143c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8011440:	a902      	add	r1, sp, #8
 8011442:	3010      	adds	r0, #16
 8011444:	f7ff fbdc 	bl	8010c00 <rcl_action_send_result_request>
 8011448:	b920      	cbnz	r0, 8011454 <rclc_action_send_result_request+0x3c>
 801144a:	b007      	add	sp, #28
 801144c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011450:	200b      	movs	r0, #11
 8011452:	4770      	bx	lr
 8011454:	9001      	str	r0, [sp, #4]
 8011456:	f7f9 fb97 	bl	800ab88 <rcutils_reset_error>
 801145a:	9801      	ldr	r0, [sp, #4]
 801145c:	b007      	add	sp, #28
 801145e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011462:	bf00      	nop

08011464 <rclc_action_take_goal_handle>:
 8011464:	b160      	cbz	r0, 8011480 <rclc_action_take_goal_handle+0x1c>
 8011466:	6883      	ldr	r3, [r0, #8]
 8011468:	b143      	cbz	r3, 801147c <rclc_action_take_goal_handle+0x18>
 801146a:	6819      	ldr	r1, [r3, #0]
 801146c:	6081      	str	r1, [r0, #8]
 801146e:	2200      	movs	r2, #0
 8011470:	721a      	strb	r2, [r3, #8]
 8011472:	68c1      	ldr	r1, [r0, #12]
 8011474:	6019      	str	r1, [r3, #0]
 8011476:	621a      	str	r2, [r3, #32]
 8011478:	849a      	strh	r2, [r3, #36]	; 0x24
 801147a:	60c3      	str	r3, [r0, #12]
 801147c:	4618      	mov	r0, r3
 801147e:	4770      	bx	lr
 8011480:	4603      	mov	r3, r0
 8011482:	e7fb      	b.n	801147c <rclc_action_take_goal_handle+0x18>

08011484 <rclc_action_remove_used_goal_handle>:
 8011484:	b180      	cbz	r0, 80114a8 <rclc_action_remove_used_goal_handle+0x24>
 8011486:	b179      	cbz	r1, 80114a8 <rclc_action_remove_used_goal_handle+0x24>
 8011488:	68c3      	ldr	r3, [r0, #12]
 801148a:	4299      	cmp	r1, r3
 801148c:	d00d      	beq.n	80114aa <rclc_action_remove_used_goal_handle+0x26>
 801148e:	b12b      	cbz	r3, 801149c <rclc_action_remove_used_goal_handle+0x18>
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	4291      	cmp	r1, r2
 8011494:	d003      	beq.n	801149e <rclc_action_remove_used_goal_handle+0x1a>
 8011496:	4613      	mov	r3, r2
 8011498:	2b00      	cmp	r3, #0
 801149a:	d1f9      	bne.n	8011490 <rclc_action_remove_used_goal_handle+0xc>
 801149c:	4770      	bx	lr
 801149e:	680a      	ldr	r2, [r1, #0]
 80114a0:	601a      	str	r2, [r3, #0]
 80114a2:	6883      	ldr	r3, [r0, #8]
 80114a4:	600b      	str	r3, [r1, #0]
 80114a6:	6081      	str	r1, [r0, #8]
 80114a8:	4770      	bx	lr
 80114aa:	680b      	ldr	r3, [r1, #0]
 80114ac:	60c3      	str	r3, [r0, #12]
 80114ae:	e7f8      	b.n	80114a2 <rclc_action_remove_used_goal_handle+0x1e>

080114b0 <rclc_action_find_goal_handle_by_uuid>:
 80114b0:	b538      	push	{r3, r4, r5, lr}
 80114b2:	b180      	cbz	r0, 80114d6 <rclc_action_find_goal_handle_by_uuid+0x26>
 80114b4:	460d      	mov	r5, r1
 80114b6:	b181      	cbz	r1, 80114da <rclc_action_find_goal_handle_by_uuid+0x2a>
 80114b8:	68c4      	ldr	r4, [r0, #12]
 80114ba:	b914      	cbnz	r4, 80114c2 <rclc_action_find_goal_handle_by_uuid+0x12>
 80114bc:	e009      	b.n	80114d2 <rclc_action_find_goal_handle_by_uuid+0x22>
 80114be:	6824      	ldr	r4, [r4, #0]
 80114c0:	b13c      	cbz	r4, 80114d2 <rclc_action_find_goal_handle_by_uuid+0x22>
 80114c2:	f104 0009 	add.w	r0, r4, #9
 80114c6:	2210      	movs	r2, #16
 80114c8:	4629      	mov	r1, r5
 80114ca:	f003 fee3 	bl	8015294 <memcmp>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d1f5      	bne.n	80114be <rclc_action_find_goal_handle_by_uuid+0xe>
 80114d2:	4620      	mov	r0, r4
 80114d4:	bd38      	pop	{r3, r4, r5, pc}
 80114d6:	4604      	mov	r4, r0
 80114d8:	e7fb      	b.n	80114d2 <rclc_action_find_goal_handle_by_uuid+0x22>
 80114da:	460c      	mov	r4, r1
 80114dc:	e7f9      	b.n	80114d2 <rclc_action_find_goal_handle_by_uuid+0x22>
 80114de:	bf00      	nop

080114e0 <rclc_action_find_first_handle_by_status>:
 80114e0:	b140      	cbz	r0, 80114f4 <rclc_action_find_first_handle_by_status+0x14>
 80114e2:	68c0      	ldr	r0, [r0, #12]
 80114e4:	b910      	cbnz	r0, 80114ec <rclc_action_find_first_handle_by_status+0xc>
 80114e6:	e005      	b.n	80114f4 <rclc_action_find_first_handle_by_status+0x14>
 80114e8:	6800      	ldr	r0, [r0, #0]
 80114ea:	b118      	cbz	r0, 80114f4 <rclc_action_find_first_handle_by_status+0x14>
 80114ec:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80114f0:	428b      	cmp	r3, r1
 80114f2:	d1f9      	bne.n	80114e8 <rclc_action_find_first_handle_by_status+0x8>
 80114f4:	4770      	bx	lr
 80114f6:	bf00      	nop

080114f8 <rclc_action_find_first_terminated_handle>:
 80114f8:	b140      	cbz	r0, 801150c <rclc_action_find_first_terminated_handle+0x14>
 80114fa:	68c0      	ldr	r0, [r0, #12]
 80114fc:	b910      	cbnz	r0, 8011504 <rclc_action_find_first_terminated_handle+0xc>
 80114fe:	e005      	b.n	801150c <rclc_action_find_first_terminated_handle+0x14>
 8011500:	6800      	ldr	r0, [r0, #0]
 8011502:	b118      	cbz	r0, 801150c <rclc_action_find_first_terminated_handle+0x14>
 8011504:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011508:	2b03      	cmp	r3, #3
 801150a:	ddf9      	ble.n	8011500 <rclc_action_find_first_terminated_handle+0x8>
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop

08011510 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011510:	b170      	cbz	r0, 8011530 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011512:	68c0      	ldr	r0, [r0, #12]
 8011514:	b160      	cbz	r0, 8011530 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011516:	b410      	push	{r4}
 8011518:	e001      	b.n	801151e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801151a:	6800      	ldr	r0, [r0, #0]
 801151c:	b128      	cbz	r0, 801152a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801151e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8011522:	4299      	cmp	r1, r3
 8011524:	bf08      	it	eq
 8011526:	4294      	cmpeq	r4, r2
 8011528:	d1f7      	bne.n	801151a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801152a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801152e:	4770      	bx	lr
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop

08011534 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011534:	b170      	cbz	r0, 8011554 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011536:	68c0      	ldr	r0, [r0, #12]
 8011538:	b160      	cbz	r0, 8011554 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801153a:	b410      	push	{r4}
 801153c:	e001      	b.n	8011542 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801153e:	6800      	ldr	r0, [r0, #0]
 8011540:	b128      	cbz	r0, 801154e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011542:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8011546:	4299      	cmp	r1, r3
 8011548:	bf08      	it	eq
 801154a:	4294      	cmpeq	r4, r2
 801154c:	d1f7      	bne.n	801153e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801154e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011552:	4770      	bx	lr
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop

08011558 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011558:	b170      	cbz	r0, 8011578 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801155a:	68c0      	ldr	r0, [r0, #12]
 801155c:	b160      	cbz	r0, 8011578 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801155e:	b410      	push	{r4}
 8011560:	e001      	b.n	8011566 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011562:	6800      	ldr	r0, [r0, #0]
 8011564:	b128      	cbz	r0, 8011572 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011566:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801156a:	4299      	cmp	r1, r3
 801156c:	bf08      	it	eq
 801156e:	4294      	cmpeq	r4, r2
 8011570:	d1f7      	bne.n	8011562 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011576:	4770      	bx	lr
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop

0801157c <rclc_action_find_first_handle_with_goal_response>:
 801157c:	b140      	cbz	r0, 8011590 <rclc_action_find_first_handle_with_goal_response+0x14>
 801157e:	68c0      	ldr	r0, [r0, #12]
 8011580:	b910      	cbnz	r0, 8011588 <rclc_action_find_first_handle_with_goal_response+0xc>
 8011582:	e005      	b.n	8011590 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011584:	6800      	ldr	r0, [r0, #0]
 8011586:	b118      	cbz	r0, 8011590 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011588:	f890 3020 	ldrb.w	r3, [r0, #32]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d0f9      	beq.n	8011584 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop

08011594 <rclc_action_find_first_handle_with_result_response>:
 8011594:	b140      	cbz	r0, 80115a8 <rclc_action_find_first_handle_with_result_response+0x14>
 8011596:	68c0      	ldr	r0, [r0, #12]
 8011598:	b910      	cbnz	r0, 80115a0 <rclc_action_find_first_handle_with_result_response+0xc>
 801159a:	e005      	b.n	80115a8 <rclc_action_find_first_handle_with_result_response+0x14>
 801159c:	6800      	ldr	r0, [r0, #0]
 801159e:	b118      	cbz	r0, 80115a8 <rclc_action_find_first_handle_with_result_response+0x14>
 80115a0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d0f9      	beq.n	801159c <rclc_action_find_first_handle_with_result_response+0x8>
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop

080115ac <rclc_action_server_response_goal_request>:
 80115ac:	b198      	cbz	r0, 80115d6 <rclc_action_server_response_goal_request+0x2a>
 80115ae:	b510      	push	{r4, lr}
 80115b0:	6844      	ldr	r4, [r0, #4]
 80115b2:	b086      	sub	sp, #24
 80115b4:	2200      	movs	r2, #0
 80115b6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80115ba:	460b      	mov	r3, r1
 80115bc:	9205      	str	r2, [sp, #20]
 80115be:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80115c2:	aa03      	add	r2, sp, #12
 80115c4:	f104 0010 	add.w	r0, r4, #16
 80115c8:	f88d 300c 	strb.w	r3, [sp, #12]
 80115cc:	f7ff fd4c 	bl	8011068 <rcl_action_send_goal_response>
 80115d0:	b918      	cbnz	r0, 80115da <rclc_action_server_response_goal_request+0x2e>
 80115d2:	b006      	add	sp, #24
 80115d4:	bd10      	pop	{r4, pc}
 80115d6:	200b      	movs	r0, #11
 80115d8:	4770      	bx	lr
 80115da:	9001      	str	r0, [sp, #4]
 80115dc:	f7f9 fad4 	bl	800ab88 <rcutils_reset_error>
 80115e0:	9801      	ldr	r0, [sp, #4]
 80115e2:	b006      	add	sp, #24
 80115e4:	bd10      	pop	{r4, pc}
 80115e6:	bf00      	nop

080115e8 <rclc_action_server_goal_cancel_accept>:
 80115e8:	b310      	cbz	r0, 8011630 <rclc_action_server_goal_cancel_accept+0x48>
 80115ea:	b510      	push	{r4, lr}
 80115ec:	b090      	sub	sp, #64	; 0x40
 80115ee:	4604      	mov	r4, r0
 80115f0:	a806      	add	r0, sp, #24
 80115f2:	f7ff feff 	bl	80113f4 <rcl_action_get_zero_initialized_cancel_response>
 80115f6:	2300      	movs	r3, #0
 80115f8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80115fc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011600:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011604:	f88d 3018 	strb.w	r3, [sp, #24]
 8011608:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801160c:	f8cd d01c 	str.w	sp, [sp, #28]
 8011610:	46ec      	mov	ip, sp
 8011612:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011616:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8011638 <rclc_action_server_goal_cancel_accept+0x50>
 801161a:	6860      	ldr	r0, [r4, #4]
 801161c:	aa06      	add	r2, sp, #24
 801161e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8011622:	3010      	adds	r0, #16
 8011624:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011628:	f7ff fdd4 	bl	80111d4 <rcl_action_send_cancel_response>
 801162c:	b010      	add	sp, #64	; 0x40
 801162e:	bd10      	pop	{r4, pc}
 8011630:	200b      	movs	r0, #11
 8011632:	4770      	bx	lr
 8011634:	f3af 8000 	nop.w
 8011638:	00000001 	.word	0x00000001
 801163c:	00000001 	.word	0x00000001

08011640 <rclc_action_server_goal_cancel_reject>:
 8011640:	b082      	sub	sp, #8
 8011642:	b530      	push	{r4, r5, lr}
 8011644:	b08b      	sub	sp, #44	; 0x2c
 8011646:	ac0e      	add	r4, sp, #56	; 0x38
 8011648:	e884 000c 	stmia.w	r4, {r2, r3}
 801164c:	b188      	cbz	r0, 8011672 <rclc_action_server_goal_cancel_reject+0x32>
 801164e:	4604      	mov	r4, r0
 8011650:	a801      	add	r0, sp, #4
 8011652:	460d      	mov	r5, r1
 8011654:	f7ff fece 	bl	80113f4 <rcl_action_get_zero_initialized_cancel_response>
 8011658:	aa01      	add	r2, sp, #4
 801165a:	a90e      	add	r1, sp, #56	; 0x38
 801165c:	f104 0010 	add.w	r0, r4, #16
 8011660:	f88d 5004 	strb.w	r5, [sp, #4]
 8011664:	f7ff fdb6 	bl	80111d4 <rcl_action_send_cancel_response>
 8011668:	b00b      	add	sp, #44	; 0x2c
 801166a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801166e:	b002      	add	sp, #8
 8011670:	4770      	bx	lr
 8011672:	200b      	movs	r0, #11
 8011674:	b00b      	add	sp, #44	; 0x2c
 8011676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801167a:	b002      	add	sp, #8
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop

08011680 <__atomic_load_8>:
 8011680:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011684:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011688:	4a15      	ldr	r2, [pc, #84]	; (80116e0 <__atomic_load_8+0x60>)
 801168a:	4b16      	ldr	r3, [pc, #88]	; (80116e4 <__atomic_load_8+0x64>)
 801168c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011690:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011694:	fb02 f101 	mul.w	r1, r2, r1
 8011698:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801169c:	fba3 2301 	umull	r2, r3, r3, r1
 80116a0:	091b      	lsrs	r3, r3, #4
 80116a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80116a6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80116aa:	b4d0      	push	{r4, r6, r7}
 80116ac:	4c0e      	ldr	r4, [pc, #56]	; (80116e8 <__atomic_load_8+0x68>)
 80116ae:	1ac9      	subs	r1, r1, r3
 80116b0:	1862      	adds	r2, r4, r1
 80116b2:	f04f 0c01 	mov.w	ip, #1
 80116b6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80116ba:	e8c2 cf46 	strexb	r6, ip, [r2]
 80116be:	2e00      	cmp	r6, #0
 80116c0:	d1f9      	bne.n	80116b6 <__atomic_load_8+0x36>
 80116c2:	f3bf 8f5b 	dmb	ish
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d1f4      	bne.n	80116b6 <__atomic_load_8+0x36>
 80116cc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80116d0:	f3bf 8f5b 	dmb	ish
 80116d4:	5463      	strb	r3, [r4, r1]
 80116d6:	4630      	mov	r0, r6
 80116d8:	4639      	mov	r1, r7
 80116da:	bcd0      	pop	{r4, r6, r7}
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop
 80116e0:	27d4eb2d 	.word	0x27d4eb2d
 80116e4:	b21642c9 	.word	0xb21642c9
 80116e8:	2000dc6c 	.word	0x2000dc6c

080116ec <__atomic_store_8>:
 80116ec:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80116f0:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80116f4:	b570      	push	{r4, r5, r6, lr}
 80116f6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80116fa:	4c14      	ldr	r4, [pc, #80]	; (801174c <__atomic_store_8+0x60>)
 80116fc:	4d14      	ldr	r5, [pc, #80]	; (8011750 <__atomic_store_8+0x64>)
 80116fe:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011702:	fb04 f101 	mul.w	r1, r4, r1
 8011706:	4c13      	ldr	r4, [pc, #76]	; (8011754 <__atomic_store_8+0x68>)
 8011708:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801170c:	fba4 4e01 	umull	r4, lr, r4, r1
 8011710:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8011714:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8011718:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801171c:	eba1 0e0e 	sub.w	lr, r1, lr
 8011720:	eb05 0c0e 	add.w	ip, r5, lr
 8011724:	f04f 0401 	mov.w	r4, #1
 8011728:	e8dc 1f4f 	ldrexb	r1, [ip]
 801172c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011730:	2e00      	cmp	r6, #0
 8011732:	d1f9      	bne.n	8011728 <__atomic_store_8+0x3c>
 8011734:	f3bf 8f5b 	dmb	ish
 8011738:	b2c9      	uxtb	r1, r1
 801173a:	2900      	cmp	r1, #0
 801173c:	d1f4      	bne.n	8011728 <__atomic_store_8+0x3c>
 801173e:	e9c0 2300 	strd	r2, r3, [r0]
 8011742:	f3bf 8f5b 	dmb	ish
 8011746:	f805 100e 	strb.w	r1, [r5, lr]
 801174a:	bd70      	pop	{r4, r5, r6, pc}
 801174c:	27d4eb2d 	.word	0x27d4eb2d
 8011750:	2000dc6c 	.word	0x2000dc6c
 8011754:	b21642c9 	.word	0xb21642c9

08011758 <__atomic_exchange_8>:
 8011758:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801175c:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8011760:	4916      	ldr	r1, [pc, #88]	; (80117bc <__atomic_exchange_8+0x64>)
 8011762:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011766:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801176a:	fb01 fc0c 	mul.w	ip, r1, ip
 801176e:	4914      	ldr	r1, [pc, #80]	; (80117c0 <__atomic_exchange_8+0x68>)
 8011770:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011774:	b570      	push	{r4, r5, r6, lr}
 8011776:	4605      	mov	r5, r0
 8011778:	fba1 010c 	umull	r0, r1, r1, ip
 801177c:	0909      	lsrs	r1, r1, #4
 801177e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011782:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8011786:	4e0f      	ldr	r6, [pc, #60]	; (80117c4 <__atomic_exchange_8+0x6c>)
 8011788:	ebac 0c01 	sub.w	ip, ip, r1
 801178c:	eb06 010c 	add.w	r1, r6, ip
 8011790:	f04f 0e01 	mov.w	lr, #1
 8011794:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011798:	e8c1 ef40 	strexb	r0, lr, [r1]
 801179c:	2800      	cmp	r0, #0
 801179e:	d1f9      	bne.n	8011794 <__atomic_exchange_8+0x3c>
 80117a0:	f3bf 8f5b 	dmb	ish
 80117a4:	b2e4      	uxtb	r4, r4
 80117a6:	2c00      	cmp	r4, #0
 80117a8:	d1f4      	bne.n	8011794 <__atomic_exchange_8+0x3c>
 80117aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80117ae:	e9c5 2300 	strd	r2, r3, [r5]
 80117b2:	f3bf 8f5b 	dmb	ish
 80117b6:	f806 400c 	strb.w	r4, [r6, ip]
 80117ba:	bd70      	pop	{r4, r5, r6, pc}
 80117bc:	27d4eb2d 	.word	0x27d4eb2d
 80117c0:	b21642c9 	.word	0xb21642c9
 80117c4:	2000dc6c 	.word	0x2000dc6c

080117c8 <rcutils_is_directory>:
 80117c8:	2000      	movs	r0, #0
 80117ca:	4770      	bx	lr

080117cc <rcutils_join_path>:
 80117cc:	b082      	sub	sp, #8
 80117ce:	e88d 000c 	stmia.w	sp, {r2, r3}
 80117d2:	2000      	movs	r0, #0
 80117d4:	b002      	add	sp, #8
 80117d6:	4770      	bx	lr

080117d8 <rcutils_to_native_path>:
 80117d8:	b084      	sub	sp, #16
 80117da:	a801      	add	r0, sp, #4
 80117dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80117e0:	b004      	add	sp, #16
 80117e2:	2000      	movs	r0, #0
 80117e4:	4770      	bx	lr
 80117e6:	bf00      	nop

080117e8 <rcutils_string_array_fini>:
 80117e8:	b320      	cbz	r0, 8011834 <rcutils_string_array_fini+0x4c>
 80117ea:	b570      	push	{r4, r5, r6, lr}
 80117ec:	4604      	mov	r4, r0
 80117ee:	6840      	ldr	r0, [r0, #4]
 80117f0:	b1d8      	cbz	r0, 801182a <rcutils_string_array_fini+0x42>
 80117f2:	f104 0008 	add.w	r0, r4, #8
 80117f6:	f7f9 f98b 	bl	800ab10 <rcutils_allocator_is_valid>
 80117fa:	b1b8      	cbz	r0, 801182c <rcutils_string_array_fini+0x44>
 80117fc:	6823      	ldr	r3, [r4, #0]
 80117fe:	b1bb      	cbz	r3, 8011830 <rcutils_string_array_fini+0x48>
 8011800:	2500      	movs	r5, #0
 8011802:	6860      	ldr	r0, [r4, #4]
 8011804:	462e      	mov	r6, r5
 8011806:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801180a:	68e3      	ldr	r3, [r4, #12]
 801180c:	69a1      	ldr	r1, [r4, #24]
 801180e:	4798      	blx	r3
 8011810:	e9d4 3000 	ldrd	r3, r0, [r4]
 8011814:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8011818:	3501      	adds	r5, #1
 801181a:	429d      	cmp	r5, r3
 801181c:	d3f3      	bcc.n	8011806 <rcutils_string_array_fini+0x1e>
 801181e:	68e3      	ldr	r3, [r4, #12]
 8011820:	69a1      	ldr	r1, [r4, #24]
 8011822:	4798      	blx	r3
 8011824:	2000      	movs	r0, #0
 8011826:	e9c4 0000 	strd	r0, r0, [r4]
 801182a:	bd70      	pop	{r4, r5, r6, pc}
 801182c:	200b      	movs	r0, #11
 801182e:	bd70      	pop	{r4, r5, r6, pc}
 8011830:	6860      	ldr	r0, [r4, #4]
 8011832:	e7f4      	b.n	801181e <rcutils_string_array_fini+0x36>
 8011834:	200b      	movs	r0, #11
 8011836:	4770      	bx	lr

08011838 <rcutils_get_zero_initialized_string_map>:
 8011838:	4b01      	ldr	r3, [pc, #4]	; (8011840 <rcutils_get_zero_initialized_string_map+0x8>)
 801183a:	2000      	movs	r0, #0
 801183c:	6018      	str	r0, [r3, #0]
 801183e:	4770      	bx	lr
 8011840:	2000dc84 	.word	0x2000dc84

08011844 <rcutils_string_map_reserve>:
 8011844:	2800      	cmp	r0, #0
 8011846:	d05f      	beq.n	8011908 <rcutils_string_map_reserve+0xc4>
 8011848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801184c:	460c      	mov	r4, r1
 801184e:	6801      	ldr	r1, [r0, #0]
 8011850:	b082      	sub	sp, #8
 8011852:	4605      	mov	r5, r0
 8011854:	b129      	cbz	r1, 8011862 <rcutils_string_map_reserve+0x1e>
 8011856:	68cb      	ldr	r3, [r1, #12]
 8011858:	42a3      	cmp	r3, r4
 801185a:	d906      	bls.n	801186a <rcutils_string_map_reserve+0x26>
 801185c:	461c      	mov	r4, r3
 801185e:	2900      	cmp	r1, #0
 8011860:	d1f9      	bne.n	8011856 <rcutils_string_map_reserve+0x12>
 8011862:	201f      	movs	r0, #31
 8011864:	b002      	add	sp, #8
 8011866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186a:	688b      	ldr	r3, [r1, #8]
 801186c:	42a3      	cmp	r3, r4
 801186e:	d047      	beq.n	8011900 <rcutils_string_map_reserve+0xbc>
 8011870:	6a0e      	ldr	r6, [r1, #32]
 8011872:	2c00      	cmp	r4, #0
 8011874:	d034      	beq.n	80118e0 <rcutils_string_map_reserve+0x9c>
 8011876:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801187a:	d243      	bcs.n	8011904 <rcutils_string_map_reserve+0xc0>
 801187c:	00a7      	lsls	r7, r4, #2
 801187e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8011882:	6808      	ldr	r0, [r1, #0]
 8011884:	4632      	mov	r2, r6
 8011886:	4639      	mov	r1, r7
 8011888:	47c0      	blx	r8
 801188a:	2800      	cmp	r0, #0
 801188c:	d03a      	beq.n	8011904 <rcutils_string_map_reserve+0xc0>
 801188e:	682b      	ldr	r3, [r5, #0]
 8011890:	4632      	mov	r2, r6
 8011892:	6018      	str	r0, [r3, #0]
 8011894:	4639      	mov	r1, r7
 8011896:	6858      	ldr	r0, [r3, #4]
 8011898:	47c0      	blx	r8
 801189a:	2800      	cmp	r0, #0
 801189c:	d032      	beq.n	8011904 <rcutils_string_map_reserve+0xc0>
 801189e:	682d      	ldr	r5, [r5, #0]
 80118a0:	68ab      	ldr	r3, [r5, #8]
 80118a2:	6068      	str	r0, [r5, #4]
 80118a4:	42a3      	cmp	r3, r4
 80118a6:	d226      	bcs.n	80118f6 <rcutils_string_map_reserve+0xb2>
 80118a8:	682a      	ldr	r2, [r5, #0]
 80118aa:	eb00 0c07 	add.w	ip, r0, r7
 80118ae:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80118b2:	45e6      	cmp	lr, ip
 80118b4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80118b8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80118bc:	d203      	bcs.n	80118c6 <rcutils_string_map_reserve+0x82>
 80118be:	eb02 0c07 	add.w	ip, r2, r7
 80118c2:	4566      	cmp	r6, ip
 80118c4:	d322      	bcc.n	801190c <rcutils_string_map_reserve+0xc8>
 80118c6:	1ae3      	subs	r3, r4, r3
 80118c8:	009a      	lsls	r2, r3, #2
 80118ca:	4670      	mov	r0, lr
 80118cc:	2100      	movs	r1, #0
 80118ce:	9201      	str	r2, [sp, #4]
 80118d0:	f003 fd0a 	bl	80152e8 <memset>
 80118d4:	9a01      	ldr	r2, [sp, #4]
 80118d6:	2100      	movs	r1, #0
 80118d8:	4630      	mov	r0, r6
 80118da:	f003 fd05 	bl	80152e8 <memset>
 80118de:	e00a      	b.n	80118f6 <rcutils_string_map_reserve+0xb2>
 80118e0:	694f      	ldr	r7, [r1, #20]
 80118e2:	6808      	ldr	r0, [r1, #0]
 80118e4:	4631      	mov	r1, r6
 80118e6:	47b8      	blx	r7
 80118e8:	682b      	ldr	r3, [r5, #0]
 80118ea:	4631      	mov	r1, r6
 80118ec:	6858      	ldr	r0, [r3, #4]
 80118ee:	601c      	str	r4, [r3, #0]
 80118f0:	47b8      	blx	r7
 80118f2:	682d      	ldr	r5, [r5, #0]
 80118f4:	606c      	str	r4, [r5, #4]
 80118f6:	2000      	movs	r0, #0
 80118f8:	60ac      	str	r4, [r5, #8]
 80118fa:	b002      	add	sp, #8
 80118fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011900:	2000      	movs	r0, #0
 8011902:	e7af      	b.n	8011864 <rcutils_string_map_reserve+0x20>
 8011904:	200a      	movs	r0, #10
 8011906:	e7ad      	b.n	8011864 <rcutils_string_map_reserve+0x20>
 8011908:	200b      	movs	r0, #11
 801190a:	4770      	bx	lr
 801190c:	1f0b      	subs	r3, r1, #4
 801190e:	4418      	add	r0, r3
 8011910:	4413      	add	r3, r2
 8011912:	3a04      	subs	r2, #4
 8011914:	4417      	add	r7, r2
 8011916:	2200      	movs	r2, #0
 8011918:	f843 2f04 	str.w	r2, [r3, #4]!
 801191c:	42bb      	cmp	r3, r7
 801191e:	f840 2f04 	str.w	r2, [r0, #4]!
 8011922:	d1f9      	bne.n	8011918 <rcutils_string_map_reserve+0xd4>
 8011924:	e7e7      	b.n	80118f6 <rcutils_string_map_reserve+0xb2>
 8011926:	bf00      	nop

08011928 <rcutils_string_map_init>:
 8011928:	b082      	sub	sp, #8
 801192a:	b570      	push	{r4, r5, r6, lr}
 801192c:	ac04      	add	r4, sp, #16
 801192e:	e884 000c 	stmia.w	r4, {r2, r3}
 8011932:	b380      	cbz	r0, 8011996 <rcutils_string_map_init+0x6e>
 8011934:	6806      	ldr	r6, [r0, #0]
 8011936:	4604      	mov	r4, r0
 8011938:	b12e      	cbz	r6, 8011946 <rcutils_string_map_init+0x1e>
 801193a:	251e      	movs	r5, #30
 801193c:	4628      	mov	r0, r5
 801193e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011942:	b002      	add	sp, #8
 8011944:	4770      	bx	lr
 8011946:	a804      	add	r0, sp, #16
 8011948:	460d      	mov	r5, r1
 801194a:	f7f9 f8e1 	bl	800ab10 <rcutils_allocator_is_valid>
 801194e:	b310      	cbz	r0, 8011996 <rcutils_string_map_init+0x6e>
 8011950:	9b04      	ldr	r3, [sp, #16]
 8011952:	9908      	ldr	r1, [sp, #32]
 8011954:	2024      	movs	r0, #36	; 0x24
 8011956:	4798      	blx	r3
 8011958:	6020      	str	r0, [r4, #0]
 801195a:	b310      	cbz	r0, 80119a2 <rcutils_string_map_init+0x7a>
 801195c:	f10d 0e10 	add.w	lr, sp, #16
 8011960:	e9c0 6600 	strd	r6, r6, [r0]
 8011964:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8011968:	f100 0c10 	add.w	ip, r0, #16
 801196c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011970:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011974:	f8de 3000 	ldr.w	r3, [lr]
 8011978:	f8cc 3000 	str.w	r3, [ip]
 801197c:	4629      	mov	r1, r5
 801197e:	4620      	mov	r0, r4
 8011980:	f7ff ff60 	bl	8011844 <rcutils_string_map_reserve>
 8011984:	4605      	mov	r5, r0
 8011986:	2800      	cmp	r0, #0
 8011988:	d0d8      	beq.n	801193c <rcutils_string_map_init+0x14>
 801198a:	9b05      	ldr	r3, [sp, #20]
 801198c:	9908      	ldr	r1, [sp, #32]
 801198e:	6820      	ldr	r0, [r4, #0]
 8011990:	4798      	blx	r3
 8011992:	6026      	str	r6, [r4, #0]
 8011994:	e7d2      	b.n	801193c <rcutils_string_map_init+0x14>
 8011996:	250b      	movs	r5, #11
 8011998:	4628      	mov	r0, r5
 801199a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801199e:	b002      	add	sp, #8
 80119a0:	4770      	bx	lr
 80119a2:	250a      	movs	r5, #10
 80119a4:	e7ca      	b.n	801193c <rcutils_string_map_init+0x14>
 80119a6:	bf00      	nop

080119a8 <rcutils_string_map_fini>:
 80119a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ac:	b082      	sub	sp, #8
 80119ae:	2800      	cmp	r0, #0
 80119b0:	d03a      	beq.n	8011a28 <rcutils_string_map_fini+0x80>
 80119b2:	6804      	ldr	r4, [r0, #0]
 80119b4:	4606      	mov	r6, r0
 80119b6:	2c00      	cmp	r4, #0
 80119b8:	d032      	beq.n	8011a20 <rcutils_string_map_fini+0x78>
 80119ba:	68a3      	ldr	r3, [r4, #8]
 80119bc:	b32b      	cbz	r3, 8011a0a <rcutils_string_map_fini+0x62>
 80119be:	2500      	movs	r5, #0
 80119c0:	6822      	ldr	r2, [r4, #0]
 80119c2:	462f      	mov	r7, r5
 80119c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80119c8:	b1e0      	cbz	r0, 8011a04 <rcutils_string_map_fini+0x5c>
 80119ca:	6a21      	ldr	r1, [r4, #32]
 80119cc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80119d0:	9101      	str	r1, [sp, #4]
 80119d2:	47c0      	blx	r8
 80119d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80119d8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80119dc:	9901      	ldr	r1, [sp, #4]
 80119de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80119e2:	47c0      	blx	r8
 80119e4:	68e3      	ldr	r3, [r4, #12]
 80119e6:	6862      	ldr	r2, [r4, #4]
 80119e8:	3b01      	subs	r3, #1
 80119ea:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80119ee:	60e3      	str	r3, [r4, #12]
 80119f0:	6834      	ldr	r4, [r6, #0]
 80119f2:	68a3      	ldr	r3, [r4, #8]
 80119f4:	3501      	adds	r5, #1
 80119f6:	429d      	cmp	r5, r3
 80119f8:	d207      	bcs.n	8011a0a <rcutils_string_map_fini+0x62>
 80119fa:	6822      	ldr	r2, [r4, #0]
 80119fc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011a00:	2800      	cmp	r0, #0
 8011a02:	d1e2      	bne.n	80119ca <rcutils_string_map_fini+0x22>
 8011a04:	3501      	adds	r5, #1
 8011a06:	429d      	cmp	r5, r3
 8011a08:	d3dc      	bcc.n	80119c4 <rcutils_string_map_fini+0x1c>
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	f7ff ff19 	bl	8011844 <rcutils_string_map_reserve>
 8011a12:	4604      	mov	r4, r0
 8011a14:	b920      	cbnz	r0, 8011a20 <rcutils_string_map_fini+0x78>
 8011a16:	6830      	ldr	r0, [r6, #0]
 8011a18:	6943      	ldr	r3, [r0, #20]
 8011a1a:	6a01      	ldr	r1, [r0, #32]
 8011a1c:	4798      	blx	r3
 8011a1e:	6034      	str	r4, [r6, #0]
 8011a20:	4620      	mov	r0, r4
 8011a22:	b002      	add	sp, #8
 8011a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a28:	240b      	movs	r4, #11
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	b002      	add	sp, #8
 8011a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a32:	bf00      	nop

08011a34 <rcutils_string_map_getn>:
 8011a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a38:	b300      	cbz	r0, 8011a7c <rcutils_string_map_getn+0x48>
 8011a3a:	6807      	ldr	r7, [r0, #0]
 8011a3c:	b1ff      	cbz	r7, 8011a7e <rcutils_string_map_getn+0x4a>
 8011a3e:	4688      	mov	r8, r1
 8011a40:	b1e1      	cbz	r1, 8011a7c <rcutils_string_map_getn+0x48>
 8011a42:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8011a46:	683e      	ldr	r6, [r7, #0]
 8011a48:	f1ba 0f00 	cmp.w	sl, #0
 8011a4c:	d016      	beq.n	8011a7c <rcutils_string_map_getn+0x48>
 8011a4e:	4691      	mov	r9, r2
 8011a50:	3e04      	subs	r6, #4
 8011a52:	2400      	movs	r4, #0
 8011a54:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8011a58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a5c:	4628      	mov	r0, r5
 8011a5e:	3401      	adds	r4, #1
 8011a60:	b155      	cbz	r5, 8011a78 <rcutils_string_map_getn+0x44>
 8011a62:	f7ee fbc7 	bl	80001f4 <strlen>
 8011a66:	4548      	cmp	r0, r9
 8011a68:	4602      	mov	r2, r0
 8011a6a:	4629      	mov	r1, r5
 8011a6c:	bf38      	it	cc
 8011a6e:	464a      	movcc	r2, r9
 8011a70:	4640      	mov	r0, r8
 8011a72:	f003 fc4e 	bl	8015312 <strncmp>
 8011a76:	b128      	cbz	r0, 8011a84 <rcutils_string_map_getn+0x50>
 8011a78:	45a2      	cmp	sl, r4
 8011a7a:	d1eb      	bne.n	8011a54 <rcutils_string_map_getn+0x20>
 8011a7c:	2700      	movs	r7, #0
 8011a7e:	4638      	mov	r0, r7
 8011a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f853 700b 	ldr.w	r7, [r3, fp]
 8011a8a:	4638      	mov	r0, r7
 8011a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a90 <rmw_get_zero_initialized_context>:
 8011a90:	b510      	push	{r4, lr}
 8011a92:	4604      	mov	r4, r0
 8011a94:	3010      	adds	r0, #16
 8011a96:	f000 f80b 	bl	8011ab0 <rmw_get_zero_initialized_init_options>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	2000      	movs	r0, #0
 8011a9e:	2100      	movs	r1, #0
 8011aa0:	e9c4 0100 	strd	r0, r1, [r4]
 8011aa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011aa8:	60a3      	str	r3, [r4, #8]
 8011aaa:	4620      	mov	r0, r4
 8011aac:	bd10      	pop	{r4, pc}
 8011aae:	bf00      	nop

08011ab0 <rmw_get_zero_initialized_init_options>:
 8011ab0:	b510      	push	{r4, lr}
 8011ab2:	2238      	movs	r2, #56	; 0x38
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	f003 fc16 	bl	80152e8 <memset>
 8011abc:	f104 0010 	add.w	r0, r4, #16
 8011ac0:	f000 f806 	bl	8011ad0 <rmw_get_default_security_options>
 8011ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ac8:	60e3      	str	r3, [r4, #12]
 8011aca:	4620      	mov	r0, r4
 8011acc:	bd10      	pop	{r4, pc}
 8011ace:	bf00      	nop

08011ad0 <rmw_get_default_security_options>:
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	7002      	strb	r2, [r0, #0]
 8011ad4:	6042      	str	r2, [r0, #4]
 8011ad6:	4770      	bx	lr

08011ad8 <rmw_time_equal>:
 8011ad8:	b4f0      	push	{r4, r5, r6, r7}
 8011ada:	b084      	sub	sp, #16
 8011adc:	ac04      	add	r4, sp, #16
 8011ade:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	4924      	ldr	r1, [pc, #144]	; (8011b78 <rmw_time_equal+0xa0>)
 8011ae6:	9e03      	ldr	r6, [sp, #12]
 8011ae8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011aec:	2202      	movs	r2, #2
 8011aee:	4299      	cmp	r1, r3
 8011af0:	41aa      	sbcs	r2, r5
 8011af2:	d330      	bcc.n	8011b56 <rmw_time_equal+0x7e>
 8011af4:	4c21      	ldr	r4, [pc, #132]	; (8011b7c <rmw_time_equal+0xa4>)
 8011af6:	fba3 3204 	umull	r3, r2, r3, r4
 8011afa:	fb04 2205 	mla	r2, r4, r5, r2
 8011afe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b02:	43dd      	mvns	r5, r3
 8011b04:	1a8c      	subs	r4, r1, r2
 8011b06:	4285      	cmp	r5, r0
 8011b08:	41b4      	sbcs	r4, r6
 8011b0a:	d332      	bcc.n	8011b72 <rmw_time_equal+0x9a>
 8011b0c:	eb10 0c03 	adds.w	ip, r0, r3
 8011b10:	eb42 0106 	adc.w	r1, r2, r6
 8011b14:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011b18:	4817      	ldr	r0, [pc, #92]	; (8011b78 <rmw_time_equal+0xa0>)
 8011b1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011b1c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8011b1e:	2202      	movs	r2, #2
 8011b20:	4298      	cmp	r0, r3
 8011b22:	41b2      	sbcs	r2, r6
 8011b24:	d31c      	bcc.n	8011b60 <rmw_time_equal+0x88>
 8011b26:	4c15      	ldr	r4, [pc, #84]	; (8011b7c <rmw_time_equal+0xa4>)
 8011b28:	fba3 3204 	umull	r3, r2, r3, r4
 8011b2c:	fb04 2206 	mla	r2, r4, r6, r2
 8011b30:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011b34:	43de      	mvns	r6, r3
 8011b36:	1a84      	subs	r4, r0, r2
 8011b38:	42ae      	cmp	r6, r5
 8011b3a:	41bc      	sbcs	r4, r7
 8011b3c:	d315      	bcc.n	8011b6a <rmw_time_equal+0x92>
 8011b3e:	195b      	adds	r3, r3, r5
 8011b40:	eb42 0207 	adc.w	r2, r2, r7
 8011b44:	428a      	cmp	r2, r1
 8011b46:	bf08      	it	eq
 8011b48:	4563      	cmpeq	r3, ip
 8011b4a:	bf0c      	ite	eq
 8011b4c:	2001      	moveq	r0, #1
 8011b4e:	2000      	movne	r0, #0
 8011b50:	b004      	add	sp, #16
 8011b52:	bcf0      	pop	{r4, r5, r6, r7}
 8011b54:	4770      	bx	lr
 8011b56:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011b5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b5e:	e7d9      	b.n	8011b14 <rmw_time_equal+0x3c>
 8011b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b64:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8011b68:	e7ec      	b.n	8011b44 <rmw_time_equal+0x6c>
 8011b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b6e:	4602      	mov	r2, r0
 8011b70:	e7e8      	b.n	8011b44 <rmw_time_equal+0x6c>
 8011b72:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011b76:	e7cd      	b.n	8011b14 <rmw_time_equal+0x3c>
 8011b78:	25c17d04 	.word	0x25c17d04
 8011b7c:	3b9aca00 	.word	0x3b9aca00

08011b80 <rmw_time_total_nsec>:
 8011b80:	b470      	push	{r4, r5, r6}
 8011b82:	b085      	sub	sp, #20
 8011b84:	ac04      	add	r4, sp, #16
 8011b86:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	4912      	ldr	r1, [pc, #72]	; (8011bd8 <rmw_time_total_nsec+0x58>)
 8011b8e:	9e03      	ldr	r6, [sp, #12]
 8011b90:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011b94:	2202      	movs	r2, #2
 8011b96:	4299      	cmp	r1, r3
 8011b98:	41aa      	sbcs	r2, r5
 8011b9a:	d311      	bcc.n	8011bc0 <rmw_time_total_nsec+0x40>
 8011b9c:	4c0f      	ldr	r4, [pc, #60]	; (8011bdc <rmw_time_total_nsec+0x5c>)
 8011b9e:	fba3 3204 	umull	r3, r2, r3, r4
 8011ba2:	fb04 2205 	mla	r2, r4, r5, r2
 8011ba6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011baa:	43dd      	mvns	r5, r3
 8011bac:	1a8c      	subs	r4, r1, r2
 8011bae:	4285      	cmp	r5, r0
 8011bb0:	41b4      	sbcs	r4, r6
 8011bb2:	d30c      	bcc.n	8011bce <rmw_time_total_nsec+0x4e>
 8011bb4:	1818      	adds	r0, r3, r0
 8011bb6:	eb42 0106 	adc.w	r1, r2, r6
 8011bba:	b005      	add	sp, #20
 8011bbc:	bc70      	pop	{r4, r5, r6}
 8011bbe:	4770      	bx	lr
 8011bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011bc8:	b005      	add	sp, #20
 8011bca:	bc70      	pop	{r4, r5, r6}
 8011bcc:	4770      	bx	lr
 8011bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bd2:	b005      	add	sp, #20
 8011bd4:	bc70      	pop	{r4, r5, r6}
 8011bd6:	4770      	bx	lr
 8011bd8:	25c17d04 	.word	0x25c17d04
 8011bdc:	3b9aca00 	.word	0x3b9aca00

08011be0 <rmw_validate_full_topic_name>:
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d057      	beq.n	8011c94 <rmw_validate_full_topic_name+0xb4>
 8011be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be8:	460d      	mov	r5, r1
 8011bea:	2900      	cmp	r1, #0
 8011bec:	d054      	beq.n	8011c98 <rmw_validate_full_topic_name+0xb8>
 8011bee:	4616      	mov	r6, r2
 8011bf0:	4604      	mov	r4, r0
 8011bf2:	f7ee faff 	bl	80001f4 <strlen>
 8011bf6:	b148      	cbz	r0, 8011c0c <rmw_validate_full_topic_name+0x2c>
 8011bf8:	7823      	ldrb	r3, [r4, #0]
 8011bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8011bfc:	d00d      	beq.n	8011c1a <rmw_validate_full_topic_name+0x3a>
 8011bfe:	2302      	movs	r3, #2
 8011c00:	602b      	str	r3, [r5, #0]
 8011c02:	b13e      	cbz	r6, 8011c14 <rmw_validate_full_topic_name+0x34>
 8011c04:	2000      	movs	r0, #0
 8011c06:	6030      	str	r0, [r6, #0]
 8011c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	602b      	str	r3, [r5, #0]
 8011c10:	2e00      	cmp	r6, #0
 8011c12:	d1f7      	bne.n	8011c04 <rmw_validate_full_topic_name+0x24>
 8011c14:	2000      	movs	r0, #0
 8011c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c1a:	1e43      	subs	r3, r0, #1
 8011c1c:	5ce2      	ldrb	r2, [r4, r3]
 8011c1e:	2a2f      	cmp	r2, #47	; 0x2f
 8011c20:	d03c      	beq.n	8011c9c <rmw_validate_full_topic_name+0xbc>
 8011c22:	1e63      	subs	r3, r4, #1
 8011c24:	eb03 0800 	add.w	r8, r3, r0
 8011c28:	f1c4 0e01 	rsb	lr, r4, #1
 8011c2c:	eb0e 0703 	add.w	r7, lr, r3
 8011c30:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011c34:	f021 0220 	bic.w	r2, r1, #32
 8011c38:	3a41      	subs	r2, #65	; 0x41
 8011c3a:	2a19      	cmp	r2, #25
 8011c3c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8011c40:	d90b      	bls.n	8011c5a <rmw_validate_full_topic_name+0x7a>
 8011c42:	295f      	cmp	r1, #95	; 0x5f
 8011c44:	d009      	beq.n	8011c5a <rmw_validate_full_topic_name+0x7a>
 8011c46:	f1bc 0f0a 	cmp.w	ip, #10
 8011c4a:	d906      	bls.n	8011c5a <rmw_validate_full_topic_name+0x7a>
 8011c4c:	2304      	movs	r3, #4
 8011c4e:	602b      	str	r3, [r5, #0]
 8011c50:	2e00      	cmp	r6, #0
 8011c52:	d0df      	beq.n	8011c14 <rmw_validate_full_topic_name+0x34>
 8011c54:	6037      	str	r7, [r6, #0]
 8011c56:	2000      	movs	r0, #0
 8011c58:	e7d6      	b.n	8011c08 <rmw_validate_full_topic_name+0x28>
 8011c5a:	4543      	cmp	r3, r8
 8011c5c:	d1e6      	bne.n	8011c2c <rmw_validate_full_topic_name+0x4c>
 8011c5e:	4f1a      	ldr	r7, [pc, #104]	; (8011cc8 <rmw_validate_full_topic_name+0xe8>)
 8011c60:	2301      	movs	r3, #1
 8011c62:	e004      	b.n	8011c6e <rmw_validate_full_topic_name+0x8e>
 8011c64:	4298      	cmp	r0, r3
 8011c66:	f104 0401 	add.w	r4, r4, #1
 8011c6a:	d91c      	bls.n	8011ca6 <rmw_validate_full_topic_name+0xc6>
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	4298      	cmp	r0, r3
 8011c70:	f103 0201 	add.w	r2, r3, #1
 8011c74:	d0f6      	beq.n	8011c64 <rmw_validate_full_topic_name+0x84>
 8011c76:	7821      	ldrb	r1, [r4, #0]
 8011c78:	292f      	cmp	r1, #47	; 0x2f
 8011c7a:	d1f3      	bne.n	8011c64 <rmw_validate_full_topic_name+0x84>
 8011c7c:	7861      	ldrb	r1, [r4, #1]
 8011c7e:	292f      	cmp	r1, #47	; 0x2f
 8011c80:	d01c      	beq.n	8011cbc <rmw_validate_full_topic_name+0xdc>
 8011c82:	5dc9      	ldrb	r1, [r1, r7]
 8011c84:	0749      	lsls	r1, r1, #29
 8011c86:	d5ed      	bpl.n	8011c64 <rmw_validate_full_topic_name+0x84>
 8011c88:	2206      	movs	r2, #6
 8011c8a:	602a      	str	r2, [r5, #0]
 8011c8c:	2e00      	cmp	r6, #0
 8011c8e:	d0c1      	beq.n	8011c14 <rmw_validate_full_topic_name+0x34>
 8011c90:	6033      	str	r3, [r6, #0]
 8011c92:	e7bf      	b.n	8011c14 <rmw_validate_full_topic_name+0x34>
 8011c94:	200b      	movs	r0, #11
 8011c96:	4770      	bx	lr
 8011c98:	200b      	movs	r0, #11
 8011c9a:	e7b5      	b.n	8011c08 <rmw_validate_full_topic_name+0x28>
 8011c9c:	2203      	movs	r2, #3
 8011c9e:	602a      	str	r2, [r5, #0]
 8011ca0:	2e00      	cmp	r6, #0
 8011ca2:	d1f5      	bne.n	8011c90 <rmw_validate_full_topic_name+0xb0>
 8011ca4:	e7b6      	b.n	8011c14 <rmw_validate_full_topic_name+0x34>
 8011ca6:	28f7      	cmp	r0, #247	; 0xf7
 8011ca8:	d802      	bhi.n	8011cb0 <rmw_validate_full_topic_name+0xd0>
 8011caa:	2000      	movs	r0, #0
 8011cac:	6028      	str	r0, [r5, #0]
 8011cae:	e7ab      	b.n	8011c08 <rmw_validate_full_topic_name+0x28>
 8011cb0:	2307      	movs	r3, #7
 8011cb2:	602b      	str	r3, [r5, #0]
 8011cb4:	2e00      	cmp	r6, #0
 8011cb6:	d0ad      	beq.n	8011c14 <rmw_validate_full_topic_name+0x34>
 8011cb8:	23f6      	movs	r3, #246	; 0xf6
 8011cba:	e7e9      	b.n	8011c90 <rmw_validate_full_topic_name+0xb0>
 8011cbc:	2205      	movs	r2, #5
 8011cbe:	602a      	str	r2, [r5, #0]
 8011cc0:	2e00      	cmp	r6, #0
 8011cc2:	d1e5      	bne.n	8011c90 <rmw_validate_full_topic_name+0xb0>
 8011cc4:	e7a6      	b.n	8011c14 <rmw_validate_full_topic_name+0x34>
 8011cc6:	bf00      	nop
 8011cc8:	0801708e 	.word	0x0801708e

08011ccc <get_memory>:
 8011ccc:	4603      	mov	r3, r0
 8011cce:	6840      	ldr	r0, [r0, #4]
 8011cd0:	b158      	cbz	r0, 8011cea <get_memory+0x1e>
 8011cd2:	6842      	ldr	r2, [r0, #4]
 8011cd4:	605a      	str	r2, [r3, #4]
 8011cd6:	b10a      	cbz	r2, 8011cdc <get_memory+0x10>
 8011cd8:	2100      	movs	r1, #0
 8011cda:	6011      	str	r1, [r2, #0]
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	6042      	str	r2, [r0, #4]
 8011ce0:	b102      	cbz	r2, 8011ce4 <get_memory+0x18>
 8011ce2:	6010      	str	r0, [r2, #0]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	6002      	str	r2, [r0, #0]
 8011ce8:	6018      	str	r0, [r3, #0]
 8011cea:	4770      	bx	lr

08011cec <put_memory>:
 8011cec:	680b      	ldr	r3, [r1, #0]
 8011cee:	b10b      	cbz	r3, 8011cf4 <put_memory+0x8>
 8011cf0:	684a      	ldr	r2, [r1, #4]
 8011cf2:	605a      	str	r2, [r3, #4]
 8011cf4:	684a      	ldr	r2, [r1, #4]
 8011cf6:	b102      	cbz	r2, 8011cfa <put_memory+0xe>
 8011cf8:	6013      	str	r3, [r2, #0]
 8011cfa:	6803      	ldr	r3, [r0, #0]
 8011cfc:	428b      	cmp	r3, r1
 8011cfe:	6843      	ldr	r3, [r0, #4]
 8011d00:	bf08      	it	eq
 8011d02:	6002      	streq	r2, [r0, #0]
 8011d04:	604b      	str	r3, [r1, #4]
 8011d06:	b103      	cbz	r3, 8011d0a <put_memory+0x1e>
 8011d08:	6019      	str	r1, [r3, #0]
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	600b      	str	r3, [r1, #0]
 8011d0e:	6041      	str	r1, [r0, #4]
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop

08011d14 <rmw_destroy_client>:
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	b128      	cbz	r0, 8011d24 <rmw_destroy_client+0x10>
 8011d18:	4604      	mov	r4, r0
 8011d1a:	6800      	ldr	r0, [r0, #0]
 8011d1c:	460d      	mov	r5, r1
 8011d1e:	f7fa f999 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 8011d22:	b910      	cbnz	r0, 8011d2a <rmw_destroy_client+0x16>
 8011d24:	2401      	movs	r4, #1
 8011d26:	4620      	mov	r0, r4
 8011d28:	bd70      	pop	{r4, r5, r6, pc}
 8011d2a:	6863      	ldr	r3, [r4, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d0f9      	beq.n	8011d24 <rmw_destroy_client+0x10>
 8011d30:	2d00      	cmp	r5, #0
 8011d32:	d0f7      	beq.n	8011d24 <rmw_destroy_client+0x10>
 8011d34:	6828      	ldr	r0, [r5, #0]
 8011d36:	f7fa f98d 	bl	800c054 <is_uxrce_rmw_identifier_valid>
 8011d3a:	2800      	cmp	r0, #0
 8011d3c:	d0f2      	beq.n	8011d24 <rmw_destroy_client+0x10>
 8011d3e:	686e      	ldr	r6, [r5, #4]
 8011d40:	2e00      	cmp	r6, #0
 8011d42:	d0ef      	beq.n	8011d24 <rmw_destroy_client+0x10>
 8011d44:	6864      	ldr	r4, [r4, #4]
 8011d46:	6932      	ldr	r2, [r6, #16]
 8011d48:	6920      	ldr	r0, [r4, #16]
 8011d4a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011d4e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011d52:	6819      	ldr	r1, [r3, #0]
 8011d54:	f7fa fd50 	bl	800c7f8 <uxr_buffer_cancel_data>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	6920      	ldr	r0, [r4, #16]
 8011d5c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011d60:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011d64:	f7fa f8f6 	bl	800bf54 <run_xrce_session>
 8011d68:	6920      	ldr	r0, [r4, #16]
 8011d6a:	6932      	ldr	r2, [r6, #16]
 8011d6c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011d70:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011d74:	6819      	ldr	r1, [r3, #0]
 8011d76:	f7fa fad3 	bl	800c320 <uxr_buffer_delete_entity>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	6920      	ldr	r0, [r4, #16]
 8011d7e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011d82:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011d86:	f7fa f8e5 	bl	800bf54 <run_xrce_session>
 8011d8a:	2800      	cmp	r0, #0
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	bf14      	ite	ne
 8011d90:	2400      	movne	r4, #0
 8011d92:	2402      	moveq	r4, #2
 8011d94:	f7f9 ffc6 	bl	800bd24 <rmw_uxrce_fini_client_memory>
 8011d98:	e7c5      	b.n	8011d26 <rmw_destroy_client+0x12>
 8011d9a:	bf00      	nop

08011d9c <rmw_get_implementation_identifier>:
 8011d9c:	4b01      	ldr	r3, [pc, #4]	; (8011da4 <rmw_get_implementation_identifier+0x8>)
 8011d9e:	6818      	ldr	r0, [r3, #0]
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop
 8011da4:	08016cf4 	.word	0x08016cf4

08011da8 <rmw_create_guard_condition>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4605      	mov	r5, r0
 8011dac:	4807      	ldr	r0, [pc, #28]	; (8011dcc <rmw_create_guard_condition+0x24>)
 8011dae:	f7ff ff8d 	bl	8011ccc <get_memory>
 8011db2:	b148      	cbz	r0, 8011dc8 <rmw_create_guard_condition+0x20>
 8011db4:	6884      	ldr	r4, [r0, #8]
 8011db6:	2300      	movs	r3, #0
 8011db8:	7423      	strb	r3, [r4, #16]
 8011dba:	61e5      	str	r5, [r4, #28]
 8011dbc:	f7ff ffee 	bl	8011d9c <rmw_get_implementation_identifier>
 8011dc0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8011dc4:	f104 0014 	add.w	r0, r4, #20
 8011dc8:	bd38      	pop	{r3, r4, r5, pc}
 8011dca:	bf00      	nop
 8011dcc:	2000dbb4 	.word	0x2000dbb4

08011dd0 <rmw_destroy_guard_condition>:
 8011dd0:	b508      	push	{r3, lr}
 8011dd2:	4b08      	ldr	r3, [pc, #32]	; (8011df4 <rmw_destroy_guard_condition+0x24>)
 8011dd4:	6819      	ldr	r1, [r3, #0]
 8011dd6:	b911      	cbnz	r1, 8011dde <rmw_destroy_guard_condition+0xe>
 8011dd8:	e00a      	b.n	8011df0 <rmw_destroy_guard_condition+0x20>
 8011dda:	6849      	ldr	r1, [r1, #4]
 8011ddc:	b141      	cbz	r1, 8011df0 <rmw_destroy_guard_condition+0x20>
 8011dde:	688b      	ldr	r3, [r1, #8]
 8011de0:	3314      	adds	r3, #20
 8011de2:	4298      	cmp	r0, r3
 8011de4:	d1f9      	bne.n	8011dda <rmw_destroy_guard_condition+0xa>
 8011de6:	4803      	ldr	r0, [pc, #12]	; (8011df4 <rmw_destroy_guard_condition+0x24>)
 8011de8:	f7ff ff80 	bl	8011cec <put_memory>
 8011dec:	2000      	movs	r0, #0
 8011dee:	bd08      	pop	{r3, pc}
 8011df0:	2001      	movs	r0, #1
 8011df2:	bd08      	pop	{r3, pc}
 8011df4:	2000dbb4 	.word	0x2000dbb4

08011df8 <rmw_init_options_init>:
 8011df8:	b084      	sub	sp, #16
 8011dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dfc:	b083      	sub	sp, #12
 8011dfe:	ad09      	add	r5, sp, #36	; 0x24
 8011e00:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011e04:	b130      	cbz	r0, 8011e14 <rmw_init_options_init+0x1c>
 8011e06:	4604      	mov	r4, r0
 8011e08:	4628      	mov	r0, r5
 8011e0a:	f7f8 fe81 	bl	800ab10 <rcutils_allocator_is_valid>
 8011e0e:	b108      	cbz	r0, 8011e14 <rmw_init_options_init+0x1c>
 8011e10:	68a6      	ldr	r6, [r4, #8]
 8011e12:	b12e      	cbz	r6, 8011e20 <rmw_init_options_init+0x28>
 8011e14:	200b      	movs	r0, #11
 8011e16:	b003      	add	sp, #12
 8011e18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011e1c:	b004      	add	sp, #16
 8011e1e:	4770      	bx	lr
 8011e20:	2200      	movs	r2, #0
 8011e22:	2300      	movs	r3, #0
 8011e24:	e9c4 2300 	strd	r2, r3, [r4]
 8011e28:	4b22      	ldr	r3, [pc, #136]	; (8011eb4 <rmw_init_options_init+0xbc>)
 8011e2a:	f8df e098 	ldr.w	lr, [pc, #152]	; 8011ec4 <rmw_init_options_init+0xcc>
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	60a3      	str	r3, [r4, #8]
 8011e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e34:	f104 0c20 	add.w	ip, r4, #32
 8011e38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e3c:	466f      	mov	r7, sp
 8011e3e:	682b      	ldr	r3, [r5, #0]
 8011e40:	f8cc 3000 	str.w	r3, [ip]
 8011e44:	4638      	mov	r0, r7
 8011e46:	f8c4 e01c 	str.w	lr, [r4, #28]
 8011e4a:	60e6      	str	r6, [r4, #12]
 8011e4c:	f7ff fe40 	bl	8011ad0 <rmw_get_default_security_options>
 8011e50:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011e54:	f104 0310 	add.w	r3, r4, #16
 8011e58:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e5c:	2203      	movs	r2, #3
 8011e5e:	4816      	ldr	r0, [pc, #88]	; (8011eb8 <rmw_init_options_init+0xc0>)
 8011e60:	4916      	ldr	r1, [pc, #88]	; (8011ebc <rmw_init_options_init+0xc4>)
 8011e62:	7626      	strb	r6, [r4, #24]
 8011e64:	f7f9 fe9e 	bl	800bba4 <rmw_uxrce_init_init_options_impl_memory>
 8011e68:	4813      	ldr	r0, [pc, #76]	; (8011eb8 <rmw_init_options_init+0xc0>)
 8011e6a:	f7ff ff2f 	bl	8011ccc <get_memory>
 8011e6e:	b1f0      	cbz	r0, 8011eae <rmw_init_options_init+0xb6>
 8011e70:	4a13      	ldr	r2, [pc, #76]	; (8011ec0 <rmw_init_options_init+0xc8>)
 8011e72:	6883      	ldr	r3, [r0, #8]
 8011e74:	6851      	ldr	r1, [r2, #4]
 8011e76:	7810      	ldrb	r0, [r2, #0]
 8011e78:	6363      	str	r3, [r4, #52]	; 0x34
 8011e7a:	7418      	strb	r0, [r3, #16]
 8011e7c:	6159      	str	r1, [r3, #20]
 8011e7e:	68d1      	ldr	r1, [r2, #12]
 8011e80:	61d9      	str	r1, [r3, #28]
 8011e82:	6911      	ldr	r1, [r2, #16]
 8011e84:	6219      	str	r1, [r3, #32]
 8011e86:	6951      	ldr	r1, [r2, #20]
 8011e88:	6892      	ldr	r2, [r2, #8]
 8011e8a:	619a      	str	r2, [r3, #24]
 8011e8c:	6259      	str	r1, [r3, #36]	; 0x24
 8011e8e:	f7fb ffd3 	bl	800de38 <uxr_nanos>
 8011e92:	f002 fe6b 	bl	8014b6c <srand>
 8011e96:	f002 fe97 	bl	8014bc8 <rand>
 8011e9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e9c:	6298      	str	r0, [r3, #40]	; 0x28
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	d0f9      	beq.n	8011e96 <rmw_init_options_init+0x9e>
 8011ea2:	2000      	movs	r0, #0
 8011ea4:	b003      	add	sp, #12
 8011ea6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011eaa:	b004      	add	sp, #16
 8011eac:	4770      	bx	lr
 8011eae:	2001      	movs	r0, #1
 8011eb0:	e7b1      	b.n	8011e16 <rmw_init_options_init+0x1e>
 8011eb2:	bf00      	nop
 8011eb4:	08016cf4 	.word	0x08016cf4
 8011eb8:	2000dbc4 	.word	0x2000dbc4
 8011ebc:	20009460 	.word	0x20009460
 8011ec0:	200092ac 	.word	0x200092ac
 8011ec4:	080163e0 	.word	0x080163e0

08011ec8 <rmw_init_options_copy>:
 8011ec8:	b570      	push	{r4, r5, r6, lr}
 8011eca:	b158      	cbz	r0, 8011ee4 <rmw_init_options_copy+0x1c>
 8011ecc:	460d      	mov	r5, r1
 8011ece:	b149      	cbz	r1, 8011ee4 <rmw_init_options_copy+0x1c>
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	6880      	ldr	r0, [r0, #8]
 8011ed4:	b120      	cbz	r0, 8011ee0 <rmw_init_options_copy+0x18>
 8011ed6:	4b1e      	ldr	r3, [pc, #120]	; (8011f50 <rmw_init_options_copy+0x88>)
 8011ed8:	6819      	ldr	r1, [r3, #0]
 8011eda:	f7ee f981 	bl	80001e0 <strcmp>
 8011ede:	bb90      	cbnz	r0, 8011f46 <rmw_init_options_copy+0x7e>
 8011ee0:	68ab      	ldr	r3, [r5, #8]
 8011ee2:	b113      	cbz	r3, 8011eea <rmw_init_options_copy+0x22>
 8011ee4:	250b      	movs	r5, #11
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	bd70      	pop	{r4, r5, r6, pc}
 8011eea:	4623      	mov	r3, r4
 8011eec:	462a      	mov	r2, r5
 8011eee:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8011ef2:	f8d3 c000 	ldr.w	ip, [r3]
 8011ef6:	6858      	ldr	r0, [r3, #4]
 8011ef8:	6899      	ldr	r1, [r3, #8]
 8011efa:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8011efe:	f8c2 e00c 	str.w	lr, [r2, #12]
 8011f02:	3310      	adds	r3, #16
 8011f04:	42b3      	cmp	r3, r6
 8011f06:	f8c2 c000 	str.w	ip, [r2]
 8011f0a:	6050      	str	r0, [r2, #4]
 8011f0c:	6091      	str	r1, [r2, #8]
 8011f0e:	f102 0210 	add.w	r2, r2, #16
 8011f12:	d1ee      	bne.n	8011ef2 <rmw_init_options_copy+0x2a>
 8011f14:	6819      	ldr	r1, [r3, #0]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	480e      	ldr	r0, [pc, #56]	; (8011f54 <rmw_init_options_copy+0x8c>)
 8011f1a:	6053      	str	r3, [r2, #4]
 8011f1c:	6011      	str	r1, [r2, #0]
 8011f1e:	f7ff fed5 	bl	8011ccc <get_memory>
 8011f22:	b198      	cbz	r0, 8011f4c <rmw_init_options_copy+0x84>
 8011f24:	6883      	ldr	r3, [r0, #8]
 8011f26:	636b      	str	r3, [r5, #52]	; 0x34
 8011f28:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011f2a:	f102 0c10 	add.w	ip, r2, #16
 8011f2e:	f103 0410 	add.w	r4, r3, #16
 8011f32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f38:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011f3c:	2500      	movs	r5, #0
 8011f3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011f42:	4628      	mov	r0, r5
 8011f44:	bd70      	pop	{r4, r5, r6, pc}
 8011f46:	250c      	movs	r5, #12
 8011f48:	4628      	mov	r0, r5
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}
 8011f4c:	2501      	movs	r5, #1
 8011f4e:	e7ca      	b.n	8011ee6 <rmw_init_options_copy+0x1e>
 8011f50:	08016cf4 	.word	0x08016cf4
 8011f54:	2000dbc4 	.word	0x2000dbc4

08011f58 <rmw_init_options_fini>:
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d03d      	beq.n	8011fd8 <rmw_init_options_fini+0x80>
 8011f5c:	b510      	push	{r4, lr}
 8011f5e:	4604      	mov	r4, r0
 8011f60:	b08e      	sub	sp, #56	; 0x38
 8011f62:	3020      	adds	r0, #32
 8011f64:	f7f8 fdd4 	bl	800ab10 <rcutils_allocator_is_valid>
 8011f68:	b360      	cbz	r0, 8011fc4 <rmw_init_options_fini+0x6c>
 8011f6a:	68a0      	ldr	r0, [r4, #8]
 8011f6c:	b120      	cbz	r0, 8011f78 <rmw_init_options_fini+0x20>
 8011f6e:	4b1c      	ldr	r3, [pc, #112]	; (8011fe0 <rmw_init_options_fini+0x88>)
 8011f70:	6819      	ldr	r1, [r3, #0]
 8011f72:	f7ee f935 	bl	80001e0 <strcmp>
 8011f76:	bb68      	cbnz	r0, 8011fd4 <rmw_init_options_fini+0x7c>
 8011f78:	4b1a      	ldr	r3, [pc, #104]	; (8011fe4 <rmw_init_options_fini+0x8c>)
 8011f7a:	6819      	ldr	r1, [r3, #0]
 8011f7c:	b331      	cbz	r1, 8011fcc <rmw_init_options_fini+0x74>
 8011f7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011f80:	e001      	b.n	8011f86 <rmw_init_options_fini+0x2e>
 8011f82:	6849      	ldr	r1, [r1, #4]
 8011f84:	b311      	cbz	r1, 8011fcc <rmw_init_options_fini+0x74>
 8011f86:	688b      	ldr	r3, [r1, #8]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d1fa      	bne.n	8011f82 <rmw_init_options_fini+0x2a>
 8011f8c:	4815      	ldr	r0, [pc, #84]	; (8011fe4 <rmw_init_options_fini+0x8c>)
 8011f8e:	f7ff fead 	bl	8011cec <put_memory>
 8011f92:	4668      	mov	r0, sp
 8011f94:	f7ff fd8c 	bl	8011ab0 <rmw_get_zero_initialized_init_options>
 8011f98:	46ee      	mov	lr, sp
 8011f9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f9e:	46a4      	mov	ip, r4
 8011fa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fa4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011fa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011fb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fb4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011fb8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	b00e      	add	sp, #56	; 0x38
 8011fc2:	bd10      	pop	{r4, pc}
 8011fc4:	230b      	movs	r3, #11
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	b00e      	add	sp, #56	; 0x38
 8011fca:	bd10      	pop	{r4, pc}
 8011fcc:	2301      	movs	r3, #1
 8011fce:	4618      	mov	r0, r3
 8011fd0:	b00e      	add	sp, #56	; 0x38
 8011fd2:	bd10      	pop	{r4, pc}
 8011fd4:	230c      	movs	r3, #12
 8011fd6:	e7f2      	b.n	8011fbe <rmw_init_options_fini+0x66>
 8011fd8:	230b      	movs	r3, #11
 8011fda:	4618      	mov	r0, r3
 8011fdc:	4770      	bx	lr
 8011fde:	bf00      	nop
 8011fe0:	08016cf4 	.word	0x08016cf4
 8011fe4:	2000dbc4 	.word	0x2000dbc4

08011fe8 <rmw_init>:
 8011fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011fec:	b083      	sub	sp, #12
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	f000 80d3 	beq.w	801219a <rmw_init+0x1b2>
 8011ff4:	460e      	mov	r6, r1
 8011ff6:	2900      	cmp	r1, #0
 8011ff8:	f000 80cf 	beq.w	801219a <rmw_init+0x1b2>
 8011ffc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011ffe:	4605      	mov	r5, r0
 8012000:	2b00      	cmp	r3, #0
 8012002:	f000 80ca 	beq.w	801219a <rmw_init+0x1b2>
 8012006:	4b78      	ldr	r3, [pc, #480]	; (80121e8 <rmw_init+0x200>)
 8012008:	6880      	ldr	r0, [r0, #8]
 801200a:	681f      	ldr	r7, [r3, #0]
 801200c:	b128      	cbz	r0, 801201a <rmw_init+0x32>
 801200e:	4639      	mov	r1, r7
 8012010:	f7ee f8e6 	bl	80001e0 <strcmp>
 8012014:	2800      	cmp	r0, #0
 8012016:	f040 80ca 	bne.w	80121ae <rmw_init+0x1c6>
 801201a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801201e:	4c73      	ldr	r4, [pc, #460]	; (80121ec <rmw_init+0x204>)
 8012020:	4973      	ldr	r1, [pc, #460]	; (80121f0 <rmw_init+0x208>)
 8012022:	4874      	ldr	r0, [pc, #464]	; (80121f4 <rmw_init+0x20c>)
 8012024:	60b7      	str	r7, [r6, #8]
 8012026:	e9c6 2300 	strd	r2, r3, [r6]
 801202a:	68eb      	ldr	r3, [r5, #12]
 801202c:	64b3      	str	r3, [r6, #72]	; 0x48
 801202e:	2201      	movs	r2, #1
 8012030:	f7f9 fd58 	bl	800bae4 <rmw_uxrce_init_session_memory>
 8012034:	4620      	mov	r0, r4
 8012036:	4970      	ldr	r1, [pc, #448]	; (80121f8 <rmw_init+0x210>)
 8012038:	2204      	movs	r2, #4
 801203a:	f7f9 fd93 	bl	800bb64 <rmw_uxrce_init_static_input_buffer_memory>
 801203e:	f04f 0800 	mov.w	r8, #0
 8012042:	486c      	ldr	r0, [pc, #432]	; (80121f4 <rmw_init+0x20c>)
 8012044:	f884 800d 	strb.w	r8, [r4, #13]
 8012048:	f7ff fe40 	bl	8011ccc <get_memory>
 801204c:	2800      	cmp	r0, #0
 801204e:	f000 80a9 	beq.w	80121a4 <rmw_init+0x1bc>
 8012052:	6884      	ldr	r4, [r0, #8]
 8012054:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8012056:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012058:	f890 c010 	ldrb.w	ip, [r0, #16]
 801205c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012060:	9101      	str	r1, [sp, #4]
 8012062:	6a00      	ldr	r0, [r0, #32]
 8012064:	9000      	str	r0, [sp, #0]
 8012066:	f104 0910 	add.w	r9, r4, #16
 801206a:	4661      	mov	r1, ip
 801206c:	4648      	mov	r0, r9
 801206e:	f000 fe79 	bl	8012d64 <uxr_set_custom_transport_callbacks>
 8012072:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8012076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801207a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 801207e:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8012082:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8012086:	495d      	ldr	r1, [pc, #372]	; (80121fc <rmw_init+0x214>)
 8012088:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 801208c:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8012090:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8012094:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8012098:	4859      	ldr	r0, [pc, #356]	; (8012200 <rmw_init+0x218>)
 801209a:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 801209e:	2201      	movs	r2, #1
 80120a0:	64f4      	str	r4, [r6, #76]	; 0x4c
 80120a2:	f7f9 fcff 	bl	800baa4 <rmw_uxrce_init_node_memory>
 80120a6:	4957      	ldr	r1, [pc, #348]	; (8012204 <rmw_init+0x21c>)
 80120a8:	4857      	ldr	r0, [pc, #348]	; (8012208 <rmw_init+0x220>)
 80120aa:	2205      	movs	r2, #5
 80120ac:	f7f9 fcda 	bl	800ba64 <rmw_uxrce_init_subscription_memory>
 80120b0:	4956      	ldr	r1, [pc, #344]	; (801220c <rmw_init+0x224>)
 80120b2:	4857      	ldr	r0, [pc, #348]	; (8012210 <rmw_init+0x228>)
 80120b4:	220a      	movs	r2, #10
 80120b6:	f7f9 fcb5 	bl	800ba24 <rmw_uxrce_init_publisher_memory>
 80120ba:	4956      	ldr	r1, [pc, #344]	; (8012214 <rmw_init+0x22c>)
 80120bc:	4856      	ldr	r0, [pc, #344]	; (8012218 <rmw_init+0x230>)
 80120be:	2201      	movs	r2, #1
 80120c0:	f7f9 fc70 	bl	800b9a4 <rmw_uxrce_init_service_memory>
 80120c4:	4955      	ldr	r1, [pc, #340]	; (801221c <rmw_init+0x234>)
 80120c6:	4856      	ldr	r0, [pc, #344]	; (8012220 <rmw_init+0x238>)
 80120c8:	2201      	movs	r2, #1
 80120ca:	f7f9 fc8b 	bl	800b9e4 <rmw_uxrce_init_client_memory>
 80120ce:	4955      	ldr	r1, [pc, #340]	; (8012224 <rmw_init+0x23c>)
 80120d0:	4855      	ldr	r0, [pc, #340]	; (8012228 <rmw_init+0x240>)
 80120d2:	220f      	movs	r2, #15
 80120d4:	f7f9 fd26 	bl	800bb24 <rmw_uxrce_init_topic_memory>
 80120d8:	4954      	ldr	r1, [pc, #336]	; (801222c <rmw_init+0x244>)
 80120da:	4855      	ldr	r0, [pc, #340]	; (8012230 <rmw_init+0x248>)
 80120dc:	2203      	movs	r2, #3
 80120de:	f7f9 fd61 	bl	800bba4 <rmw_uxrce_init_init_options_impl_memory>
 80120e2:	4954      	ldr	r1, [pc, #336]	; (8012234 <rmw_init+0x24c>)
 80120e4:	4854      	ldr	r0, [pc, #336]	; (8012238 <rmw_init+0x250>)
 80120e6:	2204      	movs	r2, #4
 80120e8:	f7f9 fd7c 	bl	800bbe4 <rmw_uxrce_init_wait_set_memory>
 80120ec:	4953      	ldr	r1, [pc, #332]	; (801223c <rmw_init+0x254>)
 80120ee:	4854      	ldr	r0, [pc, #336]	; (8012240 <rmw_init+0x258>)
 80120f0:	2204      	movs	r2, #4
 80120f2:	f7f9 fd97 	bl	800bc24 <rmw_uxrce_init_guard_condition_memory>
 80120f6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80120f8:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80120fa:	4642      	mov	r2, r8
 80120fc:	f000 faa0 	bl	8012640 <rmw_uxrce_transport_init>
 8012100:	4607      	mov	r7, r0
 8012102:	2800      	cmp	r0, #0
 8012104:	d158      	bne.n	80121b8 <rmw_init+0x1d0>
 8012106:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012108:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 801210c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801210e:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8012112:	4628      	mov	r0, r5
 8012114:	f7fa fcf4 	bl	800cb00 <uxr_init_session>
 8012118:	494a      	ldr	r1, [pc, #296]	; (8012244 <rmw_init+0x25c>)
 801211a:	4622      	mov	r2, r4
 801211c:	4628      	mov	r0, r5
 801211e:	f7fa fd13 	bl	800cb48 <uxr_set_topic_callback>
 8012122:	4949      	ldr	r1, [pc, #292]	; (8012248 <rmw_init+0x260>)
 8012124:	463a      	mov	r2, r7
 8012126:	4628      	mov	r0, r5
 8012128:	f7fa fd0a 	bl	800cb40 <uxr_set_status_callback>
 801212c:	4947      	ldr	r1, [pc, #284]	; (801224c <rmw_init+0x264>)
 801212e:	463a      	mov	r2, r7
 8012130:	4628      	mov	r0, r5
 8012132:	f7fa fd0d 	bl	800cb50 <uxr_set_request_callback>
 8012136:	4946      	ldr	r1, [pc, #280]	; (8012250 <rmw_init+0x268>)
 8012138:	463a      	mov	r2, r7
 801213a:	4628      	mov	r0, r5
 801213c:	f7fa fd0c 	bl	800cb58 <uxr_set_reply_callback>
 8012140:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012144:	2304      	movs	r3, #4
 8012146:	0092      	lsls	r2, r2, #2
 8012148:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801214c:	4628      	mov	r0, r5
 801214e:	f7fa fd41 	bl	800cbd4 <uxr_create_input_reliable_stream>
 8012152:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012156:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 801215a:	0092      	lsls	r2, r2, #2
 801215c:	2304      	movs	r3, #4
 801215e:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8012162:	4628      	mov	r0, r5
 8012164:	f7fa fd0e 	bl	800cb84 <uxr_create_output_reliable_stream>
 8012168:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 801216c:	4628      	mov	r0, r5
 801216e:	f7fa fd2b 	bl	800cbc8 <uxr_create_input_best_effort_stream>
 8012172:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8012176:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801217a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801217e:	3114      	adds	r1, #20
 8012180:	4628      	mov	r0, r5
 8012182:	f7fa fced 	bl	800cb60 <uxr_create_output_best_effort_stream>
 8012186:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801218a:	4628      	mov	r0, r5
 801218c:	f7fb fa78 	bl	800d680 <uxr_create_session>
 8012190:	b1f8      	cbz	r0, 80121d2 <rmw_init+0x1ea>
 8012192:	4638      	mov	r0, r7
 8012194:	b003      	add	sp, #12
 8012196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801219a:	270b      	movs	r7, #11
 801219c:	4638      	mov	r0, r7
 801219e:	b003      	add	sp, #12
 80121a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121a4:	2701      	movs	r7, #1
 80121a6:	4638      	mov	r0, r7
 80121a8:	b003      	add	sp, #12
 80121aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121ae:	270c      	movs	r7, #12
 80121b0:	4638      	mov	r0, r7
 80121b2:	b003      	add	sp, #12
 80121b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121b8:	4648      	mov	r0, r9
 80121ba:	f000 fe15 	bl	8012de8 <uxr_close_custom_transport>
 80121be:	480d      	ldr	r0, [pc, #52]	; (80121f4 <rmw_init+0x20c>)
 80121c0:	4621      	mov	r1, r4
 80121c2:	f7ff fd93 	bl	8011cec <put_memory>
 80121c6:	4638      	mov	r0, r7
 80121c8:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80121cc:	b003      	add	sp, #12
 80121ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121d2:	4648      	mov	r0, r9
 80121d4:	f000 fe08 	bl	8012de8 <uxr_close_custom_transport>
 80121d8:	4806      	ldr	r0, [pc, #24]	; (80121f4 <rmw_init+0x20c>)
 80121da:	4621      	mov	r1, r4
 80121dc:	f7ff fd86 	bl	8011cec <put_memory>
 80121e0:	64f7      	str	r7, [r6, #76]	; 0x4c
 80121e2:	2701      	movs	r7, #1
 80121e4:	e7d5      	b.n	8012192 <rmw_init+0x1aa>
 80121e6:	bf00      	nop
 80121e8:	08016cf4 	.word	0x08016cf4
 80121ec:	2000dc14 	.word	0x2000dc14
 80121f0:	20009ec0 	.word	0x20009ec0
 80121f4:	2000dc04 	.word	0x2000dc04
 80121f8:	2000b468 	.word	0x2000b468
 80121fc:	200094e4 	.word	0x200094e4
 8012200:	2000dbd4 	.word	0x2000dbd4
 8012204:	2000d568 	.word	0x2000d568
 8012208:	2000dc24 	.word	0x2000dc24
 801220c:	20009588 	.word	0x20009588
 8012210:	2000dbe4 	.word	0x2000dbe4
 8012214:	20009df8 	.word	0x20009df8
 8012218:	2000dbf4 	.word	0x2000dbf4
 801221c:	20009318 	.word	0x20009318
 8012220:	20009304 	.word	0x20009304
 8012224:	2000d9a0 	.word	0x2000d9a0
 8012228:	2000dc34 	.word	0x2000dc34
 801222c:	20009460 	.word	0x20009460
 8012230:	2000dbc4 	.word	0x2000dbc4
 8012234:	2000db44 	.word	0x2000db44
 8012238:	2000dc44 	.word	0x2000dc44
 801223c:	200093e0 	.word	0x200093e0
 8012240:	2000dbb4 	.word	0x2000dbb4
 8012244:	08014681 	.word	0x08014681
 8012248:	08014679 	.word	0x08014679
 801224c:	08014719 	.word	0x08014719
 8012250:	080147b5 	.word	0x080147b5

08012254 <rmw_context_fini>:
 8012254:	4b17      	ldr	r3, [pc, #92]	; (80122b4 <rmw_context_fini+0x60>)
 8012256:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8012258:	b570      	push	{r4, r5, r6, lr}
 801225a:	681c      	ldr	r4, [r3, #0]
 801225c:	4605      	mov	r5, r0
 801225e:	b334      	cbz	r4, 80122ae <rmw_context_fini+0x5a>
 8012260:	2600      	movs	r6, #0
 8012262:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012266:	6902      	ldr	r2, [r0, #16]
 8012268:	428a      	cmp	r2, r1
 801226a:	d018      	beq.n	801229e <rmw_context_fini+0x4a>
 801226c:	2c00      	cmp	r4, #0
 801226e:	d1f8      	bne.n	8012262 <rmw_context_fini+0xe>
 8012270:	b189      	cbz	r1, 8012296 <rmw_context_fini+0x42>
 8012272:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8012276:	789b      	ldrb	r3, [r3, #2]
 8012278:	2b01      	cmp	r3, #1
 801227a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 801227e:	bf14      	ite	ne
 8012280:	210a      	movne	r1, #10
 8012282:	2100      	moveq	r1, #0
 8012284:	f7fb f9d4 	bl	800d630 <uxr_delete_session_retries>
 8012288:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801228a:	f7f9 fceb 	bl	800bc64 <rmw_uxrce_fini_session_memory>
 801228e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8012290:	3010      	adds	r0, #16
 8012292:	f000 fda9 	bl	8012de8 <uxr_close_custom_transport>
 8012296:	2300      	movs	r3, #0
 8012298:	64eb      	str	r3, [r5, #76]	; 0x4c
 801229a:	4630      	mov	r0, r6
 801229c:	bd70      	pop	{r4, r5, r6, pc}
 801229e:	3018      	adds	r0, #24
 80122a0:	f7f8 ffd4 	bl	800b24c <rmw_destroy_node>
 80122a4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80122a6:	4606      	mov	r6, r0
 80122a8:	2c00      	cmp	r4, #0
 80122aa:	d1da      	bne.n	8012262 <rmw_context_fini+0xe>
 80122ac:	e7e0      	b.n	8012270 <rmw_context_fini+0x1c>
 80122ae:	4626      	mov	r6, r4
 80122b0:	e7de      	b.n	8012270 <rmw_context_fini+0x1c>
 80122b2:	bf00      	nop
 80122b4:	2000dbd4 	.word	0x2000dbd4

080122b8 <create_topic>:
 80122b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122bc:	4605      	mov	r5, r0
 80122be:	b084      	sub	sp, #16
 80122c0:	4822      	ldr	r0, [pc, #136]	; (801234c <create_topic+0x94>)
 80122c2:	460f      	mov	r7, r1
 80122c4:	4616      	mov	r6, r2
 80122c6:	f7ff fd01 	bl	8011ccc <get_memory>
 80122ca:	4604      	mov	r4, r0
 80122cc:	2800      	cmp	r0, #0
 80122ce:	d039      	beq.n	8012344 <create_topic+0x8c>
 80122d0:	692b      	ldr	r3, [r5, #16]
 80122d2:	6884      	ldr	r4, [r0, #8]
 80122d4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8012354 <create_topic+0x9c>
 80122d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122dc:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80122e0:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80122e4:	1c42      	adds	r2, r0, #1
 80122e6:	2102      	movs	r1, #2
 80122e8:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80122ec:	f7fa fa1a 	bl	800c724 <uxr_object_id>
 80122f0:	223c      	movs	r2, #60	; 0x3c
 80122f2:	6120      	str	r0, [r4, #16]
 80122f4:	4641      	mov	r1, r8
 80122f6:	4638      	mov	r0, r7
 80122f8:	f7f9 fe92 	bl	800c020 <generate_topic_name>
 80122fc:	b1f0      	cbz	r0, 801233c <create_topic+0x84>
 80122fe:	4f14      	ldr	r7, [pc, #80]	; (8012350 <create_topic+0x98>)
 8012300:	4630      	mov	r0, r6
 8012302:	2264      	movs	r2, #100	; 0x64
 8012304:	4639      	mov	r1, r7
 8012306:	f7f9 fe5b 	bl	800bfc0 <generate_type_name>
 801230a:	b1b8      	cbz	r0, 801233c <create_topic+0x84>
 801230c:	6928      	ldr	r0, [r5, #16]
 801230e:	2306      	movs	r3, #6
 8012310:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012314:	f8cd 8000 	str.w	r8, [sp]
 8012318:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801231c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012320:	6811      	ldr	r1, [r2, #0]
 8012322:	696b      	ldr	r3, [r5, #20]
 8012324:	6922      	ldr	r2, [r4, #16]
 8012326:	f7fa f879 	bl	800c41c <uxr_buffer_create_topic_bin>
 801232a:	4602      	mov	r2, r0
 801232c:	6928      	ldr	r0, [r5, #16]
 801232e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012332:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012336:	f7f9 fe0d 	bl	800bf54 <run_xrce_session>
 801233a:	b918      	cbnz	r0, 8012344 <create_topic+0x8c>
 801233c:	4620      	mov	r0, r4
 801233e:	f7f9 fd07 	bl	800bd50 <rmw_uxrce_fini_topic_memory>
 8012342:	2400      	movs	r4, #0
 8012344:	4620      	mov	r0, r4
 8012346:	b004      	add	sp, #16
 8012348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801234c:	2000dc34 	.word	0x2000dc34
 8012350:	2000dcc4 	.word	0x2000dcc4
 8012354:	2000dc88 	.word	0x2000dc88

08012358 <destroy_topic>:
 8012358:	b538      	push	{r3, r4, r5, lr}
 801235a:	6985      	ldr	r5, [r0, #24]
 801235c:	b1d5      	cbz	r5, 8012394 <destroy_topic+0x3c>
 801235e:	4604      	mov	r4, r0
 8012360:	6928      	ldr	r0, [r5, #16]
 8012362:	6922      	ldr	r2, [r4, #16]
 8012364:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012368:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801236c:	6819      	ldr	r1, [r3, #0]
 801236e:	f7f9 ffd7 	bl	800c320 <uxr_buffer_delete_entity>
 8012372:	4602      	mov	r2, r0
 8012374:	6928      	ldr	r0, [r5, #16]
 8012376:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801237a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801237e:	f7f9 fde9 	bl	800bf54 <run_xrce_session>
 8012382:	2800      	cmp	r0, #0
 8012384:	4620      	mov	r0, r4
 8012386:	bf14      	ite	ne
 8012388:	2400      	movne	r4, #0
 801238a:	2402      	moveq	r4, #2
 801238c:	f7f9 fce0 	bl	800bd50 <rmw_uxrce_fini_topic_memory>
 8012390:	4620      	mov	r0, r4
 8012392:	bd38      	pop	{r3, r4, r5, pc}
 8012394:	2401      	movs	r4, #1
 8012396:	4620      	mov	r0, r4
 8012398:	bd38      	pop	{r3, r4, r5, pc}
 801239a:	bf00      	nop

0801239c <rmw_send_request>:
 801239c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123a0:	4604      	mov	r4, r0
 80123a2:	6800      	ldr	r0, [r0, #0]
 80123a4:	b08b      	sub	sp, #44	; 0x2c
 80123a6:	460e      	mov	r6, r1
 80123a8:	4615      	mov	r5, r2
 80123aa:	b128      	cbz	r0, 80123b8 <rmw_send_request+0x1c>
 80123ac:	4b21      	ldr	r3, [pc, #132]	; (8012434 <rmw_send_request+0x98>)
 80123ae:	6819      	ldr	r1, [r3, #0]
 80123b0:	f7ed ff16 	bl	80001e0 <strcmp>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d139      	bne.n	801242c <rmw_send_request+0x90>
 80123b8:	6864      	ldr	r4, [r4, #4]
 80123ba:	6963      	ldr	r3, [r4, #20]
 80123bc:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	4798      	blx	r3
 80123c4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80123c8:	4630      	mov	r0, r6
 80123ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80123ce:	4798      	blx	r3
 80123d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80123d4:	9000      	str	r0, [sp, #0]
 80123d6:	6922      	ldr	r2, [r4, #16]
 80123d8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80123da:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80123de:	ab02      	add	r3, sp, #8
 80123e0:	f7fb fd40 	bl	800de64 <uxr_prepare_output_stream>
 80123e4:	2700      	movs	r7, #0
 80123e6:	6028      	str	r0, [r5, #0]
 80123e8:	606f      	str	r7, [r5, #4]
 80123ea:	b198      	cbz	r0, 8012414 <rmw_send_request+0x78>
 80123ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80123f0:	a902      	add	r1, sp, #8
 80123f2:	4630      	mov	r0, r6
 80123f4:	4798      	blx	r3
 80123f6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80123fa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80123fe:	2b01      	cmp	r3, #1
 8012400:	d00c      	beq.n	801241c <rmw_send_request+0x80>
 8012402:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012404:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012408:	f7fa ffca 	bl	800d3a0 <uxr_run_session_until_confirm_delivery>
 801240c:	4638      	mov	r0, r7
 801240e:	b00b      	add	sp, #44	; 0x2c
 8012410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012414:	2001      	movs	r0, #1
 8012416:	b00b      	add	sp, #44	; 0x2c
 8012418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801241c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012420:	f7fa fbfe 	bl	800cc20 <uxr_flash_output_streams>
 8012424:	4638      	mov	r0, r7
 8012426:	b00b      	add	sp, #44	; 0x2c
 8012428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801242c:	200c      	movs	r0, #12
 801242e:	b00b      	add	sp, #44	; 0x2c
 8012430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012434:	08016cf4 	.word	0x08016cf4

08012438 <rmw_take_request>:
 8012438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801243c:	4605      	mov	r5, r0
 801243e:	6800      	ldr	r0, [r0, #0]
 8012440:	b089      	sub	sp, #36	; 0x24
 8012442:	460c      	mov	r4, r1
 8012444:	4690      	mov	r8, r2
 8012446:	461e      	mov	r6, r3
 8012448:	b128      	cbz	r0, 8012456 <rmw_take_request+0x1e>
 801244a:	4b28      	ldr	r3, [pc, #160]	; (80124ec <rmw_take_request+0xb4>)
 801244c:	6819      	ldr	r1, [r3, #0]
 801244e:	f7ed fec7 	bl	80001e0 <strcmp>
 8012452:	2800      	cmp	r0, #0
 8012454:	d146      	bne.n	80124e4 <rmw_take_request+0xac>
 8012456:	b10e      	cbz	r6, 801245c <rmw_take_request+0x24>
 8012458:	2300      	movs	r3, #0
 801245a:	7033      	strb	r3, [r6, #0]
 801245c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012460:	f7f9 fcfa 	bl	800be58 <rmw_uxrce_clean_expired_static_input_buffer>
 8012464:	4648      	mov	r0, r9
 8012466:	f7f9 fccf 	bl	800be08 <rmw_uxrce_find_static_input_buffer_by_owner>
 801246a:	4607      	mov	r7, r0
 801246c:	b3b0      	cbz	r0, 80124dc <rmw_take_request+0xa4>
 801246e:	6885      	ldr	r5, [r0, #8]
 8012470:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 8012474:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 8012478:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801247c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8012480:	7423      	strb	r3, [r4, #16]
 8012482:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 8012486:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 801248a:	74e2      	strb	r2, [r4, #19]
 801248c:	f8a4 3011 	strh.w	r3, [r4, #17]
 8012490:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8012494:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8012498:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 801249c:	61e1      	str	r1, [r4, #28]
 801249e:	6162      	str	r2, [r4, #20]
 80124a0:	61a3      	str	r3, [r4, #24]
 80124a2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	4798      	blx	r3
 80124aa:	6844      	ldr	r4, [r0, #4]
 80124ac:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80124b0:	f105 0110 	add.w	r1, r5, #16
 80124b4:	4668      	mov	r0, sp
 80124b6:	f7f6 fead 	bl	8009214 <ucdr_init_buffer>
 80124ba:	68e3      	ldr	r3, [r4, #12]
 80124bc:	4641      	mov	r1, r8
 80124be:	4668      	mov	r0, sp
 80124c0:	4798      	blx	r3
 80124c2:	4639      	mov	r1, r7
 80124c4:	4604      	mov	r4, r0
 80124c6:	480a      	ldr	r0, [pc, #40]	; (80124f0 <rmw_take_request+0xb8>)
 80124c8:	f7ff fc10 	bl	8011cec <put_memory>
 80124cc:	b106      	cbz	r6, 80124d0 <rmw_take_request+0x98>
 80124ce:	7034      	strb	r4, [r6, #0]
 80124d0:	f084 0001 	eor.w	r0, r4, #1
 80124d4:	b2c0      	uxtb	r0, r0
 80124d6:	b009      	add	sp, #36	; 0x24
 80124d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124dc:	2001      	movs	r0, #1
 80124de:	b009      	add	sp, #36	; 0x24
 80124e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124e4:	200c      	movs	r0, #12
 80124e6:	b009      	add	sp, #36	; 0x24
 80124e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124ec:	08016cf4 	.word	0x08016cf4
 80124f0:	2000dc14 	.word	0x2000dc14

080124f4 <rmw_send_response>:
 80124f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124f6:	4605      	mov	r5, r0
 80124f8:	6800      	ldr	r0, [r0, #0]
 80124fa:	b091      	sub	sp, #68	; 0x44
 80124fc:	460c      	mov	r4, r1
 80124fe:	4616      	mov	r6, r2
 8012500:	b128      	cbz	r0, 801250e <rmw_send_response+0x1a>
 8012502:	4b29      	ldr	r3, [pc, #164]	; (80125a8 <rmw_send_response+0xb4>)
 8012504:	6819      	ldr	r1, [r3, #0]
 8012506:	f7ed fe6b 	bl	80001e0 <strcmp>
 801250a:	2800      	cmp	r0, #0
 801250c:	d141      	bne.n	8012592 <rmw_send_response+0x9e>
 801250e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8012512:	9306      	str	r3, [sp, #24]
 8012514:	4623      	mov	r3, r4
 8012516:	9207      	str	r2, [sp, #28]
 8012518:	f813 2b01 	ldrb.w	r2, [r3], #1
 801251c:	686d      	ldr	r5, [r5, #4]
 801251e:	789b      	ldrb	r3, [r3, #2]
 8012520:	68a1      	ldr	r1, [r4, #8]
 8012522:	f88d 2017 	strb.w	r2, [sp, #23]
 8012526:	f88d 3016 	strb.w	r3, [sp, #22]
 801252a:	68e2      	ldr	r2, [r4, #12]
 801252c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8012530:	6860      	ldr	r0, [r4, #4]
 8012532:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012536:	ab02      	add	r3, sp, #8
 8012538:	c307      	stmia	r3!, {r0, r1, r2}
 801253a:	696b      	ldr	r3, [r5, #20]
 801253c:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	4798      	blx	r3
 8012542:	6844      	ldr	r4, [r0, #4]
 8012544:	4630      	mov	r0, r6
 8012546:	6923      	ldr	r3, [r4, #16]
 8012548:	4798      	blx	r3
 801254a:	f100 0318 	add.w	r3, r0, #24
 801254e:	6938      	ldr	r0, [r7, #16]
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	692a      	ldr	r2, [r5, #16]
 8012554:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8012556:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801255a:	ab08      	add	r3, sp, #32
 801255c:	f7fb fc82 	bl	800de64 <uxr_prepare_output_stream>
 8012560:	b910      	cbnz	r0, 8012568 <rmw_send_response+0x74>
 8012562:	2001      	movs	r0, #1
 8012564:	b011      	add	sp, #68	; 0x44
 8012566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012568:	a902      	add	r1, sp, #8
 801256a:	a808      	add	r0, sp, #32
 801256c:	f7fc fce8 	bl	800ef40 <uxr_serialize_SampleIdentity>
 8012570:	68a3      	ldr	r3, [r4, #8]
 8012572:	a908      	add	r1, sp, #32
 8012574:	4630      	mov	r0, r6
 8012576:	4798      	blx	r3
 8012578:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 801257c:	6938      	ldr	r0, [r7, #16]
 801257e:	2b01      	cmp	r3, #1
 8012580:	d00a      	beq.n	8012598 <rmw_send_response+0xa4>
 8012582:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8012584:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012588:	f7fa ff0a 	bl	800d3a0 <uxr_run_session_until_confirm_delivery>
 801258c:	2000      	movs	r0, #0
 801258e:	b011      	add	sp, #68	; 0x44
 8012590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012592:	200c      	movs	r0, #12
 8012594:	b011      	add	sp, #68	; 0x44
 8012596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012598:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801259c:	f7fa fb40 	bl	800cc20 <uxr_flash_output_streams>
 80125a0:	2000      	movs	r0, #0
 80125a2:	b011      	add	sp, #68	; 0x44
 80125a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125a6:	bf00      	nop
 80125a8:	08016cf4 	.word	0x08016cf4

080125ac <rmw_take_response>:
 80125ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b0:	4604      	mov	r4, r0
 80125b2:	6800      	ldr	r0, [r0, #0]
 80125b4:	b088      	sub	sp, #32
 80125b6:	4688      	mov	r8, r1
 80125b8:	4617      	mov	r7, r2
 80125ba:	461d      	mov	r5, r3
 80125bc:	b120      	cbz	r0, 80125c8 <rmw_take_response+0x1c>
 80125be:	4b1e      	ldr	r3, [pc, #120]	; (8012638 <rmw_take_response+0x8c>)
 80125c0:	6819      	ldr	r1, [r3, #0]
 80125c2:	f7ed fe0d 	bl	80001e0 <strcmp>
 80125c6:	bb78      	cbnz	r0, 8012628 <rmw_take_response+0x7c>
 80125c8:	b10d      	cbz	r5, 80125ce <rmw_take_response+0x22>
 80125ca:	2300      	movs	r3, #0
 80125cc:	702b      	strb	r3, [r5, #0]
 80125ce:	6864      	ldr	r4, [r4, #4]
 80125d0:	f7f9 fc42 	bl	800be58 <rmw_uxrce_clean_expired_static_input_buffer>
 80125d4:	4620      	mov	r0, r4
 80125d6:	f7f9 fc17 	bl	800be08 <rmw_uxrce_find_static_input_buffer_by_owner>
 80125da:	4606      	mov	r6, r0
 80125dc:	b340      	cbz	r0, 8012630 <rmw_take_response+0x84>
 80125de:	6963      	ldr	r3, [r4, #20]
 80125e0:	6884      	ldr	r4, [r0, #8]
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80125e8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80125ec:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80125f0:	4798      	blx	r3
 80125f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80125f6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80125fa:	f104 0110 	add.w	r1, r4, #16
 80125fe:	4668      	mov	r0, sp
 8012600:	f7f6 fe08 	bl	8009214 <ucdr_init_buffer>
 8012604:	4639      	mov	r1, r7
 8012606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801260a:	4668      	mov	r0, sp
 801260c:	4798      	blx	r3
 801260e:	4631      	mov	r1, r6
 8012610:	4604      	mov	r4, r0
 8012612:	480a      	ldr	r0, [pc, #40]	; (801263c <rmw_take_response+0x90>)
 8012614:	f7ff fb6a 	bl	8011cec <put_memory>
 8012618:	b105      	cbz	r5, 801261c <rmw_take_response+0x70>
 801261a:	702c      	strb	r4, [r5, #0]
 801261c:	f084 0001 	eor.w	r0, r4, #1
 8012620:	b2c0      	uxtb	r0, r0
 8012622:	b008      	add	sp, #32
 8012624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012628:	200c      	movs	r0, #12
 801262a:	b008      	add	sp, #32
 801262c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012630:	2001      	movs	r0, #1
 8012632:	b008      	add	sp, #32
 8012634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012638:	08016cf4 	.word	0x08016cf4
 801263c:	2000dc14 	.word	0x2000dc14

08012640 <rmw_uxrce_transport_init>:
 8012640:	b508      	push	{r3, lr}
 8012642:	b108      	cbz	r0, 8012648 <rmw_uxrce_transport_init+0x8>
 8012644:	f100 0210 	add.w	r2, r0, #16
 8012648:	b139      	cbz	r1, 801265a <rmw_uxrce_transport_init+0x1a>
 801264a:	6949      	ldr	r1, [r1, #20]
 801264c:	4610      	mov	r0, r2
 801264e:	f000 fb97 	bl	8012d80 <uxr_init_custom_transport>
 8012652:	f080 0001 	eor.w	r0, r0, #1
 8012656:	b2c0      	uxtb	r0, r0
 8012658:	bd08      	pop	{r3, pc}
 801265a:	4b04      	ldr	r3, [pc, #16]	; (801266c <rmw_uxrce_transport_init+0x2c>)
 801265c:	4610      	mov	r0, r2
 801265e:	6859      	ldr	r1, [r3, #4]
 8012660:	f000 fb8e 	bl	8012d80 <uxr_init_custom_transport>
 8012664:	f080 0001 	eor.w	r0, r0, #1
 8012668:	b2c0      	uxtb	r0, r0
 801266a:	bd08      	pop	{r3, pc}
 801266c:	200092ac 	.word	0x200092ac

08012670 <rmw_wait>:
 8012670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012674:	b089      	sub	sp, #36	; 0x24
 8012676:	4605      	mov	r5, r0
 8012678:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801267a:	460e      	mov	r6, r1
 801267c:	4698      	mov	r8, r3
 801267e:	4691      	mov	r9, r2
 8012680:	2a00      	cmp	r2, #0
 8012682:	f000 810a 	beq.w	801289a <rmw_wait+0x22a>
 8012686:	b16c      	cbz	r4, 80126a4 <rmw_wait+0x34>
 8012688:	4bae      	ldr	r3, [pc, #696]	; (8012944 <rmw_wait+0x2d4>)
 801268a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801268c:	af04      	add	r7, sp, #16
 801268e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8012692:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012696:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801269a:	f7ff fa1d 	bl	8011ad8 <rmw_time_equal>
 801269e:	2800      	cmp	r0, #0
 80126a0:	f000 8127 	beq.w	80128f2 <rmw_wait+0x282>
 80126a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80126a8:	f7f9 fbd6 	bl	800be58 <rmw_uxrce_clean_expired_static_input_buffer>
 80126ac:	4ba6      	ldr	r3, [pc, #664]	; (8012948 <rmw_wait+0x2d8>)
 80126ae:	681c      	ldr	r4, [r3, #0]
 80126b0:	b14c      	cbz	r4, 80126c6 <rmw_wait+0x56>
 80126b2:	4623      	mov	r3, r4
 80126b4:	2100      	movs	r1, #0
 80126b6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80126ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80126be:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d1f7      	bne.n	80126b6 <rmw_wait+0x46>
 80126c6:	f1b9 0f00 	cmp.w	r9, #0
 80126ca:	d011      	beq.n	80126f0 <rmw_wait+0x80>
 80126cc:	f8d9 1000 	ldr.w	r1, [r9]
 80126d0:	b171      	cbz	r1, 80126f0 <rmw_wait+0x80>
 80126d2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80126d6:	2300      	movs	r3, #0
 80126d8:	2001      	movs	r0, #1
 80126da:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80126de:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80126e0:	6912      	ldr	r2, [r2, #16]
 80126e2:	3301      	adds	r3, #1
 80126e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80126e8:	4299      	cmp	r1, r3
 80126ea:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80126ee:	d1f4      	bne.n	80126da <rmw_wait+0x6a>
 80126f0:	f1b8 0f00 	cmp.w	r8, #0
 80126f4:	d011      	beq.n	801271a <rmw_wait+0xaa>
 80126f6:	f8d8 1000 	ldr.w	r1, [r8]
 80126fa:	b171      	cbz	r1, 801271a <rmw_wait+0xaa>
 80126fc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8012700:	2300      	movs	r3, #0
 8012702:	2001      	movs	r0, #1
 8012704:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012708:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801270a:	6912      	ldr	r2, [r2, #16]
 801270c:	3301      	adds	r3, #1
 801270e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012712:	4299      	cmp	r1, r3
 8012714:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8012718:	d1f4      	bne.n	8012704 <rmw_wait+0x94>
 801271a:	b185      	cbz	r5, 801273e <rmw_wait+0xce>
 801271c:	6829      	ldr	r1, [r5, #0]
 801271e:	b171      	cbz	r1, 801273e <rmw_wait+0xce>
 8012720:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8012724:	2300      	movs	r3, #0
 8012726:	2001      	movs	r0, #1
 8012728:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801272c:	6a12      	ldr	r2, [r2, #32]
 801272e:	6912      	ldr	r2, [r2, #16]
 8012730:	3301      	adds	r3, #1
 8012732:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012736:	4299      	cmp	r1, r3
 8012738:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801273c:	d1f4      	bne.n	8012728 <rmw_wait+0xb8>
 801273e:	b34c      	cbz	r4, 8012794 <rmw_wait+0x124>
 8012740:	4622      	mov	r2, r4
 8012742:	2300      	movs	r3, #0
 8012744:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8012748:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801274c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8012750:	440b      	add	r3, r1
 8012752:	b2db      	uxtb	r3, r3
 8012754:	2a00      	cmp	r2, #0
 8012756:	d1f5      	bne.n	8012744 <rmw_wait+0xd4>
 8012758:	2b00      	cmp	r3, #0
 801275a:	f000 8084 	beq.w	8012866 <rmw_wait+0x1f6>
 801275e:	1c7a      	adds	r2, r7, #1
 8012760:	d00d      	beq.n	801277e <rmw_wait+0x10e>
 8012762:	ee07 7a90 	vmov	s15, r7
 8012766:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801276a:	ee07 3a90 	vmov	s15, r3
 801276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012776:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801277a:	ee17 7a90 	vmov	r7, s15
 801277e:	68a0      	ldr	r0, [r4, #8]
 8012780:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8012784:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8012788:	2b00      	cmp	r3, #0
 801278a:	f040 8090 	bne.w	80128ae <rmw_wait+0x23e>
 801278e:	6864      	ldr	r4, [r4, #4]
 8012790:	2c00      	cmp	r4, #0
 8012792:	d1f4      	bne.n	801277e <rmw_wait+0x10e>
 8012794:	f1b9 0f00 	cmp.w	r9, #0
 8012798:	f000 80bc 	beq.w	8012914 <rmw_wait+0x2a4>
 801279c:	f8d9 7000 	ldr.w	r7, [r9]
 80127a0:	2f00      	cmp	r7, #0
 80127a2:	f000 808e 	beq.w	80128c2 <rmw_wait+0x252>
 80127a6:	2400      	movs	r4, #0
 80127a8:	4627      	mov	r7, r4
 80127aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80127ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80127b2:	f7f9 fb29 	bl	800be08 <rmw_uxrce_find_static_input_buffer_by_owner>
 80127b6:	2800      	cmp	r0, #0
 80127b8:	d05f      	beq.n	801287a <rmw_wait+0x20a>
 80127ba:	f8d9 3000 	ldr.w	r3, [r9]
 80127be:	3401      	adds	r4, #1
 80127c0:	42a3      	cmp	r3, r4
 80127c2:	f04f 0701 	mov.w	r7, #1
 80127c6:	d8f0      	bhi.n	80127aa <rmw_wait+0x13a>
 80127c8:	f1b8 0f00 	cmp.w	r8, #0
 80127cc:	d012      	beq.n	80127f4 <rmw_wait+0x184>
 80127ce:	f8d8 3000 	ldr.w	r3, [r8]
 80127d2:	b17b      	cbz	r3, 80127f4 <rmw_wait+0x184>
 80127d4:	2400      	movs	r4, #0
 80127d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80127da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80127de:	f7f9 fb13 	bl	800be08 <rmw_uxrce_find_static_input_buffer_by_owner>
 80127e2:	2800      	cmp	r0, #0
 80127e4:	d051      	beq.n	801288a <rmw_wait+0x21a>
 80127e6:	f8d8 3000 	ldr.w	r3, [r8]
 80127ea:	3401      	adds	r4, #1
 80127ec:	42a3      	cmp	r3, r4
 80127ee:	f04f 0701 	mov.w	r7, #1
 80127f2:	d8f0      	bhi.n	80127d6 <rmw_wait+0x166>
 80127f4:	b1dd      	cbz	r5, 801282e <rmw_wait+0x1be>
 80127f6:	682b      	ldr	r3, [r5, #0]
 80127f8:	b1cb      	cbz	r3, 801282e <rmw_wait+0x1be>
 80127fa:	2400      	movs	r4, #0
 80127fc:	686b      	ldr	r3, [r5, #4]
 80127fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012802:	f7f9 fb01 	bl	800be08 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012806:	b158      	cbz	r0, 8012820 <rmw_wait+0x1b0>
 8012808:	682b      	ldr	r3, [r5, #0]
 801280a:	3401      	adds	r4, #1
 801280c:	42a3      	cmp	r3, r4
 801280e:	d969      	bls.n	80128e4 <rmw_wait+0x274>
 8012810:	686b      	ldr	r3, [r5, #4]
 8012812:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012816:	2701      	movs	r7, #1
 8012818:	f7f9 faf6 	bl	800be08 <rmw_uxrce_find_static_input_buffer_by_owner>
 801281c:	2800      	cmp	r0, #0
 801281e:	d1f3      	bne.n	8012808 <rmw_wait+0x198>
 8012820:	e9d5 3200 	ldrd	r3, r2, [r5]
 8012824:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012828:	3401      	adds	r4, #1
 801282a:	42a3      	cmp	r3, r4
 801282c:	d8e6      	bhi.n	80127fc <rmw_wait+0x18c>
 801282e:	b1a6      	cbz	r6, 801285a <rmw_wait+0x1ea>
 8012830:	6834      	ldr	r4, [r6, #0]
 8012832:	b194      	cbz	r4, 801285a <rmw_wait+0x1ea>
 8012834:	2300      	movs	r3, #0
 8012836:	461d      	mov	r5, r3
 8012838:	e004      	b.n	8012844 <rmw_wait+0x1d4>
 801283a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801283e:	3301      	adds	r3, #1
 8012840:	42a3      	cmp	r3, r4
 8012842:	d00a      	beq.n	801285a <rmw_wait+0x1ea>
 8012844:	6870      	ldr	r0, [r6, #4]
 8012846:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801284a:	7c0a      	ldrb	r2, [r1, #16]
 801284c:	2a00      	cmp	r2, #0
 801284e:	d0f4      	beq.n	801283a <rmw_wait+0x1ca>
 8012850:	3301      	adds	r3, #1
 8012852:	42a3      	cmp	r3, r4
 8012854:	740d      	strb	r5, [r1, #16]
 8012856:	4617      	mov	r7, r2
 8012858:	d1f4      	bne.n	8012844 <rmw_wait+0x1d4>
 801285a:	2f00      	cmp	r7, #0
 801285c:	d03e      	beq.n	80128dc <rmw_wait+0x26c>
 801285e:	2000      	movs	r0, #0
 8012860:	b009      	add	sp, #36	; 0x24
 8012862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012866:	68a0      	ldr	r0, [r4, #8]
 8012868:	2100      	movs	r1, #0
 801286a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801286e:	f7fa fd5d 	bl	800d32c <uxr_run_session_timeout>
 8012872:	6864      	ldr	r4, [r4, #4]
 8012874:	2c00      	cmp	r4, #0
 8012876:	d1f6      	bne.n	8012866 <rmw_wait+0x1f6>
 8012878:	e78c      	b.n	8012794 <rmw_wait+0x124>
 801287a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801287e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012882:	3401      	adds	r4, #1
 8012884:	42a3      	cmp	r3, r4
 8012886:	d890      	bhi.n	80127aa <rmw_wait+0x13a>
 8012888:	e79e      	b.n	80127c8 <rmw_wait+0x158>
 801288a:	e9d8 3200 	ldrd	r3, r2, [r8]
 801288e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012892:	3401      	adds	r4, #1
 8012894:	429c      	cmp	r4, r3
 8012896:	d39e      	bcc.n	80127d6 <rmw_wait+0x166>
 8012898:	e7ac      	b.n	80127f4 <rmw_wait+0x184>
 801289a:	2b00      	cmp	r3, #0
 801289c:	f47f aef3 	bne.w	8012686 <rmw_wait+0x16>
 80128a0:	2800      	cmp	r0, #0
 80128a2:	f47f aef0 	bne.w	8012686 <rmw_wait+0x16>
 80128a6:	2900      	cmp	r1, #0
 80128a8:	f47f aeed 	bne.w	8012686 <rmw_wait+0x16>
 80128ac:	e7d7      	b.n	801285e <rmw_wait+0x1ee>
 80128ae:	4639      	mov	r1, r7
 80128b0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80128b4:	f7fa fd54 	bl	800d360 <uxr_run_session_until_data>
 80128b8:	6864      	ldr	r4, [r4, #4]
 80128ba:	2c00      	cmp	r4, #0
 80128bc:	f47f af5f 	bne.w	801277e <rmw_wait+0x10e>
 80128c0:	e768      	b.n	8012794 <rmw_wait+0x124>
 80128c2:	f1b8 0f00 	cmp.w	r8, #0
 80128c6:	d032      	beq.n	801292e <rmw_wait+0x2be>
 80128c8:	f8d8 3000 	ldr.w	r3, [r8]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d181      	bne.n	80127d4 <rmw_wait+0x164>
 80128d0:	461f      	mov	r7, r3
 80128d2:	2d00      	cmp	r5, #0
 80128d4:	d18f      	bne.n	80127f6 <rmw_wait+0x186>
 80128d6:	462f      	mov	r7, r5
 80128d8:	2e00      	cmp	r6, #0
 80128da:	d1a9      	bne.n	8012830 <rmw_wait+0x1c0>
 80128dc:	2002      	movs	r0, #2
 80128de:	b009      	add	sp, #36	; 0x24
 80128e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128e4:	2e00      	cmp	r6, #0
 80128e6:	d0ba      	beq.n	801285e <rmw_wait+0x1ee>
 80128e8:	6834      	ldr	r4, [r6, #0]
 80128ea:	2701      	movs	r7, #1
 80128ec:	2c00      	cmp	r4, #0
 80128ee:	d1a1      	bne.n	8012834 <rmw_wait+0x1c4>
 80128f0:	e7b5      	b.n	801285e <rmw_wait+0x1ee>
 80128f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80128f6:	f7ff f943 	bl	8011b80 <rmw_time_total_nsec>
 80128fa:	2300      	movs	r3, #0
 80128fc:	4a13      	ldr	r2, [pc, #76]	; (801294c <rmw_wait+0x2dc>)
 80128fe:	f7ed fdaf 	bl	8000460 <__aeabi_uldivmod>
 8012902:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8012906:	f171 0300 	sbcs.w	r3, r1, #0
 801290a:	4607      	mov	r7, r0
 801290c:	bfa8      	it	ge
 801290e:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8012912:	e6c9      	b.n	80126a8 <rmw_wait+0x38>
 8012914:	f1b8 0f00 	cmp.w	r8, #0
 8012918:	d009      	beq.n	801292e <rmw_wait+0x2be>
 801291a:	f8d8 3000 	ldr.w	r3, [r8]
 801291e:	464f      	mov	r7, r9
 8012920:	2b00      	cmp	r3, #0
 8012922:	f47f af57 	bne.w	80127d4 <rmw_wait+0x164>
 8012926:	2d00      	cmp	r5, #0
 8012928:	f47f af65 	bne.w	80127f6 <rmw_wait+0x186>
 801292c:	e7d3      	b.n	80128d6 <rmw_wait+0x266>
 801292e:	b17d      	cbz	r5, 8012950 <rmw_wait+0x2e0>
 8012930:	682b      	ldr	r3, [r5, #0]
 8012932:	4647      	mov	r7, r8
 8012934:	2b00      	cmp	r3, #0
 8012936:	f47f af60 	bne.w	80127fa <rmw_wait+0x18a>
 801293a:	2e00      	cmp	r6, #0
 801293c:	f47f af78 	bne.w	8012830 <rmw_wait+0x1c0>
 8012940:	e7cc      	b.n	80128dc <rmw_wait+0x26c>
 8012942:	bf00      	nop
 8012944:	080161c8 	.word	0x080161c8
 8012948:	2000dc04 	.word	0x2000dc04
 801294c:	000f4240 	.word	0x000f4240
 8012950:	2e00      	cmp	r6, #0
 8012952:	d0c3      	beq.n	80128dc <rmw_wait+0x26c>
 8012954:	6834      	ldr	r4, [r6, #0]
 8012956:	462f      	mov	r7, r5
 8012958:	2c00      	cmp	r4, #0
 801295a:	f47f af6b 	bne.w	8012834 <rmw_wait+0x1c4>
 801295e:	e7bd      	b.n	80128dc <rmw_wait+0x26c>

08012960 <rmw_create_wait_set>:
 8012960:	b508      	push	{r3, lr}
 8012962:	4803      	ldr	r0, [pc, #12]	; (8012970 <rmw_create_wait_set+0x10>)
 8012964:	f7ff f9b2 	bl	8011ccc <get_memory>
 8012968:	b108      	cbz	r0, 801296e <rmw_create_wait_set+0xe>
 801296a:	6880      	ldr	r0, [r0, #8]
 801296c:	3010      	adds	r0, #16
 801296e:	bd08      	pop	{r3, pc}
 8012970:	2000dc44 	.word	0x2000dc44

08012974 <rmw_destroy_wait_set>:
 8012974:	b508      	push	{r3, lr}
 8012976:	4b08      	ldr	r3, [pc, #32]	; (8012998 <rmw_destroy_wait_set+0x24>)
 8012978:	6819      	ldr	r1, [r3, #0]
 801297a:	b911      	cbnz	r1, 8012982 <rmw_destroy_wait_set+0xe>
 801297c:	e00a      	b.n	8012994 <rmw_destroy_wait_set+0x20>
 801297e:	6849      	ldr	r1, [r1, #4]
 8012980:	b141      	cbz	r1, 8012994 <rmw_destroy_wait_set+0x20>
 8012982:	688b      	ldr	r3, [r1, #8]
 8012984:	3310      	adds	r3, #16
 8012986:	4298      	cmp	r0, r3
 8012988:	d1f9      	bne.n	801297e <rmw_destroy_wait_set+0xa>
 801298a:	4803      	ldr	r0, [pc, #12]	; (8012998 <rmw_destroy_wait_set+0x24>)
 801298c:	f7ff f9ae 	bl	8011cec <put_memory>
 8012990:	2000      	movs	r0, #0
 8012992:	bd08      	pop	{r3, pc}
 8012994:	2001      	movs	r0, #1
 8012996:	bd08      	pop	{r3, pc}
 8012998:	2000dc44 	.word	0x2000dc44

0801299c <rmw_uros_epoch_nanos>:
 801299c:	4b05      	ldr	r3, [pc, #20]	; (80129b4 <rmw_uros_epoch_nanos+0x18>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	b123      	cbz	r3, 80129ac <rmw_uros_epoch_nanos+0x10>
 80129a2:	6898      	ldr	r0, [r3, #8]
 80129a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80129a8:	f7fa b930 	b.w	800cc0c <uxr_epoch_nanos>
 80129ac:	2000      	movs	r0, #0
 80129ae:	2100      	movs	r1, #0
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop
 80129b4:	2000dc04 	.word	0x2000dc04

080129b8 <std_msgs__msg__String__init>:
 80129b8:	b538      	push	{r3, r4, r5, lr}
 80129ba:	4604      	mov	r4, r0
 80129bc:	b128      	cbz	r0, 80129ca <std_msgs__msg__String__init+0x12>
 80129be:	f001 ff43 	bl	8014848 <rosidl_runtime_c__String__init>
 80129c2:	4605      	mov	r5, r0
 80129c4:	b120      	cbz	r0, 80129d0 <std_msgs__msg__String__init+0x18>
 80129c6:	4628      	mov	r0, r5
 80129c8:	bd38      	pop	{r3, r4, r5, pc}
 80129ca:	4605      	mov	r5, r0
 80129cc:	4628      	mov	r0, r5
 80129ce:	bd38      	pop	{r3, r4, r5, pc}
 80129d0:	4620      	mov	r0, r4
 80129d2:	f001 ff4f 	bl	8014874 <rosidl_runtime_c__String__fini>
 80129d6:	4628      	mov	r0, r5
 80129d8:	bd38      	pop	{r3, r4, r5, pc}
 80129da:	bf00      	nop

080129dc <std_msgs__msg__String__fini>:
 80129dc:	b108      	cbz	r0, 80129e2 <std_msgs__msg__String__fini+0x6>
 80129de:	f001 bf49 	b.w	8014874 <rosidl_runtime_c__String__fini>
 80129e2:	4770      	bx	lr

080129e4 <ucdr_serialize_endian_array_char>:
 80129e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e8:	4619      	mov	r1, r3
 80129ea:	461f      	mov	r7, r3
 80129ec:	4605      	mov	r5, r0
 80129ee:	4690      	mov	r8, r2
 80129f0:	f7f6 fbbc 	bl	800916c <ucdr_check_buffer_available_for>
 80129f4:	b9e0      	cbnz	r0, 8012a30 <ucdr_serialize_endian_array_char+0x4c>
 80129f6:	463e      	mov	r6, r7
 80129f8:	e009      	b.n	8012a0e <ucdr_serialize_endian_array_char+0x2a>
 80129fa:	68a8      	ldr	r0, [r5, #8]
 80129fc:	f002 fd3d 	bl	801547a <memcpy>
 8012a00:	68ab      	ldr	r3, [r5, #8]
 8012a02:	6928      	ldr	r0, [r5, #16]
 8012a04:	4423      	add	r3, r4
 8012a06:	4420      	add	r0, r4
 8012a08:	1b36      	subs	r6, r6, r4
 8012a0a:	60ab      	str	r3, [r5, #8]
 8012a0c:	6128      	str	r0, [r5, #16]
 8012a0e:	4631      	mov	r1, r6
 8012a10:	2201      	movs	r2, #1
 8012a12:	4628      	mov	r0, r5
 8012a14:	f7f6 fc32 	bl	800927c <ucdr_check_final_buffer_behavior_array>
 8012a18:	1bb9      	subs	r1, r7, r6
 8012a1a:	4441      	add	r1, r8
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	4602      	mov	r2, r0
 8012a20:	2800      	cmp	r0, #0
 8012a22:	d1ea      	bne.n	80129fa <ucdr_serialize_endian_array_char+0x16>
 8012a24:	2301      	movs	r3, #1
 8012a26:	7da8      	ldrb	r0, [r5, #22]
 8012a28:	756b      	strb	r3, [r5, #21]
 8012a2a:	4058      	eors	r0, r3
 8012a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a30:	463a      	mov	r2, r7
 8012a32:	68a8      	ldr	r0, [r5, #8]
 8012a34:	4641      	mov	r1, r8
 8012a36:	f002 fd20 	bl	801547a <memcpy>
 8012a3a:	68aa      	ldr	r2, [r5, #8]
 8012a3c:	692b      	ldr	r3, [r5, #16]
 8012a3e:	443a      	add	r2, r7
 8012a40:	443b      	add	r3, r7
 8012a42:	60aa      	str	r2, [r5, #8]
 8012a44:	612b      	str	r3, [r5, #16]
 8012a46:	e7ed      	b.n	8012a24 <ucdr_serialize_endian_array_char+0x40>

08012a48 <ucdr_deserialize_endian_array_char>:
 8012a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	461f      	mov	r7, r3
 8012a50:	4605      	mov	r5, r0
 8012a52:	4690      	mov	r8, r2
 8012a54:	f7f6 fb8a 	bl	800916c <ucdr_check_buffer_available_for>
 8012a58:	b9e0      	cbnz	r0, 8012a94 <ucdr_deserialize_endian_array_char+0x4c>
 8012a5a:	463e      	mov	r6, r7
 8012a5c:	e009      	b.n	8012a72 <ucdr_deserialize_endian_array_char+0x2a>
 8012a5e:	68a9      	ldr	r1, [r5, #8]
 8012a60:	f002 fd0b 	bl	801547a <memcpy>
 8012a64:	68ab      	ldr	r3, [r5, #8]
 8012a66:	6928      	ldr	r0, [r5, #16]
 8012a68:	4423      	add	r3, r4
 8012a6a:	4420      	add	r0, r4
 8012a6c:	1b36      	subs	r6, r6, r4
 8012a6e:	60ab      	str	r3, [r5, #8]
 8012a70:	6128      	str	r0, [r5, #16]
 8012a72:	2201      	movs	r2, #1
 8012a74:	4631      	mov	r1, r6
 8012a76:	4628      	mov	r0, r5
 8012a78:	f7f6 fc00 	bl	800927c <ucdr_check_final_buffer_behavior_array>
 8012a7c:	4604      	mov	r4, r0
 8012a7e:	1bb8      	subs	r0, r7, r6
 8012a80:	4440      	add	r0, r8
 8012a82:	4622      	mov	r2, r4
 8012a84:	2c00      	cmp	r4, #0
 8012a86:	d1ea      	bne.n	8012a5e <ucdr_deserialize_endian_array_char+0x16>
 8012a88:	2301      	movs	r3, #1
 8012a8a:	7da8      	ldrb	r0, [r5, #22]
 8012a8c:	756b      	strb	r3, [r5, #21]
 8012a8e:	4058      	eors	r0, r3
 8012a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a94:	463a      	mov	r2, r7
 8012a96:	68a9      	ldr	r1, [r5, #8]
 8012a98:	4640      	mov	r0, r8
 8012a9a:	f002 fcee 	bl	801547a <memcpy>
 8012a9e:	68aa      	ldr	r2, [r5, #8]
 8012aa0:	692b      	ldr	r3, [r5, #16]
 8012aa2:	443a      	add	r2, r7
 8012aa4:	443b      	add	r3, r7
 8012aa6:	60aa      	str	r2, [r5, #8]
 8012aa8:	612b      	str	r3, [r5, #16]
 8012aaa:	e7ed      	b.n	8012a88 <ucdr_deserialize_endian_array_char+0x40>

08012aac <ucdr_serialize_array_uint8_t>:
 8012aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab0:	4688      	mov	r8, r1
 8012ab2:	4611      	mov	r1, r2
 8012ab4:	4617      	mov	r7, r2
 8012ab6:	4605      	mov	r5, r0
 8012ab8:	f7f6 fb58 	bl	800916c <ucdr_check_buffer_available_for>
 8012abc:	b9e0      	cbnz	r0, 8012af8 <ucdr_serialize_array_uint8_t+0x4c>
 8012abe:	463e      	mov	r6, r7
 8012ac0:	e009      	b.n	8012ad6 <ucdr_serialize_array_uint8_t+0x2a>
 8012ac2:	68a8      	ldr	r0, [r5, #8]
 8012ac4:	f002 fcd9 	bl	801547a <memcpy>
 8012ac8:	68aa      	ldr	r2, [r5, #8]
 8012aca:	692b      	ldr	r3, [r5, #16]
 8012acc:	4422      	add	r2, r4
 8012ace:	4423      	add	r3, r4
 8012ad0:	1b36      	subs	r6, r6, r4
 8012ad2:	60aa      	str	r2, [r5, #8]
 8012ad4:	612b      	str	r3, [r5, #16]
 8012ad6:	4631      	mov	r1, r6
 8012ad8:	2201      	movs	r2, #1
 8012ada:	4628      	mov	r0, r5
 8012adc:	f7f6 fbce 	bl	800927c <ucdr_check_final_buffer_behavior_array>
 8012ae0:	1bb9      	subs	r1, r7, r6
 8012ae2:	4441      	add	r1, r8
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	d1ea      	bne.n	8012ac2 <ucdr_serialize_array_uint8_t+0x16>
 8012aec:	2301      	movs	r3, #1
 8012aee:	7da8      	ldrb	r0, [r5, #22]
 8012af0:	756b      	strb	r3, [r5, #21]
 8012af2:	4058      	eors	r0, r3
 8012af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af8:	463a      	mov	r2, r7
 8012afa:	68a8      	ldr	r0, [r5, #8]
 8012afc:	4641      	mov	r1, r8
 8012afe:	f002 fcbc 	bl	801547a <memcpy>
 8012b02:	68aa      	ldr	r2, [r5, #8]
 8012b04:	692b      	ldr	r3, [r5, #16]
 8012b06:	443a      	add	r2, r7
 8012b08:	443b      	add	r3, r7
 8012b0a:	60aa      	str	r2, [r5, #8]
 8012b0c:	612b      	str	r3, [r5, #16]
 8012b0e:	e7ed      	b.n	8012aec <ucdr_serialize_array_uint8_t+0x40>

08012b10 <ucdr_serialize_endian_array_uint8_t>:
 8012b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b14:	4619      	mov	r1, r3
 8012b16:	461f      	mov	r7, r3
 8012b18:	4605      	mov	r5, r0
 8012b1a:	4690      	mov	r8, r2
 8012b1c:	f7f6 fb26 	bl	800916c <ucdr_check_buffer_available_for>
 8012b20:	b9e0      	cbnz	r0, 8012b5c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012b22:	463e      	mov	r6, r7
 8012b24:	e009      	b.n	8012b3a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012b26:	68a8      	ldr	r0, [r5, #8]
 8012b28:	f002 fca7 	bl	801547a <memcpy>
 8012b2c:	68ab      	ldr	r3, [r5, #8]
 8012b2e:	6928      	ldr	r0, [r5, #16]
 8012b30:	4423      	add	r3, r4
 8012b32:	4420      	add	r0, r4
 8012b34:	1b36      	subs	r6, r6, r4
 8012b36:	60ab      	str	r3, [r5, #8]
 8012b38:	6128      	str	r0, [r5, #16]
 8012b3a:	4631      	mov	r1, r6
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	4628      	mov	r0, r5
 8012b40:	f7f6 fb9c 	bl	800927c <ucdr_check_final_buffer_behavior_array>
 8012b44:	1bb9      	subs	r1, r7, r6
 8012b46:	4441      	add	r1, r8
 8012b48:	4604      	mov	r4, r0
 8012b4a:	4602      	mov	r2, r0
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	d1ea      	bne.n	8012b26 <ucdr_serialize_endian_array_uint8_t+0x16>
 8012b50:	2301      	movs	r3, #1
 8012b52:	7da8      	ldrb	r0, [r5, #22]
 8012b54:	756b      	strb	r3, [r5, #21]
 8012b56:	4058      	eors	r0, r3
 8012b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b5c:	463a      	mov	r2, r7
 8012b5e:	68a8      	ldr	r0, [r5, #8]
 8012b60:	4641      	mov	r1, r8
 8012b62:	f002 fc8a 	bl	801547a <memcpy>
 8012b66:	68aa      	ldr	r2, [r5, #8]
 8012b68:	692b      	ldr	r3, [r5, #16]
 8012b6a:	443a      	add	r2, r7
 8012b6c:	443b      	add	r3, r7
 8012b6e:	60aa      	str	r2, [r5, #8]
 8012b70:	612b      	str	r3, [r5, #16]
 8012b72:	e7ed      	b.n	8012b50 <ucdr_serialize_endian_array_uint8_t+0x40>

08012b74 <ucdr_deserialize_array_uint8_t>:
 8012b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b78:	4688      	mov	r8, r1
 8012b7a:	4611      	mov	r1, r2
 8012b7c:	4617      	mov	r7, r2
 8012b7e:	4605      	mov	r5, r0
 8012b80:	f7f6 faf4 	bl	800916c <ucdr_check_buffer_available_for>
 8012b84:	b9e0      	cbnz	r0, 8012bc0 <ucdr_deserialize_array_uint8_t+0x4c>
 8012b86:	463e      	mov	r6, r7
 8012b88:	e009      	b.n	8012b9e <ucdr_deserialize_array_uint8_t+0x2a>
 8012b8a:	68a9      	ldr	r1, [r5, #8]
 8012b8c:	f002 fc75 	bl	801547a <memcpy>
 8012b90:	68aa      	ldr	r2, [r5, #8]
 8012b92:	692b      	ldr	r3, [r5, #16]
 8012b94:	4422      	add	r2, r4
 8012b96:	4423      	add	r3, r4
 8012b98:	1b36      	subs	r6, r6, r4
 8012b9a:	60aa      	str	r2, [r5, #8]
 8012b9c:	612b      	str	r3, [r5, #16]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	4631      	mov	r1, r6
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	f7f6 fb6a 	bl	800927c <ucdr_check_final_buffer_behavior_array>
 8012ba8:	4604      	mov	r4, r0
 8012baa:	1bb8      	subs	r0, r7, r6
 8012bac:	4440      	add	r0, r8
 8012bae:	4622      	mov	r2, r4
 8012bb0:	2c00      	cmp	r4, #0
 8012bb2:	d1ea      	bne.n	8012b8a <ucdr_deserialize_array_uint8_t+0x16>
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	7da8      	ldrb	r0, [r5, #22]
 8012bb8:	756b      	strb	r3, [r5, #21]
 8012bba:	4058      	eors	r0, r3
 8012bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bc0:	463a      	mov	r2, r7
 8012bc2:	68a9      	ldr	r1, [r5, #8]
 8012bc4:	4640      	mov	r0, r8
 8012bc6:	f002 fc58 	bl	801547a <memcpy>
 8012bca:	68aa      	ldr	r2, [r5, #8]
 8012bcc:	692b      	ldr	r3, [r5, #16]
 8012bce:	443a      	add	r2, r7
 8012bd0:	443b      	add	r3, r7
 8012bd2:	60aa      	str	r2, [r5, #8]
 8012bd4:	612b      	str	r3, [r5, #16]
 8012bd6:	e7ed      	b.n	8012bb4 <ucdr_deserialize_array_uint8_t+0x40>

08012bd8 <ucdr_deserialize_endian_array_uint8_t>:
 8012bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bdc:	4619      	mov	r1, r3
 8012bde:	461f      	mov	r7, r3
 8012be0:	4605      	mov	r5, r0
 8012be2:	4690      	mov	r8, r2
 8012be4:	f7f6 fac2 	bl	800916c <ucdr_check_buffer_available_for>
 8012be8:	b9e0      	cbnz	r0, 8012c24 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012bea:	463e      	mov	r6, r7
 8012bec:	e009      	b.n	8012c02 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012bee:	68a9      	ldr	r1, [r5, #8]
 8012bf0:	f002 fc43 	bl	801547a <memcpy>
 8012bf4:	68ab      	ldr	r3, [r5, #8]
 8012bf6:	6928      	ldr	r0, [r5, #16]
 8012bf8:	4423      	add	r3, r4
 8012bfa:	4420      	add	r0, r4
 8012bfc:	1b36      	subs	r6, r6, r4
 8012bfe:	60ab      	str	r3, [r5, #8]
 8012c00:	6128      	str	r0, [r5, #16]
 8012c02:	2201      	movs	r2, #1
 8012c04:	4631      	mov	r1, r6
 8012c06:	4628      	mov	r0, r5
 8012c08:	f7f6 fb38 	bl	800927c <ucdr_check_final_buffer_behavior_array>
 8012c0c:	4604      	mov	r4, r0
 8012c0e:	1bb8      	subs	r0, r7, r6
 8012c10:	4440      	add	r0, r8
 8012c12:	4622      	mov	r2, r4
 8012c14:	2c00      	cmp	r4, #0
 8012c16:	d1ea      	bne.n	8012bee <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	7da8      	ldrb	r0, [r5, #22]
 8012c1c:	756b      	strb	r3, [r5, #21]
 8012c1e:	4058      	eors	r0, r3
 8012c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c24:	463a      	mov	r2, r7
 8012c26:	68a9      	ldr	r1, [r5, #8]
 8012c28:	4640      	mov	r0, r8
 8012c2a:	f002 fc26 	bl	801547a <memcpy>
 8012c2e:	68aa      	ldr	r2, [r5, #8]
 8012c30:	692b      	ldr	r3, [r5, #16]
 8012c32:	443a      	add	r2, r7
 8012c34:	443b      	add	r3, r7
 8012c36:	60aa      	str	r2, [r5, #8]
 8012c38:	612b      	str	r3, [r5, #16]
 8012c3a:	e7ed      	b.n	8012c18 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012c3c <ucdr_serialize_string>:
 8012c3c:	b510      	push	{r4, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	4604      	mov	r4, r0
 8012c42:	4608      	mov	r0, r1
 8012c44:	9101      	str	r1, [sp, #4]
 8012c46:	f7ed fad5 	bl	80001f4 <strlen>
 8012c4a:	9901      	ldr	r1, [sp, #4]
 8012c4c:	1c42      	adds	r2, r0, #1
 8012c4e:	4620      	mov	r0, r4
 8012c50:	b002      	add	sp, #8
 8012c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c56:	f7f9 bb0b 	b.w	800c270 <ucdr_serialize_sequence_char>
 8012c5a:	bf00      	nop

08012c5c <ucdr_deserialize_string>:
 8012c5c:	b500      	push	{lr}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	ab01      	add	r3, sp, #4
 8012c62:	f7f9 fb17 	bl	800c294 <ucdr_deserialize_sequence_char>
 8012c66:	b003      	add	sp, #12
 8012c68:	f85d fb04 	ldr.w	pc, [sp], #4

08012c6c <get_custom_error>:
 8012c6c:	4b01      	ldr	r3, [pc, #4]	; (8012c74 <get_custom_error+0x8>)
 8012c6e:	7818      	ldrb	r0, [r3, #0]
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	2000dd28 	.word	0x2000dd28

08012c78 <recv_custom_msg>:
 8012c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c7c:	4693      	mov	fp, r2
 8012c7e:	b089      	sub	sp, #36	; 0x24
 8012c80:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8012c84:	9305      	str	r3, [sp, #20]
 8012c86:	468a      	mov	sl, r1
 8012c88:	2100      	movs	r1, #0
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	f88d 101e 	strb.w	r1, [sp, #30]
 8012c90:	b322      	cbz	r2, 8012cdc <recv_custom_msg+0x64>
 8012c92:	f200 2902 	addw	r9, r0, #514	; 0x202
 8012c96:	f10d 081f 	add.w	r8, sp, #31
 8012c9a:	af05      	add	r7, sp, #20
 8012c9c:	f10d 061e 	add.w	r6, sp, #30
 8012ca0:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012ca4:	e002      	b.n	8012cac <recv_custom_msg+0x34>
 8012ca6:	9b05      	ldr	r3, [sp, #20]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	dd0f      	ble.n	8012ccc <recv_custom_msg+0x54>
 8012cac:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8012cb0:	4623      	mov	r3, r4
 8012cb2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012cb6:	e9cd 5600 	strd	r5, r6, [sp]
 8012cba:	4622      	mov	r2, r4
 8012cbc:	4648      	mov	r0, r9
 8012cbe:	f000 ffdd 	bl	8013c7c <uxr_read_framed_msg>
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	d0ef      	beq.n	8012ca6 <recv_custom_msg+0x2e>
 8012cc6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012cca:	b1b3      	cbz	r3, 8012cfa <recv_custom_msg+0x82>
 8012ccc:	4b0f      	ldr	r3, [pc, #60]	; (8012d0c <recv_custom_msg+0x94>)
 8012cce:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012cd2:	701a      	strb	r2, [r3, #0]
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	b009      	add	sp, #36	; 0x24
 8012cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cdc:	f10d 021f 	add.w	r2, sp, #31
 8012ce0:	9200      	str	r2, [sp, #0]
 8012ce2:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8012ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012cea:	4601      	mov	r1, r0
 8012cec:	47a8      	blx	r5
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	d0ec      	beq.n	8012ccc <recv_custom_msg+0x54>
 8012cf2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d1e8      	bne.n	8012ccc <recv_custom_msg+0x54>
 8012cfa:	f8cb 0000 	str.w	r0, [fp]
 8012cfe:	2001      	movs	r0, #1
 8012d00:	f8ca 4000 	str.w	r4, [sl]
 8012d04:	b009      	add	sp, #36	; 0x24
 8012d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d0a:	bf00      	nop
 8012d0c:	2000dd28 	.word	0x2000dd28

08012d10 <send_custom_msg>:
 8012d10:	b530      	push	{r4, r5, lr}
 8012d12:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8012d16:	b087      	sub	sp, #28
 8012d18:	4615      	mov	r5, r2
 8012d1a:	b974      	cbnz	r4, 8012d3a <send_custom_msg+0x2a>
 8012d1c:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8012d20:	f10d 0317 	add.w	r3, sp, #23
 8012d24:	47a0      	blx	r4
 8012d26:	b108      	cbz	r0, 8012d2c <send_custom_msg+0x1c>
 8012d28:	42a8      	cmp	r0, r5
 8012d2a:	d015      	beq.n	8012d58 <send_custom_msg+0x48>
 8012d2c:	4b0c      	ldr	r3, [pc, #48]	; (8012d60 <send_custom_msg+0x50>)
 8012d2e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012d32:	701a      	strb	r2, [r3, #0]
 8012d34:	2000      	movs	r0, #0
 8012d36:	b007      	add	sp, #28
 8012d38:	bd30      	pop	{r4, r5, pc}
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	f10d 0117 	add.w	r1, sp, #23
 8012d42:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012d46:	4602      	mov	r2, r0
 8012d48:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8012d4c:	9500      	str	r5, [sp, #0]
 8012d4e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8012d52:	f000 fd9b 	bl	801388c <uxr_write_framed_msg>
 8012d56:	e7e6      	b.n	8012d26 <send_custom_msg+0x16>
 8012d58:	2001      	movs	r0, #1
 8012d5a:	b007      	add	sp, #28
 8012d5c:	bd30      	pop	{r4, r5, pc}
 8012d5e:	bf00      	nop
 8012d60:	2000dd28 	.word	0x2000dd28

08012d64 <uxr_set_custom_transport_callbacks>:
 8012d64:	b410      	push	{r4}
 8012d66:	9c01      	ldr	r4, [sp, #4]
 8012d68:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8012d6c:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8012d70:	9b02      	ldr	r3, [sp, #8]
 8012d72:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8012d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d7a:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8012d7e:	4770      	bx	lr

08012d80 <uxr_init_custom_transport>:
 8012d80:	b538      	push	{r3, r4, r5, lr}
 8012d82:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8012d86:	b303      	cbz	r3, 8012dca <uxr_init_custom_transport+0x4a>
 8012d88:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8012d8c:	4604      	mov	r4, r0
 8012d8e:	b1e2      	cbz	r2, 8012dca <uxr_init_custom_transport+0x4a>
 8012d90:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8012d94:	b1ca      	cbz	r2, 8012dca <uxr_init_custom_transport+0x4a>
 8012d96:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8012d9a:	b1b2      	cbz	r2, 8012dca <uxr_init_custom_transport+0x4a>
 8012d9c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8012da0:	4798      	blx	r3
 8012da2:	4605      	mov	r5, r0
 8012da4:	b188      	cbz	r0, 8012dca <uxr_init_custom_transport+0x4a>
 8012da6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8012daa:	b98b      	cbnz	r3, 8012dd0 <uxr_init_custom_transport+0x50>
 8012dac:	490b      	ldr	r1, [pc, #44]	; (8012ddc <uxr_init_custom_transport+0x5c>)
 8012dae:	4b0c      	ldr	r3, [pc, #48]	; (8012de0 <uxr_init_custom_transport+0x60>)
 8012db0:	4a0c      	ldr	r2, [pc, #48]	; (8012de4 <uxr_init_custom_transport+0x64>)
 8012db2:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8012db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012dba:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8012dbe:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8012dc2:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	bd38      	pop	{r3, r4, r5, pc}
 8012dca:	2500      	movs	r5, #0
 8012dcc:	4628      	mov	r0, r5
 8012dce:	bd38      	pop	{r3, r4, r5, pc}
 8012dd0:	2100      	movs	r1, #0
 8012dd2:	f204 2002 	addw	r0, r4, #514	; 0x202
 8012dd6:	f000 fd53 	bl	8013880 <uxr_init_framing_io>
 8012dda:	e7e7      	b.n	8012dac <uxr_init_custom_transport+0x2c>
 8012ddc:	08012d11 	.word	0x08012d11
 8012de0:	08012c79 	.word	0x08012c79
 8012de4:	08012c6d 	.word	0x08012c6d

08012de8 <uxr_close_custom_transport>:
 8012de8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8012dec:	4718      	bx	r3
 8012dee:	bf00      	nop

08012df0 <uxr_init_input_best_effort_stream>:
 8012df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012df4:	8003      	strh	r3, [r0, #0]
 8012df6:	4770      	bx	lr

08012df8 <uxr_reset_input_best_effort_stream>:
 8012df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012dfc:	8003      	strh	r3, [r0, #0]
 8012dfe:	4770      	bx	lr

08012e00 <uxr_receive_best_effort_message>:
 8012e00:	b538      	push	{r3, r4, r5, lr}
 8012e02:	4604      	mov	r4, r0
 8012e04:	8800      	ldrh	r0, [r0, #0]
 8012e06:	460d      	mov	r5, r1
 8012e08:	f000 fd22 	bl	8013850 <uxr_seq_num_cmp>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8012e14:	bfb8      	it	lt
 8012e16:	8025      	strhlt	r5, [r4, #0]
 8012e18:	bd38      	pop	{r3, r4, r5, pc}
 8012e1a:	bf00      	nop

08012e1c <on_full_input_buffer>:
 8012e1c:	b570      	push	{r4, r5, r6, lr}
 8012e1e:	4605      	mov	r5, r0
 8012e20:	460c      	mov	r4, r1
 8012e22:	682b      	ldr	r3, [r5, #0]
 8012e24:	6809      	ldr	r1, [r1, #0]
 8012e26:	8920      	ldrh	r0, [r4, #8]
 8012e28:	6862      	ldr	r2, [r4, #4]
 8012e2a:	fbb2 f2f0 	udiv	r2, r2, r0
 8012e2e:	eba3 0c01 	sub.w	ip, r3, r1
 8012e32:	fbbc fcf2 	udiv	ip, ip, r2
 8012e36:	f10c 0c01 	add.w	ip, ip, #1
 8012e3a:	fa1f f38c 	uxth.w	r3, ip
 8012e3e:	fbb3 f6f0 	udiv	r6, r3, r0
 8012e42:	fb00 3316 	mls	r3, r0, r6, r3
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	fb02 f303 	mul.w	r3, r2, r3
 8012e4c:	1d18      	adds	r0, r3, #4
 8012e4e:	4408      	add	r0, r1
 8012e50:	7d26      	ldrb	r6, [r4, #20]
 8012e52:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012e56:	b116      	cbz	r6, 8012e5e <on_full_input_buffer+0x42>
 8012e58:	2600      	movs	r6, #0
 8012e5a:	f840 6c04 	str.w	r6, [r0, #-4]
 8012e5e:	2a03      	cmp	r2, #3
 8012e60:	d801      	bhi.n	8012e66 <on_full_input_buffer+0x4a>
 8012e62:	2001      	movs	r0, #1
 8012e64:	bd70      	pop	{r4, r5, r6, pc}
 8012e66:	3308      	adds	r3, #8
 8012e68:	4419      	add	r1, r3
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	692b      	ldr	r3, [r5, #16]
 8012e6e:	3a04      	subs	r2, #4
 8012e70:	f7f6 f9c8 	bl	8009204 <ucdr_init_buffer_origin>
 8012e74:	4628      	mov	r0, r5
 8012e76:	4903      	ldr	r1, [pc, #12]	; (8012e84 <on_full_input_buffer+0x68>)
 8012e78:	4622      	mov	r2, r4
 8012e7a:	f7f6 f99f 	bl	80091bc <ucdr_set_on_full_buffer_callback>
 8012e7e:	2000      	movs	r0, #0
 8012e80:	bd70      	pop	{r4, r5, r6, pc}
 8012e82:	bf00      	nop
 8012e84:	08012e1d 	.word	0x08012e1d

08012e88 <uxr_init_input_reliable_stream>:
 8012e88:	b500      	push	{lr}
 8012e8a:	e9c0 1200 	strd	r1, r2, [r0]
 8012e8e:	f04f 0e00 	mov.w	lr, #0
 8012e92:	9a01      	ldr	r2, [sp, #4]
 8012e94:	8103      	strh	r3, [r0, #8]
 8012e96:	6102      	str	r2, [r0, #16]
 8012e98:	f880 e014 	strb.w	lr, [r0, #20]
 8012e9c:	b1d3      	cbz	r3, 8012ed4 <uxr_init_input_reliable_stream+0x4c>
 8012e9e:	f8c1 e000 	str.w	lr, [r1]
 8012ea2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012ea6:	f1bc 0f01 	cmp.w	ip, #1
 8012eaa:	d913      	bls.n	8012ed4 <uxr_init_input_reliable_stream+0x4c>
 8012eac:	2301      	movs	r3, #1
 8012eae:	fbb3 f1fc 	udiv	r1, r3, ip
 8012eb2:	fb0c 3111 	mls	r1, ip, r1, r3
 8012eb6:	b289      	uxth	r1, r1
 8012eb8:	6842      	ldr	r2, [r0, #4]
 8012eba:	fbb2 f2fc 	udiv	r2, r2, ip
 8012ebe:	fb01 f202 	mul.w	r2, r1, r2
 8012ec2:	6801      	ldr	r1, [r0, #0]
 8012ec4:	f841 e002 	str.w	lr, [r1, r2]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	459c      	cmp	ip, r3
 8012ed2:	d8ec      	bhi.n	8012eae <uxr_init_input_reliable_stream+0x26>
 8012ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ed8:	60c3      	str	r3, [r0, #12]
 8012eda:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ede:	bf00      	nop

08012ee0 <uxr_reset_input_reliable_stream>:
 8012ee0:	8901      	ldrh	r1, [r0, #8]
 8012ee2:	b1e9      	cbz	r1, 8012f20 <uxr_reset_input_reliable_stream+0x40>
 8012ee4:	f04f 0c00 	mov.w	ip, #0
 8012ee8:	b500      	push	{lr}
 8012eea:	4663      	mov	r3, ip
 8012eec:	46e6      	mov	lr, ip
 8012eee:	fbb3 f2f1 	udiv	r2, r3, r1
 8012ef2:	fb01 3312 	mls	r3, r1, r2, r3
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	6842      	ldr	r2, [r0, #4]
 8012efa:	fbb2 f2f1 	udiv	r2, r2, r1
 8012efe:	fb02 f303 	mul.w	r3, r2, r3
 8012f02:	6802      	ldr	r2, [r0, #0]
 8012f04:	f842 e003 	str.w	lr, [r2, r3]
 8012f08:	f10c 0c01 	add.w	ip, ip, #1
 8012f0c:	8901      	ldrh	r1, [r0, #8]
 8012f0e:	fa1f f38c 	uxth.w	r3, ip
 8012f12:	4299      	cmp	r1, r3
 8012f14:	d8eb      	bhi.n	8012eee <uxr_reset_input_reliable_stream+0xe>
 8012f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f1a:	60c3      	str	r3, [r0, #12]
 8012f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f24:	60c3      	str	r3, [r0, #12]
 8012f26:	4770      	bx	lr

08012f28 <uxr_receive_reliable_message>:
 8012f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	460d      	mov	r5, r1
 8012f30:	8901      	ldrh	r1, [r0, #8]
 8012f32:	8980      	ldrh	r0, [r0, #12]
 8012f34:	4690      	mov	r8, r2
 8012f36:	461f      	mov	r7, r3
 8012f38:	f000 fc82 	bl	8013840 <uxr_seq_num_add>
 8012f3c:	4629      	mov	r1, r5
 8012f3e:	4606      	mov	r6, r0
 8012f40:	89a0      	ldrh	r0, [r4, #12]
 8012f42:	f000 fc85 	bl	8013850 <uxr_seq_num_cmp>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	db0a      	blt.n	8012f60 <uxr_receive_reliable_message+0x38>
 8012f4a:	2600      	movs	r6, #0
 8012f4c:	89e0      	ldrh	r0, [r4, #14]
 8012f4e:	4629      	mov	r1, r5
 8012f50:	f000 fc7e 	bl	8013850 <uxr_seq_num_cmp>
 8012f54:	2800      	cmp	r0, #0
 8012f56:	da00      	bge.n	8012f5a <uxr_receive_reliable_message+0x32>
 8012f58:	81e5      	strh	r5, [r4, #14]
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f60:	4630      	mov	r0, r6
 8012f62:	4629      	mov	r1, r5
 8012f64:	f000 fc74 	bl	8013850 <uxr_seq_num_cmp>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	dbee      	blt.n	8012f4a <uxr_receive_reliable_message+0x22>
 8012f6c:	6923      	ldr	r3, [r4, #16]
 8012f6e:	4640      	mov	r0, r8
 8012f70:	4798      	blx	r3
 8012f72:	2101      	movs	r1, #1
 8012f74:	4681      	mov	r9, r0
 8012f76:	89a0      	ldrh	r0, [r4, #12]
 8012f78:	f000 fc62 	bl	8013840 <uxr_seq_num_add>
 8012f7c:	f1b9 0f00 	cmp.w	r9, #0
 8012f80:	d101      	bne.n	8012f86 <uxr_receive_reliable_message+0x5e>
 8012f82:	4285      	cmp	r5, r0
 8012f84:	d047      	beq.n	8013016 <uxr_receive_reliable_message+0xee>
 8012f86:	8922      	ldrh	r2, [r4, #8]
 8012f88:	fbb5 f0f2 	udiv	r0, r5, r2
 8012f8c:	fb02 5010 	mls	r0, r2, r0, r5
 8012f90:	b280      	uxth	r0, r0
 8012f92:	6863      	ldr	r3, [r4, #4]
 8012f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f98:	fb00 f303 	mul.w	r3, r0, r3
 8012f9c:	6820      	ldr	r0, [r4, #0]
 8012f9e:	3304      	adds	r3, #4
 8012fa0:	4418      	add	r0, r3
 8012fa2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d1cf      	bne.n	8012f4a <uxr_receive_reliable_message+0x22>
 8012faa:	4641      	mov	r1, r8
 8012fac:	463a      	mov	r2, r7
 8012fae:	f002 fa64 	bl	801547a <memcpy>
 8012fb2:	8921      	ldrh	r1, [r4, #8]
 8012fb4:	fbb5 f2f1 	udiv	r2, r5, r1
 8012fb8:	fb01 5212 	mls	r2, r1, r2, r5
 8012fbc:	b292      	uxth	r2, r2
 8012fbe:	6863      	ldr	r3, [r4, #4]
 8012fc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8012fc4:	fb02 f303 	mul.w	r3, r2, r3
 8012fc8:	6822      	ldr	r2, [r4, #0]
 8012fca:	50d7      	str	r7, [r2, r3]
 8012fcc:	9a08      	ldr	r2, [sp, #32]
 8012fce:	2301      	movs	r3, #1
 8012fd0:	7013      	strb	r3, [r2, #0]
 8012fd2:	f1b9 0f00 	cmp.w	r9, #0
 8012fd6:	d0b8      	beq.n	8012f4a <uxr_receive_reliable_message+0x22>
 8012fd8:	89a6      	ldrh	r6, [r4, #12]
 8012fda:	4630      	mov	r0, r6
 8012fdc:	2101      	movs	r1, #1
 8012fde:	f000 fc2f 	bl	8013840 <uxr_seq_num_add>
 8012fe2:	8922      	ldrh	r2, [r4, #8]
 8012fe4:	6863      	ldr	r3, [r4, #4]
 8012fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fea:	4606      	mov	r6, r0
 8012fec:	fbb0 f0f2 	udiv	r0, r0, r2
 8012ff0:	fb02 6010 	mls	r0, r2, r0, r6
 8012ff4:	b280      	uxth	r0, r0
 8012ff6:	fb00 f303 	mul.w	r3, r0, r3
 8012ffa:	6820      	ldr	r0, [r4, #0]
 8012ffc:	3304      	adds	r3, #4
 8012ffe:	4418      	add	r0, r3
 8013000:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d0a0      	beq.n	8012f4a <uxr_receive_reliable_message+0x22>
 8013008:	6923      	ldr	r3, [r4, #16]
 801300a:	4798      	blx	r3
 801300c:	2802      	cmp	r0, #2
 801300e:	d008      	beq.n	8013022 <uxr_receive_reliable_message+0xfa>
 8013010:	2801      	cmp	r0, #1
 8013012:	d0e2      	beq.n	8012fda <uxr_receive_reliable_message+0xb2>
 8013014:	e799      	b.n	8012f4a <uxr_receive_reliable_message+0x22>
 8013016:	9b08      	ldr	r3, [sp, #32]
 8013018:	81a5      	strh	r5, [r4, #12]
 801301a:	2601      	movs	r6, #1
 801301c:	f883 9000 	strb.w	r9, [r3]
 8013020:	e794      	b.n	8012f4c <uxr_receive_reliable_message+0x24>
 8013022:	2601      	movs	r6, #1
 8013024:	e792      	b.n	8012f4c <uxr_receive_reliable_message+0x24>
 8013026:	bf00      	nop

08013028 <uxr_next_input_reliable_buffer_available>:
 8013028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801302c:	4604      	mov	r4, r0
 801302e:	460f      	mov	r7, r1
 8013030:	8980      	ldrh	r0, [r0, #12]
 8013032:	2101      	movs	r1, #1
 8013034:	4690      	mov	r8, r2
 8013036:	f000 fc03 	bl	8013840 <uxr_seq_num_add>
 801303a:	8922      	ldrh	r2, [r4, #8]
 801303c:	fbb0 f6f2 	udiv	r6, r0, r2
 8013040:	fb02 0616 	mls	r6, r2, r6, r0
 8013044:	b2b6      	uxth	r6, r6
 8013046:	6863      	ldr	r3, [r4, #4]
 8013048:	fbb3 f3f2 	udiv	r3, r3, r2
 801304c:	fb06 f303 	mul.w	r3, r6, r3
 8013050:	6826      	ldr	r6, [r4, #0]
 8013052:	3304      	adds	r3, #4
 8013054:	441e      	add	r6, r3
 8013056:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801305a:	f1b9 0f00 	cmp.w	r9, #0
 801305e:	d023      	beq.n	80130a8 <uxr_next_input_reliable_buffer_available+0x80>
 8013060:	6923      	ldr	r3, [r4, #16]
 8013062:	4605      	mov	r5, r0
 8013064:	4630      	mov	r0, r6
 8013066:	4798      	blx	r3
 8013068:	4682      	mov	sl, r0
 801306a:	b300      	cbz	r0, 80130ae <uxr_next_input_reliable_buffer_available+0x86>
 801306c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8013070:	2101      	movs	r1, #1
 8013072:	4650      	mov	r0, sl
 8013074:	f000 fbe4 	bl	8013840 <uxr_seq_num_add>
 8013078:	8921      	ldrh	r1, [r4, #8]
 801307a:	fbb0 f2f1 	udiv	r2, r0, r1
 801307e:	4682      	mov	sl, r0
 8013080:	fb01 0212 	mls	r2, r1, r2, r0
 8013084:	e9d4 0300 	ldrd	r0, r3, [r4]
 8013088:	b292      	uxth	r2, r2
 801308a:	fbb3 f3f1 	udiv	r3, r3, r1
 801308e:	fb02 f303 	mul.w	r3, r2, r3
 8013092:	3304      	adds	r3, #4
 8013094:	4418      	add	r0, r3
 8013096:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801309a:	b12b      	cbz	r3, 80130a8 <uxr_next_input_reliable_buffer_available+0x80>
 801309c:	6923      	ldr	r3, [r4, #16]
 801309e:	4798      	blx	r3
 80130a0:	2802      	cmp	r0, #2
 80130a2:	d01b      	beq.n	80130dc <uxr_next_input_reliable_buffer_available+0xb4>
 80130a4:	2801      	cmp	r0, #1
 80130a6:	d0e3      	beq.n	8013070 <uxr_next_input_reliable_buffer_available+0x48>
 80130a8:	2000      	movs	r0, #0
 80130aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130ae:	464a      	mov	r2, r9
 80130b0:	4631      	mov	r1, r6
 80130b2:	4638      	mov	r0, r7
 80130b4:	f7f6 f8ae 	bl	8009214 <ucdr_init_buffer>
 80130b8:	8921      	ldrh	r1, [r4, #8]
 80130ba:	fbb5 f2f1 	udiv	r2, r5, r1
 80130be:	fb01 5212 	mls	r2, r1, r2, r5
 80130c2:	b292      	uxth	r2, r2
 80130c4:	6863      	ldr	r3, [r4, #4]
 80130c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80130ca:	fb02 f303 	mul.w	r3, r2, r3
 80130ce:	6822      	ldr	r2, [r4, #0]
 80130d0:	f842 a003 	str.w	sl, [r2, r3]
 80130d4:	2001      	movs	r0, #1
 80130d6:	81a5      	strh	r5, [r4, #12]
 80130d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130dc:	8920      	ldrh	r0, [r4, #8]
 80130de:	fbb5 f3f0 	udiv	r3, r5, r0
 80130e2:	fb00 5513 	mls	r5, r0, r3, r5
 80130e6:	b2ad      	uxth	r5, r5
 80130e8:	6863      	ldr	r3, [r4, #4]
 80130ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80130ee:	fb03 f505 	mul.w	r5, r3, r5
 80130f2:	6823      	ldr	r3, [r4, #0]
 80130f4:	2000      	movs	r0, #0
 80130f6:	5158      	str	r0, [r3, r5]
 80130f8:	eb06 0108 	add.w	r1, r6, r8
 80130fc:	eba9 0208 	sub.w	r2, r9, r8
 8013100:	4638      	mov	r0, r7
 8013102:	f7f6 f887 	bl	8009214 <ucdr_init_buffer>
 8013106:	4638      	mov	r0, r7
 8013108:	4903      	ldr	r1, [pc, #12]	; (8013118 <uxr_next_input_reliable_buffer_available+0xf0>)
 801310a:	4622      	mov	r2, r4
 801310c:	f7f6 f856 	bl	80091bc <ucdr_set_on_full_buffer_callback>
 8013110:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013114:	2001      	movs	r0, #1
 8013116:	e7c8      	b.n	80130aa <uxr_next_input_reliable_buffer_available+0x82>
 8013118:	08012e1d 	.word	0x08012e1d

0801311c <uxr_process_heartbeat>:
 801311c:	b538      	push	{r3, r4, r5, lr}
 801311e:	4611      	mov	r1, r2
 8013120:	4604      	mov	r4, r0
 8013122:	89c0      	ldrh	r0, [r0, #14]
 8013124:	4615      	mov	r5, r2
 8013126:	f000 fb93 	bl	8013850 <uxr_seq_num_cmp>
 801312a:	2800      	cmp	r0, #0
 801312c:	bfb8      	it	lt
 801312e:	81e5      	strhlt	r5, [r4, #14]
 8013130:	bd38      	pop	{r3, r4, r5, pc}
 8013132:	bf00      	nop

08013134 <uxr_compute_acknack>:
 8013134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013138:	8903      	ldrh	r3, [r0, #8]
 801313a:	8985      	ldrh	r5, [r0, #12]
 801313c:	4604      	mov	r4, r0
 801313e:	460e      	mov	r6, r1
 8013140:	b1d3      	cbz	r3, 8013178 <uxr_compute_acknack+0x44>
 8013142:	4628      	mov	r0, r5
 8013144:	2701      	movs	r7, #1
 8013146:	e003      	b.n	8013150 <uxr_compute_acknack+0x1c>
 8013148:	4567      	cmp	r7, ip
 801314a:	d215      	bcs.n	8013178 <uxr_compute_acknack+0x44>
 801314c:	89a0      	ldrh	r0, [r4, #12]
 801314e:	3701      	adds	r7, #1
 8013150:	b2b9      	uxth	r1, r7
 8013152:	f000 fb75 	bl	8013840 <uxr_seq_num_add>
 8013156:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801315a:	fbb0 f3fc 	udiv	r3, r0, ip
 801315e:	fb0c 0313 	mls	r3, ip, r3, r0
 8013162:	b29a      	uxth	r2, r3
 8013164:	e9d4 1300 	ldrd	r1, r3, [r4]
 8013168:	fbb3 f3fc 	udiv	r3, r3, ip
 801316c:	fb02 f303 	mul.w	r3, r2, r3
 8013170:	58cb      	ldr	r3, [r1, r3]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d1e8      	bne.n	8013148 <uxr_compute_acknack+0x14>
 8013176:	4605      	mov	r5, r0
 8013178:	8035      	strh	r5, [r6, #0]
 801317a:	2101      	movs	r1, #1
 801317c:	4628      	mov	r0, r5
 801317e:	89e7      	ldrh	r7, [r4, #14]
 8013180:	f000 fb62 	bl	8013848 <uxr_seq_num_sub>
 8013184:	4601      	mov	r1, r0
 8013186:	4638      	mov	r0, r7
 8013188:	f000 fb5e 	bl	8013848 <uxr_seq_num_sub>
 801318c:	4605      	mov	r5, r0
 801318e:	b318      	cbz	r0, 80131d8 <uxr_compute_acknack+0xa4>
 8013190:	f04f 0900 	mov.w	r9, #0
 8013194:	464f      	mov	r7, r9
 8013196:	f04f 0801 	mov.w	r8, #1
 801319a:	fa1f f189 	uxth.w	r1, r9
 801319e:	8830      	ldrh	r0, [r6, #0]
 80131a0:	f000 fb4e 	bl	8013840 <uxr_seq_num_add>
 80131a4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80131a8:	fbb0 f3fc 	udiv	r3, r0, ip
 80131ac:	e9d4 1200 	ldrd	r1, r2, [r4]
 80131b0:	fb03 001c 	mls	r0, r3, ip, r0
 80131b4:	b283      	uxth	r3, r0
 80131b6:	fbb2 f2fc 	udiv	r2, r2, ip
 80131ba:	fb02 f303 	mul.w	r3, r2, r3
 80131be:	fa08 f209 	lsl.w	r2, r8, r9
 80131c2:	58cb      	ldr	r3, [r1, r3]
 80131c4:	f109 0901 	add.w	r9, r9, #1
 80131c8:	b90b      	cbnz	r3, 80131ce <uxr_compute_acknack+0x9a>
 80131ca:	4317      	orrs	r7, r2
 80131cc:	b2bf      	uxth	r7, r7
 80131ce:	454d      	cmp	r5, r9
 80131d0:	d1e3      	bne.n	801319a <uxr_compute_acknack+0x66>
 80131d2:	4638      	mov	r0, r7
 80131d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131d8:	4607      	mov	r7, r0
 80131da:	4638      	mov	r0, r7
 80131dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080131e0 <uxr_init_output_best_effort_stream>:
 80131e0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80131e4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80131e8:	6001      	str	r1, [r0, #0]
 80131ea:	7303      	strb	r3, [r0, #12]
 80131ec:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80131f0:	4770      	bx	lr
 80131f2:	bf00      	nop

080131f4 <uxr_reset_output_best_effort_stream>:
 80131f4:	7b02      	ldrb	r2, [r0, #12]
 80131f6:	6042      	str	r2, [r0, #4]
 80131f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80131fc:	81c3      	strh	r3, [r0, #14]
 80131fe:	4770      	bx	lr

08013200 <uxr_prepare_best_effort_buffer_to_write>:
 8013200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013202:	4604      	mov	r4, r0
 8013204:	b083      	sub	sp, #12
 8013206:	6840      	ldr	r0, [r0, #4]
 8013208:	460d      	mov	r5, r1
 801320a:	4616      	mov	r6, r2
 801320c:	f7fa fdf4 	bl	800ddf8 <uxr_submessage_padding>
 8013210:	6863      	ldr	r3, [r4, #4]
 8013212:	4418      	add	r0, r3
 8013214:	68a3      	ldr	r3, [r4, #8]
 8013216:	1942      	adds	r2, r0, r5
 8013218:	4293      	cmp	r3, r2
 801321a:	bf2c      	ite	cs
 801321c:	2701      	movcs	r7, #1
 801321e:	2700      	movcc	r7, #0
 8013220:	d202      	bcs.n	8013228 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8013222:	4638      	mov	r0, r7
 8013224:	b003      	add	sp, #12
 8013226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013228:	9000      	str	r0, [sp, #0]
 801322a:	6821      	ldr	r1, [r4, #0]
 801322c:	4630      	mov	r0, r6
 801322e:	2300      	movs	r3, #0
 8013230:	f7f5 ffde 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 8013234:	6861      	ldr	r1, [r4, #4]
 8013236:	4638      	mov	r0, r7
 8013238:	4429      	add	r1, r5
 801323a:	6061      	str	r1, [r4, #4]
 801323c:	b003      	add	sp, #12
 801323e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013240 <uxr_prepare_best_effort_buffer_to_send>:
 8013240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013244:	4604      	mov	r4, r0
 8013246:	461d      	mov	r5, r3
 8013248:	6840      	ldr	r0, [r0, #4]
 801324a:	7b23      	ldrb	r3, [r4, #12]
 801324c:	4298      	cmp	r0, r3
 801324e:	bf8c      	ite	hi
 8013250:	2601      	movhi	r6, #1
 8013252:	2600      	movls	r6, #0
 8013254:	d802      	bhi.n	801325c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8013256:	4630      	mov	r0, r6
 8013258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801325c:	4688      	mov	r8, r1
 801325e:	89e0      	ldrh	r0, [r4, #14]
 8013260:	2101      	movs	r1, #1
 8013262:	4617      	mov	r7, r2
 8013264:	f000 faec 	bl	8013840 <uxr_seq_num_add>
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	81e0      	strh	r0, [r4, #14]
 801326c:	8028      	strh	r0, [r5, #0]
 801326e:	f8c8 3000 	str.w	r3, [r8]
 8013272:	6863      	ldr	r3, [r4, #4]
 8013274:	603b      	str	r3, [r7, #0]
 8013276:	7b23      	ldrb	r3, [r4, #12]
 8013278:	6063      	str	r3, [r4, #4]
 801327a:	4630      	mov	r0, r6
 801327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013280 <on_full_output_buffer>:
 8013280:	b538      	push	{r3, r4, r5, lr}
 8013282:	6802      	ldr	r2, [r0, #0]
 8013284:	460c      	mov	r4, r1
 8013286:	6809      	ldr	r1, [r1, #0]
 8013288:	8923      	ldrh	r3, [r4, #8]
 801328a:	eba2 0c01 	sub.w	ip, r2, r1
 801328e:	6862      	ldr	r2, [r4, #4]
 8013290:	fbb2 f2f3 	udiv	r2, r2, r3
 8013294:	fbbc fcf2 	udiv	ip, ip, r2
 8013298:	f10c 0c01 	add.w	ip, ip, #1
 801329c:	fa1f fc8c 	uxth.w	ip, ip
 80132a0:	fbbc fef3 	udiv	lr, ip, r3
 80132a4:	fb03 c31e 	mls	r3, r3, lr, ip
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	fb02 f303 	mul.w	r3, r2, r3
 80132ae:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80132b2:	58ca      	ldr	r2, [r1, r3]
 80132b4:	4463      	add	r3, ip
 80132b6:	eba2 020c 	sub.w	r2, r2, ip
 80132ba:	3308      	adds	r3, #8
 80132bc:	4605      	mov	r5, r0
 80132be:	4419      	add	r1, r3
 80132c0:	3a04      	subs	r2, #4
 80132c2:	6903      	ldr	r3, [r0, #16]
 80132c4:	f7f5 ff9e 	bl	8009204 <ucdr_init_buffer_origin>
 80132c8:	4628      	mov	r0, r5
 80132ca:	4903      	ldr	r1, [pc, #12]	; (80132d8 <on_full_output_buffer+0x58>)
 80132cc:	4622      	mov	r2, r4
 80132ce:	f7f5 ff75 	bl	80091bc <ucdr_set_on_full_buffer_callback>
 80132d2:	2000      	movs	r0, #0
 80132d4:	bd38      	pop	{r3, r4, r5, pc}
 80132d6:	bf00      	nop
 80132d8:	08013281 	.word	0x08013281

080132dc <uxr_init_output_reliable_stream>:
 80132dc:	b410      	push	{r4}
 80132de:	f89d c004 	ldrb.w	ip, [sp, #4]
 80132e2:	8103      	strh	r3, [r0, #8]
 80132e4:	e9c0 1200 	strd	r1, r2, [r0]
 80132e8:	f880 c00c 	strb.w	ip, [r0, #12]
 80132ec:	b1d3      	cbz	r3, 8013324 <uxr_init_output_reliable_stream+0x48>
 80132ee:	f8c1 c000 	str.w	ip, [r1]
 80132f2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80132f6:	f1bc 0f01 	cmp.w	ip, #1
 80132fa:	d913      	bls.n	8013324 <uxr_init_output_reliable_stream+0x48>
 80132fc:	2301      	movs	r3, #1
 80132fe:	fbb3 f1fc 	udiv	r1, r3, ip
 8013302:	fb0c 3111 	mls	r1, ip, r1, r3
 8013306:	b289      	uxth	r1, r1
 8013308:	6842      	ldr	r2, [r0, #4]
 801330a:	6804      	ldr	r4, [r0, #0]
 801330c:	fbb2 f2fc 	udiv	r2, r2, ip
 8013310:	fb01 f202 	mul.w	r2, r1, r2
 8013314:	7b01      	ldrb	r1, [r0, #12]
 8013316:	50a1      	str	r1, [r4, r2]
 8013318:	3301      	adds	r3, #1
 801331a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801331e:	b29b      	uxth	r3, r3
 8013320:	459c      	cmp	ip, r3
 8013322:	d8ec      	bhi.n	80132fe <uxr_init_output_reliable_stream+0x22>
 8013324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013328:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801332c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013330:	4905      	ldr	r1, [pc, #20]	; (8013348 <uxr_init_output_reliable_stream+0x6c>)
 8013332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013336:	f8c0 100e 	str.w	r1, [r0, #14]
 801333a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801333e:	2300      	movs	r3, #0
 8013340:	8242      	strh	r2, [r0, #18]
 8013342:	8403      	strh	r3, [r0, #32]
 8013344:	4770      	bx	lr
 8013346:	bf00      	nop
 8013348:	ffff0000 	.word	0xffff0000

0801334c <uxr_reset_output_reliable_stream>:
 801334c:	8901      	ldrh	r1, [r0, #8]
 801334e:	b1b1      	cbz	r1, 801337e <uxr_reset_output_reliable_stream+0x32>
 8013350:	f04f 0c00 	mov.w	ip, #0
 8013354:	4663      	mov	r3, ip
 8013356:	fbb3 f2f1 	udiv	r2, r3, r1
 801335a:	fb01 3312 	mls	r3, r1, r2, r3
 801335e:	b29b      	uxth	r3, r3
 8013360:	6842      	ldr	r2, [r0, #4]
 8013362:	fbb2 f2f1 	udiv	r2, r2, r1
 8013366:	6801      	ldr	r1, [r0, #0]
 8013368:	fb02 f303 	mul.w	r3, r2, r3
 801336c:	7b02      	ldrb	r2, [r0, #12]
 801336e:	50ca      	str	r2, [r1, r3]
 8013370:	f10c 0c01 	add.w	ip, ip, #1
 8013374:	8901      	ldrh	r1, [r0, #8]
 8013376:	fa1f f38c 	uxth.w	r3, ip
 801337a:	4299      	cmp	r1, r3
 801337c:	d8eb      	bhi.n	8013356 <uxr_reset_output_reliable_stream+0xa>
 801337e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013382:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013386:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801338a:	4904      	ldr	r1, [pc, #16]	; (801339c <uxr_reset_output_reliable_stream+0x50>)
 801338c:	f8c0 100e 	str.w	r1, [r0, #14]
 8013390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013394:	2300      	movs	r3, #0
 8013396:	8242      	strh	r2, [r0, #18]
 8013398:	8403      	strh	r3, [r0, #32]
 801339a:	4770      	bx	lr
 801339c:	ffff0000 	.word	0xffff0000

080133a0 <uxr_prepare_reliable_buffer_to_write>:
 80133a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a4:	4604      	mov	r4, r0
 80133a6:	b091      	sub	sp, #68	; 0x44
 80133a8:	8900      	ldrh	r0, [r0, #8]
 80133aa:	89e6      	ldrh	r6, [r4, #14]
 80133ac:	6823      	ldr	r3, [r4, #0]
 80133ae:	9204      	str	r2, [sp, #16]
 80133b0:	fbb6 f2f0 	udiv	r2, r6, r0
 80133b4:	fb00 6212 	mls	r2, r0, r2, r6
 80133b8:	b292      	uxth	r2, r2
 80133ba:	6865      	ldr	r5, [r4, #4]
 80133bc:	fbb5 f5f0 	udiv	r5, r5, r0
 80133c0:	fb05 3202 	mla	r2, r5, r2, r3
 80133c4:	3204      	adds	r2, #4
 80133c6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80133ca:	f894 900c 	ldrb.w	r9, [r4, #12]
 80133ce:	9203      	str	r2, [sp, #12]
 80133d0:	468b      	mov	fp, r1
 80133d2:	1f2f      	subs	r7, r5, #4
 80133d4:	2800      	cmp	r0, #0
 80133d6:	f000 814c 	beq.w	8013672 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80133da:	f04f 0c00 	mov.w	ip, #0
 80133de:	46e2      	mov	sl, ip
 80133e0:	4661      	mov	r1, ip
 80133e2:	fbb1 f2f0 	udiv	r2, r1, r0
 80133e6:	fb00 1212 	mls	r2, r0, r2, r1
 80133ea:	b292      	uxth	r2, r2
 80133ec:	fb05 f202 	mul.w	r2, r5, r2
 80133f0:	f10c 0c01 	add.w	ip, ip, #1
 80133f4:	589a      	ldr	r2, [r3, r2]
 80133f6:	454a      	cmp	r2, r9
 80133f8:	bf08      	it	eq
 80133fa:	f10a 0a01 	addeq.w	sl, sl, #1
 80133fe:	fa1f f18c 	uxth.w	r1, ip
 8013402:	bf08      	it	eq
 8013404:	fa1f fa8a 	uxtheq.w	sl, sl
 8013408:	4281      	cmp	r1, r0
 801340a:	d3ea      	bcc.n	80133e2 <uxr_prepare_reliable_buffer_to_write+0x42>
 801340c:	4640      	mov	r0, r8
 801340e:	2104      	movs	r1, #4
 8013410:	f8cd a014 	str.w	sl, [sp, #20]
 8013414:	f7f5 ff02 	bl	800921c <ucdr_alignment>
 8013418:	4480      	add	r8, r0
 801341a:	eb08 020b 	add.w	r2, r8, fp
 801341e:	42ba      	cmp	r2, r7
 8013420:	f240 80cd 	bls.w	80135be <uxr_prepare_reliable_buffer_to_write+0x21e>
 8013424:	7b22      	ldrb	r2, [r4, #12]
 8013426:	445a      	add	r2, fp
 8013428:	42ba      	cmp	r2, r7
 801342a:	f240 80b5 	bls.w	8013598 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801342e:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8013432:	33fc      	adds	r3, #252	; 0xfc
 8013434:	b2ba      	uxth	r2, r7
 8013436:	4413      	add	r3, r2
 8013438:	b29b      	uxth	r3, r3
 801343a:	fb0a f903 	mul.w	r9, sl, r3
 801343e:	45d9      	cmp	r9, fp
 8013440:	9305      	str	r3, [sp, #20]
 8013442:	9306      	str	r3, [sp, #24]
 8013444:	f0c0 80b7 	bcc.w	80135b6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8013448:	f108 0304 	add.w	r3, r8, #4
 801344c:	42bb      	cmp	r3, r7
 801344e:	f080 80db 	bcs.w	8013608 <uxr_prepare_reliable_buffer_to_write+0x268>
 8013452:	f1a2 0904 	sub.w	r9, r2, #4
 8013456:	eba9 0908 	sub.w	r9, r9, r8
 801345a:	9b05      	ldr	r3, [sp, #20]
 801345c:	fa1f f989 	uxth.w	r9, r9
 8013460:	ebab 0b09 	sub.w	fp, fp, r9
 8013464:	fbbb f2f3 	udiv	r2, fp, r3
 8013468:	fb03 b312 	mls	r3, r3, r2, fp
 801346c:	2b00      	cmp	r3, #0
 801346e:	f000 80c8 	beq.w	8013602 <uxr_prepare_reliable_buffer_to_write+0x262>
 8013472:	3201      	adds	r2, #1
 8013474:	b292      	uxth	r2, r2
 8013476:	9306      	str	r3, [sp, #24]
 8013478:	4552      	cmp	r2, sl
 801347a:	f200 809c 	bhi.w	80135b6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801347e:	f10d 0b20 	add.w	fp, sp, #32
 8013482:	2a00      	cmp	r2, #0
 8013484:	d042      	beq.n	801350c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8013486:	f8cd 801c 	str.w	r8, [sp, #28]
 801348a:	f04f 0a00 	mov.w	sl, #0
 801348e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013492:	9505      	str	r5, [sp, #20]
 8013494:	f10d 0b20 	add.w	fp, sp, #32
 8013498:	4615      	mov	r5, r2
 801349a:	e000      	b.n	801349e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801349c:	46c1      	mov	r9, r8
 801349e:	8920      	ldrh	r0, [r4, #8]
 80134a0:	fbb6 f2f0 	udiv	r2, r6, r0
 80134a4:	fb00 6112 	mls	r1, r0, r2, r6
 80134a8:	b28a      	uxth	r2, r1
 80134aa:	6863      	ldr	r3, [r4, #4]
 80134ac:	fbb3 f1f0 	udiv	r1, r3, r0
 80134b0:	6823      	ldr	r3, [r4, #0]
 80134b2:	fb02 f101 	mul.w	r1, r2, r1
 80134b6:	3104      	adds	r1, #4
 80134b8:	4419      	add	r1, r3
 80134ba:	4658      	mov	r0, fp
 80134bc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80134c0:	9200      	str	r2, [sp, #0]
 80134c2:	2300      	movs	r3, #0
 80134c4:	463a      	mov	r2, r7
 80134c6:	f7f5 fe93 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 80134ca:	464a      	mov	r2, r9
 80134cc:	2300      	movs	r3, #0
 80134ce:	210d      	movs	r1, #13
 80134d0:	4658      	mov	r0, fp
 80134d2:	f7fa fc51 	bl	800dd78 <uxr_buffer_submessage_header>
 80134d6:	8921      	ldrh	r1, [r4, #8]
 80134d8:	fbb6 f2f1 	udiv	r2, r6, r1
 80134dc:	fb01 6212 	mls	r2, r1, r2, r6
 80134e0:	b292      	uxth	r2, r2
 80134e2:	6863      	ldr	r3, [r4, #4]
 80134e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80134e8:	fb02 f303 	mul.w	r3, r2, r3
 80134ec:	6822      	ldr	r2, [r4, #0]
 80134ee:	4630      	mov	r0, r6
 80134f0:	50d7      	str	r7, [r2, r3]
 80134f2:	2101      	movs	r1, #1
 80134f4:	f000 f9a4 	bl	8013840 <uxr_seq_num_add>
 80134f8:	f10a 0a01 	add.w	sl, sl, #1
 80134fc:	fa1f f38a 	uxth.w	r3, sl
 8013500:	429d      	cmp	r5, r3
 8013502:	4606      	mov	r6, r0
 8013504:	d8ca      	bhi.n	801349c <uxr_prepare_reliable_buffer_to_write+0xfc>
 8013506:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801350a:	9d05      	ldr	r5, [sp, #20]
 801350c:	8920      	ldrh	r0, [r4, #8]
 801350e:	fbb6 f3f0 	udiv	r3, r6, r0
 8013512:	fb00 6313 	mls	r3, r0, r3, r6
 8013516:	b299      	uxth	r1, r3
 8013518:	6863      	ldr	r3, [r4, #4]
 801351a:	fbb3 f3f0 	udiv	r3, r3, r0
 801351e:	fb01 f303 	mul.w	r3, r1, r3
 8013522:	6821      	ldr	r1, [r4, #0]
 8013524:	3304      	adds	r3, #4
 8013526:	4419      	add	r1, r3
 8013528:	463a      	mov	r2, r7
 801352a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801352e:	9000      	str	r0, [sp, #0]
 8013530:	2300      	movs	r3, #0
 8013532:	4658      	mov	r0, fp
 8013534:	f7f5 fe5c 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 8013538:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801353c:	4658      	mov	r0, fp
 801353e:	fa1f f289 	uxth.w	r2, r9
 8013542:	2302      	movs	r3, #2
 8013544:	210d      	movs	r1, #13
 8013546:	f7fa fc17 	bl	800dd78 <uxr_buffer_submessage_header>
 801354a:	9b03      	ldr	r3, [sp, #12]
 801354c:	8927      	ldrh	r7, [r4, #8]
 801354e:	7b20      	ldrb	r0, [r4, #12]
 8013550:	f108 0104 	add.w	r1, r8, #4
 8013554:	440b      	add	r3, r1
 8013556:	4619      	mov	r1, r3
 8013558:	fbb6 f3f7 	udiv	r3, r6, r7
 801355c:	fb07 6313 	mls	r3, r7, r3, r6
 8013560:	f1a5 0208 	sub.w	r2, r5, #8
 8013564:	b29d      	uxth	r5, r3
 8013566:	3004      	adds	r0, #4
 8013568:	6863      	ldr	r3, [r4, #4]
 801356a:	fbb3 f3f7 	udiv	r3, r3, r7
 801356e:	fb05 f303 	mul.w	r3, r5, r3
 8013572:	6825      	ldr	r5, [r4, #0]
 8013574:	4448      	add	r0, r9
 8013576:	50e8      	str	r0, [r5, r3]
 8013578:	9d04      	ldr	r5, [sp, #16]
 801357a:	eba2 0208 	sub.w	r2, r2, r8
 801357e:	4628      	mov	r0, r5
 8013580:	f7f5 fe48 	bl	8009214 <ucdr_init_buffer>
 8013584:	4628      	mov	r0, r5
 8013586:	493c      	ldr	r1, [pc, #240]	; (8013678 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8013588:	4622      	mov	r2, r4
 801358a:	f7f5 fe17 	bl	80091bc <ucdr_set_on_full_buffer_callback>
 801358e:	2001      	movs	r0, #1
 8013590:	81e6      	strh	r6, [r4, #14]
 8013592:	b011      	add	sp, #68	; 0x44
 8013594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013598:	2101      	movs	r1, #1
 801359a:	89e0      	ldrh	r0, [r4, #14]
 801359c:	f000 f950 	bl	8013840 <uxr_seq_num_add>
 80135a0:	8921      	ldrh	r1, [r4, #8]
 80135a2:	4605      	mov	r5, r0
 80135a4:	8a60      	ldrh	r0, [r4, #18]
 80135a6:	f000 f94b 	bl	8013840 <uxr_seq_num_add>
 80135aa:	4601      	mov	r1, r0
 80135ac:	4628      	mov	r0, r5
 80135ae:	f000 f94f 	bl	8013850 <uxr_seq_num_cmp>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	dd42      	ble.n	801363c <uxr_prepare_reliable_buffer_to_write+0x29c>
 80135b6:	2000      	movs	r0, #0
 80135b8:	b011      	add	sp, #68	; 0x44
 80135ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135be:	8921      	ldrh	r1, [r4, #8]
 80135c0:	8a60      	ldrh	r0, [r4, #18]
 80135c2:	9205      	str	r2, [sp, #20]
 80135c4:	f000 f93c 	bl	8013840 <uxr_seq_num_add>
 80135c8:	4601      	mov	r1, r0
 80135ca:	4630      	mov	r0, r6
 80135cc:	f000 f940 	bl	8013850 <uxr_seq_num_cmp>
 80135d0:	2800      	cmp	r0, #0
 80135d2:	9a05      	ldr	r2, [sp, #20]
 80135d4:	dcef      	bgt.n	80135b6 <uxr_prepare_reliable_buffer_to_write+0x216>
 80135d6:	8927      	ldrh	r7, [r4, #8]
 80135d8:	fbb6 f3f7 	udiv	r3, r6, r7
 80135dc:	fb07 6313 	mls	r3, r7, r3, r6
 80135e0:	b29d      	uxth	r5, r3
 80135e2:	6863      	ldr	r3, [r4, #4]
 80135e4:	6824      	ldr	r4, [r4, #0]
 80135e6:	fbb3 f3f7 	udiv	r3, r3, r7
 80135ea:	fb05 f303 	mul.w	r3, r5, r3
 80135ee:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80135f2:	50e2      	str	r2, [r4, r3]
 80135f4:	2300      	movs	r3, #0
 80135f6:	f8cd 8000 	str.w	r8, [sp]
 80135fa:	f7f5 fdf9 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 80135fe:	2001      	movs	r0, #1
 8013600:	e7da      	b.n	80135b8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8013602:	b293      	uxth	r3, r2
 8013604:	461a      	mov	r2, r3
 8013606:	e737      	b.n	8013478 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8013608:	4630      	mov	r0, r6
 801360a:	2101      	movs	r1, #1
 801360c:	9207      	str	r2, [sp, #28]
 801360e:	f000 f917 	bl	8013840 <uxr_seq_num_add>
 8013612:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013616:	fbb0 f1fc 	udiv	r1, r0, ip
 801361a:	fb0c 0111 	mls	r1, ip, r1, r0
 801361e:	4606      	mov	r6, r0
 8013620:	b288      	uxth	r0, r1
 8013622:	6863      	ldr	r3, [r4, #4]
 8013624:	fbb3 f1fc 	udiv	r1, r3, ip
 8013628:	6823      	ldr	r3, [r4, #0]
 801362a:	9a07      	ldr	r2, [sp, #28]
 801362c:	fb00 f101 	mul.w	r1, r0, r1
 8013630:	3104      	adds	r1, #4
 8013632:	440b      	add	r3, r1
 8013634:	9303      	str	r3, [sp, #12]
 8013636:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801363a:	e70a      	b.n	8013452 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801363c:	8921      	ldrh	r1, [r4, #8]
 801363e:	fbb5 f3f1 	udiv	r3, r5, r1
 8013642:	fb01 5313 	mls	r3, r1, r3, r5
 8013646:	b29a      	uxth	r2, r3
 8013648:	6863      	ldr	r3, [r4, #4]
 801364a:	fbb3 f3f1 	udiv	r3, r3, r1
 801364e:	6821      	ldr	r1, [r4, #0]
 8013650:	9804      	ldr	r0, [sp, #16]
 8013652:	fb02 f303 	mul.w	r3, r2, r3
 8013656:	3304      	adds	r3, #4
 8013658:	7b22      	ldrb	r2, [r4, #12]
 801365a:	4419      	add	r1, r3
 801365c:	445a      	add	r2, fp
 801365e:	f841 2c04 	str.w	r2, [r1, #-4]
 8013662:	7b23      	ldrb	r3, [r4, #12]
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	2300      	movs	r3, #0
 8013668:	f7f5 fdc2 	bl	80091f0 <ucdr_init_buffer_origin_offset>
 801366c:	81e5      	strh	r5, [r4, #14]
 801366e:	2001      	movs	r0, #1
 8013670:	e7a2      	b.n	80135b8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8013672:	4682      	mov	sl, r0
 8013674:	e6ca      	b.n	801340c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8013676:	bf00      	nop
 8013678:	08013281 	.word	0x08013281

0801367c <uxr_prepare_next_reliable_buffer_to_send>:
 801367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801367e:	4604      	mov	r4, r0
 8013680:	460f      	mov	r7, r1
 8013682:	8a00      	ldrh	r0, [r0, #16]
 8013684:	2101      	movs	r1, #1
 8013686:	4616      	mov	r6, r2
 8013688:	461d      	mov	r5, r3
 801368a:	f000 f8d9 	bl	8013840 <uxr_seq_num_add>
 801368e:	8028      	strh	r0, [r5, #0]
 8013690:	8922      	ldrh	r2, [r4, #8]
 8013692:	fbb0 f3f2 	udiv	r3, r0, r2
 8013696:	fb02 0c13 	mls	ip, r2, r3, r0
 801369a:	fa1f fc8c 	uxth.w	ip, ip
 801369e:	6863      	ldr	r3, [r4, #4]
 80136a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80136a4:	fb0c fc03 	mul.w	ip, ip, r3
 80136a8:	6823      	ldr	r3, [r4, #0]
 80136aa:	89e1      	ldrh	r1, [r4, #14]
 80136ac:	f10c 0c04 	add.w	ip, ip, #4
 80136b0:	4463      	add	r3, ip
 80136b2:	603b      	str	r3, [r7, #0]
 80136b4:	6823      	ldr	r3, [r4, #0]
 80136b6:	449c      	add	ip, r3
 80136b8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80136bc:	6033      	str	r3, [r6, #0]
 80136be:	f000 f8c7 	bl	8013850 <uxr_seq_num_cmp>
 80136c2:	2800      	cmp	r0, #0
 80136c4:	dd01      	ble.n	80136ca <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80136c6:	2000      	movs	r0, #0
 80136c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136ca:	7b23      	ldrb	r3, [r4, #12]
 80136cc:	6832      	ldr	r2, [r6, #0]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d9f9      	bls.n	80136c6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80136d2:	8a61      	ldrh	r1, [r4, #18]
 80136d4:	8a20      	ldrh	r0, [r4, #16]
 80136d6:	f000 f8b7 	bl	8013848 <uxr_seq_num_sub>
 80136da:	8923      	ldrh	r3, [r4, #8]
 80136dc:	4283      	cmp	r3, r0
 80136de:	d0f2      	beq.n	80136c6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80136e0:	8828      	ldrh	r0, [r5, #0]
 80136e2:	89e3      	ldrh	r3, [r4, #14]
 80136e4:	8220      	strh	r0, [r4, #16]
 80136e6:	4298      	cmp	r0, r3
 80136e8:	d001      	beq.n	80136ee <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80136ea:	2001      	movs	r0, #1
 80136ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136ee:	2101      	movs	r1, #1
 80136f0:	f000 f8a6 	bl	8013840 <uxr_seq_num_add>
 80136f4:	81e0      	strh	r0, [r4, #14]
 80136f6:	2001      	movs	r0, #1
 80136f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136fa:	bf00      	nop

080136fc <uxr_update_output_stream_heartbeat_timestamp>:
 80136fc:	b570      	push	{r4, r5, r6, lr}
 80136fe:	8a01      	ldrh	r1, [r0, #16]
 8013700:	4604      	mov	r4, r0
 8013702:	8a40      	ldrh	r0, [r0, #18]
 8013704:	4615      	mov	r5, r2
 8013706:	461e      	mov	r6, r3
 8013708:	f000 f8a2 	bl	8013850 <uxr_seq_num_cmp>
 801370c:	2800      	cmp	r0, #0
 801370e:	db07      	blt.n	8013720 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8013710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013714:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013718:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801371c:	2000      	movs	r0, #0
 801371e:	bd70      	pop	{r4, r5, r6, pc}
 8013720:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013724:	b940      	cbnz	r0, 8013738 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8013726:	2301      	movs	r3, #1
 8013728:	f884 3020 	strb.w	r3, [r4, #32]
 801372c:	3564      	adds	r5, #100	; 0x64
 801372e:	f146 0600 	adc.w	r6, r6, #0
 8013732:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013736:	bd70      	pop	{r4, r5, r6, pc}
 8013738:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801373c:	4295      	cmp	r5, r2
 801373e:	eb76 0303 	sbcs.w	r3, r6, r3
 8013742:	bfa5      	ittet	ge
 8013744:	3001      	addge	r0, #1
 8013746:	f884 0020 	strbge.w	r0, [r4, #32]
 801374a:	2000      	movlt	r0, #0
 801374c:	2001      	movge	r0, #1
 801374e:	e7ed      	b.n	801372c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08013750 <uxr_begin_output_nack_buffer_it>:
 8013750:	8a40      	ldrh	r0, [r0, #18]
 8013752:	4770      	bx	lr

08013754 <uxr_next_reliable_nack_buffer_to_send>:
 8013754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013758:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 801375c:	b082      	sub	sp, #8
 801375e:	f1b8 0f00 	cmp.w	r8, #0
 8013762:	d011      	beq.n	8013788 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8013764:	4604      	mov	r4, r0
 8013766:	8818      	ldrh	r0, [r3, #0]
 8013768:	460e      	mov	r6, r1
 801376a:	4617      	mov	r7, r2
 801376c:	461d      	mov	r5, r3
 801376e:	2101      	movs	r1, #1
 8013770:	f000 f866 	bl	8013840 <uxr_seq_num_add>
 8013774:	8028      	strh	r0, [r5, #0]
 8013776:	8a21      	ldrh	r1, [r4, #16]
 8013778:	f000 f86a 	bl	8013850 <uxr_seq_num_cmp>
 801377c:	2800      	cmp	r0, #0
 801377e:	dd07      	ble.n	8013790 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8013780:	f04f 0800 	mov.w	r8, #0
 8013784:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8013788:	4640      	mov	r0, r8
 801378a:	b002      	add	sp, #8
 801378c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013790:	8921      	ldrh	r1, [r4, #8]
 8013792:	8828      	ldrh	r0, [r5, #0]
 8013794:	6823      	ldr	r3, [r4, #0]
 8013796:	fbb0 f2f1 	udiv	r2, r0, r1
 801379a:	fb01 0c12 	mls	ip, r1, r2, r0
 801379e:	fa1f f28c 	uxth.w	r2, ip
 80137a2:	9301      	str	r3, [sp, #4]
 80137a4:	6863      	ldr	r3, [r4, #4]
 80137a6:	fbb3 fcf1 	udiv	ip, r3, r1
 80137aa:	9b01      	ldr	r3, [sp, #4]
 80137ac:	fb02 fc0c 	mul.w	ip, r2, ip
 80137b0:	f10c 0c04 	add.w	ip, ip, #4
 80137b4:	4463      	add	r3, ip
 80137b6:	6033      	str	r3, [r6, #0]
 80137b8:	6823      	ldr	r3, [r4, #0]
 80137ba:	4463      	add	r3, ip
 80137bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80137c0:	603b      	str	r3, [r7, #0]
 80137c2:	7b22      	ldrb	r2, [r4, #12]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d0d2      	beq.n	801376e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80137c8:	4640      	mov	r0, r8
 80137ca:	b002      	add	sp, #8
 80137cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137d0 <uxr_process_acknack>:
 80137d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137d2:	4604      	mov	r4, r0
 80137d4:	460e      	mov	r6, r1
 80137d6:	4610      	mov	r0, r2
 80137d8:	2101      	movs	r1, #1
 80137da:	f000 f835 	bl	8013848 <uxr_seq_num_sub>
 80137de:	8a61      	ldrh	r1, [r4, #18]
 80137e0:	f000 f832 	bl	8013848 <uxr_seq_num_sub>
 80137e4:	b1c0      	cbz	r0, 8013818 <uxr_process_acknack+0x48>
 80137e6:	4605      	mov	r5, r0
 80137e8:	2700      	movs	r7, #0
 80137ea:	2101      	movs	r1, #1
 80137ec:	8a60      	ldrh	r0, [r4, #18]
 80137ee:	f000 f827 	bl	8013840 <uxr_seq_num_add>
 80137f2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80137f6:	fbb0 f1fc 	udiv	r1, r0, ip
 80137fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80137fe:	fb0c 0111 	mls	r1, ip, r1, r0
 8013802:	b289      	uxth	r1, r1
 8013804:	3701      	adds	r7, #1
 8013806:	fbb3 f3fc 	udiv	r3, r3, ip
 801380a:	fb01 f303 	mul.w	r3, r1, r3
 801380e:	42bd      	cmp	r5, r7
 8013810:	7b21      	ldrb	r1, [r4, #12]
 8013812:	8260      	strh	r0, [r4, #18]
 8013814:	50d1      	str	r1, [r2, r3]
 8013816:	d1e8      	bne.n	80137ea <uxr_process_acknack+0x1a>
 8013818:	3e00      	subs	r6, #0
 801381a:	f04f 0300 	mov.w	r3, #0
 801381e:	bf18      	it	ne
 8013820:	2601      	movne	r6, #1
 8013822:	f884 3020 	strb.w	r3, [r4, #32]
 8013826:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801382c <uxr_is_output_up_to_date>:
 801382c:	8a01      	ldrh	r1, [r0, #16]
 801382e:	8a40      	ldrh	r0, [r0, #18]
 8013830:	b508      	push	{r3, lr}
 8013832:	f000 f80d 	bl	8013850 <uxr_seq_num_cmp>
 8013836:	fab0 f080 	clz	r0, r0
 801383a:	0940      	lsrs	r0, r0, #5
 801383c:	bd08      	pop	{r3, pc}
 801383e:	bf00      	nop

08013840 <uxr_seq_num_add>:
 8013840:	4408      	add	r0, r1
 8013842:	b280      	uxth	r0, r0
 8013844:	4770      	bx	lr
 8013846:	bf00      	nop

08013848 <uxr_seq_num_sub>:
 8013848:	1a40      	subs	r0, r0, r1
 801384a:	b280      	uxth	r0, r0
 801384c:	4770      	bx	lr
 801384e:	bf00      	nop

08013850 <uxr_seq_num_cmp>:
 8013850:	4288      	cmp	r0, r1
 8013852:	d011      	beq.n	8013878 <uxr_seq_num_cmp+0x28>
 8013854:	d309      	bcc.n	801386a <uxr_seq_num_cmp+0x1a>
 8013856:	4288      	cmp	r0, r1
 8013858:	d910      	bls.n	801387c <uxr_seq_num_cmp+0x2c>
 801385a:	1a40      	subs	r0, r0, r1
 801385c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013860:	bfd4      	ite	le
 8013862:	2001      	movle	r0, #1
 8013864:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8013868:	4770      	bx	lr
 801386a:	1a0b      	subs	r3, r1, r0
 801386c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013870:	daf1      	bge.n	8013856 <uxr_seq_num_cmp+0x6>
 8013872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013876:	4770      	bx	lr
 8013878:	2000      	movs	r0, #0
 801387a:	4770      	bx	lr
 801387c:	2001      	movs	r0, #1
 801387e:	4770      	bx	lr

08013880 <uxr_init_framing_io>:
 8013880:	2300      	movs	r3, #0
 8013882:	7041      	strb	r1, [r0, #1]
 8013884:	7003      	strb	r3, [r0, #0]
 8013886:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013888:	4770      	bx	lr
 801388a:	bf00      	nop

0801388c <uxr_write_framed_msg>:
 801388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013890:	4617      	mov	r7, r2
 8013892:	7842      	ldrb	r2, [r0, #1]
 8013894:	b083      	sub	sp, #12
 8013896:	460e      	mov	r6, r1
 8013898:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801389c:	469a      	mov	sl, r3
 801389e:	2901      	cmp	r1, #1
 80138a0:	f04f 037e 	mov.w	r3, #126	; 0x7e
 80138a4:	4604      	mov	r4, r0
 80138a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80138aa:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80138ae:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80138b2:	f240 8137 	bls.w	8013b24 <uxr_write_framed_msg+0x298>
 80138b6:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80138ba:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80138be:	2901      	cmp	r1, #1
 80138c0:	f04f 0202 	mov.w	r2, #2
 80138c4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80138c8:	f240 808f 	bls.w	80139ea <uxr_write_framed_msg+0x15e>
 80138cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138ce:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80138d2:	b2dd      	uxtb	r5, r3
 80138d4:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80138d8:	2203      	movs	r2, #3
 80138da:	2901      	cmp	r1, #1
 80138dc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80138e0:	f240 809a 	bls.w	8013a18 <uxr_write_framed_msg+0x18c>
 80138e4:	18a1      	adds	r1, r4, r2
 80138e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138e8:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 80138ec:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80138f0:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80138f4:	3201      	adds	r2, #1
 80138f6:	2801      	cmp	r0, #1
 80138f8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80138fc:	f240 80a0 	bls.w	8013a40 <uxr_write_framed_msg+0x1b4>
 8013900:	18a0      	adds	r0, r4, r2
 8013902:	3201      	adds	r2, #1
 8013904:	b2d2      	uxtb	r2, r2
 8013906:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801390a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801390e:	2b00      	cmp	r3, #0
 8013910:	f000 80a9 	beq.w	8013a66 <uxr_write_framed_msg+0x1da>
 8013914:	f04f 0900 	mov.w	r9, #0
 8013918:	46c8      	mov	r8, r9
 801391a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801391e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013922:	2901      	cmp	r1, #1
 8013924:	f240 80c3 	bls.w	8013aae <uxr_write_framed_msg+0x222>
 8013928:	2a29      	cmp	r2, #41	; 0x29
 801392a:	f200 809f 	bhi.w	8013a6c <uxr_write_framed_msg+0x1e0>
 801392e:	18a1      	adds	r1, r4, r2
 8013930:	3201      	adds	r2, #1
 8013932:	b2d2      	uxtb	r2, r2
 8013934:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8013938:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801393c:	ea89 0303 	eor.w	r3, r9, r3
 8013940:	498c      	ldr	r1, [pc, #560]	; (8013b74 <uxr_write_framed_msg+0x2e8>)
 8013942:	b2db      	uxtb	r3, r3
 8013944:	f108 0801 	add.w	r8, r8, #1
 8013948:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801394c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013952:	4543      	cmp	r3, r8
 8013954:	d8e1      	bhi.n	801391a <uxr_write_framed_msg+0x8e>
 8013956:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801395a:	fa5f f889 	uxtb.w	r8, r9
 801395e:	9301      	str	r3, [sp, #4]
 8013960:	f04f 0900 	mov.w	r9, #0
 8013964:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8013968:	fa5f f18a 	uxtb.w	r1, sl
 801396c:	2901      	cmp	r1, #1
 801396e:	d921      	bls.n	80139b4 <uxr_write_framed_msg+0x128>
 8013970:	2a29      	cmp	r2, #41	; 0x29
 8013972:	f240 80af 	bls.w	8013ad4 <uxr_write_framed_msg+0x248>
 8013976:	2500      	movs	r5, #0
 8013978:	e000      	b.n	801397c <uxr_write_framed_msg+0xf0>
 801397a:	b160      	cbz	r0, 8013996 <uxr_write_framed_msg+0x10a>
 801397c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013980:	1b52      	subs	r2, r2, r5
 8013982:	465b      	mov	r3, fp
 8013984:	4421      	add	r1, r4
 8013986:	4638      	mov	r0, r7
 8013988:	47b0      	blx	r6
 801398a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801398e:	4405      	add	r5, r0
 8013990:	4295      	cmp	r5, r2
 8013992:	d3f2      	bcc.n	801397a <uxr_write_framed_msg+0xee>
 8013994:	d003      	beq.n	801399e <uxr_write_framed_msg+0x112>
 8013996:	2000      	movs	r0, #0
 8013998:	b003      	add	sp, #12
 801399a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801399e:	fa5f f18a 	uxtb.w	r1, sl
 80139a2:	f04f 0300 	mov.w	r3, #0
 80139a6:	2901      	cmp	r1, #1
 80139a8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80139ac:	f04f 0200 	mov.w	r2, #0
 80139b0:	f200 8090 	bhi.w	8013ad4 <uxr_write_framed_msg+0x248>
 80139b4:	1c51      	adds	r1, r2, #1
 80139b6:	b2c9      	uxtb	r1, r1
 80139b8:	2929      	cmp	r1, #41	; 0x29
 80139ba:	d8dc      	bhi.n	8013976 <uxr_write_framed_msg+0xea>
 80139bc:	18a5      	adds	r5, r4, r2
 80139be:	4421      	add	r1, r4
 80139c0:	3202      	adds	r2, #2
 80139c2:	f088 0820 	eor.w	r8, r8, #32
 80139c6:	4648      	mov	r0, r9
 80139c8:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80139cc:	b2d2      	uxtb	r2, r2
 80139ce:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80139d2:	f04f 0901 	mov.w	r9, #1
 80139d6:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80139da:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80139de:	2800      	cmp	r0, #0
 80139e0:	f040 8085 	bne.w	8013aee <uxr_write_framed_msg+0x262>
 80139e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80139e8:	e7bc      	b.n	8013964 <uxr_write_framed_msg+0xd8>
 80139ea:	4611      	mov	r1, r2
 80139ec:	f04f 0c03 	mov.w	ip, #3
 80139f0:	2204      	movs	r2, #4
 80139f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139f4:	4421      	add	r1, r4
 80139f6:	b2dd      	uxtb	r5, r3
 80139f8:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80139fc:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8013a00:	44a4      	add	ip, r4
 8013a02:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013a06:	f080 0020 	eor.w	r0, r0, #32
 8013a0a:	2901      	cmp	r1, #1
 8013a0c:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8013a10:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a14:	f63f af66 	bhi.w	80138e4 <uxr_write_framed_msg+0x58>
 8013a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a1a:	18a0      	adds	r0, r4, r2
 8013a1c:	f085 0520 	eor.w	r5, r5, #32
 8013a20:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013a24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013a28:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8013a2c:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8013a30:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8013a34:	3202      	adds	r2, #2
 8013a36:	2801      	cmp	r0, #1
 8013a38:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a3c:	f63f af60 	bhi.w	8013900 <uxr_write_framed_msg+0x74>
 8013a40:	1c50      	adds	r0, r2, #1
 8013a42:	18a5      	adds	r5, r4, r2
 8013a44:	fa54 f080 	uxtab	r0, r4, r0
 8013a48:	3202      	adds	r2, #2
 8013a4a:	f081 0120 	eor.w	r1, r1, #32
 8013a4e:	b2d2      	uxtb	r2, r2
 8013a50:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013a54:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8013a58:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013a5c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	f47f af57 	bne.w	8013914 <uxr_write_framed_msg+0x88>
 8013a66:	9301      	str	r3, [sp, #4]
 8013a68:	4698      	mov	r8, r3
 8013a6a:	e779      	b.n	8013960 <uxr_write_framed_msg+0xd4>
 8013a6c:	2500      	movs	r5, #0
 8013a6e:	e001      	b.n	8013a74 <uxr_write_framed_msg+0x1e8>
 8013a70:	2800      	cmp	r0, #0
 8013a72:	d090      	beq.n	8013996 <uxr_write_framed_msg+0x10a>
 8013a74:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013a78:	1b52      	subs	r2, r2, r5
 8013a7a:	465b      	mov	r3, fp
 8013a7c:	4421      	add	r1, r4
 8013a7e:	4638      	mov	r0, r7
 8013a80:	47b0      	blx	r6
 8013a82:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013a86:	4405      	add	r5, r0
 8013a88:	4295      	cmp	r5, r2
 8013a8a:	d3f1      	bcc.n	8013a70 <uxr_write_framed_msg+0x1e4>
 8013a8c:	d183      	bne.n	8013996 <uxr_write_framed_msg+0x10a>
 8013a8e:	f04f 0300 	mov.w	r3, #0
 8013a92:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a98:	4543      	cmp	r3, r8
 8013a9a:	d964      	bls.n	8013b66 <uxr_write_framed_msg+0x2da>
 8013a9c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013aa0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013aa4:	2901      	cmp	r1, #1
 8013aa6:	f04f 0200 	mov.w	r2, #0
 8013aaa:	f63f af3d 	bhi.w	8013928 <uxr_write_framed_msg+0x9c>
 8013aae:	1c51      	adds	r1, r2, #1
 8013ab0:	b2c9      	uxtb	r1, r1
 8013ab2:	2929      	cmp	r1, #41	; 0x29
 8013ab4:	d8da      	bhi.n	8013a6c <uxr_write_framed_msg+0x1e0>
 8013ab6:	18a0      	adds	r0, r4, r2
 8013ab8:	4421      	add	r1, r4
 8013aba:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8013abe:	3202      	adds	r2, #2
 8013ac0:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8013ac4:	b2d2      	uxtb	r2, r2
 8013ac6:	f083 0020 	eor.w	r0, r3, #32
 8013aca:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8013ace:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013ad2:	e733      	b.n	801393c <uxr_write_framed_msg+0xb0>
 8013ad4:	18a1      	adds	r1, r4, r2
 8013ad6:	3201      	adds	r2, #1
 8013ad8:	4648      	mov	r0, r9
 8013ada:	b2d2      	uxtb	r2, r2
 8013adc:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8013ae0:	f04f 0901 	mov.w	r9, #1
 8013ae4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	f43f af7b 	beq.w	80139e4 <uxr_write_framed_msg+0x158>
 8013aee:	2500      	movs	r5, #0
 8013af0:	e002      	b.n	8013af8 <uxr_write_framed_msg+0x26c>
 8013af2:	2800      	cmp	r0, #0
 8013af4:	f43f af4f 	beq.w	8013996 <uxr_write_framed_msg+0x10a>
 8013af8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013afc:	1b52      	subs	r2, r2, r5
 8013afe:	465b      	mov	r3, fp
 8013b00:	4421      	add	r1, r4
 8013b02:	4638      	mov	r0, r7
 8013b04:	47b0      	blx	r6
 8013b06:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013b0a:	4405      	add	r5, r0
 8013b0c:	4295      	cmp	r5, r2
 8013b0e:	d3f0      	bcc.n	8013af2 <uxr_write_framed_msg+0x266>
 8013b10:	f47f af41 	bne.w	8013996 <uxr_write_framed_msg+0x10a>
 8013b14:	2300      	movs	r3, #0
 8013b16:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b1c:	b298      	uxth	r0, r3
 8013b1e:	b003      	add	sp, #12
 8013b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b24:	217d      	movs	r1, #125	; 0x7d
 8013b26:	f082 0220 	eor.w	r2, r2, #32
 8013b2a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8013b2e:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8013b32:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8013b36:	2901      	cmp	r1, #1
 8013b38:	f04f 0203 	mov.w	r2, #3
 8013b3c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013b40:	d804      	bhi.n	8013b4c <uxr_write_framed_msg+0x2c0>
 8013b42:	4611      	mov	r1, r2
 8013b44:	f04f 0c04 	mov.w	ip, #4
 8013b48:	2205      	movs	r2, #5
 8013b4a:	e752      	b.n	80139f2 <uxr_write_framed_msg+0x166>
 8013b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b4e:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8013b52:	b2dd      	uxtb	r5, r3
 8013b54:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013b58:	2204      	movs	r2, #4
 8013b5a:	2901      	cmp	r1, #1
 8013b5c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013b60:	f63f aec0 	bhi.w	80138e4 <uxr_write_framed_msg+0x58>
 8013b64:	e758      	b.n	8013a18 <uxr_write_framed_msg+0x18c>
 8013b66:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013b6a:	fa5f f889 	uxtb.w	r8, r9
 8013b6e:	9301      	str	r3, [sp, #4]
 8013b70:	2200      	movs	r2, #0
 8013b72:	e6f5      	b.n	8013960 <uxr_write_framed_msg+0xd4>
 8013b74:	08016cf8 	.word	0x08016cf8

08013b78 <uxr_framing_read_transport>:
 8013b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b7c:	4604      	mov	r4, r0
 8013b7e:	b083      	sub	sp, #12
 8013b80:	461f      	mov	r7, r3
 8013b82:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013b86:	4689      	mov	r9, r1
 8013b88:	4692      	mov	sl, r2
 8013b8a:	f7fa f93b 	bl	800de04 <uxr_millis>
 8013b8e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013b92:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013b96:	42b3      	cmp	r3, r6
 8013b98:	4680      	mov	r8, r0
 8013b9a:	d061      	beq.n	8013c60 <uxr_framing_read_transport+0xe8>
 8013b9c:	d81c      	bhi.n	8013bd8 <uxr_framing_read_transport+0x60>
 8013b9e:	1e75      	subs	r5, r6, #1
 8013ba0:	1aed      	subs	r5, r5, r3
 8013ba2:	b2ed      	uxtb	r5, r5
 8013ba4:	2600      	movs	r6, #0
 8013ba6:	455d      	cmp	r5, fp
 8013ba8:	d81f      	bhi.n	8013bea <uxr_framing_read_transport+0x72>
 8013baa:	19ab      	adds	r3, r5, r6
 8013bac:	455b      	cmp	r3, fp
 8013bae:	bf84      	itt	hi
 8013bb0:	ebab 0605 	subhi.w	r6, fp, r5
 8013bb4:	b2f6      	uxtbhi	r6, r6
 8013bb6:	b9ed      	cbnz	r5, 8013bf4 <uxr_framing_read_transport+0x7c>
 8013bb8:	f04f 0b00 	mov.w	fp, #0
 8013bbc:	f7fa f922 	bl	800de04 <uxr_millis>
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	eba0 0808 	sub.w	r8, r0, r8
 8013bc6:	eba3 0308 	sub.w	r3, r3, r8
 8013bca:	4658      	mov	r0, fp
 8013bcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013bd0:	603b      	str	r3, [r7, #0]
 8013bd2:	b003      	add	sp, #12
 8013bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bd8:	2e00      	cmp	r6, #0
 8013bda:	d049      	beq.n	8013c70 <uxr_framing_read_transport+0xf8>
 8013bdc:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8013be0:	b2ed      	uxtb	r5, r5
 8013be2:	3e01      	subs	r6, #1
 8013be4:	455d      	cmp	r5, fp
 8013be6:	b2f6      	uxtb	r6, r6
 8013be8:	d9df      	bls.n	8013baa <uxr_framing_read_transport+0x32>
 8013bea:	fa5f f58b 	uxtb.w	r5, fp
 8013bee:	2600      	movs	r6, #0
 8013bf0:	2d00      	cmp	r5, #0
 8013bf2:	d0e1      	beq.n	8013bb8 <uxr_framing_read_transport+0x40>
 8013bf4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013bf8:	3102      	adds	r1, #2
 8013bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bfc:	9300      	str	r3, [sp, #0]
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	4421      	add	r1, r4
 8013c02:	462a      	mov	r2, r5
 8013c04:	4650      	mov	r0, sl
 8013c06:	47c8      	blx	r9
 8013c08:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013c0c:	4a1a      	ldr	r2, [pc, #104]	; (8013c78 <uxr_framing_read_transport+0x100>)
 8013c0e:	4403      	add	r3, r0
 8013c10:	0859      	lsrs	r1, r3, #1
 8013c12:	fba2 2101 	umull	r2, r1, r2, r1
 8013c16:	0889      	lsrs	r1, r1, #2
 8013c18:	222a      	movs	r2, #42	; 0x2a
 8013c1a:	fb02 3111 	mls	r1, r2, r1, r3
 8013c1e:	4683      	mov	fp, r0
 8013c20:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d0c7      	beq.n	8013bb8 <uxr_framing_read_transport+0x40>
 8013c28:	42a8      	cmp	r0, r5
 8013c2a:	d1c7      	bne.n	8013bbc <uxr_framing_read_transport+0x44>
 8013c2c:	2e00      	cmp	r6, #0
 8013c2e:	d0c5      	beq.n	8013bbc <uxr_framing_read_transport+0x44>
 8013c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	3102      	adds	r1, #2
 8013c36:	4632      	mov	r2, r6
 8013c38:	4421      	add	r1, r4
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	4650      	mov	r0, sl
 8013c3e:	47c8      	blx	r9
 8013c40:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013c44:	4a0c      	ldr	r2, [pc, #48]	; (8013c78 <uxr_framing_read_transport+0x100>)
 8013c46:	180b      	adds	r3, r1, r0
 8013c48:	0859      	lsrs	r1, r3, #1
 8013c4a:	fba2 1201 	umull	r1, r2, r2, r1
 8013c4e:	0892      	lsrs	r2, r2, #2
 8013c50:	212a      	movs	r1, #42	; 0x2a
 8013c52:	fb01 3312 	mls	r3, r1, r2, r3
 8013c56:	eb00 0b05 	add.w	fp, r0, r5
 8013c5a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8013c5e:	e7ad      	b.n	8013bbc <uxr_framing_read_transport+0x44>
 8013c60:	2600      	movs	r6, #0
 8013c62:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8013c66:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8013c68:	d9bf      	bls.n	8013bea <uxr_framing_read_transport+0x72>
 8013c6a:	2102      	movs	r1, #2
 8013c6c:	2529      	movs	r5, #41	; 0x29
 8013c6e:	e7c4      	b.n	8013bfa <uxr_framing_read_transport+0x82>
 8013c70:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8013c74:	b2ed      	uxtb	r5, r5
 8013c76:	e796      	b.n	8013ba6 <uxr_framing_read_transport+0x2e>
 8013c78:	30c30c31 	.word	0x30c30c31

08013c7c <uxr_read_framed_msg>:
 8013c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c80:	461e      	mov	r6, r3
 8013c82:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8013c86:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8013c8a:	429d      	cmp	r5, r3
 8013c8c:	b083      	sub	sp, #12
 8013c8e:	4604      	mov	r4, r0
 8013c90:	4688      	mov	r8, r1
 8013c92:	4691      	mov	r9, r2
 8013c94:	f000 8188 	beq.w	8013fa8 <uxr_read_framed_msg+0x32c>
 8013c98:	7823      	ldrb	r3, [r4, #0]
 8013c9a:	4dc1      	ldr	r5, [pc, #772]	; (8013fa0 <uxr_read_framed_msg+0x324>)
 8013c9c:	4fc1      	ldr	r7, [pc, #772]	; (8013fa4 <uxr_read_framed_msg+0x328>)
 8013c9e:	2b07      	cmp	r3, #7
 8013ca0:	d8fd      	bhi.n	8013c9e <uxr_read_framed_msg+0x22>
 8013ca2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013ca6:	0115      	.short	0x0115
 8013ca8:	00d600f6 	.word	0x00d600f6
 8013cac:	009000b9 	.word	0x009000b9
 8013cb0:	0030004d 	.word	0x0030004d
 8013cb4:	0008      	.short	0x0008
 8013cb6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013cba:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013cbe:	4299      	cmp	r1, r3
 8013cc0:	f000 814a 	beq.w	8013f58 <uxr_read_framed_msg+0x2dc>
 8013cc4:	18e2      	adds	r2, r4, r3
 8013cc6:	7892      	ldrb	r2, [r2, #2]
 8013cc8:	2a7d      	cmp	r2, #125	; 0x7d
 8013cca:	f000 8199 	beq.w	8014000 <uxr_read_framed_msg+0x384>
 8013cce:	3301      	adds	r3, #1
 8013cd0:	0858      	lsrs	r0, r3, #1
 8013cd2:	fba5 1000 	umull	r1, r0, r5, r0
 8013cd6:	0880      	lsrs	r0, r0, #2
 8013cd8:	212a      	movs	r1, #42	; 0x2a
 8013cda:	fb01 3310 	mls	r3, r1, r0, r3
 8013cde:	2a7e      	cmp	r2, #126	; 0x7e
 8013ce0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013ce4:	f000 8252 	beq.w	801418c <uxr_read_framed_msg+0x510>
 8013ce8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013cea:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8013cec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	4299      	cmp	r1, r3
 8013cf6:	86a3      	strh	r3, [r4, #52]	; 0x34
 8013cf8:	7022      	strb	r2, [r4, #0]
 8013cfa:	f000 8179 	beq.w	8013ff0 <uxr_read_framed_msg+0x374>
 8013cfe:	2000      	movs	r0, #0
 8013d00:	b003      	add	sp, #12
 8013d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d06:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013d0a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013d0e:	4299      	cmp	r1, r3
 8013d10:	f000 8131 	beq.w	8013f76 <uxr_read_framed_msg+0x2fa>
 8013d14:	18e2      	adds	r2, r4, r3
 8013d16:	7890      	ldrb	r0, [r2, #2]
 8013d18:	287d      	cmp	r0, #125	; 0x7d
 8013d1a:	f000 8190 	beq.w	801403e <uxr_read_framed_msg+0x3c2>
 8013d1e:	3301      	adds	r3, #1
 8013d20:	085a      	lsrs	r2, r3, #1
 8013d22:	fba5 1202 	umull	r1, r2, r5, r2
 8013d26:	0892      	lsrs	r2, r2, #2
 8013d28:	212a      	movs	r1, #42	; 0x2a
 8013d2a:	fb01 3312 	mls	r3, r1, r2, r3
 8013d2e:	287e      	cmp	r0, #126	; 0x7e
 8013d30:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013d34:	f000 821a 	beq.w	801416c <uxr_read_framed_msg+0x4f0>
 8013d38:	2307      	movs	r3, #7
 8013d3a:	86a0      	strh	r0, [r4, #52]	; 0x34
 8013d3c:	7023      	strb	r3, [r4, #0]
 8013d3e:	e7ae      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 8013d40:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013d42:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013d46:	459e      	cmp	lr, r3
 8013d48:	d938      	bls.n	8013dbc <uxr_read_framed_msg+0x140>
 8013d4a:	ee07 8a90 	vmov	s15, r8
 8013d4e:	212a      	movs	r1, #42	; 0x2a
 8013d50:	e020      	b.n	8013d94 <uxr_read_framed_msg+0x118>
 8013d52:	f89b c002 	ldrb.w	ip, [fp, #2]
 8013d56:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8013d5a:	f000 80d4 	beq.w	8013f06 <uxr_read_framed_msg+0x28a>
 8013d5e:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8013d62:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013d66:	f000 8219 	beq.w	801419c <uxr_read_framed_msg+0x520>
 8013d6a:	f806 c003 	strb.w	ip, [r6, r3]
 8013d6e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8013d72:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013d74:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013d78:	ea8a 000c 	eor.w	r0, sl, ip
 8013d7c:	b2c0      	uxtb	r0, r0
 8013d7e:	3301      	adds	r3, #1
 8013d80:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8013d8a:	4573      	cmp	r3, lr
 8013d8c:	8663      	strh	r3, [r4, #50]	; 0x32
 8013d8e:	86e2      	strh	r2, [r4, #54]	; 0x36
 8013d90:	f080 8120 	bcs.w	8013fd4 <uxr_read_framed_msg+0x358>
 8013d94:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8013d98:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8013d9c:	f100 0c01 	add.w	ip, r0, #1
 8013da0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013da4:	fba5 8202 	umull	r8, r2, r5, r2
 8013da8:	0892      	lsrs	r2, r2, #2
 8013daa:	4582      	cmp	sl, r0
 8013dac:	eb04 0b00 	add.w	fp, r4, r0
 8013db0:	fb01 c212 	mls	r2, r1, r2, ip
 8013db4:	d1cd      	bne.n	8013d52 <uxr_read_framed_msg+0xd6>
 8013db6:	ee17 8a90 	vmov	r8, s15
 8013dba:	459e      	cmp	lr, r3
 8013dbc:	f040 8111 	bne.w	8013fe2 <uxr_read_framed_msg+0x366>
 8013dc0:	2306      	movs	r3, #6
 8013dc2:	7023      	strb	r3, [r4, #0]
 8013dc4:	e76b      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 8013dc6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013dca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013dce:	4298      	cmp	r0, r3
 8013dd0:	f000 80c2 	beq.w	8013f58 <uxr_read_framed_msg+0x2dc>
 8013dd4:	18e2      	adds	r2, r4, r3
 8013dd6:	7891      	ldrb	r1, [r2, #2]
 8013dd8:	297d      	cmp	r1, #125	; 0x7d
 8013dda:	f000 814c 	beq.w	8014076 <uxr_read_framed_msg+0x3fa>
 8013dde:	3301      	adds	r3, #1
 8013de0:	085a      	lsrs	r2, r3, #1
 8013de2:	fba5 0202 	umull	r0, r2, r5, r2
 8013de6:	0892      	lsrs	r2, r2, #2
 8013de8:	202a      	movs	r0, #42	; 0x2a
 8013dea:	fb00 3312 	mls	r3, r0, r2, r3
 8013dee:	297e      	cmp	r1, #126	; 0x7e
 8013df0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013df4:	f000 81ca 	beq.w	801418c <uxr_read_framed_msg+0x510>
 8013df8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013dfa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013dfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	2000      	movs	r0, #0
 8013e04:	428b      	cmp	r3, r1
 8013e06:	8623      	strh	r3, [r4, #48]	; 0x30
 8013e08:	8660      	strh	r0, [r4, #50]	; 0x32
 8013e0a:	86e0      	strh	r0, [r4, #54]	; 0x36
 8013e0c:	f240 80df 	bls.w	8013fce <uxr_read_framed_msg+0x352>
 8013e10:	7020      	strb	r0, [r4, #0]
 8013e12:	b003      	add	sp, #12
 8013e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e18:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013e1c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013e20:	4299      	cmp	r1, r3
 8013e22:	f000 80a8 	beq.w	8013f76 <uxr_read_framed_msg+0x2fa>
 8013e26:	18e2      	adds	r2, r4, r3
 8013e28:	7890      	ldrb	r0, [r2, #2]
 8013e2a:	287d      	cmp	r0, #125	; 0x7d
 8013e2c:	f000 8164 	beq.w	80140f8 <uxr_read_framed_msg+0x47c>
 8013e30:	3301      	adds	r3, #1
 8013e32:	085a      	lsrs	r2, r3, #1
 8013e34:	fba5 1202 	umull	r1, r2, r5, r2
 8013e38:	0892      	lsrs	r2, r2, #2
 8013e3a:	212a      	movs	r1, #42	; 0x2a
 8013e3c:	fb01 3312 	mls	r3, r1, r2, r3
 8013e40:	287e      	cmp	r0, #126	; 0x7e
 8013e42:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013e46:	f000 8191 	beq.w	801416c <uxr_read_framed_msg+0x4f0>
 8013e4a:	2304      	movs	r3, #4
 8013e4c:	8620      	strh	r0, [r4, #48]	; 0x30
 8013e4e:	7023      	strb	r3, [r4, #0]
 8013e50:	e725      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 8013e52:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013e56:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013e5a:	4290      	cmp	r0, r2
 8013e5c:	f000 80b3 	beq.w	8013fc6 <uxr_read_framed_msg+0x34a>
 8013e60:	18a3      	adds	r3, r4, r2
 8013e62:	7899      	ldrb	r1, [r3, #2]
 8013e64:	297d      	cmp	r1, #125	; 0x7d
 8013e66:	f000 8164 	beq.w	8014132 <uxr_read_framed_msg+0x4b6>
 8013e6a:	3201      	adds	r2, #1
 8013e6c:	0850      	lsrs	r0, r2, #1
 8013e6e:	fba5 3000 	umull	r3, r0, r5, r0
 8013e72:	0880      	lsrs	r0, r0, #2
 8013e74:	232a      	movs	r3, #42	; 0x2a
 8013e76:	fb03 2210 	mls	r2, r3, r0, r2
 8013e7a:	297e      	cmp	r1, #126	; 0x7e
 8013e7c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013e80:	f000 8188 	beq.w	8014194 <uxr_read_framed_msg+0x518>
 8013e84:	7863      	ldrb	r3, [r4, #1]
 8013e86:	428b      	cmp	r3, r1
 8013e88:	bf0c      	ite	eq
 8013e8a:	2303      	moveq	r3, #3
 8013e8c:	2300      	movne	r3, #0
 8013e8e:	7023      	strb	r3, [r4, #0]
 8013e90:	e705      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 8013e92:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013e96:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	4299      	cmp	r1, r3
 8013e9e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8013ea2:	d06c      	beq.n	8013f7e <uxr_read_framed_msg+0x302>
 8013ea4:	18e2      	adds	r2, r4, r3
 8013ea6:	7890      	ldrb	r0, [r2, #2]
 8013ea8:	287d      	cmp	r0, #125	; 0x7d
 8013eaa:	f000 8101 	beq.w	80140b0 <uxr_read_framed_msg+0x434>
 8013eae:	3301      	adds	r3, #1
 8013eb0:	085a      	lsrs	r2, r3, #1
 8013eb2:	fba5 1202 	umull	r1, r2, r5, r2
 8013eb6:	0892      	lsrs	r2, r2, #2
 8013eb8:	212a      	movs	r1, #42	; 0x2a
 8013eba:	fb01 3312 	mls	r3, r1, r2, r3
 8013ebe:	287e      	cmp	r0, #126	; 0x7e
 8013ec0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8013ec4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013ec8:	d059      	beq.n	8013f7e <uxr_read_framed_msg+0x302>
 8013eca:	2302      	movs	r3, #2
 8013ecc:	7023      	strb	r3, [r4, #0]
 8013ece:	e6e6      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 8013ed0:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8013ed4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013ed8:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8013edc:	1c51      	adds	r1, r2, #1
 8013ede:	084b      	lsrs	r3, r1, #1
 8013ee0:	fba5 c303 	umull	ip, r3, r5, r3
 8013ee4:	089b      	lsrs	r3, r3, #2
 8013ee6:	fb0e 1313 	mls	r3, lr, r3, r1
 8013eea:	4592      	cmp	sl, r2
 8013eec:	eb04 0002 	add.w	r0, r4, r2
 8013ef0:	b2da      	uxtb	r2, r3
 8013ef2:	f43f af04 	beq.w	8013cfe <uxr_read_framed_msg+0x82>
 8013ef6:	7883      	ldrb	r3, [r0, #2]
 8013ef8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013efc:	2b7e      	cmp	r3, #126	; 0x7e
 8013efe:	d1ed      	bne.n	8013edc <uxr_read_framed_msg+0x260>
 8013f00:	2301      	movs	r3, #1
 8013f02:	7023      	strb	r3, [r4, #0]
 8013f04:	e6cb      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 8013f06:	f100 0c01 	add.w	ip, r0, #1
 8013f0a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013f0e:	fba5 8202 	umull	r8, r2, r5, r2
 8013f12:	0892      	lsrs	r2, r2, #2
 8013f14:	fb01 c212 	mls	r2, r1, r2, ip
 8013f18:	eb04 0c02 	add.w	ip, r4, r2
 8013f1c:	b2d2      	uxtb	r2, r2
 8013f1e:	4592      	cmp	sl, r2
 8013f20:	f100 0002 	add.w	r0, r0, #2
 8013f24:	f43f af47 	beq.w	8013db6 <uxr_read_framed_msg+0x13a>
 8013f28:	0842      	lsrs	r2, r0, #1
 8013f2a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8013f2e:	fba5 8202 	umull	r8, r2, r5, r2
 8013f32:	0892      	lsrs	r2, r2, #2
 8013f34:	fb01 0012 	mls	r0, r1, r2, r0
 8013f38:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8013f3c:	f08a 0c20 	eor.w	ip, sl, #32
 8013f40:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8013f44:	f47f af11 	bne.w	8013d6a <uxr_read_framed_msg+0xee>
 8013f48:	459e      	cmp	lr, r3
 8013f4a:	ee17 8a90 	vmov	r8, s15
 8013f4e:	f43f af37 	beq.w	8013dc0 <uxr_read_framed_msg+0x144>
 8013f52:	2301      	movs	r3, #1
 8013f54:	7023      	strb	r3, [r4, #0]
 8013f56:	e6a2      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 8013f58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f5a:	9300      	str	r3, [sp, #0]
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	9301      	str	r3, [sp, #4]
 8013f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f62:	464a      	mov	r2, r9
 8013f64:	4641      	mov	r1, r8
 8013f66:	4620      	mov	r0, r4
 8013f68:	f7ff fe06 	bl	8013b78 <uxr_framing_read_transport>
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	f43f aec6 	beq.w	8013cfe <uxr_read_framed_msg+0x82>
 8013f72:	7823      	ldrb	r3, [r4, #0]
 8013f74:	e693      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 8013f76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f78:	9300      	str	r3, [sp, #0]
 8013f7a:	2302      	movs	r3, #2
 8013f7c:	e7ef      	b.n	8013f5e <uxr_read_framed_msg+0x2e2>
 8013f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f80:	9300      	str	r3, [sp, #0]
 8013f82:	2304      	movs	r3, #4
 8013f84:	9301      	str	r3, [sp, #4]
 8013f86:	464a      	mov	r2, r9
 8013f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f8a:	4641      	mov	r1, r8
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	f7ff fdf3 	bl	8013b78 <uxr_framing_read_transport>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	d1ed      	bne.n	8013f72 <uxr_read_framed_msg+0x2f6>
 8013f96:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013f9a:	2b7e      	cmp	r3, #126	; 0x7e
 8013f9c:	d0e9      	beq.n	8013f72 <uxr_read_framed_msg+0x2f6>
 8013f9e:	e6ae      	b.n	8013cfe <uxr_read_framed_msg+0x82>
 8013fa0:	30c30c31 	.word	0x30c30c31
 8013fa4:	08016cf8 	.word	0x08016cf8
 8013fa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013faa:	9300      	str	r3, [sp, #0]
 8013fac:	2305      	movs	r3, #5
 8013fae:	9301      	str	r3, [sp, #4]
 8013fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fb2:	f7ff fde1 	bl	8013b78 <uxr_framing_read_transport>
 8013fb6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013fba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	f43f ae9d 	beq.w	8013cfe <uxr_read_framed_msg+0x82>
 8013fc4:	e668      	b.n	8013c98 <uxr_read_framed_msg+0x1c>
 8013fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fc8:	9300      	str	r3, [sp, #0]
 8013fca:	2303      	movs	r3, #3
 8013fcc:	e7c7      	b.n	8013f5e <uxr_read_framed_msg+0x2e2>
 8013fce:	2305      	movs	r3, #5
 8013fd0:	7023      	strb	r3, [r4, #0]
 8013fd2:	e664      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 8013fd4:	ee17 8a90 	vmov	r8, s15
 8013fd8:	f43f aef2 	beq.w	8013dc0 <uxr_read_framed_msg+0x144>
 8013fdc:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8013fe0:	d08e      	beq.n	8013f00 <uxr_read_framed_msg+0x284>
 8013fe2:	ebae 0303 	sub.w	r3, lr, r3
 8013fe6:	3302      	adds	r3, #2
 8013fe8:	9301      	str	r3, [sp, #4]
 8013fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fec:	9300      	str	r3, [sp, #0]
 8013fee:	e7b7      	b.n	8013f60 <uxr_read_framed_msg+0x2e4>
 8013ff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013ff2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013ff6:	7013      	strb	r3, [r2, #0]
 8013ff8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8013ffa:	b003      	add	sp, #12
 8013ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014000:	f103 0c01 	add.w	ip, r3, #1
 8014004:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014008:	fba5 0202 	umull	r0, r2, r5, r2
 801400c:	0892      	lsrs	r2, r2, #2
 801400e:	202a      	movs	r0, #42	; 0x2a
 8014010:	fb00 c212 	mls	r2, r0, r2, ip
 8014014:	fa5f fc82 	uxtb.w	ip, r2
 8014018:	4561      	cmp	r1, ip
 801401a:	d09d      	beq.n	8013f58 <uxr_read_framed_msg+0x2dc>
 801401c:	3302      	adds	r3, #2
 801401e:	4422      	add	r2, r4
 8014020:	0859      	lsrs	r1, r3, #1
 8014022:	7892      	ldrb	r2, [r2, #2]
 8014024:	fba5 c101 	umull	ip, r1, r5, r1
 8014028:	0889      	lsrs	r1, r1, #2
 801402a:	fb00 3311 	mls	r3, r0, r1, r3
 801402e:	2a7e      	cmp	r2, #126	; 0x7e
 8014030:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014034:	f000 80aa 	beq.w	801418c <uxr_read_framed_msg+0x510>
 8014038:	f082 0220 	eor.w	r2, r2, #32
 801403c:	e654      	b.n	8013ce8 <uxr_read_framed_msg+0x6c>
 801403e:	1c58      	adds	r0, r3, #1
 8014040:	0842      	lsrs	r2, r0, #1
 8014042:	fba5 c202 	umull	ip, r2, r5, r2
 8014046:	0892      	lsrs	r2, r2, #2
 8014048:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801404c:	fb0c 0212 	mls	r2, ip, r2, r0
 8014050:	b2d0      	uxtb	r0, r2
 8014052:	4281      	cmp	r1, r0
 8014054:	d08f      	beq.n	8013f76 <uxr_read_framed_msg+0x2fa>
 8014056:	4422      	add	r2, r4
 8014058:	3302      	adds	r3, #2
 801405a:	7890      	ldrb	r0, [r2, #2]
 801405c:	085a      	lsrs	r2, r3, #1
 801405e:	fba5 1202 	umull	r1, r2, r5, r2
 8014062:	0892      	lsrs	r2, r2, #2
 8014064:	fb0c 3312 	mls	r3, ip, r2, r3
 8014068:	287e      	cmp	r0, #126	; 0x7e
 801406a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801406e:	d07d      	beq.n	801416c <uxr_read_framed_msg+0x4f0>
 8014070:	f080 0020 	eor.w	r0, r0, #32
 8014074:	e660      	b.n	8013d38 <uxr_read_framed_msg+0xbc>
 8014076:	1c59      	adds	r1, r3, #1
 8014078:	084a      	lsrs	r2, r1, #1
 801407a:	fba5 c202 	umull	ip, r2, r5, r2
 801407e:	0892      	lsrs	r2, r2, #2
 8014080:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8014084:	fb0c 1212 	mls	r2, ip, r2, r1
 8014088:	b2d1      	uxtb	r1, r2
 801408a:	4288      	cmp	r0, r1
 801408c:	f43f af64 	beq.w	8013f58 <uxr_read_framed_msg+0x2dc>
 8014090:	4422      	add	r2, r4
 8014092:	3302      	adds	r3, #2
 8014094:	7891      	ldrb	r1, [r2, #2]
 8014096:	085a      	lsrs	r2, r3, #1
 8014098:	fba5 0202 	umull	r0, r2, r5, r2
 801409c:	0892      	lsrs	r2, r2, #2
 801409e:	fb0c 3312 	mls	r3, ip, r2, r3
 80140a2:	297e      	cmp	r1, #126	; 0x7e
 80140a4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80140a8:	d070      	beq.n	801418c <uxr_read_framed_msg+0x510>
 80140aa:	f081 0120 	eor.w	r1, r1, #32
 80140ae:	e6a3      	b.n	8013df8 <uxr_read_framed_msg+0x17c>
 80140b0:	f103 0c01 	add.w	ip, r3, #1
 80140b4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80140b8:	fba5 0202 	umull	r0, r2, r5, r2
 80140bc:	0892      	lsrs	r2, r2, #2
 80140be:	202a      	movs	r0, #42	; 0x2a
 80140c0:	fb00 c212 	mls	r2, r0, r2, ip
 80140c4:	fa5f fc82 	uxtb.w	ip, r2
 80140c8:	4561      	cmp	r1, ip
 80140ca:	f43f af58 	beq.w	8013f7e <uxr_read_framed_msg+0x302>
 80140ce:	4422      	add	r2, r4
 80140d0:	3302      	adds	r3, #2
 80140d2:	7891      	ldrb	r1, [r2, #2]
 80140d4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80140d8:	085a      	lsrs	r2, r3, #1
 80140da:	fba5 c202 	umull	ip, r2, r5, r2
 80140de:	0892      	lsrs	r2, r2, #2
 80140e0:	fb00 3312 	mls	r3, r0, r2, r3
 80140e4:	297e      	cmp	r1, #126	; 0x7e
 80140e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80140ea:	f43f af48 	beq.w	8013f7e <uxr_read_framed_msg+0x302>
 80140ee:	f081 0120 	eor.w	r1, r1, #32
 80140f2:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80140f6:	e6e8      	b.n	8013eca <uxr_read_framed_msg+0x24e>
 80140f8:	1c58      	adds	r0, r3, #1
 80140fa:	0842      	lsrs	r2, r0, #1
 80140fc:	fba5 c202 	umull	ip, r2, r5, r2
 8014100:	0892      	lsrs	r2, r2, #2
 8014102:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8014106:	fb0c 0212 	mls	r2, ip, r2, r0
 801410a:	b2d0      	uxtb	r0, r2
 801410c:	4281      	cmp	r1, r0
 801410e:	f43f af32 	beq.w	8013f76 <uxr_read_framed_msg+0x2fa>
 8014112:	4422      	add	r2, r4
 8014114:	3302      	adds	r3, #2
 8014116:	7890      	ldrb	r0, [r2, #2]
 8014118:	085a      	lsrs	r2, r3, #1
 801411a:	fba5 1202 	umull	r1, r2, r5, r2
 801411e:	0892      	lsrs	r2, r2, #2
 8014120:	fb0c 3312 	mls	r3, ip, r2, r3
 8014124:	287e      	cmp	r0, #126	; 0x7e
 8014126:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801412a:	d01f      	beq.n	801416c <uxr_read_framed_msg+0x4f0>
 801412c:	f080 0020 	eor.w	r0, r0, #32
 8014130:	e68b      	b.n	8013e4a <uxr_read_framed_msg+0x1ce>
 8014132:	1c51      	adds	r1, r2, #1
 8014134:	084b      	lsrs	r3, r1, #1
 8014136:	fba5 c303 	umull	ip, r3, r5, r3
 801413a:	089b      	lsrs	r3, r3, #2
 801413c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8014140:	fb0c 1313 	mls	r3, ip, r3, r1
 8014144:	b2d9      	uxtb	r1, r3
 8014146:	4288      	cmp	r0, r1
 8014148:	f43f af3d 	beq.w	8013fc6 <uxr_read_framed_msg+0x34a>
 801414c:	3202      	adds	r2, #2
 801414e:	4423      	add	r3, r4
 8014150:	0850      	lsrs	r0, r2, #1
 8014152:	789b      	ldrb	r3, [r3, #2]
 8014154:	fba5 1000 	umull	r1, r0, r5, r0
 8014158:	0880      	lsrs	r0, r0, #2
 801415a:	fb0c 2210 	mls	r2, ip, r0, r2
 801415e:	2b7e      	cmp	r3, #126	; 0x7e
 8014160:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014164:	d016      	beq.n	8014194 <uxr_read_framed_msg+0x518>
 8014166:	f083 0120 	eor.w	r1, r3, #32
 801416a:	e68b      	b.n	8013e84 <uxr_read_framed_msg+0x208>
 801416c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801416e:	9300      	str	r3, [sp, #0]
 8014170:	2302      	movs	r3, #2
 8014172:	9301      	str	r3, [sp, #4]
 8014174:	464a      	mov	r2, r9
 8014176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014178:	4641      	mov	r1, r8
 801417a:	4620      	mov	r0, r4
 801417c:	f7ff fcfc 	bl	8013b78 <uxr_framing_read_transport>
 8014180:	2800      	cmp	r0, #0
 8014182:	f47f aef6 	bne.w	8013f72 <uxr_read_framed_msg+0x2f6>
 8014186:	2301      	movs	r3, #1
 8014188:	7023      	strb	r3, [r4, #0]
 801418a:	e588      	b.n	8013c9e <uxr_read_framed_msg+0x22>
 801418c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	2301      	movs	r3, #1
 8014192:	e7ee      	b.n	8014172 <uxr_read_framed_msg+0x4f6>
 8014194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014196:	9300      	str	r3, [sp, #0]
 8014198:	2303      	movs	r3, #3
 801419a:	e7ea      	b.n	8014172 <uxr_read_framed_msg+0x4f6>
 801419c:	ee17 8a90 	vmov	r8, s15
 80141a0:	e6ae      	b.n	8013f00 <uxr_read_framed_msg+0x284>
 80141a2:	bf00      	nop

080141a4 <rcl_get_default_domain_id>:
 80141a4:	b530      	push	{r4, r5, lr}
 80141a6:	b083      	sub	sp, #12
 80141a8:	2300      	movs	r3, #0
 80141aa:	9300      	str	r3, [sp, #0]
 80141ac:	b1d0      	cbz	r0, 80141e4 <rcl_get_default_domain_id+0x40>
 80141ae:	4604      	mov	r4, r0
 80141b0:	4669      	mov	r1, sp
 80141b2:	4815      	ldr	r0, [pc, #84]	; (8014208 <rcl_get_default_domain_id+0x64>)
 80141b4:	f7f6 fcba 	bl	800ab2c <rcutils_get_env>
 80141b8:	4602      	mov	r2, r0
 80141ba:	b110      	cbz	r0, 80141c2 <rcl_get_default_domain_id+0x1e>
 80141bc:	2001      	movs	r0, #1
 80141be:	b003      	add	sp, #12
 80141c0:	bd30      	pop	{r4, r5, pc}
 80141c2:	9b00      	ldr	r3, [sp, #0]
 80141c4:	b18b      	cbz	r3, 80141ea <rcl_get_default_domain_id+0x46>
 80141c6:	7818      	ldrb	r0, [r3, #0]
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d0f8      	beq.n	80141be <rcl_get_default_domain_id+0x1a>
 80141cc:	a901      	add	r1, sp, #4
 80141ce:	4618      	mov	r0, r3
 80141d0:	9201      	str	r2, [sp, #4]
 80141d2:	f000 fde1 	bl	8014d98 <strtoul>
 80141d6:	4605      	mov	r5, r0
 80141d8:	b150      	cbz	r0, 80141f0 <rcl_get_default_domain_id+0x4c>
 80141da:	1c43      	adds	r3, r0, #1
 80141dc:	d00d      	beq.n	80141fa <rcl_get_default_domain_id+0x56>
 80141de:	6025      	str	r5, [r4, #0]
 80141e0:	2000      	movs	r0, #0
 80141e2:	e7ec      	b.n	80141be <rcl_get_default_domain_id+0x1a>
 80141e4:	200b      	movs	r0, #11
 80141e6:	b003      	add	sp, #12
 80141e8:	bd30      	pop	{r4, r5, pc}
 80141ea:	4618      	mov	r0, r3
 80141ec:	b003      	add	sp, #12
 80141ee:	bd30      	pop	{r4, r5, pc}
 80141f0:	9b01      	ldr	r3, [sp, #4]
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d0f2      	beq.n	80141de <rcl_get_default_domain_id+0x3a>
 80141f8:	e7e0      	b.n	80141bc <rcl_get_default_domain_id+0x18>
 80141fa:	f001 f909 	bl	8015410 <__errno>
 80141fe:	6803      	ldr	r3, [r0, #0]
 8014200:	2b22      	cmp	r3, #34	; 0x22
 8014202:	d1ec      	bne.n	80141de <rcl_get_default_domain_id+0x3a>
 8014204:	e7da      	b.n	80141bc <rcl_get_default_domain_id+0x18>
 8014206:	bf00      	nop
 8014208:	08016ef8 	.word	0x08016ef8

0801420c <rcl_expand_topic_name>:
 801420c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014210:	b08b      	sub	sp, #44	; 0x2c
 8014212:	9306      	str	r3, [sp, #24]
 8014214:	2800      	cmp	r0, #0
 8014216:	f000 80ad 	beq.w	8014374 <rcl_expand_topic_name+0x168>
 801421a:	460e      	mov	r6, r1
 801421c:	2900      	cmp	r1, #0
 801421e:	f000 80a9 	beq.w	8014374 <rcl_expand_topic_name+0x168>
 8014222:	4617      	mov	r7, r2
 8014224:	2a00      	cmp	r2, #0
 8014226:	f000 80a5 	beq.w	8014374 <rcl_expand_topic_name+0x168>
 801422a:	2b00      	cmp	r3, #0
 801422c:	f000 80a2 	beq.w	8014374 <rcl_expand_topic_name+0x168>
 8014230:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014232:	2b00      	cmp	r3, #0
 8014234:	f000 809e 	beq.w	8014374 <rcl_expand_topic_name+0x168>
 8014238:	2200      	movs	r2, #0
 801423a:	a909      	add	r1, sp, #36	; 0x24
 801423c:	4680      	mov	r8, r0
 801423e:	f000 f949 	bl	80144d4 <rcl_validate_topic_name>
 8014242:	4604      	mov	r4, r0
 8014244:	2800      	cmp	r0, #0
 8014246:	f040 8096 	bne.w	8014376 <rcl_expand_topic_name+0x16a>
 801424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424c:	2b00      	cmp	r3, #0
 801424e:	f040 809a 	bne.w	8014386 <rcl_expand_topic_name+0x17a>
 8014252:	4602      	mov	r2, r0
 8014254:	a909      	add	r1, sp, #36	; 0x24
 8014256:	4630      	mov	r0, r6
 8014258:	f7f6 fef2 	bl	800b040 <rmw_validate_node_name>
 801425c:	2800      	cmp	r0, #0
 801425e:	f040 808e 	bne.w	801437e <rcl_expand_topic_name+0x172>
 8014262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014264:	2a00      	cmp	r2, #0
 8014266:	f040 8093 	bne.w	8014390 <rcl_expand_topic_name+0x184>
 801426a:	a909      	add	r1, sp, #36	; 0x24
 801426c:	4638      	mov	r0, r7
 801426e:	f7f6 fec9 	bl	800b004 <rmw_validate_namespace>
 8014272:	2800      	cmp	r0, #0
 8014274:	f040 8083 	bne.w	801437e <rcl_expand_topic_name+0x172>
 8014278:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801427a:	2c00      	cmp	r4, #0
 801427c:	f040 80ed 	bne.w	801445a <rcl_expand_topic_name+0x24e>
 8014280:	217b      	movs	r1, #123	; 0x7b
 8014282:	4640      	mov	r0, r8
 8014284:	f001 f838 	bl	80152f8 <strchr>
 8014288:	f898 3000 	ldrb.w	r3, [r8]
 801428c:	2b2f      	cmp	r3, #47	; 0x2f
 801428e:	4605      	mov	r5, r0
 8014290:	f000 809e 	beq.w	80143d0 <rcl_expand_topic_name+0x1c4>
 8014294:	2b7e      	cmp	r3, #126	; 0x7e
 8014296:	f040 80a2 	bne.w	80143de <rcl_expand_topic_name+0x1d2>
 801429a:	4638      	mov	r0, r7
 801429c:	f7eb ffaa 	bl	80001f4 <strlen>
 80142a0:	4a82      	ldr	r2, [pc, #520]	; (80144ac <rcl_expand_topic_name+0x2a0>)
 80142a2:	4b83      	ldr	r3, [pc, #524]	; (80144b0 <rcl_expand_topic_name+0x2a4>)
 80142a4:	2801      	cmp	r0, #1
 80142a6:	bf18      	it	ne
 80142a8:	4613      	movne	r3, r2
 80142aa:	9302      	str	r3, [sp, #8]
 80142ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80142ae:	9300      	str	r3, [sp, #0]
 80142b0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80142b4:	f108 0301 	add.w	r3, r8, #1
 80142b8:	9305      	str	r3, [sp, #20]
 80142ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80142be:	9301      	str	r3, [sp, #4]
 80142c0:	ab14      	add	r3, sp, #80	; 0x50
 80142c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80142c4:	f7f6 fc7c 	bl	800abc0 <rcutils_format_string_limit>
 80142c8:	4682      	mov	sl, r0
 80142ca:	2800      	cmp	r0, #0
 80142cc:	f000 80c7 	beq.w	801445e <rcl_expand_topic_name+0x252>
 80142d0:	2d00      	cmp	r5, #0
 80142d2:	f000 80a2 	beq.w	801441a <rcl_expand_topic_name+0x20e>
 80142d6:	217b      	movs	r1, #123	; 0x7b
 80142d8:	f001 f80e 	bl	80152f8 <strchr>
 80142dc:	46d1      	mov	r9, sl
 80142de:	4605      	mov	r5, r0
 80142e0:	9407      	str	r4, [sp, #28]
 80142e2:	46d3      	mov	fp, sl
 80142e4:	464c      	mov	r4, r9
 80142e6:	2d00      	cmp	r5, #0
 80142e8:	f000 80be 	beq.w	8014468 <rcl_expand_topic_name+0x25c>
 80142ec:	217d      	movs	r1, #125	; 0x7d
 80142ee:	4620      	mov	r0, r4
 80142f0:	f001 f802 	bl	80152f8 <strchr>
 80142f4:	eba0 0905 	sub.w	r9, r0, r5
 80142f8:	f109 0a01 	add.w	sl, r9, #1
 80142fc:	486d      	ldr	r0, [pc, #436]	; (80144b4 <rcl_expand_topic_name+0x2a8>)
 80142fe:	4652      	mov	r2, sl
 8014300:	4629      	mov	r1, r5
 8014302:	f001 f806 	bl	8015312 <strncmp>
 8014306:	2800      	cmp	r0, #0
 8014308:	d067      	beq.n	80143da <rcl_expand_topic_name+0x1ce>
 801430a:	486b      	ldr	r0, [pc, #428]	; (80144b8 <rcl_expand_topic_name+0x2ac>)
 801430c:	4652      	mov	r2, sl
 801430e:	4629      	mov	r1, r5
 8014310:	f000 ffff 	bl	8015312 <strncmp>
 8014314:	b130      	cbz	r0, 8014324 <rcl_expand_topic_name+0x118>
 8014316:	4869      	ldr	r0, [pc, #420]	; (80144bc <rcl_expand_topic_name+0x2b0>)
 8014318:	4652      	mov	r2, sl
 801431a:	4629      	mov	r1, r5
 801431c:	f000 fff9 	bl	8015312 <strncmp>
 8014320:	2800      	cmp	r0, #0
 8014322:	d137      	bne.n	8014394 <rcl_expand_topic_name+0x188>
 8014324:	46b9      	mov	r9, r7
 8014326:	ab16      	add	r3, sp, #88	; 0x58
 8014328:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801432c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014330:	ab14      	add	r3, sp, #80	; 0x50
 8014332:	4628      	mov	r0, r5
 8014334:	cb0c      	ldmia	r3, {r2, r3}
 8014336:	4651      	mov	r1, sl
 8014338:	f7f6 fd7e 	bl	800ae38 <rcutils_strndup>
 801433c:	4605      	mov	r5, r0
 801433e:	2800      	cmp	r0, #0
 8014340:	f000 809c 	beq.w	801447c <rcl_expand_topic_name+0x270>
 8014344:	464a      	mov	r2, r9
 8014346:	4620      	mov	r0, r4
 8014348:	ab14      	add	r3, sp, #80	; 0x50
 801434a:	4629      	mov	r1, r5
 801434c:	f7f6 fc72 	bl	800ac34 <rcutils_repl_str>
 8014350:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014354:	4604      	mov	r4, r0
 8014356:	4628      	mov	r0, r5
 8014358:	4798      	blx	r3
 801435a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801435c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801435e:	4658      	mov	r0, fp
 8014360:	4798      	blx	r3
 8014362:	2c00      	cmp	r4, #0
 8014364:	d07b      	beq.n	801445e <rcl_expand_topic_name+0x252>
 8014366:	217b      	movs	r1, #123	; 0x7b
 8014368:	4620      	mov	r0, r4
 801436a:	f000 ffc5 	bl	80152f8 <strchr>
 801436e:	46a3      	mov	fp, r4
 8014370:	4605      	mov	r5, r0
 8014372:	e7b8      	b.n	80142e6 <rcl_expand_topic_name+0xda>
 8014374:	240b      	movs	r4, #11
 8014376:	4620      	mov	r0, r4
 8014378:	b00b      	add	sp, #44	; 0x2c
 801437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801437e:	f7fa febd 	bl	800f0fc <rcl_convert_rmw_ret_to_rcl_ret>
 8014382:	4604      	mov	r4, r0
 8014384:	e7f7      	b.n	8014376 <rcl_expand_topic_name+0x16a>
 8014386:	2467      	movs	r4, #103	; 0x67
 8014388:	4620      	mov	r0, r4
 801438a:	b00b      	add	sp, #44	; 0x2c
 801438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014390:	24c9      	movs	r4, #201	; 0xc9
 8014392:	e7f0      	b.n	8014376 <rcl_expand_topic_name+0x16a>
 8014394:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014398:	9806      	ldr	r0, [sp, #24]
 801439a:	1c69      	adds	r1, r5, #1
 801439c:	f7fd fb4a 	bl	8011a34 <rcutils_string_map_getn>
 80143a0:	4681      	mov	r9, r0
 80143a2:	2800      	cmp	r0, #0
 80143a4:	d1bf      	bne.n	8014326 <rcl_expand_topic_name+0x11a>
 80143a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80143a8:	aa16      	add	r2, sp, #88	; 0x58
 80143aa:	6018      	str	r0, [r3, #0]
 80143ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80143ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80143b2:	ab14      	add	r3, sp, #80	; 0x50
 80143b4:	cb0c      	ldmia	r3, {r2, r3}
 80143b6:	4651      	mov	r1, sl
 80143b8:	4628      	mov	r0, r5
 80143ba:	f7f6 fd3d 	bl	800ae38 <rcutils_strndup>
 80143be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80143c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143c2:	4798      	blx	r3
 80143c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80143c8:	4658      	mov	r0, fp
 80143ca:	2469      	movs	r4, #105	; 0x69
 80143cc:	4798      	blx	r3
 80143ce:	e7d2      	b.n	8014376 <rcl_expand_topic_name+0x16a>
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d05b      	beq.n	801448c <rcl_expand_topic_name+0x280>
 80143d4:	46c1      	mov	r9, r8
 80143d6:	46a2      	mov	sl, r4
 80143d8:	e782      	b.n	80142e0 <rcl_expand_topic_name+0xd4>
 80143da:	46b1      	mov	r9, r6
 80143dc:	e7a3      	b.n	8014326 <rcl_expand_topic_name+0x11a>
 80143de:	2800      	cmp	r0, #0
 80143e0:	d1f8      	bne.n	80143d4 <rcl_expand_topic_name+0x1c8>
 80143e2:	4638      	mov	r0, r7
 80143e4:	f7eb ff06 	bl	80001f4 <strlen>
 80143e8:	4a35      	ldr	r2, [pc, #212]	; (80144c0 <rcl_expand_topic_name+0x2b4>)
 80143ea:	4b36      	ldr	r3, [pc, #216]	; (80144c4 <rcl_expand_topic_name+0x2b8>)
 80143ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80143f0:	2801      	cmp	r0, #1
 80143f2:	bf18      	it	ne
 80143f4:	4613      	movne	r3, r2
 80143f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80143fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80143fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014400:	9703      	str	r7, [sp, #12]
 8014402:	9200      	str	r2, [sp, #0]
 8014404:	ab14      	add	r3, sp, #80	; 0x50
 8014406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014408:	f7f6 fbda 	bl	800abc0 <rcutils_format_string_limit>
 801440c:	4682      	mov	sl, r0
 801440e:	4653      	mov	r3, sl
 8014410:	b32b      	cbz	r3, 801445e <rcl_expand_topic_name+0x252>
 8014412:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014414:	f8c3 a000 	str.w	sl, [r3]
 8014418:	e7ad      	b.n	8014376 <rcl_expand_topic_name+0x16a>
 801441a:	f89a 3000 	ldrb.w	r3, [sl]
 801441e:	2b2f      	cmp	r3, #47	; 0x2f
 8014420:	d0f7      	beq.n	8014412 <rcl_expand_topic_name+0x206>
 8014422:	4638      	mov	r0, r7
 8014424:	f7eb fee6 	bl	80001f4 <strlen>
 8014428:	4a25      	ldr	r2, [pc, #148]	; (80144c0 <rcl_expand_topic_name+0x2b4>)
 801442a:	4b26      	ldr	r3, [pc, #152]	; (80144c4 <rcl_expand_topic_name+0x2b8>)
 801442c:	f8cd a010 	str.w	sl, [sp, #16]
 8014430:	2801      	cmp	r0, #1
 8014432:	bf18      	it	ne
 8014434:	4613      	movne	r3, r2
 8014436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801443a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801443e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014440:	9703      	str	r7, [sp, #12]
 8014442:	9200      	str	r2, [sp, #0]
 8014444:	ab14      	add	r3, sp, #80	; 0x50
 8014446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014448:	f7f6 fbba 	bl	800abc0 <rcutils_format_string_limit>
 801444c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801444e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014450:	4605      	mov	r5, r0
 8014452:	4650      	mov	r0, sl
 8014454:	4798      	blx	r3
 8014456:	46aa      	mov	sl, r5
 8014458:	e7d9      	b.n	801440e <rcl_expand_topic_name+0x202>
 801445a:	24ca      	movs	r4, #202	; 0xca
 801445c:	e78b      	b.n	8014376 <rcl_expand_topic_name+0x16a>
 801445e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014460:	2300      	movs	r3, #0
 8014462:	6013      	str	r3, [r2, #0]
 8014464:	240a      	movs	r4, #10
 8014466:	e786      	b.n	8014376 <rcl_expand_topic_name+0x16a>
 8014468:	465b      	mov	r3, fp
 801446a:	9c07      	ldr	r4, [sp, #28]
 801446c:	46da      	mov	sl, fp
 801446e:	2b00      	cmp	r3, #0
 8014470:	d1d3      	bne.n	801441a <rcl_expand_topic_name+0x20e>
 8014472:	f898 3000 	ldrb.w	r3, [r8]
 8014476:	2b2f      	cmp	r3, #47	; 0x2f
 8014478:	d0cb      	beq.n	8014412 <rcl_expand_topic_name+0x206>
 801447a:	e7b2      	b.n	80143e2 <rcl_expand_topic_name+0x1d6>
 801447c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8014480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014482:	6015      	str	r5, [r2, #0]
 8014484:	4658      	mov	r0, fp
 8014486:	4798      	blx	r3
 8014488:	240a      	movs	r4, #10
 801448a:	e774      	b.n	8014376 <rcl_expand_topic_name+0x16a>
 801448c:	ab17      	add	r3, sp, #92	; 0x5c
 801448e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014492:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014496:	ab14      	add	r3, sp, #80	; 0x50
 8014498:	cb0e      	ldmia	r3, {r1, r2, r3}
 801449a:	4640      	mov	r0, r8
 801449c:	f7f6 fcaa 	bl	800adf4 <rcutils_strdup>
 80144a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80144a2:	2800      	cmp	r0, #0
 80144a4:	6018      	str	r0, [r3, #0]
 80144a6:	bf08      	it	eq
 80144a8:	240a      	moveq	r4, #10
 80144aa:	e764      	b.n	8014376 <rcl_expand_topic_name+0x16a>
 80144ac:	08016f08 	.word	0x08016f08
 80144b0:	0801699c 	.word	0x0801699c
 80144b4:	08016f10 	.word	0x08016f10
 80144b8:	08016f18 	.word	0x08016f18
 80144bc:	08016f20 	.word	0x08016f20
 80144c0:	080163f0 	.word	0x080163f0
 80144c4:	080163e8 	.word	0x080163e8

080144c8 <rcl_get_default_topic_name_substitutions>:
 80144c8:	2800      	cmp	r0, #0
 80144ca:	bf0c      	ite	eq
 80144cc:	200b      	moveq	r0, #11
 80144ce:	2000      	movne	r0, #0
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop

080144d4 <rcl_validate_topic_name>:
 80144d4:	2800      	cmp	r0, #0
 80144d6:	d07a      	beq.n	80145ce <rcl_validate_topic_name+0xfa>
 80144d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144dc:	460e      	mov	r6, r1
 80144de:	2900      	cmp	r1, #0
 80144e0:	d07c      	beq.n	80145dc <rcl_validate_topic_name+0x108>
 80144e2:	4617      	mov	r7, r2
 80144e4:	4605      	mov	r5, r0
 80144e6:	f7eb fe85 	bl	80001f4 <strlen>
 80144ea:	b1b0      	cbz	r0, 801451a <rcl_validate_topic_name+0x46>
 80144ec:	f895 9000 	ldrb.w	r9, [r5]
 80144f0:	f8df c180 	ldr.w	ip, [pc, #384]	; 8014674 <rcl_validate_topic_name+0x1a0>
 80144f4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80144f8:	f013 0304 	ands.w	r3, r3, #4
 80144fc:	d169      	bne.n	80145d2 <rcl_validate_topic_name+0xfe>
 80144fe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8014502:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014506:	2a2f      	cmp	r2, #47	; 0x2f
 8014508:	d10e      	bne.n	8014528 <rcl_validate_topic_name+0x54>
 801450a:	2202      	movs	r2, #2
 801450c:	6032      	str	r2, [r6, #0]
 801450e:	b36f      	cbz	r7, 801456c <rcl_validate_topic_name+0x98>
 8014510:	f8c7 8000 	str.w	r8, [r7]
 8014514:	4618      	mov	r0, r3
 8014516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801451a:	2301      	movs	r3, #1
 801451c:	6033      	str	r3, [r6, #0]
 801451e:	b32f      	cbz	r7, 801456c <rcl_validate_topic_name+0x98>
 8014520:	2000      	movs	r0, #0
 8014522:	6038      	str	r0, [r7, #0]
 8014524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014528:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 801452c:	461c      	mov	r4, r3
 801452e:	4619      	mov	r1, r3
 8014530:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014534:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014538:	f1be 0f09 	cmp.w	lr, #9
 801453c:	d919      	bls.n	8014572 <rcl_validate_topic_name+0x9e>
 801453e:	f022 0e20 	bic.w	lr, r2, #32
 8014542:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8014546:	f1be 0f19 	cmp.w	lr, #25
 801454a:	d912      	bls.n	8014572 <rcl_validate_topic_name+0x9e>
 801454c:	2a5f      	cmp	r2, #95	; 0x5f
 801454e:	d019      	beq.n	8014584 <rcl_validate_topic_name+0xb0>
 8014550:	2a2f      	cmp	r2, #47	; 0x2f
 8014552:	d051      	beq.n	80145f8 <rcl_validate_topic_name+0x124>
 8014554:	2a7e      	cmp	r2, #126	; 0x7e
 8014556:	d048      	beq.n	80145ea <rcl_validate_topic_name+0x116>
 8014558:	2a7b      	cmp	r2, #123	; 0x7b
 801455a:	d054      	beq.n	8014606 <rcl_validate_topic_name+0x132>
 801455c:	2a7d      	cmp	r2, #125	; 0x7d
 801455e:	d161      	bne.n	8014624 <rcl_validate_topic_name+0x150>
 8014560:	2c00      	cmp	r4, #0
 8014562:	d155      	bne.n	8014610 <rcl_validate_topic_name+0x13c>
 8014564:	2305      	movs	r3, #5
 8014566:	6033      	str	r3, [r6, #0]
 8014568:	b107      	cbz	r7, 801456c <rcl_validate_topic_name+0x98>
 801456a:	6039      	str	r1, [r7, #0]
 801456c:	2000      	movs	r0, #0
 801456e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014572:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014576:	0752      	lsls	r2, r2, #29
 8014578:	d504      	bpl.n	8014584 <rcl_validate_topic_name+0xb0>
 801457a:	b11c      	cbz	r4, 8014584 <rcl_validate_topic_name+0xb0>
 801457c:	b111      	cbz	r1, 8014584 <rcl_validate_topic_name+0xb0>
 801457e:	1e4a      	subs	r2, r1, #1
 8014580:	429a      	cmp	r2, r3
 8014582:	d02d      	beq.n	80145e0 <rcl_validate_topic_name+0x10c>
 8014584:	3101      	adds	r1, #1
 8014586:	4288      	cmp	r0, r1
 8014588:	d1d2      	bne.n	8014530 <rcl_validate_topic_name+0x5c>
 801458a:	2c00      	cmp	r4, #0
 801458c:	d145      	bne.n	801461a <rcl_validate_topic_name+0x146>
 801458e:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8014592:	d04f      	beq.n	8014634 <rcl_validate_topic_name+0x160>
 8014594:	4620      	mov	r0, r4
 8014596:	2301      	movs	r3, #1
 8014598:	e006      	b.n	80145a8 <rcl_validate_topic_name+0xd4>
 801459a:	428b      	cmp	r3, r1
 801459c:	f105 0501 	add.w	r5, r5, #1
 80145a0:	f103 0201 	add.w	r2, r3, #1
 80145a4:	d236      	bcs.n	8014614 <rcl_validate_topic_name+0x140>
 80145a6:	4613      	mov	r3, r2
 80145a8:	4580      	cmp	r8, r0
 80145aa:	f100 0001 	add.w	r0, r0, #1
 80145ae:	d0f4      	beq.n	801459a <rcl_validate_topic_name+0xc6>
 80145b0:	782a      	ldrb	r2, [r5, #0]
 80145b2:	2a2f      	cmp	r2, #47	; 0x2f
 80145b4:	d1f1      	bne.n	801459a <rcl_validate_topic_name+0xc6>
 80145b6:	786a      	ldrb	r2, [r5, #1]
 80145b8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80145bc:	0754      	lsls	r4, r2, #29
 80145be:	d5ec      	bpl.n	801459a <rcl_validate_topic_name+0xc6>
 80145c0:	2204      	movs	r2, #4
 80145c2:	6032      	str	r2, [r6, #0]
 80145c4:	2f00      	cmp	r7, #0
 80145c6:	d0d1      	beq.n	801456c <rcl_validate_topic_name+0x98>
 80145c8:	603b      	str	r3, [r7, #0]
 80145ca:	2000      	movs	r0, #0
 80145cc:	e7aa      	b.n	8014524 <rcl_validate_topic_name+0x50>
 80145ce:	200b      	movs	r0, #11
 80145d0:	4770      	bx	lr
 80145d2:	2304      	movs	r3, #4
 80145d4:	6033      	str	r3, [r6, #0]
 80145d6:	2f00      	cmp	r7, #0
 80145d8:	d1a2      	bne.n	8014520 <rcl_validate_topic_name+0x4c>
 80145da:	e7c7      	b.n	801456c <rcl_validate_topic_name+0x98>
 80145dc:	200b      	movs	r0, #11
 80145de:	e7a1      	b.n	8014524 <rcl_validate_topic_name+0x50>
 80145e0:	2309      	movs	r3, #9
 80145e2:	6033      	str	r3, [r6, #0]
 80145e4:	2f00      	cmp	r7, #0
 80145e6:	d1c0      	bne.n	801456a <rcl_validate_topic_name+0x96>
 80145e8:	e7c0      	b.n	801456c <rcl_validate_topic_name+0x98>
 80145ea:	2900      	cmp	r1, #0
 80145ec:	d0ca      	beq.n	8014584 <rcl_validate_topic_name+0xb0>
 80145ee:	2306      	movs	r3, #6
 80145f0:	6033      	str	r3, [r6, #0]
 80145f2:	2f00      	cmp	r7, #0
 80145f4:	d1b9      	bne.n	801456a <rcl_validate_topic_name+0x96>
 80145f6:	e7b9      	b.n	801456c <rcl_validate_topic_name+0x98>
 80145f8:	2c00      	cmp	r4, #0
 80145fa:	d0c3      	beq.n	8014584 <rcl_validate_topic_name+0xb0>
 80145fc:	2308      	movs	r3, #8
 80145fe:	6033      	str	r3, [r6, #0]
 8014600:	2f00      	cmp	r7, #0
 8014602:	d1b2      	bne.n	801456a <rcl_validate_topic_name+0x96>
 8014604:	e7b2      	b.n	801456c <rcl_validate_topic_name+0x98>
 8014606:	2c00      	cmp	r4, #0
 8014608:	d1f8      	bne.n	80145fc <rcl_validate_topic_name+0x128>
 801460a:	460b      	mov	r3, r1
 801460c:	2401      	movs	r4, #1
 801460e:	e7b9      	b.n	8014584 <rcl_validate_topic_name+0xb0>
 8014610:	2400      	movs	r4, #0
 8014612:	e7b7      	b.n	8014584 <rcl_validate_topic_name+0xb0>
 8014614:	2000      	movs	r0, #0
 8014616:	6030      	str	r0, [r6, #0]
 8014618:	e784      	b.n	8014524 <rcl_validate_topic_name+0x50>
 801461a:	2205      	movs	r2, #5
 801461c:	6032      	str	r2, [r6, #0]
 801461e:	2f00      	cmp	r7, #0
 8014620:	d1d2      	bne.n	80145c8 <rcl_validate_topic_name+0xf4>
 8014622:	e7a3      	b.n	801456c <rcl_validate_topic_name+0x98>
 8014624:	2c00      	cmp	r4, #0
 8014626:	bf14      	ite	ne
 8014628:	2308      	movne	r3, #8
 801462a:	2303      	moveq	r3, #3
 801462c:	6033      	str	r3, [r6, #0]
 801462e:	2f00      	cmp	r7, #0
 8014630:	d19b      	bne.n	801456a <rcl_validate_topic_name+0x96>
 8014632:	e79b      	b.n	801456c <rcl_validate_topic_name+0x98>
 8014634:	2301      	movs	r3, #1
 8014636:	e00a      	b.n	801464e <rcl_validate_topic_name+0x17a>
 8014638:	2c01      	cmp	r4, #1
 801463a:	d013      	beq.n	8014664 <rcl_validate_topic_name+0x190>
 801463c:	4299      	cmp	r1, r3
 801463e:	f104 0401 	add.w	r4, r4, #1
 8014642:	f105 0501 	add.w	r5, r5, #1
 8014646:	f103 0201 	add.w	r2, r3, #1
 801464a:	d9e3      	bls.n	8014614 <rcl_validate_topic_name+0x140>
 801464c:	4613      	mov	r3, r2
 801464e:	45a0      	cmp	r8, r4
 8014650:	d0f4      	beq.n	801463c <rcl_validate_topic_name+0x168>
 8014652:	782a      	ldrb	r2, [r5, #0]
 8014654:	2a2f      	cmp	r2, #47	; 0x2f
 8014656:	d1ef      	bne.n	8014638 <rcl_validate_topic_name+0x164>
 8014658:	786a      	ldrb	r2, [r5, #1]
 801465a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801465e:	0752      	lsls	r2, r2, #29
 8014660:	d5ec      	bpl.n	801463c <rcl_validate_topic_name+0x168>
 8014662:	e7ad      	b.n	80145c0 <rcl_validate_topic_name+0xec>
 8014664:	2307      	movs	r3, #7
 8014666:	6033      	str	r3, [r6, #0]
 8014668:	2f00      	cmp	r7, #0
 801466a:	f43f af7f 	beq.w	801456c <rcl_validate_topic_name+0x98>
 801466e:	603c      	str	r4, [r7, #0]
 8014670:	2000      	movs	r0, #0
 8014672:	e757      	b.n	8014524 <rcl_validate_topic_name+0x50>
 8014674:	0801708e 	.word	0x0801708e

08014678 <on_status>:
 8014678:	b082      	sub	sp, #8
 801467a:	b002      	add	sp, #8
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop

08014680 <on_topic>:
 8014680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014684:	4a22      	ldr	r2, [pc, #136]	; (8014710 <on_topic+0x90>)
 8014686:	b094      	sub	sp, #80	; 0x50
 8014688:	6812      	ldr	r2, [r2, #0]
 801468a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801468c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014690:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8014694:	b3c2      	cbz	r2, 8014708 <on_topic+0x88>
 8014696:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801469a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801469e:	e001      	b.n	80146a4 <on_topic+0x24>
 80146a0:	6852      	ldr	r2, [r2, #4]
 80146a2:	b38a      	cbz	r2, 8014708 <on_topic+0x88>
 80146a4:	6894      	ldr	r4, [r2, #8]
 80146a6:	8aa3      	ldrh	r3, [r4, #20]
 80146a8:	428b      	cmp	r3, r1
 80146aa:	d1f9      	bne.n	80146a0 <on_topic+0x20>
 80146ac:	7da3      	ldrb	r3, [r4, #22]
 80146ae:	4283      	cmp	r3, r0
 80146b0:	d1f6      	bne.n	80146a0 <on_topic+0x20>
 80146b2:	2248      	movs	r2, #72	; 0x48
 80146b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80146b8:	4668      	mov	r0, sp
 80146ba:	f000 fede 	bl	801547a <memcpy>
 80146be:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80146c2:	cb0c      	ldmia	r3, {r2, r3}
 80146c4:	4620      	mov	r0, r4
 80146c6:	f7f7 fb4f 	bl	800bd68 <rmw_uxrce_get_static_input_buffer_for_entity>
 80146ca:	4607      	mov	r7, r0
 80146cc:	b1e0      	cbz	r0, 8014708 <on_topic+0x88>
 80146ce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80146d2:	4632      	mov	r2, r6
 80146d4:	4628      	mov	r0, r5
 80146d6:	f108 0110 	add.w	r1, r8, #16
 80146da:	f7fe fa4b 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 80146de:	b930      	cbnz	r0, 80146ee <on_topic+0x6e>
 80146e0:	480c      	ldr	r0, [pc, #48]	; (8014714 <on_topic+0x94>)
 80146e2:	4639      	mov	r1, r7
 80146e4:	b014      	add	sp, #80	; 0x50
 80146e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146ea:	f7fd baff 	b.w	8011cec <put_memory>
 80146ee:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80146f2:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 80146f6:	f7fe f951 	bl	801299c <rmw_uros_epoch_nanos>
 80146fa:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 80146fe:	2305      	movs	r3, #5
 8014700:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014704:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8014708:	b014      	add	sp, #80	; 0x50
 801470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801470e:	bf00      	nop
 8014710:	2000dc24 	.word	0x2000dc24
 8014714:	2000dc14 	.word	0x2000dc14

08014718 <on_request>:
 8014718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801471c:	4823      	ldr	r0, [pc, #140]	; (80147ac <on_request+0x94>)
 801471e:	b094      	sub	sp, #80	; 0x50
 8014720:	6800      	ldr	r0, [r0, #0]
 8014722:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8014724:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014728:	9113      	str	r1, [sp, #76]	; 0x4c
 801472a:	2800      	cmp	r0, #0
 801472c:	d03b      	beq.n	80147a6 <on_request+0x8e>
 801472e:	461d      	mov	r5, r3
 8014730:	e001      	b.n	8014736 <on_request+0x1e>
 8014732:	6840      	ldr	r0, [r0, #4]
 8014734:	b3b8      	cbz	r0, 80147a6 <on_request+0x8e>
 8014736:	6884      	ldr	r4, [r0, #8]
 8014738:	8b21      	ldrh	r1, [r4, #24]
 801473a:	4291      	cmp	r1, r2
 801473c:	d1f9      	bne.n	8014732 <on_request+0x1a>
 801473e:	2248      	movs	r2, #72	; 0x48
 8014740:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014744:	4668      	mov	r0, sp
 8014746:	f000 fe98 	bl	801547a <memcpy>
 801474a:	f104 0320 	add.w	r3, r4, #32
 801474e:	cb0c      	ldmia	r3, {r2, r3}
 8014750:	4620      	mov	r0, r4
 8014752:	f7f7 fb09 	bl	800bd68 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014756:	4680      	mov	r8, r0
 8014758:	b328      	cbz	r0, 80147a6 <on_request+0x8e>
 801475a:	4638      	mov	r0, r7
 801475c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014760:	4632      	mov	r2, r6
 8014762:	f107 0110 	add.w	r1, r7, #16
 8014766:	f7fe fa05 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 801476a:	b930      	cbnz	r0, 801477a <on_request+0x62>
 801476c:	4810      	ldr	r0, [pc, #64]	; (80147b0 <on_request+0x98>)
 801476e:	4641      	mov	r1, r8
 8014770:	b014      	add	sp, #80	; 0x50
 8014772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014776:	f7fd bab9 	b.w	8011cec <put_memory>
 801477a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801477c:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8014780:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8014784:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8014788:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801478c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014790:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014794:	f7fe f902 	bl	801299c <rmw_uros_epoch_nanos>
 8014798:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801479c:	2303      	movs	r3, #3
 801479e:	e942 0102 	strd	r0, r1, [r2, #-8]
 80147a2:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80147a6:	b014      	add	sp, #80	; 0x50
 80147a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ac:	2000dbf4 	.word	0x2000dbf4
 80147b0:	2000dc14 	.word	0x2000dc14

080147b4 <on_reply>:
 80147b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147b8:	4821      	ldr	r0, [pc, #132]	; (8014840 <on_reply+0x8c>)
 80147ba:	b094      	sub	sp, #80	; 0x50
 80147bc:	6800      	ldr	r0, [r0, #0]
 80147be:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80147c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80147c4:	9113      	str	r1, [sp, #76]	; 0x4c
 80147c6:	b3b8      	cbz	r0, 8014838 <on_reply+0x84>
 80147c8:	461d      	mov	r5, r3
 80147ca:	e001      	b.n	80147d0 <on_reply+0x1c>
 80147cc:	6840      	ldr	r0, [r0, #4]
 80147ce:	b398      	cbz	r0, 8014838 <on_reply+0x84>
 80147d0:	6884      	ldr	r4, [r0, #8]
 80147d2:	8b21      	ldrh	r1, [r4, #24]
 80147d4:	4291      	cmp	r1, r2
 80147d6:	d1f9      	bne.n	80147cc <on_reply+0x18>
 80147d8:	2248      	movs	r2, #72	; 0x48
 80147da:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80147de:	4668      	mov	r0, sp
 80147e0:	f000 fe4b 	bl	801547a <memcpy>
 80147e4:	f104 0320 	add.w	r3, r4, #32
 80147e8:	cb0c      	ldmia	r3, {r2, r3}
 80147ea:	4620      	mov	r0, r4
 80147ec:	f7f7 fabc 	bl	800bd68 <rmw_uxrce_get_static_input_buffer_for_entity>
 80147f0:	4680      	mov	r8, r0
 80147f2:	b308      	cbz	r0, 8014838 <on_reply+0x84>
 80147f4:	4638      	mov	r0, r7
 80147f6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80147fa:	4632      	mov	r2, r6
 80147fc:	f107 0110 	add.w	r1, r7, #16
 8014800:	f7fe f9b8 	bl	8012b74 <ucdr_deserialize_array_uint8_t>
 8014804:	b930      	cbnz	r0, 8014814 <on_reply+0x60>
 8014806:	480f      	ldr	r0, [pc, #60]	; (8014844 <on_reply+0x90>)
 8014808:	4641      	mov	r1, r8
 801480a:	b014      	add	sp, #80	; 0x50
 801480c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014810:	f7fd ba6c 	b.w	8011cec <put_memory>
 8014814:	2200      	movs	r2, #0
 8014816:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801481a:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801481e:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8014822:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8014826:	f7fe f8b9 	bl	801299c <rmw_uros_epoch_nanos>
 801482a:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801482e:	2304      	movs	r3, #4
 8014830:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014834:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8014838:	b014      	add	sp, #80	; 0x50
 801483a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801483e:	bf00      	nop
 8014840:	20009304 	.word	0x20009304
 8014844:	2000dc14 	.word	0x2000dc14

08014848 <rosidl_runtime_c__String__init>:
 8014848:	b510      	push	{r4, lr}
 801484a:	4604      	mov	r4, r0
 801484c:	b086      	sub	sp, #24
 801484e:	b170      	cbz	r0, 801486e <rosidl_runtime_c__String__init+0x26>
 8014850:	a801      	add	r0, sp, #4
 8014852:	f7f6 f94f 	bl	800aaf4 <rcutils_get_default_allocator>
 8014856:	9b01      	ldr	r3, [sp, #4]
 8014858:	9905      	ldr	r1, [sp, #20]
 801485a:	2001      	movs	r0, #1
 801485c:	4798      	blx	r3
 801485e:	6020      	str	r0, [r4, #0]
 8014860:	b128      	cbz	r0, 801486e <rosidl_runtime_c__String__init+0x26>
 8014862:	2100      	movs	r1, #0
 8014864:	2201      	movs	r2, #1
 8014866:	7001      	strb	r1, [r0, #0]
 8014868:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801486c:	4610      	mov	r0, r2
 801486e:	b006      	add	sp, #24
 8014870:	bd10      	pop	{r4, pc}
 8014872:	bf00      	nop

08014874 <rosidl_runtime_c__String__fini>:
 8014874:	b320      	cbz	r0, 80148c0 <rosidl_runtime_c__String__fini+0x4c>
 8014876:	b510      	push	{r4, lr}
 8014878:	6803      	ldr	r3, [r0, #0]
 801487a:	b086      	sub	sp, #24
 801487c:	4604      	mov	r4, r0
 801487e:	b173      	cbz	r3, 801489e <rosidl_runtime_c__String__fini+0x2a>
 8014880:	6883      	ldr	r3, [r0, #8]
 8014882:	b1f3      	cbz	r3, 80148c2 <rosidl_runtime_c__String__fini+0x4e>
 8014884:	a801      	add	r0, sp, #4
 8014886:	f7f6 f935 	bl	800aaf4 <rcutils_get_default_allocator>
 801488a:	9b02      	ldr	r3, [sp, #8]
 801488c:	9905      	ldr	r1, [sp, #20]
 801488e:	6820      	ldr	r0, [r4, #0]
 8014890:	4798      	blx	r3
 8014892:	2300      	movs	r3, #0
 8014894:	e9c4 3300 	strd	r3, r3, [r4]
 8014898:	60a3      	str	r3, [r4, #8]
 801489a:	b006      	add	sp, #24
 801489c:	bd10      	pop	{r4, pc}
 801489e:	6843      	ldr	r3, [r0, #4]
 80148a0:	b9db      	cbnz	r3, 80148da <rosidl_runtime_c__String__fini+0x66>
 80148a2:	6883      	ldr	r3, [r0, #8]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d0f8      	beq.n	801489a <rosidl_runtime_c__String__fini+0x26>
 80148a8:	4b12      	ldr	r3, [pc, #72]	; (80148f4 <rosidl_runtime_c__String__fini+0x80>)
 80148aa:	4813      	ldr	r0, [pc, #76]	; (80148f8 <rosidl_runtime_c__String__fini+0x84>)
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	2251      	movs	r2, #81	; 0x51
 80148b0:	68db      	ldr	r3, [r3, #12]
 80148b2:	2101      	movs	r1, #1
 80148b4:	f000 fb88 	bl	8014fc8 <fwrite>
 80148b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148bc:	f000 f840 	bl	8014940 <exit>
 80148c0:	4770      	bx	lr
 80148c2:	4b0c      	ldr	r3, [pc, #48]	; (80148f4 <rosidl_runtime_c__String__fini+0x80>)
 80148c4:	480d      	ldr	r0, [pc, #52]	; (80148fc <rosidl_runtime_c__String__fini+0x88>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	224c      	movs	r2, #76	; 0x4c
 80148ca:	68db      	ldr	r3, [r3, #12]
 80148cc:	2101      	movs	r1, #1
 80148ce:	f000 fb7b 	bl	8014fc8 <fwrite>
 80148d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148d6:	f000 f833 	bl	8014940 <exit>
 80148da:	4b06      	ldr	r3, [pc, #24]	; (80148f4 <rosidl_runtime_c__String__fini+0x80>)
 80148dc:	4808      	ldr	r0, [pc, #32]	; (8014900 <rosidl_runtime_c__String__fini+0x8c>)
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	224e      	movs	r2, #78	; 0x4e
 80148e2:	68db      	ldr	r3, [r3, #12]
 80148e4:	2101      	movs	r1, #1
 80148e6:	f000 fb6f 	bl	8014fc8 <fwrite>
 80148ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148ee:	f000 f827 	bl	8014940 <exit>
 80148f2:	bf00      	nop
 80148f4:	200002b4 	.word	0x200002b4
 80148f8:	08016fcc 	.word	0x08016fcc
 80148fc:	08016f2c 	.word	0x08016f2c
 8014900:	08016f7c 	.word	0x08016f7c

08014904 <calloc>:
 8014904:	4b02      	ldr	r3, [pc, #8]	; (8014910 <calloc+0xc>)
 8014906:	460a      	mov	r2, r1
 8014908:	4601      	mov	r1, r0
 801490a:	6818      	ldr	r0, [r3, #0]
 801490c:	f000 b802 	b.w	8014914 <_calloc_r>
 8014910:	200002b4 	.word	0x200002b4

08014914 <_calloc_r>:
 8014914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014916:	fba1 2402 	umull	r2, r4, r1, r2
 801491a:	b94c      	cbnz	r4, 8014930 <_calloc_r+0x1c>
 801491c:	4611      	mov	r1, r2
 801491e:	9201      	str	r2, [sp, #4]
 8014920:	f000 f898 	bl	8014a54 <_malloc_r>
 8014924:	9a01      	ldr	r2, [sp, #4]
 8014926:	4605      	mov	r5, r0
 8014928:	b930      	cbnz	r0, 8014938 <_calloc_r+0x24>
 801492a:	4628      	mov	r0, r5
 801492c:	b003      	add	sp, #12
 801492e:	bd30      	pop	{r4, r5, pc}
 8014930:	220c      	movs	r2, #12
 8014932:	6002      	str	r2, [r0, #0]
 8014934:	2500      	movs	r5, #0
 8014936:	e7f8      	b.n	801492a <_calloc_r+0x16>
 8014938:	4621      	mov	r1, r4
 801493a:	f000 fcd5 	bl	80152e8 <memset>
 801493e:	e7f4      	b.n	801492a <_calloc_r+0x16>

08014940 <exit>:
 8014940:	b508      	push	{r3, lr}
 8014942:	4b06      	ldr	r3, [pc, #24]	; (801495c <exit+0x1c>)
 8014944:	4604      	mov	r4, r0
 8014946:	b113      	cbz	r3, 801494e <exit+0xe>
 8014948:	2100      	movs	r1, #0
 801494a:	f3af 8000 	nop.w
 801494e:	4b04      	ldr	r3, [pc, #16]	; (8014960 <exit+0x20>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	b103      	cbz	r3, 8014956 <exit+0x16>
 8014954:	4798      	blx	r3
 8014956:	4620      	mov	r0, r4
 8014958:	f7ec ff3e 	bl	80017d8 <_exit>
 801495c:	00000000 	.word	0x00000000
 8014960:	2000de6c 	.word	0x2000de6c

08014964 <getenv>:
 8014964:	b507      	push	{r0, r1, r2, lr}
 8014966:	4b04      	ldr	r3, [pc, #16]	; (8014978 <getenv+0x14>)
 8014968:	4601      	mov	r1, r0
 801496a:	aa01      	add	r2, sp, #4
 801496c:	6818      	ldr	r0, [r3, #0]
 801496e:	f000 f805 	bl	801497c <_findenv_r>
 8014972:	b003      	add	sp, #12
 8014974:	f85d fb04 	ldr.w	pc, [sp], #4
 8014978:	200002b4 	.word	0x200002b4

0801497c <_findenv_r>:
 801497c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014980:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80149f0 <_findenv_r+0x74>
 8014984:	4607      	mov	r7, r0
 8014986:	4689      	mov	r9, r1
 8014988:	4616      	mov	r6, r2
 801498a:	f000 fda3 	bl	80154d4 <__env_lock>
 801498e:	f8da 4000 	ldr.w	r4, [sl]
 8014992:	b134      	cbz	r4, 80149a2 <_findenv_r+0x26>
 8014994:	464b      	mov	r3, r9
 8014996:	4698      	mov	r8, r3
 8014998:	f813 2b01 	ldrb.w	r2, [r3], #1
 801499c:	b13a      	cbz	r2, 80149ae <_findenv_r+0x32>
 801499e:	2a3d      	cmp	r2, #61	; 0x3d
 80149a0:	d1f9      	bne.n	8014996 <_findenv_r+0x1a>
 80149a2:	4638      	mov	r0, r7
 80149a4:	f000 fd9c 	bl	80154e0 <__env_unlock>
 80149a8:	2000      	movs	r0, #0
 80149aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ae:	eba8 0809 	sub.w	r8, r8, r9
 80149b2:	46a3      	mov	fp, r4
 80149b4:	f854 0b04 	ldr.w	r0, [r4], #4
 80149b8:	2800      	cmp	r0, #0
 80149ba:	d0f2      	beq.n	80149a2 <_findenv_r+0x26>
 80149bc:	4642      	mov	r2, r8
 80149be:	4649      	mov	r1, r9
 80149c0:	f000 fca7 	bl	8015312 <strncmp>
 80149c4:	2800      	cmp	r0, #0
 80149c6:	d1f4      	bne.n	80149b2 <_findenv_r+0x36>
 80149c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80149cc:	eb03 0508 	add.w	r5, r3, r8
 80149d0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80149d4:	2b3d      	cmp	r3, #61	; 0x3d
 80149d6:	d1ec      	bne.n	80149b2 <_findenv_r+0x36>
 80149d8:	f8da 3000 	ldr.w	r3, [sl]
 80149dc:	ebab 0303 	sub.w	r3, fp, r3
 80149e0:	109b      	asrs	r3, r3, #2
 80149e2:	4638      	mov	r0, r7
 80149e4:	6033      	str	r3, [r6, #0]
 80149e6:	f000 fd7b 	bl	80154e0 <__env_unlock>
 80149ea:	1c68      	adds	r0, r5, #1
 80149ec:	e7dd      	b.n	80149aa <_findenv_r+0x2e>
 80149ee:	bf00      	nop
 80149f0:	20000000 	.word	0x20000000

080149f4 <malloc>:
 80149f4:	4b02      	ldr	r3, [pc, #8]	; (8014a00 <malloc+0xc>)
 80149f6:	4601      	mov	r1, r0
 80149f8:	6818      	ldr	r0, [r3, #0]
 80149fa:	f000 b82b 	b.w	8014a54 <_malloc_r>
 80149fe:	bf00      	nop
 8014a00:	200002b4 	.word	0x200002b4

08014a04 <free>:
 8014a04:	4b02      	ldr	r3, [pc, #8]	; (8014a10 <free+0xc>)
 8014a06:	4601      	mov	r1, r0
 8014a08:	6818      	ldr	r0, [r3, #0]
 8014a0a:	f000 bd6f 	b.w	80154ec <_free_r>
 8014a0e:	bf00      	nop
 8014a10:	200002b4 	.word	0x200002b4

08014a14 <sbrk_aligned>:
 8014a14:	b570      	push	{r4, r5, r6, lr}
 8014a16:	4e0e      	ldr	r6, [pc, #56]	; (8014a50 <sbrk_aligned+0x3c>)
 8014a18:	460c      	mov	r4, r1
 8014a1a:	6831      	ldr	r1, [r6, #0]
 8014a1c:	4605      	mov	r5, r0
 8014a1e:	b911      	cbnz	r1, 8014a26 <sbrk_aligned+0x12>
 8014a20:	f000 fcd4 	bl	80153cc <_sbrk_r>
 8014a24:	6030      	str	r0, [r6, #0]
 8014a26:	4621      	mov	r1, r4
 8014a28:	4628      	mov	r0, r5
 8014a2a:	f000 fccf 	bl	80153cc <_sbrk_r>
 8014a2e:	1c43      	adds	r3, r0, #1
 8014a30:	d00a      	beq.n	8014a48 <sbrk_aligned+0x34>
 8014a32:	1cc4      	adds	r4, r0, #3
 8014a34:	f024 0403 	bic.w	r4, r4, #3
 8014a38:	42a0      	cmp	r0, r4
 8014a3a:	d007      	beq.n	8014a4c <sbrk_aligned+0x38>
 8014a3c:	1a21      	subs	r1, r4, r0
 8014a3e:	4628      	mov	r0, r5
 8014a40:	f000 fcc4 	bl	80153cc <_sbrk_r>
 8014a44:	3001      	adds	r0, #1
 8014a46:	d101      	bne.n	8014a4c <sbrk_aligned+0x38>
 8014a48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	bd70      	pop	{r4, r5, r6, pc}
 8014a50:	2000dd30 	.word	0x2000dd30

08014a54 <_malloc_r>:
 8014a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a58:	1ccd      	adds	r5, r1, #3
 8014a5a:	f025 0503 	bic.w	r5, r5, #3
 8014a5e:	3508      	adds	r5, #8
 8014a60:	2d0c      	cmp	r5, #12
 8014a62:	bf38      	it	cc
 8014a64:	250c      	movcc	r5, #12
 8014a66:	2d00      	cmp	r5, #0
 8014a68:	4607      	mov	r7, r0
 8014a6a:	db01      	blt.n	8014a70 <_malloc_r+0x1c>
 8014a6c:	42a9      	cmp	r1, r5
 8014a6e:	d905      	bls.n	8014a7c <_malloc_r+0x28>
 8014a70:	230c      	movs	r3, #12
 8014a72:	603b      	str	r3, [r7, #0]
 8014a74:	2600      	movs	r6, #0
 8014a76:	4630      	mov	r0, r6
 8014a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014b50 <_malloc_r+0xfc>
 8014a80:	f000 f868 	bl	8014b54 <__malloc_lock>
 8014a84:	f8d8 3000 	ldr.w	r3, [r8]
 8014a88:	461c      	mov	r4, r3
 8014a8a:	bb5c      	cbnz	r4, 8014ae4 <_malloc_r+0x90>
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	4638      	mov	r0, r7
 8014a90:	f7ff ffc0 	bl	8014a14 <sbrk_aligned>
 8014a94:	1c43      	adds	r3, r0, #1
 8014a96:	4604      	mov	r4, r0
 8014a98:	d155      	bne.n	8014b46 <_malloc_r+0xf2>
 8014a9a:	f8d8 4000 	ldr.w	r4, [r8]
 8014a9e:	4626      	mov	r6, r4
 8014aa0:	2e00      	cmp	r6, #0
 8014aa2:	d145      	bne.n	8014b30 <_malloc_r+0xdc>
 8014aa4:	2c00      	cmp	r4, #0
 8014aa6:	d048      	beq.n	8014b3a <_malloc_r+0xe6>
 8014aa8:	6823      	ldr	r3, [r4, #0]
 8014aaa:	4631      	mov	r1, r6
 8014aac:	4638      	mov	r0, r7
 8014aae:	eb04 0903 	add.w	r9, r4, r3
 8014ab2:	f000 fc8b 	bl	80153cc <_sbrk_r>
 8014ab6:	4581      	cmp	r9, r0
 8014ab8:	d13f      	bne.n	8014b3a <_malloc_r+0xe6>
 8014aba:	6821      	ldr	r1, [r4, #0]
 8014abc:	1a6d      	subs	r5, r5, r1
 8014abe:	4629      	mov	r1, r5
 8014ac0:	4638      	mov	r0, r7
 8014ac2:	f7ff ffa7 	bl	8014a14 <sbrk_aligned>
 8014ac6:	3001      	adds	r0, #1
 8014ac8:	d037      	beq.n	8014b3a <_malloc_r+0xe6>
 8014aca:	6823      	ldr	r3, [r4, #0]
 8014acc:	442b      	add	r3, r5
 8014ace:	6023      	str	r3, [r4, #0]
 8014ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d038      	beq.n	8014b4a <_malloc_r+0xf6>
 8014ad8:	685a      	ldr	r2, [r3, #4]
 8014ada:	42a2      	cmp	r2, r4
 8014adc:	d12b      	bne.n	8014b36 <_malloc_r+0xe2>
 8014ade:	2200      	movs	r2, #0
 8014ae0:	605a      	str	r2, [r3, #4]
 8014ae2:	e00f      	b.n	8014b04 <_malloc_r+0xb0>
 8014ae4:	6822      	ldr	r2, [r4, #0]
 8014ae6:	1b52      	subs	r2, r2, r5
 8014ae8:	d41f      	bmi.n	8014b2a <_malloc_r+0xd6>
 8014aea:	2a0b      	cmp	r2, #11
 8014aec:	d917      	bls.n	8014b1e <_malloc_r+0xca>
 8014aee:	1961      	adds	r1, r4, r5
 8014af0:	42a3      	cmp	r3, r4
 8014af2:	6025      	str	r5, [r4, #0]
 8014af4:	bf18      	it	ne
 8014af6:	6059      	strne	r1, [r3, #4]
 8014af8:	6863      	ldr	r3, [r4, #4]
 8014afa:	bf08      	it	eq
 8014afc:	f8c8 1000 	streq.w	r1, [r8]
 8014b00:	5162      	str	r2, [r4, r5]
 8014b02:	604b      	str	r3, [r1, #4]
 8014b04:	4638      	mov	r0, r7
 8014b06:	f104 060b 	add.w	r6, r4, #11
 8014b0a:	f000 f829 	bl	8014b60 <__malloc_unlock>
 8014b0e:	f026 0607 	bic.w	r6, r6, #7
 8014b12:	1d23      	adds	r3, r4, #4
 8014b14:	1af2      	subs	r2, r6, r3
 8014b16:	d0ae      	beq.n	8014a76 <_malloc_r+0x22>
 8014b18:	1b9b      	subs	r3, r3, r6
 8014b1a:	50a3      	str	r3, [r4, r2]
 8014b1c:	e7ab      	b.n	8014a76 <_malloc_r+0x22>
 8014b1e:	42a3      	cmp	r3, r4
 8014b20:	6862      	ldr	r2, [r4, #4]
 8014b22:	d1dd      	bne.n	8014ae0 <_malloc_r+0x8c>
 8014b24:	f8c8 2000 	str.w	r2, [r8]
 8014b28:	e7ec      	b.n	8014b04 <_malloc_r+0xb0>
 8014b2a:	4623      	mov	r3, r4
 8014b2c:	6864      	ldr	r4, [r4, #4]
 8014b2e:	e7ac      	b.n	8014a8a <_malloc_r+0x36>
 8014b30:	4634      	mov	r4, r6
 8014b32:	6876      	ldr	r6, [r6, #4]
 8014b34:	e7b4      	b.n	8014aa0 <_malloc_r+0x4c>
 8014b36:	4613      	mov	r3, r2
 8014b38:	e7cc      	b.n	8014ad4 <_malloc_r+0x80>
 8014b3a:	230c      	movs	r3, #12
 8014b3c:	603b      	str	r3, [r7, #0]
 8014b3e:	4638      	mov	r0, r7
 8014b40:	f000 f80e 	bl	8014b60 <__malloc_unlock>
 8014b44:	e797      	b.n	8014a76 <_malloc_r+0x22>
 8014b46:	6025      	str	r5, [r4, #0]
 8014b48:	e7dc      	b.n	8014b04 <_malloc_r+0xb0>
 8014b4a:	605b      	str	r3, [r3, #4]
 8014b4c:	deff      	udf	#255	; 0xff
 8014b4e:	bf00      	nop
 8014b50:	2000dd2c 	.word	0x2000dd2c

08014b54 <__malloc_lock>:
 8014b54:	4801      	ldr	r0, [pc, #4]	; (8014b5c <__malloc_lock+0x8>)
 8014b56:	f000 bc86 	b.w	8015466 <__retarget_lock_acquire_recursive>
 8014b5a:	bf00      	nop
 8014b5c:	2000de75 	.word	0x2000de75

08014b60 <__malloc_unlock>:
 8014b60:	4801      	ldr	r0, [pc, #4]	; (8014b68 <__malloc_unlock+0x8>)
 8014b62:	f000 bc81 	b.w	8015468 <__retarget_lock_release_recursive>
 8014b66:	bf00      	nop
 8014b68:	2000de75 	.word	0x2000de75

08014b6c <srand>:
 8014b6c:	b538      	push	{r3, r4, r5, lr}
 8014b6e:	4b10      	ldr	r3, [pc, #64]	; (8014bb0 <srand+0x44>)
 8014b70:	681d      	ldr	r5, [r3, #0]
 8014b72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014b74:	4604      	mov	r4, r0
 8014b76:	b9b3      	cbnz	r3, 8014ba6 <srand+0x3a>
 8014b78:	2018      	movs	r0, #24
 8014b7a:	f7ff ff3b 	bl	80149f4 <malloc>
 8014b7e:	4602      	mov	r2, r0
 8014b80:	6328      	str	r0, [r5, #48]	; 0x30
 8014b82:	b920      	cbnz	r0, 8014b8e <srand+0x22>
 8014b84:	4b0b      	ldr	r3, [pc, #44]	; (8014bb4 <srand+0x48>)
 8014b86:	480c      	ldr	r0, [pc, #48]	; (8014bb8 <srand+0x4c>)
 8014b88:	2146      	movs	r1, #70	; 0x46
 8014b8a:	f000 fc85 	bl	8015498 <__assert_func>
 8014b8e:	490b      	ldr	r1, [pc, #44]	; (8014bbc <srand+0x50>)
 8014b90:	4b0b      	ldr	r3, [pc, #44]	; (8014bc0 <srand+0x54>)
 8014b92:	e9c0 1300 	strd	r1, r3, [r0]
 8014b96:	4b0b      	ldr	r3, [pc, #44]	; (8014bc4 <srand+0x58>)
 8014b98:	6083      	str	r3, [r0, #8]
 8014b9a:	230b      	movs	r3, #11
 8014b9c:	8183      	strh	r3, [r0, #12]
 8014b9e:	2100      	movs	r1, #0
 8014ba0:	2001      	movs	r0, #1
 8014ba2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014ba6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014ba8:	2200      	movs	r2, #0
 8014baa:	611c      	str	r4, [r3, #16]
 8014bac:	615a      	str	r2, [r3, #20]
 8014bae:	bd38      	pop	{r3, r4, r5, pc}
 8014bb0:	200002b4 	.word	0x200002b4
 8014bb4:	0801701e 	.word	0x0801701e
 8014bb8:	08017035 	.word	0x08017035
 8014bbc:	abcd330e 	.word	0xabcd330e
 8014bc0:	e66d1234 	.word	0xe66d1234
 8014bc4:	0005deec 	.word	0x0005deec

08014bc8 <rand>:
 8014bc8:	4b16      	ldr	r3, [pc, #88]	; (8014c24 <rand+0x5c>)
 8014bca:	b510      	push	{r4, lr}
 8014bcc:	681c      	ldr	r4, [r3, #0]
 8014bce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014bd0:	b9b3      	cbnz	r3, 8014c00 <rand+0x38>
 8014bd2:	2018      	movs	r0, #24
 8014bd4:	f7ff ff0e 	bl	80149f4 <malloc>
 8014bd8:	4602      	mov	r2, r0
 8014bda:	6320      	str	r0, [r4, #48]	; 0x30
 8014bdc:	b920      	cbnz	r0, 8014be8 <rand+0x20>
 8014bde:	4b12      	ldr	r3, [pc, #72]	; (8014c28 <rand+0x60>)
 8014be0:	4812      	ldr	r0, [pc, #72]	; (8014c2c <rand+0x64>)
 8014be2:	2152      	movs	r1, #82	; 0x52
 8014be4:	f000 fc58 	bl	8015498 <__assert_func>
 8014be8:	4911      	ldr	r1, [pc, #68]	; (8014c30 <rand+0x68>)
 8014bea:	4b12      	ldr	r3, [pc, #72]	; (8014c34 <rand+0x6c>)
 8014bec:	e9c0 1300 	strd	r1, r3, [r0]
 8014bf0:	4b11      	ldr	r3, [pc, #68]	; (8014c38 <rand+0x70>)
 8014bf2:	6083      	str	r3, [r0, #8]
 8014bf4:	230b      	movs	r3, #11
 8014bf6:	8183      	strh	r3, [r0, #12]
 8014bf8:	2100      	movs	r1, #0
 8014bfa:	2001      	movs	r0, #1
 8014bfc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014c00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014c02:	480e      	ldr	r0, [pc, #56]	; (8014c3c <rand+0x74>)
 8014c04:	690b      	ldr	r3, [r1, #16]
 8014c06:	694c      	ldr	r4, [r1, #20]
 8014c08:	4a0d      	ldr	r2, [pc, #52]	; (8014c40 <rand+0x78>)
 8014c0a:	4358      	muls	r0, r3
 8014c0c:	fb02 0004 	mla	r0, r2, r4, r0
 8014c10:	fba3 3202 	umull	r3, r2, r3, r2
 8014c14:	3301      	adds	r3, #1
 8014c16:	eb40 0002 	adc.w	r0, r0, r2
 8014c1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014c1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014c22:	bd10      	pop	{r4, pc}
 8014c24:	200002b4 	.word	0x200002b4
 8014c28:	0801701e 	.word	0x0801701e
 8014c2c:	08017035 	.word	0x08017035
 8014c30:	abcd330e 	.word	0xabcd330e
 8014c34:	e66d1234 	.word	0xe66d1234
 8014c38:	0005deec 	.word	0x0005deec
 8014c3c:	5851f42d 	.word	0x5851f42d
 8014c40:	4c957f2d 	.word	0x4c957f2d

08014c44 <realloc>:
 8014c44:	4b02      	ldr	r3, [pc, #8]	; (8014c50 <realloc+0xc>)
 8014c46:	460a      	mov	r2, r1
 8014c48:	4601      	mov	r1, r0
 8014c4a:	6818      	ldr	r0, [r3, #0]
 8014c4c:	f000 b802 	b.w	8014c54 <_realloc_r>
 8014c50:	200002b4 	.word	0x200002b4

08014c54 <_realloc_r>:
 8014c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c58:	4680      	mov	r8, r0
 8014c5a:	4614      	mov	r4, r2
 8014c5c:	460e      	mov	r6, r1
 8014c5e:	b921      	cbnz	r1, 8014c6a <_realloc_r+0x16>
 8014c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c64:	4611      	mov	r1, r2
 8014c66:	f7ff bef5 	b.w	8014a54 <_malloc_r>
 8014c6a:	b92a      	cbnz	r2, 8014c78 <_realloc_r+0x24>
 8014c6c:	f000 fc3e 	bl	80154ec <_free_r>
 8014c70:	4625      	mov	r5, r4
 8014c72:	4628      	mov	r0, r5
 8014c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c78:	f000 fc84 	bl	8015584 <_malloc_usable_size_r>
 8014c7c:	4284      	cmp	r4, r0
 8014c7e:	4607      	mov	r7, r0
 8014c80:	d802      	bhi.n	8014c88 <_realloc_r+0x34>
 8014c82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014c86:	d812      	bhi.n	8014cae <_realloc_r+0x5a>
 8014c88:	4621      	mov	r1, r4
 8014c8a:	4640      	mov	r0, r8
 8014c8c:	f7ff fee2 	bl	8014a54 <_malloc_r>
 8014c90:	4605      	mov	r5, r0
 8014c92:	2800      	cmp	r0, #0
 8014c94:	d0ed      	beq.n	8014c72 <_realloc_r+0x1e>
 8014c96:	42bc      	cmp	r4, r7
 8014c98:	4622      	mov	r2, r4
 8014c9a:	4631      	mov	r1, r6
 8014c9c:	bf28      	it	cs
 8014c9e:	463a      	movcs	r2, r7
 8014ca0:	f000 fbeb 	bl	801547a <memcpy>
 8014ca4:	4631      	mov	r1, r6
 8014ca6:	4640      	mov	r0, r8
 8014ca8:	f000 fc20 	bl	80154ec <_free_r>
 8014cac:	e7e1      	b.n	8014c72 <_realloc_r+0x1e>
 8014cae:	4635      	mov	r5, r6
 8014cb0:	e7df      	b.n	8014c72 <_realloc_r+0x1e>
	...

08014cb4 <_strtoul_l.constprop.0>:
 8014cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cb8:	4f36      	ldr	r7, [pc, #216]	; (8014d94 <_strtoul_l.constprop.0+0xe0>)
 8014cba:	4686      	mov	lr, r0
 8014cbc:	460d      	mov	r5, r1
 8014cbe:	4628      	mov	r0, r5
 8014cc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014cc4:	5d3e      	ldrb	r6, [r7, r4]
 8014cc6:	f016 0608 	ands.w	r6, r6, #8
 8014cca:	d1f8      	bne.n	8014cbe <_strtoul_l.constprop.0+0xa>
 8014ccc:	2c2d      	cmp	r4, #45	; 0x2d
 8014cce:	d130      	bne.n	8014d32 <_strtoul_l.constprop.0+0x7e>
 8014cd0:	782c      	ldrb	r4, [r5, #0]
 8014cd2:	2601      	movs	r6, #1
 8014cd4:	1c85      	adds	r5, r0, #2
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d057      	beq.n	8014d8a <_strtoul_l.constprop.0+0xd6>
 8014cda:	2b10      	cmp	r3, #16
 8014cdc:	d109      	bne.n	8014cf2 <_strtoul_l.constprop.0+0x3e>
 8014cde:	2c30      	cmp	r4, #48	; 0x30
 8014ce0:	d107      	bne.n	8014cf2 <_strtoul_l.constprop.0+0x3e>
 8014ce2:	7828      	ldrb	r0, [r5, #0]
 8014ce4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014ce8:	2858      	cmp	r0, #88	; 0x58
 8014cea:	d149      	bne.n	8014d80 <_strtoul_l.constprop.0+0xcc>
 8014cec:	786c      	ldrb	r4, [r5, #1]
 8014cee:	2310      	movs	r3, #16
 8014cf0:	3502      	adds	r5, #2
 8014cf2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8014cf6:	2700      	movs	r7, #0
 8014cf8:	fbb8 f8f3 	udiv	r8, r8, r3
 8014cfc:	fb03 f908 	mul.w	r9, r3, r8
 8014d00:	ea6f 0909 	mvn.w	r9, r9
 8014d04:	4638      	mov	r0, r7
 8014d06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014d0a:	f1bc 0f09 	cmp.w	ip, #9
 8014d0e:	d815      	bhi.n	8014d3c <_strtoul_l.constprop.0+0x88>
 8014d10:	4664      	mov	r4, ip
 8014d12:	42a3      	cmp	r3, r4
 8014d14:	dd23      	ble.n	8014d5e <_strtoul_l.constprop.0+0xaa>
 8014d16:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8014d1a:	d007      	beq.n	8014d2c <_strtoul_l.constprop.0+0x78>
 8014d1c:	4580      	cmp	r8, r0
 8014d1e:	d31b      	bcc.n	8014d58 <_strtoul_l.constprop.0+0xa4>
 8014d20:	d101      	bne.n	8014d26 <_strtoul_l.constprop.0+0x72>
 8014d22:	45a1      	cmp	r9, r4
 8014d24:	db18      	blt.n	8014d58 <_strtoul_l.constprop.0+0xa4>
 8014d26:	fb00 4003 	mla	r0, r0, r3, r4
 8014d2a:	2701      	movs	r7, #1
 8014d2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d30:	e7e9      	b.n	8014d06 <_strtoul_l.constprop.0+0x52>
 8014d32:	2c2b      	cmp	r4, #43	; 0x2b
 8014d34:	bf04      	itt	eq
 8014d36:	782c      	ldrbeq	r4, [r5, #0]
 8014d38:	1c85      	addeq	r5, r0, #2
 8014d3a:	e7cc      	b.n	8014cd6 <_strtoul_l.constprop.0+0x22>
 8014d3c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014d40:	f1bc 0f19 	cmp.w	ip, #25
 8014d44:	d801      	bhi.n	8014d4a <_strtoul_l.constprop.0+0x96>
 8014d46:	3c37      	subs	r4, #55	; 0x37
 8014d48:	e7e3      	b.n	8014d12 <_strtoul_l.constprop.0+0x5e>
 8014d4a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014d4e:	f1bc 0f19 	cmp.w	ip, #25
 8014d52:	d804      	bhi.n	8014d5e <_strtoul_l.constprop.0+0xaa>
 8014d54:	3c57      	subs	r4, #87	; 0x57
 8014d56:	e7dc      	b.n	8014d12 <_strtoul_l.constprop.0+0x5e>
 8014d58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014d5c:	e7e6      	b.n	8014d2c <_strtoul_l.constprop.0+0x78>
 8014d5e:	1c7b      	adds	r3, r7, #1
 8014d60:	d106      	bne.n	8014d70 <_strtoul_l.constprop.0+0xbc>
 8014d62:	2322      	movs	r3, #34	; 0x22
 8014d64:	f8ce 3000 	str.w	r3, [lr]
 8014d68:	4638      	mov	r0, r7
 8014d6a:	b932      	cbnz	r2, 8014d7a <_strtoul_l.constprop.0+0xc6>
 8014d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d70:	b106      	cbz	r6, 8014d74 <_strtoul_l.constprop.0+0xc0>
 8014d72:	4240      	negs	r0, r0
 8014d74:	2a00      	cmp	r2, #0
 8014d76:	d0f9      	beq.n	8014d6c <_strtoul_l.constprop.0+0xb8>
 8014d78:	b107      	cbz	r7, 8014d7c <_strtoul_l.constprop.0+0xc8>
 8014d7a:	1e69      	subs	r1, r5, #1
 8014d7c:	6011      	str	r1, [r2, #0]
 8014d7e:	e7f5      	b.n	8014d6c <_strtoul_l.constprop.0+0xb8>
 8014d80:	2430      	movs	r4, #48	; 0x30
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d1b5      	bne.n	8014cf2 <_strtoul_l.constprop.0+0x3e>
 8014d86:	2308      	movs	r3, #8
 8014d88:	e7b3      	b.n	8014cf2 <_strtoul_l.constprop.0+0x3e>
 8014d8a:	2c30      	cmp	r4, #48	; 0x30
 8014d8c:	d0a9      	beq.n	8014ce2 <_strtoul_l.constprop.0+0x2e>
 8014d8e:	230a      	movs	r3, #10
 8014d90:	e7af      	b.n	8014cf2 <_strtoul_l.constprop.0+0x3e>
 8014d92:	bf00      	nop
 8014d94:	0801708e 	.word	0x0801708e

08014d98 <strtoul>:
 8014d98:	4613      	mov	r3, r2
 8014d9a:	460a      	mov	r2, r1
 8014d9c:	4601      	mov	r1, r0
 8014d9e:	4802      	ldr	r0, [pc, #8]	; (8014da8 <strtoul+0x10>)
 8014da0:	6800      	ldr	r0, [r0, #0]
 8014da2:	f7ff bf87 	b.w	8014cb4 <_strtoul_l.constprop.0>
 8014da6:	bf00      	nop
 8014da8:	200002b4 	.word	0x200002b4

08014dac <std>:
 8014dac:	2300      	movs	r3, #0
 8014dae:	b510      	push	{r4, lr}
 8014db0:	4604      	mov	r4, r0
 8014db2:	e9c0 3300 	strd	r3, r3, [r0]
 8014db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014dba:	6083      	str	r3, [r0, #8]
 8014dbc:	8181      	strh	r1, [r0, #12]
 8014dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8014dc0:	81c2      	strh	r2, [r0, #14]
 8014dc2:	6183      	str	r3, [r0, #24]
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	2208      	movs	r2, #8
 8014dc8:	305c      	adds	r0, #92	; 0x5c
 8014dca:	f000 fa8d 	bl	80152e8 <memset>
 8014dce:	4b0d      	ldr	r3, [pc, #52]	; (8014e04 <std+0x58>)
 8014dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8014dd2:	4b0d      	ldr	r3, [pc, #52]	; (8014e08 <std+0x5c>)
 8014dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8014dd6:	4b0d      	ldr	r3, [pc, #52]	; (8014e0c <std+0x60>)
 8014dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014dda:	4b0d      	ldr	r3, [pc, #52]	; (8014e10 <std+0x64>)
 8014ddc:	6323      	str	r3, [r4, #48]	; 0x30
 8014dde:	4b0d      	ldr	r3, [pc, #52]	; (8014e14 <std+0x68>)
 8014de0:	6224      	str	r4, [r4, #32]
 8014de2:	429c      	cmp	r4, r3
 8014de4:	d006      	beq.n	8014df4 <std+0x48>
 8014de6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014dea:	4294      	cmp	r4, r2
 8014dec:	d002      	beq.n	8014df4 <std+0x48>
 8014dee:	33d0      	adds	r3, #208	; 0xd0
 8014df0:	429c      	cmp	r4, r3
 8014df2:	d105      	bne.n	8014e00 <std+0x54>
 8014df4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014dfc:	f000 bb32 	b.w	8015464 <__retarget_lock_init_recursive>
 8014e00:	bd10      	pop	{r4, pc}
 8014e02:	bf00      	nop
 8014e04:	08015071 	.word	0x08015071
 8014e08:	08015093 	.word	0x08015093
 8014e0c:	080150cb 	.word	0x080150cb
 8014e10:	080150ef 	.word	0x080150ef
 8014e14:	2000dd34 	.word	0x2000dd34

08014e18 <stdio_exit_handler>:
 8014e18:	4a02      	ldr	r2, [pc, #8]	; (8014e24 <stdio_exit_handler+0xc>)
 8014e1a:	4903      	ldr	r1, [pc, #12]	; (8014e28 <stdio_exit_handler+0x10>)
 8014e1c:	4803      	ldr	r0, [pc, #12]	; (8014e2c <stdio_exit_handler+0x14>)
 8014e1e:	f000 b869 	b.w	8014ef4 <_fwalk_sglue>
 8014e22:	bf00      	nop
 8014e24:	2000025c 	.word	0x2000025c
 8014e28:	08015ef9 	.word	0x08015ef9
 8014e2c:	20000268 	.word	0x20000268

08014e30 <cleanup_stdio>:
 8014e30:	6841      	ldr	r1, [r0, #4]
 8014e32:	4b0c      	ldr	r3, [pc, #48]	; (8014e64 <cleanup_stdio+0x34>)
 8014e34:	4299      	cmp	r1, r3
 8014e36:	b510      	push	{r4, lr}
 8014e38:	4604      	mov	r4, r0
 8014e3a:	d001      	beq.n	8014e40 <cleanup_stdio+0x10>
 8014e3c:	f001 f85c 	bl	8015ef8 <_fflush_r>
 8014e40:	68a1      	ldr	r1, [r4, #8]
 8014e42:	4b09      	ldr	r3, [pc, #36]	; (8014e68 <cleanup_stdio+0x38>)
 8014e44:	4299      	cmp	r1, r3
 8014e46:	d002      	beq.n	8014e4e <cleanup_stdio+0x1e>
 8014e48:	4620      	mov	r0, r4
 8014e4a:	f001 f855 	bl	8015ef8 <_fflush_r>
 8014e4e:	68e1      	ldr	r1, [r4, #12]
 8014e50:	4b06      	ldr	r3, [pc, #24]	; (8014e6c <cleanup_stdio+0x3c>)
 8014e52:	4299      	cmp	r1, r3
 8014e54:	d004      	beq.n	8014e60 <cleanup_stdio+0x30>
 8014e56:	4620      	mov	r0, r4
 8014e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e5c:	f001 b84c 	b.w	8015ef8 <_fflush_r>
 8014e60:	bd10      	pop	{r4, pc}
 8014e62:	bf00      	nop
 8014e64:	2000dd34 	.word	0x2000dd34
 8014e68:	2000dd9c 	.word	0x2000dd9c
 8014e6c:	2000de04 	.word	0x2000de04

08014e70 <global_stdio_init.part.0>:
 8014e70:	b510      	push	{r4, lr}
 8014e72:	4b0b      	ldr	r3, [pc, #44]	; (8014ea0 <global_stdio_init.part.0+0x30>)
 8014e74:	4c0b      	ldr	r4, [pc, #44]	; (8014ea4 <global_stdio_init.part.0+0x34>)
 8014e76:	4a0c      	ldr	r2, [pc, #48]	; (8014ea8 <global_stdio_init.part.0+0x38>)
 8014e78:	601a      	str	r2, [r3, #0]
 8014e7a:	4620      	mov	r0, r4
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	2104      	movs	r1, #4
 8014e80:	f7ff ff94 	bl	8014dac <std>
 8014e84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014e88:	2201      	movs	r2, #1
 8014e8a:	2109      	movs	r1, #9
 8014e8c:	f7ff ff8e 	bl	8014dac <std>
 8014e90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014e94:	2202      	movs	r2, #2
 8014e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e9a:	2112      	movs	r1, #18
 8014e9c:	f7ff bf86 	b.w	8014dac <std>
 8014ea0:	2000de6c 	.word	0x2000de6c
 8014ea4:	2000dd34 	.word	0x2000dd34
 8014ea8:	08014e19 	.word	0x08014e19

08014eac <__sfp_lock_acquire>:
 8014eac:	4801      	ldr	r0, [pc, #4]	; (8014eb4 <__sfp_lock_acquire+0x8>)
 8014eae:	f000 bada 	b.w	8015466 <__retarget_lock_acquire_recursive>
 8014eb2:	bf00      	nop
 8014eb4:	2000de76 	.word	0x2000de76

08014eb8 <__sfp_lock_release>:
 8014eb8:	4801      	ldr	r0, [pc, #4]	; (8014ec0 <__sfp_lock_release+0x8>)
 8014eba:	f000 bad5 	b.w	8015468 <__retarget_lock_release_recursive>
 8014ebe:	bf00      	nop
 8014ec0:	2000de76 	.word	0x2000de76

08014ec4 <__sinit>:
 8014ec4:	b510      	push	{r4, lr}
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	f7ff fff0 	bl	8014eac <__sfp_lock_acquire>
 8014ecc:	6a23      	ldr	r3, [r4, #32]
 8014ece:	b11b      	cbz	r3, 8014ed8 <__sinit+0x14>
 8014ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ed4:	f7ff bff0 	b.w	8014eb8 <__sfp_lock_release>
 8014ed8:	4b04      	ldr	r3, [pc, #16]	; (8014eec <__sinit+0x28>)
 8014eda:	6223      	str	r3, [r4, #32]
 8014edc:	4b04      	ldr	r3, [pc, #16]	; (8014ef0 <__sinit+0x2c>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d1f5      	bne.n	8014ed0 <__sinit+0xc>
 8014ee4:	f7ff ffc4 	bl	8014e70 <global_stdio_init.part.0>
 8014ee8:	e7f2      	b.n	8014ed0 <__sinit+0xc>
 8014eea:	bf00      	nop
 8014eec:	08014e31 	.word	0x08014e31
 8014ef0:	2000de6c 	.word	0x2000de6c

08014ef4 <_fwalk_sglue>:
 8014ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ef8:	4607      	mov	r7, r0
 8014efa:	4688      	mov	r8, r1
 8014efc:	4614      	mov	r4, r2
 8014efe:	2600      	movs	r6, #0
 8014f00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f04:	f1b9 0901 	subs.w	r9, r9, #1
 8014f08:	d505      	bpl.n	8014f16 <_fwalk_sglue+0x22>
 8014f0a:	6824      	ldr	r4, [r4, #0]
 8014f0c:	2c00      	cmp	r4, #0
 8014f0e:	d1f7      	bne.n	8014f00 <_fwalk_sglue+0xc>
 8014f10:	4630      	mov	r0, r6
 8014f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f16:	89ab      	ldrh	r3, [r5, #12]
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d907      	bls.n	8014f2c <_fwalk_sglue+0x38>
 8014f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f20:	3301      	adds	r3, #1
 8014f22:	d003      	beq.n	8014f2c <_fwalk_sglue+0x38>
 8014f24:	4629      	mov	r1, r5
 8014f26:	4638      	mov	r0, r7
 8014f28:	47c0      	blx	r8
 8014f2a:	4306      	orrs	r6, r0
 8014f2c:	3568      	adds	r5, #104	; 0x68
 8014f2e:	e7e9      	b.n	8014f04 <_fwalk_sglue+0x10>

08014f30 <_fwrite_r>:
 8014f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f34:	9c08      	ldr	r4, [sp, #32]
 8014f36:	468a      	mov	sl, r1
 8014f38:	4690      	mov	r8, r2
 8014f3a:	fb02 f903 	mul.w	r9, r2, r3
 8014f3e:	4606      	mov	r6, r0
 8014f40:	b118      	cbz	r0, 8014f4a <_fwrite_r+0x1a>
 8014f42:	6a03      	ldr	r3, [r0, #32]
 8014f44:	b90b      	cbnz	r3, 8014f4a <_fwrite_r+0x1a>
 8014f46:	f7ff ffbd 	bl	8014ec4 <__sinit>
 8014f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f4c:	07dd      	lsls	r5, r3, #31
 8014f4e:	d405      	bmi.n	8014f5c <_fwrite_r+0x2c>
 8014f50:	89a3      	ldrh	r3, [r4, #12]
 8014f52:	0598      	lsls	r0, r3, #22
 8014f54:	d402      	bmi.n	8014f5c <_fwrite_r+0x2c>
 8014f56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f58:	f000 fa85 	bl	8015466 <__retarget_lock_acquire_recursive>
 8014f5c:	89a3      	ldrh	r3, [r4, #12]
 8014f5e:	0719      	lsls	r1, r3, #28
 8014f60:	d516      	bpl.n	8014f90 <_fwrite_r+0x60>
 8014f62:	6923      	ldr	r3, [r4, #16]
 8014f64:	b1a3      	cbz	r3, 8014f90 <_fwrite_r+0x60>
 8014f66:	2500      	movs	r5, #0
 8014f68:	454d      	cmp	r5, r9
 8014f6a:	d01f      	beq.n	8014fac <_fwrite_r+0x7c>
 8014f6c:	68a7      	ldr	r7, [r4, #8]
 8014f6e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8014f72:	3f01      	subs	r7, #1
 8014f74:	2f00      	cmp	r7, #0
 8014f76:	60a7      	str	r7, [r4, #8]
 8014f78:	da04      	bge.n	8014f84 <_fwrite_r+0x54>
 8014f7a:	69a3      	ldr	r3, [r4, #24]
 8014f7c:	429f      	cmp	r7, r3
 8014f7e:	db0f      	blt.n	8014fa0 <_fwrite_r+0x70>
 8014f80:	290a      	cmp	r1, #10
 8014f82:	d00d      	beq.n	8014fa0 <_fwrite_r+0x70>
 8014f84:	6823      	ldr	r3, [r4, #0]
 8014f86:	1c5a      	adds	r2, r3, #1
 8014f88:	6022      	str	r2, [r4, #0]
 8014f8a:	7019      	strb	r1, [r3, #0]
 8014f8c:	3501      	adds	r5, #1
 8014f8e:	e7eb      	b.n	8014f68 <_fwrite_r+0x38>
 8014f90:	4621      	mov	r1, r4
 8014f92:	4630      	mov	r0, r6
 8014f94:	f000 f926 	bl	80151e4 <__swsetup_r>
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	d0e4      	beq.n	8014f66 <_fwrite_r+0x36>
 8014f9c:	2500      	movs	r5, #0
 8014f9e:	e005      	b.n	8014fac <_fwrite_r+0x7c>
 8014fa0:	4622      	mov	r2, r4
 8014fa2:	4630      	mov	r0, r6
 8014fa4:	f000 f8e0 	bl	8015168 <__swbuf_r>
 8014fa8:	3001      	adds	r0, #1
 8014faa:	d1ef      	bne.n	8014f8c <_fwrite_r+0x5c>
 8014fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014fae:	07da      	lsls	r2, r3, #31
 8014fb0:	d405      	bmi.n	8014fbe <_fwrite_r+0x8e>
 8014fb2:	89a3      	ldrh	r3, [r4, #12]
 8014fb4:	059b      	lsls	r3, r3, #22
 8014fb6:	d402      	bmi.n	8014fbe <_fwrite_r+0x8e>
 8014fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fba:	f000 fa55 	bl	8015468 <__retarget_lock_release_recursive>
 8014fbe:	fbb5 f0f8 	udiv	r0, r5, r8
 8014fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08014fc8 <fwrite>:
 8014fc8:	b507      	push	{r0, r1, r2, lr}
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	4613      	mov	r3, r2
 8014fce:	460a      	mov	r2, r1
 8014fd0:	4601      	mov	r1, r0
 8014fd2:	4803      	ldr	r0, [pc, #12]	; (8014fe0 <fwrite+0x18>)
 8014fd4:	6800      	ldr	r0, [r0, #0]
 8014fd6:	f7ff ffab 	bl	8014f30 <_fwrite_r>
 8014fda:	b003      	add	sp, #12
 8014fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fe0:	200002b4 	.word	0x200002b4

08014fe4 <iprintf>:
 8014fe4:	b40f      	push	{r0, r1, r2, r3}
 8014fe6:	b507      	push	{r0, r1, r2, lr}
 8014fe8:	4906      	ldr	r1, [pc, #24]	; (8015004 <iprintf+0x20>)
 8014fea:	ab04      	add	r3, sp, #16
 8014fec:	6808      	ldr	r0, [r1, #0]
 8014fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ff2:	6881      	ldr	r1, [r0, #8]
 8014ff4:	9301      	str	r3, [sp, #4]
 8014ff6:	f000 fc4f 	bl	8015898 <_vfiprintf_r>
 8014ffa:	b003      	add	sp, #12
 8014ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015000:	b004      	add	sp, #16
 8015002:	4770      	bx	lr
 8015004:	200002b4 	.word	0x200002b4

08015008 <sniprintf>:
 8015008:	b40c      	push	{r2, r3}
 801500a:	b530      	push	{r4, r5, lr}
 801500c:	4b17      	ldr	r3, [pc, #92]	; (801506c <sniprintf+0x64>)
 801500e:	1e0c      	subs	r4, r1, #0
 8015010:	681d      	ldr	r5, [r3, #0]
 8015012:	b09d      	sub	sp, #116	; 0x74
 8015014:	da08      	bge.n	8015028 <sniprintf+0x20>
 8015016:	238b      	movs	r3, #139	; 0x8b
 8015018:	602b      	str	r3, [r5, #0]
 801501a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801501e:	b01d      	add	sp, #116	; 0x74
 8015020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015024:	b002      	add	sp, #8
 8015026:	4770      	bx	lr
 8015028:	f44f 7302 	mov.w	r3, #520	; 0x208
 801502c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015030:	bf14      	ite	ne
 8015032:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015036:	4623      	moveq	r3, r4
 8015038:	9304      	str	r3, [sp, #16]
 801503a:	9307      	str	r3, [sp, #28]
 801503c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015040:	9002      	str	r0, [sp, #8]
 8015042:	9006      	str	r0, [sp, #24]
 8015044:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015048:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801504a:	ab21      	add	r3, sp, #132	; 0x84
 801504c:	a902      	add	r1, sp, #8
 801504e:	4628      	mov	r0, r5
 8015050:	9301      	str	r3, [sp, #4]
 8015052:	f000 faf9 	bl	8015648 <_svfiprintf_r>
 8015056:	1c43      	adds	r3, r0, #1
 8015058:	bfbc      	itt	lt
 801505a:	238b      	movlt	r3, #139	; 0x8b
 801505c:	602b      	strlt	r3, [r5, #0]
 801505e:	2c00      	cmp	r4, #0
 8015060:	d0dd      	beq.n	801501e <sniprintf+0x16>
 8015062:	9b02      	ldr	r3, [sp, #8]
 8015064:	2200      	movs	r2, #0
 8015066:	701a      	strb	r2, [r3, #0]
 8015068:	e7d9      	b.n	801501e <sniprintf+0x16>
 801506a:	bf00      	nop
 801506c:	200002b4 	.word	0x200002b4

08015070 <__sread>:
 8015070:	b510      	push	{r4, lr}
 8015072:	460c      	mov	r4, r1
 8015074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015078:	f000 f996 	bl	80153a8 <_read_r>
 801507c:	2800      	cmp	r0, #0
 801507e:	bfab      	itete	ge
 8015080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015082:	89a3      	ldrhlt	r3, [r4, #12]
 8015084:	181b      	addge	r3, r3, r0
 8015086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801508a:	bfac      	ite	ge
 801508c:	6563      	strge	r3, [r4, #84]	; 0x54
 801508e:	81a3      	strhlt	r3, [r4, #12]
 8015090:	bd10      	pop	{r4, pc}

08015092 <__swrite>:
 8015092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015096:	461f      	mov	r7, r3
 8015098:	898b      	ldrh	r3, [r1, #12]
 801509a:	05db      	lsls	r3, r3, #23
 801509c:	4605      	mov	r5, r0
 801509e:	460c      	mov	r4, r1
 80150a0:	4616      	mov	r6, r2
 80150a2:	d505      	bpl.n	80150b0 <__swrite+0x1e>
 80150a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150a8:	2302      	movs	r3, #2
 80150aa:	2200      	movs	r2, #0
 80150ac:	f000 f96a 	bl	8015384 <_lseek_r>
 80150b0:	89a3      	ldrh	r3, [r4, #12]
 80150b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150ba:	81a3      	strh	r3, [r4, #12]
 80150bc:	4632      	mov	r2, r6
 80150be:	463b      	mov	r3, r7
 80150c0:	4628      	mov	r0, r5
 80150c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150c6:	f000 b991 	b.w	80153ec <_write_r>

080150ca <__sseek>:
 80150ca:	b510      	push	{r4, lr}
 80150cc:	460c      	mov	r4, r1
 80150ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150d2:	f000 f957 	bl	8015384 <_lseek_r>
 80150d6:	1c43      	adds	r3, r0, #1
 80150d8:	89a3      	ldrh	r3, [r4, #12]
 80150da:	bf15      	itete	ne
 80150dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80150de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150e6:	81a3      	strheq	r3, [r4, #12]
 80150e8:	bf18      	it	ne
 80150ea:	81a3      	strhne	r3, [r4, #12]
 80150ec:	bd10      	pop	{r4, pc}

080150ee <__sclose>:
 80150ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150f2:	f000 b937 	b.w	8015364 <_close_r>

080150f6 <_vsniprintf_r>:
 80150f6:	b530      	push	{r4, r5, lr}
 80150f8:	4614      	mov	r4, r2
 80150fa:	2c00      	cmp	r4, #0
 80150fc:	b09b      	sub	sp, #108	; 0x6c
 80150fe:	4605      	mov	r5, r0
 8015100:	461a      	mov	r2, r3
 8015102:	da05      	bge.n	8015110 <_vsniprintf_r+0x1a>
 8015104:	238b      	movs	r3, #139	; 0x8b
 8015106:	6003      	str	r3, [r0, #0]
 8015108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801510c:	b01b      	add	sp, #108	; 0x6c
 801510e:	bd30      	pop	{r4, r5, pc}
 8015110:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015114:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015118:	bf14      	ite	ne
 801511a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801511e:	4623      	moveq	r3, r4
 8015120:	9302      	str	r3, [sp, #8]
 8015122:	9305      	str	r3, [sp, #20]
 8015124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015128:	9100      	str	r1, [sp, #0]
 801512a:	9104      	str	r1, [sp, #16]
 801512c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015130:	4669      	mov	r1, sp
 8015132:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015134:	f000 fa88 	bl	8015648 <_svfiprintf_r>
 8015138:	1c43      	adds	r3, r0, #1
 801513a:	bfbc      	itt	lt
 801513c:	238b      	movlt	r3, #139	; 0x8b
 801513e:	602b      	strlt	r3, [r5, #0]
 8015140:	2c00      	cmp	r4, #0
 8015142:	d0e3      	beq.n	801510c <_vsniprintf_r+0x16>
 8015144:	9b00      	ldr	r3, [sp, #0]
 8015146:	2200      	movs	r2, #0
 8015148:	701a      	strb	r2, [r3, #0]
 801514a:	e7df      	b.n	801510c <_vsniprintf_r+0x16>

0801514c <vsniprintf>:
 801514c:	b507      	push	{r0, r1, r2, lr}
 801514e:	9300      	str	r3, [sp, #0]
 8015150:	4613      	mov	r3, r2
 8015152:	460a      	mov	r2, r1
 8015154:	4601      	mov	r1, r0
 8015156:	4803      	ldr	r0, [pc, #12]	; (8015164 <vsniprintf+0x18>)
 8015158:	6800      	ldr	r0, [r0, #0]
 801515a:	f7ff ffcc 	bl	80150f6 <_vsniprintf_r>
 801515e:	b003      	add	sp, #12
 8015160:	f85d fb04 	ldr.w	pc, [sp], #4
 8015164:	200002b4 	.word	0x200002b4

08015168 <__swbuf_r>:
 8015168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801516a:	460e      	mov	r6, r1
 801516c:	4614      	mov	r4, r2
 801516e:	4605      	mov	r5, r0
 8015170:	b118      	cbz	r0, 801517a <__swbuf_r+0x12>
 8015172:	6a03      	ldr	r3, [r0, #32]
 8015174:	b90b      	cbnz	r3, 801517a <__swbuf_r+0x12>
 8015176:	f7ff fea5 	bl	8014ec4 <__sinit>
 801517a:	69a3      	ldr	r3, [r4, #24]
 801517c:	60a3      	str	r3, [r4, #8]
 801517e:	89a3      	ldrh	r3, [r4, #12]
 8015180:	071a      	lsls	r2, r3, #28
 8015182:	d525      	bpl.n	80151d0 <__swbuf_r+0x68>
 8015184:	6923      	ldr	r3, [r4, #16]
 8015186:	b31b      	cbz	r3, 80151d0 <__swbuf_r+0x68>
 8015188:	6823      	ldr	r3, [r4, #0]
 801518a:	6922      	ldr	r2, [r4, #16]
 801518c:	1a98      	subs	r0, r3, r2
 801518e:	6963      	ldr	r3, [r4, #20]
 8015190:	b2f6      	uxtb	r6, r6
 8015192:	4283      	cmp	r3, r0
 8015194:	4637      	mov	r7, r6
 8015196:	dc04      	bgt.n	80151a2 <__swbuf_r+0x3a>
 8015198:	4621      	mov	r1, r4
 801519a:	4628      	mov	r0, r5
 801519c:	f000 feac 	bl	8015ef8 <_fflush_r>
 80151a0:	b9e0      	cbnz	r0, 80151dc <__swbuf_r+0x74>
 80151a2:	68a3      	ldr	r3, [r4, #8]
 80151a4:	3b01      	subs	r3, #1
 80151a6:	60a3      	str	r3, [r4, #8]
 80151a8:	6823      	ldr	r3, [r4, #0]
 80151aa:	1c5a      	adds	r2, r3, #1
 80151ac:	6022      	str	r2, [r4, #0]
 80151ae:	701e      	strb	r6, [r3, #0]
 80151b0:	6962      	ldr	r2, [r4, #20]
 80151b2:	1c43      	adds	r3, r0, #1
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d004      	beq.n	80151c2 <__swbuf_r+0x5a>
 80151b8:	89a3      	ldrh	r3, [r4, #12]
 80151ba:	07db      	lsls	r3, r3, #31
 80151bc:	d506      	bpl.n	80151cc <__swbuf_r+0x64>
 80151be:	2e0a      	cmp	r6, #10
 80151c0:	d104      	bne.n	80151cc <__swbuf_r+0x64>
 80151c2:	4621      	mov	r1, r4
 80151c4:	4628      	mov	r0, r5
 80151c6:	f000 fe97 	bl	8015ef8 <_fflush_r>
 80151ca:	b938      	cbnz	r0, 80151dc <__swbuf_r+0x74>
 80151cc:	4638      	mov	r0, r7
 80151ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151d0:	4621      	mov	r1, r4
 80151d2:	4628      	mov	r0, r5
 80151d4:	f000 f806 	bl	80151e4 <__swsetup_r>
 80151d8:	2800      	cmp	r0, #0
 80151da:	d0d5      	beq.n	8015188 <__swbuf_r+0x20>
 80151dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80151e0:	e7f4      	b.n	80151cc <__swbuf_r+0x64>
	...

080151e4 <__swsetup_r>:
 80151e4:	b538      	push	{r3, r4, r5, lr}
 80151e6:	4b2a      	ldr	r3, [pc, #168]	; (8015290 <__swsetup_r+0xac>)
 80151e8:	4605      	mov	r5, r0
 80151ea:	6818      	ldr	r0, [r3, #0]
 80151ec:	460c      	mov	r4, r1
 80151ee:	b118      	cbz	r0, 80151f8 <__swsetup_r+0x14>
 80151f0:	6a03      	ldr	r3, [r0, #32]
 80151f2:	b90b      	cbnz	r3, 80151f8 <__swsetup_r+0x14>
 80151f4:	f7ff fe66 	bl	8014ec4 <__sinit>
 80151f8:	89a3      	ldrh	r3, [r4, #12]
 80151fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151fe:	0718      	lsls	r0, r3, #28
 8015200:	d422      	bmi.n	8015248 <__swsetup_r+0x64>
 8015202:	06d9      	lsls	r1, r3, #27
 8015204:	d407      	bmi.n	8015216 <__swsetup_r+0x32>
 8015206:	2309      	movs	r3, #9
 8015208:	602b      	str	r3, [r5, #0]
 801520a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801520e:	81a3      	strh	r3, [r4, #12]
 8015210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015214:	e034      	b.n	8015280 <__swsetup_r+0x9c>
 8015216:	0758      	lsls	r0, r3, #29
 8015218:	d512      	bpl.n	8015240 <__swsetup_r+0x5c>
 801521a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801521c:	b141      	cbz	r1, 8015230 <__swsetup_r+0x4c>
 801521e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015222:	4299      	cmp	r1, r3
 8015224:	d002      	beq.n	801522c <__swsetup_r+0x48>
 8015226:	4628      	mov	r0, r5
 8015228:	f000 f960 	bl	80154ec <_free_r>
 801522c:	2300      	movs	r3, #0
 801522e:	6363      	str	r3, [r4, #52]	; 0x34
 8015230:	89a3      	ldrh	r3, [r4, #12]
 8015232:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015236:	81a3      	strh	r3, [r4, #12]
 8015238:	2300      	movs	r3, #0
 801523a:	6063      	str	r3, [r4, #4]
 801523c:	6923      	ldr	r3, [r4, #16]
 801523e:	6023      	str	r3, [r4, #0]
 8015240:	89a3      	ldrh	r3, [r4, #12]
 8015242:	f043 0308 	orr.w	r3, r3, #8
 8015246:	81a3      	strh	r3, [r4, #12]
 8015248:	6923      	ldr	r3, [r4, #16]
 801524a:	b94b      	cbnz	r3, 8015260 <__swsetup_r+0x7c>
 801524c:	89a3      	ldrh	r3, [r4, #12]
 801524e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015256:	d003      	beq.n	8015260 <__swsetup_r+0x7c>
 8015258:	4621      	mov	r1, r4
 801525a:	4628      	mov	r0, r5
 801525c:	f000 feac 	bl	8015fb8 <__smakebuf_r>
 8015260:	89a0      	ldrh	r0, [r4, #12]
 8015262:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015266:	f010 0301 	ands.w	r3, r0, #1
 801526a:	d00a      	beq.n	8015282 <__swsetup_r+0x9e>
 801526c:	2300      	movs	r3, #0
 801526e:	60a3      	str	r3, [r4, #8]
 8015270:	6963      	ldr	r3, [r4, #20]
 8015272:	425b      	negs	r3, r3
 8015274:	61a3      	str	r3, [r4, #24]
 8015276:	6923      	ldr	r3, [r4, #16]
 8015278:	b943      	cbnz	r3, 801528c <__swsetup_r+0xa8>
 801527a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801527e:	d1c4      	bne.n	801520a <__swsetup_r+0x26>
 8015280:	bd38      	pop	{r3, r4, r5, pc}
 8015282:	0781      	lsls	r1, r0, #30
 8015284:	bf58      	it	pl
 8015286:	6963      	ldrpl	r3, [r4, #20]
 8015288:	60a3      	str	r3, [r4, #8]
 801528a:	e7f4      	b.n	8015276 <__swsetup_r+0x92>
 801528c:	2000      	movs	r0, #0
 801528e:	e7f7      	b.n	8015280 <__swsetup_r+0x9c>
 8015290:	200002b4 	.word	0x200002b4

08015294 <memcmp>:
 8015294:	b510      	push	{r4, lr}
 8015296:	3901      	subs	r1, #1
 8015298:	4402      	add	r2, r0
 801529a:	4290      	cmp	r0, r2
 801529c:	d101      	bne.n	80152a2 <memcmp+0xe>
 801529e:	2000      	movs	r0, #0
 80152a0:	e005      	b.n	80152ae <memcmp+0x1a>
 80152a2:	7803      	ldrb	r3, [r0, #0]
 80152a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80152a8:	42a3      	cmp	r3, r4
 80152aa:	d001      	beq.n	80152b0 <memcmp+0x1c>
 80152ac:	1b18      	subs	r0, r3, r4
 80152ae:	bd10      	pop	{r4, pc}
 80152b0:	3001      	adds	r0, #1
 80152b2:	e7f2      	b.n	801529a <memcmp+0x6>

080152b4 <memmove>:
 80152b4:	4288      	cmp	r0, r1
 80152b6:	b510      	push	{r4, lr}
 80152b8:	eb01 0402 	add.w	r4, r1, r2
 80152bc:	d902      	bls.n	80152c4 <memmove+0x10>
 80152be:	4284      	cmp	r4, r0
 80152c0:	4623      	mov	r3, r4
 80152c2:	d807      	bhi.n	80152d4 <memmove+0x20>
 80152c4:	1e43      	subs	r3, r0, #1
 80152c6:	42a1      	cmp	r1, r4
 80152c8:	d008      	beq.n	80152dc <memmove+0x28>
 80152ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80152ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80152d2:	e7f8      	b.n	80152c6 <memmove+0x12>
 80152d4:	4402      	add	r2, r0
 80152d6:	4601      	mov	r1, r0
 80152d8:	428a      	cmp	r2, r1
 80152da:	d100      	bne.n	80152de <memmove+0x2a>
 80152dc:	bd10      	pop	{r4, pc}
 80152de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80152e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80152e6:	e7f7      	b.n	80152d8 <memmove+0x24>

080152e8 <memset>:
 80152e8:	4402      	add	r2, r0
 80152ea:	4603      	mov	r3, r0
 80152ec:	4293      	cmp	r3, r2
 80152ee:	d100      	bne.n	80152f2 <memset+0xa>
 80152f0:	4770      	bx	lr
 80152f2:	f803 1b01 	strb.w	r1, [r3], #1
 80152f6:	e7f9      	b.n	80152ec <memset+0x4>

080152f8 <strchr>:
 80152f8:	b2c9      	uxtb	r1, r1
 80152fa:	4603      	mov	r3, r0
 80152fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015300:	b11a      	cbz	r2, 801530a <strchr+0x12>
 8015302:	428a      	cmp	r2, r1
 8015304:	d1f9      	bne.n	80152fa <strchr+0x2>
 8015306:	4618      	mov	r0, r3
 8015308:	4770      	bx	lr
 801530a:	2900      	cmp	r1, #0
 801530c:	bf18      	it	ne
 801530e:	2300      	movne	r3, #0
 8015310:	e7f9      	b.n	8015306 <strchr+0xe>

08015312 <strncmp>:
 8015312:	b510      	push	{r4, lr}
 8015314:	b16a      	cbz	r2, 8015332 <strncmp+0x20>
 8015316:	3901      	subs	r1, #1
 8015318:	1884      	adds	r4, r0, r2
 801531a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801531e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015322:	429a      	cmp	r2, r3
 8015324:	d103      	bne.n	801532e <strncmp+0x1c>
 8015326:	42a0      	cmp	r0, r4
 8015328:	d001      	beq.n	801532e <strncmp+0x1c>
 801532a:	2a00      	cmp	r2, #0
 801532c:	d1f5      	bne.n	801531a <strncmp+0x8>
 801532e:	1ad0      	subs	r0, r2, r3
 8015330:	bd10      	pop	{r4, pc}
 8015332:	4610      	mov	r0, r2
 8015334:	e7fc      	b.n	8015330 <strncmp+0x1e>

08015336 <strstr>:
 8015336:	780a      	ldrb	r2, [r1, #0]
 8015338:	b570      	push	{r4, r5, r6, lr}
 801533a:	b96a      	cbnz	r2, 8015358 <strstr+0x22>
 801533c:	bd70      	pop	{r4, r5, r6, pc}
 801533e:	429a      	cmp	r2, r3
 8015340:	d109      	bne.n	8015356 <strstr+0x20>
 8015342:	460c      	mov	r4, r1
 8015344:	4605      	mov	r5, r0
 8015346:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801534a:	2b00      	cmp	r3, #0
 801534c:	d0f6      	beq.n	801533c <strstr+0x6>
 801534e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015352:	429e      	cmp	r6, r3
 8015354:	d0f7      	beq.n	8015346 <strstr+0x10>
 8015356:	3001      	adds	r0, #1
 8015358:	7803      	ldrb	r3, [r0, #0]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d1ef      	bne.n	801533e <strstr+0x8>
 801535e:	4618      	mov	r0, r3
 8015360:	e7ec      	b.n	801533c <strstr+0x6>
	...

08015364 <_close_r>:
 8015364:	b538      	push	{r3, r4, r5, lr}
 8015366:	4d06      	ldr	r5, [pc, #24]	; (8015380 <_close_r+0x1c>)
 8015368:	2300      	movs	r3, #0
 801536a:	4604      	mov	r4, r0
 801536c:	4608      	mov	r0, r1
 801536e:	602b      	str	r3, [r5, #0]
 8015370:	f7ec fa75 	bl	800185e <_close>
 8015374:	1c43      	adds	r3, r0, #1
 8015376:	d102      	bne.n	801537e <_close_r+0x1a>
 8015378:	682b      	ldr	r3, [r5, #0]
 801537a:	b103      	cbz	r3, 801537e <_close_r+0x1a>
 801537c:	6023      	str	r3, [r4, #0]
 801537e:	bd38      	pop	{r3, r4, r5, pc}
 8015380:	2000de70 	.word	0x2000de70

08015384 <_lseek_r>:
 8015384:	b538      	push	{r3, r4, r5, lr}
 8015386:	4d07      	ldr	r5, [pc, #28]	; (80153a4 <_lseek_r+0x20>)
 8015388:	4604      	mov	r4, r0
 801538a:	4608      	mov	r0, r1
 801538c:	4611      	mov	r1, r2
 801538e:	2200      	movs	r2, #0
 8015390:	602a      	str	r2, [r5, #0]
 8015392:	461a      	mov	r2, r3
 8015394:	f7ec fa8a 	bl	80018ac <_lseek>
 8015398:	1c43      	adds	r3, r0, #1
 801539a:	d102      	bne.n	80153a2 <_lseek_r+0x1e>
 801539c:	682b      	ldr	r3, [r5, #0]
 801539e:	b103      	cbz	r3, 80153a2 <_lseek_r+0x1e>
 80153a0:	6023      	str	r3, [r4, #0]
 80153a2:	bd38      	pop	{r3, r4, r5, pc}
 80153a4:	2000de70 	.word	0x2000de70

080153a8 <_read_r>:
 80153a8:	b538      	push	{r3, r4, r5, lr}
 80153aa:	4d07      	ldr	r5, [pc, #28]	; (80153c8 <_read_r+0x20>)
 80153ac:	4604      	mov	r4, r0
 80153ae:	4608      	mov	r0, r1
 80153b0:	4611      	mov	r1, r2
 80153b2:	2200      	movs	r2, #0
 80153b4:	602a      	str	r2, [r5, #0]
 80153b6:	461a      	mov	r2, r3
 80153b8:	f7ec fa18 	bl	80017ec <_read>
 80153bc:	1c43      	adds	r3, r0, #1
 80153be:	d102      	bne.n	80153c6 <_read_r+0x1e>
 80153c0:	682b      	ldr	r3, [r5, #0]
 80153c2:	b103      	cbz	r3, 80153c6 <_read_r+0x1e>
 80153c4:	6023      	str	r3, [r4, #0]
 80153c6:	bd38      	pop	{r3, r4, r5, pc}
 80153c8:	2000de70 	.word	0x2000de70

080153cc <_sbrk_r>:
 80153cc:	b538      	push	{r3, r4, r5, lr}
 80153ce:	4d06      	ldr	r5, [pc, #24]	; (80153e8 <_sbrk_r+0x1c>)
 80153d0:	2300      	movs	r3, #0
 80153d2:	4604      	mov	r4, r0
 80153d4:	4608      	mov	r0, r1
 80153d6:	602b      	str	r3, [r5, #0]
 80153d8:	f7ec fa76 	bl	80018c8 <_sbrk>
 80153dc:	1c43      	adds	r3, r0, #1
 80153de:	d102      	bne.n	80153e6 <_sbrk_r+0x1a>
 80153e0:	682b      	ldr	r3, [r5, #0]
 80153e2:	b103      	cbz	r3, 80153e6 <_sbrk_r+0x1a>
 80153e4:	6023      	str	r3, [r4, #0]
 80153e6:	bd38      	pop	{r3, r4, r5, pc}
 80153e8:	2000de70 	.word	0x2000de70

080153ec <_write_r>:
 80153ec:	b538      	push	{r3, r4, r5, lr}
 80153ee:	4d07      	ldr	r5, [pc, #28]	; (801540c <_write_r+0x20>)
 80153f0:	4604      	mov	r4, r0
 80153f2:	4608      	mov	r0, r1
 80153f4:	4611      	mov	r1, r2
 80153f6:	2200      	movs	r2, #0
 80153f8:	602a      	str	r2, [r5, #0]
 80153fa:	461a      	mov	r2, r3
 80153fc:	f7ec fa13 	bl	8001826 <_write>
 8015400:	1c43      	adds	r3, r0, #1
 8015402:	d102      	bne.n	801540a <_write_r+0x1e>
 8015404:	682b      	ldr	r3, [r5, #0]
 8015406:	b103      	cbz	r3, 801540a <_write_r+0x1e>
 8015408:	6023      	str	r3, [r4, #0]
 801540a:	bd38      	pop	{r3, r4, r5, pc}
 801540c:	2000de70 	.word	0x2000de70

08015410 <__errno>:
 8015410:	4b01      	ldr	r3, [pc, #4]	; (8015418 <__errno+0x8>)
 8015412:	6818      	ldr	r0, [r3, #0]
 8015414:	4770      	bx	lr
 8015416:	bf00      	nop
 8015418:	200002b4 	.word	0x200002b4

0801541c <__libc_init_array>:
 801541c:	b570      	push	{r4, r5, r6, lr}
 801541e:	4d0d      	ldr	r5, [pc, #52]	; (8015454 <__libc_init_array+0x38>)
 8015420:	4c0d      	ldr	r4, [pc, #52]	; (8015458 <__libc_init_array+0x3c>)
 8015422:	1b64      	subs	r4, r4, r5
 8015424:	10a4      	asrs	r4, r4, #2
 8015426:	2600      	movs	r6, #0
 8015428:	42a6      	cmp	r6, r4
 801542a:	d109      	bne.n	8015440 <__libc_init_array+0x24>
 801542c:	4d0b      	ldr	r5, [pc, #44]	; (801545c <__libc_init_array+0x40>)
 801542e:	4c0c      	ldr	r4, [pc, #48]	; (8015460 <__libc_init_array+0x44>)
 8015430:	f000 fe6c 	bl	801610c <_init>
 8015434:	1b64      	subs	r4, r4, r5
 8015436:	10a4      	asrs	r4, r4, #2
 8015438:	2600      	movs	r6, #0
 801543a:	42a6      	cmp	r6, r4
 801543c:	d105      	bne.n	801544a <__libc_init_array+0x2e>
 801543e:	bd70      	pop	{r4, r5, r6, pc}
 8015440:	f855 3b04 	ldr.w	r3, [r5], #4
 8015444:	4798      	blx	r3
 8015446:	3601      	adds	r6, #1
 8015448:	e7ee      	b.n	8015428 <__libc_init_array+0xc>
 801544a:	f855 3b04 	ldr.w	r3, [r5], #4
 801544e:	4798      	blx	r3
 8015450:	3601      	adds	r6, #1
 8015452:	e7f2      	b.n	801543a <__libc_init_array+0x1e>
 8015454:	08017208 	.word	0x08017208
 8015458:	08017208 	.word	0x08017208
 801545c:	08017208 	.word	0x08017208
 8015460:	08017214 	.word	0x08017214

08015464 <__retarget_lock_init_recursive>:
 8015464:	4770      	bx	lr

08015466 <__retarget_lock_acquire_recursive>:
 8015466:	4770      	bx	lr

08015468 <__retarget_lock_release_recursive>:
 8015468:	4770      	bx	lr

0801546a <strcpy>:
 801546a:	4603      	mov	r3, r0
 801546c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015470:	f803 2b01 	strb.w	r2, [r3], #1
 8015474:	2a00      	cmp	r2, #0
 8015476:	d1f9      	bne.n	801546c <strcpy+0x2>
 8015478:	4770      	bx	lr

0801547a <memcpy>:
 801547a:	440a      	add	r2, r1
 801547c:	4291      	cmp	r1, r2
 801547e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015482:	d100      	bne.n	8015486 <memcpy+0xc>
 8015484:	4770      	bx	lr
 8015486:	b510      	push	{r4, lr}
 8015488:	f811 4b01 	ldrb.w	r4, [r1], #1
 801548c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015490:	4291      	cmp	r1, r2
 8015492:	d1f9      	bne.n	8015488 <memcpy+0xe>
 8015494:	bd10      	pop	{r4, pc}
	...

08015498 <__assert_func>:
 8015498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801549a:	4614      	mov	r4, r2
 801549c:	461a      	mov	r2, r3
 801549e:	4b09      	ldr	r3, [pc, #36]	; (80154c4 <__assert_func+0x2c>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	4605      	mov	r5, r0
 80154a4:	68d8      	ldr	r0, [r3, #12]
 80154a6:	b14c      	cbz	r4, 80154bc <__assert_func+0x24>
 80154a8:	4b07      	ldr	r3, [pc, #28]	; (80154c8 <__assert_func+0x30>)
 80154aa:	9100      	str	r1, [sp, #0]
 80154ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80154b0:	4906      	ldr	r1, [pc, #24]	; (80154cc <__assert_func+0x34>)
 80154b2:	462b      	mov	r3, r5
 80154b4:	f000 fd48 	bl	8015f48 <fiprintf>
 80154b8:	f000 fddc 	bl	8016074 <abort>
 80154bc:	4b04      	ldr	r3, [pc, #16]	; (80154d0 <__assert_func+0x38>)
 80154be:	461c      	mov	r4, r3
 80154c0:	e7f3      	b.n	80154aa <__assert_func+0x12>
 80154c2:	bf00      	nop
 80154c4:	200002b4 	.word	0x200002b4
 80154c8:	0801718e 	.word	0x0801718e
 80154cc:	0801719b 	.word	0x0801719b
 80154d0:	080171c9 	.word	0x080171c9

080154d4 <__env_lock>:
 80154d4:	4801      	ldr	r0, [pc, #4]	; (80154dc <__env_lock+0x8>)
 80154d6:	f7ff bfc6 	b.w	8015466 <__retarget_lock_acquire_recursive>
 80154da:	bf00      	nop
 80154dc:	2000de74 	.word	0x2000de74

080154e0 <__env_unlock>:
 80154e0:	4801      	ldr	r0, [pc, #4]	; (80154e8 <__env_unlock+0x8>)
 80154e2:	f7ff bfc1 	b.w	8015468 <__retarget_lock_release_recursive>
 80154e6:	bf00      	nop
 80154e8:	2000de74 	.word	0x2000de74

080154ec <_free_r>:
 80154ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80154ee:	2900      	cmp	r1, #0
 80154f0:	d044      	beq.n	801557c <_free_r+0x90>
 80154f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154f6:	9001      	str	r0, [sp, #4]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	f1a1 0404 	sub.w	r4, r1, #4
 80154fe:	bfb8      	it	lt
 8015500:	18e4      	addlt	r4, r4, r3
 8015502:	f7ff fb27 	bl	8014b54 <__malloc_lock>
 8015506:	4a1e      	ldr	r2, [pc, #120]	; (8015580 <_free_r+0x94>)
 8015508:	9801      	ldr	r0, [sp, #4]
 801550a:	6813      	ldr	r3, [r2, #0]
 801550c:	b933      	cbnz	r3, 801551c <_free_r+0x30>
 801550e:	6063      	str	r3, [r4, #4]
 8015510:	6014      	str	r4, [r2, #0]
 8015512:	b003      	add	sp, #12
 8015514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015518:	f7ff bb22 	b.w	8014b60 <__malloc_unlock>
 801551c:	42a3      	cmp	r3, r4
 801551e:	d908      	bls.n	8015532 <_free_r+0x46>
 8015520:	6825      	ldr	r5, [r4, #0]
 8015522:	1961      	adds	r1, r4, r5
 8015524:	428b      	cmp	r3, r1
 8015526:	bf01      	itttt	eq
 8015528:	6819      	ldreq	r1, [r3, #0]
 801552a:	685b      	ldreq	r3, [r3, #4]
 801552c:	1949      	addeq	r1, r1, r5
 801552e:	6021      	streq	r1, [r4, #0]
 8015530:	e7ed      	b.n	801550e <_free_r+0x22>
 8015532:	461a      	mov	r2, r3
 8015534:	685b      	ldr	r3, [r3, #4]
 8015536:	b10b      	cbz	r3, 801553c <_free_r+0x50>
 8015538:	42a3      	cmp	r3, r4
 801553a:	d9fa      	bls.n	8015532 <_free_r+0x46>
 801553c:	6811      	ldr	r1, [r2, #0]
 801553e:	1855      	adds	r5, r2, r1
 8015540:	42a5      	cmp	r5, r4
 8015542:	d10b      	bne.n	801555c <_free_r+0x70>
 8015544:	6824      	ldr	r4, [r4, #0]
 8015546:	4421      	add	r1, r4
 8015548:	1854      	adds	r4, r2, r1
 801554a:	42a3      	cmp	r3, r4
 801554c:	6011      	str	r1, [r2, #0]
 801554e:	d1e0      	bne.n	8015512 <_free_r+0x26>
 8015550:	681c      	ldr	r4, [r3, #0]
 8015552:	685b      	ldr	r3, [r3, #4]
 8015554:	6053      	str	r3, [r2, #4]
 8015556:	440c      	add	r4, r1
 8015558:	6014      	str	r4, [r2, #0]
 801555a:	e7da      	b.n	8015512 <_free_r+0x26>
 801555c:	d902      	bls.n	8015564 <_free_r+0x78>
 801555e:	230c      	movs	r3, #12
 8015560:	6003      	str	r3, [r0, #0]
 8015562:	e7d6      	b.n	8015512 <_free_r+0x26>
 8015564:	6825      	ldr	r5, [r4, #0]
 8015566:	1961      	adds	r1, r4, r5
 8015568:	428b      	cmp	r3, r1
 801556a:	bf04      	itt	eq
 801556c:	6819      	ldreq	r1, [r3, #0]
 801556e:	685b      	ldreq	r3, [r3, #4]
 8015570:	6063      	str	r3, [r4, #4]
 8015572:	bf04      	itt	eq
 8015574:	1949      	addeq	r1, r1, r5
 8015576:	6021      	streq	r1, [r4, #0]
 8015578:	6054      	str	r4, [r2, #4]
 801557a:	e7ca      	b.n	8015512 <_free_r+0x26>
 801557c:	b003      	add	sp, #12
 801557e:	bd30      	pop	{r4, r5, pc}
 8015580:	2000dd2c 	.word	0x2000dd2c

08015584 <_malloc_usable_size_r>:
 8015584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015588:	1f18      	subs	r0, r3, #4
 801558a:	2b00      	cmp	r3, #0
 801558c:	bfbc      	itt	lt
 801558e:	580b      	ldrlt	r3, [r1, r0]
 8015590:	18c0      	addlt	r0, r0, r3
 8015592:	4770      	bx	lr

08015594 <__ssputs_r>:
 8015594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015598:	688e      	ldr	r6, [r1, #8]
 801559a:	461f      	mov	r7, r3
 801559c:	42be      	cmp	r6, r7
 801559e:	680b      	ldr	r3, [r1, #0]
 80155a0:	4682      	mov	sl, r0
 80155a2:	460c      	mov	r4, r1
 80155a4:	4690      	mov	r8, r2
 80155a6:	d82c      	bhi.n	8015602 <__ssputs_r+0x6e>
 80155a8:	898a      	ldrh	r2, [r1, #12]
 80155aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80155ae:	d026      	beq.n	80155fe <__ssputs_r+0x6a>
 80155b0:	6965      	ldr	r5, [r4, #20]
 80155b2:	6909      	ldr	r1, [r1, #16]
 80155b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80155b8:	eba3 0901 	sub.w	r9, r3, r1
 80155bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80155c0:	1c7b      	adds	r3, r7, #1
 80155c2:	444b      	add	r3, r9
 80155c4:	106d      	asrs	r5, r5, #1
 80155c6:	429d      	cmp	r5, r3
 80155c8:	bf38      	it	cc
 80155ca:	461d      	movcc	r5, r3
 80155cc:	0553      	lsls	r3, r2, #21
 80155ce:	d527      	bpl.n	8015620 <__ssputs_r+0x8c>
 80155d0:	4629      	mov	r1, r5
 80155d2:	f7ff fa3f 	bl	8014a54 <_malloc_r>
 80155d6:	4606      	mov	r6, r0
 80155d8:	b360      	cbz	r0, 8015634 <__ssputs_r+0xa0>
 80155da:	6921      	ldr	r1, [r4, #16]
 80155dc:	464a      	mov	r2, r9
 80155de:	f7ff ff4c 	bl	801547a <memcpy>
 80155e2:	89a3      	ldrh	r3, [r4, #12]
 80155e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80155e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155ec:	81a3      	strh	r3, [r4, #12]
 80155ee:	6126      	str	r6, [r4, #16]
 80155f0:	6165      	str	r5, [r4, #20]
 80155f2:	444e      	add	r6, r9
 80155f4:	eba5 0509 	sub.w	r5, r5, r9
 80155f8:	6026      	str	r6, [r4, #0]
 80155fa:	60a5      	str	r5, [r4, #8]
 80155fc:	463e      	mov	r6, r7
 80155fe:	42be      	cmp	r6, r7
 8015600:	d900      	bls.n	8015604 <__ssputs_r+0x70>
 8015602:	463e      	mov	r6, r7
 8015604:	6820      	ldr	r0, [r4, #0]
 8015606:	4632      	mov	r2, r6
 8015608:	4641      	mov	r1, r8
 801560a:	f7ff fe53 	bl	80152b4 <memmove>
 801560e:	68a3      	ldr	r3, [r4, #8]
 8015610:	1b9b      	subs	r3, r3, r6
 8015612:	60a3      	str	r3, [r4, #8]
 8015614:	6823      	ldr	r3, [r4, #0]
 8015616:	4433      	add	r3, r6
 8015618:	6023      	str	r3, [r4, #0]
 801561a:	2000      	movs	r0, #0
 801561c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015620:	462a      	mov	r2, r5
 8015622:	f7ff fb17 	bl	8014c54 <_realloc_r>
 8015626:	4606      	mov	r6, r0
 8015628:	2800      	cmp	r0, #0
 801562a:	d1e0      	bne.n	80155ee <__ssputs_r+0x5a>
 801562c:	6921      	ldr	r1, [r4, #16]
 801562e:	4650      	mov	r0, sl
 8015630:	f7ff ff5c 	bl	80154ec <_free_r>
 8015634:	230c      	movs	r3, #12
 8015636:	f8ca 3000 	str.w	r3, [sl]
 801563a:	89a3      	ldrh	r3, [r4, #12]
 801563c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015640:	81a3      	strh	r3, [r4, #12]
 8015642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015646:	e7e9      	b.n	801561c <__ssputs_r+0x88>

08015648 <_svfiprintf_r>:
 8015648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801564c:	4698      	mov	r8, r3
 801564e:	898b      	ldrh	r3, [r1, #12]
 8015650:	061b      	lsls	r3, r3, #24
 8015652:	b09d      	sub	sp, #116	; 0x74
 8015654:	4607      	mov	r7, r0
 8015656:	460d      	mov	r5, r1
 8015658:	4614      	mov	r4, r2
 801565a:	d50e      	bpl.n	801567a <_svfiprintf_r+0x32>
 801565c:	690b      	ldr	r3, [r1, #16]
 801565e:	b963      	cbnz	r3, 801567a <_svfiprintf_r+0x32>
 8015660:	2140      	movs	r1, #64	; 0x40
 8015662:	f7ff f9f7 	bl	8014a54 <_malloc_r>
 8015666:	6028      	str	r0, [r5, #0]
 8015668:	6128      	str	r0, [r5, #16]
 801566a:	b920      	cbnz	r0, 8015676 <_svfiprintf_r+0x2e>
 801566c:	230c      	movs	r3, #12
 801566e:	603b      	str	r3, [r7, #0]
 8015670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015674:	e0d0      	b.n	8015818 <_svfiprintf_r+0x1d0>
 8015676:	2340      	movs	r3, #64	; 0x40
 8015678:	616b      	str	r3, [r5, #20]
 801567a:	2300      	movs	r3, #0
 801567c:	9309      	str	r3, [sp, #36]	; 0x24
 801567e:	2320      	movs	r3, #32
 8015680:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015684:	f8cd 800c 	str.w	r8, [sp, #12]
 8015688:	2330      	movs	r3, #48	; 0x30
 801568a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015830 <_svfiprintf_r+0x1e8>
 801568e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015692:	f04f 0901 	mov.w	r9, #1
 8015696:	4623      	mov	r3, r4
 8015698:	469a      	mov	sl, r3
 801569a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801569e:	b10a      	cbz	r2, 80156a4 <_svfiprintf_r+0x5c>
 80156a0:	2a25      	cmp	r2, #37	; 0x25
 80156a2:	d1f9      	bne.n	8015698 <_svfiprintf_r+0x50>
 80156a4:	ebba 0b04 	subs.w	fp, sl, r4
 80156a8:	d00b      	beq.n	80156c2 <_svfiprintf_r+0x7a>
 80156aa:	465b      	mov	r3, fp
 80156ac:	4622      	mov	r2, r4
 80156ae:	4629      	mov	r1, r5
 80156b0:	4638      	mov	r0, r7
 80156b2:	f7ff ff6f 	bl	8015594 <__ssputs_r>
 80156b6:	3001      	adds	r0, #1
 80156b8:	f000 80a9 	beq.w	801580e <_svfiprintf_r+0x1c6>
 80156bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156be:	445a      	add	r2, fp
 80156c0:	9209      	str	r2, [sp, #36]	; 0x24
 80156c2:	f89a 3000 	ldrb.w	r3, [sl]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	f000 80a1 	beq.w	801580e <_svfiprintf_r+0x1c6>
 80156cc:	2300      	movs	r3, #0
 80156ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80156d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156d6:	f10a 0a01 	add.w	sl, sl, #1
 80156da:	9304      	str	r3, [sp, #16]
 80156dc:	9307      	str	r3, [sp, #28]
 80156de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156e2:	931a      	str	r3, [sp, #104]	; 0x68
 80156e4:	4654      	mov	r4, sl
 80156e6:	2205      	movs	r2, #5
 80156e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156ec:	4850      	ldr	r0, [pc, #320]	; (8015830 <_svfiprintf_r+0x1e8>)
 80156ee:	f7ea fd8f 	bl	8000210 <memchr>
 80156f2:	9a04      	ldr	r2, [sp, #16]
 80156f4:	b9d8      	cbnz	r0, 801572e <_svfiprintf_r+0xe6>
 80156f6:	06d0      	lsls	r0, r2, #27
 80156f8:	bf44      	itt	mi
 80156fa:	2320      	movmi	r3, #32
 80156fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015700:	0711      	lsls	r1, r2, #28
 8015702:	bf44      	itt	mi
 8015704:	232b      	movmi	r3, #43	; 0x2b
 8015706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801570a:	f89a 3000 	ldrb.w	r3, [sl]
 801570e:	2b2a      	cmp	r3, #42	; 0x2a
 8015710:	d015      	beq.n	801573e <_svfiprintf_r+0xf6>
 8015712:	9a07      	ldr	r2, [sp, #28]
 8015714:	4654      	mov	r4, sl
 8015716:	2000      	movs	r0, #0
 8015718:	f04f 0c0a 	mov.w	ip, #10
 801571c:	4621      	mov	r1, r4
 801571e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015722:	3b30      	subs	r3, #48	; 0x30
 8015724:	2b09      	cmp	r3, #9
 8015726:	d94d      	bls.n	80157c4 <_svfiprintf_r+0x17c>
 8015728:	b1b0      	cbz	r0, 8015758 <_svfiprintf_r+0x110>
 801572a:	9207      	str	r2, [sp, #28]
 801572c:	e014      	b.n	8015758 <_svfiprintf_r+0x110>
 801572e:	eba0 0308 	sub.w	r3, r0, r8
 8015732:	fa09 f303 	lsl.w	r3, r9, r3
 8015736:	4313      	orrs	r3, r2
 8015738:	9304      	str	r3, [sp, #16]
 801573a:	46a2      	mov	sl, r4
 801573c:	e7d2      	b.n	80156e4 <_svfiprintf_r+0x9c>
 801573e:	9b03      	ldr	r3, [sp, #12]
 8015740:	1d19      	adds	r1, r3, #4
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	9103      	str	r1, [sp, #12]
 8015746:	2b00      	cmp	r3, #0
 8015748:	bfbb      	ittet	lt
 801574a:	425b      	neglt	r3, r3
 801574c:	f042 0202 	orrlt.w	r2, r2, #2
 8015750:	9307      	strge	r3, [sp, #28]
 8015752:	9307      	strlt	r3, [sp, #28]
 8015754:	bfb8      	it	lt
 8015756:	9204      	strlt	r2, [sp, #16]
 8015758:	7823      	ldrb	r3, [r4, #0]
 801575a:	2b2e      	cmp	r3, #46	; 0x2e
 801575c:	d10c      	bne.n	8015778 <_svfiprintf_r+0x130>
 801575e:	7863      	ldrb	r3, [r4, #1]
 8015760:	2b2a      	cmp	r3, #42	; 0x2a
 8015762:	d134      	bne.n	80157ce <_svfiprintf_r+0x186>
 8015764:	9b03      	ldr	r3, [sp, #12]
 8015766:	1d1a      	adds	r2, r3, #4
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	9203      	str	r2, [sp, #12]
 801576c:	2b00      	cmp	r3, #0
 801576e:	bfb8      	it	lt
 8015770:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015774:	3402      	adds	r4, #2
 8015776:	9305      	str	r3, [sp, #20]
 8015778:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015840 <_svfiprintf_r+0x1f8>
 801577c:	7821      	ldrb	r1, [r4, #0]
 801577e:	2203      	movs	r2, #3
 8015780:	4650      	mov	r0, sl
 8015782:	f7ea fd45 	bl	8000210 <memchr>
 8015786:	b138      	cbz	r0, 8015798 <_svfiprintf_r+0x150>
 8015788:	9b04      	ldr	r3, [sp, #16]
 801578a:	eba0 000a 	sub.w	r0, r0, sl
 801578e:	2240      	movs	r2, #64	; 0x40
 8015790:	4082      	lsls	r2, r0
 8015792:	4313      	orrs	r3, r2
 8015794:	3401      	adds	r4, #1
 8015796:	9304      	str	r3, [sp, #16]
 8015798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801579c:	4825      	ldr	r0, [pc, #148]	; (8015834 <_svfiprintf_r+0x1ec>)
 801579e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157a2:	2206      	movs	r2, #6
 80157a4:	f7ea fd34 	bl	8000210 <memchr>
 80157a8:	2800      	cmp	r0, #0
 80157aa:	d038      	beq.n	801581e <_svfiprintf_r+0x1d6>
 80157ac:	4b22      	ldr	r3, [pc, #136]	; (8015838 <_svfiprintf_r+0x1f0>)
 80157ae:	bb1b      	cbnz	r3, 80157f8 <_svfiprintf_r+0x1b0>
 80157b0:	9b03      	ldr	r3, [sp, #12]
 80157b2:	3307      	adds	r3, #7
 80157b4:	f023 0307 	bic.w	r3, r3, #7
 80157b8:	3308      	adds	r3, #8
 80157ba:	9303      	str	r3, [sp, #12]
 80157bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157be:	4433      	add	r3, r6
 80157c0:	9309      	str	r3, [sp, #36]	; 0x24
 80157c2:	e768      	b.n	8015696 <_svfiprintf_r+0x4e>
 80157c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80157c8:	460c      	mov	r4, r1
 80157ca:	2001      	movs	r0, #1
 80157cc:	e7a6      	b.n	801571c <_svfiprintf_r+0xd4>
 80157ce:	2300      	movs	r3, #0
 80157d0:	3401      	adds	r4, #1
 80157d2:	9305      	str	r3, [sp, #20]
 80157d4:	4619      	mov	r1, r3
 80157d6:	f04f 0c0a 	mov.w	ip, #10
 80157da:	4620      	mov	r0, r4
 80157dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157e0:	3a30      	subs	r2, #48	; 0x30
 80157e2:	2a09      	cmp	r2, #9
 80157e4:	d903      	bls.n	80157ee <_svfiprintf_r+0x1a6>
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d0c6      	beq.n	8015778 <_svfiprintf_r+0x130>
 80157ea:	9105      	str	r1, [sp, #20]
 80157ec:	e7c4      	b.n	8015778 <_svfiprintf_r+0x130>
 80157ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80157f2:	4604      	mov	r4, r0
 80157f4:	2301      	movs	r3, #1
 80157f6:	e7f0      	b.n	80157da <_svfiprintf_r+0x192>
 80157f8:	ab03      	add	r3, sp, #12
 80157fa:	9300      	str	r3, [sp, #0]
 80157fc:	462a      	mov	r2, r5
 80157fe:	4b0f      	ldr	r3, [pc, #60]	; (801583c <_svfiprintf_r+0x1f4>)
 8015800:	a904      	add	r1, sp, #16
 8015802:	4638      	mov	r0, r7
 8015804:	f3af 8000 	nop.w
 8015808:	1c42      	adds	r2, r0, #1
 801580a:	4606      	mov	r6, r0
 801580c:	d1d6      	bne.n	80157bc <_svfiprintf_r+0x174>
 801580e:	89ab      	ldrh	r3, [r5, #12]
 8015810:	065b      	lsls	r3, r3, #25
 8015812:	f53f af2d 	bmi.w	8015670 <_svfiprintf_r+0x28>
 8015816:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015818:	b01d      	add	sp, #116	; 0x74
 801581a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801581e:	ab03      	add	r3, sp, #12
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	462a      	mov	r2, r5
 8015824:	4b05      	ldr	r3, [pc, #20]	; (801583c <_svfiprintf_r+0x1f4>)
 8015826:	a904      	add	r1, sp, #16
 8015828:	4638      	mov	r0, r7
 801582a:	f000 f9bd 	bl	8015ba8 <_printf_i>
 801582e:	e7eb      	b.n	8015808 <_svfiprintf_r+0x1c0>
 8015830:	080171ca 	.word	0x080171ca
 8015834:	080171d4 	.word	0x080171d4
 8015838:	00000000 	.word	0x00000000
 801583c:	08015595 	.word	0x08015595
 8015840:	080171d0 	.word	0x080171d0

08015844 <__sfputc_r>:
 8015844:	6893      	ldr	r3, [r2, #8]
 8015846:	3b01      	subs	r3, #1
 8015848:	2b00      	cmp	r3, #0
 801584a:	b410      	push	{r4}
 801584c:	6093      	str	r3, [r2, #8]
 801584e:	da08      	bge.n	8015862 <__sfputc_r+0x1e>
 8015850:	6994      	ldr	r4, [r2, #24]
 8015852:	42a3      	cmp	r3, r4
 8015854:	db01      	blt.n	801585a <__sfputc_r+0x16>
 8015856:	290a      	cmp	r1, #10
 8015858:	d103      	bne.n	8015862 <__sfputc_r+0x1e>
 801585a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801585e:	f7ff bc83 	b.w	8015168 <__swbuf_r>
 8015862:	6813      	ldr	r3, [r2, #0]
 8015864:	1c58      	adds	r0, r3, #1
 8015866:	6010      	str	r0, [r2, #0]
 8015868:	7019      	strb	r1, [r3, #0]
 801586a:	4608      	mov	r0, r1
 801586c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015870:	4770      	bx	lr

08015872 <__sfputs_r>:
 8015872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015874:	4606      	mov	r6, r0
 8015876:	460f      	mov	r7, r1
 8015878:	4614      	mov	r4, r2
 801587a:	18d5      	adds	r5, r2, r3
 801587c:	42ac      	cmp	r4, r5
 801587e:	d101      	bne.n	8015884 <__sfputs_r+0x12>
 8015880:	2000      	movs	r0, #0
 8015882:	e007      	b.n	8015894 <__sfputs_r+0x22>
 8015884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015888:	463a      	mov	r2, r7
 801588a:	4630      	mov	r0, r6
 801588c:	f7ff ffda 	bl	8015844 <__sfputc_r>
 8015890:	1c43      	adds	r3, r0, #1
 8015892:	d1f3      	bne.n	801587c <__sfputs_r+0xa>
 8015894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015898 <_vfiprintf_r>:
 8015898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801589c:	460d      	mov	r5, r1
 801589e:	b09d      	sub	sp, #116	; 0x74
 80158a0:	4614      	mov	r4, r2
 80158a2:	4698      	mov	r8, r3
 80158a4:	4606      	mov	r6, r0
 80158a6:	b118      	cbz	r0, 80158b0 <_vfiprintf_r+0x18>
 80158a8:	6a03      	ldr	r3, [r0, #32]
 80158aa:	b90b      	cbnz	r3, 80158b0 <_vfiprintf_r+0x18>
 80158ac:	f7ff fb0a 	bl	8014ec4 <__sinit>
 80158b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158b2:	07d9      	lsls	r1, r3, #31
 80158b4:	d405      	bmi.n	80158c2 <_vfiprintf_r+0x2a>
 80158b6:	89ab      	ldrh	r3, [r5, #12]
 80158b8:	059a      	lsls	r2, r3, #22
 80158ba:	d402      	bmi.n	80158c2 <_vfiprintf_r+0x2a>
 80158bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158be:	f7ff fdd2 	bl	8015466 <__retarget_lock_acquire_recursive>
 80158c2:	89ab      	ldrh	r3, [r5, #12]
 80158c4:	071b      	lsls	r3, r3, #28
 80158c6:	d501      	bpl.n	80158cc <_vfiprintf_r+0x34>
 80158c8:	692b      	ldr	r3, [r5, #16]
 80158ca:	b99b      	cbnz	r3, 80158f4 <_vfiprintf_r+0x5c>
 80158cc:	4629      	mov	r1, r5
 80158ce:	4630      	mov	r0, r6
 80158d0:	f7ff fc88 	bl	80151e4 <__swsetup_r>
 80158d4:	b170      	cbz	r0, 80158f4 <_vfiprintf_r+0x5c>
 80158d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158d8:	07dc      	lsls	r4, r3, #31
 80158da:	d504      	bpl.n	80158e6 <_vfiprintf_r+0x4e>
 80158dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158e0:	b01d      	add	sp, #116	; 0x74
 80158e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158e6:	89ab      	ldrh	r3, [r5, #12]
 80158e8:	0598      	lsls	r0, r3, #22
 80158ea:	d4f7      	bmi.n	80158dc <_vfiprintf_r+0x44>
 80158ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158ee:	f7ff fdbb 	bl	8015468 <__retarget_lock_release_recursive>
 80158f2:	e7f3      	b.n	80158dc <_vfiprintf_r+0x44>
 80158f4:	2300      	movs	r3, #0
 80158f6:	9309      	str	r3, [sp, #36]	; 0x24
 80158f8:	2320      	movs	r3, #32
 80158fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80158fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015902:	2330      	movs	r3, #48	; 0x30
 8015904:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015ab8 <_vfiprintf_r+0x220>
 8015908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801590c:	f04f 0901 	mov.w	r9, #1
 8015910:	4623      	mov	r3, r4
 8015912:	469a      	mov	sl, r3
 8015914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015918:	b10a      	cbz	r2, 801591e <_vfiprintf_r+0x86>
 801591a:	2a25      	cmp	r2, #37	; 0x25
 801591c:	d1f9      	bne.n	8015912 <_vfiprintf_r+0x7a>
 801591e:	ebba 0b04 	subs.w	fp, sl, r4
 8015922:	d00b      	beq.n	801593c <_vfiprintf_r+0xa4>
 8015924:	465b      	mov	r3, fp
 8015926:	4622      	mov	r2, r4
 8015928:	4629      	mov	r1, r5
 801592a:	4630      	mov	r0, r6
 801592c:	f7ff ffa1 	bl	8015872 <__sfputs_r>
 8015930:	3001      	adds	r0, #1
 8015932:	f000 80a9 	beq.w	8015a88 <_vfiprintf_r+0x1f0>
 8015936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015938:	445a      	add	r2, fp
 801593a:	9209      	str	r2, [sp, #36]	; 0x24
 801593c:	f89a 3000 	ldrb.w	r3, [sl]
 8015940:	2b00      	cmp	r3, #0
 8015942:	f000 80a1 	beq.w	8015a88 <_vfiprintf_r+0x1f0>
 8015946:	2300      	movs	r3, #0
 8015948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801594c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015950:	f10a 0a01 	add.w	sl, sl, #1
 8015954:	9304      	str	r3, [sp, #16]
 8015956:	9307      	str	r3, [sp, #28]
 8015958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801595c:	931a      	str	r3, [sp, #104]	; 0x68
 801595e:	4654      	mov	r4, sl
 8015960:	2205      	movs	r2, #5
 8015962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015966:	4854      	ldr	r0, [pc, #336]	; (8015ab8 <_vfiprintf_r+0x220>)
 8015968:	f7ea fc52 	bl	8000210 <memchr>
 801596c:	9a04      	ldr	r2, [sp, #16]
 801596e:	b9d8      	cbnz	r0, 80159a8 <_vfiprintf_r+0x110>
 8015970:	06d1      	lsls	r1, r2, #27
 8015972:	bf44      	itt	mi
 8015974:	2320      	movmi	r3, #32
 8015976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801597a:	0713      	lsls	r3, r2, #28
 801597c:	bf44      	itt	mi
 801597e:	232b      	movmi	r3, #43	; 0x2b
 8015980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015984:	f89a 3000 	ldrb.w	r3, [sl]
 8015988:	2b2a      	cmp	r3, #42	; 0x2a
 801598a:	d015      	beq.n	80159b8 <_vfiprintf_r+0x120>
 801598c:	9a07      	ldr	r2, [sp, #28]
 801598e:	4654      	mov	r4, sl
 8015990:	2000      	movs	r0, #0
 8015992:	f04f 0c0a 	mov.w	ip, #10
 8015996:	4621      	mov	r1, r4
 8015998:	f811 3b01 	ldrb.w	r3, [r1], #1
 801599c:	3b30      	subs	r3, #48	; 0x30
 801599e:	2b09      	cmp	r3, #9
 80159a0:	d94d      	bls.n	8015a3e <_vfiprintf_r+0x1a6>
 80159a2:	b1b0      	cbz	r0, 80159d2 <_vfiprintf_r+0x13a>
 80159a4:	9207      	str	r2, [sp, #28]
 80159a6:	e014      	b.n	80159d2 <_vfiprintf_r+0x13a>
 80159a8:	eba0 0308 	sub.w	r3, r0, r8
 80159ac:	fa09 f303 	lsl.w	r3, r9, r3
 80159b0:	4313      	orrs	r3, r2
 80159b2:	9304      	str	r3, [sp, #16]
 80159b4:	46a2      	mov	sl, r4
 80159b6:	e7d2      	b.n	801595e <_vfiprintf_r+0xc6>
 80159b8:	9b03      	ldr	r3, [sp, #12]
 80159ba:	1d19      	adds	r1, r3, #4
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	9103      	str	r1, [sp, #12]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	bfbb      	ittet	lt
 80159c4:	425b      	neglt	r3, r3
 80159c6:	f042 0202 	orrlt.w	r2, r2, #2
 80159ca:	9307      	strge	r3, [sp, #28]
 80159cc:	9307      	strlt	r3, [sp, #28]
 80159ce:	bfb8      	it	lt
 80159d0:	9204      	strlt	r2, [sp, #16]
 80159d2:	7823      	ldrb	r3, [r4, #0]
 80159d4:	2b2e      	cmp	r3, #46	; 0x2e
 80159d6:	d10c      	bne.n	80159f2 <_vfiprintf_r+0x15a>
 80159d8:	7863      	ldrb	r3, [r4, #1]
 80159da:	2b2a      	cmp	r3, #42	; 0x2a
 80159dc:	d134      	bne.n	8015a48 <_vfiprintf_r+0x1b0>
 80159de:	9b03      	ldr	r3, [sp, #12]
 80159e0:	1d1a      	adds	r2, r3, #4
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	9203      	str	r2, [sp, #12]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	bfb8      	it	lt
 80159ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80159ee:	3402      	adds	r4, #2
 80159f0:	9305      	str	r3, [sp, #20]
 80159f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015ac8 <_vfiprintf_r+0x230>
 80159f6:	7821      	ldrb	r1, [r4, #0]
 80159f8:	2203      	movs	r2, #3
 80159fa:	4650      	mov	r0, sl
 80159fc:	f7ea fc08 	bl	8000210 <memchr>
 8015a00:	b138      	cbz	r0, 8015a12 <_vfiprintf_r+0x17a>
 8015a02:	9b04      	ldr	r3, [sp, #16]
 8015a04:	eba0 000a 	sub.w	r0, r0, sl
 8015a08:	2240      	movs	r2, #64	; 0x40
 8015a0a:	4082      	lsls	r2, r0
 8015a0c:	4313      	orrs	r3, r2
 8015a0e:	3401      	adds	r4, #1
 8015a10:	9304      	str	r3, [sp, #16]
 8015a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a16:	4829      	ldr	r0, [pc, #164]	; (8015abc <_vfiprintf_r+0x224>)
 8015a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a1c:	2206      	movs	r2, #6
 8015a1e:	f7ea fbf7 	bl	8000210 <memchr>
 8015a22:	2800      	cmp	r0, #0
 8015a24:	d03f      	beq.n	8015aa6 <_vfiprintf_r+0x20e>
 8015a26:	4b26      	ldr	r3, [pc, #152]	; (8015ac0 <_vfiprintf_r+0x228>)
 8015a28:	bb1b      	cbnz	r3, 8015a72 <_vfiprintf_r+0x1da>
 8015a2a:	9b03      	ldr	r3, [sp, #12]
 8015a2c:	3307      	adds	r3, #7
 8015a2e:	f023 0307 	bic.w	r3, r3, #7
 8015a32:	3308      	adds	r3, #8
 8015a34:	9303      	str	r3, [sp, #12]
 8015a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a38:	443b      	add	r3, r7
 8015a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8015a3c:	e768      	b.n	8015910 <_vfiprintf_r+0x78>
 8015a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a42:	460c      	mov	r4, r1
 8015a44:	2001      	movs	r0, #1
 8015a46:	e7a6      	b.n	8015996 <_vfiprintf_r+0xfe>
 8015a48:	2300      	movs	r3, #0
 8015a4a:	3401      	adds	r4, #1
 8015a4c:	9305      	str	r3, [sp, #20]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	f04f 0c0a 	mov.w	ip, #10
 8015a54:	4620      	mov	r0, r4
 8015a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a5a:	3a30      	subs	r2, #48	; 0x30
 8015a5c:	2a09      	cmp	r2, #9
 8015a5e:	d903      	bls.n	8015a68 <_vfiprintf_r+0x1d0>
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d0c6      	beq.n	80159f2 <_vfiprintf_r+0x15a>
 8015a64:	9105      	str	r1, [sp, #20]
 8015a66:	e7c4      	b.n	80159f2 <_vfiprintf_r+0x15a>
 8015a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a6c:	4604      	mov	r4, r0
 8015a6e:	2301      	movs	r3, #1
 8015a70:	e7f0      	b.n	8015a54 <_vfiprintf_r+0x1bc>
 8015a72:	ab03      	add	r3, sp, #12
 8015a74:	9300      	str	r3, [sp, #0]
 8015a76:	462a      	mov	r2, r5
 8015a78:	4b12      	ldr	r3, [pc, #72]	; (8015ac4 <_vfiprintf_r+0x22c>)
 8015a7a:	a904      	add	r1, sp, #16
 8015a7c:	4630      	mov	r0, r6
 8015a7e:	f3af 8000 	nop.w
 8015a82:	4607      	mov	r7, r0
 8015a84:	1c78      	adds	r0, r7, #1
 8015a86:	d1d6      	bne.n	8015a36 <_vfiprintf_r+0x19e>
 8015a88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a8a:	07d9      	lsls	r1, r3, #31
 8015a8c:	d405      	bmi.n	8015a9a <_vfiprintf_r+0x202>
 8015a8e:	89ab      	ldrh	r3, [r5, #12]
 8015a90:	059a      	lsls	r2, r3, #22
 8015a92:	d402      	bmi.n	8015a9a <_vfiprintf_r+0x202>
 8015a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a96:	f7ff fce7 	bl	8015468 <__retarget_lock_release_recursive>
 8015a9a:	89ab      	ldrh	r3, [r5, #12]
 8015a9c:	065b      	lsls	r3, r3, #25
 8015a9e:	f53f af1d 	bmi.w	80158dc <_vfiprintf_r+0x44>
 8015aa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015aa4:	e71c      	b.n	80158e0 <_vfiprintf_r+0x48>
 8015aa6:	ab03      	add	r3, sp, #12
 8015aa8:	9300      	str	r3, [sp, #0]
 8015aaa:	462a      	mov	r2, r5
 8015aac:	4b05      	ldr	r3, [pc, #20]	; (8015ac4 <_vfiprintf_r+0x22c>)
 8015aae:	a904      	add	r1, sp, #16
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	f000 f879 	bl	8015ba8 <_printf_i>
 8015ab6:	e7e4      	b.n	8015a82 <_vfiprintf_r+0x1ea>
 8015ab8:	080171ca 	.word	0x080171ca
 8015abc:	080171d4 	.word	0x080171d4
 8015ac0:	00000000 	.word	0x00000000
 8015ac4:	08015873 	.word	0x08015873
 8015ac8:	080171d0 	.word	0x080171d0

08015acc <_printf_common>:
 8015acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ad0:	4616      	mov	r6, r2
 8015ad2:	4699      	mov	r9, r3
 8015ad4:	688a      	ldr	r2, [r1, #8]
 8015ad6:	690b      	ldr	r3, [r1, #16]
 8015ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015adc:	4293      	cmp	r3, r2
 8015ade:	bfb8      	it	lt
 8015ae0:	4613      	movlt	r3, r2
 8015ae2:	6033      	str	r3, [r6, #0]
 8015ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ae8:	4607      	mov	r7, r0
 8015aea:	460c      	mov	r4, r1
 8015aec:	b10a      	cbz	r2, 8015af2 <_printf_common+0x26>
 8015aee:	3301      	adds	r3, #1
 8015af0:	6033      	str	r3, [r6, #0]
 8015af2:	6823      	ldr	r3, [r4, #0]
 8015af4:	0699      	lsls	r1, r3, #26
 8015af6:	bf42      	ittt	mi
 8015af8:	6833      	ldrmi	r3, [r6, #0]
 8015afa:	3302      	addmi	r3, #2
 8015afc:	6033      	strmi	r3, [r6, #0]
 8015afe:	6825      	ldr	r5, [r4, #0]
 8015b00:	f015 0506 	ands.w	r5, r5, #6
 8015b04:	d106      	bne.n	8015b14 <_printf_common+0x48>
 8015b06:	f104 0a19 	add.w	sl, r4, #25
 8015b0a:	68e3      	ldr	r3, [r4, #12]
 8015b0c:	6832      	ldr	r2, [r6, #0]
 8015b0e:	1a9b      	subs	r3, r3, r2
 8015b10:	42ab      	cmp	r3, r5
 8015b12:	dc26      	bgt.n	8015b62 <_printf_common+0x96>
 8015b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015b18:	1e13      	subs	r3, r2, #0
 8015b1a:	6822      	ldr	r2, [r4, #0]
 8015b1c:	bf18      	it	ne
 8015b1e:	2301      	movne	r3, #1
 8015b20:	0692      	lsls	r2, r2, #26
 8015b22:	d42b      	bmi.n	8015b7c <_printf_common+0xb0>
 8015b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b28:	4649      	mov	r1, r9
 8015b2a:	4638      	mov	r0, r7
 8015b2c:	47c0      	blx	r8
 8015b2e:	3001      	adds	r0, #1
 8015b30:	d01e      	beq.n	8015b70 <_printf_common+0xa4>
 8015b32:	6823      	ldr	r3, [r4, #0]
 8015b34:	6922      	ldr	r2, [r4, #16]
 8015b36:	f003 0306 	and.w	r3, r3, #6
 8015b3a:	2b04      	cmp	r3, #4
 8015b3c:	bf02      	ittt	eq
 8015b3e:	68e5      	ldreq	r5, [r4, #12]
 8015b40:	6833      	ldreq	r3, [r6, #0]
 8015b42:	1aed      	subeq	r5, r5, r3
 8015b44:	68a3      	ldr	r3, [r4, #8]
 8015b46:	bf0c      	ite	eq
 8015b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b4c:	2500      	movne	r5, #0
 8015b4e:	4293      	cmp	r3, r2
 8015b50:	bfc4      	itt	gt
 8015b52:	1a9b      	subgt	r3, r3, r2
 8015b54:	18ed      	addgt	r5, r5, r3
 8015b56:	2600      	movs	r6, #0
 8015b58:	341a      	adds	r4, #26
 8015b5a:	42b5      	cmp	r5, r6
 8015b5c:	d11a      	bne.n	8015b94 <_printf_common+0xc8>
 8015b5e:	2000      	movs	r0, #0
 8015b60:	e008      	b.n	8015b74 <_printf_common+0xa8>
 8015b62:	2301      	movs	r3, #1
 8015b64:	4652      	mov	r2, sl
 8015b66:	4649      	mov	r1, r9
 8015b68:	4638      	mov	r0, r7
 8015b6a:	47c0      	blx	r8
 8015b6c:	3001      	adds	r0, #1
 8015b6e:	d103      	bne.n	8015b78 <_printf_common+0xac>
 8015b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b78:	3501      	adds	r5, #1
 8015b7a:	e7c6      	b.n	8015b0a <_printf_common+0x3e>
 8015b7c:	18e1      	adds	r1, r4, r3
 8015b7e:	1c5a      	adds	r2, r3, #1
 8015b80:	2030      	movs	r0, #48	; 0x30
 8015b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b86:	4422      	add	r2, r4
 8015b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b90:	3302      	adds	r3, #2
 8015b92:	e7c7      	b.n	8015b24 <_printf_common+0x58>
 8015b94:	2301      	movs	r3, #1
 8015b96:	4622      	mov	r2, r4
 8015b98:	4649      	mov	r1, r9
 8015b9a:	4638      	mov	r0, r7
 8015b9c:	47c0      	blx	r8
 8015b9e:	3001      	adds	r0, #1
 8015ba0:	d0e6      	beq.n	8015b70 <_printf_common+0xa4>
 8015ba2:	3601      	adds	r6, #1
 8015ba4:	e7d9      	b.n	8015b5a <_printf_common+0x8e>
	...

08015ba8 <_printf_i>:
 8015ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015bac:	7e0f      	ldrb	r7, [r1, #24]
 8015bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015bb0:	2f78      	cmp	r7, #120	; 0x78
 8015bb2:	4691      	mov	r9, r2
 8015bb4:	4680      	mov	r8, r0
 8015bb6:	460c      	mov	r4, r1
 8015bb8:	469a      	mov	sl, r3
 8015bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015bbe:	d807      	bhi.n	8015bd0 <_printf_i+0x28>
 8015bc0:	2f62      	cmp	r7, #98	; 0x62
 8015bc2:	d80a      	bhi.n	8015bda <_printf_i+0x32>
 8015bc4:	2f00      	cmp	r7, #0
 8015bc6:	f000 80d4 	beq.w	8015d72 <_printf_i+0x1ca>
 8015bca:	2f58      	cmp	r7, #88	; 0x58
 8015bcc:	f000 80c0 	beq.w	8015d50 <_printf_i+0x1a8>
 8015bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015bd8:	e03a      	b.n	8015c50 <_printf_i+0xa8>
 8015bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015bde:	2b15      	cmp	r3, #21
 8015be0:	d8f6      	bhi.n	8015bd0 <_printf_i+0x28>
 8015be2:	a101      	add	r1, pc, #4	; (adr r1, 8015be8 <_printf_i+0x40>)
 8015be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015be8:	08015c41 	.word	0x08015c41
 8015bec:	08015c55 	.word	0x08015c55
 8015bf0:	08015bd1 	.word	0x08015bd1
 8015bf4:	08015bd1 	.word	0x08015bd1
 8015bf8:	08015bd1 	.word	0x08015bd1
 8015bfc:	08015bd1 	.word	0x08015bd1
 8015c00:	08015c55 	.word	0x08015c55
 8015c04:	08015bd1 	.word	0x08015bd1
 8015c08:	08015bd1 	.word	0x08015bd1
 8015c0c:	08015bd1 	.word	0x08015bd1
 8015c10:	08015bd1 	.word	0x08015bd1
 8015c14:	08015d59 	.word	0x08015d59
 8015c18:	08015c81 	.word	0x08015c81
 8015c1c:	08015d13 	.word	0x08015d13
 8015c20:	08015bd1 	.word	0x08015bd1
 8015c24:	08015bd1 	.word	0x08015bd1
 8015c28:	08015d7b 	.word	0x08015d7b
 8015c2c:	08015bd1 	.word	0x08015bd1
 8015c30:	08015c81 	.word	0x08015c81
 8015c34:	08015bd1 	.word	0x08015bd1
 8015c38:	08015bd1 	.word	0x08015bd1
 8015c3c:	08015d1b 	.word	0x08015d1b
 8015c40:	682b      	ldr	r3, [r5, #0]
 8015c42:	1d1a      	adds	r2, r3, #4
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	602a      	str	r2, [r5, #0]
 8015c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c50:	2301      	movs	r3, #1
 8015c52:	e09f      	b.n	8015d94 <_printf_i+0x1ec>
 8015c54:	6820      	ldr	r0, [r4, #0]
 8015c56:	682b      	ldr	r3, [r5, #0]
 8015c58:	0607      	lsls	r7, r0, #24
 8015c5a:	f103 0104 	add.w	r1, r3, #4
 8015c5e:	6029      	str	r1, [r5, #0]
 8015c60:	d501      	bpl.n	8015c66 <_printf_i+0xbe>
 8015c62:	681e      	ldr	r6, [r3, #0]
 8015c64:	e003      	b.n	8015c6e <_printf_i+0xc6>
 8015c66:	0646      	lsls	r6, r0, #25
 8015c68:	d5fb      	bpl.n	8015c62 <_printf_i+0xba>
 8015c6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015c6e:	2e00      	cmp	r6, #0
 8015c70:	da03      	bge.n	8015c7a <_printf_i+0xd2>
 8015c72:	232d      	movs	r3, #45	; 0x2d
 8015c74:	4276      	negs	r6, r6
 8015c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c7a:	485a      	ldr	r0, [pc, #360]	; (8015de4 <_printf_i+0x23c>)
 8015c7c:	230a      	movs	r3, #10
 8015c7e:	e012      	b.n	8015ca6 <_printf_i+0xfe>
 8015c80:	682b      	ldr	r3, [r5, #0]
 8015c82:	6820      	ldr	r0, [r4, #0]
 8015c84:	1d19      	adds	r1, r3, #4
 8015c86:	6029      	str	r1, [r5, #0]
 8015c88:	0605      	lsls	r5, r0, #24
 8015c8a:	d501      	bpl.n	8015c90 <_printf_i+0xe8>
 8015c8c:	681e      	ldr	r6, [r3, #0]
 8015c8e:	e002      	b.n	8015c96 <_printf_i+0xee>
 8015c90:	0641      	lsls	r1, r0, #25
 8015c92:	d5fb      	bpl.n	8015c8c <_printf_i+0xe4>
 8015c94:	881e      	ldrh	r6, [r3, #0]
 8015c96:	4853      	ldr	r0, [pc, #332]	; (8015de4 <_printf_i+0x23c>)
 8015c98:	2f6f      	cmp	r7, #111	; 0x6f
 8015c9a:	bf0c      	ite	eq
 8015c9c:	2308      	moveq	r3, #8
 8015c9e:	230a      	movne	r3, #10
 8015ca0:	2100      	movs	r1, #0
 8015ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015ca6:	6865      	ldr	r5, [r4, #4]
 8015ca8:	60a5      	str	r5, [r4, #8]
 8015caa:	2d00      	cmp	r5, #0
 8015cac:	bfa2      	ittt	ge
 8015cae:	6821      	ldrge	r1, [r4, #0]
 8015cb0:	f021 0104 	bicge.w	r1, r1, #4
 8015cb4:	6021      	strge	r1, [r4, #0]
 8015cb6:	b90e      	cbnz	r6, 8015cbc <_printf_i+0x114>
 8015cb8:	2d00      	cmp	r5, #0
 8015cba:	d04b      	beq.n	8015d54 <_printf_i+0x1ac>
 8015cbc:	4615      	mov	r5, r2
 8015cbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8015cc2:	fb03 6711 	mls	r7, r3, r1, r6
 8015cc6:	5dc7      	ldrb	r7, [r0, r7]
 8015cc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015ccc:	4637      	mov	r7, r6
 8015cce:	42bb      	cmp	r3, r7
 8015cd0:	460e      	mov	r6, r1
 8015cd2:	d9f4      	bls.n	8015cbe <_printf_i+0x116>
 8015cd4:	2b08      	cmp	r3, #8
 8015cd6:	d10b      	bne.n	8015cf0 <_printf_i+0x148>
 8015cd8:	6823      	ldr	r3, [r4, #0]
 8015cda:	07de      	lsls	r6, r3, #31
 8015cdc:	d508      	bpl.n	8015cf0 <_printf_i+0x148>
 8015cde:	6923      	ldr	r3, [r4, #16]
 8015ce0:	6861      	ldr	r1, [r4, #4]
 8015ce2:	4299      	cmp	r1, r3
 8015ce4:	bfde      	ittt	le
 8015ce6:	2330      	movle	r3, #48	; 0x30
 8015ce8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015cec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015cf0:	1b52      	subs	r2, r2, r5
 8015cf2:	6122      	str	r2, [r4, #16]
 8015cf4:	f8cd a000 	str.w	sl, [sp]
 8015cf8:	464b      	mov	r3, r9
 8015cfa:	aa03      	add	r2, sp, #12
 8015cfc:	4621      	mov	r1, r4
 8015cfe:	4640      	mov	r0, r8
 8015d00:	f7ff fee4 	bl	8015acc <_printf_common>
 8015d04:	3001      	adds	r0, #1
 8015d06:	d14a      	bne.n	8015d9e <_printf_i+0x1f6>
 8015d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d0c:	b004      	add	sp, #16
 8015d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d12:	6823      	ldr	r3, [r4, #0]
 8015d14:	f043 0320 	orr.w	r3, r3, #32
 8015d18:	6023      	str	r3, [r4, #0]
 8015d1a:	4833      	ldr	r0, [pc, #204]	; (8015de8 <_printf_i+0x240>)
 8015d1c:	2778      	movs	r7, #120	; 0x78
 8015d1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015d22:	6823      	ldr	r3, [r4, #0]
 8015d24:	6829      	ldr	r1, [r5, #0]
 8015d26:	061f      	lsls	r7, r3, #24
 8015d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8015d2c:	d402      	bmi.n	8015d34 <_printf_i+0x18c>
 8015d2e:	065f      	lsls	r7, r3, #25
 8015d30:	bf48      	it	mi
 8015d32:	b2b6      	uxthmi	r6, r6
 8015d34:	07df      	lsls	r7, r3, #31
 8015d36:	bf48      	it	mi
 8015d38:	f043 0320 	orrmi.w	r3, r3, #32
 8015d3c:	6029      	str	r1, [r5, #0]
 8015d3e:	bf48      	it	mi
 8015d40:	6023      	strmi	r3, [r4, #0]
 8015d42:	b91e      	cbnz	r6, 8015d4c <_printf_i+0x1a4>
 8015d44:	6823      	ldr	r3, [r4, #0]
 8015d46:	f023 0320 	bic.w	r3, r3, #32
 8015d4a:	6023      	str	r3, [r4, #0]
 8015d4c:	2310      	movs	r3, #16
 8015d4e:	e7a7      	b.n	8015ca0 <_printf_i+0xf8>
 8015d50:	4824      	ldr	r0, [pc, #144]	; (8015de4 <_printf_i+0x23c>)
 8015d52:	e7e4      	b.n	8015d1e <_printf_i+0x176>
 8015d54:	4615      	mov	r5, r2
 8015d56:	e7bd      	b.n	8015cd4 <_printf_i+0x12c>
 8015d58:	682b      	ldr	r3, [r5, #0]
 8015d5a:	6826      	ldr	r6, [r4, #0]
 8015d5c:	6961      	ldr	r1, [r4, #20]
 8015d5e:	1d18      	adds	r0, r3, #4
 8015d60:	6028      	str	r0, [r5, #0]
 8015d62:	0635      	lsls	r5, r6, #24
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	d501      	bpl.n	8015d6c <_printf_i+0x1c4>
 8015d68:	6019      	str	r1, [r3, #0]
 8015d6a:	e002      	b.n	8015d72 <_printf_i+0x1ca>
 8015d6c:	0670      	lsls	r0, r6, #25
 8015d6e:	d5fb      	bpl.n	8015d68 <_printf_i+0x1c0>
 8015d70:	8019      	strh	r1, [r3, #0]
 8015d72:	2300      	movs	r3, #0
 8015d74:	6123      	str	r3, [r4, #16]
 8015d76:	4615      	mov	r5, r2
 8015d78:	e7bc      	b.n	8015cf4 <_printf_i+0x14c>
 8015d7a:	682b      	ldr	r3, [r5, #0]
 8015d7c:	1d1a      	adds	r2, r3, #4
 8015d7e:	602a      	str	r2, [r5, #0]
 8015d80:	681d      	ldr	r5, [r3, #0]
 8015d82:	6862      	ldr	r2, [r4, #4]
 8015d84:	2100      	movs	r1, #0
 8015d86:	4628      	mov	r0, r5
 8015d88:	f7ea fa42 	bl	8000210 <memchr>
 8015d8c:	b108      	cbz	r0, 8015d92 <_printf_i+0x1ea>
 8015d8e:	1b40      	subs	r0, r0, r5
 8015d90:	6060      	str	r0, [r4, #4]
 8015d92:	6863      	ldr	r3, [r4, #4]
 8015d94:	6123      	str	r3, [r4, #16]
 8015d96:	2300      	movs	r3, #0
 8015d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d9c:	e7aa      	b.n	8015cf4 <_printf_i+0x14c>
 8015d9e:	6923      	ldr	r3, [r4, #16]
 8015da0:	462a      	mov	r2, r5
 8015da2:	4649      	mov	r1, r9
 8015da4:	4640      	mov	r0, r8
 8015da6:	47d0      	blx	sl
 8015da8:	3001      	adds	r0, #1
 8015daa:	d0ad      	beq.n	8015d08 <_printf_i+0x160>
 8015dac:	6823      	ldr	r3, [r4, #0]
 8015dae:	079b      	lsls	r3, r3, #30
 8015db0:	d413      	bmi.n	8015dda <_printf_i+0x232>
 8015db2:	68e0      	ldr	r0, [r4, #12]
 8015db4:	9b03      	ldr	r3, [sp, #12]
 8015db6:	4298      	cmp	r0, r3
 8015db8:	bfb8      	it	lt
 8015dba:	4618      	movlt	r0, r3
 8015dbc:	e7a6      	b.n	8015d0c <_printf_i+0x164>
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	4632      	mov	r2, r6
 8015dc2:	4649      	mov	r1, r9
 8015dc4:	4640      	mov	r0, r8
 8015dc6:	47d0      	blx	sl
 8015dc8:	3001      	adds	r0, #1
 8015dca:	d09d      	beq.n	8015d08 <_printf_i+0x160>
 8015dcc:	3501      	adds	r5, #1
 8015dce:	68e3      	ldr	r3, [r4, #12]
 8015dd0:	9903      	ldr	r1, [sp, #12]
 8015dd2:	1a5b      	subs	r3, r3, r1
 8015dd4:	42ab      	cmp	r3, r5
 8015dd6:	dcf2      	bgt.n	8015dbe <_printf_i+0x216>
 8015dd8:	e7eb      	b.n	8015db2 <_printf_i+0x20a>
 8015dda:	2500      	movs	r5, #0
 8015ddc:	f104 0619 	add.w	r6, r4, #25
 8015de0:	e7f5      	b.n	8015dce <_printf_i+0x226>
 8015de2:	bf00      	nop
 8015de4:	080171db 	.word	0x080171db
 8015de8:	080171ec 	.word	0x080171ec

08015dec <__sflush_r>:
 8015dec:	898a      	ldrh	r2, [r1, #12]
 8015dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015df2:	4605      	mov	r5, r0
 8015df4:	0710      	lsls	r0, r2, #28
 8015df6:	460c      	mov	r4, r1
 8015df8:	d458      	bmi.n	8015eac <__sflush_r+0xc0>
 8015dfa:	684b      	ldr	r3, [r1, #4]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	dc05      	bgt.n	8015e0c <__sflush_r+0x20>
 8015e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	dc02      	bgt.n	8015e0c <__sflush_r+0x20>
 8015e06:	2000      	movs	r0, #0
 8015e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e0e:	2e00      	cmp	r6, #0
 8015e10:	d0f9      	beq.n	8015e06 <__sflush_r+0x1a>
 8015e12:	2300      	movs	r3, #0
 8015e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015e18:	682f      	ldr	r7, [r5, #0]
 8015e1a:	6a21      	ldr	r1, [r4, #32]
 8015e1c:	602b      	str	r3, [r5, #0]
 8015e1e:	d032      	beq.n	8015e86 <__sflush_r+0x9a>
 8015e20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015e22:	89a3      	ldrh	r3, [r4, #12]
 8015e24:	075a      	lsls	r2, r3, #29
 8015e26:	d505      	bpl.n	8015e34 <__sflush_r+0x48>
 8015e28:	6863      	ldr	r3, [r4, #4]
 8015e2a:	1ac0      	subs	r0, r0, r3
 8015e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e2e:	b10b      	cbz	r3, 8015e34 <__sflush_r+0x48>
 8015e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015e32:	1ac0      	subs	r0, r0, r3
 8015e34:	2300      	movs	r3, #0
 8015e36:	4602      	mov	r2, r0
 8015e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e3a:	6a21      	ldr	r1, [r4, #32]
 8015e3c:	4628      	mov	r0, r5
 8015e3e:	47b0      	blx	r6
 8015e40:	1c43      	adds	r3, r0, #1
 8015e42:	89a3      	ldrh	r3, [r4, #12]
 8015e44:	d106      	bne.n	8015e54 <__sflush_r+0x68>
 8015e46:	6829      	ldr	r1, [r5, #0]
 8015e48:	291d      	cmp	r1, #29
 8015e4a:	d82b      	bhi.n	8015ea4 <__sflush_r+0xb8>
 8015e4c:	4a29      	ldr	r2, [pc, #164]	; (8015ef4 <__sflush_r+0x108>)
 8015e4e:	410a      	asrs	r2, r1
 8015e50:	07d6      	lsls	r6, r2, #31
 8015e52:	d427      	bmi.n	8015ea4 <__sflush_r+0xb8>
 8015e54:	2200      	movs	r2, #0
 8015e56:	6062      	str	r2, [r4, #4]
 8015e58:	04d9      	lsls	r1, r3, #19
 8015e5a:	6922      	ldr	r2, [r4, #16]
 8015e5c:	6022      	str	r2, [r4, #0]
 8015e5e:	d504      	bpl.n	8015e6a <__sflush_r+0x7e>
 8015e60:	1c42      	adds	r2, r0, #1
 8015e62:	d101      	bne.n	8015e68 <__sflush_r+0x7c>
 8015e64:	682b      	ldr	r3, [r5, #0]
 8015e66:	b903      	cbnz	r3, 8015e6a <__sflush_r+0x7e>
 8015e68:	6560      	str	r0, [r4, #84]	; 0x54
 8015e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e6c:	602f      	str	r7, [r5, #0]
 8015e6e:	2900      	cmp	r1, #0
 8015e70:	d0c9      	beq.n	8015e06 <__sflush_r+0x1a>
 8015e72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e76:	4299      	cmp	r1, r3
 8015e78:	d002      	beq.n	8015e80 <__sflush_r+0x94>
 8015e7a:	4628      	mov	r0, r5
 8015e7c:	f7ff fb36 	bl	80154ec <_free_r>
 8015e80:	2000      	movs	r0, #0
 8015e82:	6360      	str	r0, [r4, #52]	; 0x34
 8015e84:	e7c0      	b.n	8015e08 <__sflush_r+0x1c>
 8015e86:	2301      	movs	r3, #1
 8015e88:	4628      	mov	r0, r5
 8015e8a:	47b0      	blx	r6
 8015e8c:	1c41      	adds	r1, r0, #1
 8015e8e:	d1c8      	bne.n	8015e22 <__sflush_r+0x36>
 8015e90:	682b      	ldr	r3, [r5, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d0c5      	beq.n	8015e22 <__sflush_r+0x36>
 8015e96:	2b1d      	cmp	r3, #29
 8015e98:	d001      	beq.n	8015e9e <__sflush_r+0xb2>
 8015e9a:	2b16      	cmp	r3, #22
 8015e9c:	d101      	bne.n	8015ea2 <__sflush_r+0xb6>
 8015e9e:	602f      	str	r7, [r5, #0]
 8015ea0:	e7b1      	b.n	8015e06 <__sflush_r+0x1a>
 8015ea2:	89a3      	ldrh	r3, [r4, #12]
 8015ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ea8:	81a3      	strh	r3, [r4, #12]
 8015eaa:	e7ad      	b.n	8015e08 <__sflush_r+0x1c>
 8015eac:	690f      	ldr	r7, [r1, #16]
 8015eae:	2f00      	cmp	r7, #0
 8015eb0:	d0a9      	beq.n	8015e06 <__sflush_r+0x1a>
 8015eb2:	0793      	lsls	r3, r2, #30
 8015eb4:	680e      	ldr	r6, [r1, #0]
 8015eb6:	bf08      	it	eq
 8015eb8:	694b      	ldreq	r3, [r1, #20]
 8015eba:	600f      	str	r7, [r1, #0]
 8015ebc:	bf18      	it	ne
 8015ebe:	2300      	movne	r3, #0
 8015ec0:	eba6 0807 	sub.w	r8, r6, r7
 8015ec4:	608b      	str	r3, [r1, #8]
 8015ec6:	f1b8 0f00 	cmp.w	r8, #0
 8015eca:	dd9c      	ble.n	8015e06 <__sflush_r+0x1a>
 8015ecc:	6a21      	ldr	r1, [r4, #32]
 8015ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ed0:	4643      	mov	r3, r8
 8015ed2:	463a      	mov	r2, r7
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	47b0      	blx	r6
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	dc06      	bgt.n	8015eea <__sflush_r+0xfe>
 8015edc:	89a3      	ldrh	r3, [r4, #12]
 8015ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ee2:	81a3      	strh	r3, [r4, #12]
 8015ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ee8:	e78e      	b.n	8015e08 <__sflush_r+0x1c>
 8015eea:	4407      	add	r7, r0
 8015eec:	eba8 0800 	sub.w	r8, r8, r0
 8015ef0:	e7e9      	b.n	8015ec6 <__sflush_r+0xda>
 8015ef2:	bf00      	nop
 8015ef4:	dfbffffe 	.word	0xdfbffffe

08015ef8 <_fflush_r>:
 8015ef8:	b538      	push	{r3, r4, r5, lr}
 8015efa:	690b      	ldr	r3, [r1, #16]
 8015efc:	4605      	mov	r5, r0
 8015efe:	460c      	mov	r4, r1
 8015f00:	b913      	cbnz	r3, 8015f08 <_fflush_r+0x10>
 8015f02:	2500      	movs	r5, #0
 8015f04:	4628      	mov	r0, r5
 8015f06:	bd38      	pop	{r3, r4, r5, pc}
 8015f08:	b118      	cbz	r0, 8015f12 <_fflush_r+0x1a>
 8015f0a:	6a03      	ldr	r3, [r0, #32]
 8015f0c:	b90b      	cbnz	r3, 8015f12 <_fflush_r+0x1a>
 8015f0e:	f7fe ffd9 	bl	8014ec4 <__sinit>
 8015f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d0f3      	beq.n	8015f02 <_fflush_r+0xa>
 8015f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015f1c:	07d0      	lsls	r0, r2, #31
 8015f1e:	d404      	bmi.n	8015f2a <_fflush_r+0x32>
 8015f20:	0599      	lsls	r1, r3, #22
 8015f22:	d402      	bmi.n	8015f2a <_fflush_r+0x32>
 8015f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f26:	f7ff fa9e 	bl	8015466 <__retarget_lock_acquire_recursive>
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	4621      	mov	r1, r4
 8015f2e:	f7ff ff5d 	bl	8015dec <__sflush_r>
 8015f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f34:	07da      	lsls	r2, r3, #31
 8015f36:	4605      	mov	r5, r0
 8015f38:	d4e4      	bmi.n	8015f04 <_fflush_r+0xc>
 8015f3a:	89a3      	ldrh	r3, [r4, #12]
 8015f3c:	059b      	lsls	r3, r3, #22
 8015f3e:	d4e1      	bmi.n	8015f04 <_fflush_r+0xc>
 8015f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f42:	f7ff fa91 	bl	8015468 <__retarget_lock_release_recursive>
 8015f46:	e7dd      	b.n	8015f04 <_fflush_r+0xc>

08015f48 <fiprintf>:
 8015f48:	b40e      	push	{r1, r2, r3}
 8015f4a:	b503      	push	{r0, r1, lr}
 8015f4c:	4601      	mov	r1, r0
 8015f4e:	ab03      	add	r3, sp, #12
 8015f50:	4805      	ldr	r0, [pc, #20]	; (8015f68 <fiprintf+0x20>)
 8015f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f56:	6800      	ldr	r0, [r0, #0]
 8015f58:	9301      	str	r3, [sp, #4]
 8015f5a:	f7ff fc9d 	bl	8015898 <_vfiprintf_r>
 8015f5e:	b002      	add	sp, #8
 8015f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f64:	b003      	add	sp, #12
 8015f66:	4770      	bx	lr
 8015f68:	200002b4 	.word	0x200002b4

08015f6c <__swhatbuf_r>:
 8015f6c:	b570      	push	{r4, r5, r6, lr}
 8015f6e:	460c      	mov	r4, r1
 8015f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f74:	2900      	cmp	r1, #0
 8015f76:	b096      	sub	sp, #88	; 0x58
 8015f78:	4615      	mov	r5, r2
 8015f7a:	461e      	mov	r6, r3
 8015f7c:	da0d      	bge.n	8015f9a <__swhatbuf_r+0x2e>
 8015f7e:	89a3      	ldrh	r3, [r4, #12]
 8015f80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015f84:	f04f 0100 	mov.w	r1, #0
 8015f88:	bf0c      	ite	eq
 8015f8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015f8e:	2340      	movne	r3, #64	; 0x40
 8015f90:	2000      	movs	r0, #0
 8015f92:	6031      	str	r1, [r6, #0]
 8015f94:	602b      	str	r3, [r5, #0]
 8015f96:	b016      	add	sp, #88	; 0x58
 8015f98:	bd70      	pop	{r4, r5, r6, pc}
 8015f9a:	466a      	mov	r2, sp
 8015f9c:	f000 f848 	bl	8016030 <_fstat_r>
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	dbec      	blt.n	8015f7e <__swhatbuf_r+0x12>
 8015fa4:	9901      	ldr	r1, [sp, #4]
 8015fa6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015faa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015fae:	4259      	negs	r1, r3
 8015fb0:	4159      	adcs	r1, r3
 8015fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015fb6:	e7eb      	b.n	8015f90 <__swhatbuf_r+0x24>

08015fb8 <__smakebuf_r>:
 8015fb8:	898b      	ldrh	r3, [r1, #12]
 8015fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015fbc:	079d      	lsls	r5, r3, #30
 8015fbe:	4606      	mov	r6, r0
 8015fc0:	460c      	mov	r4, r1
 8015fc2:	d507      	bpl.n	8015fd4 <__smakebuf_r+0x1c>
 8015fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015fc8:	6023      	str	r3, [r4, #0]
 8015fca:	6123      	str	r3, [r4, #16]
 8015fcc:	2301      	movs	r3, #1
 8015fce:	6163      	str	r3, [r4, #20]
 8015fd0:	b002      	add	sp, #8
 8015fd2:	bd70      	pop	{r4, r5, r6, pc}
 8015fd4:	ab01      	add	r3, sp, #4
 8015fd6:	466a      	mov	r2, sp
 8015fd8:	f7ff ffc8 	bl	8015f6c <__swhatbuf_r>
 8015fdc:	9900      	ldr	r1, [sp, #0]
 8015fde:	4605      	mov	r5, r0
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	f7fe fd37 	bl	8014a54 <_malloc_r>
 8015fe6:	b948      	cbnz	r0, 8015ffc <__smakebuf_r+0x44>
 8015fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fec:	059a      	lsls	r2, r3, #22
 8015fee:	d4ef      	bmi.n	8015fd0 <__smakebuf_r+0x18>
 8015ff0:	f023 0303 	bic.w	r3, r3, #3
 8015ff4:	f043 0302 	orr.w	r3, r3, #2
 8015ff8:	81a3      	strh	r3, [r4, #12]
 8015ffa:	e7e3      	b.n	8015fc4 <__smakebuf_r+0xc>
 8015ffc:	89a3      	ldrh	r3, [r4, #12]
 8015ffe:	6020      	str	r0, [r4, #0]
 8016000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016004:	81a3      	strh	r3, [r4, #12]
 8016006:	9b00      	ldr	r3, [sp, #0]
 8016008:	6163      	str	r3, [r4, #20]
 801600a:	9b01      	ldr	r3, [sp, #4]
 801600c:	6120      	str	r0, [r4, #16]
 801600e:	b15b      	cbz	r3, 8016028 <__smakebuf_r+0x70>
 8016010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016014:	4630      	mov	r0, r6
 8016016:	f000 f81d 	bl	8016054 <_isatty_r>
 801601a:	b128      	cbz	r0, 8016028 <__smakebuf_r+0x70>
 801601c:	89a3      	ldrh	r3, [r4, #12]
 801601e:	f023 0303 	bic.w	r3, r3, #3
 8016022:	f043 0301 	orr.w	r3, r3, #1
 8016026:	81a3      	strh	r3, [r4, #12]
 8016028:	89a3      	ldrh	r3, [r4, #12]
 801602a:	431d      	orrs	r5, r3
 801602c:	81a5      	strh	r5, [r4, #12]
 801602e:	e7cf      	b.n	8015fd0 <__smakebuf_r+0x18>

08016030 <_fstat_r>:
 8016030:	b538      	push	{r3, r4, r5, lr}
 8016032:	4d07      	ldr	r5, [pc, #28]	; (8016050 <_fstat_r+0x20>)
 8016034:	2300      	movs	r3, #0
 8016036:	4604      	mov	r4, r0
 8016038:	4608      	mov	r0, r1
 801603a:	4611      	mov	r1, r2
 801603c:	602b      	str	r3, [r5, #0]
 801603e:	f7eb fc1a 	bl	8001876 <_fstat>
 8016042:	1c43      	adds	r3, r0, #1
 8016044:	d102      	bne.n	801604c <_fstat_r+0x1c>
 8016046:	682b      	ldr	r3, [r5, #0]
 8016048:	b103      	cbz	r3, 801604c <_fstat_r+0x1c>
 801604a:	6023      	str	r3, [r4, #0]
 801604c:	bd38      	pop	{r3, r4, r5, pc}
 801604e:	bf00      	nop
 8016050:	2000de70 	.word	0x2000de70

08016054 <_isatty_r>:
 8016054:	b538      	push	{r3, r4, r5, lr}
 8016056:	4d06      	ldr	r5, [pc, #24]	; (8016070 <_isatty_r+0x1c>)
 8016058:	2300      	movs	r3, #0
 801605a:	4604      	mov	r4, r0
 801605c:	4608      	mov	r0, r1
 801605e:	602b      	str	r3, [r5, #0]
 8016060:	f7eb fc19 	bl	8001896 <_isatty>
 8016064:	1c43      	adds	r3, r0, #1
 8016066:	d102      	bne.n	801606e <_isatty_r+0x1a>
 8016068:	682b      	ldr	r3, [r5, #0]
 801606a:	b103      	cbz	r3, 801606e <_isatty_r+0x1a>
 801606c:	6023      	str	r3, [r4, #0]
 801606e:	bd38      	pop	{r3, r4, r5, pc}
 8016070:	2000de70 	.word	0x2000de70

08016074 <abort>:
 8016074:	b508      	push	{r3, lr}
 8016076:	2006      	movs	r0, #6
 8016078:	f000 f82c 	bl	80160d4 <raise>
 801607c:	2001      	movs	r0, #1
 801607e:	f7eb fbab 	bl	80017d8 <_exit>

08016082 <_raise_r>:
 8016082:	291f      	cmp	r1, #31
 8016084:	b538      	push	{r3, r4, r5, lr}
 8016086:	4604      	mov	r4, r0
 8016088:	460d      	mov	r5, r1
 801608a:	d904      	bls.n	8016096 <_raise_r+0x14>
 801608c:	2316      	movs	r3, #22
 801608e:	6003      	str	r3, [r0, #0]
 8016090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016094:	bd38      	pop	{r3, r4, r5, pc}
 8016096:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016098:	b112      	cbz	r2, 80160a0 <_raise_r+0x1e>
 801609a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801609e:	b94b      	cbnz	r3, 80160b4 <_raise_r+0x32>
 80160a0:	4620      	mov	r0, r4
 80160a2:	f000 f831 	bl	8016108 <_getpid_r>
 80160a6:	462a      	mov	r2, r5
 80160a8:	4601      	mov	r1, r0
 80160aa:	4620      	mov	r0, r4
 80160ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160b0:	f000 b818 	b.w	80160e4 <_kill_r>
 80160b4:	2b01      	cmp	r3, #1
 80160b6:	d00a      	beq.n	80160ce <_raise_r+0x4c>
 80160b8:	1c59      	adds	r1, r3, #1
 80160ba:	d103      	bne.n	80160c4 <_raise_r+0x42>
 80160bc:	2316      	movs	r3, #22
 80160be:	6003      	str	r3, [r0, #0]
 80160c0:	2001      	movs	r0, #1
 80160c2:	e7e7      	b.n	8016094 <_raise_r+0x12>
 80160c4:	2400      	movs	r4, #0
 80160c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80160ca:	4628      	mov	r0, r5
 80160cc:	4798      	blx	r3
 80160ce:	2000      	movs	r0, #0
 80160d0:	e7e0      	b.n	8016094 <_raise_r+0x12>
	...

080160d4 <raise>:
 80160d4:	4b02      	ldr	r3, [pc, #8]	; (80160e0 <raise+0xc>)
 80160d6:	4601      	mov	r1, r0
 80160d8:	6818      	ldr	r0, [r3, #0]
 80160da:	f7ff bfd2 	b.w	8016082 <_raise_r>
 80160de:	bf00      	nop
 80160e0:	200002b4 	.word	0x200002b4

080160e4 <_kill_r>:
 80160e4:	b538      	push	{r3, r4, r5, lr}
 80160e6:	4d07      	ldr	r5, [pc, #28]	; (8016104 <_kill_r+0x20>)
 80160e8:	2300      	movs	r3, #0
 80160ea:	4604      	mov	r4, r0
 80160ec:	4608      	mov	r0, r1
 80160ee:	4611      	mov	r1, r2
 80160f0:	602b      	str	r3, [r5, #0]
 80160f2:	f7eb fb61 	bl	80017b8 <_kill>
 80160f6:	1c43      	adds	r3, r0, #1
 80160f8:	d102      	bne.n	8016100 <_kill_r+0x1c>
 80160fa:	682b      	ldr	r3, [r5, #0]
 80160fc:	b103      	cbz	r3, 8016100 <_kill_r+0x1c>
 80160fe:	6023      	str	r3, [r4, #0]
 8016100:	bd38      	pop	{r3, r4, r5, pc}
 8016102:	bf00      	nop
 8016104:	2000de70 	.word	0x2000de70

08016108 <_getpid_r>:
 8016108:	f7eb bb4e 	b.w	80017a8 <_getpid>

0801610c <_init>:
 801610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801610e:	bf00      	nop
 8016110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016112:	bc08      	pop	{r3}
 8016114:	469e      	mov	lr, r3
 8016116:	4770      	bx	lr

08016118 <_fini>:
 8016118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801611a:	bf00      	nop
 801611c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801611e:	bc08      	pop	{r3}
 8016120:	469e      	mov	lr, r3
 8016122:	4770      	bx	lr
