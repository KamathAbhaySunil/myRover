
uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd4  08012e18  08012e18  00013e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013aec  08013aec  00015234  2**0
                  CONTENTS
  4 .ARM          00000008  08013aec  08013aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013af4  08013af4  00015234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013af4  08013af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013afc  08013afc  00014afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  08013b00  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db68  20000238  08013d34  00015238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dda0  08013d34  00015da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d57  00000000  00000000  00015264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b6e  00000000  00000000  0002efbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00032b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001100  00000000  00000000  00034128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008870  00000000  00000000  00035228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b85  00000000  00000000  0003da98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4534  00000000  00000000  0005761d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  000fbb51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be8  00000000  00000000  000fbbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001027b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012dfc 	.word	0x08012dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08012dfc 	.word	0x08012dfc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_ldivmod>:
 8000b9c:	b97b      	cbnz	r3, 8000bbe <__aeabi_ldivmod+0x22>
 8000b9e:	b972      	cbnz	r2, 8000bbe <__aeabi_ldivmod+0x22>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bfbe      	ittt	lt
 8000ba4:	2000      	movlt	r0, #0
 8000ba6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000baa:	e006      	blt.n	8000bba <__aeabi_ldivmod+0x1e>
 8000bac:	bf08      	it	eq
 8000bae:	2800      	cmpeq	r0, #0
 8000bb0:	bf1c      	itt	ne
 8000bb2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bb6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bba:	f000 b9b5 	b.w	8000f28 <__aeabi_idiv0>
 8000bbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	db09      	blt.n	8000bde <__aeabi_ldivmod+0x42>
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db1a      	blt.n	8000c04 <__aeabi_ldivmod+0x68>
 8000bce:	f000 f84d 	bl	8000c6c <__udivmoddi4>
 8000bd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bda:	b004      	add	sp, #16
 8000bdc:	4770      	bx	lr
 8000bde:	4240      	negs	r0, r0
 8000be0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db1b      	blt.n	8000c20 <__aeabi_ldivmod+0x84>
 8000be8:	f000 f840 	bl	8000c6c <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c02:	4770      	bx	lr
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	f000 f82f 	bl	8000c6c <__udivmoddi4>
 8000c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c16:	b004      	add	sp, #16
 8000c18:	4240      	negs	r0, r0
 8000c1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f821 	bl	8000c6c <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4252      	negs	r2, r2
 8000c36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c50:	f000 b96a 	b.w	8000f28 <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9d08      	ldr	r5, [sp, #32]
 8000c72:	460c      	mov	r4, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14e      	bne.n	8000d16 <__udivmoddi4+0xaa>
 8000c78:	4694      	mov	ip, r2
 8000c7a:	458c      	cmp	ip, r1
 8000c7c:	4686      	mov	lr, r0
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	d962      	bls.n	8000d4a <__udivmoddi4+0xde>
 8000c84:	b14a      	cbz	r2, 8000c9a <__udivmoddi4+0x2e>
 8000c86:	f1c2 0320 	rsb	r3, r2, #32
 8000c8a:	4091      	lsls	r1, r2
 8000c8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	4319      	orrs	r1, r3
 8000c96:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9e:	fa1f f68c 	uxth.w	r6, ip
 8000ca2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000caa:	fb07 1114 	mls	r1, r7, r4, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb04 f106 	mul.w	r1, r4, r6
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x64>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cc2:	f080 8112 	bcs.w	8000eea <__udivmoddi4+0x27e>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 810f 	bls.w	8000eea <__udivmoddi4+0x27e>
 8000ccc:	3c02      	subs	r4, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	fa1f f38e 	uxth.w	r3, lr
 8000cd6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cda:	fb07 1110 	mls	r1, r7, r0, r1
 8000cde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce2:	fb00 f606 	mul.w	r6, r0, r6
 8000ce6:	429e      	cmp	r6, r3
 8000ce8:	d90a      	bls.n	8000d00 <__udivmoddi4+0x94>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cf2:	f080 80fc 	bcs.w	8000eee <__udivmoddi4+0x282>
 8000cf6:	429e      	cmp	r6, r3
 8000cf8:	f240 80f9 	bls.w	8000eee <__udivmoddi4+0x282>
 8000cfc:	4463      	add	r3, ip
 8000cfe:	3802      	subs	r0, #2
 8000d00:	1b9b      	subs	r3, r3, r6
 8000d02:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d06:	2100      	movs	r1, #0
 8000d08:	b11d      	cbz	r5, 8000d12 <__udivmoddi4+0xa6>
 8000d0a:	40d3      	lsrs	r3, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d905      	bls.n	8000d26 <__udivmoddi4+0xba>
 8000d1a:	b10d      	cbz	r5, 8000d20 <__udivmoddi4+0xb4>
 8000d1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d20:	2100      	movs	r1, #0
 8000d22:	4608      	mov	r0, r1
 8000d24:	e7f5      	b.n	8000d12 <__udivmoddi4+0xa6>
 8000d26:	fab3 f183 	clz	r1, r3
 8000d2a:	2900      	cmp	r1, #0
 8000d2c:	d146      	bne.n	8000dbc <__udivmoddi4+0x150>
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xcc>
 8000d32:	4290      	cmp	r0, r2
 8000d34:	f0c0 80f0 	bcc.w	8000f18 <__udivmoddi4+0x2ac>
 8000d38:	1a86      	subs	r6, r0, r2
 8000d3a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	2d00      	cmp	r5, #0
 8000d42:	d0e6      	beq.n	8000d12 <__udivmoddi4+0xa6>
 8000d44:	e9c5 6300 	strd	r6, r3, [r5]
 8000d48:	e7e3      	b.n	8000d12 <__udivmoddi4+0xa6>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	f040 8090 	bne.w	8000e70 <__udivmoddi4+0x204>
 8000d50:	eba1 040c 	sub.w	r4, r1, ip
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa1f f78c 	uxth.w	r7, ip
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb08 4416 	mls	r4, r8, r6, r4
 8000d6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6e:	fb07 f006 	mul.w	r0, r7, r6
 8000d72:	4298      	cmp	r0, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x11c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x11a>
 8000d80:	4298      	cmp	r0, r3
 8000d82:	f200 80cd 	bhi.w	8000f20 <__udivmoddi4+0x2b4>
 8000d86:	4626      	mov	r6, r4
 8000d88:	1a1c      	subs	r4, r3, r0
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d92:	fb08 4410 	mls	r4, r8, r0, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb00 f707 	mul.w	r7, r0, r7
 8000d9e:	429f      	cmp	r7, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x148>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x146>
 8000dac:	429f      	cmp	r7, r3
 8000dae:	f200 80b0 	bhi.w	8000f12 <__udivmoddi4+0x2a6>
 8000db2:	4620      	mov	r0, r4
 8000db4:	1bdb      	subs	r3, r3, r7
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0x9c>
 8000dbc:	f1c1 0620 	rsb	r6, r1, #32
 8000dc0:	408b      	lsls	r3, r1
 8000dc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dcc:	fa04 f301 	lsl.w	r3, r4, r1
 8000dd0:	ea43 030c 	orr.w	r3, r3, ip
 8000dd4:	40f4      	lsrs	r4, r6
 8000dd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dda:	0c38      	lsrs	r0, r7, #16
 8000ddc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000de0:	fbb4 fef0 	udiv	lr, r4, r0
 8000de4:	fa1f fc87 	uxth.w	ip, r7
 8000de8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df0:	fb0e f90c 	mul.w	r9, lr, ip
 8000df4:	45a1      	cmp	r9, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	d90a      	bls.n	8000e12 <__udivmoddi4+0x1a6>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e02:	f080 8084 	bcs.w	8000f0e <__udivmoddi4+0x2a2>
 8000e06:	45a1      	cmp	r9, r4
 8000e08:	f240 8081 	bls.w	8000f0e <__udivmoddi4+0x2a2>
 8000e0c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e10:	443c      	add	r4, r7
 8000e12:	eba4 0409 	sub.w	r4, r4, r9
 8000e16:	fa1f f983 	uxth.w	r9, r3
 8000e1a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e26:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e2a:	45a4      	cmp	ip, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x1d2>
 8000e2e:	193c      	adds	r4, r7, r4
 8000e30:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e34:	d267      	bcs.n	8000f06 <__udivmoddi4+0x29a>
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d965      	bls.n	8000f06 <__udivmoddi4+0x29a>
 8000e3a:	3b02      	subs	r3, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e42:	fba0 9302 	umull	r9, r3, r0, r2
 8000e46:	eba4 040c 	sub.w	r4, r4, ip
 8000e4a:	429c      	cmp	r4, r3
 8000e4c:	46ce      	mov	lr, r9
 8000e4e:	469c      	mov	ip, r3
 8000e50:	d351      	bcc.n	8000ef6 <__udivmoddi4+0x28a>
 8000e52:	d04e      	beq.n	8000ef2 <__udivmoddi4+0x286>
 8000e54:	b155      	cbz	r5, 8000e6c <__udivmoddi4+0x200>
 8000e56:	ebb8 030e 	subs.w	r3, r8, lr
 8000e5a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431e      	orrs	r6, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	e9c5 6400 	strd	r6, r4, [r5]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e750      	b.n	8000d12 <__udivmoddi4+0xa6>
 8000e70:	f1c2 0320 	rsb	r3, r2, #32
 8000e74:	fa20 f103 	lsr.w	r1, r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e80:	4094      	lsls	r4, r2
 8000e82:	430c      	orrs	r4, r1
 8000e84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e88:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e8c:	fa1f f78c 	uxth.w	r7, ip
 8000e90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e94:	fb08 3110 	mls	r1, r8, r0, r3
 8000e98:	0c23      	lsrs	r3, r4, #16
 8000e9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9e:	fb00 f107 	mul.w	r1, r0, r7
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x24c>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eae:	d22c      	bcs.n	8000f0a <__udivmoddi4+0x29e>
 8000eb0:	4299      	cmp	r1, r3
 8000eb2:	d92a      	bls.n	8000f0a <__udivmoddi4+0x29e>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1a5b      	subs	r3, r3, r1
 8000eba:	b2a4      	uxth	r4, r4
 8000ebc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ec0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec8:	fb01 f307 	mul.w	r3, r1, r7
 8000ecc:	42a3      	cmp	r3, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x276>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ed8:	d213      	bcs.n	8000f02 <__udivmoddi4+0x296>
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	d911      	bls.n	8000f02 <__udivmoddi4+0x296>
 8000ede:	3902      	subs	r1, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	1ae4      	subs	r4, r4, r3
 8000ee4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee8:	e739      	b.n	8000d5e <__udivmoddi4+0xf2>
 8000eea:	4604      	mov	r4, r0
 8000eec:	e6f0      	b.n	8000cd0 <__udivmoddi4+0x64>
 8000eee:	4608      	mov	r0, r1
 8000ef0:	e706      	b.n	8000d00 <__udivmoddi4+0x94>
 8000ef2:	45c8      	cmp	r8, r9
 8000ef4:	d2ae      	bcs.n	8000e54 <__udivmoddi4+0x1e8>
 8000ef6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000efa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efe:	3801      	subs	r0, #1
 8000f00:	e7a8      	b.n	8000e54 <__udivmoddi4+0x1e8>
 8000f02:	4631      	mov	r1, r6
 8000f04:	e7ed      	b.n	8000ee2 <__udivmoddi4+0x276>
 8000f06:	4603      	mov	r3, r0
 8000f08:	e799      	b.n	8000e3e <__udivmoddi4+0x1d2>
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	e7d4      	b.n	8000eb8 <__udivmoddi4+0x24c>
 8000f0e:	46d6      	mov	lr, sl
 8000f10:	e77f      	b.n	8000e12 <__udivmoddi4+0x1a6>
 8000f12:	4463      	add	r3, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e74d      	b.n	8000db4 <__udivmoddi4+0x148>
 8000f18:	4606      	mov	r6, r0
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e70f      	b.n	8000d40 <__udivmoddi4+0xd4>
 8000f20:	3e02      	subs	r6, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	e730      	b.n	8000d88 <__udivmoddi4+0x11c>
 8000f26:	bf00      	nop

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f38:	f005 ff16 	bl	8006d68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80010a8 <pvPortMallocMicroROS+0x17c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f44:	f000 f986 	bl	8001254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f48:	4b58      	ldr	r3, [pc, #352]	@ (80010ac <pvPortMallocMicroROS+0x180>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f040 8090 	bne.w	8001076 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d01e      	beq.n	8000f9a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d015      	beq.n	8000f9a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f023 0307 	bic.w	r3, r3, #7
 8000f74:	3308      	adds	r3, #8
 8000f76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f86:	f383 8811 	msr	BASEPRI, r3
 8000f8a:	f3bf 8f6f 	isb	sy
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	e7fd      	b.n	8000f96 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d06a      	beq.n	8001076 <pvPortMallocMicroROS+0x14a>
 8000fa0:	4b43      	ldr	r3, [pc, #268]	@ (80010b0 <pvPortMallocMicroROS+0x184>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d865      	bhi.n	8001076 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000faa:	4b42      	ldr	r3, [pc, #264]	@ (80010b4 <pvPortMallocMicroROS+0x188>)
 8000fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000fae:	4b41      	ldr	r3, [pc, #260]	@ (80010b4 <pvPortMallocMicroROS+0x188>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fb4:	e004      	b.n	8000fc0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d903      	bls.n	8000fd2 <pvPortMallocMicroROS+0xa6>
 8000fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f1      	bne.n	8000fb6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000fd2:	4b35      	ldr	r3, [pc, #212]	@ (80010a8 <pvPortMallocMicroROS+0x17c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d04c      	beq.n	8001076 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	4413      	add	r3, r2
 8000fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1ad2      	subs	r2, r2, r3
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d920      	bls.n	8001040 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00b      	beq.n	8001028 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	613b      	str	r3, [r7, #16]
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1ad2      	subs	r2, r2, r3
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800103a:	69b8      	ldr	r0, [r7, #24]
 800103c:	f000 f96c 	bl	8001318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <pvPortMallocMicroROS+0x184>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a19      	ldr	r2, [pc, #100]	@ (80010b0 <pvPortMallocMicroROS+0x184>)
 800104c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800104e:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <pvPortMallocMicroROS+0x184>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <pvPortMallocMicroROS+0x18c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d203      	bcs.n	8001062 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <pvPortMallocMicroROS+0x184>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a16      	ldr	r2, [pc, #88]	@ (80010b8 <pvPortMallocMicroROS+0x18c>)
 8001060:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <pvPortMallocMicroROS+0x180>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	431a      	orrs	r2, r3
 800106c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001076:	f005 fe85 	bl	8006d84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00b      	beq.n	800109c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	f3bf 8f6f 	isb	sy
 8001090:	f3bf 8f4f 	dsb	sy
 8001094:	60fb      	str	r3, [r7, #12]
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800109c:	69fb      	ldr	r3, [r7, #28]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3728      	adds	r7, #40	@ 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20003e5c 	.word	0x20003e5c
 80010ac:	20003e68 	.word	0x20003e68
 80010b0:	20003e60 	.word	0x20003e60
 80010b4:	20003e54 	.word	0x20003e54
 80010b8:	20003e64 	.word	0x20003e64

080010bc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d04a      	beq.n	8001164 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80010ce:	2308      	movs	r3, #8
 80010d0:	425b      	negs	r3, r3
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4413      	add	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <vPortFreeMicroROS+0xb0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10b      	bne.n	8001102 <vPortFreeMicroROS+0x46>
	__asm volatile
 80010ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010ee:	f383 8811 	msr	BASEPRI, r3
 80010f2:	f3bf 8f6f 	isb	sy
 80010f6:	f3bf 8f4f 	dsb	sy
 80010fa:	60fb      	str	r3, [r7, #12]
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	e7fd      	b.n	80010fe <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <vPortFreeMicroROS+0x66>
	__asm volatile
 800110a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800110e:	f383 8811 	msr	BASEPRI, r3
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	f3bf 8f4f 	dsb	sy
 800111a:	60bb      	str	r3, [r7, #8]
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	e7fd      	b.n	800111e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <vPortFreeMicroROS+0xb0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d019      	beq.n	8001164 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d115      	bne.n	8001164 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <vPortFreeMicroROS+0xb0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001148:	f005 fe0e 	bl	8006d68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <vPortFreeMicroROS+0xb4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <vPortFreeMicroROS+0xb4>)
 8001158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800115a:	6938      	ldr	r0, [r7, #16]
 800115c:	f000 f8dc 	bl	8001318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001160:	f005 fe10 	bl	8006d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20003e68 	.word	0x20003e68
 8001170:	20003e60 	.word	0x20003e60

08001174 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001180:	2308      	movs	r3, #8
 8001182:	425b      	negs	r3, r3
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4413      	add	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <getBlockSize+0x38>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	43db      	mvns	r3, r3
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]

	return count;
 800119c:	68fb      	ldr	r3, [r7, #12]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20003e68 	.word	0x20003e68

080011b0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80011ba:	f005 fdd5 	bl	8006d68 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80011be:	6838      	ldr	r0, [r7, #0]
 80011c0:	f7ff feb4 	bl	8000f2c <pvPortMallocMicroROS>
 80011c4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d017      	beq.n	80011fc <pvPortReallocMicroROS+0x4c>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d014      	beq.n	80011fc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffce 	bl	8001174 <getBlockSize>
 80011d8:	4603      	mov	r3, r0
 80011da:	2208      	movs	r2, #8
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d201      	bcs.n	80011ec <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	68b8      	ldr	r0, [r7, #8]
 80011f2:	f010 ff2e 	bl	8012052 <memcpy>

		vPortFreeMicroROS(pv);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff60 	bl	80010bc <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80011fc:	f005 fdc2 	bl	8006d84 <xTaskResumeAll>

	return newmem;
 8001200:	68bb      	ldr	r3, [r7, #8]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001214:	f005 fda8 	bl	8006d68 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff fe82 	bl	8000f2c <pvPortMallocMicroROS>
 8001228:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800122e:	e004      	b.n	800123a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	613a      	str	r2, [r7, #16]
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	617a      	str	r2, [r7, #20]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f5      	bne.n	8001230 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001244:	f005 fd9e 	bl	8006d84 <xTaskResumeAll>
  	return mem;
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800125a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800125e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001260:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <prvHeapInit+0xac>)
 8001262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00c      	beq.n	8001288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3307      	adds	r3, #7
 8001272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f023 0307 	bic.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	4a1f      	ldr	r2, [pc, #124]	@ (8001300 <prvHeapInit+0xac>)
 8001284:	4413      	add	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800128c:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <prvHeapInit+0xb0>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001292:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <prvHeapInit+0xb0>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012a0:	2208      	movs	r2, #8
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f023 0307 	bic.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4a15      	ldr	r2, [pc, #84]	@ (8001308 <prvHeapInit+0xb4>)
 80012b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <prvHeapInit+0xb4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <prvHeapInit+0xb4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	1ad2      	subs	r2, r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <prvHeapInit+0xb4>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <prvHeapInit+0xb8>)
 80012e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4a09      	ldr	r2, [pc, #36]	@ (8001310 <prvHeapInit+0xbc>)
 80012ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <prvHeapInit+0xc0>)
 80012ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	20000254 	.word	0x20000254
 8001304:	20003e54 	.word	0x20003e54
 8001308:	20003e5c 	.word	0x20003e5c
 800130c:	20003e64 	.word	0x20003e64
 8001310:	20003e60 	.word	0x20003e60
 8001314:	20003e68 	.word	0x20003e68

08001318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001320:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <prvInsertBlockIntoFreeList+0xac>)
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e002      	b.n	800132c <prvInsertBlockIntoFreeList+0x14>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	d8f7      	bhi.n	8001326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	4413      	add	r3, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	d108      	bne.n	800135a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	441a      	add	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	441a      	add	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d118      	bne.n	80013a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <prvInsertBlockIntoFreeList+0xb0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d00d      	beq.n	8001396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	441a      	add	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e008      	b.n	80013a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <prvInsertBlockIntoFreeList+0xb0>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e003      	b.n	80013a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d002      	beq.n	80013b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20003e54 	.word	0x20003e54
 80013c8:	20003e5c 	.word	0x20003e5c
 80013cc:	00000000 	.word	0x00000000

080013d0 <cmd_vel_callback>:
/* USER CODE BEGIN 0 */

//IN THIS BLOCK WE WRITE CALLBACKS FOR MICROROS

void cmd_vel_callback(const void*msgin)											//defining the cmd_vel callback
{
 80013d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d4:	b088      	sub	sp, #32
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6178      	str	r0, [r7, #20]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist*)msgin;		//pointing the message type of /cmd_vel to msg
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	61fb      	str	r3, [r7, #28]

	leftWheelVelocity = msg->linear.x - msg->angular.z*length;					//defining the left wheel velocity using differential drive kinematics
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80013ea:	a39d      	add	r3, pc, #628	@ (adr r3, 8001660 <cmd_vel_callback+0x290>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f91a 	bl	8000628 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7fe ff5c 	bl	80002b8 <__aeabi_dsub>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	499c      	ldr	r1, [pc, #624]	@ (8001678 <cmd_vel_callback+0x2a8>)
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
	rightWheelVelocity = msg->linear.x + msg->angular.z*length;					//defining the right wheel velocity using differential drive kinematics
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001416:	a392      	add	r3, pc, #584	@ (adr r3, 8001660 <cmd_vel_callback+0x290>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f904 	bl	8000628 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4620      	mov	r0, r4
 8001426:	4629      	mov	r1, r5
 8001428:	f7fe ff48 	bl	80002bc <__adddf3>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4992      	ldr	r1, [pc, #584]	@ (800167c <cmd_vel_callback+0x2ac>)
 8001432:	e9c1 2300 	strd	r2, r3, [r1]

	leftWheelRPM = leftWheelVelocity*60/6.2831;                                /*left wheel velocity the unit is m/s so we multiply it by 60
 8001436:	4b90      	ldr	r3, [pc, #576]	@ (8001678 <cmd_vel_callback+0x2a8>)
 8001438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b8f      	ldr	r3, [pc, #572]	@ (8001680 <cmd_vel_callback+0x2b0>)
 8001442:	f7ff f8f1 	bl	8000628 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	a386      	add	r3, pc, #536	@ (adr r3, 8001668 <cmd_vel_callback+0x298>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff fa12 	bl	800087c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4989      	ldr	r1, [pc, #548]	@ (8001684 <cmd_vel_callback+0x2b4>)
 800145e:	e9c1 2300 	strd	r2, r3, [r1]
																					and divide by 2pi to get rpm*/
	rightWheelRPM = rightWheelVelocity*60/6.2831;								//same as what we did for the left wheel
 8001462:	4b86      	ldr	r3, [pc, #536]	@ (800167c <cmd_vel_callback+0x2ac>)
 8001464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4b84      	ldr	r3, [pc, #528]	@ (8001680 <cmd_vel_callback+0x2b0>)
 800146e:	f7ff f8db 	bl	8000628 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	a37b      	add	r3, pc, #492	@ (adr r3, 8001668 <cmd_vel_callback+0x298>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7ff f9fc 	bl	800087c <__aeabi_ddiv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	497f      	ldr	r1, [pc, #508]	@ (8001688 <cmd_vel_callback+0x2b8>)
 800148a:	e9c1 2300 	strd	r2, r3, [r1]
	//PWM2 Right motor PA6
	//PWM1 Right motor PA7
	//PWM2 Left motor PB1
	//PWM1 Left motor PB0

	if (leftWheelRPM >= 0 && leftWheelRPM <= 1000 && rightWheelRPM >= 0 && rightWheelRPM <= 1000){ //To move the bot front
 800148e:	4b7d      	ldr	r3, [pc, #500]	@ (8001684 <cmd_vel_callback+0x2b4>)
 8001490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	f7ff fb4a 	bl	8000b34 <__aeabi_dcmpge>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03c      	beq.n	8001520 <cmd_vel_callback+0x150>
 80014a6:	4b77      	ldr	r3, [pc, #476]	@ (8001684 <cmd_vel_callback+0x2b4>)
 80014a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b76      	ldr	r3, [pc, #472]	@ (800168c <cmd_vel_callback+0x2bc>)
 80014b2:	f7ff fb35 	bl	8000b20 <__aeabi_dcmple>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d031      	beq.n	8001520 <cmd_vel_callback+0x150>
 80014bc:	4b72      	ldr	r3, [pc, #456]	@ (8001688 <cmd_vel_callback+0x2b8>)
 80014be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	f7ff fb33 	bl	8000b34 <__aeabi_dcmpge>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d025      	beq.n	8001520 <cmd_vel_callback+0x150>
 80014d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001688 <cmd_vel_callback+0x2b8>)
 80014d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	4b6b      	ldr	r3, [pc, #428]	@ (800168c <cmd_vel_callback+0x2bc>)
 80014e0:	f7ff fb1e 	bl	8000b20 <__aeabi_dcmple>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01a      	beq.n	8001520 <cmd_vel_callback+0x150>
		TIM3->CCR1 = leftWheelRPM;
 80014ea:	4b66      	ldr	r3, [pc, #408]	@ (8001684 <cmd_vel_callback+0x2b4>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	4c67      	ldr	r4, [pc, #412]	@ (8001690 <cmd_vel_callback+0x2c0>)
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fb31 	bl	8000b5c <__aeabi_d2uiz>
 80014fa:	4603      	mov	r3, r0
 80014fc:	6363      	str	r3, [r4, #52]	@ 0x34
		TIM3->CCR2 = 0;
 80014fe:	4b64      	ldr	r3, [pc, #400]	@ (8001690 <cmd_vel_callback+0x2c0>)
 8001500:	2200      	movs	r2, #0
 8001502:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = rightWheelRPM;
 8001504:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <cmd_vel_callback+0x2b8>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	4c61      	ldr	r4, [pc, #388]	@ (8001690 <cmd_vel_callback+0x2c0>)
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb24 	bl	8000b5c <__aeabi_d2uiz>
 8001514:	4603      	mov	r3, r0
 8001516:	63e3      	str	r3, [r4, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 8001518:	4b5d      	ldr	r3, [pc, #372]	@ (8001690 <cmd_vel_callback+0x2c0>)
 800151a:	2200      	movs	r2, #0
 800151c:	641a      	str	r2, [r3, #64]	@ 0x40
 800151e:	e112      	b.n	8001746 <cmd_vel_callback+0x376>
	}
	else if (leftWheelRPM <= 0 && leftWheelRPM >= -1000 && rightWheelRPM <= 0 && rightWheelRPM >= -1000){ //To move the bot back
 8001520:	4b58      	ldr	r3, [pc, #352]	@ (8001684 <cmd_vel_callback+0x2b4>)
 8001522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	f7ff faf7 	bl	8000b20 <__aeabi_dcmple>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d044      	beq.n	80015c2 <cmd_vel_callback+0x1f2>
 8001538:	4b52      	ldr	r3, [pc, #328]	@ (8001684 <cmd_vel_callback+0x2b4>)
 800153a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153e:	a34c      	add	r3, pc, #304	@ (adr r3, 8001670 <cmd_vel_callback+0x2a0>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff faf6 	bl	8000b34 <__aeabi_dcmpge>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d039      	beq.n	80015c2 <cmd_vel_callback+0x1f2>
 800154e:	4b4e      	ldr	r3, [pc, #312]	@ (8001688 <cmd_vel_callback+0x2b8>)
 8001550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f7ff fae0 	bl	8000b20 <__aeabi_dcmple>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d02d      	beq.n	80015c2 <cmd_vel_callback+0x1f2>
 8001566:	4b48      	ldr	r3, [pc, #288]	@ (8001688 <cmd_vel_callback+0x2b8>)
 8001568:	e9d3 0100 	ldrd	r0, r1, [r3]
 800156c:	a340      	add	r3, pc, #256	@ (adr r3, 8001670 <cmd_vel_callback+0x2a0>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff fadf 	bl	8000b34 <__aeabi_dcmpge>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d022      	beq.n	80015c2 <cmd_vel_callback+0x1f2>
		TIM3->CCR1 = 0;
 800157c:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <cmd_vel_callback+0x2c0>)
 800157e:	2200      	movs	r2, #0
 8001580:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = -leftWheelRPM;
 8001582:	4b40      	ldr	r3, [pc, #256]	@ (8001684 <cmd_vel_callback+0x2b4>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	60ba      	str	r2, [r7, #8]
 800158a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4c3f      	ldr	r4, [pc, #252]	@ (8001690 <cmd_vel_callback+0x2c0>)
 8001592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001596:	f7ff fae1 	bl	8000b5c <__aeabi_d2uiz>
 800159a:	4603      	mov	r3, r0
 800159c:	63a3      	str	r3, [r4, #56]	@ 0x38
		TIM3->CCR3 = 0;
 800159e:	4b3c      	ldr	r3, [pc, #240]	@ (8001690 <cmd_vel_callback+0x2c0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = -rightWheelRPM;
 80015a4:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <cmd_vel_callback+0x2b8>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	603a      	str	r2, [r7, #0]
 80015ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4c37      	ldr	r4, [pc, #220]	@ (8001690 <cmd_vel_callback+0x2c0>)
 80015b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b8:	f7ff fad0 	bl	8000b5c <__aeabi_d2uiz>
 80015bc:	4603      	mov	r3, r0
 80015be:	6423      	str	r3, [r4, #64]	@ 0x40
 80015c0:	e0c1      	b.n	8001746 <cmd_vel_callback+0x376>
	}
	else if (leftWheelRPM >= 0 && leftWheelRPM <= 1000 && rightWheelRPM <= 0 && rightWheelRPM >= -1000){ //To move the bot left
 80015c2:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <cmd_vel_callback+0x2b4>)
 80015c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	f7ff fab0 	bl	8000b34 <__aeabi_dcmpge>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d05c      	beq.n	8001694 <cmd_vel_callback+0x2c4>
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <cmd_vel_callback+0x2b4>)
 80015dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <cmd_vel_callback+0x2bc>)
 80015e6:	f7ff fa9b 	bl	8000b20 <__aeabi_dcmple>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d051      	beq.n	8001694 <cmd_vel_callback+0x2c4>
 80015f0:	4b25      	ldr	r3, [pc, #148]	@ (8001688 <cmd_vel_callback+0x2b8>)
 80015f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	f7ff fa8f 	bl	8000b20 <__aeabi_dcmple>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d045      	beq.n	8001694 <cmd_vel_callback+0x2c4>
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <cmd_vel_callback+0x2b8>)
 800160a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160e:	a318      	add	r3, pc, #96	@ (adr r3, 8001670 <cmd_vel_callback+0x2a0>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff fa8e 	bl	8000b34 <__aeabi_dcmpge>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d03a      	beq.n	8001694 <cmd_vel_callback+0x2c4>
		TIM3->CCR1 = 0;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <cmd_vel_callback+0x2c0>)
 8001620:	2200      	movs	r2, #0
 8001622:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = -leftWheelRPM;
 8001624:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <cmd_vel_callback+0x2b4>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	4692      	mov	sl, r2
 800162c:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001630:	4c17      	ldr	r4, [pc, #92]	@ (8001690 <cmd_vel_callback+0x2c0>)
 8001632:	4650      	mov	r0, sl
 8001634:	4659      	mov	r1, fp
 8001636:	f7ff fa91 	bl	8000b5c <__aeabi_d2uiz>
 800163a:	4603      	mov	r3, r0
 800163c:	63a3      	str	r3, [r4, #56]	@ 0x38
		TIM3->CCR3 = rightWheelRPM;
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <cmd_vel_callback+0x2b8>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	4c12      	ldr	r4, [pc, #72]	@ (8001690 <cmd_vel_callback+0x2c0>)
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa87 	bl	8000b5c <__aeabi_d2uiz>
 800164e:	4603      	mov	r3, r0
 8001650:	63e3      	str	r3, [r4, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <cmd_vel_callback+0x2c0>)
 8001654:	2200      	movs	r2, #0
 8001656:	641a      	str	r2, [r3, #64]	@ 0x40
 8001658:	e075      	b.n	8001746 <cmd_vel_callback+0x376>
 800165a:	bf00      	nop
 800165c:	f3af 8000 	nop.w
 8001660:	cccccccd 	.word	0xcccccccd
 8001664:	3fcccccc 	.word	0x3fcccccc
 8001668:	f765fd8b 	.word	0xf765fd8b
 800166c:	401921e4 	.word	0x401921e4
 8001670:	00000000 	.word	0x00000000
 8001674:	c08f4000 	.word	0xc08f4000
 8001678:	20003fc0 	.word	0x20003fc0
 800167c:	20003fc8 	.word	0x20003fc8
 8001680:	404e0000 	.word	0x404e0000
 8001684:	20003fd0 	.word	0x20003fd0
 8001688:	20003fd8 	.word	0x20003fd8
 800168c:	408f4000 	.word	0x408f4000
 8001690:	40000400 	.word	0x40000400
	}
	else if (leftWheelRPM <= 0 && leftWheelRPM >= -1000 && rightWheelRPM >= 0 && rightWheelRPM <= 1000){ //To move the bot right
 8001694:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <cmd_vel_callback+0x388>)
 8001696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	f7ff fa3d 	bl	8000b20 <__aeabi_dcmple>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d03f      	beq.n	800172c <cmd_vel_callback+0x35c>
 80016ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <cmd_vel_callback+0x388>)
 80016ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b2:	a327      	add	r3, pc, #156	@ (adr r3, 8001750 <cmd_vel_callback+0x380>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7ff fa3c 	bl	8000b34 <__aeabi_dcmpge>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d034      	beq.n	800172c <cmd_vel_callback+0x35c>
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <cmd_vel_callback+0x38c>)
 80016c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	f7ff fa30 	bl	8000b34 <__aeabi_dcmpge>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d028      	beq.n	800172c <cmd_vel_callback+0x35c>
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <cmd_vel_callback+0x38c>)
 80016dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <cmd_vel_callback+0x390>)
 80016e6:	f7ff fa1b 	bl	8000b20 <__aeabi_dcmple>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01d      	beq.n	800172c <cmd_vel_callback+0x35c>
		TIM3->CCR1 = leftWheelRPM;
 80016f0:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <cmd_vel_callback+0x388>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	4c1b      	ldr	r4, [pc, #108]	@ (8001764 <cmd_vel_callback+0x394>)
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa2e 	bl	8000b5c <__aeabi_d2uiz>
 8001700:	4603      	mov	r3, r0
 8001702:	6363      	str	r3, [r4, #52]	@ 0x34
		TIM3->CCR2 = 0;
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <cmd_vel_callback+0x394>)
 8001706:	2200      	movs	r2, #0
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <cmd_vel_callback+0x394>)
 800170c:	2200      	movs	r2, #0
 800170e:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = -rightWheelRPM;
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <cmd_vel_callback+0x38c>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	4690      	mov	r8, r2
 8001718:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800171c:	4c11      	ldr	r4, [pc, #68]	@ (8001764 <cmd_vel_callback+0x394>)
 800171e:	4640      	mov	r0, r8
 8001720:	4649      	mov	r1, r9
 8001722:	f7ff fa1b 	bl	8000b5c <__aeabi_d2uiz>
 8001726:	4603      	mov	r3, r0
 8001728:	6423      	str	r3, [r4, #64]	@ 0x40
 800172a:	e00c      	b.n	8001746 <cmd_vel_callback+0x376>
	}
	else{
		TIM3->CCR1 = 0;
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <cmd_vel_callback+0x394>)
 800172e:	2200      	movs	r2, #0
 8001730:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 0;
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <cmd_vel_callback+0x394>)
 8001734:	2200      	movs	r2, #0
 8001736:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <cmd_vel_callback+0x394>)
 800173a:	2200      	movs	r2, #0
 800173c:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <cmd_vel_callback+0x394>)
 8001740:	2200      	movs	r2, #0
 8001742:	641a      	str	r2, [r3, #64]	@ 0x40
	}

}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001750:	00000000 	.word	0x00000000
 8001754:	c08f4000 	.word	0xc08f4000
 8001758:	20003fd0 	.word	0x20003fd0
 800175c:	20003fd8 	.word	0x20003fd8
 8001760:	408f4000 	.word	0x408f4000
 8001764:	40000400 	.word	0x40000400

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176c:	f000 ff1e 	bl	80025ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001770:	f000 f82e 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001774:	f000 f960 	bl	8001a38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001778:	f000 f936 	bl	80019e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800177c:	f000 f90a 	bl	8001994 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001780:	f000 f88e 	bl	80018a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001784:	2100      	movs	r1, #0
 8001786:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <main+0x58>)
 8001788:	f002 fb1c 	bl	8003dc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800178c:	2104      	movs	r1, #4
 800178e:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <main+0x58>)
 8001790:	f002 fb18 	bl	8003dc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001794:	2108      	movs	r1, #8
 8001796:	480a      	ldr	r0, [pc, #40]	@ (80017c0 <main+0x58>)
 8001798:	f002 fb14 	bl	8003dc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800179c:	210c      	movs	r1, #12
 800179e:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <main+0x58>)
 80017a0:	f002 fb10 	bl	8003dc4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017a4:	f004 f9c2 	bl	8005b2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017a8:	4a06      	ldr	r2, [pc, #24]	@ (80017c4 <main+0x5c>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4806      	ldr	r0, [pc, #24]	@ (80017c8 <main+0x60>)
 80017ae:	f004 fa07 	bl	8005bc0 <osThreadNew>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <main+0x64>)
 80017b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017b8:	f004 f9dc 	bl	8005b74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <main+0x54>
 80017c0:	20003e6c 	.word	0x20003e6c
 80017c4:	08012e88 	.word	0x08012e88
 80017c8:	08001af9 	.word	0x08001af9
 80017cc:	20003fbc 	.word	0x20003fbc

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	@ 0x50
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	2230      	movs	r2, #48	@ 0x30
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f010 fb6e 	bl	8011ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <SystemClock_Config+0xc8>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	4a26      	ldr	r2, [pc, #152]	@ (8001898 <SystemClock_Config+0xc8>)
 80017fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	@ 0x40
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <SystemClock_Config+0xc8>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	4b21      	ldr	r3, [pc, #132]	@ (800189c <SystemClock_Config+0xcc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a20      	ldr	r2, [pc, #128]	@ (800189c <SystemClock_Config+0xcc>)
 800181a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <SystemClock_Config+0xcc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	2301      	movs	r3, #1
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001834:	2310      	movs	r3, #16
 8001836:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001838:	2302      	movs	r3, #2
 800183a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800183c:	2300      	movs	r3, #0
 800183e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001840:	2308      	movs	r3, #8
 8001842:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001844:	2364      	movs	r3, #100	@ 0x64
 8001846:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001848:	2302      	movs	r3, #2
 800184a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800184c:	2308      	movs	r3, #8
 800184e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fdcd 	bl	80033f4 <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001860:	f000 f9e2 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001868:	2302      	movs	r3, #2
 800186a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	2103      	movs	r1, #3
 8001880:	4618      	mov	r0, r3
 8001882:	f002 f82f 	bl	80038e4 <HAL_RCC_ClockConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800188c:	f000 f9cc 	bl	8001c28 <Error_Handler>
  }
}
 8001890:	bf00      	nop
 8001892:	3750      	adds	r7, #80	@ 0x50
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000

080018a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018c2:	4b32      	ldr	r3, [pc, #200]	@ (800198c <MX_TIM3_Init+0xec>)
 80018c4:	4a32      	ldr	r2, [pc, #200]	@ (8001990 <MX_TIM3_Init+0xf0>)
 80018c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018c8:	4b30      	ldr	r3, [pc, #192]	@ (800198c <MX_TIM3_Init+0xec>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <MX_TIM3_Init+0xec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018d4:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <MX_TIM3_Init+0xec>)
 80018d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018dc:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <MX_TIM3_Init+0xec>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <MX_TIM3_Init+0xec>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018e8:	4828      	ldr	r0, [pc, #160]	@ (800198c <MX_TIM3_Init+0xec>)
 80018ea:	f002 fa1b 	bl	8003d24 <HAL_TIM_PWM_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80018f4:	f000 f998 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	4619      	mov	r1, r3
 8001906:	4821      	ldr	r0, [pc, #132]	@ (800198c <MX_TIM3_Init+0xec>)
 8001908:	f002 fe0c 	bl	8004524 <HAL_TIMEx_MasterConfigSynchronization>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001912:	f000 f989 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001916:	2360      	movs	r3, #96	@ 0x60
 8001918:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	4619      	mov	r1, r3
 800192c:	4817      	ldr	r0, [pc, #92]	@ (800198c <MX_TIM3_Init+0xec>)
 800192e:	f002 faf9 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001938:	f000 f976 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2204      	movs	r2, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4812      	ldr	r0, [pc, #72]	@ (800198c <MX_TIM3_Init+0xec>)
 8001944:	f002 faee 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800194e:	f000 f96b 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2208      	movs	r2, #8
 8001956:	4619      	mov	r1, r3
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <MX_TIM3_Init+0xec>)
 800195a:	f002 fae3 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001964:	f000 f960 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	220c      	movs	r2, #12
 800196c:	4619      	mov	r1, r3
 800196e:	4807      	ldr	r0, [pc, #28]	@ (800198c <MX_TIM3_Init+0xec>)
 8001970:	f002 fad8 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800197a:	f000 f955 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800197e:	4803      	ldr	r0, [pc, #12]	@ (800198c <MX_TIM3_Init+0xec>)
 8001980:	f000 fb0c 	bl	8001f9c <HAL_TIM_MspPostInit>

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20003e6c 	.word	0x20003e6c
 8001990:	40000400 	.word	0x40000400

08001994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <MX_USART2_UART_Init+0x4c>)
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <MX_USART2_UART_Init+0x50>)
 800199c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019cc:	f002 fe18 	bl	8004600 <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019d6:	f000 f927 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20003eb4 	.word	0x20003eb4
 80019e4:	40004400 	.word	0x40004400

080019e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <MX_DMA_Init+0x4c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a34 <MX_DMA_Init+0x4c>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <MX_DMA_Init+0x4c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	2010      	movs	r0, #16
 8001a10:	f000 ff19 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a14:	2010      	movs	r0, #16
 8001a16:	f000 ff32 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	2011      	movs	r0, #17
 8001a20:	f000 ff11 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a24:	2011      	movs	r0, #17
 8001a26:	f000 ff2a 	bl	800287e <HAL_NVIC_EnableIRQ>

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a26      	ldr	r2, [pc, #152]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a1f      	ldr	r2, [pc, #124]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a18      	ldr	r2, [pc, #96]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a11      	ldr	r2, [pc, #68]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_GPIO_Init+0xb8>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|orange_Pin|red_Pin|blue_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001ac4:	480b      	ldr	r0, [pc, #44]	@ (8001af4 <MX_GPIO_Init+0xbc>)
 8001ac6:	f001 fc7b 	bl	80033c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : green_Pin orange_Pin red_Pin blue_Pin */
  GPIO_InitStruct.Pin = green_Pin|orange_Pin|red_Pin|blue_Pin;
 8001aca:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <MX_GPIO_Init+0xbc>)
 8001ae4:	f001 fae8 	bl	80030b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	@ 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b0d2      	sub	sp, #328	@ 0x148
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001b02:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b06:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration


	  rmw_uros_set_custom_transport(
 8001b08:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <StartDefaultTask+0xf8>)
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	4b39      	ldr	r3, [pc, #228]	@ (8001bf4 <StartDefaultTask+0xfc>)
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <StartDefaultTask+0x100>)
 8001b12:	4a3a      	ldr	r2, [pc, #232]	@ (8001bfc <StartDefaultTask+0x104>)
 8001b14:	493a      	ldr	r1, [pc, #232]	@ (8001c00 <StartDefaultTask+0x108>)
 8001b16:	2001      	movs	r0, #1
 8001b18:	f008 fad6 	bl	800a0c8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001b1c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001b20:	4618      	mov	r0, r3
 8001b22:	f008 fa07 	bl	8009f34 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001b26:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <StartDefaultTask+0x10c>)
 8001b28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001b2c:	4b36      	ldr	r3, [pc, #216]	@ (8001c08 <StartDefaultTask+0x110>)
 8001b2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001b32:	4b36      	ldr	r3, [pc, #216]	@ (8001c0c <StartDefaultTask+0x114>)
 8001b34:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001b38:	4b35      	ldr	r3, [pc, #212]	@ (8001c10 <StartDefaultTask+0x118>)
 8001b3a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001b3e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f008 fa04 	bl	8009f50 <rcutils_set_default_allocator>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f083 0301 	eor.w	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001b54:	f240 11df 	movw	r1, #479	@ 0x1df
 8001b58:	482e      	ldr	r0, [pc, #184]	@ (8001c14 <StartDefaultTask+0x11c>)
 8001b5a:	f010 f8d5 	bl	8011d08 <iprintf>

	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001b5e:	463b      	mov	r3, r7
 8001b60:	4618      	mov	r0, r3
 8001b62:	f008 fa13 	bl	8009f8c <rcutils_get_default_allocator>
 8001b66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001b6a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b6e:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8001b72:	461d      	mov	r5, r3
 8001b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001b7c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001b80:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	f008 f912 	bl	8009db0 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "microROS", "", &support);
 8001b8c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001b90:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001b94:	4a20      	ldr	r2, [pc, #128]	@ (8001c18 <StartDefaultTask+0x120>)
 8001b96:	4921      	ldr	r1, [pc, #132]	@ (8001c1c <StartDefaultTask+0x124>)
 8001b98:	f008 f954 	bl	8009e44 <rclc_node_init_default>
	  // create publisher



	  //create subscriber
	  rclc_subscription_init_default(
 8001b9c:	f006 fd6c 	bl	8008678 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001ba6:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8001baa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <StartDefaultTask+0x128>)
 8001bac:	f008 f986 	bl	8009ebc <rclc_subscription_init_default>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	    "cmd_vel");

	  //create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001bb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001bb4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 f827 	bl	8009c0c <rclc_executor_get_zero_initialized_executor>
	  rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001bbe:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001bc2:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001bc6:	f107 0020 	add.w	r0, r7, #32
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f008 f828 	bl	8009c20 <rclc_executor_init>
	  rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &cmd_vel_msg, &cmd_vel_callback, ON_NEW_DATA);
 8001bd0:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001bd4:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8001bd8:	f107 0020 	add.w	r0, r7, #32
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <StartDefaultTask+0x12c>)
 8001be2:	f008 f88d 	bl	8009d00 <rclc_executor_add_subscription>




  /* USER CODE END 5 */
}
 8001be6:	bf00      	nop
 8001be8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf0:	080024b1 	.word	0x080024b1
 8001bf4:	08002449 	.word	0x08002449
 8001bf8:	08002429 	.word	0x08002429
 8001bfc:	080023fd 	.word	0x080023fd
 8001c00:	20003eb4 	.word	0x20003eb4
 8001c04:	08001c35 	.word	0x08001c35
 8001c08:	08001c79 	.word	0x08001c79
 8001c0c:	08001cb1 	.word	0x08001cb1
 8001c10:	08001d1d 	.word	0x08001d1d
 8001c14:	08012e24 	.word	0x08012e24
 8001c18:	08012e4c 	.word	0x08012e4c
 8001c1c:	08012e50 	.word	0x08012e50
 8001c20:	08012e5c 	.word	0x08012e5c
 8001c24:	080013d1 	.word	0x080013d1

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <Error_Handler+0x8>

08001c34 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <microros_allocate+0x3c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <microros_allocate+0x3c>)
 8001c4c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <microros_allocate+0x40>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <microros_allocate+0x40>)
 8001c5c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff f964 	bl	8000f2c <pvPortMallocMicroROS>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20003fe0 	.word	0x20003fe0
 8001c74:	20003fe4 	.word	0x20003fe4

08001c78 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00c      	beq.n	8001ca2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fa73 	bl	8001174 <getBlockSize>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a06      	ldr	r2, [pc, #24]	@ (8001cac <microros_deallocate+0x34>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <microros_deallocate+0x34>)
 8001c9a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fa0d 	bl	80010bc <vPortFreeMicroROS>
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20003fe4 	.word	0x20003fe4

08001cb0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <microros_reallocate+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <microros_reallocate+0x64>)
 8001cca:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <microros_reallocate+0x68>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <microros_reallocate+0x68>)
 8001cda:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001ce2:	68b8      	ldr	r0, [r7, #8]
 8001ce4:	f7ff f922 	bl	8000f2c <pvPortMallocMicroROS>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	e00e      	b.n	8001d0a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fa41 	bl	8001174 <getBlockSize>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a08      	ldr	r2, [pc, #32]	@ (8001d18 <microros_reallocate+0x68>)
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <microros_reallocate+0x68>)
 8001cfe:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff fa54 	bl	80011b0 <pvPortReallocMicroROS>
 8001d08:	4603      	mov	r3, r0
  }
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20003fe0 	.word	0x20003fe0
 8001d18:	20003fe4 	.word	0x20003fe4

08001d1c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	4a0c      	ldr	r2, [pc, #48]	@ (8001d64 <microros_zero_allocate+0x48>)
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <microros_zero_allocate+0x48>)
 8001d3a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <microros_zero_allocate+0x4c>)
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <microros_zero_allocate+0x4c>)
 8001d4e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7ff fa59 	bl	800120a <pvPortCallocMicroROS>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20003fe0 	.word	0x20003fe0
 8001d68:	20003fe4 	.word	0x20003fe4
 8001d6c:	00000000 	.word	0x00000000

08001d70 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001d82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d86:	a320      	add	r3, pc, #128	@ (adr r3, 8001e08 <UTILS_NanosecondsToTimespec+0x98>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe ff06 	bl	8000b9c <__aeabi_ldivmod>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d9e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001e08 <UTILS_NanosecondsToTimespec+0x98>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fefa 	bl	8000b9c <__aeabi_ldivmod>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da20      	bge.n	8001df6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a11      	ldr	r2, [pc, #68]	@ (8001e00 <UTILS_NanosecondsToTimespec+0x90>)
 8001dba:	fb82 1203 	smull	r1, r2, r2, r3
 8001dbe:	1712      	asrs	r2, r2, #28
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	17c8      	asrs	r0, r1, #31
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	ebb2 0804 	subs.w	r8, r2, r4
 8001dda:	eb63 0905 	sbc.w	r9, r3, r5
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	4906      	ldr	r1, [pc, #24]	@ (8001e04 <UTILS_NanosecondsToTimespec+0x94>)
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	441a      	add	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]
    }
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e00:	44b82fa1 	.word	0x44b82fa1
 8001e04:	3b9aca00 	.word	0x3b9aca00
 8001e08:	3b9aca00 	.word	0x3b9aca00
 8001e0c:	00000000 	.word	0x00000000

08001e10 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e14:	b08e      	sub	sp, #56	@ 0x38
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e1a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001e1c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001e20:	2300      	movs	r3, #0
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001e32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e36:	4618      	mov	r0, r3
 8001e38:	f005 fa20 	bl	800727c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3e:	17da      	asrs	r2, r3, #31
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	61fa      	str	r2, [r7, #28]
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	000b      	movs	r3, r1
 8001e50:	2200      	movs	r2, #0
 8001e52:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	461c      	mov	r4, r3
 8001e5c:	4615      	mov	r5, r2
 8001e5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e62:	1911      	adds	r1, r2, r4
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	416b      	adcs	r3, r5
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e6e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001e72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	f04f 0400 	mov.w	r4, #0
 8001e7e:	f04f 0500 	mov.w	r5, #0
 8001e82:	015d      	lsls	r5, r3, #5
 8001e84:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e88:	0154      	lsls	r4, r2, #5
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	ebb2 0800 	subs.w	r8, r2, r0
 8001e92:	eb63 0901 	sbc.w	r9, r3, r1
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001ea2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001ea6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001eaa:	4690      	mov	r8, r2
 8001eac:	4699      	mov	r9, r3
 8001eae:	eb18 0a00 	adds.w	sl, r8, r0
 8001eb2:	eb49 0b01 	adc.w	fp, r9, r1
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ec2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ec6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eca:	ebb2 040a 	subs.w	r4, r2, sl
 8001ece:	603c      	str	r4, [r7, #0]
 8001ed0:	eb63 030b 	sbc.w	r3, r3, fp
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eda:	4623      	mov	r3, r4
 8001edc:	181b      	adds	r3, r3, r0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	eb41 0303 	adc.w	r3, r1, r3
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eee:	f7ff ff3f 	bl	8001d70 <UTILS_NanosecondsToTimespec>

    return 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3738      	adds	r7, #56	@ 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001f00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_MspInit+0x54>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4a11      	ldr	r2, [pc, #68]	@ (8001f54 <HAL_MspInit+0x54>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_MspInit+0x54>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_MspInit+0x54>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <HAL_MspInit+0x54>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <HAL_MspInit+0x54>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	210f      	movs	r1, #15
 8001f42:	f06f 0001 	mvn.w	r0, #1
 8001f46:	f000 fc7e 	bl	8002846 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800

08001f58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10d      	bne.n	8001f86 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_TIM_PWM_MspInit+0x40>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <HAL_TIM_PWM_MspInit+0x40>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <HAL_TIM_PWM_MspInit+0x40>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40023800 	.word	0x40023800

08001f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	@ 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a21      	ldr	r2, [pc, #132]	@ (8002040 <HAL_TIM_MspPostInit+0xa4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d13b      	bne.n	8002036 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <HAL_TIM_MspPostInit+0xa8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002044 <HAL_TIM_MspPostInit+0xa8>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <HAL_TIM_MspPostInit+0xa8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <HAL_TIM_MspPostInit+0xa8>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <HAL_TIM_MspPostInit+0xa8>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <HAL_TIM_MspPostInit+0xa8>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = LPWM1_Pin|LPWM2_Pin;
 8001ff6:	23c0      	movs	r3, #192	@ 0xc0
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002006:	2302      	movs	r3, #2
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	480d      	ldr	r0, [pc, #52]	@ (8002048 <HAL_TIM_MspPostInit+0xac>)
 8002012:	f001 f851 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RPWM1_Pin|RPWM2_Pin;
 8002016:	2303      	movs	r3, #3
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002026:	2302      	movs	r3, #2
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4806      	ldr	r0, [pc, #24]	@ (800204c <HAL_TIM_MspPostInit+0xb0>)
 8002032:	f001 f841 	bl	80030b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	@ 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40000400 	.word	0x40000400
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000
 800204c:	40020400 	.word	0x40020400

08002050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	@ 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a4d      	ldr	r2, [pc, #308]	@ (80021a4 <HAL_UART_MspInit+0x154>)
 800206e:	4293      	cmp	r3, r2
 8002070:	f040 8093 	bne.w	800219a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	4b4b      	ldr	r3, [pc, #300]	@ (80021a8 <HAL_UART_MspInit+0x158>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	4a4a      	ldr	r2, [pc, #296]	@ (80021a8 <HAL_UART_MspInit+0x158>)
 800207e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002082:	6413      	str	r3, [r2, #64]	@ 0x40
 8002084:	4b48      	ldr	r3, [pc, #288]	@ (80021a8 <HAL_UART_MspInit+0x158>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	4b44      	ldr	r3, [pc, #272]	@ (80021a8 <HAL_UART_MspInit+0x158>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	4a43      	ldr	r2, [pc, #268]	@ (80021a8 <HAL_UART_MspInit+0x158>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a0:	4b41      	ldr	r3, [pc, #260]	@ (80021a8 <HAL_UART_MspInit+0x158>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020ac:	230c      	movs	r3, #12
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020bc:	2307      	movs	r3, #7
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4839      	ldr	r0, [pc, #228]	@ (80021ac <HAL_UART_MspInit+0x15c>)
 80020c8:	f000 fff6 	bl	80030b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80020cc:	4b38      	ldr	r3, [pc, #224]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 80020ce:	4a39      	ldr	r2, [pc, #228]	@ (80021b4 <HAL_UART_MspInit+0x164>)
 80020d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80020d2:	4b37      	ldr	r3, [pc, #220]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 80020d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020da:	4b35      	ldr	r3, [pc, #212]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e0:	4b33      	ldr	r3, [pc, #204]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020e6:	4b32      	ldr	r3, [pc, #200]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 80020e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ee:	4b30      	ldr	r3, [pc, #192]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020f4:	4b2e      	ldr	r3, [pc, #184]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020fa:	4b2d      	ldr	r3, [pc, #180]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 80020fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002100:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002102:	4b2b      	ldr	r3, [pc, #172]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 8002104:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002108:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210a:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 800210c:	2200      	movs	r2, #0
 800210e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002110:	4827      	ldr	r0, [pc, #156]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 8002112:	f000 fbcf 	bl	80028b4 <HAL_DMA_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800211c:	f7ff fd84 	bl	8001c28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a23      	ldr	r2, [pc, #140]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 8002124:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002126:	4a22      	ldr	r2, [pc, #136]	@ (80021b0 <HAL_UART_MspInit+0x160>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800212c:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 800212e:	4a23      	ldr	r2, [pc, #140]	@ (80021bc <HAL_UART_MspInit+0x16c>)
 8002130:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002132:	4b21      	ldr	r3, [pc, #132]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 8002134:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002138:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800213a:	4b1f      	ldr	r3, [pc, #124]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 800213c:	2240      	movs	r2, #64	@ 0x40
 800213e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002146:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 8002148:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800214c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800214e:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 8002150:	2200      	movs	r2, #0
 8002152:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002154:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 8002156:	2200      	movs	r2, #0
 8002158:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800215a:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 800215c:	2200      	movs	r2, #0
 800215e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002160:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 8002162:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002166:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800216e:	4812      	ldr	r0, [pc, #72]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 8002170:	f000 fba0 	bl	80028b4 <HAL_DMA_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800217a:	f7ff fd55 	bl	8001c28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 8002182:	639a      	str	r2, [r3, #56]	@ 0x38
 8002184:	4a0c      	ldr	r2, [pc, #48]	@ (80021b8 <HAL_UART_MspInit+0x168>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2105      	movs	r1, #5
 800218e:	2026      	movs	r0, #38	@ 0x26
 8002190:	f000 fb59 	bl	8002846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002194:	2026      	movs	r0, #38	@ 0x26
 8002196:	f000 fb72 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	@ 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40004400 	.word	0x40004400
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	20003efc 	.word	0x20003efc
 80021b4:	40026088 	.word	0x40026088
 80021b8:	20003f5c 	.word	0x20003f5c
 80021bc:	400260a0 	.word	0x400260a0

080021c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <NMI_Handler+0x4>

080021c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <HardFault_Handler+0x4>

080021d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <MemManage_Handler+0x4>

080021d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fa:	f000 fa29 	bl	8002650 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80021fe:	f005 f9c1 	bl	8007584 <xTaskGetSchedulerState>
 8002202:	4603      	mov	r3, r0
 8002204:	2b01      	cmp	r3, #1
 8002206:	d001      	beq.n	800220c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002208:	f005 ffb6 	bl	8008178 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <DMA1_Stream5_IRQHandler+0x10>)
 8002216:	f000 fce5 	bl	8002be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20003efc 	.word	0x20003efc

08002224 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002228:	4802      	ldr	r0, [pc, #8]	@ (8002234 <DMA1_Stream6_IRQHandler+0x10>)
 800222a:	f000 fcdb 	bl	8002be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20003f5c 	.word	0x20003f5c

08002238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800223c:	4802      	ldr	r0, [pc, #8]	@ (8002248 <USART2_IRQHandler+0x10>)
 800223e:	f002 fb43 	bl	80048c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20003eb4 	.word	0x20003eb4

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002266:	f00f febf 	bl	8011fe8 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
  return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
  while (1) {}    /* Make sure we hang here */
 800228e:	bf00      	nop
 8002290:	e7fd      	b.n	800228e <_exit+0x12>

08002292 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	e00a      	b.n	80022ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022a4:	f3af 8000 	nop.w
 80022a8:	4601      	mov	r1, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	60ba      	str	r2, [r7, #8]
 80022b0:	b2ca      	uxtb	r2, r1
 80022b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	dbf0      	blt.n	80022a4 <_read+0x12>
  }

  return len;
 80022c2:	687b      	ldr	r3, [r7, #4]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e009      	b.n	80022f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	60ba      	str	r2, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	dbf1      	blt.n	80022de <_write+0x12>
  }
  return len;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_close>:

int _close(int file)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800232c:	605a      	str	r2, [r3, #4]
  return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_isatty>:

int _isatty(int file)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	@ (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f00f fe24 	bl	8011fe8 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	@ (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	@ (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20020000 	.word	0x20020000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	20003fec 	.word	0x20003fec
 80023d4:	2000dda0 	.word	0x2000dda0

080023d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800240a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800240c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002410:	4904      	ldr	r1, [pc, #16]	@ (8002424 <cubemx_transport_open+0x28>)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f002 f9b4 	bl	8004780 <HAL_UART_Receive_DMA>
    return true;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20003ff0 	.word	0x20003ff0

08002428 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002436:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f002 f9c6 	bl	80047ca <HAL_UART_DMAStop>
    return true;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800245c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b20      	cmp	r3, #32
 8002468:	d11c      	bne.n	80024a4 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f002 f914 	bl	80046a0 <HAL_UART_Transmit_DMA>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800247c:	e002      	b.n	8002484 <cubemx_transport_write+0x3c>
            osDelay(1);
 800247e:	2001      	movs	r0, #1
 8002480:	f003 fc30 	bl	8005ce4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <cubemx_transport_write+0x4e>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	d1f3      	bne.n	800247e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <cubemx_transport_write+0x58>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	e002      	b.n	80024a6 <cubemx_transport_write+0x5e>
 80024a0:	2300      	movs	r3, #0
 80024a2:	e000      	b.n	80024a6 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80024a4:	2300      	movs	r3, #0
    }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80024c4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80024ca:	b672      	cpsid	i
}
 80024cc:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80024da:	4a1c      	ldr	r2, [pc, #112]	@ (800254c <cubemx_transport_read+0x9c>)
 80024dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024de:	b662      	cpsie	i
}
 80024e0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80024e8:	2001      	movs	r0, #1
 80024ea:	f003 fbfb 	bl	8005ce4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80024ee:	4b18      	ldr	r3, [pc, #96]	@ (8002550 <cubemx_transport_read+0xa0>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b16      	ldr	r3, [pc, #88]	@ (800254c <cubemx_transport_read+0x9c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d103      	bne.n	8002502 <cubemx_transport_read+0x52>
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	dbe3      	blt.n	80024ca <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002506:	e011      	b.n	800252c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002508:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <cubemx_transport_read+0xa0>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	440b      	add	r3, r1
 8002512:	4910      	ldr	r1, [pc, #64]	@ (8002554 <cubemx_transport_read+0xa4>)
 8002514:	5c8a      	ldrb	r2, [r1, r2]
 8002516:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002518:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <cubemx_transport_read+0xa0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002522:	4a0b      	ldr	r2, [pc, #44]	@ (8002550 <cubemx_transport_read+0xa0>)
 8002524:	6013      	str	r3, [r2, #0]
        wrote++;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3301      	adds	r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <cubemx_transport_read+0xa0>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <cubemx_transport_read+0x9c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d003      	beq.n	8002540 <cubemx_transport_read+0x90>
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	d3e3      	bcc.n	8002508 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002540:	69bb      	ldr	r3, [r7, #24]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200047f4 	.word	0x200047f4
 8002550:	200047f0 	.word	0x200047f0
 8002554:	20003ff0 	.word	0x20003ff0

08002558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002558:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002590 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800255c:	f7ff ff3c 	bl	80023d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002560:	480c      	ldr	r0, [pc, #48]	@ (8002594 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002562:	490d      	ldr	r1, [pc, #52]	@ (8002598 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002568:	e002      	b.n	8002570 <LoopCopyDataInit>

0800256a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800256c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256e:	3304      	adds	r3, #4

08002570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002574:	d3f9      	bcc.n	800256a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002576:	4a0a      	ldr	r2, [pc, #40]	@ (80025a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002578:	4c0a      	ldr	r4, [pc, #40]	@ (80025a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800257c:	e001      	b.n	8002582 <LoopFillZerobss>

0800257e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002580:	3204      	adds	r2, #4

08002582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002584:	d3fb      	bcc.n	800257e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002586:	f00f fd35 	bl	8011ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800258a:	f7ff f8ed 	bl	8001768 <main>
  bx  lr    
 800258e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002598:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 800259c:	08013b00 	.word	0x08013b00
  ldr r2, =_sbss
 80025a0:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80025a4:	2000dda0 	.word	0x2000dda0

080025a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a8:	e7fe      	b.n	80025a8 <ADC_IRQHandler>
	...

080025ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b0:	4b0e      	ldr	r3, [pc, #56]	@ (80025ec <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0d      	ldr	r2, [pc, #52]	@ (80025ec <HAL_Init+0x40>)
 80025b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <HAL_Init+0x40>)
 80025c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c8:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <HAL_Init+0x40>)
 80025ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f000 f92b 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025da:	200f      	movs	r0, #15
 80025dc:	f000 f808 	bl	80025f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e0:	f7ff fc8e 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023c00 	.word	0x40023c00

080025f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025f8:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_InitTick+0x54>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <HAL_InitTick+0x58>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002606:	fbb3 f3f1 	udiv	r3, r3, r1
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f943 	bl	800289a <HAL_SYSTICK_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00e      	b.n	800263c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d80a      	bhi.n	800263a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800262c:	f000 f90b 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002630:	4a06      	ldr	r2, [pc, #24]	@ (800264c <HAL_InitTick+0x5c>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000004 	.word	0x20000004
 8002648:	2000000c 	.word	0x2000000c
 800264c:	20000008 	.word	0x20000008

08002650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_IncTick+0x20>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_IncTick+0x24>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4413      	add	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	@ (8002674 <HAL_IncTick+0x24>)
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	2000000c 	.word	0x2000000c
 8002674:	200047f8 	.word	0x200047f8

08002678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return uwTick;
 800267c:	4b03      	ldr	r3, [pc, #12]	@ (800268c <HAL_GetTick+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200047f8 	.word	0x200047f8

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	@ (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	@ (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	@ (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	@ 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	@ 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002810:	f7ff ff8e 	bl	8002730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	@ (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff29 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff3e 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff8e 	bl	8002784 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5d 	bl	8002730 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff31 	bl	80026f4 <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa2 	bl	80027ec <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff feda 	bl	8002678 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e099      	b.n	8002a04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f0:	e00f      	b.n	8002912 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028f2:	f7ff fec1 	bl	8002678 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d908      	bls.n	8002912 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2203      	movs	r2, #3
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e078      	b.n	8002a04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e8      	bne.n	80028f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <HAL_DMA_Init+0x158>)
 800292c:	4013      	ands	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	2b04      	cmp	r3, #4
 800296a:	d107      	bne.n	800297c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002974:	4313      	orrs	r3, r2
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0307 	bic.w	r3, r3, #7
 8002992:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d117      	bne.n	80029d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00e      	beq.n	80029d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fb01 	bl	8002fc0 <DMA_CheckFifoParam>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2240      	movs	r2, #64	@ 0x40
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029d2:	2301      	movs	r3, #1
 80029d4:	e016      	b.n	8002a04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fab8 	bl	8002f54 <DMA_CalcBaseAndBitshift>
 80029e4:	4603      	mov	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	223f      	movs	r2, #63	@ 0x3f
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	f010803f 	.word	0xf010803f

08002a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_DMA_Start_IT+0x26>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e040      	b.n	8002ab8 <HAL_DMA_Start_IT+0xa8>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d12f      	bne.n	8002aaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fa4a 	bl	8002ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a68:	223f      	movs	r2, #63	@ 0x3f
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0216 	orr.w	r2, r2, #22
 8002a7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0208 	orr.w	r2, r2, #8
 8002a96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e005      	b.n	8002ab6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002acc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ace:	f7ff fdd3 	bl	8002678 <HAL_GetTick>
 8002ad2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d008      	beq.n	8002af2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e052      	b.n	8002b98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0216 	bic.w	r2, r2, #22
 8002b00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_DMA_Abort+0x62>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0208 	bic.w	r2, r2, #8
 8002b30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b42:	e013      	b.n	8002b6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b44:	f7ff fd98 	bl	8002678 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b05      	cmp	r3, #5
 8002b50:	d90c      	bls.n	8002b6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e015      	b.n	8002b98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e4      	bne.n	8002b44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	223f      	movs	r2, #63	@ 0x3f
 8002b80:	409a      	lsls	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d004      	beq.n	8002bbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2280      	movs	r2, #128	@ 0x80
 8002bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00c      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8002e2c <HAL_DMA_IRQHandler+0x248>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a8e      	ldr	r2, [pc, #568]	@ (8002e30 <HAL_DMA_IRQHandler+0x24c>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0a9b      	lsrs	r3, r3, #10
 8002bfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	2208      	movs	r2, #8
 8002c10:	409a      	lsls	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01a      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0204 	bic.w	r2, r2, #4
 8002c36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c54:	2201      	movs	r2, #1
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	2201      	movs	r2, #1
 8002c74:	409a      	lsls	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7e:	f043 0202 	orr.w	r2, r3, #2
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d012      	beq.n	8002cbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	2204      	movs	r2, #4
 8002caa:	409a      	lsls	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d043      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03c      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	2210      	movs	r2, #16
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d108      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d024      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
 8002d12:	e01f      	b.n	8002d54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
 8002d24:	e016      	b.n	8002d54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0208 	bic.w	r2, r2, #8
 8002d42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	2220      	movs	r2, #32
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 808f 	beq.w	8002e84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8087 	beq.w	8002e84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d136      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0216 	bic.w	r2, r2, #22
 8002d9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_DMA_IRQHandler+0x1da>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	223f      	movs	r2, #63	@ 0x3f
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d07e      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
        }
        return;
 8002dfa:	e079      	b.n	8002ef0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01d      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d031      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
 8002e28:	e02c      	b.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
 8002e2a:	bf00      	nop
 8002e2c:	20000004 	.word	0x20000004
 8002e30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d023      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
 8002e44:	e01e      	b.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10f      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0210 	bic.w	r2, r2, #16
 8002e62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d032      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d022      	beq.n	8002ede <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d307      	bcc.n	8002ecc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f2      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x2cc>
 8002eca:	e000      	b.n	8002ece <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ecc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
 8002eee:	e000      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ef0:	bf00      	nop
    }
  }
}
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b40      	cmp	r3, #64	@ 0x40
 8002f24:	d108      	bne.n	8002f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f36:	e007      	b.n	8002f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3b10      	subs	r3, #16
 8002f64:	4a14      	ldr	r2, [pc, #80]	@ (8002fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f6e:	4a13      	ldr	r2, [pc, #76]	@ (8002fbc <DMA_CalcBaseAndBitshift+0x68>)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d909      	bls.n	8002f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	1d1a      	adds	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f94:	e007      	b.n	8002fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	aaaaaaab 	.word	0xaaaaaaab
 8002fbc:	08012ec4 	.word	0x08012ec4

08002fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11f      	bne.n	800301a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d856      	bhi.n	800308e <DMA_CheckFifoParam+0xce>
 8002fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <DMA_CheckFifoParam+0x28>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	0800300b 	.word	0x0800300b
 8002ff0:	08002ff9 	.word	0x08002ff9
 8002ff4:	0800308f 	.word	0x0800308f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d046      	beq.n	8003092 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003008:	e043      	b.n	8003092 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003012:	d140      	bne.n	8003096 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003018:	e03d      	b.n	8003096 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003022:	d121      	bne.n	8003068 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d837      	bhi.n	800309a <DMA_CheckFifoParam+0xda>
 800302a:	a201      	add	r2, pc, #4	@ (adr r2, 8003030 <DMA_CheckFifoParam+0x70>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003041 	.word	0x08003041
 8003034:	08003047 	.word	0x08003047
 8003038:	08003041 	.word	0x08003041
 800303c:	08003059 	.word	0x08003059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      break;
 8003044:	e030      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d025      	beq.n	800309e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003056:	e022      	b.n	800309e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003060:	d11f      	bne.n	80030a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003066:	e01c      	b.n	80030a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d903      	bls.n	8003076 <DMA_CheckFifoParam+0xb6>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d003      	beq.n	800307c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003074:	e018      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      break;
 800307a:	e015      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00e      	beq.n	80030a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      break;
 800308c:	e00b      	b.n	80030a6 <DMA_CheckFifoParam+0xe6>
      break;
 800308e:	bf00      	nop
 8003090:	e00a      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003092:	bf00      	nop
 8003094:	e008      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003096:	bf00      	nop
 8003098:	e006      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 800309a:	bf00      	nop
 800309c:	e004      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 800309e:	bf00      	nop
 80030a0:	e002      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
    }
  } 
  
  return status; 
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	@ 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e159      	b.n	8003388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8148 	bne.w	8003382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d005      	beq.n	800310a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	2b02      	cmp	r3, #2
 8003108:	d130      	bne.n	800316c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 0201 	and.w	r2, r3, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b03      	cmp	r3, #3
 8003176:	d017      	beq.n	80031a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d123      	bne.n	80031fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	08da      	lsrs	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0203 	and.w	r2, r3, #3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a2 	beq.w	8003382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b57      	ldr	r3, [pc, #348]	@ (80033a0 <HAL_GPIO_Init+0x2e8>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	4a56      	ldr	r2, [pc, #344]	@ (80033a0 <HAL_GPIO_Init+0x2e8>)
 8003248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800324c:	6453      	str	r3, [r2, #68]	@ 0x44
 800324e:	4b54      	ldr	r3, [pc, #336]	@ (80033a0 <HAL_GPIO_Init+0x2e8>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800325a:	4a52      	ldr	r2, [pc, #328]	@ (80033a4 <HAL_GPIO_Init+0x2ec>)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	3302      	adds	r3, #2
 8003262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	220f      	movs	r2, #15
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a49      	ldr	r2, [pc, #292]	@ (80033a8 <HAL_GPIO_Init+0x2f0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d019      	beq.n	80032ba <HAL_GPIO_Init+0x202>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a48      	ldr	r2, [pc, #288]	@ (80033ac <HAL_GPIO_Init+0x2f4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_GPIO_Init+0x1fe>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a47      	ldr	r2, [pc, #284]	@ (80033b0 <HAL_GPIO_Init+0x2f8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00d      	beq.n	80032b2 <HAL_GPIO_Init+0x1fa>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a46      	ldr	r2, [pc, #280]	@ (80033b4 <HAL_GPIO_Init+0x2fc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <HAL_GPIO_Init+0x1f6>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a45      	ldr	r2, [pc, #276]	@ (80033b8 <HAL_GPIO_Init+0x300>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_GPIO_Init+0x1f2>
 80032a6:	2304      	movs	r3, #4
 80032a8:	e008      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032aa:	2307      	movs	r3, #7
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032ae:	2303      	movs	r3, #3
 80032b0:	e004      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e002      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032ba:	2300      	movs	r3, #0
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	f002 0203 	and.w	r2, r2, #3
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	4093      	lsls	r3, r2
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032cc:	4935      	ldr	r1, [pc, #212]	@ (80033a4 <HAL_GPIO_Init+0x2ec>)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3302      	adds	r3, #2
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032da:	4b38      	ldr	r3, [pc, #224]	@ (80033bc <HAL_GPIO_Init+0x304>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032fe:	4a2f      	ldr	r2, [pc, #188]	@ (80033bc <HAL_GPIO_Init+0x304>)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003304:	4b2d      	ldr	r3, [pc, #180]	@ (80033bc <HAL_GPIO_Init+0x304>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003328:	4a24      	ldr	r2, [pc, #144]	@ (80033bc <HAL_GPIO_Init+0x304>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800332e:	4b23      	ldr	r3, [pc, #140]	@ (80033bc <HAL_GPIO_Init+0x304>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003352:	4a1a      	ldr	r2, [pc, #104]	@ (80033bc <HAL_GPIO_Init+0x304>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003358:	4b18      	ldr	r3, [pc, #96]	@ (80033bc <HAL_GPIO_Init+0x304>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800337c:	4a0f      	ldr	r2, [pc, #60]	@ (80033bc <HAL_GPIO_Init+0x304>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3301      	adds	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	f67f aea2 	bls.w	80030d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3724      	adds	r7, #36	@ 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40013800 	.word	0x40013800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020800 	.word	0x40020800
 80033b4:	40020c00 	.word	0x40020c00
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40013c00 	.word	0x40013c00

080033c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	807b      	strh	r3, [r7, #2]
 80033cc:	4613      	mov	r3, r2
 80033ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d0:	787b      	ldrb	r3, [r7, #1]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033dc:	e003      	b.n	80033e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033de:	887b      	ldrh	r3, [r7, #2]
 80033e0:	041a      	lsls	r2, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	619a      	str	r2, [r3, #24]
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e267      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d075      	beq.n	80034fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003412:	4b88      	ldr	r3, [pc, #544]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d00c      	beq.n	8003438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b85      	ldr	r3, [pc, #532]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003426:	2b08      	cmp	r3, #8
 8003428:	d112      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4b82      	ldr	r3, [pc, #520]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003436:	d10b      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	4b7e      	ldr	r3, [pc, #504]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d05b      	beq.n	80034fc <HAL_RCC_OscConfig+0x108>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d157      	bne.n	80034fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e242      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x74>
 800345a:	4b76      	ldr	r3, [pc, #472]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x98>
 8003472:	4b70      	ldr	r3, [pc, #448]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6f      	ldr	r2, [pc, #444]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b6d      	ldr	r3, [pc, #436]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6c      	ldr	r2, [pc, #432]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 800348c:	4b69      	ldr	r3, [pc, #420]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a68      	ldr	r2, [pc, #416]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b66      	ldr	r3, [pc, #408]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a65      	ldr	r2, [pc, #404]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7ff f8e4 	bl	8002678 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b4:	f7ff f8e0 	bl	8002678 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e207      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xc0>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7ff f8d0 	bl	8002678 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034dc:	f7ff f8cc 	bl	8002678 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1f3      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b51      	ldr	r3, [pc, #324]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0xe8>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d063      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350a:	4b4a      	ldr	r3, [pc, #296]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b47      	ldr	r3, [pc, #284]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b44      	ldr	r3, [pc, #272]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b41      	ldr	r3, [pc, #260]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1c7      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b3b      	ldr	r3, [pc, #236]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4937      	ldr	r1, [pc, #220]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e03a      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b34      	ldr	r3, [pc, #208]	@ (8003638 <HAL_RCC_OscConfig+0x244>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7ff f885 	bl	8002678 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003572:	f7ff f881 	bl	8002678 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1a8      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4b2b      	ldr	r3, [pc, #172]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b28      	ldr	r3, [pc, #160]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4925      	ldr	r1, [pc, #148]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_RCC_OscConfig+0x244>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7ff f864 	bl	8002678 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b4:	f7ff f860 	bl	8002678 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e187      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d036      	beq.n	800364c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e6:	4b15      	ldr	r3, [pc, #84]	@ (800363c <HAL_RCC_OscConfig+0x248>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7ff f844 	bl	8002678 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f4:	f7ff f840 	bl	8002678 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e167      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x200>
 8003612:	e01b      	b.n	800364c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_OscConfig+0x248>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7ff f82d 	bl	8002678 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00e      	b.n	8003640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003622:	f7ff f829 	bl	8002678 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d907      	bls.n	8003640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e150      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000
 800363c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b88      	ldr	r3, [pc, #544]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ea      	bne.n	8003622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8097 	beq.w	8003788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b81      	ldr	r3, [pc, #516]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b7d      	ldr	r3, [pc, #500]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	4a7c      	ldr	r2, [pc, #496]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	@ 0x40
 800367a:	4b7a      	ldr	r3, [pc, #488]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b77      	ldr	r3, [pc, #476]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b74      	ldr	r3, [pc, #464]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a73      	ldr	r2, [pc, #460]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe ffe9 	bl	8002678 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe ffe5 	bl	8002678 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e10c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x2ea>
 80036d0:	4b64      	ldr	r3, [pc, #400]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	4a63      	ldr	r2, [pc, #396]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	@ 0x70
 80036dc:	e01c      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x30c>
 80036e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 8003700:	4b58      	ldr	r3, [pc, #352]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	4a57      	ldr	r2, [pc, #348]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
 800370c:	4b55      	ldr	r3, [pc, #340]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a54      	ldr	r2, [pc, #336]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe ffaa 	bl	8002678 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fe ffa6 	bl	8002678 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0cb      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	4b49      	ldr	r3, [pc, #292]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0ee      	beq.n	8003728 <HAL_RCC_OscConfig+0x334>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fe ff94 	bl	8002678 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fe ff90 	bl	8002678 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0b5      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376a:	4b3e      	ldr	r3, [pc, #248]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	4a38      	ldr	r2, [pc, #224]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003786:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80a1 	beq.w	80038d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003792:	4b34      	ldr	r3, [pc, #208]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d05c      	beq.n	8003858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d141      	bne.n	800382a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b31      	ldr	r3, [pc, #196]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe ff64 	bl	8002678 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe ff60 	bl	8002678 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e087      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b27      	ldr	r3, [pc, #156]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	491b      	ldr	r1, [pc, #108]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe ff39 	bl	8002678 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380a:	f7fe ff35 	bl	8002678 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e05c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x416>
 8003828:	e054      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe ff22 	bl	8002678 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe ff1e 	bl	8002678 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e045      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x444>
 8003856:	e03d      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e038      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003864:	40023800 	.word	0x40023800
 8003868:	40007000 	.word	0x40007000
 800386c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003870:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <HAL_RCC_OscConfig+0x4ec>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d028      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d121      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d11a      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d111      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	3b01      	subs	r3, #1
 80038ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0cc      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b68      	ldr	r3, [pc, #416]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d90c      	bls.n	8003920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b65      	ldr	r3, [pc, #404]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b63      	ldr	r3, [pc, #396]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b8      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003938:	4b59      	ldr	r3, [pc, #356]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a58      	ldr	r2, [pc, #352]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003950:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a52      	ldr	r2, [pc, #328]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800395a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4b50      	ldr	r3, [pc, #320]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	494d      	ldr	r1, [pc, #308]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d044      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b47      	ldr	r3, [pc, #284]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d119      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e067      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b37      	ldr	r3, [pc, #220]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4934      	ldr	r1, [pc, #208]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fe fe50 	bl	8002678 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe fe4c 	bl	8002678 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e04f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b25      	ldr	r3, [pc, #148]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d20c      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b22      	ldr	r3, [pc, #136]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b20      	ldr	r3, [pc, #128]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e032      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a38:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4916      	ldr	r1, [pc, #88]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a56:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	490e      	ldr	r1, [pc, #56]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6a:	f000 f821 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	490a      	ldr	r1, [pc, #40]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	5ccb      	ldrb	r3, [r1, r3]
 8003a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a82:	4a09      	ldr	r2, [pc, #36]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fdb0 	bl	80025f0 <HAL_InitTick>

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023c00 	.word	0x40023c00
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	08012eac 	.word	0x08012eac
 8003aa8:	20000004 	.word	0x20000004
 8003aac:	20000008 	.word	0x20000008

08003ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab4:	b094      	sub	sp, #80	@ 0x50
 8003ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003abc:	2300      	movs	r3, #0
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac8:	4b79      	ldr	r3, [pc, #484]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d00d      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	f200 80e1 	bhi.w	8003c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae2:	e0db      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b73      	ldr	r3, [pc, #460]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ae8:	e0db      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aea:	4b73      	ldr	r3, [pc, #460]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003aec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aee:	e0d8      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af0:	4b6f      	ldr	r3, [pc, #444]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003af8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afa:	4b6d      	ldr	r3, [pc, #436]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d063      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	f04f 0000 	mov.w	r0, #0
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	0159      	lsls	r1, r3, #5
 8003b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b34:	0150      	lsls	r0, r2, #5
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	1a51      	subs	r1, r2, r1
 8003b3e:	6139      	str	r1, [r7, #16]
 8003b40:	4629      	mov	r1, r5
 8003b42:	eb63 0301 	sbc.w	r3, r3, r1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b54:	4659      	mov	r1, fp
 8003b56:	018b      	lsls	r3, r1, #6
 8003b58:	4651      	mov	r1, sl
 8003b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b5e:	4651      	mov	r1, sl
 8003b60:	018a      	lsls	r2, r1, #6
 8003b62:	4651      	mov	r1, sl
 8003b64:	ebb2 0801 	subs.w	r8, r2, r1
 8003b68:	4659      	mov	r1, fp
 8003b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b82:	4690      	mov	r8, r2
 8003b84:	4699      	mov	r9, r3
 8003b86:	4623      	mov	r3, r4
 8003b88:	eb18 0303 	adds.w	r3, r8, r3
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	462b      	mov	r3, r5
 8003b90:	eb49 0303 	adc.w	r3, r9, r3
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	024b      	lsls	r3, r1, #9
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bac:	4621      	mov	r1, r4
 8003bae:	024a      	lsls	r2, r1, #9
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bc0:	f7fd f83c 	bl	8000c3c <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4613      	mov	r3, r2
 8003bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bcc:	e058      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bce:	4b38      	ldr	r3, [pc, #224]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	4611      	mov	r1, r2
 8003bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	2300      	movs	r3, #0
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003be8:	4642      	mov	r2, r8
 8003bea:	464b      	mov	r3, r9
 8003bec:	f04f 0000 	mov.w	r0, #0
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	0159      	lsls	r1, r3, #5
 8003bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bfa:	0150      	lsls	r0, r2, #5
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4641      	mov	r1, r8
 8003c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c06:	4649      	mov	r1, r9
 8003c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c20:	ebb2 040a 	subs.w	r4, r2, sl
 8003c24:	eb63 050b 	sbc.w	r5, r3, fp
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	00eb      	lsls	r3, r5, #3
 8003c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c36:	00e2      	lsls	r2, r4, #3
 8003c38:	4614      	mov	r4, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	4643      	mov	r3, r8
 8003c3e:	18e3      	adds	r3, r4, r3
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	464b      	mov	r3, r9
 8003c44:	eb45 0303 	adc.w	r3, r5, r3
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c56:	4629      	mov	r1, r5
 8003c58:	028b      	lsls	r3, r1, #10
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c60:	4621      	mov	r1, r4
 8003c62:	028a      	lsls	r2, r1, #10
 8003c64:	4610      	mov	r0, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	61fa      	str	r2, [r7, #28]
 8003c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c74:	f7fc ffe2 	bl	8000c3c <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003c90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c9a:	e002      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c9c:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3750      	adds	r7, #80	@ 0x50
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	00f42400 	.word	0x00f42400
 8003cb8:	007a1200 	.word	0x007a1200

08003cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	@ (8003cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000004 	.word	0x20000004

08003cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cd8:	f7ff fff0 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0a9b      	lsrs	r3, r3, #10
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4903      	ldr	r1, [pc, #12]	@ (8003cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	08012ebc 	.word	0x08012ebc

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d00:	f7ff ffdc 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0b5b      	lsrs	r3, r3, #13
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4903      	ldr	r1, [pc, #12]	@ (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	08012ebc 	.word	0x08012ebc

08003d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e041      	b.n	8003dba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe f904 	bl	8001f58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 f9a0 	bl	80040a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_TIM_PWM_Start+0x24>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	bf14      	ite	ne
 8003de0:	2301      	movne	r3, #1
 8003de2:	2300      	moveq	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e022      	b.n	8003e2e <HAL_TIM_PWM_Start+0x6a>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d109      	bne.n	8003e02 <HAL_TIM_PWM_Start+0x3e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	bf14      	ite	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	2300      	moveq	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	e015      	b.n	8003e2e <HAL_TIM_PWM_Start+0x6a>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d109      	bne.n	8003e1c <HAL_TIM_PWM_Start+0x58>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	bf14      	ite	ne
 8003e14:	2301      	movne	r3, #1
 8003e16:	2300      	moveq	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e008      	b.n	8003e2e <HAL_TIM_PWM_Start+0x6a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e068      	b.n	8003f08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start+0x82>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e44:	e013      	b.n	8003e6e <HAL_TIM_PWM_Start+0xaa>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start+0x92>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e54:	e00b      	b.n	8003e6e <HAL_TIM_PWM_Start+0xaa>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d104      	bne.n	8003e66 <HAL_TIM_PWM_Start+0xa2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e64:	e003      	b.n	8003e6e <HAL_TIM_PWM_Start+0xaa>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2201      	movs	r2, #1
 8003e74:	6839      	ldr	r1, [r7, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fb2e 	bl	80044d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a23      	ldr	r2, [pc, #140]	@ (8003f10 <HAL_TIM_PWM_Start+0x14c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <HAL_TIM_PWM_Start+0x14c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0x10e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea8:	d013      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0x10e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a19      	ldr	r2, [pc, #100]	@ (8003f14 <HAL_TIM_PWM_Start+0x150>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0x10e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a17      	ldr	r2, [pc, #92]	@ (8003f18 <HAL_TIM_PWM_Start+0x154>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0x10e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a16      	ldr	r2, [pc, #88]	@ (8003f1c <HAL_TIM_PWM_Start+0x158>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0x10e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a14      	ldr	r2, [pc, #80]	@ (8003f20 <HAL_TIM_PWM_Start+0x15c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d111      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b06      	cmp	r3, #6
 8003ee2:	d010      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	e007      	b.n	8003f06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40014000 	.word	0x40014000

08003f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e0ae      	b.n	80040a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b0c      	cmp	r3, #12
 8003f4e:	f200 809f 	bhi.w	8004090 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f52:	a201      	add	r2, pc, #4	@ (adr r2, 8003f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08004091 	.word	0x08004091
 8003f60:	08004091 	.word	0x08004091
 8003f64:	08004091 	.word	0x08004091
 8003f68:	08003fcd 	.word	0x08003fcd
 8003f6c:	08004091 	.word	0x08004091
 8003f70:	08004091 	.word	0x08004091
 8003f74:	08004091 	.word	0x08004091
 8003f78:	0800400f 	.word	0x0800400f
 8003f7c:	08004091 	.word	0x08004091
 8003f80:	08004091 	.word	0x08004091
 8003f84:	08004091 	.word	0x08004091
 8003f88:	0800404f 	.word	0x0800404f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f914 	bl	80041c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6999      	ldr	r1, [r3, #24]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	619a      	str	r2, [r3, #24]
      break;
 8003fca:	e064      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f95a 	bl	800428c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6999      	ldr	r1, [r3, #24]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	021a      	lsls	r2, r3, #8
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	619a      	str	r2, [r3, #24]
      break;
 800400c:	e043      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f9a5 	bl	8004364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0208 	orr.w	r2, r2, #8
 8004028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0204 	bic.w	r2, r2, #4
 8004038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69d9      	ldr	r1, [r3, #28]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	61da      	str	r2, [r3, #28]
      break;
 800404c:	e023      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f9ef 	bl	8004438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69d9      	ldr	r1, [r3, #28]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	021a      	lsls	r2, r3, #8
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	61da      	str	r2, [r3, #28]
      break;
 800408e:	e002      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	75fb      	strb	r3, [r7, #23]
      break;
 8004094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3a      	ldr	r2, [pc, #232]	@ (80041a4 <TIM_Base_SetConfig+0xfc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00f      	beq.n	80040e0 <TIM_Base_SetConfig+0x38>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0x38>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a37      	ldr	r2, [pc, #220]	@ (80041a8 <TIM_Base_SetConfig+0x100>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0x38>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a36      	ldr	r2, [pc, #216]	@ (80041ac <TIM_Base_SetConfig+0x104>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0x38>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a35      	ldr	r2, [pc, #212]	@ (80041b0 <TIM_Base_SetConfig+0x108>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d108      	bne.n	80040f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2b      	ldr	r2, [pc, #172]	@ (80041a4 <TIM_Base_SetConfig+0xfc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01b      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004100:	d017      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a28      	ldr	r2, [pc, #160]	@ (80041a8 <TIM_Base_SetConfig+0x100>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a27      	ldr	r2, [pc, #156]	@ (80041ac <TIM_Base_SetConfig+0x104>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00f      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a26      	ldr	r2, [pc, #152]	@ (80041b0 <TIM_Base_SetConfig+0x108>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00b      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a25      	ldr	r2, [pc, #148]	@ (80041b4 <TIM_Base_SetConfig+0x10c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a24      	ldr	r2, [pc, #144]	@ (80041b8 <TIM_Base_SetConfig+0x110>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a23      	ldr	r2, [pc, #140]	@ (80041bc <TIM_Base_SetConfig+0x114>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a0e      	ldr	r2, [pc, #56]	@ (80041a4 <TIM_Base_SetConfig+0xfc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d103      	bne.n	8004178 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d105      	bne.n	8004196 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	611a      	str	r2, [r3, #16]
  }
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800

080041c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f023 0201 	bic.w	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f023 0302 	bic.w	r3, r3, #2
 8004208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <TIM_OC1_SetConfig+0xc8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d10c      	bne.n	8004236 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0308 	bic.w	r3, r3, #8
 8004222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f023 0304 	bic.w	r3, r3, #4
 8004234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a13      	ldr	r2, [pc, #76]	@ (8004288 <TIM_OC1_SetConfig+0xc8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d111      	bne.n	8004262 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800424c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	621a      	str	r2, [r3, #32]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40010000 	.word	0x40010000

0800428c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f023 0210 	bic.w	r2, r3, #16
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0320 	bic.w	r3, r3, #32
 80042d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004360 <TIM_OC2_SetConfig+0xd4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d10d      	bne.n	8004308 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004306:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a15      	ldr	r2, [pc, #84]	@ (8004360 <TIM_OC2_SetConfig+0xd4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d113      	bne.n	8004338 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800431e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40010000 	.word	0x40010000

08004364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004434 <TIM_OC3_SetConfig+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10d      	bne.n	80043de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <TIM_OC3_SetConfig+0xd0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d113      	bne.n	800440e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	621a      	str	r2, [r3, #32]
}
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40010000 	.word	0x40010000

08004438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	031b      	lsls	r3, r3, #12
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a10      	ldr	r2, [pc, #64]	@ (80044d4 <TIM_OC4_SetConfig+0x9c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d109      	bne.n	80044ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800449e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	019b      	lsls	r3, r3, #6
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40010000 	.word	0x40010000

080044d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2201      	movs	r2, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	fa01 f303 	lsl.w	r3, r1, r3
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004538:	2302      	movs	r3, #2
 800453a:	e050      	b.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1c      	ldr	r2, [pc, #112]	@ (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d018      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004588:	d013      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a18      	ldr	r2, [pc, #96]	@ (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a16      	ldr	r2, [pc, #88]	@ (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a15      	ldr	r2, [pc, #84]	@ (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a13      	ldr	r2, [pc, #76]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10c      	bne.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40014000 	.word	0x40014000

08004600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e042      	b.n	8004698 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd fd12 	bl	8002050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	@ 0x24
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 ffc9 	bl	80055dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08c      	sub	sp, #48	@ 0x30
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d156      	bne.n	8004768 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_UART_Transmit_DMA+0x26>
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e04f      	b.n	800476a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	88fa      	ldrh	r2, [r7, #6]
 80046da:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2221      	movs	r2, #33	@ 0x21
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	4a21      	ldr	r2, [pc, #132]	@ (8004774 <HAL_UART_Transmit_DMA+0xd4>)
 80046f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f6:	4a20      	ldr	r2, [pc, #128]	@ (8004778 <HAL_UART_Transmit_DMA+0xd8>)
 80046f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fe:	4a1f      	ldr	r2, [pc, #124]	@ (800477c <HAL_UART_Transmit_DMA+0xdc>)
 8004700:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004706:	2200      	movs	r2, #0
 8004708:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004716:	6819      	ldr	r1, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3304      	adds	r3, #4
 800471e:	461a      	mov	r2, r3
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	f7fe f975 	bl	8002a10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800472e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3314      	adds	r3, #20
 8004736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	617b      	str	r3, [r7, #20]
   return(result);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004746:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004750:	627a      	str	r2, [r7, #36]	@ 0x24
 8004752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6a39      	ldr	r1, [r7, #32]
 8004756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	61fb      	str	r3, [r7, #28]
   return(result);
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e5      	bne.n	8004730 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	e000      	b.n	800476a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004768:	2302      	movs	r3, #2
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3730      	adds	r7, #48	@ 0x30
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	08004e69 	.word	0x08004e69
 8004778:	08004f03 	.word	0x08004f03
 800477c:	08005087 	.word	0x08005087

08004780 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d112      	bne.n	80047c0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_UART_Receive_DMA+0x26>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e00b      	b.n	80047c2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	461a      	mov	r2, r3
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fcb0 	bl	800511c <UART_Start_Receive_DMA>
 80047bc:	4603      	mov	r3, r0
 80047be:	e000      	b.n	80047c2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b090      	sub	sp, #64	@ 0x40
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e0:	2b80      	cmp	r3, #128	@ 0x80
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b21      	cmp	r3, #33	@ 0x21
 80047f6:	d128      	bne.n	800484a <HAL_UART_DMAStop+0x80>
 80047f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d025      	beq.n	800484a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	623b      	str	r3, [r7, #32]
   return(result);
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004814:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3314      	adds	r3, #20
 800481c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800481e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e5      	bne.n	80047fe <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe f93e 	bl	8002ac0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fd03 	bl	8005250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004854:	2b40      	cmp	r3, #64	@ 0x40
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b22      	cmp	r3, #34	@ 0x22
 800486a:	d128      	bne.n	80048be <HAL_UART_DMAStop+0xf4>
 800486c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d025      	beq.n	80048be <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3314      	adds	r3, #20
 8004878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	60fb      	str	r3, [r7, #12]
   return(result);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004888:	637b      	str	r3, [r7, #52]	@ 0x34
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004892:	61fa      	str	r2, [r7, #28]
 8004894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	69b9      	ldr	r1, [r7, #24]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	617b      	str	r3, [r7, #20]
   return(result);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e5      	bne.n	8004872 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe f904 	bl	8002ac0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fcf1 	bl	80052a0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3740      	adds	r7, #64	@ 0x40
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b0ba      	sub	sp, #232	@ 0xe8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800490e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_UART_IRQHandler+0x66>
 800491a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fd99 	bl	800545e <UART_Receive_IT>
      return;
 800492c:	e25b      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800492e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80de 	beq.w	8004af4 <HAL_UART_IRQHandler+0x22c>
 8004938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004948:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80d1 	beq.w	8004af4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0xae>
 800495e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_UART_IRQHandler+0xd2>
 8004982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <HAL_UART_IRQHandler+0xf6>
 80049a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b6:	f043 0204 	orr.w	r2, r3, #4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d011      	beq.n	80049ee <HAL_UART_IRQHandler+0x126>
 80049ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	f043 0208 	orr.w	r2, r3, #8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 81f2 	beq.w	8004ddc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_UART_IRQHandler+0x14e>
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fd24 	bl	800545e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a20:	2b40      	cmp	r3, #64	@ 0x40
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <HAL_UART_IRQHandler+0x17a>
 8004a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04f      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fc2c 	bl	80052a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b40      	cmp	r3, #64	@ 0x40
 8004a54:	d141      	bne.n	8004ada <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3314      	adds	r3, #20
 8004a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d9      	bne.n	8004a56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d013      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aae:	4a7e      	ldr	r2, [pc, #504]	@ (8004ca8 <HAL_UART_IRQHandler+0x3e0>)
 8004ab0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe f872 	bl	8002ba0 <HAL_DMA_Abort_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004acc:	4610      	mov	r0, r2
 8004ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	e00e      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9b2 	bl	8004e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	e00a      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f9ae 	bl	8004e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e006      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f9aa 	bl	8004e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004aee:	e175      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	bf00      	nop
    return;
 8004af2:	e173      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	f040 814f 	bne.w	8004d9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8148 	beq.w	8004d9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8141 	beq.w	8004d9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3a:	2b40      	cmp	r3, #64	@ 0x40
 8004b3c:	f040 80b6 	bne.w	8004cac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8145 	beq.w	8004de0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	f080 813e 	bcs.w	8004de0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b76:	f000 8088 	beq.w	8004c8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ba6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1d9      	bne.n	8004b7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e1      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e3      	bne.n	8004c02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c5a:	f023 0310 	bic.w	r3, r3, #16
 8004c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	330c      	adds	r3, #12
 8004c68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e3      	bne.n	8004c48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fd ff1b 	bl	8002ac0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f8d5 	bl	8004e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ca6:	e09b      	b.n	8004de0 <HAL_UART_IRQHandler+0x518>
 8004ca8:	08005367 	.word	0x08005367
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 808e 	beq.w	8004de4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8089 	beq.w	8004de4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004cf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e3      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e3      	bne.n	8004d0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d74:	61fa      	str	r2, [r7, #28]
 8004d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	69b9      	ldr	r1, [r7, #24]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	617b      	str	r3, [r7, #20]
   return(result);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e3      	bne.n	8004d50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f85b 	bl	8004e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d9a:	e023      	b.n	8004de4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <HAL_UART_IRQHandler+0x4f4>
 8004da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 faea 	bl	800538e <UART_Transmit_IT>
    return;
 8004dba:	e014      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <HAL_UART_IRQHandler+0x51e>
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fb2a 	bl	800542e <UART_EndTransmit_IT>
    return;
 8004dda:	e004      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ddc:	bf00      	nop
 8004dde:	e002      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004de4:	bf00      	nop
  }
}
 8004de6:	37e8      	adds	r7, #232	@ 0xe8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b090      	sub	sp, #64	@ 0x40
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d137      	bne.n	8004ef4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e86:	2200      	movs	r2, #0
 8004e88:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ede:	61fa      	str	r2, [r7, #28]
 8004ee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	69b9      	ldr	r1, [r7, #24]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	617b      	str	r3, [r7, #20]
   return(result);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ef2:	e002      	b.n	8004efa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004ef4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004ef6:	f7ff ff79 	bl	8004dec <HAL_UART_TxCpltCallback>
}
 8004efa:	bf00      	nop
 8004efc:	3740      	adds	r7, #64	@ 0x40
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff ff75 	bl	8004e00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b09c      	sub	sp, #112	@ 0x70
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d172      	bne.n	8005020 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004f60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f94:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f96:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3314      	adds	r3, #20
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3314      	adds	r3, #20
 8004fc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004fc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e5      	bne.n	8004fa8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d119      	bne.n	8005020 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800500c:	61fa      	str	r2, [r7, #28]
 800500e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	69b9      	ldr	r1, [r7, #24]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	617b      	str	r3, [r7, #20]
   return(result);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005022:	2200      	movs	r2, #0
 8005024:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	2b01      	cmp	r3, #1
 800502c:	d106      	bne.n	800503c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800502e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005030:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005032:	4619      	mov	r1, r3
 8005034:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005036:	f7ff ff0b 	bl	8004e50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800503a:	e002      	b.n	8005042 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800503c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800503e:	f7ff fee9 	bl	8004e14 <HAL_UART_RxCpltCallback>
}
 8005042:	bf00      	nop
 8005044:	3770      	adds	r7, #112	@ 0x70
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005056:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	2b01      	cmp	r3, #1
 8005064:	d108      	bne.n	8005078 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	b29b      	uxth	r3, r3
 800506e:	4619      	mov	r1, r3
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f7ff feed 	bl	8004e50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005076:	e002      	b.n	800507e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff fed5 	bl	8004e28 <HAL_UART_RxHalfCpltCallback>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a2:	2b80      	cmp	r3, #128	@ 0x80
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b21      	cmp	r3, #33	@ 0x21
 80050b8:	d108      	bne.n	80050cc <UART_DMAError+0x46>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2200      	movs	r2, #0
 80050c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80050c6:	68b8      	ldr	r0, [r7, #8]
 80050c8:	f000 f8c2 	bl	8005250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d6:	2b40      	cmp	r3, #64	@ 0x40
 80050d8:	bf0c      	ite	eq
 80050da:	2301      	moveq	r3, #1
 80050dc:	2300      	movne	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b22      	cmp	r3, #34	@ 0x22
 80050ec:	d108      	bne.n	8005100 <UART_DMAError+0x7a>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80050fa:	68b8      	ldr	r0, [r7, #8]
 80050fc:	f000 f8d0 	bl	80052a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005104:	f043 0210 	orr.w	r2, r3, #16
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800510c:	68b8      	ldr	r0, [r7, #8]
 800510e:	f7ff fe95 	bl	8004e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b098      	sub	sp, #96	@ 0x60
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2222      	movs	r2, #34	@ 0x22
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005148:	4a3e      	ldr	r2, [pc, #248]	@ (8005244 <UART_Start_Receive_DMA+0x128>)
 800514a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	4a3d      	ldr	r2, [pc, #244]	@ (8005248 <UART_Start_Receive_DMA+0x12c>)
 8005152:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	4a3c      	ldr	r2, [pc, #240]	@ (800524c <UART_Start_Receive_DMA+0x130>)
 800515a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005160:	2200      	movs	r2, #0
 8005162:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005164:	f107 0308 	add.w	r3, r7, #8
 8005168:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	f7fd fc48 	bl	8002a10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d019      	beq.n	80051d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80051c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80051c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80051cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e5      	bne.n	800519e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3314      	adds	r3, #20
 80051d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80051f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e5      	bne.n	80051d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	617b      	str	r3, [r7, #20]
   return(result);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800521c:	653b      	str	r3, [r7, #80]	@ 0x50
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005226:	627a      	str	r2, [r7, #36]	@ 0x24
 8005228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6a39      	ldr	r1, [r7, #32]
 800522c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	61fb      	str	r3, [r7, #28]
   return(result);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3760      	adds	r7, #96	@ 0x60
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	08004f1f 	.word	0x08004f1f
 8005248:	0800504b 	.word	0x0800504b
 800524c:	08005087 	.word	0x08005087

08005250 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b089      	sub	sp, #36	@ 0x24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	60bb      	str	r3, [r7, #8]
   return(result);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	61ba      	str	r2, [r7, #24]
 800527a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6979      	ldr	r1, [r7, #20]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	613b      	str	r3, [r7, #16]
   return(result);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005294:	bf00      	nop
 8005296:	3724      	adds	r7, #36	@ 0x24
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b095      	sub	sp, #84	@ 0x54
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80052ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e5      	bne.n	80052a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3314      	adds	r3, #20
 80052e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3314      	adds	r3, #20
 80052fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005314:	2b01      	cmp	r3, #1
 8005316:	d119      	bne.n	800534c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	60bb      	str	r3, [r7, #8]
   return(result);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f023 0310 	bic.w	r3, r3, #16
 800532e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005338:	61ba      	str	r2, [r7, #24]
 800533a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6979      	ldr	r1, [r7, #20]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800535a:	bf00      	nop
 800535c:	3754      	adds	r7, #84	@ 0x54
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff fd5b 	bl	8004e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b21      	cmp	r3, #33	@ 0x21
 80053a0:	d13e      	bne.n	8005420 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053aa:	d114      	bne.n	80053d6 <UART_Transmit_IT+0x48>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d110      	bne.n	80053d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	1c9a      	adds	r2, r3, #2
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	621a      	str	r2, [r3, #32]
 80053d4:	e008      	b.n	80053e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	1c59      	adds	r1, r3, #1
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6211      	str	r1, [r2, #32]
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	4619      	mov	r1, r3
 80053f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10f      	bne.n	800541c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800540a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800541a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	e000      	b.n	8005422 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005420:	2302      	movs	r3, #2
  }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005444:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff fccc 	bl	8004dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b08c      	sub	sp, #48	@ 0x30
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b22      	cmp	r3, #34	@ 0x22
 8005470:	f040 80ae 	bne.w	80055d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547c:	d117      	bne.n	80054ae <UART_Receive_IT+0x50>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d113      	bne.n	80054ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b29b      	uxth	r3, r3
 8005498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549c:	b29a      	uxth	r2, r3
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	1c9a      	adds	r2, r3, #2
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80054ac:	e026      	b.n	80054fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c0:	d007      	beq.n	80054d2 <UART_Receive_IT+0x74>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <UART_Receive_IT+0x82>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e008      	b.n	80054f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4619      	mov	r1, r3
 800550a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800550c:	2b00      	cmp	r3, #0
 800550e:	d15d      	bne.n	80055cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0220 	bic.w	r2, r2, #32
 800551e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800552e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	2b01      	cmp	r3, #1
 8005554:	d135      	bne.n	80055c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	613b      	str	r3, [r7, #16]
   return(result);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f023 0310 	bic.w	r3, r3, #16
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557c:	623a      	str	r2, [r7, #32]
 800557e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	69f9      	ldr	r1, [r7, #28]
 8005582:	6a3a      	ldr	r2, [r7, #32]
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	61bb      	str	r3, [r7, #24]
   return(result);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	2b10      	cmp	r3, #16
 800559c:	d10a      	bne.n	80055b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff fc48 	bl	8004e50 <HAL_UARTEx_RxEventCallback>
 80055c0:	e002      	b.n	80055c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff fc26 	bl	8004e14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e002      	b.n	80055d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3730      	adds	r7, #48	@ 0x30
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b0c0      	sub	sp, #256	@ 0x100
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	ea40 0301 	orr.w	r3, r0, r1
 8005604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	431a      	orrs	r2, r3
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	431a      	orrs	r2, r3
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005634:	f021 010c 	bic.w	r1, r1, #12
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005642:	430b      	orrs	r3, r1
 8005644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	6999      	ldr	r1, [r3, #24]
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	ea40 0301 	orr.w	r3, r0, r1
 8005662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b8f      	ldr	r3, [pc, #572]	@ (80058a8 <UART_SetConfig+0x2cc>)
 800566c:	429a      	cmp	r2, r3
 800566e:	d005      	beq.n	800567c <UART_SetConfig+0xa0>
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b8d      	ldr	r3, [pc, #564]	@ (80058ac <UART_SetConfig+0x2d0>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d104      	bne.n	8005686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7fe fb3e 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8005680:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005684:	e003      	b.n	800568e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005686:	f7fe fb25 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 800568a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005698:	f040 810c 	bne.w	80058b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	1891      	adds	r1, r2, r2
 80056b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056b6:	415b      	adcs	r3, r3
 80056b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056be:	4621      	mov	r1, r4
 80056c0:	eb12 0801 	adds.w	r8, r2, r1
 80056c4:	4629      	mov	r1, r5
 80056c6:	eb43 0901 	adc.w	r9, r3, r1
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056de:	4690      	mov	r8, r2
 80056e0:	4699      	mov	r9, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	eb18 0303 	adds.w	r3, r8, r3
 80056e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056ec:	462b      	mov	r3, r5
 80056ee:	eb49 0303 	adc.w	r3, r9, r3
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005702:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800570a:	460b      	mov	r3, r1
 800570c:	18db      	adds	r3, r3, r3
 800570e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005710:	4613      	mov	r3, r2
 8005712:	eb42 0303 	adc.w	r3, r2, r3
 8005716:	657b      	str	r3, [r7, #84]	@ 0x54
 8005718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800571c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005720:	f7fb fa8c 	bl	8000c3c <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4b61      	ldr	r3, [pc, #388]	@ (80058b0 <UART_SetConfig+0x2d4>)
 800572a:	fba3 2302 	umull	r2, r3, r3, r2
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	011c      	lsls	r4, r3, #4
 8005732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005736:	2200      	movs	r2, #0
 8005738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800573c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	1891      	adds	r1, r2, r2
 800574a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800574c:	415b      	adcs	r3, r3
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005754:	4641      	mov	r1, r8
 8005756:	eb12 0a01 	adds.w	sl, r2, r1
 800575a:	4649      	mov	r1, r9
 800575c:	eb43 0b01 	adc.w	fp, r3, r1
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800576c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005774:	4692      	mov	sl, r2
 8005776:	469b      	mov	fp, r3
 8005778:	4643      	mov	r3, r8
 800577a:	eb1a 0303 	adds.w	r3, sl, r3
 800577e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005782:	464b      	mov	r3, r9
 8005784:	eb4b 0303 	adc.w	r3, fp, r3
 8005788:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005798:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800579c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057a0:	460b      	mov	r3, r1
 80057a2:	18db      	adds	r3, r3, r3
 80057a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a6:	4613      	mov	r3, r2
 80057a8:	eb42 0303 	adc.w	r3, r2, r3
 80057ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057b6:	f7fb fa41 	bl	8000c3c <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	4b3b      	ldr	r3, [pc, #236]	@ (80058b0 <UART_SetConfig+0x2d4>)
 80057c2:	fba3 2301 	umull	r2, r3, r3, r1
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2264      	movs	r2, #100	@ 0x64
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	1acb      	subs	r3, r1, r3
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057d6:	4b36      	ldr	r3, [pc, #216]	@ (80058b0 <UART_SetConfig+0x2d4>)
 80057d8:	fba3 2302 	umull	r2, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057e4:	441c      	add	r4, r3
 80057e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005800:	415b      	adcs	r3, r3
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005808:	4641      	mov	r1, r8
 800580a:	1851      	adds	r1, r2, r1
 800580c:	6339      	str	r1, [r7, #48]	@ 0x30
 800580e:	4649      	mov	r1, r9
 8005810:	414b      	adcs	r3, r1
 8005812:	637b      	str	r3, [r7, #52]	@ 0x34
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005820:	4659      	mov	r1, fp
 8005822:	00cb      	lsls	r3, r1, #3
 8005824:	4651      	mov	r1, sl
 8005826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582a:	4651      	mov	r1, sl
 800582c:	00ca      	lsls	r2, r1, #3
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	4603      	mov	r3, r0
 8005834:	4642      	mov	r2, r8
 8005836:	189b      	adds	r3, r3, r2
 8005838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800583c:	464b      	mov	r3, r9
 800583e:	460a      	mov	r2, r1
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005854:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800585c:	460b      	mov	r3, r1
 800585e:	18db      	adds	r3, r3, r3
 8005860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005862:	4613      	mov	r3, r2
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800586e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005872:	f7fb f9e3 	bl	8000c3c <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <UART_SetConfig+0x2d4>)
 800587c:	fba3 1302 	umull	r1, r3, r3, r2
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	2164      	movs	r1, #100	@ 0x64
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	3332      	adds	r3, #50	@ 0x32
 800588e:	4a08      	ldr	r2, [pc, #32]	@ (80058b0 <UART_SetConfig+0x2d4>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	f003 0207 	and.w	r2, r3, #7
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4422      	add	r2, r4
 80058a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058a4:	e106      	b.n	8005ab4 <UART_SetConfig+0x4d8>
 80058a6:	bf00      	nop
 80058a8:	40011000 	.word	0x40011000
 80058ac:	40011400 	.word	0x40011400
 80058b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058c6:	4642      	mov	r2, r8
 80058c8:	464b      	mov	r3, r9
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	6239      	str	r1, [r7, #32]
 80058ce:	415b      	adcs	r3, r3
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058d6:	4641      	mov	r1, r8
 80058d8:	1854      	adds	r4, r2, r1
 80058da:	4649      	mov	r1, r9
 80058dc:	eb43 0501 	adc.w	r5, r3, r1
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	00eb      	lsls	r3, r5, #3
 80058ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ee:	00e2      	lsls	r2, r4, #3
 80058f0:	4614      	mov	r4, r2
 80058f2:	461d      	mov	r5, r3
 80058f4:	4643      	mov	r3, r8
 80058f6:	18e3      	adds	r3, r4, r3
 80058f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058fc:	464b      	mov	r3, r9
 80058fe:	eb45 0303 	adc.w	r3, r5, r3
 8005902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005912:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005922:	4629      	mov	r1, r5
 8005924:	008b      	lsls	r3, r1, #2
 8005926:	4621      	mov	r1, r4
 8005928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800592c:	4621      	mov	r1, r4
 800592e:	008a      	lsls	r2, r1, #2
 8005930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005934:	f7fb f982 	bl	8000c3c <__aeabi_uldivmod>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4b60      	ldr	r3, [pc, #384]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 800593e:	fba3 2302 	umull	r2, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	011c      	lsls	r4, r3, #4
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	1891      	adds	r1, r2, r2
 800595e:	61b9      	str	r1, [r7, #24]
 8005960:	415b      	adcs	r3, r3
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005968:	4641      	mov	r1, r8
 800596a:	1851      	adds	r1, r2, r1
 800596c:	6139      	str	r1, [r7, #16]
 800596e:	4649      	mov	r1, r9
 8005970:	414b      	adcs	r3, r1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005980:	4659      	mov	r1, fp
 8005982:	00cb      	lsls	r3, r1, #3
 8005984:	4651      	mov	r1, sl
 8005986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598a:	4651      	mov	r1, sl
 800598c:	00ca      	lsls	r2, r1, #3
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	4603      	mov	r3, r0
 8005994:	4642      	mov	r2, r8
 8005996:	189b      	adds	r3, r3, r2
 8005998:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800599c:	464b      	mov	r3, r9
 800599e:	460a      	mov	r2, r1
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059c0:	4649      	mov	r1, r9
 80059c2:	008b      	lsls	r3, r1, #2
 80059c4:	4641      	mov	r1, r8
 80059c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ca:	4641      	mov	r1, r8
 80059cc:	008a      	lsls	r2, r1, #2
 80059ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059d2:	f7fb f933 	bl	8000c3c <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	4b38      	ldr	r3, [pc, #224]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 80059de:	fba3 2301 	umull	r2, r3, r3, r1
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2264      	movs	r2, #100	@ 0x64
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	1acb      	subs	r3, r1, r3
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	3332      	adds	r3, #50	@ 0x32
 80059f0:	4a33      	ldr	r2, [pc, #204]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059fc:	441c      	add	r4, r3
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a06:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	1891      	adds	r1, r2, r2
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	415b      	adcs	r3, r3
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	1851      	adds	r1, r2, r1
 8005a20:	6039      	str	r1, [r7, #0]
 8005a22:	4649      	mov	r1, r9
 8005a24:	414b      	adcs	r3, r1
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a34:	4659      	mov	r1, fp
 8005a36:	00cb      	lsls	r3, r1, #3
 8005a38:	4651      	mov	r1, sl
 8005a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a3e:	4651      	mov	r1, sl
 8005a40:	00ca      	lsls	r2, r1, #3
 8005a42:	4610      	mov	r0, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	4603      	mov	r3, r0
 8005a48:	4642      	mov	r2, r8
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a4e:	464b      	mov	r3, r9
 8005a50:	460a      	mov	r2, r1
 8005a52:	eb42 0303 	adc.w	r3, r2, r3
 8005a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a62:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a70:	4649      	mov	r1, r9
 8005a72:	008b      	lsls	r3, r1, #2
 8005a74:	4641      	mov	r1, r8
 8005a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	008a      	lsls	r2, r1, #2
 8005a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a82:	f7fb f8db 	bl	8000c3c <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 8005a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	2164      	movs	r1, #100	@ 0x64
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	3332      	adds	r3, #50	@ 0x32
 8005a9e:	4a08      	ldr	r2, [pc, #32]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4422      	add	r2, r4
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005aba:	46bd      	mov	sp, r7
 8005abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac0:	51eb851f 	.word	0x51eb851f

08005ac4 <__NVIC_SetPriority>:
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	6039      	str	r1, [r7, #0]
 8005ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	db0a      	blt.n	8005aee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	490c      	ldr	r1, [pc, #48]	@ (8005b10 <__NVIC_SetPriority+0x4c>)
 8005ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae2:	0112      	lsls	r2, r2, #4
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005aec:	e00a      	b.n	8005b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	4908      	ldr	r1, [pc, #32]	@ (8005b14 <__NVIC_SetPriority+0x50>)
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	3b04      	subs	r3, #4
 8005afc:	0112      	lsls	r2, r2, #4
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	440b      	add	r3, r1
 8005b02:	761a      	strb	r2, [r3, #24]
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	e000e100 	.word	0xe000e100
 8005b14:	e000ed00 	.word	0xe000ed00

08005b18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	f06f 0004 	mvn.w	r0, #4
 8005b22:	f7ff ffcf 	bl	8005ac4 <__NVIC_SetPriority>
#endif
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b32:	f3ef 8305 	mrs	r3, IPSR
 8005b36:	603b      	str	r3, [r7, #0]
  return(result);
 8005b38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b3e:	f06f 0305 	mvn.w	r3, #5
 8005b42:	607b      	str	r3, [r7, #4]
 8005b44:	e00c      	b.n	8005b60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b46:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <osKernelInitialize+0x44>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d105      	bne.n	8005b5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b4e:	4b08      	ldr	r3, [pc, #32]	@ (8005b70 <osKernelInitialize+0x44>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	607b      	str	r3, [r7, #4]
 8005b58:	e002      	b.n	8005b60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b60:	687b      	ldr	r3, [r7, #4]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	200047fc 	.word	0x200047fc

08005b74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b7a:	f3ef 8305 	mrs	r3, IPSR
 8005b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b86:	f06f 0305 	mvn.w	r3, #5
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	e010      	b.n	8005bb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bbc <osKernelStart+0x48>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d109      	bne.n	8005baa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b96:	f7ff ffbf 	bl	8005b18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b9a:	4b08      	ldr	r3, [pc, #32]	@ (8005bbc <osKernelStart+0x48>)
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ba0:	f001 f87a 	bl	8006c98 <vTaskStartScheduler>
      stat = osOK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	e002      	b.n	8005bb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bb0:	687b      	ldr	r3, [r7, #4]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	200047fc 	.word	0x200047fc

08005bc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08e      	sub	sp, #56	@ 0x38
 8005bc4:	af04      	add	r7, sp, #16
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd0:	f3ef 8305 	mrs	r3, IPSR
 8005bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8005bd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d17e      	bne.n	8005cda <osThreadNew+0x11a>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d07b      	beq.n	8005cda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005be2:	2380      	movs	r3, #128	@ 0x80
 8005be4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005be6:	2318      	movs	r3, #24
 8005be8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bf2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d045      	beq.n	8005c86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <osThreadNew+0x48>
        name = attr->name;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d008      	beq.n	8005c2e <osThreadNew+0x6e>
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	2b38      	cmp	r3, #56	@ 0x38
 8005c20:	d805      	bhi.n	8005c2e <osThreadNew+0x6e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <osThreadNew+0x72>
        return (NULL);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e054      	b.n	8005cdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	089b      	lsrs	r3, r3, #2
 8005c40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00e      	beq.n	8005c68 <osThreadNew+0xa8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005c50:	d90a      	bls.n	8005c68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <osThreadNew+0xa8>
        mem = 1;
 8005c62:	2301      	movs	r3, #1
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	e010      	b.n	8005c8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10c      	bne.n	8005c8a <osThreadNew+0xca>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d108      	bne.n	8005c8a <osThreadNew+0xca>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <osThreadNew+0xca>
          mem = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	e001      	b.n	8005c8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d110      	bne.n	8005cb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c98:	9202      	str	r2, [sp, #8]
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6a3a      	ldr	r2, [r7, #32]
 8005ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 fe1a 	bl	80068e0 <xTaskCreateStatic>
 8005cac:	4603      	mov	r3, r0
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	e013      	b.n	8005cda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d110      	bne.n	8005cda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	f107 0310 	add.w	r3, r7, #16
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fe68 	bl	80069a0 <xTaskCreate>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d001      	beq.n	8005cda <osThreadNew+0x11a>
            hTask = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005cda:	693b      	ldr	r3, [r7, #16]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3728      	adds	r7, #40	@ 0x28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cec:	f3ef 8305 	mrs	r3, IPSR
 8005cf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <osDelay+0x1c>
    stat = osErrorISR;
 8005cf8:	f06f 0305 	mvn.w	r3, #5
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	e007      	b.n	8005d10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 ff8e 	bl	8006c2c <vTaskDelay>
    }
  }

  return (stat);
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a07      	ldr	r2, [pc, #28]	@ (8005d48 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4a06      	ldr	r2, [pc, #24]	@ (8005d4c <vApplicationGetIdleTaskMemory+0x30>)
 8005d32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2280      	movs	r2, #128	@ 0x80
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	20004800 	.word	0x20004800
 8005d4c:	2000485c 	.word	0x2000485c

08005d50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4a07      	ldr	r2, [pc, #28]	@ (8005d7c <vApplicationGetTimerTaskMemory+0x2c>)
 8005d60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4a06      	ldr	r2, [pc, #24]	@ (8005d80 <vApplicationGetTimerTaskMemory+0x30>)
 8005d66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d6e:	601a      	str	r2, [r3, #0]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20004a5c 	.word	0x20004a5c
 8005d80:	20004ab8 	.word	0x20004ab8

08005d84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0208 	add.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f103 0208 	add.w	r2, r3, #8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f103 0208 	add.w	r2, r3, #8
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	601a      	str	r2, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e3c:	d103      	bne.n	8005e46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e00c      	b.n	8005e60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e002      	b.n	8005e54 <vListInsert+0x2e>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d2f6      	bcs.n	8005e4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6892      	ldr	r2, [r2, #8]
 8005eae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6852      	ldr	r2, [r2, #4]
 8005eb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d103      	bne.n	8005ecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	1e5a      	subs	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10b      	bne.n	8005f18 <xQueueGenericReset+0x2c>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60bb      	str	r3, [r7, #8]
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	e7fd      	b.n	8005f14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f18:	f002 f89e 	bl	8008058 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f24:	68f9      	ldr	r1, [r7, #12]
 8005f26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f28:	fb01 f303 	mul.w	r3, r1, r3
 8005f2c:	441a      	add	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	441a      	add	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	22ff      	movs	r2, #255	@ 0xff
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	22ff      	movs	r2, #255	@ 0xff
 8005f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d114      	bne.n	8005f98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01a      	beq.n	8005fac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3310      	adds	r3, #16
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 f91a 	bl	80071b4 <xTaskRemoveFromEventList>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d012      	beq.n	8005fac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f86:	4b0d      	ldr	r3, [pc, #52]	@ (8005fbc <xQueueGenericReset+0xd0>)
 8005f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	e009      	b.n	8005fac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3310      	adds	r3, #16
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fef1 	bl	8005d84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3324      	adds	r3, #36	@ 0x24
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff feec 	bl	8005d84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fac:	f002 f886 	bl	80080bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fb0:	2301      	movs	r3, #1
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	e000ed04 	.word	0xe000ed04

08005fc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08e      	sub	sp, #56	@ 0x38
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10b      	bne.n	8005fec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	e7fd      	b.n	8006006 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <xQueueGenericCreateStatic+0x56>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <xQueueGenericCreateStatic+0x5a>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <xQueueGenericCreateStatic+0x5c>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	623b      	str	r3, [r7, #32]
}
 8006032:	bf00      	nop
 8006034:	bf00      	nop
 8006036:	e7fd      	b.n	8006034 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <xQueueGenericCreateStatic+0x84>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <xQueueGenericCreateStatic+0x88>
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <xQueueGenericCreateStatic+0x8a>
 8006048:	2300      	movs	r3, #0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	61fb      	str	r3, [r7, #28]
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006066:	2350      	movs	r3, #80	@ 0x50
 8006068:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b50      	cmp	r3, #80	@ 0x50
 800606e:	d00b      	beq.n	8006088 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	61bb      	str	r3, [r7, #24]
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	e7fd      	b.n	8006084 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006088:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00d      	beq.n	80060b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800609c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80060a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f805 	bl	80060ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3730      	adds	r7, #48	@ 0x30
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e002      	b.n	80060dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060e8:	2101      	movs	r1, #1
 80060ea:	69b8      	ldr	r0, [r7, #24]
 80060ec:	f7ff fefe 	bl	8005eec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060f8:	bf00      	nop
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08e      	sub	sp, #56	@ 0x38
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800610e:	2300      	movs	r3, #0
 8006110:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <xQueueGenericSend+0x34>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d103      	bne.n	8006142 <xQueueGenericSend+0x42>
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <xQueueGenericSend+0x46>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <xQueueGenericSend+0x48>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <xQueueGenericSend+0x64>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d103      	bne.n	8006172 <xQueueGenericSend+0x72>
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <xQueueGenericSend+0x76>
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <xQueueGenericSend+0x78>
 8006176:	2300      	movs	r3, #0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10b      	bne.n	8006194 <xQueueGenericSend+0x94>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	623b      	str	r3, [r7, #32]
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	e7fd      	b.n	8006190 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006194:	f001 f9f6 	bl	8007584 <xTaskGetSchedulerState>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <xQueueGenericSend+0xa4>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <xQueueGenericSend+0xa8>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <xQueueGenericSend+0xaa>
 80061a8:	2300      	movs	r3, #0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	61fb      	str	r3, [r7, #28]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061c6:	f001 ff47 	bl	8008058 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d302      	bcc.n	80061dc <xQueueGenericSend+0xdc>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d129      	bne.n	8006230 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061e2:	f000 fa0f 	bl	8006604 <prvCopyDataToQueue>
 80061e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d010      	beq.n	8006212 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	3324      	adds	r3, #36	@ 0x24
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 ffdd 	bl	80071b4 <xTaskRemoveFromEventList>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d013      	beq.n	8006228 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006200:	4b3f      	ldr	r3, [pc, #252]	@ (8006300 <xQueueGenericSend+0x200>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	e00a      	b.n	8006228 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006218:	4b39      	ldr	r3, [pc, #228]	@ (8006300 <xQueueGenericSend+0x200>)
 800621a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006228:	f001 ff48 	bl	80080bc <vPortExitCritical>
				return pdPASS;
 800622c:	2301      	movs	r3, #1
 800622e:	e063      	b.n	80062f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006236:	f001 ff41 	bl	80080bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800623a:	2300      	movs	r3, #0
 800623c:	e05c      	b.n	80062f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800623e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006244:	f107 0314 	add.w	r3, r7, #20
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f83f 	bl	80072cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800624e:	2301      	movs	r3, #1
 8006250:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006252:	f001 ff33 	bl	80080bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006256:	f000 fd87 	bl	8006d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800625a:	f001 fefd 	bl	8008058 <vPortEnterCritical>
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006264:	b25b      	sxtb	r3, r3
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800626a:	d103      	bne.n	8006274 <xQueueGenericSend+0x174>
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006280:	d103      	bne.n	800628a <xQueueGenericSend+0x18a>
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800628a:	f001 ff17 	bl	80080bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800628e:	1d3a      	adds	r2, r7, #4
 8006290:	f107 0314 	add.w	r3, r7, #20
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f001 f82e 	bl	80072f8 <xTaskCheckForTimeOut>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d124      	bne.n	80062ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062a4:	f000 faa6 	bl	80067f4 <prvIsQueueFull>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d018      	beq.n	80062e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	3310      	adds	r3, #16
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 ff2a 	bl	8007110 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062be:	f000 fa31 	bl	8006724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062c2:	f000 fd5f 	bl	8006d84 <xTaskResumeAll>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f47f af7c 	bne.w	80061c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80062ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <xQueueGenericSend+0x200>)
 80062d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	e772      	b.n	80061c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062e2:	f000 fa1f 	bl	8006724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e6:	f000 fd4d 	bl	8006d84 <xTaskResumeAll>
 80062ea:	e76c      	b.n	80061c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062ee:	f000 fa19 	bl	8006724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f2:	f000 fd47 	bl	8006d84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3738      	adds	r7, #56	@ 0x38
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	e000ed04 	.word	0xe000ed04

08006304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b090      	sub	sp, #64	@ 0x40
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	e7fd      	b.n	8006330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <xQueueGenericSendFromISR+0x3e>
 800633a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <xQueueGenericSendFromISR+0x42>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <xQueueGenericSendFromISR+0x44>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800635e:	bf00      	nop
 8006360:	bf00      	nop
 8006362:	e7fd      	b.n	8006360 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d103      	bne.n	8006372 <xQueueGenericSendFromISR+0x6e>
 800636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <xQueueGenericSendFromISR+0x72>
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <xQueueGenericSendFromISR+0x74>
 8006376:	2300      	movs	r3, #0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10b      	bne.n	8006394 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	623b      	str	r3, [r7, #32]
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	e7fd      	b.n	8006390 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006394:	f001 ff40 	bl	8008218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006398:	f3ef 8211 	mrs	r2, BASEPRI
 800639c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	61fa      	str	r2, [r7, #28]
 80063ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063bc:	429a      	cmp	r2, r3
 80063be:	d302      	bcc.n	80063c6 <xQueueGenericSendFromISR+0xc2>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d12f      	bne.n	8006426 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063dc:	f000 f912 	bl	8006604 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063e8:	d112      	bne.n	8006410 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	3324      	adds	r3, #36	@ 0x24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fedc 	bl	80071b4 <xTaskRemoveFromEventList>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00e      	beq.n	8006420 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e007      	b.n	8006420 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006414:	3301      	adds	r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	b25a      	sxtb	r2, r3
 800641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006420:	2301      	movs	r3, #1
 8006422:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006424:	e001      	b.n	800642a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006426:	2300      	movs	r3, #0
 8006428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800642a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006438:	4618      	mov	r0, r3
 800643a:	3740      	adds	r7, #64	@ 0x40
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08c      	sub	sp, #48	@ 0x30
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800644c:	2300      	movs	r3, #0
 800644e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <xQueueReceive+0x32>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	623b      	str	r3, [r7, #32]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d103      	bne.n	8006480 <xQueueReceive+0x40>
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <xQueueReceive+0x44>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <xQueueReceive+0x46>
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <xQueueReceive+0x62>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	61fb      	str	r3, [r7, #28]
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	e7fd      	b.n	800649e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064a2:	f001 f86f 	bl	8007584 <xTaskGetSchedulerState>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <xQueueReceive+0x72>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <xQueueReceive+0x76>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueReceive+0x78>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <xQueueReceive+0x94>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61bb      	str	r3, [r7, #24]
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	e7fd      	b.n	80064d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064d4:	f001 fdc0 	bl	8008058 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01f      	beq.n	8006524 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e8:	f000 f8f6 	bl	80066d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	1e5a      	subs	r2, r3, #1
 80064f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00f      	beq.n	800651c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fe:	3310      	adds	r3, #16
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fe57 	bl	80071b4 <xTaskRemoveFromEventList>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800650c:	4b3c      	ldr	r3, [pc, #240]	@ (8006600 <xQueueReceive+0x1c0>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800651c:	f001 fdce 	bl	80080bc <vPortExitCritical>
				return pdPASS;
 8006520:	2301      	movs	r3, #1
 8006522:	e069      	b.n	80065f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d103      	bne.n	8006532 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800652a:	f001 fdc7 	bl	80080bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800652e:	2300      	movs	r3, #0
 8006530:	e062      	b.n	80065f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006534:	2b00      	cmp	r3, #0
 8006536:	d106      	bne.n	8006546 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006538:	f107 0310 	add.w	r3, r7, #16
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fec5 	bl	80072cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006546:	f001 fdb9 	bl	80080bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800654a:	f000 fc0d 	bl	8006d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800654e:	f001 fd83 	bl	8008058 <vPortEnterCritical>
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006558:	b25b      	sxtb	r3, r3
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800655e:	d103      	bne.n	8006568 <xQueueReceive+0x128>
 8006560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800656e:	b25b      	sxtb	r3, r3
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006574:	d103      	bne.n	800657e <xQueueReceive+0x13e>
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800657e:	f001 fd9d 	bl	80080bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006582:	1d3a      	adds	r2, r7, #4
 8006584:	f107 0310 	add.w	r3, r7, #16
 8006588:	4611      	mov	r1, r2
 800658a:	4618      	mov	r0, r3
 800658c:	f000 feb4 	bl	80072f8 <xTaskCheckForTimeOut>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d123      	bne.n	80065de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006598:	f000 f916 	bl	80067c8 <prvIsQueueEmpty>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d017      	beq.n	80065d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a4:	3324      	adds	r3, #36	@ 0x24
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	4611      	mov	r1, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fdb0 	bl	8007110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065b2:	f000 f8b7 	bl	8006724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065b6:	f000 fbe5 	bl	8006d84 <xTaskResumeAll>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d189      	bne.n	80064d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80065c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006600 <xQueueReceive+0x1c0>)
 80065c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	e780      	b.n	80064d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065d4:	f000 f8a6 	bl	8006724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065d8:	f000 fbd4 	bl	8006d84 <xTaskResumeAll>
 80065dc:	e77a      	b.n	80064d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065e0:	f000 f8a0 	bl	8006724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065e4:	f000 fbce 	bl	8006d84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ea:	f000 f8ed 	bl	80067c8 <prvIsQueueEmpty>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f43f af6f 	beq.w	80064d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3730      	adds	r7, #48	@ 0x30
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10d      	bne.n	800663e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d14d      	bne.n	80066c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 ffc6 	bl	80075c0 <xTaskPriorityDisinherit>
 8006634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	609a      	str	r2, [r3, #8]
 800663c:	e043      	b.n	80066c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d119      	bne.n	8006678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6858      	ldr	r0, [r3, #4]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	461a      	mov	r2, r3
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	f00b fcff 	bl	8012052 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665c:	441a      	add	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	d32b      	bcc.n	80066c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	605a      	str	r2, [r3, #4]
 8006676:	e026      	b.n	80066c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68d8      	ldr	r0, [r3, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	461a      	mov	r2, r3
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	f00b fce5 	bl	8012052 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006690:	425b      	negs	r3, r3
 8006692:	441a      	add	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d207      	bcs.n	80066b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ac:	425b      	negs	r3, r3
 80066ae:	441a      	add	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d105      	bne.n	80066c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80066ce:	697b      	ldr	r3, [r7, #20]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d018      	beq.n	800671c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	441a      	add	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	429a      	cmp	r2, r3
 8006702:	d303      	bcc.n	800670c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68d9      	ldr	r1, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006714:	461a      	mov	r2, r3
 8006716:	6838      	ldr	r0, [r7, #0]
 8006718:	f00b fc9b 	bl	8012052 <memcpy>
	}
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800672c:	f001 fc94 	bl	8008058 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006738:	e011      	b.n	800675e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	d012      	beq.n	8006768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3324      	adds	r3, #36	@ 0x24
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fd34 	bl	80071b4 <xTaskRemoveFromEventList>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006752:	f000 fe35 	bl	80073c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	3b01      	subs	r3, #1
 800675a:	b2db      	uxtb	r3, r3
 800675c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800675e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006762:	2b00      	cmp	r3, #0
 8006764:	dce9      	bgt.n	800673a <prvUnlockQueue+0x16>
 8006766:	e000      	b.n	800676a <prvUnlockQueue+0x46>
					break;
 8006768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	22ff      	movs	r2, #255	@ 0xff
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006772:	f001 fca3 	bl	80080bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006776:	f001 fc6f 	bl	8008058 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006782:	e011      	b.n	80067a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d012      	beq.n	80067b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3310      	adds	r3, #16
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fd0f 	bl	80071b4 <xTaskRemoveFromEventList>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800679c:	f000 fe10 	bl	80073c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	dce9      	bgt.n	8006784 <prvUnlockQueue+0x60>
 80067b0:	e000      	b.n	80067b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	22ff      	movs	r2, #255	@ 0xff
 80067b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80067bc:	f001 fc7e 	bl	80080bc <vPortExitCritical>
}
 80067c0:	bf00      	nop
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067d0:	f001 fc42 	bl	8008058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	e001      	b.n	80067e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067e6:	f001 fc69 	bl	80080bc <vPortExitCritical>

	return xReturn;
 80067ea:	68fb      	ldr	r3, [r7, #12]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067fc:	f001 fc2c 	bl	8008058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006808:	429a      	cmp	r2, r3
 800680a:	d102      	bne.n	8006812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800680c:	2301      	movs	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e001      	b.n	8006816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006816:	f001 fc51 	bl	80080bc <vPortExitCritical>

	return xReturn;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e014      	b.n	800685e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006834:	4a0f      	ldr	r2, [pc, #60]	@ (8006874 <vQueueAddToRegistry+0x50>)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006840:	490c      	ldr	r1, [pc, #48]	@ (8006874 <vQueueAddToRegistry+0x50>)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800684a:	4a0a      	ldr	r2, [pc, #40]	@ (8006874 <vQueueAddToRegistry+0x50>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	4413      	add	r3, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006856:	e006      	b.n	8006866 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3301      	adds	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b07      	cmp	r3, #7
 8006862:	d9e7      	bls.n	8006834 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20004eb8 	.word	0x20004eb8

08006878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006888:	f001 fbe6 	bl	8008058 <vPortEnterCritical>
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006892:	b25b      	sxtb	r3, r3
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006898:	d103      	bne.n	80068a2 <vQueueWaitForMessageRestricted+0x2a>
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068ae:	d103      	bne.n	80068b8 <vQueueWaitForMessageRestricted+0x40>
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068b8:	f001 fc00 	bl	80080bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	3324      	adds	r3, #36	@ 0x24
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fc45 	bl	800715c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068d2:	6978      	ldr	r0, [r7, #20]
 80068d4:	f7ff ff26 	bl	8006724 <prvUnlockQueue>
	}
 80068d8:	bf00      	nop
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08e      	sub	sp, #56	@ 0x38
 80068e4:	af04      	add	r7, sp, #16
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <xTaskCreateStatic+0x2c>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	623b      	str	r3, [r7, #32]
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10b      	bne.n	800692a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	61fb      	str	r3, [r7, #28]
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	e7fd      	b.n	8006926 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800692a:	235c      	movs	r3, #92	@ 0x5c
 800692c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b5c      	cmp	r3, #92	@ 0x5c
 8006932:	d00b      	beq.n	800694c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	61bb      	str	r3, [r7, #24]
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	e7fd      	b.n	8006948 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800694c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800694e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01e      	beq.n	8006992 <xTaskCreateStatic+0xb2>
 8006954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01b      	beq.n	8006992 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006962:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800696c:	2300      	movs	r3, #0
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	9302      	str	r3, [sp, #8]
 8006974:	f107 0314 	add.w	r3, r7, #20
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f850 	bl	8006a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800698a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800698c:	f000 f8de 	bl	8006b4c <prvAddNewTaskToReadyList>
 8006990:	e001      	b.n	8006996 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006996:	697b      	ldr	r3, [r7, #20]
	}
 8006998:	4618      	mov	r0, r3
 800699a:	3728      	adds	r7, #40	@ 0x28
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08c      	sub	sp, #48	@ 0x30
 80069a4:	af04      	add	r7, sp, #16
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 fc71 	bl	800829c <pvPortMalloc>
 80069ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00e      	beq.n	80069e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069c2:	205c      	movs	r0, #92	@ 0x5c
 80069c4:	f001 fc6a 	bl	800829c <pvPortMalloc>
 80069c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80069d6:	e005      	b.n	80069e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069d8:	6978      	ldr	r0, [r7, #20]
 80069da:	f001 fd2d 	bl	8008438 <vPortFree>
 80069de:	e001      	b.n	80069e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d017      	beq.n	8006a1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	2300      	movs	r3, #0
 80069f6:	9303      	str	r3, [sp, #12]
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	9302      	str	r3, [sp, #8]
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f80e 	bl	8006a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a0e:	69f8      	ldr	r0, [r7, #28]
 8006a10:	f000 f89c 	bl	8006b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a14:	2301      	movs	r3, #1
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	e002      	b.n	8006a20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a20:	69bb      	ldr	r3, [r7, #24]
	}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3720      	adds	r7, #32
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b088      	sub	sp, #32
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	461a      	mov	r2, r3
 8006a42:	21a5      	movs	r1, #165	@ 0xa5
 8006a44:	f00b fa3c 	bl	8011ec0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a52:	3b01      	subs	r3, #1
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f023 0307 	bic.w	r3, r3, #7
 8006a60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	617b      	str	r3, [r7, #20]
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01f      	beq.n	8006aca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	e012      	b.n	8006ab6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	7819      	ldrb	r1, [r3, #0]
 8006a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3334      	adds	r3, #52	@ 0x34
 8006aa0:	460a      	mov	r2, r1
 8006aa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d006      	beq.n	8006abe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	2b0f      	cmp	r3, #15
 8006aba:	d9e9      	bls.n	8006a90 <prvInitialiseNewTask+0x66>
 8006abc:	e000      	b.n	8006ac0 <prvInitialiseNewTask+0x96>
			{
				break;
 8006abe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ac8:	e003      	b.n	8006ad2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad4:	2b37      	cmp	r3, #55	@ 0x37
 8006ad6:	d901      	bls.n	8006adc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ad8:	2337      	movs	r3, #55	@ 0x37
 8006ada:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ae6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aea:	2200      	movs	r2, #0
 8006aec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	3304      	adds	r3, #4
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff f966 	bl	8005dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	3318      	adds	r3, #24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff f961 	bl	8005dc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	69b8      	ldr	r0, [r7, #24]
 8006b2c:	f001 f966 	bl	8007dfc <pxPortInitialiseStack>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b42:	bf00      	nop
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b54:	f001 fa80 	bl	8008058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b58:	4b2d      	ldr	r3, [pc, #180]	@ (8006c10 <prvAddNewTaskToReadyList+0xc4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006c10 <prvAddNewTaskToReadyList+0xc4>)
 8006b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b62:	4b2c      	ldr	r3, [pc, #176]	@ (8006c14 <prvAddNewTaskToReadyList+0xc8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006c14 <prvAddNewTaskToReadyList+0xc8>)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b70:	4b27      	ldr	r3, [pc, #156]	@ (8006c10 <prvAddNewTaskToReadyList+0xc4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d110      	bne.n	8006b9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b78:	f000 fc46 	bl	8007408 <prvInitialiseTaskLists>
 8006b7c:	e00d      	b.n	8006b9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b7e:	4b26      	ldr	r3, [pc, #152]	@ (8006c18 <prvAddNewTaskToReadyList+0xcc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b86:	4b23      	ldr	r3, [pc, #140]	@ (8006c14 <prvAddNewTaskToReadyList+0xc8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d802      	bhi.n	8006b9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b94:	4a1f      	ldr	r2, [pc, #124]	@ (8006c14 <prvAddNewTaskToReadyList+0xc8>)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b9a:	4b20      	ldr	r3, [pc, #128]	@ (8006c1c <prvAddNewTaskToReadyList+0xd0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8006c1c <prvAddNewTaskToReadyList+0xd0>)
 8006ba2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8006c1c <prvAddNewTaskToReadyList+0xd0>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c20 <prvAddNewTaskToReadyList+0xd4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d903      	bls.n	8006bc0 <prvAddNewTaskToReadyList+0x74>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbc:	4a18      	ldr	r2, [pc, #96]	@ (8006c20 <prvAddNewTaskToReadyList+0xd4>)
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4a15      	ldr	r2, [pc, #84]	@ (8006c24 <prvAddNewTaskToReadyList+0xd8>)
 8006bce:	441a      	add	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f7ff f901 	bl	8005dde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bdc:	f001 fa6e 	bl	80080bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006be0:	4b0d      	ldr	r3, [pc, #52]	@ (8006c18 <prvAddNewTaskToReadyList+0xcc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00e      	beq.n	8006c06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006be8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c14 <prvAddNewTaskToReadyList+0xc8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d207      	bcs.n	8006c06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8006c28 <prvAddNewTaskToReadyList+0xdc>)
 8006bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	200053cc 	.word	0x200053cc
 8006c14:	20004ef8 	.word	0x20004ef8
 8006c18:	200053d8 	.word	0x200053d8
 8006c1c:	200053e8 	.word	0x200053e8
 8006c20:	200053d4 	.word	0x200053d4
 8006c24:	20004efc 	.word	0x20004efc
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d018      	beq.n	8006c70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c3e:	4b14      	ldr	r3, [pc, #80]	@ (8006c90 <vTaskDelay+0x64>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <vTaskDelay+0x32>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60bb      	str	r3, [r7, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	e7fd      	b.n	8006c5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c5e:	f000 f883 	bl	8006d68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c62:	2100      	movs	r1, #0
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fd1b 	bl	80076a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c6a:	f000 f88b 	bl	8006d84 <xTaskResumeAll>
 8006c6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d107      	bne.n	8006c86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006c76:	4b07      	ldr	r3, [pc, #28]	@ (8006c94 <vTaskDelay+0x68>)
 8006c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c86:	bf00      	nop
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	200053f4 	.word	0x200053f4
 8006c94:	e000ed04 	.word	0xe000ed04

08006c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	@ 0x28
 8006c9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ca6:	463a      	mov	r2, r7
 8006ca8:	1d39      	adds	r1, r7, #4
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff f834 	bl	8005d1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	9202      	str	r2, [sp, #8]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	460a      	mov	r2, r1
 8006cc6:	4922      	ldr	r1, [pc, #136]	@ (8006d50 <vTaskStartScheduler+0xb8>)
 8006cc8:	4822      	ldr	r0, [pc, #136]	@ (8006d54 <vTaskStartScheduler+0xbc>)
 8006cca:	f7ff fe09 	bl	80068e0 <xTaskCreateStatic>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	4a21      	ldr	r2, [pc, #132]	@ (8006d58 <vTaskStartScheduler+0xc0>)
 8006cd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cd4:	4b20      	ldr	r3, [pc, #128]	@ (8006d58 <vTaskStartScheduler+0xc0>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	e001      	b.n	8006ce6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d102      	bne.n	8006cf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006cec:	f000 fd2c 	bl	8007748 <xTimerCreateTimerTask>
 8006cf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d116      	bne.n	8006d26 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	613b      	str	r3, [r7, #16]
}
 8006d0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d0c:	4b13      	ldr	r3, [pc, #76]	@ (8006d5c <vTaskStartScheduler+0xc4>)
 8006d0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d14:	4b12      	ldr	r3, [pc, #72]	@ (8006d60 <vTaskStartScheduler+0xc8>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d1a:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <vTaskStartScheduler+0xcc>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d20:	f001 f8f6 	bl	8007f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d24:	e00f      	b.n	8006d46 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d2c:	d10b      	bne.n	8006d46 <vTaskStartScheduler+0xae>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	60fb      	str	r3, [r7, #12]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <vTaskStartScheduler+0xaa>
}
 8006d46:	bf00      	nop
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	08012e64 	.word	0x08012e64
 8006d54:	080073d9 	.word	0x080073d9
 8006d58:	200053f0 	.word	0x200053f0
 8006d5c:	200053ec 	.word	0x200053ec
 8006d60:	200053d8 	.word	0x200053d8
 8006d64:	200053d0 	.word	0x200053d0

08006d68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d6c:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <vTaskSuspendAll+0x18>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3301      	adds	r3, #1
 8006d72:	4a03      	ldr	r2, [pc, #12]	@ (8006d80 <vTaskSuspendAll+0x18>)
 8006d74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d76:	bf00      	nop
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	200053f4 	.word	0x200053f4

08006d84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d92:	4b42      	ldr	r3, [pc, #264]	@ (8006e9c <xTaskResumeAll+0x118>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10b      	bne.n	8006db2 <xTaskResumeAll+0x2e>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	603b      	str	r3, [r7, #0]
}
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	e7fd      	b.n	8006dae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006db2:	f001 f951 	bl	8008058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006db6:	4b39      	ldr	r3, [pc, #228]	@ (8006e9c <xTaskResumeAll+0x118>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	4a37      	ldr	r2, [pc, #220]	@ (8006e9c <xTaskResumeAll+0x118>)
 8006dbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc0:	4b36      	ldr	r3, [pc, #216]	@ (8006e9c <xTaskResumeAll+0x118>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d162      	bne.n	8006e8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006dc8:	4b35      	ldr	r3, [pc, #212]	@ (8006ea0 <xTaskResumeAll+0x11c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d05e      	beq.n	8006e8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dd0:	e02f      	b.n	8006e32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd2:	4b34      	ldr	r3, [pc, #208]	@ (8006ea4 <xTaskResumeAll+0x120>)
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3318      	adds	r3, #24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff f85a 	bl	8005e98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3304      	adds	r3, #4
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff f855 	bl	8005e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df2:	4b2d      	ldr	r3, [pc, #180]	@ (8006ea8 <xTaskResumeAll+0x124>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d903      	bls.n	8006e02 <xTaskResumeAll+0x7e>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8006ea8 <xTaskResumeAll+0x124>)
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4a27      	ldr	r2, [pc, #156]	@ (8006eac <xTaskResumeAll+0x128>)
 8006e10:	441a      	add	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3304      	adds	r3, #4
 8006e16:	4619      	mov	r1, r3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	f7fe ffe0 	bl	8005dde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e22:	4b23      	ldr	r3, [pc, #140]	@ (8006eb0 <xTaskResumeAll+0x12c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d302      	bcc.n	8006e32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006e2c:	4b21      	ldr	r3, [pc, #132]	@ (8006eb4 <xTaskResumeAll+0x130>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e32:	4b1c      	ldr	r3, [pc, #112]	@ (8006ea4 <xTaskResumeAll+0x120>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1cb      	bne.n	8006dd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e40:	f000 fb80 	bl	8007544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e44:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb8 <xTaskResumeAll+0x134>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d010      	beq.n	8006e72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e50:	f000 f846 	bl	8006ee0 <xTaskIncrementTick>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006e5a:	4b16      	ldr	r3, [pc, #88]	@ (8006eb4 <xTaskResumeAll+0x130>)
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1f1      	bne.n	8006e50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006e6c:	4b12      	ldr	r3, [pc, #72]	@ (8006eb8 <xTaskResumeAll+0x134>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e72:	4b10      	ldr	r3, [pc, #64]	@ (8006eb4 <xTaskResumeAll+0x130>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ebc <xTaskResumeAll+0x138>)
 8006e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e8e:	f001 f915 	bl	80080bc <vPortExitCritical>

	return xAlreadyYielded;
 8006e92:	68bb      	ldr	r3, [r7, #8]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	200053f4 	.word	0x200053f4
 8006ea0:	200053cc 	.word	0x200053cc
 8006ea4:	2000538c 	.word	0x2000538c
 8006ea8:	200053d4 	.word	0x200053d4
 8006eac:	20004efc 	.word	0x20004efc
 8006eb0:	20004ef8 	.word	0x20004ef8
 8006eb4:	200053e0 	.word	0x200053e0
 8006eb8:	200053dc 	.word	0x200053dc
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ec6:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <xTaskGetTickCount+0x1c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ecc:	687b      	ldr	r3, [r7, #4]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	200053d0 	.word	0x200053d0

08006ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eea:	4b4f      	ldr	r3, [pc, #316]	@ (8007028 <xTaskIncrementTick+0x148>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 8090 	bne.w	8007014 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800702c <xTaskIncrementTick+0x14c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006efc:	4a4b      	ldr	r2, [pc, #300]	@ (800702c <xTaskIncrementTick+0x14c>)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d121      	bne.n	8006f4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f08:	4b49      	ldr	r3, [pc, #292]	@ (8007030 <xTaskIncrementTick+0x150>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	603b      	str	r3, [r7, #0]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <xTaskIncrementTick+0x46>
 8006f2a:	4b41      	ldr	r3, [pc, #260]	@ (8007030 <xTaskIncrementTick+0x150>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	4b40      	ldr	r3, [pc, #256]	@ (8007034 <xTaskIncrementTick+0x154>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a3e      	ldr	r2, [pc, #248]	@ (8007030 <xTaskIncrementTick+0x150>)
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	4a3e      	ldr	r2, [pc, #248]	@ (8007034 <xTaskIncrementTick+0x154>)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8007038 <xTaskIncrementTick+0x158>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	4a3c      	ldr	r2, [pc, #240]	@ (8007038 <xTaskIncrementTick+0x158>)
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	f000 fafc 	bl	8007544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800703c <xTaskIncrementTick+0x15c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d349      	bcc.n	8006fea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f56:	4b36      	ldr	r3, [pc, #216]	@ (8007030 <xTaskIncrementTick+0x150>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f60:	4b36      	ldr	r3, [pc, #216]	@ (800703c <xTaskIncrementTick+0x15c>)
 8006f62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f66:	601a      	str	r2, [r3, #0]
					break;
 8006f68:	e03f      	b.n	8006fea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f6a:	4b31      	ldr	r3, [pc, #196]	@ (8007030 <xTaskIncrementTick+0x150>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d203      	bcs.n	8006f8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f82:	4a2e      	ldr	r2, [pc, #184]	@ (800703c <xTaskIncrementTick+0x15c>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f88:	e02f      	b.n	8006fea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe ff82 	bl	8005e98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3318      	adds	r3, #24
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe ff79 	bl	8005e98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006faa:	4b25      	ldr	r3, [pc, #148]	@ (8007040 <xTaskIncrementTick+0x160>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d903      	bls.n	8006fba <xTaskIncrementTick+0xda>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb6:	4a22      	ldr	r2, [pc, #136]	@ (8007040 <xTaskIncrementTick+0x160>)
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8007044 <xTaskIncrementTick+0x164>)
 8006fc8:	441a      	add	r2, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	f7fe ff04 	bl	8005dde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	4b1b      	ldr	r3, [pc, #108]	@ (8007048 <xTaskIncrementTick+0x168>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d3b8      	bcc.n	8006f56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fe8:	e7b5      	b.n	8006f56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fea:	4b17      	ldr	r3, [pc, #92]	@ (8007048 <xTaskIncrementTick+0x168>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff0:	4914      	ldr	r1, [pc, #80]	@ (8007044 <xTaskIncrementTick+0x164>)
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d901      	bls.n	8007006 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007002:	2301      	movs	r3, #1
 8007004:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007006:	4b11      	ldr	r3, [pc, #68]	@ (800704c <xTaskIncrementTick+0x16c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800700e:	2301      	movs	r3, #1
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e004      	b.n	800701e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007014:	4b0e      	ldr	r3, [pc, #56]	@ (8007050 <xTaskIncrementTick+0x170>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	4a0d      	ldr	r2, [pc, #52]	@ (8007050 <xTaskIncrementTick+0x170>)
 800701c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800701e:	697b      	ldr	r3, [r7, #20]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	200053f4 	.word	0x200053f4
 800702c:	200053d0 	.word	0x200053d0
 8007030:	20005384 	.word	0x20005384
 8007034:	20005388 	.word	0x20005388
 8007038:	200053e4 	.word	0x200053e4
 800703c:	200053ec 	.word	0x200053ec
 8007040:	200053d4 	.word	0x200053d4
 8007044:	20004efc 	.word	0x20004efc
 8007048:	20004ef8 	.word	0x20004ef8
 800704c:	200053e0 	.word	0x200053e0
 8007050:	200053dc 	.word	0x200053dc

08007054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800705a:	4b28      	ldr	r3, [pc, #160]	@ (80070fc <vTaskSwitchContext+0xa8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007062:	4b27      	ldr	r3, [pc, #156]	@ (8007100 <vTaskSwitchContext+0xac>)
 8007064:	2201      	movs	r2, #1
 8007066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007068:	e042      	b.n	80070f0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800706a:	4b25      	ldr	r3, [pc, #148]	@ (8007100 <vTaskSwitchContext+0xac>)
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007070:	4b24      	ldr	r3, [pc, #144]	@ (8007104 <vTaskSwitchContext+0xb0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60fb      	str	r3, [r7, #12]
 8007076:	e011      	b.n	800709c <vTaskSwitchContext+0x48>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10b      	bne.n	8007096 <vTaskSwitchContext+0x42>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	607b      	str	r3, [r7, #4]
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	e7fd      	b.n	8007092 <vTaskSwitchContext+0x3e>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3b01      	subs	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	491a      	ldr	r1, [pc, #104]	@ (8007108 <vTaskSwitchContext+0xb4>)
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0e3      	beq.n	8007078 <vTaskSwitchContext+0x24>
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4613      	mov	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4a13      	ldr	r2, [pc, #76]	@ (8007108 <vTaskSwitchContext+0xb4>)
 80070bc:	4413      	add	r3, r2
 80070be:	60bb      	str	r3, [r7, #8]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	605a      	str	r2, [r3, #4]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	3308      	adds	r3, #8
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d104      	bne.n	80070e0 <vTaskSwitchContext+0x8c>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	605a      	str	r2, [r3, #4]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	4a09      	ldr	r2, [pc, #36]	@ (800710c <vTaskSwitchContext+0xb8>)
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	4a06      	ldr	r2, [pc, #24]	@ (8007104 <vTaskSwitchContext+0xb0>)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6013      	str	r3, [r2, #0]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	200053f4 	.word	0x200053f4
 8007100:	200053e0 	.word	0x200053e0
 8007104:	200053d4 	.word	0x200053d4
 8007108:	20004efc 	.word	0x20004efc
 800710c:	20004ef8 	.word	0x20004ef8

08007110 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007138:	4b07      	ldr	r3, [pc, #28]	@ (8007158 <vTaskPlaceOnEventList+0x48>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3318      	adds	r3, #24
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fe fe70 	bl	8005e26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007146:	2101      	movs	r1, #1
 8007148:	6838      	ldr	r0, [r7, #0]
 800714a:	f000 faa9 	bl	80076a0 <prvAddCurrentTaskToDelayedList>
}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20004ef8 	.word	0x20004ef8

0800715c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10b      	bne.n	8007186 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	617b      	str	r3, [r7, #20]
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	e7fd      	b.n	8007182 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007186:	4b0a      	ldr	r3, [pc, #40]	@ (80071b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3318      	adds	r3, #24
 800718c:	4619      	mov	r1, r3
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f7fe fe25 	bl	8005dde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800719a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800719e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	68b8      	ldr	r0, [r7, #8]
 80071a4:	f000 fa7c 	bl	80076a0 <prvAddCurrentTaskToDelayedList>
	}
 80071a8:	bf00      	nop
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20004ef8 	.word	0x20004ef8

080071b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	60fb      	str	r3, [r7, #12]
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	e7fd      	b.n	80071de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	3318      	adds	r3, #24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fe56 	bl	8005e98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007264 <xTaskRemoveFromEventList+0xb0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11d      	bne.n	8007230 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe fe4d 	bl	8005e98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007202:	4b19      	ldr	r3, [pc, #100]	@ (8007268 <xTaskRemoveFromEventList+0xb4>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d903      	bls.n	8007212 <xTaskRemoveFromEventList+0x5e>
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	4a16      	ldr	r2, [pc, #88]	@ (8007268 <xTaskRemoveFromEventList+0xb4>)
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4a13      	ldr	r2, [pc, #76]	@ (800726c <xTaskRemoveFromEventList+0xb8>)
 8007220:	441a      	add	r2, r3
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7fe fdd8 	bl	8005dde <vListInsertEnd>
 800722e:	e005      	b.n	800723c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	3318      	adds	r3, #24
 8007234:	4619      	mov	r1, r3
 8007236:	480e      	ldr	r0, [pc, #56]	@ (8007270 <xTaskRemoveFromEventList+0xbc>)
 8007238:	f7fe fdd1 	bl	8005dde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007240:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <xTaskRemoveFromEventList+0xc0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	429a      	cmp	r2, r3
 8007248:	d905      	bls.n	8007256 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800724a:	2301      	movs	r3, #1
 800724c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800724e:	4b0a      	ldr	r3, [pc, #40]	@ (8007278 <xTaskRemoveFromEventList+0xc4>)
 8007250:	2201      	movs	r2, #1
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e001      	b.n	800725a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800725a:	697b      	ldr	r3, [r7, #20]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200053f4 	.word	0x200053f4
 8007268:	200053d4 	.word	0x200053d4
 800726c:	20004efc 	.word	0x20004efc
 8007270:	2000538c 	.word	0x2000538c
 8007274:	20004ef8 	.word	0x20004ef8
 8007278:	200053e0 	.word	0x200053e0

0800727c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60fb      	str	r3, [r7, #12]
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	e7fd      	b.n	800729e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80072a2:	f000 fed9 	bl	8008058 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072a6:	4b07      	ldr	r3, [pc, #28]	@ (80072c4 <vTaskSetTimeOutState+0x48>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80072ae:	4b06      	ldr	r3, [pc, #24]	@ (80072c8 <vTaskSetTimeOutState+0x4c>)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80072b6:	f000 ff01 	bl	80080bc <vPortExitCritical>
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	200053e4 	.word	0x200053e4
 80072c8:	200053d0 	.word	0x200053d0

080072cc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072d4:	4b06      	ldr	r3, [pc, #24]	@ (80072f0 <vTaskInternalSetTimeOutState+0x24>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072dc:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <vTaskInternalSetTimeOutState+0x28>)
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	605a      	str	r2, [r3, #4]
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	200053e4 	.word	0x200053e4
 80072f4:	200053d0 	.word	0x200053d0

080072f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	613b      	str	r3, [r7, #16]
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10b      	bne.n	800733e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60fb      	str	r3, [r7, #12]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800733e:	f000 fe8b 	bl	8008058 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007342:	4b1d      	ldr	r3, [pc, #116]	@ (80073b8 <xTaskCheckForTimeOut+0xc0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800735a:	d102      	bne.n	8007362 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	61fb      	str	r3, [r7, #28]
 8007360:	e023      	b.n	80073aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b15      	ldr	r3, [pc, #84]	@ (80073bc <xTaskCheckForTimeOut+0xc4>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d007      	beq.n	800737e <xTaskCheckForTimeOut+0x86>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	429a      	cmp	r2, r3
 8007376:	d302      	bcc.n	800737e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	e015      	b.n	80073aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	429a      	cmp	r2, r3
 8007386:	d20b      	bcs.n	80073a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff ff99 	bl	80072cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	61fb      	str	r3, [r7, #28]
 800739e:	e004      	b.n	80073aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073a6:	2301      	movs	r3, #1
 80073a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073aa:	f000 fe87 	bl	80080bc <vPortExitCritical>

	return xReturn;
 80073ae:	69fb      	ldr	r3, [r7, #28]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	200053d0 	.word	0x200053d0
 80073bc:	200053e4 	.word	0x200053e4

080073c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073c0:	b480      	push	{r7}
 80073c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073c4:	4b03      	ldr	r3, [pc, #12]	@ (80073d4 <vTaskMissedYield+0x14>)
 80073c6:	2201      	movs	r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
}
 80073ca:	bf00      	nop
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	200053e0 	.word	0x200053e0

080073d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073e0:	f000 f852 	bl	8007488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073e4:	4b06      	ldr	r3, [pc, #24]	@ (8007400 <prvIdleTask+0x28>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d9f9      	bls.n	80073e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073ec:	4b05      	ldr	r3, [pc, #20]	@ (8007404 <prvIdleTask+0x2c>)
 80073ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073fc:	e7f0      	b.n	80073e0 <prvIdleTask+0x8>
 80073fe:	bf00      	nop
 8007400:	20004efc 	.word	0x20004efc
 8007404:	e000ed04 	.word	0xe000ed04

08007408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800740e:	2300      	movs	r3, #0
 8007410:	607b      	str	r3, [r7, #4]
 8007412:	e00c      	b.n	800742e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4a12      	ldr	r2, [pc, #72]	@ (8007468 <prvInitialiseTaskLists+0x60>)
 8007420:	4413      	add	r3, r2
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe fcae 	bl	8005d84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3301      	adds	r3, #1
 800742c:	607b      	str	r3, [r7, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b37      	cmp	r3, #55	@ 0x37
 8007432:	d9ef      	bls.n	8007414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007434:	480d      	ldr	r0, [pc, #52]	@ (800746c <prvInitialiseTaskLists+0x64>)
 8007436:	f7fe fca5 	bl	8005d84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800743a:	480d      	ldr	r0, [pc, #52]	@ (8007470 <prvInitialiseTaskLists+0x68>)
 800743c:	f7fe fca2 	bl	8005d84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007440:	480c      	ldr	r0, [pc, #48]	@ (8007474 <prvInitialiseTaskLists+0x6c>)
 8007442:	f7fe fc9f 	bl	8005d84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007446:	480c      	ldr	r0, [pc, #48]	@ (8007478 <prvInitialiseTaskLists+0x70>)
 8007448:	f7fe fc9c 	bl	8005d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800744c:	480b      	ldr	r0, [pc, #44]	@ (800747c <prvInitialiseTaskLists+0x74>)
 800744e:	f7fe fc99 	bl	8005d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007452:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <prvInitialiseTaskLists+0x78>)
 8007454:	4a05      	ldr	r2, [pc, #20]	@ (800746c <prvInitialiseTaskLists+0x64>)
 8007456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007458:	4b0a      	ldr	r3, [pc, #40]	@ (8007484 <prvInitialiseTaskLists+0x7c>)
 800745a:	4a05      	ldr	r2, [pc, #20]	@ (8007470 <prvInitialiseTaskLists+0x68>)
 800745c:	601a      	str	r2, [r3, #0]
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20004efc 	.word	0x20004efc
 800746c:	2000535c 	.word	0x2000535c
 8007470:	20005370 	.word	0x20005370
 8007474:	2000538c 	.word	0x2000538c
 8007478:	200053a0 	.word	0x200053a0
 800747c:	200053b8 	.word	0x200053b8
 8007480:	20005384 	.word	0x20005384
 8007484:	20005388 	.word	0x20005388

08007488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800748e:	e019      	b.n	80074c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007490:	f000 fde2 	bl	8008058 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007494:	4b10      	ldr	r3, [pc, #64]	@ (80074d8 <prvCheckTasksWaitingTermination+0x50>)
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3304      	adds	r3, #4
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fe fcf9 	bl	8005e98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074a6:	4b0d      	ldr	r3, [pc, #52]	@ (80074dc <prvCheckTasksWaitingTermination+0x54>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	4a0b      	ldr	r2, [pc, #44]	@ (80074dc <prvCheckTasksWaitingTermination+0x54>)
 80074ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074b0:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <prvCheckTasksWaitingTermination+0x58>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	4a0a      	ldr	r2, [pc, #40]	@ (80074e0 <prvCheckTasksWaitingTermination+0x58>)
 80074b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074ba:	f000 fdff 	bl	80080bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f810 	bl	80074e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074c4:	4b06      	ldr	r3, [pc, #24]	@ (80074e0 <prvCheckTasksWaitingTermination+0x58>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e1      	bne.n	8007490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200053a0 	.word	0x200053a0
 80074dc:	200053cc 	.word	0x200053cc
 80074e0:	200053b4 	.word	0x200053b4

080074e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d108      	bne.n	8007508 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 ff9c 	bl	8008438 <vPortFree>
				vPortFree( pxTCB );
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 ff99 	bl	8008438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007506:	e019      	b.n	800753c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800750e:	2b01      	cmp	r3, #1
 8007510:	d103      	bne.n	800751a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 ff90 	bl	8008438 <vPortFree>
	}
 8007518:	e010      	b.n	800753c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007520:	2b02      	cmp	r3, #2
 8007522:	d00b      	beq.n	800753c <prvDeleteTCB+0x58>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	60fb      	str	r3, [r7, #12]
}
 8007536:	bf00      	nop
 8007538:	bf00      	nop
 800753a:	e7fd      	b.n	8007538 <prvDeleteTCB+0x54>
	}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800754a:	4b0c      	ldr	r3, [pc, #48]	@ (800757c <prvResetNextTaskUnblockTime+0x38>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007554:	4b0a      	ldr	r3, [pc, #40]	@ (8007580 <prvResetNextTaskUnblockTime+0x3c>)
 8007556:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800755a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800755c:	e008      	b.n	8007570 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755e:	4b07      	ldr	r3, [pc, #28]	@ (800757c <prvResetNextTaskUnblockTime+0x38>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	4a04      	ldr	r2, [pc, #16]	@ (8007580 <prvResetNextTaskUnblockTime+0x3c>)
 800756e:	6013      	str	r3, [r2, #0]
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	20005384 	.word	0x20005384
 8007580:	200053ec 	.word	0x200053ec

08007584 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800758a:	4b0b      	ldr	r3, [pc, #44]	@ (80075b8 <xTaskGetSchedulerState+0x34>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d102      	bne.n	8007598 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007592:	2301      	movs	r3, #1
 8007594:	607b      	str	r3, [r7, #4]
 8007596:	e008      	b.n	80075aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007598:	4b08      	ldr	r3, [pc, #32]	@ (80075bc <xTaskGetSchedulerState+0x38>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d102      	bne.n	80075a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075a0:	2302      	movs	r3, #2
 80075a2:	607b      	str	r3, [r7, #4]
 80075a4:	e001      	b.n	80075aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075a6:	2300      	movs	r3, #0
 80075a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075aa:	687b      	ldr	r3, [r7, #4]
	}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	200053d8 	.word	0x200053d8
 80075bc:	200053f4 	.word	0x200053f4

080075c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d058      	beq.n	8007688 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007694 <xTaskPriorityDisinherit+0xd4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d00b      	beq.n	80075f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60fb      	str	r3, [r7, #12]
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	e7fd      	b.n	80075f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10b      	bne.n	8007618 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	60bb      	str	r3, [r7, #8]
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	e7fd      	b.n	8007614 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761c:	1e5a      	subs	r2, r3, #1
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800762a:	429a      	cmp	r2, r3
 800762c:	d02c      	beq.n	8007688 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007632:	2b00      	cmp	r3, #0
 8007634:	d128      	bne.n	8007688 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fc2c 	bl	8005e98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007658:	4b0f      	ldr	r3, [pc, #60]	@ (8007698 <xTaskPriorityDisinherit+0xd8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d903      	bls.n	8007668 <xTaskPriorityDisinherit+0xa8>
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	4a0c      	ldr	r2, [pc, #48]	@ (8007698 <xTaskPriorityDisinherit+0xd8>)
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4a09      	ldr	r2, [pc, #36]	@ (800769c <xTaskPriorityDisinherit+0xdc>)
 8007676:	441a      	add	r2, r3
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fe fbad 	bl	8005dde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007684:	2301      	movs	r3, #1
 8007686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007688:	697b      	ldr	r3, [r7, #20]
	}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20004ef8 	.word	0x20004ef8
 8007698:	200053d4 	.word	0x200053d4
 800769c:	20004efc 	.word	0x20004efc

080076a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076aa:	4b21      	ldr	r3, [pc, #132]	@ (8007730 <prvAddCurrentTaskToDelayedList+0x90>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076b0:	4b20      	ldr	r3, [pc, #128]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe fbee 	bl	8005e98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076c2:	d10a      	bne.n	80076da <prvAddCurrentTaskToDelayedList+0x3a>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4819      	ldr	r0, [pc, #100]	@ (8007738 <prvAddCurrentTaskToDelayedList+0x98>)
 80076d4:	f7fe fb83 	bl	8005dde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076d8:	e026      	b.n	8007728 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4413      	add	r3, r2
 80076e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076e2:	4b14      	ldr	r3, [pc, #80]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d209      	bcs.n	8007706 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076f2:	4b12      	ldr	r3, [pc, #72]	@ (800773c <prvAddCurrentTaskToDelayedList+0x9c>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f7fe fb91 	bl	8005e26 <vListInsert>
}
 8007704:	e010      	b.n	8007728 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007706:	4b0e      	ldr	r3, [pc, #56]	@ (8007740 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b0a      	ldr	r3, [pc, #40]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3304      	adds	r3, #4
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f7fe fb87 	bl	8005e26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007718:	4b0a      	ldr	r3, [pc, #40]	@ (8007744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	429a      	cmp	r2, r3
 8007720:	d202      	bcs.n	8007728 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007722:	4a08      	ldr	r2, [pc, #32]	@ (8007744 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6013      	str	r3, [r2, #0]
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	200053d0 	.word	0x200053d0
 8007734:	20004ef8 	.word	0x20004ef8
 8007738:	200053b8 	.word	0x200053b8
 800773c:	20005388 	.word	0x20005388
 8007740:	20005384 	.word	0x20005384
 8007744:	200053ec 	.word	0x200053ec

08007748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	@ 0x28
 800774c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007752:	f000 fb13 	bl	8007d7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007756:	4b1d      	ldr	r3, [pc, #116]	@ (80077cc <xTimerCreateTimerTask+0x84>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d021      	beq.n	80077a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007766:	1d3a      	adds	r2, r7, #4
 8007768:	f107 0108 	add.w	r1, r7, #8
 800776c:	f107 030c 	add.w	r3, r7, #12
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe faed 	bl	8005d50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	9202      	str	r2, [sp, #8]
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	2302      	movs	r3, #2
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	460a      	mov	r2, r1
 8007788:	4911      	ldr	r1, [pc, #68]	@ (80077d0 <xTimerCreateTimerTask+0x88>)
 800778a:	4812      	ldr	r0, [pc, #72]	@ (80077d4 <xTimerCreateTimerTask+0x8c>)
 800778c:	f7ff f8a8 	bl	80068e0 <xTaskCreateStatic>
 8007790:	4603      	mov	r3, r0
 8007792:	4a11      	ldr	r2, [pc, #68]	@ (80077d8 <xTimerCreateTimerTask+0x90>)
 8007794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007796:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <xTimerCreateTimerTask+0x90>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800779e:	2301      	movs	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	613b      	str	r3, [r7, #16]
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077c0:	697b      	ldr	r3, [r7, #20]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20005428 	.word	0x20005428
 80077d0:	08012e6c 	.word	0x08012e6c
 80077d4:	08007915 	.word	0x08007915
 80077d8:	2000542c 	.word	0x2000542c

080077dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	@ 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <xTimerGenericCommand+0x30>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	623b      	str	r3, [r7, #32]
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	e7fd      	b.n	8007808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800780c:	4b19      	ldr	r3, [pc, #100]	@ (8007874 <xTimerGenericCommand+0x98>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d02a      	beq.n	800786a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b05      	cmp	r3, #5
 8007824:	dc18      	bgt.n	8007858 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007826:	f7ff fead 	bl	8007584 <xTaskGetSchedulerState>
 800782a:	4603      	mov	r3, r0
 800782c:	2b02      	cmp	r3, #2
 800782e:	d109      	bne.n	8007844 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007830:	4b10      	ldr	r3, [pc, #64]	@ (8007874 <xTimerGenericCommand+0x98>)
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	f107 0110 	add.w	r1, r7, #16
 8007838:	2300      	movs	r3, #0
 800783a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783c:	f7fe fc60 	bl	8006100 <xQueueGenericSend>
 8007840:	6278      	str	r0, [r7, #36]	@ 0x24
 8007842:	e012      	b.n	800786a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007844:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <xTimerGenericCommand+0x98>)
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	f107 0110 	add.w	r1, r7, #16
 800784c:	2300      	movs	r3, #0
 800784e:	2200      	movs	r2, #0
 8007850:	f7fe fc56 	bl	8006100 <xQueueGenericSend>
 8007854:	6278      	str	r0, [r7, #36]	@ 0x24
 8007856:	e008      	b.n	800786a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007858:	4b06      	ldr	r3, [pc, #24]	@ (8007874 <xTimerGenericCommand+0x98>)
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	f107 0110 	add.w	r1, r7, #16
 8007860:	2300      	movs	r3, #0
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	f7fe fd4e 	bl	8006304 <xQueueGenericSendFromISR>
 8007868:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800786c:	4618      	mov	r0, r3
 800786e:	3728      	adds	r7, #40	@ 0x28
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20005428 	.word	0x20005428

08007878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af02      	add	r7, sp, #8
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007882:	4b23      	ldr	r3, [pc, #140]	@ (8007910 <prvProcessExpiredTimer+0x98>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	3304      	adds	r3, #4
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe fb01 	bl	8005e98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d023      	beq.n	80078ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	18d1      	adds	r1, r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	6978      	ldr	r0, [r7, #20]
 80078b2:	f000 f8d5 	bl	8007a60 <prvInsertTimerInActiveList>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d020      	beq.n	80078fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078bc:	2300      	movs	r3, #0
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	2300      	movs	r3, #0
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	2100      	movs	r1, #0
 80078c6:	6978      	ldr	r0, [r7, #20]
 80078c8:	f7ff ff88 	bl	80077dc <xTimerGenericCommand>
 80078cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d114      	bne.n	80078fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	60fb      	str	r3, [r7, #12]
}
 80078e6:	bf00      	nop
 80078e8:	bf00      	nop
 80078ea:	e7fd      	b.n	80078e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	6978      	ldr	r0, [r7, #20]
 8007904:	4798      	blx	r3
}
 8007906:	bf00      	nop
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20005420 	.word	0x20005420

08007914 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800791c:	f107 0308 	add.w	r3, r7, #8
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f859 	bl	80079d8 <prvGetNextExpireTime>
 8007926:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4619      	mov	r1, r3
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f805 	bl	800793c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007932:	f000 f8d7 	bl	8007ae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007936:	bf00      	nop
 8007938:	e7f0      	b.n	800791c <prvTimerTask+0x8>
	...

0800793c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007946:	f7ff fa0f 	bl	8006d68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800794a:	f107 0308 	add.w	r3, r7, #8
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f866 	bl	8007a20 <prvSampleTimeNow>
 8007954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d130      	bne.n	80079be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <prvProcessTimerOrBlockTask+0x3c>
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	429a      	cmp	r2, r3
 8007968:	d806      	bhi.n	8007978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800796a:	f7ff fa0b 	bl	8006d84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff ff81 	bl	8007878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007976:	e024      	b.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800797e:	4b13      	ldr	r3, [pc, #76]	@ (80079cc <prvProcessTimerOrBlockTask+0x90>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <prvProcessTimerOrBlockTask+0x50>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <prvProcessTimerOrBlockTask+0x52>
 800798c:	2300      	movs	r3, #0
 800798e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007990:	4b0f      	ldr	r3, [pc, #60]	@ (80079d0 <prvProcessTimerOrBlockTask+0x94>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	4619      	mov	r1, r3
 800799e:	f7fe ff6b 	bl	8006878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079a2:	f7ff f9ef 	bl	8006d84 <xTaskResumeAll>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079ac:	4b09      	ldr	r3, [pc, #36]	@ (80079d4 <prvProcessTimerOrBlockTask+0x98>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
}
 80079bc:	e001      	b.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079be:	f7ff f9e1 	bl	8006d84 <xTaskResumeAll>
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20005424 	.word	0x20005424
 80079d0:	20005428 	.word	0x20005428
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079e0:	4b0e      	ldr	r3, [pc, #56]	@ (8007a1c <prvGetNextExpireTime+0x44>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <prvGetNextExpireTime+0x16>
 80079ea:	2201      	movs	r2, #1
 80079ec:	e000      	b.n	80079f0 <prvGetNextExpireTime+0x18>
 80079ee:	2200      	movs	r2, #0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079fc:	4b07      	ldr	r3, [pc, #28]	@ (8007a1c <prvGetNextExpireTime+0x44>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	e001      	b.n	8007a0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20005420 	.word	0x20005420

08007a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a28:	f7ff fa4a 	bl	8006ec0 <xTaskGetTickCount>
 8007a2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a5c <prvSampleTimeNow+0x3c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d205      	bcs.n	8007a44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a38:	f000 f93a 	bl	8007cb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e002      	b.n	8007a4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a4a:	4a04      	ldr	r2, [pc, #16]	@ (8007a5c <prvSampleTimeNow+0x3c>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a50:	68fb      	ldr	r3, [r7, #12]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20005430 	.word	0x20005430

08007a60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d812      	bhi.n	8007aac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d302      	bcc.n	8007a9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a94:	2301      	movs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e01b      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a9a:	4b10      	ldr	r3, [pc, #64]	@ (8007adc <prvInsertTimerInActiveList+0x7c>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f7fe f9be 	bl	8005e26 <vListInsert>
 8007aaa:	e012      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d206      	bcs.n	8007ac2 <prvInsertTimerInActiveList+0x62>
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d302      	bcc.n	8007ac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e007      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ac2:	4b07      	ldr	r3, [pc, #28]	@ (8007ae0 <prvInsertTimerInActiveList+0x80>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fe f9aa 	bl	8005e26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ad2:	697b      	ldr	r3, [r7, #20]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20005424 	.word	0x20005424
 8007ae0:	20005420 	.word	0x20005420

08007ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08e      	sub	sp, #56	@ 0x38
 8007ae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aea:	e0ce      	b.n	8007c8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da19      	bge.n	8007b26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007af2:	1d3b      	adds	r3, r7, #4
 8007af4:	3304      	adds	r3, #4
 8007af6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10b      	bne.n	8007b16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	61fb      	str	r3, [r7, #28]
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b1c:	6850      	ldr	r0, [r2, #4]
 8007b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b20:	6892      	ldr	r2, [r2, #8]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f2c0 80ae 	blt.w	8007c8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe f9aa 	bl	8005e98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b44:	463b      	mov	r3, r7
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff ff6a 	bl	8007a20 <prvSampleTimeNow>
 8007b4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b09      	cmp	r3, #9
 8007b52:	f200 8097 	bhi.w	8007c84 <prvProcessReceivedCommands+0x1a0>
 8007b56:	a201      	add	r2, pc, #4	@ (adr r2, 8007b5c <prvProcessReceivedCommands+0x78>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b85 	.word	0x08007b85
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007b85 	.word	0x08007b85
 8007b68:	08007bfb 	.word	0x08007bfb
 8007b6c:	08007c0f 	.word	0x08007c0f
 8007b70:	08007c5b 	.word	0x08007c5b
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007b85 	.word	0x08007b85
 8007b7c:	08007bfb 	.word	0x08007bfb
 8007b80:	08007c0f 	.word	0x08007c0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	18d1      	adds	r1, r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ba4:	f7ff ff5c 	bl	8007a60 <prvInsertTimerInActiveList>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d06c      	beq.n	8007c88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d061      	beq.n	8007c88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	441a      	add	r2, r3
 8007bcc:	2300      	movs	r3, #0
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bd6:	f7ff fe01 	bl	80077dc <xTimerGenericCommand>
 8007bda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d152      	bne.n	8007c88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	61bb      	str	r3, [r7, #24]
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	e7fd      	b.n	8007bf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c00:	f023 0301 	bic.w	r3, r3, #1
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c0c:	e03d      	b.n	8007c8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10b      	bne.n	8007c46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	617b      	str	r3, [r7, #20]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	18d1      	adds	r1, r2, r3
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c54:	f7ff ff04 	bl	8007a60 <prvInsertTimerInActiveList>
					break;
 8007c58:	e017      	b.n	8007c8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c6a:	f000 fbe5 	bl	8008438 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c6e:	e00c      	b.n	8007c8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c76:	f023 0301 	bic.w	r3, r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c82:	e002      	b.n	8007c8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007c84:	bf00      	nop
 8007c86:	e000      	b.n	8007c8a <prvProcessReceivedCommands+0x1a6>
					break;
 8007c88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c8a:	4b08      	ldr	r3, [pc, #32]	@ (8007cac <prvProcessReceivedCommands+0x1c8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	1d39      	adds	r1, r7, #4
 8007c90:	2200      	movs	r2, #0
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fbd4 	bl	8006440 <xQueueReceive>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f47f af26 	bne.w	8007aec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007ca0:	bf00      	nop
 8007ca2:	bf00      	nop
 8007ca4:	3730      	adds	r7, #48	@ 0x30
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20005428 	.word	0x20005428

08007cb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cb6:	e049      	b.n	8007d4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8007d74 <prvSwitchTimerLists+0xc4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8007d74 <prvSwitchTimerLists+0xc4>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe f8e1 	bl	8005e98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d02f      	beq.n	8007d4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d90e      	bls.n	8007d1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007d74 <prvSwitchTimerLists+0xc4>)
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4619      	mov	r1, r3
 8007d14:	4610      	mov	r0, r2
 8007d16:	f7fe f886 	bl	8005e26 <vListInsert>
 8007d1a:	e017      	b.n	8007d4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2300      	movs	r3, #0
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	2100      	movs	r1, #0
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f7ff fd58 	bl	80077dc <xTimerGenericCommand>
 8007d2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10b      	bne.n	8007d4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	603b      	str	r3, [r7, #0]
}
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	e7fd      	b.n	8007d48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d4c:	4b09      	ldr	r3, [pc, #36]	@ (8007d74 <prvSwitchTimerLists+0xc4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1b0      	bne.n	8007cb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d56:	4b07      	ldr	r3, [pc, #28]	@ (8007d74 <prvSwitchTimerLists+0xc4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d5c:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <prvSwitchTimerLists+0xc8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a04      	ldr	r2, [pc, #16]	@ (8007d74 <prvSwitchTimerLists+0xc4>)
 8007d62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d64:	4a04      	ldr	r2, [pc, #16]	@ (8007d78 <prvSwitchTimerLists+0xc8>)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	6013      	str	r3, [r2, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20005420 	.word	0x20005420
 8007d78:	20005424 	.word	0x20005424

08007d7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d82:	f000 f969 	bl	8008058 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d86:	4b15      	ldr	r3, [pc, #84]	@ (8007ddc <prvCheckForValidListAndQueue+0x60>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d120      	bne.n	8007dd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d8e:	4814      	ldr	r0, [pc, #80]	@ (8007de0 <prvCheckForValidListAndQueue+0x64>)
 8007d90:	f7fd fff8 	bl	8005d84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d94:	4813      	ldr	r0, [pc, #76]	@ (8007de4 <prvCheckForValidListAndQueue+0x68>)
 8007d96:	f7fd fff5 	bl	8005d84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d9a:	4b13      	ldr	r3, [pc, #76]	@ (8007de8 <prvCheckForValidListAndQueue+0x6c>)
 8007d9c:	4a10      	ldr	r2, [pc, #64]	@ (8007de0 <prvCheckForValidListAndQueue+0x64>)
 8007d9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007da0:	4b12      	ldr	r3, [pc, #72]	@ (8007dec <prvCheckForValidListAndQueue+0x70>)
 8007da2:	4a10      	ldr	r2, [pc, #64]	@ (8007de4 <prvCheckForValidListAndQueue+0x68>)
 8007da4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007da6:	2300      	movs	r3, #0
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	4b11      	ldr	r3, [pc, #68]	@ (8007df0 <prvCheckForValidListAndQueue+0x74>)
 8007dac:	4a11      	ldr	r2, [pc, #68]	@ (8007df4 <prvCheckForValidListAndQueue+0x78>)
 8007dae:	2110      	movs	r1, #16
 8007db0:	200a      	movs	r0, #10
 8007db2:	f7fe f905 	bl	8005fc0 <xQueueGenericCreateStatic>
 8007db6:	4603      	mov	r3, r0
 8007db8:	4a08      	ldr	r2, [pc, #32]	@ (8007ddc <prvCheckForValidListAndQueue+0x60>)
 8007dba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007dbc:	4b07      	ldr	r3, [pc, #28]	@ (8007ddc <prvCheckForValidListAndQueue+0x60>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007dc4:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <prvCheckForValidListAndQueue+0x60>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	490b      	ldr	r1, [pc, #44]	@ (8007df8 <prvCheckForValidListAndQueue+0x7c>)
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fd2a 	bl	8006824 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dd0:	f000 f974 	bl	80080bc <vPortExitCritical>
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20005428 	.word	0x20005428
 8007de0:	200053f8 	.word	0x200053f8
 8007de4:	2000540c 	.word	0x2000540c
 8007de8:	20005420 	.word	0x20005420
 8007dec:	20005424 	.word	0x20005424
 8007df0:	200054d4 	.word	0x200054d4
 8007df4:	20005434 	.word	0x20005434
 8007df8:	08012e74 	.word	0x08012e74

08007dfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3b04      	subs	r3, #4
 8007e0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0201 	bic.w	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8007e60 <pxPortInitialiseStack+0x64>)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3b14      	subs	r3, #20
 8007e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3b04      	subs	r3, #4
 8007e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f06f 0202 	mvn.w	r2, #2
 8007e4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3b20      	subs	r3, #32
 8007e50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	08007e65 	.word	0x08007e65

08007e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e6e:	4b13      	ldr	r3, [pc, #76]	@ (8007ebc <prvTaskExitError+0x58>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e76:	d00b      	beq.n	8007e90 <prvTaskExitError+0x2c>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	60fb      	str	r3, [r7, #12]
}
 8007e8a:	bf00      	nop
 8007e8c:	bf00      	nop
 8007e8e:	e7fd      	b.n	8007e8c <prvTaskExitError+0x28>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60bb      	str	r3, [r7, #8]
}
 8007ea2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ea4:	bf00      	nop
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0fc      	beq.n	8007ea6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eac:	bf00      	nop
 8007eae:	bf00      	nop
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	20000010 	.word	0x20000010

08007ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ec0:	4b07      	ldr	r3, [pc, #28]	@ (8007ee0 <pxCurrentTCBConst2>)
 8007ec2:	6819      	ldr	r1, [r3, #0]
 8007ec4:	6808      	ldr	r0, [r1, #0]
 8007ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eca:	f380 8809 	msr	PSP, r0
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8811 	msr	BASEPRI, r0
 8007eda:	4770      	bx	lr
 8007edc:	f3af 8000 	nop.w

08007ee0 <pxCurrentTCBConst2>:
 8007ee0:	20004ef8 	.word	0x20004ef8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop

08007ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ee8:	4808      	ldr	r0, [pc, #32]	@ (8007f0c <prvPortStartFirstTask+0x24>)
 8007eea:	6800      	ldr	r0, [r0, #0]
 8007eec:	6800      	ldr	r0, [r0, #0]
 8007eee:	f380 8808 	msr	MSP, r0
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f380 8814 	msr	CONTROL, r0
 8007efa:	b662      	cpsie	i
 8007efc:	b661      	cpsie	f
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	df00      	svc	0
 8007f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f0a:	bf00      	nop
 8007f0c:	e000ed08 	.word	0xe000ed08

08007f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f16:	4b47      	ldr	r3, [pc, #284]	@ (8008034 <xPortStartScheduler+0x124>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a47      	ldr	r2, [pc, #284]	@ (8008038 <xPortStartScheduler+0x128>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d10b      	bne.n	8007f38 <xPortStartScheduler+0x28>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	613b      	str	r3, [r7, #16]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f38:	4b3e      	ldr	r3, [pc, #248]	@ (8008034 <xPortStartScheduler+0x124>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a3f      	ldr	r2, [pc, #252]	@ (800803c <xPortStartScheduler+0x12c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d10b      	bne.n	8007f5a <xPortStartScheduler+0x4a>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	60fb      	str	r3, [r7, #12]
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	e7fd      	b.n	8007f56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f5a:	4b39      	ldr	r3, [pc, #228]	@ (8008040 <xPortStartScheduler+0x130>)
 8007f5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	22ff      	movs	r2, #255	@ 0xff
 8007f6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	4b31      	ldr	r3, [pc, #196]	@ (8008044 <xPortStartScheduler+0x134>)
 8007f80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f82:	4b31      	ldr	r3, [pc, #196]	@ (8008048 <xPortStartScheduler+0x138>)
 8007f84:	2207      	movs	r2, #7
 8007f86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f88:	e009      	b.n	8007f9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008048 <xPortStartScheduler+0x138>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	4a2d      	ldr	r2, [pc, #180]	@ (8008048 <xPortStartScheduler+0x138>)
 8007f92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fa6:	2b80      	cmp	r3, #128	@ 0x80
 8007fa8:	d0ef      	beq.n	8007f8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007faa:	4b27      	ldr	r3, [pc, #156]	@ (8008048 <xPortStartScheduler+0x138>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f1c3 0307 	rsb	r3, r3, #7
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d00b      	beq.n	8007fce <xPortStartScheduler+0xbe>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	60bb      	str	r3, [r7, #8]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fce:	4b1e      	ldr	r3, [pc, #120]	@ (8008048 <xPortStartScheduler+0x138>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	021b      	lsls	r3, r3, #8
 8007fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8008048 <xPortStartScheduler+0x138>)
 8007fd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8008048 <xPortStartScheduler+0x138>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007fe0:	4a19      	ldr	r2, [pc, #100]	@ (8008048 <xPortStartScheduler+0x138>)
 8007fe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fec:	4b17      	ldr	r3, [pc, #92]	@ (800804c <xPortStartScheduler+0x13c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a16      	ldr	r2, [pc, #88]	@ (800804c <xPortStartScheduler+0x13c>)
 8007ff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ff8:	4b14      	ldr	r3, [pc, #80]	@ (800804c <xPortStartScheduler+0x13c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a13      	ldr	r2, [pc, #76]	@ (800804c <xPortStartScheduler+0x13c>)
 8007ffe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008004:	f000 f8da 	bl	80081bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008008:	4b11      	ldr	r3, [pc, #68]	@ (8008050 <xPortStartScheduler+0x140>)
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800800e:	f000 f8f9 	bl	8008204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008012:	4b10      	ldr	r3, [pc, #64]	@ (8008054 <xPortStartScheduler+0x144>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a0f      	ldr	r2, [pc, #60]	@ (8008054 <xPortStartScheduler+0x144>)
 8008018:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800801c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800801e:	f7ff ff63 	bl	8007ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008022:	f7ff f817 	bl	8007054 <vTaskSwitchContext>
	prvTaskExitError();
 8008026:	f7ff ff1d 	bl	8007e64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	e000ed00 	.word	0xe000ed00
 8008038:	410fc271 	.word	0x410fc271
 800803c:	410fc270 	.word	0x410fc270
 8008040:	e000e400 	.word	0xe000e400
 8008044:	20005524 	.word	0x20005524
 8008048:	20005528 	.word	0x20005528
 800804c:	e000ed20 	.word	0xe000ed20
 8008050:	20000010 	.word	0x20000010
 8008054:	e000ef34 	.word	0xe000ef34

08008058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	607b      	str	r3, [r7, #4]
}
 8008070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008072:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <vPortEnterCritical+0x5c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3301      	adds	r3, #1
 8008078:	4a0e      	ldr	r2, [pc, #56]	@ (80080b4 <vPortEnterCritical+0x5c>)
 800807a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800807c:	4b0d      	ldr	r3, [pc, #52]	@ (80080b4 <vPortEnterCritical+0x5c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d110      	bne.n	80080a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008084:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <vPortEnterCritical+0x60>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	603b      	str	r3, [r7, #0]
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	e7fd      	b.n	80080a2 <vPortEnterCritical+0x4a>
	}
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000010 	.word	0x20000010
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080c2:	4b12      	ldr	r3, [pc, #72]	@ (800810c <vPortExitCritical+0x50>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10b      	bne.n	80080e2 <vPortExitCritical+0x26>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	607b      	str	r3, [r7, #4]
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	e7fd      	b.n	80080de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080e2:	4b0a      	ldr	r3, [pc, #40]	@ (800810c <vPortExitCritical+0x50>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	4a08      	ldr	r2, [pc, #32]	@ (800810c <vPortExitCritical+0x50>)
 80080ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080ec:	4b07      	ldr	r3, [pc, #28]	@ (800810c <vPortExitCritical+0x50>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d105      	bne.n	8008100 <vPortExitCritical+0x44>
 80080f4:	2300      	movs	r3, #0
 80080f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f383 8811 	msr	BASEPRI, r3
}
 80080fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	20000010 	.word	0x20000010

08008110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008110:	f3ef 8009 	mrs	r0, PSP
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	4b15      	ldr	r3, [pc, #84]	@ (8008170 <pxCurrentTCBConst>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	f01e 0f10 	tst.w	lr, #16
 8008120:	bf08      	it	eq
 8008122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	6010      	str	r0, [r2, #0]
 800812c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008134:	f380 8811 	msr	BASEPRI, r0
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f7fe ff88 	bl	8007054 <vTaskSwitchContext>
 8008144:	f04f 0000 	mov.w	r0, #0
 8008148:	f380 8811 	msr	BASEPRI, r0
 800814c:	bc09      	pop	{r0, r3}
 800814e:	6819      	ldr	r1, [r3, #0]
 8008150:	6808      	ldr	r0, [r1, #0]
 8008152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008156:	f01e 0f10 	tst.w	lr, #16
 800815a:	bf08      	it	eq
 800815c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008160:	f380 8809 	msr	PSP, r0
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst>:
 8008170:	20004ef8 	.word	0x20004ef8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	607b      	str	r3, [r7, #4]
}
 8008190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008192:	f7fe fea5 	bl	8006ee0 <xTaskIncrementTick>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800819c:	4b06      	ldr	r3, [pc, #24]	@ (80081b8 <xPortSysTickHandler+0x40>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	2300      	movs	r3, #0
 80081a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f383 8811 	msr	BASEPRI, r3
}
 80081ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081c0:	4b0b      	ldr	r3, [pc, #44]	@ (80081f0 <vPortSetupTimerInterrupt+0x34>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081c6:	4b0b      	ldr	r3, [pc, #44]	@ (80081f4 <vPortSetupTimerInterrupt+0x38>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081cc:	4b0a      	ldr	r3, [pc, #40]	@ (80081f8 <vPortSetupTimerInterrupt+0x3c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	@ (80081fc <vPortSetupTimerInterrupt+0x40>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	099b      	lsrs	r3, r3, #6
 80081d8:	4a09      	ldr	r2, [pc, #36]	@ (8008200 <vPortSetupTimerInterrupt+0x44>)
 80081da:	3b01      	subs	r3, #1
 80081dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081de:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <vPortSetupTimerInterrupt+0x34>)
 80081e0:	2207      	movs	r2, #7
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	e000e010 	.word	0xe000e010
 80081f4:	e000e018 	.word	0xe000e018
 80081f8:	20000004 	.word	0x20000004
 80081fc:	10624dd3 	.word	0x10624dd3
 8008200:	e000e014 	.word	0xe000e014

08008204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008204:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008214 <vPortEnableVFP+0x10>
 8008208:	6801      	ldr	r1, [r0, #0]
 800820a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800820e:	6001      	str	r1, [r0, #0]
 8008210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008212:	bf00      	nop
 8008214:	e000ed88 	.word	0xe000ed88

08008218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800821e:	f3ef 8305 	mrs	r3, IPSR
 8008222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b0f      	cmp	r3, #15
 8008228:	d915      	bls.n	8008256 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800822a:	4a18      	ldr	r2, [pc, #96]	@ (800828c <vPortValidateInterruptPriority+0x74>)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4413      	add	r3, r2
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008234:	4b16      	ldr	r3, [pc, #88]	@ (8008290 <vPortValidateInterruptPriority+0x78>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	7afa      	ldrb	r2, [r7, #11]
 800823a:	429a      	cmp	r2, r3
 800823c:	d20b      	bcs.n	8008256 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	607b      	str	r3, [r7, #4]
}
 8008250:	bf00      	nop
 8008252:	bf00      	nop
 8008254:	e7fd      	b.n	8008252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008256:	4b0f      	ldr	r3, [pc, #60]	@ (8008294 <vPortValidateInterruptPriority+0x7c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800825e:	4b0e      	ldr	r3, [pc, #56]	@ (8008298 <vPortValidateInterruptPriority+0x80>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d90b      	bls.n	800827e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	603b      	str	r3, [r7, #0]
}
 8008278:	bf00      	nop
 800827a:	bf00      	nop
 800827c:	e7fd      	b.n	800827a <vPortValidateInterruptPriority+0x62>
	}
 800827e:	bf00      	nop
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	e000e3f0 	.word	0xe000e3f0
 8008290:	20005524 	.word	0x20005524
 8008294:	e000ed0c 	.word	0xe000ed0c
 8008298:	20005528 	.word	0x20005528

0800829c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08a      	sub	sp, #40	@ 0x28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082a8:	f7fe fd5e 	bl	8006d68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008420 <pvPortMalloc+0x184>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082b4:	f000 f924 	bl	8008500 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008424 <pvPortMalloc+0x188>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4013      	ands	r3, r2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f040 8095 	bne.w	80083f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d01e      	beq.n	800830a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80082cc:	2208      	movs	r2, #8
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4413      	add	r3, r2
 80082d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d015      	beq.n	800830a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f023 0307 	bic.w	r3, r3, #7
 80082e4:	3308      	adds	r3, #8
 80082e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00b      	beq.n	800830a <pvPortMalloc+0x6e>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	617b      	str	r3, [r7, #20]
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop
 8008308:	e7fd      	b.n	8008306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d06f      	beq.n	80083f0 <pvPortMalloc+0x154>
 8008310:	4b45      	ldr	r3, [pc, #276]	@ (8008428 <pvPortMalloc+0x18c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	429a      	cmp	r2, r3
 8008318:	d86a      	bhi.n	80083f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800831a:	4b44      	ldr	r3, [pc, #272]	@ (800842c <pvPortMalloc+0x190>)
 800831c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800831e:	4b43      	ldr	r3, [pc, #268]	@ (800842c <pvPortMalloc+0x190>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008324:	e004      	b.n	8008330 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800832a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d903      	bls.n	8008342 <pvPortMalloc+0xa6>
 800833a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f1      	bne.n	8008326 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008342:	4b37      	ldr	r3, [pc, #220]	@ (8008420 <pvPortMalloc+0x184>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008348:	429a      	cmp	r2, r3
 800834a:	d051      	beq.n	80083f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2208      	movs	r2, #8
 8008352:	4413      	add	r3, r2
 8008354:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800835e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	1ad2      	subs	r2, r2, r3
 8008366:	2308      	movs	r3, #8
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	429a      	cmp	r2, r3
 800836c:	d920      	bls.n	80083b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800836e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4413      	add	r3, r2
 8008374:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <pvPortMalloc+0xfc>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	613b      	str	r3, [r7, #16]
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	e7fd      	b.n	8008394 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083aa:	69b8      	ldr	r0, [r7, #24]
 80083ac:	f000 f90a 	bl	80085c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008428 <pvPortMalloc+0x18c>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008428 <pvPortMalloc+0x18c>)
 80083bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083be:	4b1a      	ldr	r3, [pc, #104]	@ (8008428 <pvPortMalloc+0x18c>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008430 <pvPortMalloc+0x194>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d203      	bcs.n	80083d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083ca:	4b17      	ldr	r3, [pc, #92]	@ (8008428 <pvPortMalloc+0x18c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a18      	ldr	r2, [pc, #96]	@ (8008430 <pvPortMalloc+0x194>)
 80083d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	4b13      	ldr	r3, [pc, #76]	@ (8008424 <pvPortMalloc+0x188>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	431a      	orrs	r2, r3
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083e6:	4b13      	ldr	r3, [pc, #76]	@ (8008434 <pvPortMalloc+0x198>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3301      	adds	r3, #1
 80083ec:	4a11      	ldr	r2, [pc, #68]	@ (8008434 <pvPortMalloc+0x198>)
 80083ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083f0:	f7fe fcc8 	bl	8006d84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <pvPortMalloc+0x17a>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	60fb      	str	r3, [r7, #12]
}
 8008410:	bf00      	nop
 8008412:	bf00      	nop
 8008414:	e7fd      	b.n	8008412 <pvPortMalloc+0x176>
	return pvReturn;
 8008416:	69fb      	ldr	r3, [r7, #28]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3728      	adds	r7, #40	@ 0x28
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20009134 	.word	0x20009134
 8008424:	20009148 	.word	0x20009148
 8008428:	20009138 	.word	0x20009138
 800842c:	2000912c 	.word	0x2000912c
 8008430:	2000913c 	.word	0x2000913c
 8008434:	20009140 	.word	0x20009140

08008438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d04f      	beq.n	80084ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800844a:	2308      	movs	r3, #8
 800844c:	425b      	negs	r3, r3
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4413      	add	r3, r2
 8008452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	4b25      	ldr	r3, [pc, #148]	@ (80084f4 <vPortFree+0xbc>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4013      	ands	r3, r2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10b      	bne.n	800847e <vPortFree+0x46>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60fb      	str	r3, [r7, #12]
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	e7fd      	b.n	800847a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00b      	beq.n	800849e <vPortFree+0x66>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	60bb      	str	r3, [r7, #8]
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	e7fd      	b.n	800849a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	4b14      	ldr	r3, [pc, #80]	@ (80084f4 <vPortFree+0xbc>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4013      	ands	r3, r2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01e      	beq.n	80084ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11a      	bne.n	80084ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	4b0e      	ldr	r3, [pc, #56]	@ (80084f4 <vPortFree+0xbc>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	43db      	mvns	r3, r3
 80084be:	401a      	ands	r2, r3
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084c4:	f7fe fc50 	bl	8006d68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	4b0a      	ldr	r3, [pc, #40]	@ (80084f8 <vPortFree+0xc0>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4413      	add	r3, r2
 80084d2:	4a09      	ldr	r2, [pc, #36]	@ (80084f8 <vPortFree+0xc0>)
 80084d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084d6:	6938      	ldr	r0, [r7, #16]
 80084d8:	f000 f874 	bl	80085c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084dc:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <vPortFree+0xc4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3301      	adds	r3, #1
 80084e2:	4a06      	ldr	r2, [pc, #24]	@ (80084fc <vPortFree+0xc4>)
 80084e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084e6:	f7fe fc4d 	bl	8006d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084ea:	bf00      	nop
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20009148 	.word	0x20009148
 80084f8:	20009138 	.word	0x20009138
 80084fc:	20009144 	.word	0x20009144

08008500 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008506:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800850a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800850c:	4b27      	ldr	r3, [pc, #156]	@ (80085ac <prvHeapInit+0xac>)
 800850e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00c      	beq.n	8008534 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3307      	adds	r3, #7
 800851e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0307 	bic.w	r3, r3, #7
 8008526:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	4a1f      	ldr	r2, [pc, #124]	@ (80085ac <prvHeapInit+0xac>)
 8008530:	4413      	add	r3, r2
 8008532:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008538:	4a1d      	ldr	r2, [pc, #116]	@ (80085b0 <prvHeapInit+0xb0>)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800853e:	4b1c      	ldr	r3, [pc, #112]	@ (80085b0 <prvHeapInit+0xb0>)
 8008540:	2200      	movs	r2, #0
 8008542:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	4413      	add	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800854c:	2208      	movs	r2, #8
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1a9b      	subs	r3, r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0307 	bic.w	r3, r3, #7
 800855a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4a15      	ldr	r2, [pc, #84]	@ (80085b4 <prvHeapInit+0xb4>)
 8008560:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008562:	4b14      	ldr	r3, [pc, #80]	@ (80085b4 <prvHeapInit+0xb4>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2200      	movs	r2, #0
 8008568:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800856a:	4b12      	ldr	r3, [pc, #72]	@ (80085b4 <prvHeapInit+0xb4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	1ad2      	subs	r2, r2, r3
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008580:	4b0c      	ldr	r3, [pc, #48]	@ (80085b4 <prvHeapInit+0xb4>)
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	4a0a      	ldr	r2, [pc, #40]	@ (80085b8 <prvHeapInit+0xb8>)
 800858e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	4a09      	ldr	r2, [pc, #36]	@ (80085bc <prvHeapInit+0xbc>)
 8008596:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008598:	4b09      	ldr	r3, [pc, #36]	@ (80085c0 <prvHeapInit+0xc0>)
 800859a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800859e:	601a      	str	r2, [r3, #0]
}
 80085a0:	bf00      	nop
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	2000552c 	.word	0x2000552c
 80085b0:	2000912c 	.word	0x2000912c
 80085b4:	20009134 	.word	0x20009134
 80085b8:	2000913c 	.word	0x2000913c
 80085bc:	20009138 	.word	0x20009138
 80085c0:	20009148 	.word	0x20009148

080085c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085cc:	4b28      	ldr	r3, [pc, #160]	@ (8008670 <prvInsertBlockIntoFreeList+0xac>)
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	e002      	b.n	80085d8 <prvInsertBlockIntoFreeList+0x14>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d8f7      	bhi.n	80085d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	4413      	add	r3, r2
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d108      	bne.n	8008606 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	441a      	add	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	441a      	add	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d118      	bne.n	800864c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	4b15      	ldr	r3, [pc, #84]	@ (8008674 <prvInsertBlockIntoFreeList+0xb0>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	429a      	cmp	r2, r3
 8008624:	d00d      	beq.n	8008642 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	441a      	add	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	e008      	b.n	8008654 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008642:	4b0c      	ldr	r3, [pc, #48]	@ (8008674 <prvInsertBlockIntoFreeList+0xb0>)
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	e003      	b.n	8008654 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d002      	beq.n	8008662 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008662:	bf00      	nop
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	2000912c 	.word	0x2000912c
 8008674:	20009134 	.word	0x20009134

08008678 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8008678:	4b04      	ldr	r3, [pc, #16]	@ (800868c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	b10a      	cbz	r2, 8008682 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800867e:	4803      	ldr	r0, [pc, #12]	@ (800868c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8008680:	4770      	bx	lr
 8008682:	4a03      	ldr	r2, [pc, #12]	@ (8008690 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8008684:	4801      	ldr	r0, [pc, #4]	@ (800868c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	4770      	bx	lr
 800868c:	2000001c 	.word	0x2000001c
 8008690:	200001d0 	.word	0x200001d0

08008694 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8008694:	4a02      	ldr	r2, [pc, #8]	@ (80086a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 8008696:	4b03      	ldr	r3, [pc, #12]	@ (80086a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	200001d0 	.word	0x200001d0
 80086a4:	2000001c 	.word	0x2000001c

080086a8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 80086a8:	f001 bd5e 	b.w	800a168 <geometry_msgs__msg__Twist__init>

080086ac <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 80086ac:	f001 bd80 	b.w	800a1b0 <geometry_msgs__msg__Twist__fini>

080086b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	f000 f819 	bl	80086e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80086b6:	4c07      	ldr	r4, [pc, #28]	@ (80086d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 80086b8:	60e0      	str	r0, [r4, #12]
 80086ba:	f000 f815 	bl	80086e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80086be:	4b06      	ldr	r3, [pc, #24]	@ (80086d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80086c0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	b10a      	cbz	r2, 80086ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 80086c6:	4804      	ldr	r0, [pc, #16]	@ (80086d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80086c8:	bd10      	pop	{r4, pc}
 80086ca:	4a04      	ldr	r2, [pc, #16]	@ (80086dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 80086cc:	4802      	ldr	r0, [pc, #8]	@ (80086d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	bd10      	pop	{r4, pc}
 80086d4:	20000028 	.word	0x20000028
 80086d8:	200000a0 	.word	0x200000a0
 80086dc:	200001d4 	.word	0x200001d4

080086e0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 80086e0:	f001 bd72 	b.w	800a1c8 <geometry_msgs__msg__Vector3__init>

080086e4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 80086e4:	f001 bd74 	b.w	800a1d0 <geometry_msgs__msg__Vector3__fini>

080086e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80086e8:	4b04      	ldr	r3, [pc, #16]	@ (80086fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	b10a      	cbz	r2, 80086f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 80086ee:	4803      	ldr	r0, [pc, #12]	@ (80086fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80086f0:	4770      	bx	lr
 80086f2:	4a03      	ldr	r2, [pc, #12]	@ (8008700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 80086f4:	4801      	ldr	r0, [pc, #4]	@ (80086fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80086f6:	6812      	ldr	r2, [r2, #0]
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	4770      	bx	lr
 80086fc:	20000160 	.word	0x20000160
 8008700:	200001d4 	.word	0x200001d4

08008704 <get_serialized_size_geometry_msgs__msg__Twist>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4604      	mov	r4, r0
 8008708:	b148      	cbz	r0, 800871e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800870a:	460d      	mov	r5, r1
 800870c:	f000 f860 	bl	80087d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8008710:	4606      	mov	r6, r0
 8008712:	1829      	adds	r1, r5, r0
 8008714:	f104 0018 	add.w	r0, r4, #24
 8008718:	f000 f85a 	bl	80087d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800871c:	4430      	add	r0, r6
 800871e:	bd70      	pop	{r4, r5, r6, pc}

08008720 <_Twist__cdr_deserialize>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	460c      	mov	r4, r1
 8008724:	b189      	cbz	r1, 800874a <_Twist__cdr_deserialize+0x2a>
 8008726:	4605      	mov	r5, r0
 8008728:	f000 f8de 	bl	80088e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800872c:	6843      	ldr	r3, [r0, #4]
 800872e:	4621      	mov	r1, r4
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	4628      	mov	r0, r5
 8008734:	4798      	blx	r3
 8008736:	f000 f8d7 	bl	80088e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800873a:	6843      	ldr	r3, [r0, #4]
 800873c:	f104 0118 	add.w	r1, r4, #24
 8008740:	4628      	mov	r0, r5
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008748:	4718      	bx	r3
 800874a:	4608      	mov	r0, r1
 800874c:	bd70      	pop	{r4, r5, r6, pc}
 800874e:	bf00      	nop

08008750 <_Twist__cdr_serialize>:
 8008750:	b510      	push	{r4, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	9101      	str	r1, [sp, #4]
 8008756:	b190      	cbz	r0, 800877e <_Twist__cdr_serialize+0x2e>
 8008758:	4604      	mov	r4, r0
 800875a:	f000 f8c5 	bl	80088e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800875e:	6843      	ldr	r3, [r0, #4]
 8008760:	9901      	ldr	r1, [sp, #4]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	4620      	mov	r0, r4
 8008766:	4798      	blx	r3
 8008768:	f000 f8be 	bl	80088e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800876c:	6843      	ldr	r3, [r0, #4]
 800876e:	9901      	ldr	r1, [sp, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f104 0018 	add.w	r0, r4, #24
 8008776:	b002      	add	sp, #8
 8008778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800877c:	4718      	bx	r3
 800877e:	b002      	add	sp, #8
 8008780:	bd10      	pop	{r4, pc}
 8008782:	bf00      	nop

08008784 <_Twist__get_serialized_size>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4604      	mov	r4, r0
 8008788:	b148      	cbz	r0, 800879e <_Twist__get_serialized_size+0x1a>
 800878a:	2100      	movs	r1, #0
 800878c:	f000 f820 	bl	80087d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8008790:	4605      	mov	r5, r0
 8008792:	4601      	mov	r1, r0
 8008794:	f104 0018 	add.w	r0, r4, #24
 8008798:	f000 f81a 	bl	80087d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800879c:	4428      	add	r0, r5
 800879e:	bd38      	pop	{r3, r4, r5, pc}

080087a0 <_Twist__max_serialized_size>:
 80087a0:	b510      	push	{r4, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	2301      	movs	r3, #1
 80087a6:	2100      	movs	r1, #0
 80087a8:	f10d 0007 	add.w	r0, sp, #7
 80087ac:	f88d 3007 	strb.w	r3, [sp, #7]
 80087b0:	f000 f87e 	bl	80088b0 <max_serialized_size_geometry_msgs__msg__Vector3>
 80087b4:	4604      	mov	r4, r0
 80087b6:	4601      	mov	r1, r0
 80087b8:	f10d 0007 	add.w	r0, sp, #7
 80087bc:	f000 f878 	bl	80088b0 <max_serialized_size_geometry_msgs__msg__Vector3>
 80087c0:	4420      	add	r0, r4
 80087c2:	b002      	add	sp, #8
 80087c4:	bd10      	pop	{r4, pc}
 80087c6:	bf00      	nop

080087c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80087c8:	4800      	ldr	r0, [pc, #0]	@ (80087cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 80087ca:	4770      	bx	lr
 80087cc:	2000016c 	.word	0x2000016c

080087d0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 80087d0:	b1b8      	cbz	r0, 8008802 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 80087d2:	b538      	push	{r3, r4, r5, lr}
 80087d4:	460d      	mov	r5, r1
 80087d6:	4628      	mov	r0, r5
 80087d8:	2108      	movs	r1, #8
 80087da:	f001 f965 	bl	8009aa8 <ucdr_alignment>
 80087de:	f105 0308 	add.w	r3, r5, #8
 80087e2:	181c      	adds	r4, r3, r0
 80087e4:	2108      	movs	r1, #8
 80087e6:	4620      	mov	r0, r4
 80087e8:	f001 f95e 	bl	8009aa8 <ucdr_alignment>
 80087ec:	3008      	adds	r0, #8
 80087ee:	4404      	add	r4, r0
 80087f0:	2108      	movs	r1, #8
 80087f2:	4620      	mov	r0, r4
 80087f4:	f001 f958 	bl	8009aa8 <ucdr_alignment>
 80087f8:	f1c5 0508 	rsb	r5, r5, #8
 80087fc:	4428      	add	r0, r5
 80087fe:	4420      	add	r0, r4
 8008800:	bd38      	pop	{r3, r4, r5, pc}
 8008802:	4770      	bx	lr

08008804 <_Vector3__cdr_deserialize>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	460c      	mov	r4, r1
 8008808:	b171      	cbz	r1, 8008828 <_Vector3__cdr_deserialize+0x24>
 800880a:	4605      	mov	r5, r0
 800880c:	f001 f82e 	bl	800986c <ucdr_deserialize_double>
 8008810:	f104 0108 	add.w	r1, r4, #8
 8008814:	4628      	mov	r0, r5
 8008816:	f001 f829 	bl	800986c <ucdr_deserialize_double>
 800881a:	f104 0110 	add.w	r1, r4, #16
 800881e:	4628      	mov	r0, r5
 8008820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008824:	f001 b822 	b.w	800986c <ucdr_deserialize_double>
 8008828:	4608      	mov	r0, r1
 800882a:	bd38      	pop	{r3, r4, r5, pc}

0800882c <_Vector3__cdr_serialize>:
 800882c:	b198      	cbz	r0, 8008856 <_Vector3__cdr_serialize+0x2a>
 800882e:	b538      	push	{r3, r4, r5, lr}
 8008830:	ed90 0b00 	vldr	d0, [r0]
 8008834:	460d      	mov	r5, r1
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	f000 ff47 	bl	80096cc <ucdr_serialize_double>
 800883e:	ed94 0b02 	vldr	d0, [r4, #8]
 8008842:	4628      	mov	r0, r5
 8008844:	f000 ff42 	bl	80096cc <ucdr_serialize_double>
 8008848:	ed94 0b04 	vldr	d0, [r4, #16]
 800884c:	4628      	mov	r0, r5
 800884e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008852:	f000 bf3b 	b.w	80096cc <ucdr_serialize_double>
 8008856:	4770      	bx	lr

08008858 <_Vector3__get_serialized_size>:
 8008858:	b198      	cbz	r0, 8008882 <_Vector3__get_serialized_size+0x2a>
 800885a:	b510      	push	{r4, lr}
 800885c:	2108      	movs	r1, #8
 800885e:	2000      	movs	r0, #0
 8008860:	f001 f922 	bl	8009aa8 <ucdr_alignment>
 8008864:	f100 0408 	add.w	r4, r0, #8
 8008868:	2108      	movs	r1, #8
 800886a:	4620      	mov	r0, r4
 800886c:	f001 f91c 	bl	8009aa8 <ucdr_alignment>
 8008870:	3008      	adds	r0, #8
 8008872:	4404      	add	r4, r0
 8008874:	2108      	movs	r1, #8
 8008876:	4620      	mov	r0, r4
 8008878:	f001 f916 	bl	8009aa8 <ucdr_alignment>
 800887c:	3008      	adds	r0, #8
 800887e:	4420      	add	r0, r4
 8008880:	bd10      	pop	{r4, pc}
 8008882:	4770      	bx	lr

08008884 <_Vector3__max_serialized_size>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	2108      	movs	r1, #8
 8008888:	2000      	movs	r0, #0
 800888a:	f001 f90d 	bl	8009aa8 <ucdr_alignment>
 800888e:	f100 0508 	add.w	r5, r0, #8
 8008892:	2108      	movs	r1, #8
 8008894:	4628      	mov	r0, r5
 8008896:	f001 f907 	bl	8009aa8 <ucdr_alignment>
 800889a:	f100 0408 	add.w	r4, r0, #8
 800889e:	442c      	add	r4, r5
 80088a0:	2108      	movs	r1, #8
 80088a2:	4620      	mov	r0, r4
 80088a4:	f001 f900 	bl	8009aa8 <ucdr_alignment>
 80088a8:	3008      	adds	r0, #8
 80088aa:	4420      	add	r0, r4
 80088ac:	bd38      	pop	{r3, r4, r5, pc}
 80088ae:	bf00      	nop

080088b0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	2301      	movs	r3, #1
 80088b4:	460c      	mov	r4, r1
 80088b6:	7003      	strb	r3, [r0, #0]
 80088b8:	2108      	movs	r1, #8
 80088ba:	4620      	mov	r0, r4
 80088bc:	f001 f8f4 	bl	8009aa8 <ucdr_alignment>
 80088c0:	f104 0508 	add.w	r5, r4, #8
 80088c4:	1946      	adds	r6, r0, r5
 80088c6:	2108      	movs	r1, #8
 80088c8:	4630      	mov	r0, r6
 80088ca:	f001 f8ed 	bl	8009aa8 <ucdr_alignment>
 80088ce:	f100 0508 	add.w	r5, r0, #8
 80088d2:	4435      	add	r5, r6
 80088d4:	2108      	movs	r1, #8
 80088d6:	4628      	mov	r0, r5
 80088d8:	f001 f8e6 	bl	8009aa8 <ucdr_alignment>
 80088dc:	f1c4 0408 	rsb	r4, r4, #8
 80088e0:	4420      	add	r0, r4
 80088e2:	4428      	add	r0, r5
 80088e4:	bd70      	pop	{r4, r5, r6, pc}
 80088e6:	bf00      	nop

080088e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80088e8:	4800      	ldr	r0, [pc, #0]	@ (80088ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 80088ea:	4770      	bx	lr
 80088ec:	20000194 	.word	0x20000194

080088f0 <ucdr_serialize_bool>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	460d      	mov	r5, r1
 80088f4:	2101      	movs	r1, #1
 80088f6:	4604      	mov	r4, r0
 80088f8:	f001 f88a 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 80088fc:	b148      	cbz	r0, 8008912 <ucdr_serialize_bool+0x22>
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	701d      	strb	r5, [r3, #0]
 8008902:	68a2      	ldr	r2, [r4, #8]
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	2101      	movs	r1, #1
 8008908:	440a      	add	r2, r1
 800890a:	440b      	add	r3, r1
 800890c:	60a2      	str	r2, [r4, #8]
 800890e:	6123      	str	r3, [r4, #16]
 8008910:	7561      	strb	r1, [r4, #21]
 8008912:	7da0      	ldrb	r0, [r4, #22]
 8008914:	f080 0001 	eor.w	r0, r0, #1
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	bf00      	nop

0800891c <ucdr_deserialize_bool>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	460d      	mov	r5, r1
 8008920:	2101      	movs	r1, #1
 8008922:	4604      	mov	r4, r0
 8008924:	f001 f874 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008928:	b160      	cbz	r0, 8008944 <ucdr_deserialize_bool+0x28>
 800892a:	68a2      	ldr	r2, [r4, #8]
 800892c:	6923      	ldr	r3, [r4, #16]
 800892e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008932:	3900      	subs	r1, #0
 8008934:	bf18      	it	ne
 8008936:	2101      	movne	r1, #1
 8008938:	7029      	strb	r1, [r5, #0]
 800893a:	3301      	adds	r3, #1
 800893c:	2101      	movs	r1, #1
 800893e:	60a2      	str	r2, [r4, #8]
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	7561      	strb	r1, [r4, #21]
 8008944:	7da0      	ldrb	r0, [r4, #22]
 8008946:	f080 0001 	eor.w	r0, r0, #1
 800894a:	bd38      	pop	{r3, r4, r5, pc}

0800894c <ucdr_serialize_uint8_t>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	460d      	mov	r5, r1
 8008950:	2101      	movs	r1, #1
 8008952:	4604      	mov	r4, r0
 8008954:	f001 f85c 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008958:	b148      	cbz	r0, 800896e <ucdr_serialize_uint8_t+0x22>
 800895a:	68a3      	ldr	r3, [r4, #8]
 800895c:	701d      	strb	r5, [r3, #0]
 800895e:	68a2      	ldr	r2, [r4, #8]
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	2101      	movs	r1, #1
 8008964:	440a      	add	r2, r1
 8008966:	440b      	add	r3, r1
 8008968:	60a2      	str	r2, [r4, #8]
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	7561      	strb	r1, [r4, #21]
 800896e:	7da0      	ldrb	r0, [r4, #22]
 8008970:	f080 0001 	eor.w	r0, r0, #1
 8008974:	bd38      	pop	{r3, r4, r5, pc}
 8008976:	bf00      	nop

08008978 <ucdr_deserialize_uint8_t>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	460d      	mov	r5, r1
 800897c:	2101      	movs	r1, #1
 800897e:	4604      	mov	r4, r0
 8008980:	f001 f846 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008984:	b150      	cbz	r0, 800899c <ucdr_deserialize_uint8_t+0x24>
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	702b      	strb	r3, [r5, #0]
 800898c:	68a2      	ldr	r2, [r4, #8]
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	2101      	movs	r1, #1
 8008992:	440a      	add	r2, r1
 8008994:	440b      	add	r3, r1
 8008996:	60a2      	str	r2, [r4, #8]
 8008998:	6123      	str	r3, [r4, #16]
 800899a:	7561      	strb	r1, [r4, #21]
 800899c:	7da0      	ldrb	r0, [r4, #22]
 800899e:	f080 0001 	eor.w	r0, r0, #1
 80089a2:	bd38      	pop	{r3, r4, r5, pc}

080089a4 <ucdr_serialize_uint16_t>:
 80089a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	460b      	mov	r3, r1
 80089ac:	2102      	movs	r1, #2
 80089ae:	4604      	mov	r4, r0
 80089b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80089b4:	f001 f880 	bl	8009ab8 <ucdr_buffer_alignment>
 80089b8:	4601      	mov	r1, r0
 80089ba:	4620      	mov	r0, r4
 80089bc:	7d67      	ldrb	r7, [r4, #21]
 80089be:	f001 f8bf 	bl	8009b40 <ucdr_advance_buffer>
 80089c2:	2102      	movs	r1, #2
 80089c4:	4620      	mov	r0, r4
 80089c6:	f001 f817 	bl	80099f8 <ucdr_check_buffer_available_for>
 80089ca:	bb78      	cbnz	r0, 8008a2c <ucdr_serialize_uint16_t+0x88>
 80089cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	d926      	bls.n	8008a22 <ucdr_serialize_uint16_t+0x7e>
 80089d4:	1b5e      	subs	r6, r3, r5
 80089d6:	60a3      	str	r3, [r4, #8]
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	f1c6 0802 	rsb	r8, r6, #2
 80089de:	4433      	add	r3, r6
 80089e0:	6123      	str	r3, [r4, #16]
 80089e2:	4641      	mov	r1, r8
 80089e4:	4620      	mov	r0, r4
 80089e6:	f001 f813 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d03b      	beq.n	8008a66 <ucdr_serialize_uint16_t+0xc2>
 80089ee:	7d23      	ldrb	r3, [r4, #20]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d04a      	beq.n	8008a8a <ucdr_serialize_uint16_t+0xe6>
 80089f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80089f8:	702b      	strb	r3, [r5, #0]
 80089fa:	2e00      	cmp	r6, #0
 80089fc:	d040      	beq.n	8008a80 <ucdr_serialize_uint16_t+0xdc>
 80089fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a02:	706b      	strb	r3, [r5, #1]
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	68a2      	ldr	r2, [r4, #8]
 8008a08:	7da0      	ldrb	r0, [r4, #22]
 8008a0a:	3302      	adds	r3, #2
 8008a0c:	1b9e      	subs	r6, r3, r6
 8008a0e:	4442      	add	r2, r8
 8008a10:	2302      	movs	r3, #2
 8008a12:	f080 0001 	eor.w	r0, r0, #1
 8008a16:	60a2      	str	r2, [r4, #8]
 8008a18:	6126      	str	r6, [r4, #16]
 8008a1a:	7563      	strb	r3, [r4, #21]
 8008a1c:	b002      	add	sp, #8
 8008a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a22:	2102      	movs	r1, #2
 8008a24:	4620      	mov	r0, r4
 8008a26:	f000 fff3 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008a2a:	b190      	cbz	r0, 8008a52 <ucdr_serialize_uint16_t+0xae>
 8008a2c:	7d23      	ldrb	r3, [r4, #20]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	68a3      	ldr	r3, [r4, #8]
 8008a32:	d014      	beq.n	8008a5e <ucdr_serialize_uint16_t+0xba>
 8008a34:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008a38:	701a      	strb	r2, [r3, #0]
 8008a3a:	68a3      	ldr	r3, [r4, #8]
 8008a3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a40:	705a      	strb	r2, [r3, #1]
 8008a42:	68a2      	ldr	r2, [r4, #8]
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	3202      	adds	r2, #2
 8008a48:	3302      	adds	r3, #2
 8008a4a:	2102      	movs	r1, #2
 8008a4c:	60a2      	str	r2, [r4, #8]
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	7561      	strb	r1, [r4, #21]
 8008a52:	7da0      	ldrb	r0, [r4, #22]
 8008a54:	f080 0001 	eor.w	r0, r0, #1
 8008a58:	b002      	add	sp, #8
 8008a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008a62:	801a      	strh	r2, [r3, #0]
 8008a64:	e7ed      	b.n	8008a42 <ucdr_serialize_uint16_t+0x9e>
 8008a66:	68a2      	ldr	r2, [r4, #8]
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	7da0      	ldrb	r0, [r4, #22]
 8008a6c:	7567      	strb	r7, [r4, #21]
 8008a6e:	1b92      	subs	r2, r2, r6
 8008a70:	1b9b      	subs	r3, r3, r6
 8008a72:	f080 0001 	eor.w	r0, r0, #1
 8008a76:	60a2      	str	r2, [r4, #8]
 8008a78:	6123      	str	r3, [r4, #16]
 8008a7a:	b002      	add	sp, #8
 8008a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a80:	68a3      	ldr	r3, [r4, #8]
 8008a82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e7bc      	b.n	8008a04 <ucdr_serialize_uint16_t+0x60>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f10d 0506 	add.w	r5, sp, #6
 8008a90:	4629      	mov	r1, r5
 8008a92:	4632      	mov	r2, r6
 8008a94:	f009 fadd 	bl	8012052 <memcpy>
 8008a98:	68a0      	ldr	r0, [r4, #8]
 8008a9a:	4642      	mov	r2, r8
 8008a9c:	19a9      	adds	r1, r5, r6
 8008a9e:	f009 fad8 	bl	8012052 <memcpy>
 8008aa2:	e7af      	b.n	8008a04 <ucdr_serialize_uint16_t+0x60>

08008aa4 <ucdr_serialize_endian_uint16_t>:
 8008aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	460d      	mov	r5, r1
 8008aac:	2102      	movs	r1, #2
 8008aae:	4604      	mov	r4, r0
 8008ab0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008ab4:	f001 f800 	bl	8009ab8 <ucdr_buffer_alignment>
 8008ab8:	4601      	mov	r1, r0
 8008aba:	4620      	mov	r0, r4
 8008abc:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008ac0:	f001 f83e 	bl	8009b40 <ucdr_advance_buffer>
 8008ac4:	2102      	movs	r1, #2
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 ff96 	bl	80099f8 <ucdr_check_buffer_available_for>
 8008acc:	bb70      	cbnz	r0, 8008b2c <ucdr_serialize_endian_uint16_t+0x88>
 8008ace:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008ad2:	42be      	cmp	r6, r7
 8008ad4:	d925      	bls.n	8008b22 <ucdr_serialize_endian_uint16_t+0x7e>
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	60a6      	str	r6, [r4, #8]
 8008ada:	1bf6      	subs	r6, r6, r7
 8008adc:	4433      	add	r3, r6
 8008ade:	f1c6 0902 	rsb	r9, r6, #2
 8008ae2:	6123      	str	r3, [r4, #16]
 8008ae4:	4649      	mov	r1, r9
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 ff92 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d039      	beq.n	8008b64 <ucdr_serialize_endian_uint16_t+0xc0>
 8008af0:	2d01      	cmp	r5, #1
 8008af2:	d04a      	beq.n	8008b8a <ucdr_serialize_endian_uint16_t+0xe6>
 8008af4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008af8:	703b      	strb	r3, [r7, #0]
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	d040      	beq.n	8008b80 <ucdr_serialize_endian_uint16_t+0xdc>
 8008afe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008b02:	707b      	strb	r3, [r7, #1]
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	68a2      	ldr	r2, [r4, #8]
 8008b08:	7da0      	ldrb	r0, [r4, #22]
 8008b0a:	3302      	adds	r3, #2
 8008b0c:	444a      	add	r2, r9
 8008b0e:	1b9b      	subs	r3, r3, r6
 8008b10:	2102      	movs	r1, #2
 8008b12:	f080 0001 	eor.w	r0, r0, #1
 8008b16:	60a2      	str	r2, [r4, #8]
 8008b18:	6123      	str	r3, [r4, #16]
 8008b1a:	7561      	strb	r1, [r4, #21]
 8008b1c:	b003      	add	sp, #12
 8008b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b22:	2102      	movs	r1, #2
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 ff73 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008b2a:	b188      	cbz	r0, 8008b50 <ucdr_serialize_endian_uint16_t+0xac>
 8008b2c:	2d01      	cmp	r5, #1
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	d014      	beq.n	8008b5c <ucdr_serialize_endian_uint16_t+0xb8>
 8008b32:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008b36:	701a      	strb	r2, [r3, #0]
 8008b38:	68a3      	ldr	r3, [r4, #8]
 8008b3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008b3e:	705a      	strb	r2, [r3, #1]
 8008b40:	68a2      	ldr	r2, [r4, #8]
 8008b42:	6923      	ldr	r3, [r4, #16]
 8008b44:	3202      	adds	r2, #2
 8008b46:	3302      	adds	r3, #2
 8008b48:	2102      	movs	r1, #2
 8008b4a:	60a2      	str	r2, [r4, #8]
 8008b4c:	6123      	str	r3, [r4, #16]
 8008b4e:	7561      	strb	r1, [r4, #21]
 8008b50:	7da0      	ldrb	r0, [r4, #22]
 8008b52:	f080 0001 	eor.w	r0, r0, #1
 8008b56:	b003      	add	sp, #12
 8008b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	e7ed      	b.n	8008b40 <ucdr_serialize_endian_uint16_t+0x9c>
 8008b64:	68a2      	ldr	r2, [r4, #8]
 8008b66:	6923      	ldr	r3, [r4, #16]
 8008b68:	7da0      	ldrb	r0, [r4, #22]
 8008b6a:	f884 8015 	strb.w	r8, [r4, #21]
 8008b6e:	1b92      	subs	r2, r2, r6
 8008b70:	1b9b      	subs	r3, r3, r6
 8008b72:	f080 0001 	eor.w	r0, r0, #1
 8008b76:	60a2      	str	r2, [r4, #8]
 8008b78:	6123      	str	r3, [r4, #16]
 8008b7a:	b003      	add	sp, #12
 8008b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b80:	68a3      	ldr	r3, [r4, #8]
 8008b82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008b86:	701a      	strb	r2, [r3, #0]
 8008b88:	e7bc      	b.n	8008b04 <ucdr_serialize_endian_uint16_t+0x60>
 8008b8a:	f10d 0506 	add.w	r5, sp, #6
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4632      	mov	r2, r6
 8008b92:	4638      	mov	r0, r7
 8008b94:	f009 fa5d 	bl	8012052 <memcpy>
 8008b98:	68a0      	ldr	r0, [r4, #8]
 8008b9a:	464a      	mov	r2, r9
 8008b9c:	19a9      	adds	r1, r5, r6
 8008b9e:	f009 fa58 	bl	8012052 <memcpy>
 8008ba2:	e7af      	b.n	8008b04 <ucdr_serialize_endian_uint16_t+0x60>

08008ba4 <ucdr_deserialize_uint16_t>:
 8008ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba8:	460d      	mov	r5, r1
 8008baa:	2102      	movs	r1, #2
 8008bac:	4604      	mov	r4, r0
 8008bae:	f000 ff83 	bl	8009ab8 <ucdr_buffer_alignment>
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008bba:	f000 ffc1 	bl	8009b40 <ucdr_advance_buffer>
 8008bbe:	2102      	movs	r1, #2
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 ff19 	bl	80099f8 <ucdr_check_buffer_available_for>
 8008bc6:	bb60      	cbnz	r0, 8008c22 <ucdr_deserialize_uint16_t+0x7e>
 8008bc8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008bcc:	42be      	cmp	r6, r7
 8008bce:	d923      	bls.n	8008c18 <ucdr_deserialize_uint16_t+0x74>
 8008bd0:	6923      	ldr	r3, [r4, #16]
 8008bd2:	60a6      	str	r6, [r4, #8]
 8008bd4:	1bf6      	subs	r6, r6, r7
 8008bd6:	4433      	add	r3, r6
 8008bd8:	f1c6 0902 	rsb	r9, r6, #2
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	4649      	mov	r1, r9
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 ff15 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d034      	beq.n	8008c54 <ucdr_deserialize_uint16_t+0xb0>
 8008bea:	7d23      	ldrb	r3, [r4, #20]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d042      	beq.n	8008c76 <ucdr_deserialize_uint16_t+0xd2>
 8008bf0:	787b      	ldrb	r3, [r7, #1]
 8008bf2:	702b      	strb	r3, [r5, #0]
 8008bf4:	2e00      	cmp	r6, #0
 8008bf6:	d03a      	beq.n	8008c6e <ucdr_deserialize_uint16_t+0xca>
 8008bf8:	783b      	ldrb	r3, [r7, #0]
 8008bfa:	706b      	strb	r3, [r5, #1]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	68a2      	ldr	r2, [r4, #8]
 8008c00:	7da0      	ldrb	r0, [r4, #22]
 8008c02:	2102      	movs	r1, #2
 8008c04:	3302      	adds	r3, #2
 8008c06:	444a      	add	r2, r9
 8008c08:	1b9b      	subs	r3, r3, r6
 8008c0a:	7561      	strb	r1, [r4, #21]
 8008c0c:	60a2      	str	r2, [r4, #8]
 8008c0e:	6123      	str	r3, [r4, #16]
 8008c10:	f080 0001 	eor.w	r0, r0, #1
 8008c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c18:	2102      	movs	r1, #2
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 fef8 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008c20:	b180      	cbz	r0, 8008c44 <ucdr_deserialize_uint16_t+0xa0>
 8008c22:	7d23      	ldrb	r3, [r4, #20]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	68a3      	ldr	r3, [r4, #8]
 8008c28:	d011      	beq.n	8008c4e <ucdr_deserialize_uint16_t+0xaa>
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	702b      	strb	r3, [r5, #0]
 8008c2e:	68a3      	ldr	r3, [r4, #8]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	706b      	strb	r3, [r5, #1]
 8008c34:	68a2      	ldr	r2, [r4, #8]
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	3202      	adds	r2, #2
 8008c3a:	3302      	adds	r3, #2
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	60a2      	str	r2, [r4, #8]
 8008c40:	6123      	str	r3, [r4, #16]
 8008c42:	7561      	strb	r1, [r4, #21]
 8008c44:	7da0      	ldrb	r0, [r4, #22]
 8008c46:	f080 0001 	eor.w	r0, r0, #1
 8008c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	802b      	strh	r3, [r5, #0]
 8008c52:	e7ef      	b.n	8008c34 <ucdr_deserialize_uint16_t+0x90>
 8008c54:	68a2      	ldr	r2, [r4, #8]
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	7da0      	ldrb	r0, [r4, #22]
 8008c5a:	f884 8015 	strb.w	r8, [r4, #21]
 8008c5e:	1b92      	subs	r2, r2, r6
 8008c60:	1b9b      	subs	r3, r3, r6
 8008c62:	60a2      	str	r2, [r4, #8]
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	f080 0001 	eor.w	r0, r0, #1
 8008c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c6e:	68a3      	ldr	r3, [r4, #8]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	706b      	strb	r3, [r5, #1]
 8008c74:	e7c2      	b.n	8008bfc <ucdr_deserialize_uint16_t+0x58>
 8008c76:	4639      	mov	r1, r7
 8008c78:	4632      	mov	r2, r6
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f009 f9e9 	bl	8012052 <memcpy>
 8008c80:	68a1      	ldr	r1, [r4, #8]
 8008c82:	464a      	mov	r2, r9
 8008c84:	19a8      	adds	r0, r5, r6
 8008c86:	f009 f9e4 	bl	8012052 <memcpy>
 8008c8a:	e7b7      	b.n	8008bfc <ucdr_deserialize_uint16_t+0x58>

08008c8c <ucdr_deserialize_endian_uint16_t>:
 8008c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	460e      	mov	r6, r1
 8008c92:	2102      	movs	r1, #2
 8008c94:	4604      	mov	r4, r0
 8008c96:	4615      	mov	r5, r2
 8008c98:	f000 ff0e 	bl	8009ab8 <ucdr_buffer_alignment>
 8008c9c:	4601      	mov	r1, r0
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008ca4:	f000 ff4c 	bl	8009b40 <ucdr_advance_buffer>
 8008ca8:	2102      	movs	r1, #2
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fea4 	bl	80099f8 <ucdr_check_buffer_available_for>
 8008cb0:	bb70      	cbnz	r0, 8008d10 <ucdr_deserialize_endian_uint16_t+0x84>
 8008cb2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008cb6:	4547      	cmp	r7, r8
 8008cb8:	d925      	bls.n	8008d06 <ucdr_deserialize_endian_uint16_t+0x7a>
 8008cba:	6923      	ldr	r3, [r4, #16]
 8008cbc:	60a7      	str	r7, [r4, #8]
 8008cbe:	eba7 0708 	sub.w	r7, r7, r8
 8008cc2:	443b      	add	r3, r7
 8008cc4:	f1c7 0a02 	rsb	sl, r7, #2
 8008cc8:	6123      	str	r3, [r4, #16]
 8008cca:	4651      	mov	r1, sl
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f000 fe9f 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d034      	beq.n	8008d40 <ucdr_deserialize_endian_uint16_t+0xb4>
 8008cd6:	2e01      	cmp	r6, #1
 8008cd8:	d043      	beq.n	8008d62 <ucdr_deserialize_endian_uint16_t+0xd6>
 8008cda:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008cde:	702b      	strb	r3, [r5, #0]
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	d03a      	beq.n	8008d5a <ucdr_deserialize_endian_uint16_t+0xce>
 8008ce4:	f898 3000 	ldrb.w	r3, [r8]
 8008ce8:	706b      	strb	r3, [r5, #1]
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	68a2      	ldr	r2, [r4, #8]
 8008cee:	7da0      	ldrb	r0, [r4, #22]
 8008cf0:	2102      	movs	r1, #2
 8008cf2:	3302      	adds	r3, #2
 8008cf4:	4452      	add	r2, sl
 8008cf6:	1bdb      	subs	r3, r3, r7
 8008cf8:	7561      	strb	r1, [r4, #21]
 8008cfa:	60a2      	str	r2, [r4, #8]
 8008cfc:	6123      	str	r3, [r4, #16]
 8008cfe:	f080 0001 	eor.w	r0, r0, #1
 8008d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d06:	2102      	movs	r1, #2
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 fe81 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008d0e:	b178      	cbz	r0, 8008d30 <ucdr_deserialize_endian_uint16_t+0xa4>
 8008d10:	2e01      	cmp	r6, #1
 8008d12:	68a3      	ldr	r3, [r4, #8]
 8008d14:	d011      	beq.n	8008d3a <ucdr_deserialize_endian_uint16_t+0xae>
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	702b      	strb	r3, [r5, #0]
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	706b      	strb	r3, [r5, #1]
 8008d20:	68a2      	ldr	r2, [r4, #8]
 8008d22:	6923      	ldr	r3, [r4, #16]
 8008d24:	3202      	adds	r2, #2
 8008d26:	3302      	adds	r3, #2
 8008d28:	2102      	movs	r1, #2
 8008d2a:	60a2      	str	r2, [r4, #8]
 8008d2c:	6123      	str	r3, [r4, #16]
 8008d2e:	7561      	strb	r1, [r4, #21]
 8008d30:	7da0      	ldrb	r0, [r4, #22]
 8008d32:	f080 0001 	eor.w	r0, r0, #1
 8008d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	802b      	strh	r3, [r5, #0]
 8008d3e:	e7ef      	b.n	8008d20 <ucdr_deserialize_endian_uint16_t+0x94>
 8008d40:	68a2      	ldr	r2, [r4, #8]
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	7da0      	ldrb	r0, [r4, #22]
 8008d46:	f884 9015 	strb.w	r9, [r4, #21]
 8008d4a:	1bd2      	subs	r2, r2, r7
 8008d4c:	1bdb      	subs	r3, r3, r7
 8008d4e:	60a2      	str	r2, [r4, #8]
 8008d50:	6123      	str	r3, [r4, #16]
 8008d52:	f080 0001 	eor.w	r0, r0, #1
 8008d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5a:	68a3      	ldr	r3, [r4, #8]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	706b      	strb	r3, [r5, #1]
 8008d60:	e7c3      	b.n	8008cea <ucdr_deserialize_endian_uint16_t+0x5e>
 8008d62:	4641      	mov	r1, r8
 8008d64:	463a      	mov	r2, r7
 8008d66:	4628      	mov	r0, r5
 8008d68:	f009 f973 	bl	8012052 <memcpy>
 8008d6c:	68a1      	ldr	r1, [r4, #8]
 8008d6e:	4652      	mov	r2, sl
 8008d70:	19e8      	adds	r0, r5, r7
 8008d72:	f009 f96e 	bl	8012052 <memcpy>
 8008d76:	e7b8      	b.n	8008cea <ucdr_deserialize_endian_uint16_t+0x5e>

08008d78 <ucdr_serialize_uint32_t>:
 8008d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	4604      	mov	r4, r0
 8008d80:	9101      	str	r1, [sp, #4]
 8008d82:	2104      	movs	r1, #4
 8008d84:	f000 fe98 	bl	8009ab8 <ucdr_buffer_alignment>
 8008d88:	4601      	mov	r1, r0
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	7d67      	ldrb	r7, [r4, #21]
 8008d8e:	f000 fed7 	bl	8009b40 <ucdr_advance_buffer>
 8008d92:	2104      	movs	r1, #4
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 fe2f 	bl	80099f8 <ucdr_check_buffer_available_for>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d139      	bne.n	8008e12 <ucdr_serialize_uint32_t+0x9a>
 8008d9e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008da2:	42ab      	cmp	r3, r5
 8008da4:	d930      	bls.n	8008e08 <ucdr_serialize_uint32_t+0x90>
 8008da6:	1b5e      	subs	r6, r3, r5
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	f1c6 0804 	rsb	r8, r6, #4
 8008db0:	4433      	add	r3, r6
 8008db2:	6123      	str	r3, [r4, #16]
 8008db4:	4641      	mov	r1, r8
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 fe2a 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d04c      	beq.n	8008e5a <ucdr_serialize_uint32_t+0xe2>
 8008dc0:	7d23      	ldrb	r3, [r4, #20]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d063      	beq.n	8008e8e <ucdr_serialize_uint32_t+0x116>
 8008dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008dca:	702b      	strb	r3, [r5, #0]
 8008dcc:	2e00      	cmp	r6, #0
 8008dce:	d051      	beq.n	8008e74 <ucdr_serialize_uint32_t+0xfc>
 8008dd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008dd4:	706b      	strb	r3, [r5, #1]
 8008dd6:	2e01      	cmp	r6, #1
 8008dd8:	d050      	beq.n	8008e7c <ucdr_serialize_uint32_t+0x104>
 8008dda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008dde:	70ab      	strb	r3, [r5, #2]
 8008de0:	2e02      	cmp	r6, #2
 8008de2:	d04f      	beq.n	8008e84 <ucdr_serialize_uint32_t+0x10c>
 8008de4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008de8:	70eb      	strb	r3, [r5, #3]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	68a2      	ldr	r2, [r4, #8]
 8008dee:	7da0      	ldrb	r0, [r4, #22]
 8008df0:	3304      	adds	r3, #4
 8008df2:	1b9e      	subs	r6, r3, r6
 8008df4:	4442      	add	r2, r8
 8008df6:	2304      	movs	r3, #4
 8008df8:	f080 0001 	eor.w	r0, r0, #1
 8008dfc:	60a2      	str	r2, [r4, #8]
 8008dfe:	6126      	str	r6, [r4, #16]
 8008e00:	7563      	strb	r3, [r4, #21]
 8008e02:	b002      	add	sp, #8
 8008e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e08:	2104      	movs	r1, #4
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 fe00 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008e10:	b1d0      	cbz	r0, 8008e48 <ucdr_serialize_uint32_t+0xd0>
 8008e12:	7d23      	ldrb	r3, [r4, #20]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	d01c      	beq.n	8008e54 <ucdr_serialize_uint32_t+0xdc>
 8008e1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	68a3      	ldr	r3, [r4, #8]
 8008e22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e26:	705a      	strb	r2, [r3, #1]
 8008e28:	68a3      	ldr	r3, [r4, #8]
 8008e2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008e2e:	709a      	strb	r2, [r3, #2]
 8008e30:	68a3      	ldr	r3, [r4, #8]
 8008e32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e36:	70da      	strb	r2, [r3, #3]
 8008e38:	68a2      	ldr	r2, [r4, #8]
 8008e3a:	6923      	ldr	r3, [r4, #16]
 8008e3c:	3204      	adds	r2, #4
 8008e3e:	3304      	adds	r3, #4
 8008e40:	2104      	movs	r1, #4
 8008e42:	60a2      	str	r2, [r4, #8]
 8008e44:	6123      	str	r3, [r4, #16]
 8008e46:	7561      	strb	r1, [r4, #21]
 8008e48:	7da0      	ldrb	r0, [r4, #22]
 8008e4a:	f080 0001 	eor.w	r0, r0, #1
 8008e4e:	b002      	add	sp, #8
 8008e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e54:	9a01      	ldr	r2, [sp, #4]
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	e7ee      	b.n	8008e38 <ucdr_serialize_uint32_t+0xc0>
 8008e5a:	68a2      	ldr	r2, [r4, #8]
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	7da0      	ldrb	r0, [r4, #22]
 8008e60:	7567      	strb	r7, [r4, #21]
 8008e62:	1b92      	subs	r2, r2, r6
 8008e64:	1b9b      	subs	r3, r3, r6
 8008e66:	f080 0001 	eor.w	r0, r0, #1
 8008e6a:	60a2      	str	r2, [r4, #8]
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	b002      	add	sp, #8
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	68a3      	ldr	r3, [r4, #8]
 8008e76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	68a3      	ldr	r3, [r4, #8]
 8008e7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	68a3      	ldr	r3, [r4, #8]
 8008e86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	e7ad      	b.n	8008dea <ucdr_serialize_uint32_t+0x72>
 8008e8e:	4628      	mov	r0, r5
 8008e90:	ad01      	add	r5, sp, #4
 8008e92:	4629      	mov	r1, r5
 8008e94:	4632      	mov	r2, r6
 8008e96:	f009 f8dc 	bl	8012052 <memcpy>
 8008e9a:	68a0      	ldr	r0, [r4, #8]
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	19a9      	adds	r1, r5, r6
 8008ea0:	f009 f8d7 	bl	8012052 <memcpy>
 8008ea4:	e7a1      	b.n	8008dea <ucdr_serialize_uint32_t+0x72>
 8008ea6:	bf00      	nop

08008ea8 <ucdr_serialize_endian_uint32_t>:
 8008ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008eac:	b083      	sub	sp, #12
 8008eae:	460d      	mov	r5, r1
 8008eb0:	2104      	movs	r1, #4
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	9201      	str	r2, [sp, #4]
 8008eb6:	f000 fdff 	bl	8009ab8 <ucdr_buffer_alignment>
 8008eba:	4601      	mov	r1, r0
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008ec2:	f000 fe3d 	bl	8009b40 <ucdr_advance_buffer>
 8008ec6:	2104      	movs	r1, #4
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f000 fd95 	bl	80099f8 <ucdr_check_buffer_available_for>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d138      	bne.n	8008f44 <ucdr_serialize_endian_uint32_t+0x9c>
 8008ed2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008ed6:	42b7      	cmp	r7, r6
 8008ed8:	d92f      	bls.n	8008f3a <ucdr_serialize_endian_uint32_t+0x92>
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	60a7      	str	r7, [r4, #8]
 8008ede:	1bbf      	subs	r7, r7, r6
 8008ee0:	443b      	add	r3, r7
 8008ee2:	f1c7 0904 	rsb	r9, r7, #4
 8008ee6:	6123      	str	r3, [r4, #16]
 8008ee8:	4649      	mov	r1, r9
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 fd90 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d04a      	beq.n	8008f8a <ucdr_serialize_endian_uint32_t+0xe2>
 8008ef4:	2d01      	cmp	r5, #1
 8008ef6:	d063      	beq.n	8008fc0 <ucdr_serialize_endian_uint32_t+0x118>
 8008ef8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008efc:	7033      	strb	r3, [r6, #0]
 8008efe:	2f00      	cmp	r7, #0
 8008f00:	d051      	beq.n	8008fa6 <ucdr_serialize_endian_uint32_t+0xfe>
 8008f02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008f06:	7073      	strb	r3, [r6, #1]
 8008f08:	2f01      	cmp	r7, #1
 8008f0a:	d050      	beq.n	8008fae <ucdr_serialize_endian_uint32_t+0x106>
 8008f0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008f10:	70b3      	strb	r3, [r6, #2]
 8008f12:	2f02      	cmp	r7, #2
 8008f14:	d04f      	beq.n	8008fb6 <ucdr_serialize_endian_uint32_t+0x10e>
 8008f16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008f1a:	70f3      	strb	r3, [r6, #3]
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	68a2      	ldr	r2, [r4, #8]
 8008f20:	7da0      	ldrb	r0, [r4, #22]
 8008f22:	3304      	adds	r3, #4
 8008f24:	444a      	add	r2, r9
 8008f26:	1bdb      	subs	r3, r3, r7
 8008f28:	2104      	movs	r1, #4
 8008f2a:	f080 0001 	eor.w	r0, r0, #1
 8008f2e:	60a2      	str	r2, [r4, #8]
 8008f30:	6123      	str	r3, [r4, #16]
 8008f32:	7561      	strb	r1, [r4, #21]
 8008f34:	b003      	add	sp, #12
 8008f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f3a:	2104      	movs	r1, #4
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fd67 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8008f42:	b1c8      	cbz	r0, 8008f78 <ucdr_serialize_endian_uint32_t+0xd0>
 8008f44:	2d01      	cmp	r5, #1
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	d01c      	beq.n	8008f84 <ucdr_serialize_endian_uint32_t+0xdc>
 8008f4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	68a3      	ldr	r3, [r4, #8]
 8008f52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f56:	705a      	strb	r2, [r3, #1]
 8008f58:	68a3      	ldr	r3, [r4, #8]
 8008f5a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f5e:	709a      	strb	r2, [r3, #2]
 8008f60:	68a3      	ldr	r3, [r4, #8]
 8008f62:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008f66:	70da      	strb	r2, [r3, #3]
 8008f68:	68a2      	ldr	r2, [r4, #8]
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	3204      	adds	r2, #4
 8008f6e:	3304      	adds	r3, #4
 8008f70:	2104      	movs	r1, #4
 8008f72:	60a2      	str	r2, [r4, #8]
 8008f74:	6123      	str	r3, [r4, #16]
 8008f76:	7561      	strb	r1, [r4, #21]
 8008f78:	7da0      	ldrb	r0, [r4, #22]
 8008f7a:	f080 0001 	eor.w	r0, r0, #1
 8008f7e:	b003      	add	sp, #12
 8008f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f84:	9a01      	ldr	r2, [sp, #4]
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	e7ee      	b.n	8008f68 <ucdr_serialize_endian_uint32_t+0xc0>
 8008f8a:	68a2      	ldr	r2, [r4, #8]
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	7da0      	ldrb	r0, [r4, #22]
 8008f90:	f884 8015 	strb.w	r8, [r4, #21]
 8008f94:	1bd2      	subs	r2, r2, r7
 8008f96:	1bdb      	subs	r3, r3, r7
 8008f98:	f080 0001 	eor.w	r0, r0, #1
 8008f9c:	60a2      	str	r2, [r4, #8]
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	b003      	add	sp, #12
 8008fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa6:	68a3      	ldr	r3, [r4, #8]
 8008fa8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	68a3      	ldr	r3, [r4, #8]
 8008fb0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	68a3      	ldr	r3, [r4, #8]
 8008fb8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008fbc:	701a      	strb	r2, [r3, #0]
 8008fbe:	e7ad      	b.n	8008f1c <ucdr_serialize_endian_uint32_t+0x74>
 8008fc0:	ad01      	add	r5, sp, #4
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	463a      	mov	r2, r7
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f009 f843 	bl	8012052 <memcpy>
 8008fcc:	68a0      	ldr	r0, [r4, #8]
 8008fce:	464a      	mov	r2, r9
 8008fd0:	19e9      	adds	r1, r5, r7
 8008fd2:	f009 f83e 	bl	8012052 <memcpy>
 8008fd6:	e7a1      	b.n	8008f1c <ucdr_serialize_endian_uint32_t+0x74>

08008fd8 <ucdr_deserialize_uint32_t>:
 8008fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fdc:	460d      	mov	r5, r1
 8008fde:	2104      	movs	r1, #4
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	f000 fd69 	bl	8009ab8 <ucdr_buffer_alignment>
 8008fe6:	4601      	mov	r1, r0
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008fee:	f000 fda7 	bl	8009b40 <ucdr_advance_buffer>
 8008ff2:	2104      	movs	r1, #4
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 fcff 	bl	80099f8 <ucdr_check_buffer_available_for>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d138      	bne.n	8009070 <ucdr_deserialize_uint32_t+0x98>
 8008ffe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009002:	42b7      	cmp	r7, r6
 8009004:	d92f      	bls.n	8009066 <ucdr_deserialize_uint32_t+0x8e>
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	60a7      	str	r7, [r4, #8]
 800900a:	1bbf      	subs	r7, r7, r6
 800900c:	443b      	add	r3, r7
 800900e:	f1c7 0904 	rsb	r9, r7, #4
 8009012:	6123      	str	r3, [r4, #16]
 8009014:	4649      	mov	r1, r9
 8009016:	4620      	mov	r0, r4
 8009018:	f000 fcfa 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 800901c:	2800      	cmp	r0, #0
 800901e:	d046      	beq.n	80090ae <ucdr_deserialize_uint32_t+0xd6>
 8009020:	7d23      	ldrb	r3, [r4, #20]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d05c      	beq.n	80090e0 <ucdr_deserialize_uint32_t+0x108>
 8009026:	78f3      	ldrb	r3, [r6, #3]
 8009028:	702b      	strb	r3, [r5, #0]
 800902a:	2f00      	cmp	r7, #0
 800902c:	d04c      	beq.n	80090c8 <ucdr_deserialize_uint32_t+0xf0>
 800902e:	78b3      	ldrb	r3, [r6, #2]
 8009030:	706b      	strb	r3, [r5, #1]
 8009032:	2f01      	cmp	r7, #1
 8009034:	f105 0302 	add.w	r3, r5, #2
 8009038:	d04a      	beq.n	80090d0 <ucdr_deserialize_uint32_t+0xf8>
 800903a:	7873      	ldrb	r3, [r6, #1]
 800903c:	70ab      	strb	r3, [r5, #2]
 800903e:	2f02      	cmp	r7, #2
 8009040:	f105 0303 	add.w	r3, r5, #3
 8009044:	d048      	beq.n	80090d8 <ucdr_deserialize_uint32_t+0x100>
 8009046:	7833      	ldrb	r3, [r6, #0]
 8009048:	70eb      	strb	r3, [r5, #3]
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	68a2      	ldr	r2, [r4, #8]
 800904e:	7da0      	ldrb	r0, [r4, #22]
 8009050:	2104      	movs	r1, #4
 8009052:	3304      	adds	r3, #4
 8009054:	444a      	add	r2, r9
 8009056:	1bdb      	subs	r3, r3, r7
 8009058:	7561      	strb	r1, [r4, #21]
 800905a:	60a2      	str	r2, [r4, #8]
 800905c:	6123      	str	r3, [r4, #16]
 800905e:	f080 0001 	eor.w	r0, r0, #1
 8009062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009066:	2104      	movs	r1, #4
 8009068:	4620      	mov	r0, r4
 800906a:	f000 fcd1 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 800906e:	b1b0      	cbz	r0, 800909e <ucdr_deserialize_uint32_t+0xc6>
 8009070:	7d23      	ldrb	r3, [r4, #20]
 8009072:	2b01      	cmp	r3, #1
 8009074:	68a3      	ldr	r3, [r4, #8]
 8009076:	d017      	beq.n	80090a8 <ucdr_deserialize_uint32_t+0xd0>
 8009078:	78db      	ldrb	r3, [r3, #3]
 800907a:	702b      	strb	r3, [r5, #0]
 800907c:	68a3      	ldr	r3, [r4, #8]
 800907e:	789b      	ldrb	r3, [r3, #2]
 8009080:	706b      	strb	r3, [r5, #1]
 8009082:	68a3      	ldr	r3, [r4, #8]
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	70ab      	strb	r3, [r5, #2]
 8009088:	68a3      	ldr	r3, [r4, #8]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	70eb      	strb	r3, [r5, #3]
 800908e:	68a2      	ldr	r2, [r4, #8]
 8009090:	6923      	ldr	r3, [r4, #16]
 8009092:	3204      	adds	r2, #4
 8009094:	3304      	adds	r3, #4
 8009096:	2104      	movs	r1, #4
 8009098:	60a2      	str	r2, [r4, #8]
 800909a:	6123      	str	r3, [r4, #16]
 800909c:	7561      	strb	r1, [r4, #21]
 800909e:	7da0      	ldrb	r0, [r4, #22]
 80090a0:	f080 0001 	eor.w	r0, r0, #1
 80090a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	e7ef      	b.n	800908e <ucdr_deserialize_uint32_t+0xb6>
 80090ae:	68a2      	ldr	r2, [r4, #8]
 80090b0:	6923      	ldr	r3, [r4, #16]
 80090b2:	7da0      	ldrb	r0, [r4, #22]
 80090b4:	f884 8015 	strb.w	r8, [r4, #21]
 80090b8:	1bd2      	subs	r2, r2, r7
 80090ba:	1bdb      	subs	r3, r3, r7
 80090bc:	60a2      	str	r2, [r4, #8]
 80090be:	6123      	str	r3, [r4, #16]
 80090c0:	f080 0001 	eor.w	r0, r0, #1
 80090c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	789b      	ldrb	r3, [r3, #2]
 80090cc:	706b      	strb	r3, [r5, #1]
 80090ce:	1cab      	adds	r3, r5, #2
 80090d0:	68a2      	ldr	r2, [r4, #8]
 80090d2:	7852      	ldrb	r2, [r2, #1]
 80090d4:	f803 2b01 	strb.w	r2, [r3], #1
 80090d8:	68a2      	ldr	r2, [r4, #8]
 80090da:	7812      	ldrb	r2, [r2, #0]
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	e7b4      	b.n	800904a <ucdr_deserialize_uint32_t+0x72>
 80090e0:	4631      	mov	r1, r6
 80090e2:	463a      	mov	r2, r7
 80090e4:	4628      	mov	r0, r5
 80090e6:	f008 ffb4 	bl	8012052 <memcpy>
 80090ea:	68a1      	ldr	r1, [r4, #8]
 80090ec:	464a      	mov	r2, r9
 80090ee:	19e8      	adds	r0, r5, r7
 80090f0:	f008 ffaf 	bl	8012052 <memcpy>
 80090f4:	e7a9      	b.n	800904a <ucdr_deserialize_uint32_t+0x72>
 80090f6:	bf00      	nop

080090f8 <ucdr_deserialize_endian_uint32_t>:
 80090f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090fc:	460e      	mov	r6, r1
 80090fe:	2104      	movs	r1, #4
 8009100:	4604      	mov	r4, r0
 8009102:	4615      	mov	r5, r2
 8009104:	f000 fcd8 	bl	8009ab8 <ucdr_buffer_alignment>
 8009108:	4601      	mov	r1, r0
 800910a:	4620      	mov	r0, r4
 800910c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009110:	f000 fd16 	bl	8009b40 <ucdr_advance_buffer>
 8009114:	2104      	movs	r1, #4
 8009116:	4620      	mov	r0, r4
 8009118:	f000 fc6e 	bl	80099f8 <ucdr_check_buffer_available_for>
 800911c:	2800      	cmp	r0, #0
 800911e:	d13c      	bne.n	800919a <ucdr_deserialize_endian_uint32_t+0xa2>
 8009120:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009124:	42bb      	cmp	r3, r7
 8009126:	d933      	bls.n	8009190 <ucdr_deserialize_endian_uint32_t+0x98>
 8009128:	eba3 0807 	sub.w	r8, r3, r7
 800912c:	60a3      	str	r3, [r4, #8]
 800912e:	6923      	ldr	r3, [r4, #16]
 8009130:	f1c8 0a04 	rsb	sl, r8, #4
 8009134:	4443      	add	r3, r8
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	4651      	mov	r1, sl
 800913a:	4620      	mov	r0, r4
 800913c:	f000 fc68 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8009140:	2800      	cmp	r0, #0
 8009142:	d048      	beq.n	80091d6 <ucdr_deserialize_endian_uint32_t+0xde>
 8009144:	2e01      	cmp	r6, #1
 8009146:	d061      	beq.n	800920c <ucdr_deserialize_endian_uint32_t+0x114>
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	702b      	strb	r3, [r5, #0]
 800914c:	f1b8 0f00 	cmp.w	r8, #0
 8009150:	d050      	beq.n	80091f4 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009152:	78bb      	ldrb	r3, [r7, #2]
 8009154:	706b      	strb	r3, [r5, #1]
 8009156:	f1b8 0f01 	cmp.w	r8, #1
 800915a:	f105 0302 	add.w	r3, r5, #2
 800915e:	d04d      	beq.n	80091fc <ucdr_deserialize_endian_uint32_t+0x104>
 8009160:	787b      	ldrb	r3, [r7, #1]
 8009162:	70ab      	strb	r3, [r5, #2]
 8009164:	f1b8 0f02 	cmp.w	r8, #2
 8009168:	f105 0303 	add.w	r3, r5, #3
 800916c:	d04a      	beq.n	8009204 <ucdr_deserialize_endian_uint32_t+0x10c>
 800916e:	783b      	ldrb	r3, [r7, #0]
 8009170:	70eb      	strb	r3, [r5, #3]
 8009172:	6923      	ldr	r3, [r4, #16]
 8009174:	68a2      	ldr	r2, [r4, #8]
 8009176:	7da0      	ldrb	r0, [r4, #22]
 8009178:	2104      	movs	r1, #4
 800917a:	3304      	adds	r3, #4
 800917c:	4452      	add	r2, sl
 800917e:	eba3 0308 	sub.w	r3, r3, r8
 8009182:	7561      	strb	r1, [r4, #21]
 8009184:	60a2      	str	r2, [r4, #8]
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	f080 0001 	eor.w	r0, r0, #1
 800918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009190:	2104      	movs	r1, #4
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fc3c 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8009198:	b1a8      	cbz	r0, 80091c6 <ucdr_deserialize_endian_uint32_t+0xce>
 800919a:	2e01      	cmp	r6, #1
 800919c:	68a3      	ldr	r3, [r4, #8]
 800919e:	d017      	beq.n	80091d0 <ucdr_deserialize_endian_uint32_t+0xd8>
 80091a0:	78db      	ldrb	r3, [r3, #3]
 80091a2:	702b      	strb	r3, [r5, #0]
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	789b      	ldrb	r3, [r3, #2]
 80091a8:	706b      	strb	r3, [r5, #1]
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	785b      	ldrb	r3, [r3, #1]
 80091ae:	70ab      	strb	r3, [r5, #2]
 80091b0:	68a3      	ldr	r3, [r4, #8]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	70eb      	strb	r3, [r5, #3]
 80091b6:	68a2      	ldr	r2, [r4, #8]
 80091b8:	6923      	ldr	r3, [r4, #16]
 80091ba:	3204      	adds	r2, #4
 80091bc:	3304      	adds	r3, #4
 80091be:	2104      	movs	r1, #4
 80091c0:	60a2      	str	r2, [r4, #8]
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	7561      	strb	r1, [r4, #21]
 80091c6:	7da0      	ldrb	r0, [r4, #22]
 80091c8:	f080 0001 	eor.w	r0, r0, #1
 80091cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	602b      	str	r3, [r5, #0]
 80091d4:	e7ef      	b.n	80091b6 <ucdr_deserialize_endian_uint32_t+0xbe>
 80091d6:	68a2      	ldr	r2, [r4, #8]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	7da0      	ldrb	r0, [r4, #22]
 80091dc:	f884 9015 	strb.w	r9, [r4, #21]
 80091e0:	eba2 0208 	sub.w	r2, r2, r8
 80091e4:	eba3 0308 	sub.w	r3, r3, r8
 80091e8:	60a2      	str	r2, [r4, #8]
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	f080 0001 	eor.w	r0, r0, #1
 80091f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f4:	68a3      	ldr	r3, [r4, #8]
 80091f6:	789b      	ldrb	r3, [r3, #2]
 80091f8:	706b      	strb	r3, [r5, #1]
 80091fa:	1cab      	adds	r3, r5, #2
 80091fc:	68a2      	ldr	r2, [r4, #8]
 80091fe:	7852      	ldrb	r2, [r2, #1]
 8009200:	f803 2b01 	strb.w	r2, [r3], #1
 8009204:	68a2      	ldr	r2, [r4, #8]
 8009206:	7812      	ldrb	r2, [r2, #0]
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	e7b2      	b.n	8009172 <ucdr_deserialize_endian_uint32_t+0x7a>
 800920c:	4639      	mov	r1, r7
 800920e:	4642      	mov	r2, r8
 8009210:	4628      	mov	r0, r5
 8009212:	f008 ff1e 	bl	8012052 <memcpy>
 8009216:	68a1      	ldr	r1, [r4, #8]
 8009218:	4652      	mov	r2, sl
 800921a:	eb05 0008 	add.w	r0, r5, r8
 800921e:	f008 ff18 	bl	8012052 <memcpy>
 8009222:	e7a6      	b.n	8009172 <ucdr_deserialize_endian_uint32_t+0x7a>

08009224 <ucdr_serialize_uint64_t>:
 8009224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009228:	2108      	movs	r1, #8
 800922a:	b082      	sub	sp, #8
 800922c:	4604      	mov	r4, r0
 800922e:	e9cd 2300 	strd	r2, r3, [sp]
 8009232:	f000 fc41 	bl	8009ab8 <ucdr_buffer_alignment>
 8009236:	4601      	mov	r1, r0
 8009238:	4620      	mov	r0, r4
 800923a:	7d67      	ldrb	r7, [r4, #21]
 800923c:	f000 fc80 	bl	8009b40 <ucdr_advance_buffer>
 8009240:	2108      	movs	r1, #8
 8009242:	4620      	mov	r0, r4
 8009244:	f000 fbd8 	bl	80099f8 <ucdr_check_buffer_available_for>
 8009248:	2800      	cmp	r0, #0
 800924a:	d14e      	bne.n	80092ea <ucdr_serialize_uint64_t+0xc6>
 800924c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009250:	42ab      	cmp	r3, r5
 8009252:	d945      	bls.n	80092e0 <ucdr_serialize_uint64_t+0xbc>
 8009254:	1b5e      	subs	r6, r3, r5
 8009256:	60a3      	str	r3, [r4, #8]
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	f1c6 0808 	rsb	r8, r6, #8
 800925e:	4433      	add	r3, r6
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	4641      	mov	r1, r8
 8009264:	4620      	mov	r0, r4
 8009266:	f000 fbd3 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 800926a:	2800      	cmp	r0, #0
 800926c:	d074      	beq.n	8009358 <ucdr_serialize_uint64_t+0x134>
 800926e:	7d23      	ldrb	r3, [r4, #20]
 8009270:	2b01      	cmp	r3, #1
 8009272:	f000 809b 	beq.w	80093ac <ucdr_serialize_uint64_t+0x188>
 8009276:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800927a:	702b      	strb	r3, [r5, #0]
 800927c:	2e00      	cmp	r6, #0
 800927e:	d078      	beq.n	8009372 <ucdr_serialize_uint64_t+0x14e>
 8009280:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009284:	706b      	strb	r3, [r5, #1]
 8009286:	2e01      	cmp	r6, #1
 8009288:	d077      	beq.n	800937a <ucdr_serialize_uint64_t+0x156>
 800928a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800928e:	70ab      	strb	r3, [r5, #2]
 8009290:	2e02      	cmp	r6, #2
 8009292:	d076      	beq.n	8009382 <ucdr_serialize_uint64_t+0x15e>
 8009294:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009298:	70eb      	strb	r3, [r5, #3]
 800929a:	2e03      	cmp	r6, #3
 800929c:	d075      	beq.n	800938a <ucdr_serialize_uint64_t+0x166>
 800929e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80092a2:	712b      	strb	r3, [r5, #4]
 80092a4:	2e04      	cmp	r6, #4
 80092a6:	d074      	beq.n	8009392 <ucdr_serialize_uint64_t+0x16e>
 80092a8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80092ac:	716b      	strb	r3, [r5, #5]
 80092ae:	2e05      	cmp	r6, #5
 80092b0:	d073      	beq.n	800939a <ucdr_serialize_uint64_t+0x176>
 80092b2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80092b6:	71ab      	strb	r3, [r5, #6]
 80092b8:	2e06      	cmp	r6, #6
 80092ba:	d072      	beq.n	80093a2 <ucdr_serialize_uint64_t+0x17e>
 80092bc:	f89d 3000 	ldrb.w	r3, [sp]
 80092c0:	71eb      	strb	r3, [r5, #7]
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	68a2      	ldr	r2, [r4, #8]
 80092c6:	7da0      	ldrb	r0, [r4, #22]
 80092c8:	3308      	adds	r3, #8
 80092ca:	1b9e      	subs	r6, r3, r6
 80092cc:	4442      	add	r2, r8
 80092ce:	2308      	movs	r3, #8
 80092d0:	f080 0001 	eor.w	r0, r0, #1
 80092d4:	60a2      	str	r2, [r4, #8]
 80092d6:	6126      	str	r6, [r4, #16]
 80092d8:	7563      	strb	r3, [r4, #21]
 80092da:	b002      	add	sp, #8
 80092dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e0:	2108      	movs	r1, #8
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fb94 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 80092e8:	b350      	cbz	r0, 8009340 <ucdr_serialize_uint64_t+0x11c>
 80092ea:	7d23      	ldrb	r3, [r4, #20]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d02d      	beq.n	800934c <ucdr_serialize_uint64_t+0x128>
 80092f0:	68a3      	ldr	r3, [r4, #8]
 80092f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80092f6:	701a      	strb	r2, [r3, #0]
 80092f8:	68a3      	ldr	r3, [r4, #8]
 80092fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80092fe:	705a      	strb	r2, [r3, #1]
 8009300:	68a3      	ldr	r3, [r4, #8]
 8009302:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009306:	709a      	strb	r2, [r3, #2]
 8009308:	68a3      	ldr	r3, [r4, #8]
 800930a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800930e:	70da      	strb	r2, [r3, #3]
 8009310:	68a3      	ldr	r3, [r4, #8]
 8009312:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009316:	711a      	strb	r2, [r3, #4]
 8009318:	68a3      	ldr	r3, [r4, #8]
 800931a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800931e:	715a      	strb	r2, [r3, #5]
 8009320:	68a3      	ldr	r3, [r4, #8]
 8009322:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009326:	719a      	strb	r2, [r3, #6]
 8009328:	68a3      	ldr	r3, [r4, #8]
 800932a:	f89d 2000 	ldrb.w	r2, [sp]
 800932e:	71da      	strb	r2, [r3, #7]
 8009330:	68a2      	ldr	r2, [r4, #8]
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	3208      	adds	r2, #8
 8009336:	3308      	adds	r3, #8
 8009338:	2108      	movs	r1, #8
 800933a:	60a2      	str	r2, [r4, #8]
 800933c:	6123      	str	r3, [r4, #16]
 800933e:	7561      	strb	r1, [r4, #21]
 8009340:	7da0      	ldrb	r0, [r4, #22]
 8009342:	f080 0001 	eor.w	r0, r0, #1
 8009346:	b002      	add	sp, #8
 8009348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800934c:	466b      	mov	r3, sp
 800934e:	cb03      	ldmia	r3!, {r0, r1}
 8009350:	68a3      	ldr	r3, [r4, #8]
 8009352:	6018      	str	r0, [r3, #0]
 8009354:	6059      	str	r1, [r3, #4]
 8009356:	e7eb      	b.n	8009330 <ucdr_serialize_uint64_t+0x10c>
 8009358:	68a2      	ldr	r2, [r4, #8]
 800935a:	6923      	ldr	r3, [r4, #16]
 800935c:	7da0      	ldrb	r0, [r4, #22]
 800935e:	7567      	strb	r7, [r4, #21]
 8009360:	1b92      	subs	r2, r2, r6
 8009362:	1b9b      	subs	r3, r3, r6
 8009364:	f080 0001 	eor.w	r0, r0, #1
 8009368:	60a2      	str	r2, [r4, #8]
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	b002      	add	sp, #8
 800936e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009372:	68a3      	ldr	r3, [r4, #8]
 8009374:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009380:	701a      	strb	r2, [r3, #0]
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009388:	701a      	strb	r2, [r3, #0]
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009398:	701a      	strb	r2, [r3, #0]
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80093a0:	701a      	strb	r2, [r3, #0]
 80093a2:	68a3      	ldr	r3, [r4, #8]
 80093a4:	f89d 2000 	ldrb.w	r2, [sp]
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	e78a      	b.n	80092c2 <ucdr_serialize_uint64_t+0x9e>
 80093ac:	4628      	mov	r0, r5
 80093ae:	466d      	mov	r5, sp
 80093b0:	4629      	mov	r1, r5
 80093b2:	4632      	mov	r2, r6
 80093b4:	f008 fe4d 	bl	8012052 <memcpy>
 80093b8:	68a0      	ldr	r0, [r4, #8]
 80093ba:	4642      	mov	r2, r8
 80093bc:	19a9      	adds	r1, r5, r6
 80093be:	f008 fe48 	bl	8012052 <memcpy>
 80093c2:	e77e      	b.n	80092c2 <ucdr_serialize_uint64_t+0x9e>

080093c4 <ucdr_serialize_int16_t>:
 80093c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	b082      	sub	sp, #8
 80093ca:	460b      	mov	r3, r1
 80093cc:	2102      	movs	r1, #2
 80093ce:	4604      	mov	r4, r0
 80093d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80093d4:	f000 fb70 	bl	8009ab8 <ucdr_buffer_alignment>
 80093d8:	4601      	mov	r1, r0
 80093da:	4620      	mov	r0, r4
 80093dc:	7d67      	ldrb	r7, [r4, #21]
 80093de:	f000 fbaf 	bl	8009b40 <ucdr_advance_buffer>
 80093e2:	2102      	movs	r1, #2
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 fb07 	bl	80099f8 <ucdr_check_buffer_available_for>
 80093ea:	bb78      	cbnz	r0, 800944c <ucdr_serialize_int16_t+0x88>
 80093ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80093f0:	42ab      	cmp	r3, r5
 80093f2:	d926      	bls.n	8009442 <ucdr_serialize_int16_t+0x7e>
 80093f4:	1b5e      	subs	r6, r3, r5
 80093f6:	60a3      	str	r3, [r4, #8]
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	f1c6 0802 	rsb	r8, r6, #2
 80093fe:	4433      	add	r3, r6
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	4641      	mov	r1, r8
 8009404:	4620      	mov	r0, r4
 8009406:	f000 fb03 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 800940a:	2800      	cmp	r0, #0
 800940c:	d03b      	beq.n	8009486 <ucdr_serialize_int16_t+0xc2>
 800940e:	7d23      	ldrb	r3, [r4, #20]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d04a      	beq.n	80094aa <ucdr_serialize_int16_t+0xe6>
 8009414:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009418:	702b      	strb	r3, [r5, #0]
 800941a:	2e00      	cmp	r6, #0
 800941c:	d040      	beq.n	80094a0 <ucdr_serialize_int16_t+0xdc>
 800941e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009422:	706b      	strb	r3, [r5, #1]
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	68a2      	ldr	r2, [r4, #8]
 8009428:	7da0      	ldrb	r0, [r4, #22]
 800942a:	3302      	adds	r3, #2
 800942c:	1b9e      	subs	r6, r3, r6
 800942e:	4442      	add	r2, r8
 8009430:	2302      	movs	r3, #2
 8009432:	f080 0001 	eor.w	r0, r0, #1
 8009436:	60a2      	str	r2, [r4, #8]
 8009438:	6126      	str	r6, [r4, #16]
 800943a:	7563      	strb	r3, [r4, #21]
 800943c:	b002      	add	sp, #8
 800943e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009442:	2102      	movs	r1, #2
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fae3 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 800944a:	b190      	cbz	r0, 8009472 <ucdr_serialize_int16_t+0xae>
 800944c:	7d23      	ldrb	r3, [r4, #20]
 800944e:	2b01      	cmp	r3, #1
 8009450:	68a3      	ldr	r3, [r4, #8]
 8009452:	d014      	beq.n	800947e <ucdr_serialize_int16_t+0xba>
 8009454:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009458:	701a      	strb	r2, [r3, #0]
 800945a:	68a3      	ldr	r3, [r4, #8]
 800945c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009460:	705a      	strb	r2, [r3, #1]
 8009462:	68a2      	ldr	r2, [r4, #8]
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	3202      	adds	r2, #2
 8009468:	3302      	adds	r3, #2
 800946a:	2102      	movs	r1, #2
 800946c:	60a2      	str	r2, [r4, #8]
 800946e:	6123      	str	r3, [r4, #16]
 8009470:	7561      	strb	r1, [r4, #21]
 8009472:	7da0      	ldrb	r0, [r4, #22]
 8009474:	f080 0001 	eor.w	r0, r0, #1
 8009478:	b002      	add	sp, #8
 800947a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800947e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009482:	801a      	strh	r2, [r3, #0]
 8009484:	e7ed      	b.n	8009462 <ucdr_serialize_int16_t+0x9e>
 8009486:	68a2      	ldr	r2, [r4, #8]
 8009488:	6923      	ldr	r3, [r4, #16]
 800948a:	7da0      	ldrb	r0, [r4, #22]
 800948c:	7567      	strb	r7, [r4, #21]
 800948e:	1b92      	subs	r2, r2, r6
 8009490:	1b9b      	subs	r3, r3, r6
 8009492:	f080 0001 	eor.w	r0, r0, #1
 8009496:	60a2      	str	r2, [r4, #8]
 8009498:	6123      	str	r3, [r4, #16]
 800949a:	b002      	add	sp, #8
 800949c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a0:	68a3      	ldr	r3, [r4, #8]
 80094a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80094a6:	701a      	strb	r2, [r3, #0]
 80094a8:	e7bc      	b.n	8009424 <ucdr_serialize_int16_t+0x60>
 80094aa:	4628      	mov	r0, r5
 80094ac:	f10d 0506 	add.w	r5, sp, #6
 80094b0:	4629      	mov	r1, r5
 80094b2:	4632      	mov	r2, r6
 80094b4:	f008 fdcd 	bl	8012052 <memcpy>
 80094b8:	68a0      	ldr	r0, [r4, #8]
 80094ba:	4642      	mov	r2, r8
 80094bc:	19a9      	adds	r1, r5, r6
 80094be:	f008 fdc8 	bl	8012052 <memcpy>
 80094c2:	e7af      	b.n	8009424 <ucdr_serialize_int16_t+0x60>

080094c4 <ucdr_deserialize_int16_t>:
 80094c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c8:	460d      	mov	r5, r1
 80094ca:	2102      	movs	r1, #2
 80094cc:	4604      	mov	r4, r0
 80094ce:	f000 faf3 	bl	8009ab8 <ucdr_buffer_alignment>
 80094d2:	4601      	mov	r1, r0
 80094d4:	4620      	mov	r0, r4
 80094d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80094da:	f000 fb31 	bl	8009b40 <ucdr_advance_buffer>
 80094de:	2102      	movs	r1, #2
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fa89 	bl	80099f8 <ucdr_check_buffer_available_for>
 80094e6:	bb60      	cbnz	r0, 8009542 <ucdr_deserialize_int16_t+0x7e>
 80094e8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80094ec:	42be      	cmp	r6, r7
 80094ee:	d923      	bls.n	8009538 <ucdr_deserialize_int16_t+0x74>
 80094f0:	6923      	ldr	r3, [r4, #16]
 80094f2:	60a6      	str	r6, [r4, #8]
 80094f4:	1bf6      	subs	r6, r6, r7
 80094f6:	4433      	add	r3, r6
 80094f8:	f1c6 0902 	rsb	r9, r6, #2
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	4649      	mov	r1, r9
 8009500:	4620      	mov	r0, r4
 8009502:	f000 fa85 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8009506:	2800      	cmp	r0, #0
 8009508:	d034      	beq.n	8009574 <ucdr_deserialize_int16_t+0xb0>
 800950a:	7d23      	ldrb	r3, [r4, #20]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d042      	beq.n	8009596 <ucdr_deserialize_int16_t+0xd2>
 8009510:	787b      	ldrb	r3, [r7, #1]
 8009512:	702b      	strb	r3, [r5, #0]
 8009514:	2e00      	cmp	r6, #0
 8009516:	d03a      	beq.n	800958e <ucdr_deserialize_int16_t+0xca>
 8009518:	783b      	ldrb	r3, [r7, #0]
 800951a:	706b      	strb	r3, [r5, #1]
 800951c:	6923      	ldr	r3, [r4, #16]
 800951e:	68a2      	ldr	r2, [r4, #8]
 8009520:	7da0      	ldrb	r0, [r4, #22]
 8009522:	2102      	movs	r1, #2
 8009524:	3302      	adds	r3, #2
 8009526:	444a      	add	r2, r9
 8009528:	1b9b      	subs	r3, r3, r6
 800952a:	7561      	strb	r1, [r4, #21]
 800952c:	60a2      	str	r2, [r4, #8]
 800952e:	6123      	str	r3, [r4, #16]
 8009530:	f080 0001 	eor.w	r0, r0, #1
 8009534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009538:	2102      	movs	r1, #2
 800953a:	4620      	mov	r0, r4
 800953c:	f000 fa68 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8009540:	b180      	cbz	r0, 8009564 <ucdr_deserialize_int16_t+0xa0>
 8009542:	7d23      	ldrb	r3, [r4, #20]
 8009544:	2b01      	cmp	r3, #1
 8009546:	68a3      	ldr	r3, [r4, #8]
 8009548:	d011      	beq.n	800956e <ucdr_deserialize_int16_t+0xaa>
 800954a:	785b      	ldrb	r3, [r3, #1]
 800954c:	702b      	strb	r3, [r5, #0]
 800954e:	68a3      	ldr	r3, [r4, #8]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	706b      	strb	r3, [r5, #1]
 8009554:	68a2      	ldr	r2, [r4, #8]
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	3202      	adds	r2, #2
 800955a:	3302      	adds	r3, #2
 800955c:	2102      	movs	r1, #2
 800955e:	60a2      	str	r2, [r4, #8]
 8009560:	6123      	str	r3, [r4, #16]
 8009562:	7561      	strb	r1, [r4, #21]
 8009564:	7da0      	ldrb	r0, [r4, #22]
 8009566:	f080 0001 	eor.w	r0, r0, #1
 800956a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	802b      	strh	r3, [r5, #0]
 8009572:	e7ef      	b.n	8009554 <ucdr_deserialize_int16_t+0x90>
 8009574:	68a2      	ldr	r2, [r4, #8]
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	7da0      	ldrb	r0, [r4, #22]
 800957a:	f884 8015 	strb.w	r8, [r4, #21]
 800957e:	1b92      	subs	r2, r2, r6
 8009580:	1b9b      	subs	r3, r3, r6
 8009582:	60a2      	str	r2, [r4, #8]
 8009584:	6123      	str	r3, [r4, #16]
 8009586:	f080 0001 	eor.w	r0, r0, #1
 800958a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958e:	68a3      	ldr	r3, [r4, #8]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	706b      	strb	r3, [r5, #1]
 8009594:	e7c2      	b.n	800951c <ucdr_deserialize_int16_t+0x58>
 8009596:	4639      	mov	r1, r7
 8009598:	4632      	mov	r2, r6
 800959a:	4628      	mov	r0, r5
 800959c:	f008 fd59 	bl	8012052 <memcpy>
 80095a0:	68a1      	ldr	r1, [r4, #8]
 80095a2:	464a      	mov	r2, r9
 80095a4:	19a8      	adds	r0, r5, r6
 80095a6:	f008 fd54 	bl	8012052 <memcpy>
 80095aa:	e7b7      	b.n	800951c <ucdr_deserialize_int16_t+0x58>

080095ac <ucdr_deserialize_int32_t>:
 80095ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b0:	460d      	mov	r5, r1
 80095b2:	2104      	movs	r1, #4
 80095b4:	4604      	mov	r4, r0
 80095b6:	f000 fa7f 	bl	8009ab8 <ucdr_buffer_alignment>
 80095ba:	4601      	mov	r1, r0
 80095bc:	4620      	mov	r0, r4
 80095be:	f894 8015 	ldrb.w	r8, [r4, #21]
 80095c2:	f000 fabd 	bl	8009b40 <ucdr_advance_buffer>
 80095c6:	2104      	movs	r1, #4
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fa15 	bl	80099f8 <ucdr_check_buffer_available_for>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d138      	bne.n	8009644 <ucdr_deserialize_int32_t+0x98>
 80095d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80095d6:	42b7      	cmp	r7, r6
 80095d8:	d92f      	bls.n	800963a <ucdr_deserialize_int32_t+0x8e>
 80095da:	6923      	ldr	r3, [r4, #16]
 80095dc:	60a7      	str	r7, [r4, #8]
 80095de:	1bbf      	subs	r7, r7, r6
 80095e0:	443b      	add	r3, r7
 80095e2:	f1c7 0904 	rsb	r9, r7, #4
 80095e6:	6123      	str	r3, [r4, #16]
 80095e8:	4649      	mov	r1, r9
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 fa10 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d046      	beq.n	8009682 <ucdr_deserialize_int32_t+0xd6>
 80095f4:	7d23      	ldrb	r3, [r4, #20]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d05c      	beq.n	80096b4 <ucdr_deserialize_int32_t+0x108>
 80095fa:	78f3      	ldrb	r3, [r6, #3]
 80095fc:	702b      	strb	r3, [r5, #0]
 80095fe:	2f00      	cmp	r7, #0
 8009600:	d04c      	beq.n	800969c <ucdr_deserialize_int32_t+0xf0>
 8009602:	78b3      	ldrb	r3, [r6, #2]
 8009604:	706b      	strb	r3, [r5, #1]
 8009606:	2f01      	cmp	r7, #1
 8009608:	f105 0302 	add.w	r3, r5, #2
 800960c:	d04a      	beq.n	80096a4 <ucdr_deserialize_int32_t+0xf8>
 800960e:	7873      	ldrb	r3, [r6, #1]
 8009610:	70ab      	strb	r3, [r5, #2]
 8009612:	2f02      	cmp	r7, #2
 8009614:	f105 0303 	add.w	r3, r5, #3
 8009618:	d048      	beq.n	80096ac <ucdr_deserialize_int32_t+0x100>
 800961a:	7833      	ldrb	r3, [r6, #0]
 800961c:	70eb      	strb	r3, [r5, #3]
 800961e:	6923      	ldr	r3, [r4, #16]
 8009620:	68a2      	ldr	r2, [r4, #8]
 8009622:	7da0      	ldrb	r0, [r4, #22]
 8009624:	2104      	movs	r1, #4
 8009626:	3304      	adds	r3, #4
 8009628:	444a      	add	r2, r9
 800962a:	1bdb      	subs	r3, r3, r7
 800962c:	7561      	strb	r1, [r4, #21]
 800962e:	60a2      	str	r2, [r4, #8]
 8009630:	6123      	str	r3, [r4, #16]
 8009632:	f080 0001 	eor.w	r0, r0, #1
 8009636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800963a:	2104      	movs	r1, #4
 800963c:	4620      	mov	r0, r4
 800963e:	f000 f9e7 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8009642:	b1b0      	cbz	r0, 8009672 <ucdr_deserialize_int32_t+0xc6>
 8009644:	7d23      	ldrb	r3, [r4, #20]
 8009646:	2b01      	cmp	r3, #1
 8009648:	68a3      	ldr	r3, [r4, #8]
 800964a:	d017      	beq.n	800967c <ucdr_deserialize_int32_t+0xd0>
 800964c:	78db      	ldrb	r3, [r3, #3]
 800964e:	702b      	strb	r3, [r5, #0]
 8009650:	68a3      	ldr	r3, [r4, #8]
 8009652:	789b      	ldrb	r3, [r3, #2]
 8009654:	706b      	strb	r3, [r5, #1]
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	785b      	ldrb	r3, [r3, #1]
 800965a:	70ab      	strb	r3, [r5, #2]
 800965c:	68a3      	ldr	r3, [r4, #8]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	70eb      	strb	r3, [r5, #3]
 8009662:	68a2      	ldr	r2, [r4, #8]
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	3204      	adds	r2, #4
 8009668:	3304      	adds	r3, #4
 800966a:	2104      	movs	r1, #4
 800966c:	60a2      	str	r2, [r4, #8]
 800966e:	6123      	str	r3, [r4, #16]
 8009670:	7561      	strb	r1, [r4, #21]
 8009672:	7da0      	ldrb	r0, [r4, #22]
 8009674:	f080 0001 	eor.w	r0, r0, #1
 8009678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	e7ef      	b.n	8009662 <ucdr_deserialize_int32_t+0xb6>
 8009682:	68a2      	ldr	r2, [r4, #8]
 8009684:	6923      	ldr	r3, [r4, #16]
 8009686:	7da0      	ldrb	r0, [r4, #22]
 8009688:	f884 8015 	strb.w	r8, [r4, #21]
 800968c:	1bd2      	subs	r2, r2, r7
 800968e:	1bdb      	subs	r3, r3, r7
 8009690:	60a2      	str	r2, [r4, #8]
 8009692:	6123      	str	r3, [r4, #16]
 8009694:	f080 0001 	eor.w	r0, r0, #1
 8009698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969c:	68a3      	ldr	r3, [r4, #8]
 800969e:	789b      	ldrb	r3, [r3, #2]
 80096a0:	706b      	strb	r3, [r5, #1]
 80096a2:	1cab      	adds	r3, r5, #2
 80096a4:	68a2      	ldr	r2, [r4, #8]
 80096a6:	7852      	ldrb	r2, [r2, #1]
 80096a8:	f803 2b01 	strb.w	r2, [r3], #1
 80096ac:	68a2      	ldr	r2, [r4, #8]
 80096ae:	7812      	ldrb	r2, [r2, #0]
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	e7b4      	b.n	800961e <ucdr_deserialize_int32_t+0x72>
 80096b4:	4631      	mov	r1, r6
 80096b6:	463a      	mov	r2, r7
 80096b8:	4628      	mov	r0, r5
 80096ba:	f008 fcca 	bl	8012052 <memcpy>
 80096be:	68a1      	ldr	r1, [r4, #8]
 80096c0:	464a      	mov	r2, r9
 80096c2:	19e8      	adds	r0, r5, r7
 80096c4:	f008 fcc5 	bl	8012052 <memcpy>
 80096c8:	e7a9      	b.n	800961e <ucdr_deserialize_int32_t+0x72>
 80096ca:	bf00      	nop

080096cc <ucdr_serialize_double>:
 80096cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d0:	2108      	movs	r1, #8
 80096d2:	b082      	sub	sp, #8
 80096d4:	4604      	mov	r4, r0
 80096d6:	ed8d 0b00 	vstr	d0, [sp]
 80096da:	f000 f9ed 	bl	8009ab8 <ucdr_buffer_alignment>
 80096de:	4601      	mov	r1, r0
 80096e0:	4620      	mov	r0, r4
 80096e2:	7d67      	ldrb	r7, [r4, #21]
 80096e4:	f000 fa2c 	bl	8009b40 <ucdr_advance_buffer>
 80096e8:	2108      	movs	r1, #8
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 f984 	bl	80099f8 <ucdr_check_buffer_available_for>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d14e      	bne.n	8009792 <ucdr_serialize_double+0xc6>
 80096f4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80096f8:	42ab      	cmp	r3, r5
 80096fa:	d945      	bls.n	8009788 <ucdr_serialize_double+0xbc>
 80096fc:	1b5e      	subs	r6, r3, r5
 80096fe:	60a3      	str	r3, [r4, #8]
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	f1c6 0808 	rsb	r8, r6, #8
 8009706:	4433      	add	r3, r6
 8009708:	6123      	str	r3, [r4, #16]
 800970a:	4641      	mov	r1, r8
 800970c:	4620      	mov	r0, r4
 800970e:	f000 f97f 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8009712:	2800      	cmp	r0, #0
 8009714:	d074      	beq.n	8009800 <ucdr_serialize_double+0x134>
 8009716:	7d23      	ldrb	r3, [r4, #20]
 8009718:	2b01      	cmp	r3, #1
 800971a:	f000 809b 	beq.w	8009854 <ucdr_serialize_double+0x188>
 800971e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009722:	702b      	strb	r3, [r5, #0]
 8009724:	2e00      	cmp	r6, #0
 8009726:	d078      	beq.n	800981a <ucdr_serialize_double+0x14e>
 8009728:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800972c:	706b      	strb	r3, [r5, #1]
 800972e:	2e01      	cmp	r6, #1
 8009730:	d077      	beq.n	8009822 <ucdr_serialize_double+0x156>
 8009732:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009736:	70ab      	strb	r3, [r5, #2]
 8009738:	2e02      	cmp	r6, #2
 800973a:	d076      	beq.n	800982a <ucdr_serialize_double+0x15e>
 800973c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009740:	70eb      	strb	r3, [r5, #3]
 8009742:	2e03      	cmp	r6, #3
 8009744:	d075      	beq.n	8009832 <ucdr_serialize_double+0x166>
 8009746:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800974a:	712b      	strb	r3, [r5, #4]
 800974c:	2e04      	cmp	r6, #4
 800974e:	d074      	beq.n	800983a <ucdr_serialize_double+0x16e>
 8009750:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009754:	716b      	strb	r3, [r5, #5]
 8009756:	2e05      	cmp	r6, #5
 8009758:	d073      	beq.n	8009842 <ucdr_serialize_double+0x176>
 800975a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800975e:	71ab      	strb	r3, [r5, #6]
 8009760:	2e06      	cmp	r6, #6
 8009762:	d072      	beq.n	800984a <ucdr_serialize_double+0x17e>
 8009764:	f89d 3000 	ldrb.w	r3, [sp]
 8009768:	71eb      	strb	r3, [r5, #7]
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	68a2      	ldr	r2, [r4, #8]
 800976e:	7da0      	ldrb	r0, [r4, #22]
 8009770:	3308      	adds	r3, #8
 8009772:	1b9e      	subs	r6, r3, r6
 8009774:	4442      	add	r2, r8
 8009776:	2308      	movs	r3, #8
 8009778:	f080 0001 	eor.w	r0, r0, #1
 800977c:	60a2      	str	r2, [r4, #8]
 800977e:	6126      	str	r6, [r4, #16]
 8009780:	7563      	strb	r3, [r4, #21]
 8009782:	b002      	add	sp, #8
 8009784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009788:	2108      	movs	r1, #8
 800978a:	4620      	mov	r0, r4
 800978c:	f000 f940 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8009790:	b350      	cbz	r0, 80097e8 <ucdr_serialize_double+0x11c>
 8009792:	7d23      	ldrb	r3, [r4, #20]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d02d      	beq.n	80097f4 <ucdr_serialize_double+0x128>
 8009798:	68a3      	ldr	r3, [r4, #8]
 800979a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800979e:	701a      	strb	r2, [r3, #0]
 80097a0:	68a3      	ldr	r3, [r4, #8]
 80097a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80097a6:	705a      	strb	r2, [r3, #1]
 80097a8:	68a3      	ldr	r3, [r4, #8]
 80097aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80097ae:	709a      	strb	r2, [r3, #2]
 80097b0:	68a3      	ldr	r3, [r4, #8]
 80097b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097b6:	70da      	strb	r2, [r3, #3]
 80097b8:	68a3      	ldr	r3, [r4, #8]
 80097ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80097be:	711a      	strb	r2, [r3, #4]
 80097c0:	68a3      	ldr	r3, [r4, #8]
 80097c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80097c6:	715a      	strb	r2, [r3, #5]
 80097c8:	68a3      	ldr	r3, [r4, #8]
 80097ca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80097ce:	719a      	strb	r2, [r3, #6]
 80097d0:	68a3      	ldr	r3, [r4, #8]
 80097d2:	f89d 2000 	ldrb.w	r2, [sp]
 80097d6:	71da      	strb	r2, [r3, #7]
 80097d8:	68a2      	ldr	r2, [r4, #8]
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	3208      	adds	r2, #8
 80097de:	3308      	adds	r3, #8
 80097e0:	2108      	movs	r1, #8
 80097e2:	60a2      	str	r2, [r4, #8]
 80097e4:	6123      	str	r3, [r4, #16]
 80097e6:	7561      	strb	r1, [r4, #21]
 80097e8:	7da0      	ldrb	r0, [r4, #22]
 80097ea:	f080 0001 	eor.w	r0, r0, #1
 80097ee:	b002      	add	sp, #8
 80097f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f4:	466b      	mov	r3, sp
 80097f6:	cb03      	ldmia	r3!, {r0, r1}
 80097f8:	68a3      	ldr	r3, [r4, #8]
 80097fa:	6018      	str	r0, [r3, #0]
 80097fc:	6059      	str	r1, [r3, #4]
 80097fe:	e7eb      	b.n	80097d8 <ucdr_serialize_double+0x10c>
 8009800:	68a2      	ldr	r2, [r4, #8]
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	7da0      	ldrb	r0, [r4, #22]
 8009806:	7567      	strb	r7, [r4, #21]
 8009808:	1b92      	subs	r2, r2, r6
 800980a:	1b9b      	subs	r3, r3, r6
 800980c:	f080 0001 	eor.w	r0, r0, #1
 8009810:	60a2      	str	r2, [r4, #8]
 8009812:	6123      	str	r3, [r4, #16]
 8009814:	b002      	add	sp, #8
 8009816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981a:	68a3      	ldr	r3, [r4, #8]
 800981c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009820:	701a      	strb	r2, [r3, #0]
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009828:	701a      	strb	r2, [r3, #0]
 800982a:	68a3      	ldr	r3, [r4, #8]
 800982c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009830:	701a      	strb	r2, [r3, #0]
 8009832:	68a3      	ldr	r3, [r4, #8]
 8009834:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009838:	701a      	strb	r2, [r3, #0]
 800983a:	68a3      	ldr	r3, [r4, #8]
 800983c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009840:	701a      	strb	r2, [r3, #0]
 8009842:	68a3      	ldr	r3, [r4, #8]
 8009844:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	68a3      	ldr	r3, [r4, #8]
 800984c:	f89d 2000 	ldrb.w	r2, [sp]
 8009850:	701a      	strb	r2, [r3, #0]
 8009852:	e78a      	b.n	800976a <ucdr_serialize_double+0x9e>
 8009854:	4628      	mov	r0, r5
 8009856:	466d      	mov	r5, sp
 8009858:	4629      	mov	r1, r5
 800985a:	4632      	mov	r2, r6
 800985c:	f008 fbf9 	bl	8012052 <memcpy>
 8009860:	68a0      	ldr	r0, [r4, #8]
 8009862:	4642      	mov	r2, r8
 8009864:	19a9      	adds	r1, r5, r6
 8009866:	f008 fbf4 	bl	8012052 <memcpy>
 800986a:	e77e      	b.n	800976a <ucdr_serialize_double+0x9e>

0800986c <ucdr_deserialize_double>:
 800986c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009870:	460d      	mov	r5, r1
 8009872:	2108      	movs	r1, #8
 8009874:	4604      	mov	r4, r0
 8009876:	f000 f91f 	bl	8009ab8 <ucdr_buffer_alignment>
 800987a:	4601      	mov	r1, r0
 800987c:	4620      	mov	r0, r4
 800987e:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009882:	f000 f95d 	bl	8009b40 <ucdr_advance_buffer>
 8009886:	2108      	movs	r1, #8
 8009888:	4620      	mov	r0, r4
 800988a:	f000 f8b5 	bl	80099f8 <ucdr_check_buffer_available_for>
 800988e:	2800      	cmp	r0, #0
 8009890:	d151      	bne.n	8009936 <ucdr_deserialize_double+0xca>
 8009892:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009896:	42be      	cmp	r6, r7
 8009898:	d948      	bls.n	800992c <ucdr_deserialize_double+0xc0>
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	60a6      	str	r6, [r4, #8]
 800989e:	1bf6      	subs	r6, r6, r7
 80098a0:	4433      	add	r3, r6
 80098a2:	f1c6 0808 	rsb	r8, r6, #8
 80098a6:	6123      	str	r3, [r4, #16]
 80098a8:	4641      	mov	r1, r8
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 f8b0 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d06d      	beq.n	8009990 <ucdr_deserialize_double+0x124>
 80098b4:	7d23      	ldrb	r3, [r4, #20]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	f000 8093 	beq.w	80099e2 <ucdr_deserialize_double+0x176>
 80098bc:	79fb      	ldrb	r3, [r7, #7]
 80098be:	702b      	strb	r3, [r5, #0]
 80098c0:	2e00      	cmp	r6, #0
 80098c2:	d072      	beq.n	80099aa <ucdr_deserialize_double+0x13e>
 80098c4:	79bb      	ldrb	r3, [r7, #6]
 80098c6:	706b      	strb	r3, [r5, #1]
 80098c8:	2e01      	cmp	r6, #1
 80098ca:	f105 0302 	add.w	r3, r5, #2
 80098ce:	d070      	beq.n	80099b2 <ucdr_deserialize_double+0x146>
 80098d0:	797b      	ldrb	r3, [r7, #5]
 80098d2:	70ab      	strb	r3, [r5, #2]
 80098d4:	2e02      	cmp	r6, #2
 80098d6:	f105 0303 	add.w	r3, r5, #3
 80098da:	d06e      	beq.n	80099ba <ucdr_deserialize_double+0x14e>
 80098dc:	793b      	ldrb	r3, [r7, #4]
 80098de:	70eb      	strb	r3, [r5, #3]
 80098e0:	2e03      	cmp	r6, #3
 80098e2:	f105 0304 	add.w	r3, r5, #4
 80098e6:	d06c      	beq.n	80099c2 <ucdr_deserialize_double+0x156>
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	712b      	strb	r3, [r5, #4]
 80098ec:	2e04      	cmp	r6, #4
 80098ee:	f105 0305 	add.w	r3, r5, #5
 80098f2:	d06a      	beq.n	80099ca <ucdr_deserialize_double+0x15e>
 80098f4:	78bb      	ldrb	r3, [r7, #2]
 80098f6:	716b      	strb	r3, [r5, #5]
 80098f8:	2e05      	cmp	r6, #5
 80098fa:	f105 0306 	add.w	r3, r5, #6
 80098fe:	d068      	beq.n	80099d2 <ucdr_deserialize_double+0x166>
 8009900:	787b      	ldrb	r3, [r7, #1]
 8009902:	71ab      	strb	r3, [r5, #6]
 8009904:	2e06      	cmp	r6, #6
 8009906:	f105 0307 	add.w	r3, r5, #7
 800990a:	d066      	beq.n	80099da <ucdr_deserialize_double+0x16e>
 800990c:	783b      	ldrb	r3, [r7, #0]
 800990e:	71eb      	strb	r3, [r5, #7]
 8009910:	6923      	ldr	r3, [r4, #16]
 8009912:	68a2      	ldr	r2, [r4, #8]
 8009914:	7da0      	ldrb	r0, [r4, #22]
 8009916:	3308      	adds	r3, #8
 8009918:	1b9e      	subs	r6, r3, r6
 800991a:	2308      	movs	r3, #8
 800991c:	4442      	add	r2, r8
 800991e:	7563      	strb	r3, [r4, #21]
 8009920:	60a2      	str	r2, [r4, #8]
 8009922:	6126      	str	r6, [r4, #16]
 8009924:	f080 0001 	eor.w	r0, r0, #1
 8009928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992c:	2108      	movs	r1, #8
 800992e:	4620      	mov	r0, r4
 8009930:	f000 f86e 	bl	8009a10 <ucdr_check_final_buffer_behavior>
 8009934:	b310      	cbz	r0, 800997c <ucdr_deserialize_double+0x110>
 8009936:	7d23      	ldrb	r3, [r4, #20]
 8009938:	2b01      	cmp	r3, #1
 800993a:	68a3      	ldr	r3, [r4, #8]
 800993c:	d023      	beq.n	8009986 <ucdr_deserialize_double+0x11a>
 800993e:	79db      	ldrb	r3, [r3, #7]
 8009940:	702b      	strb	r3, [r5, #0]
 8009942:	68a3      	ldr	r3, [r4, #8]
 8009944:	799b      	ldrb	r3, [r3, #6]
 8009946:	706b      	strb	r3, [r5, #1]
 8009948:	68a3      	ldr	r3, [r4, #8]
 800994a:	795b      	ldrb	r3, [r3, #5]
 800994c:	70ab      	strb	r3, [r5, #2]
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	791b      	ldrb	r3, [r3, #4]
 8009952:	70eb      	strb	r3, [r5, #3]
 8009954:	68a3      	ldr	r3, [r4, #8]
 8009956:	78db      	ldrb	r3, [r3, #3]
 8009958:	712b      	strb	r3, [r5, #4]
 800995a:	68a3      	ldr	r3, [r4, #8]
 800995c:	789b      	ldrb	r3, [r3, #2]
 800995e:	716b      	strb	r3, [r5, #5]
 8009960:	68a3      	ldr	r3, [r4, #8]
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	71ab      	strb	r3, [r5, #6]
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	71eb      	strb	r3, [r5, #7]
 800996c:	68a2      	ldr	r2, [r4, #8]
 800996e:	6923      	ldr	r3, [r4, #16]
 8009970:	3208      	adds	r2, #8
 8009972:	3308      	adds	r3, #8
 8009974:	2108      	movs	r1, #8
 8009976:	60a2      	str	r2, [r4, #8]
 8009978:	6123      	str	r3, [r4, #16]
 800997a:	7561      	strb	r1, [r4, #21]
 800997c:	7da0      	ldrb	r0, [r4, #22]
 800997e:	f080 0001 	eor.w	r0, r0, #1
 8009982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	606b      	str	r3, [r5, #4]
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	e7ed      	b.n	800996c <ucdr_deserialize_double+0x100>
 8009990:	68a2      	ldr	r2, [r4, #8]
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	7da0      	ldrb	r0, [r4, #22]
 8009996:	f884 9015 	strb.w	r9, [r4, #21]
 800999a:	1b92      	subs	r2, r2, r6
 800999c:	1b9b      	subs	r3, r3, r6
 800999e:	60a2      	str	r2, [r4, #8]
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	f080 0001 	eor.w	r0, r0, #1
 80099a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099aa:	68a3      	ldr	r3, [r4, #8]
 80099ac:	799b      	ldrb	r3, [r3, #6]
 80099ae:	706b      	strb	r3, [r5, #1]
 80099b0:	1cab      	adds	r3, r5, #2
 80099b2:	68a2      	ldr	r2, [r4, #8]
 80099b4:	7952      	ldrb	r2, [r2, #5]
 80099b6:	f803 2b01 	strb.w	r2, [r3], #1
 80099ba:	68a2      	ldr	r2, [r4, #8]
 80099bc:	7912      	ldrb	r2, [r2, #4]
 80099be:	f803 2b01 	strb.w	r2, [r3], #1
 80099c2:	68a2      	ldr	r2, [r4, #8]
 80099c4:	78d2      	ldrb	r2, [r2, #3]
 80099c6:	f803 2b01 	strb.w	r2, [r3], #1
 80099ca:	68a2      	ldr	r2, [r4, #8]
 80099cc:	7892      	ldrb	r2, [r2, #2]
 80099ce:	f803 2b01 	strb.w	r2, [r3], #1
 80099d2:	68a2      	ldr	r2, [r4, #8]
 80099d4:	7852      	ldrb	r2, [r2, #1]
 80099d6:	f803 2b01 	strb.w	r2, [r3], #1
 80099da:	68a2      	ldr	r2, [r4, #8]
 80099dc:	7812      	ldrb	r2, [r2, #0]
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e796      	b.n	8009910 <ucdr_deserialize_double+0xa4>
 80099e2:	4639      	mov	r1, r7
 80099e4:	4632      	mov	r2, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	f008 fb33 	bl	8012052 <memcpy>
 80099ec:	68a1      	ldr	r1, [r4, #8]
 80099ee:	4642      	mov	r2, r8
 80099f0:	19a8      	adds	r0, r5, r6
 80099f2:	f008 fb2e 	bl	8012052 <memcpy>
 80099f6:	e78b      	b.n	8009910 <ucdr_deserialize_double+0xa4>

080099f8 <ucdr_check_buffer_available_for>:
 80099f8:	7d83      	ldrb	r3, [r0, #22]
 80099fa:	b93b      	cbnz	r3, 8009a0c <ucdr_check_buffer_available_for+0x14>
 80099fc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009a00:	4419      	add	r1, r3
 8009a02:	4288      	cmp	r0, r1
 8009a04:	bf34      	ite	cc
 8009a06:	2000      	movcc	r0, #0
 8009a08:	2001      	movcs	r0, #1
 8009a0a:	4770      	bx	lr
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	4770      	bx	lr

08009a10 <ucdr_check_final_buffer_behavior>:
 8009a10:	7d83      	ldrb	r3, [r0, #22]
 8009a12:	b943      	cbnz	r3, 8009a26 <ucdr_check_final_buffer_behavior+0x16>
 8009a14:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009a18:	4291      	cmp	r1, r2
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	d205      	bcs.n	8009a2c <ucdr_check_final_buffer_behavior+0x1c>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4618      	mov	r0, r3
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	2300      	movs	r3, #0
 8009a28:	4618      	mov	r0, r3
 8009a2a:	4770      	bx	lr
 8009a2c:	6982      	ldr	r2, [r0, #24]
 8009a2e:	b13a      	cbz	r2, 8009a40 <ucdr_check_final_buffer_behavior+0x30>
 8009a30:	69c1      	ldr	r1, [r0, #28]
 8009a32:	4790      	blx	r2
 8009a34:	f080 0301 	eor.w	r3, r0, #1
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	75a0      	strb	r0, [r4, #22]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	bd10      	pop	{r4, pc}
 8009a40:	2001      	movs	r0, #1
 8009a42:	75a0      	strb	r0, [r4, #22]
 8009a44:	e7fa      	b.n	8009a3c <ucdr_check_final_buffer_behavior+0x2c>
 8009a46:	bf00      	nop

08009a48 <ucdr_set_on_full_buffer_callback>:
 8009a48:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop

08009a50 <ucdr_init_buffer_origin_offset_endian>:
 8009a50:	b410      	push	{r4}
 8009a52:	9c01      	ldr	r4, [sp, #4]
 8009a54:	6001      	str	r1, [r0, #0]
 8009a56:	440a      	add	r2, r1
 8009a58:	6042      	str	r2, [r0, #4]
 8009a5a:	190a      	adds	r2, r1, r4
 8009a5c:	441c      	add	r4, r3
 8009a5e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8009a62:	6082      	str	r2, [r0, #8]
 8009a64:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009a68:	7503      	strb	r3, [r0, #20]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a74:	7542      	strb	r2, [r0, #21]
 8009a76:	7582      	strb	r2, [r0, #22]
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop

08009a7c <ucdr_init_buffer_origin_offset>:
 8009a7c:	b510      	push	{r4, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	9c04      	ldr	r4, [sp, #16]
 8009a82:	9400      	str	r4, [sp, #0]
 8009a84:	2401      	movs	r4, #1
 8009a86:	9401      	str	r4, [sp, #4]
 8009a88:	f7ff ffe2 	bl	8009a50 <ucdr_init_buffer_origin_offset_endian>
 8009a8c:	b002      	add	sp, #8
 8009a8e:	bd10      	pop	{r4, pc}

08009a90 <ucdr_init_buffer_origin>:
 8009a90:	b510      	push	{r4, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	2400      	movs	r4, #0
 8009a96:	9400      	str	r4, [sp, #0]
 8009a98:	f7ff fff0 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 8009a9c:	b002      	add	sp, #8
 8009a9e:	bd10      	pop	{r4, pc}

08009aa0 <ucdr_init_buffer>:
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f7ff bff5 	b.w	8009a90 <ucdr_init_buffer_origin>
 8009aa6:	bf00      	nop

08009aa8 <ucdr_alignment>:
 8009aa8:	fbb0 f3f1 	udiv	r3, r0, r1
 8009aac:	fb03 0011 	mls	r0, r3, r1, r0
 8009ab0:	1a08      	subs	r0, r1, r0
 8009ab2:	3901      	subs	r1, #1
 8009ab4:	4008      	ands	r0, r1
 8009ab6:	4770      	bx	lr

08009ab8 <ucdr_buffer_alignment>:
 8009ab8:	7d43      	ldrb	r3, [r0, #21]
 8009aba:	428b      	cmp	r3, r1
 8009abc:	d208      	bcs.n	8009ad0 <ucdr_buffer_alignment+0x18>
 8009abe:	6900      	ldr	r0, [r0, #16]
 8009ac0:	fbb0 f3f1 	udiv	r3, r0, r1
 8009ac4:	fb01 0013 	mls	r0, r1, r3, r0
 8009ac8:	1a08      	subs	r0, r1, r0
 8009aca:	3901      	subs	r1, #1
 8009acc:	4008      	ands	r0, r1
 8009ace:	4770      	bx	lr
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	4770      	bx	lr

08009ad4 <ucdr_align_to>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	460d      	mov	r5, r1
 8009ada:	f7ff ffed 	bl	8009ab8 <ucdr_buffer_alignment>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	6921      	ldr	r1, [r4, #16]
 8009ae2:	7565      	strb	r5, [r4, #21]
 8009ae4:	181a      	adds	r2, r3, r0
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	4408      	add	r0, r1
 8009aec:	bf28      	it	cs
 8009aee:	4613      	movcs	r3, r2
 8009af0:	6120      	str	r0, [r4, #16]
 8009af2:	60a3      	str	r3, [r4, #8]
 8009af4:	bd38      	pop	{r3, r4, r5, pc}
 8009af6:	bf00      	nop

08009af8 <ucdr_buffer_length>:
 8009af8:	6882      	ldr	r2, [r0, #8]
 8009afa:	6800      	ldr	r0, [r0, #0]
 8009afc:	1a10      	subs	r0, r2, r0
 8009afe:	4770      	bx	lr

08009b00 <ucdr_buffer_remaining>:
 8009b00:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009b04:	1a10      	subs	r0, r2, r0
 8009b06:	4770      	bx	lr

08009b08 <ucdr_check_final_buffer_behavior_array>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	7d83      	ldrb	r3, [r0, #22]
 8009b0c:	b963      	cbnz	r3, 8009b28 <ucdr_check_final_buffer_behavior_array+0x20>
 8009b0e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	4604      	mov	r4, r0
 8009b16:	460d      	mov	r5, r1
 8009b18:	d308      	bcc.n	8009b2c <ucdr_check_final_buffer_behavior_array+0x24>
 8009b1a:	b139      	cbz	r1, 8009b2c <ucdr_check_final_buffer_behavior_array+0x24>
 8009b1c:	6983      	ldr	r3, [r0, #24]
 8009b1e:	b163      	cbz	r3, 8009b3a <ucdr_check_final_buffer_behavior_array+0x32>
 8009b20:	69c1      	ldr	r1, [r0, #28]
 8009b22:	4798      	blx	r3
 8009b24:	75a0      	strb	r0, [r4, #22]
 8009b26:	b108      	cbz	r0, 8009b2c <ucdr_check_final_buffer_behavior_array+0x24>
 8009b28:	2000      	movs	r0, #0
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7ff ffe7 	bl	8009b00 <ucdr_buffer_remaining>
 8009b32:	42a8      	cmp	r0, r5
 8009b34:	bf28      	it	cs
 8009b36:	4628      	movcs	r0, r5
 8009b38:	bd38      	pop	{r3, r4, r5, pc}
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	7583      	strb	r3, [r0, #22]
 8009b3e:	e7f3      	b.n	8009b28 <ucdr_check_final_buffer_behavior_array+0x20>

08009b40 <ucdr_advance_buffer>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4604      	mov	r4, r0
 8009b44:	460d      	mov	r5, r1
 8009b46:	f7ff ff57 	bl	80099f8 <ucdr_check_buffer_available_for>
 8009b4a:	b178      	cbz	r0, 8009b6c <ucdr_advance_buffer+0x2c>
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	68a2      	ldr	r2, [r4, #8]
 8009b50:	442b      	add	r3, r5
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	2301      	movs	r3, #1
 8009b56:	442a      	add	r2, r5
 8009b58:	7563      	strb	r3, [r4, #21]
 8009b5a:	60a2      	str	r2, [r4, #8]
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	68a2      	ldr	r2, [r4, #8]
 8009b60:	6923      	ldr	r3, [r4, #16]
 8009b62:	4402      	add	r2, r0
 8009b64:	4403      	add	r3, r0
 8009b66:	1a2d      	subs	r5, r5, r0
 8009b68:	60a2      	str	r2, [r4, #8]
 8009b6a:	6123      	str	r3, [r4, #16]
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	2201      	movs	r2, #1
 8009b70:	4620      	mov	r0, r4
 8009b72:	f7ff ffc9 	bl	8009b08 <ucdr_check_final_buffer_behavior_array>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d1f1      	bne.n	8009b5e <ucdr_advance_buffer+0x1e>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	7563      	strb	r3, [r4, #21]
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}

08009b80 <rclc_executor_trigger_any>:
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d03f      	beq.n	8009c04 <rclc_executor_trigger_any+0x84>
 8009b84:	2900      	cmp	r1, #0
 8009b86:	d03e      	beq.n	8009c06 <rclc_executor_trigger_any+0x86>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d037      	beq.n	8009c04 <rclc_executor_trigger_any+0x84>
 8009b94:	b430      	push	{r4, r5}
 8009b96:	f893 c000 	ldrb.w	ip, [r3]
 8009b9a:	f1bc 0f08 	cmp.w	ip, #8
 8009b9e:	d11e      	bne.n	8009bde <rclc_executor_trigger_any+0x5e>
 8009ba0:	685c      	ldr	r4, [r3, #4]
 8009ba2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009ba4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009ba8:	d105      	bne.n	8009bb6 <rclc_executor_trigger_any+0x36>
 8009baa:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009bae:	b910      	cbnz	r0, 8009bb6 <rclc_executor_trigger_any+0x36>
 8009bb0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009bb4:	b128      	cbz	r0, 8009bc2 <rclc_executor_trigger_any+0x42>
 8009bb6:	bc30      	pop	{r4, r5}
 8009bb8:	4770      	bx	lr
 8009bba:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d1f9      	bne.n	8009bb6 <rclc_executor_trigger_any+0x36>
 8009bc2:	3201      	adds	r2, #1
 8009bc4:	4291      	cmp	r1, r2
 8009bc6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009bca:	d018      	beq.n	8009bfe <rclc_executor_trigger_any+0x7e>
 8009bcc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d0f0      	beq.n	8009bb6 <rclc_executor_trigger_any+0x36>
 8009bd4:	f893 c000 	ldrb.w	ip, [r3]
 8009bd8:	f1bc 0f08 	cmp.w	ip, #8
 8009bdc:	d0e0      	beq.n	8009ba0 <rclc_executor_trigger_any+0x20>
 8009bde:	f1bc 0f09 	cmp.w	ip, #9
 8009be2:	d1ea      	bne.n	8009bba <rclc_executor_trigger_any+0x3a>
 8009be4:	685c      	ldr	r4, [r3, #4]
 8009be6:	6a25      	ldr	r5, [r4, #32]
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	d1e4      	bne.n	8009bb6 <rclc_executor_trigger_any+0x36>
 8009bec:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d1e0      	bne.n	8009bb6 <rclc_executor_trigger_any+0x36>
 8009bf4:	3201      	adds	r2, #1
 8009bf6:	4291      	cmp	r1, r2
 8009bf8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009bfc:	d1e6      	bne.n	8009bcc <rclc_executor_trigger_any+0x4c>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	bc30      	pop	{r4, r5}
 8009c02:	4770      	bx	lr
 8009c04:	4770      	bx	lr
 8009c06:	4608      	mov	r0, r1
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop

08009c0c <rclc_executor_get_zero_initialized_executor>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	4903      	ldr	r1, [pc, #12]	@ (8009c1c <rclc_executor_get_zero_initialized_executor+0x10>)
 8009c10:	4604      	mov	r4, r0
 8009c12:	2288      	movs	r2, #136	@ 0x88
 8009c14:	f008 fa1d 	bl	8012052 <memcpy>
 8009c18:	4620      	mov	r0, r4
 8009c1a:	bd10      	pop	{r4, pc}
 8009c1c:	08013090 	.word	0x08013090

08009c20 <rclc_executor_init>:
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d05f      	beq.n	8009ce4 <rclc_executor_init+0xc4>
 8009c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c28:	460c      	mov	r4, r1
 8009c2a:	b0b0      	sub	sp, #192	@ 0xc0
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	d051      	beq.n	8009cd4 <rclc_executor_init+0xb4>
 8009c30:	4605      	mov	r5, r0
 8009c32:	4618      	mov	r0, r3
 8009c34:	4616      	mov	r6, r2
 8009c36:	461f      	mov	r7, r3
 8009c38:	f000 f9b6 	bl	8009fa8 <rcutils_allocator_is_valid>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d049      	beq.n	8009cd4 <rclc_executor_init+0xb4>
 8009c40:	2e00      	cmp	r6, #0
 8009c42:	d047      	beq.n	8009cd4 <rclc_executor_init+0xb4>
 8009c44:	492c      	ldr	r1, [pc, #176]	@ (8009cf8 <rclc_executor_init+0xd8>)
 8009c46:	2288      	movs	r2, #136	@ 0x88
 8009c48:	a80e      	add	r0, sp, #56	@ 0x38
 8009c4a:	f008 fa02 	bl	8012052 <memcpy>
 8009c4e:	a90e      	add	r1, sp, #56	@ 0x38
 8009c50:	2288      	movs	r2, #136	@ 0x88
 8009c52:	4628      	mov	r0, r5
 8009c54:	f008 f9fd 	bl	8012052 <memcpy>
 8009c58:	602c      	str	r4, [r5, #0]
 8009c5a:	4668      	mov	r0, sp
 8009c5c:	60ae      	str	r6, [r5, #8]
 8009c5e:	466c      	mov	r4, sp
 8009c60:	f001 fa6a 	bl	800b138 <rcl_get_zero_initialized_wait_set>
 8009c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c66:	f105 0c14 	add.w	ip, r5, #20
 8009c6a:	f8d7 8000 	ldr.w	r8, [r7]
 8009c6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c7e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009cf0 <rclc_executor_init+0xd0>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	f8cc 3000 	str.w	r3, [ip]
 8009c88:	6939      	ldr	r1, [r7, #16]
 8009c8a:	612f      	str	r7, [r5, #16]
 8009c8c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8009c90:	01b0      	lsls	r0, r6, #6
 8009c92:	47c0      	blx	r8
 8009c94:	6068      	str	r0, [r5, #4]
 8009c96:	b338      	cbz	r0, 8009ce8 <rclc_executor_init+0xc8>
 8009c98:	2400      	movs	r4, #0
 8009c9a:	e000      	b.n	8009c9e <rclc_executor_init+0x7e>
 8009c9c:	6868      	ldr	r0, [r5, #4]
 8009c9e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	3401      	adds	r4, #1
 8009ca6:	f000 f86b 	bl	8009d80 <rclc_executor_handle_init>
 8009caa:	42a6      	cmp	r6, r4
 8009cac:	d1f6      	bne.n	8009c9c <rclc_executor_init+0x7c>
 8009cae:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8009cb2:	f000 f859 	bl	8009d68 <rclc_executor_handle_counters_zero_init>
 8009cb6:	4a11      	ldr	r2, [pc, #68]	@ (8009cfc <rclc_executor_init+0xdc>)
 8009cb8:	686b      	ldr	r3, [r5, #4]
 8009cba:	2000      	movs	r0, #0
 8009cbc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8009cc0:	b163      	cbz	r3, 8009cdc <rclc_executor_init+0xbc>
 8009cc2:	692b      	ldr	r3, [r5, #16]
 8009cc4:	b153      	cbz	r3, 8009cdc <rclc_executor_init+0xbc>
 8009cc6:	68ab      	ldr	r3, [r5, #8]
 8009cc8:	b143      	cbz	r3, 8009cdc <rclc_executor_init+0xbc>
 8009cca:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8009cce:	b030      	add	sp, #192	@ 0xc0
 8009cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd4:	200b      	movs	r0, #11
 8009cd6:	b030      	add	sp, #192	@ 0xc0
 8009cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	b030      	add	sp, #192	@ 0xc0
 8009ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce4:	200b      	movs	r0, #11
 8009ce6:	4770      	bx	lr
 8009ce8:	200a      	movs	r0, #10
 8009cea:	e7f4      	b.n	8009cd6 <rclc_executor_init+0xb6>
 8009cec:	f3af 8000 	nop.w
 8009cf0:	3b9aca00 	.word	0x3b9aca00
 8009cf4:	00000000 	.word	0x00000000
 8009cf8:	08013090 	.word	0x08013090
 8009cfc:	08009b81 	.word	0x08009b81

08009d00 <rclc_executor_add_subscription>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009d06:	b338      	cbz	r0, 8009d58 <rclc_executor_add_subscription+0x58>
 8009d08:	b331      	cbz	r1, 8009d58 <rclc_executor_add_subscription+0x58>
 8009d0a:	b32a      	cbz	r2, 8009d58 <rclc_executor_add_subscription+0x58>
 8009d0c:	b323      	cbz	r3, 8009d58 <rclc_executor_add_subscription+0x58>
 8009d0e:	4604      	mov	r4, r0
 8009d10:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009d14:	42a8      	cmp	r0, r5
 8009d16:	d301      	bcc.n	8009d1c <rclc_executor_add_subscription+0x1c>
 8009d18:	2001      	movs	r0, #1
 8009d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d1c:	6866      	ldr	r6, [r4, #4]
 8009d1e:	0187      	lsls	r7, r0, #6
 8009d20:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009d24:	2500      	movs	r5, #0
 8009d26:	55f5      	strb	r5, [r6, r7]
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009d2e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009d32:	2301      	movs	r3, #1
 8009d34:	f104 0514 	add.w	r5, r4, #20
 8009d38:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009d3c:	f88c e001 	strb.w	lr, [ip, #1]
 8009d40:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009d44:	60e0      	str	r0, [r4, #12]
 8009d46:	4628      	mov	r0, r5
 8009d48:	f001 fa0a 	bl	800b160 <rcl_wait_set_is_valid>
 8009d4c:	b930      	cbnz	r0, 8009d5c <rclc_executor_add_subscription+0x5c>
 8009d4e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009d50:	3301      	adds	r3, #1
 8009d52:	2000      	movs	r0, #0
 8009d54:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d58:	200b      	movs	r0, #11
 8009d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f001 fa05 	bl	800b16c <rcl_wait_set_fini>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d0f3      	beq.n	8009d4e <rclc_executor_add_subscription+0x4e>
 8009d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d68 <rclc_executor_handle_counters_zero_init>:
 8009d68:	b130      	cbz	r0, 8009d78 <rclc_executor_handle_counters_zero_init+0x10>
 8009d6a:	b508      	push	{r3, lr}
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	2100      	movs	r1, #0
 8009d70:	f008 f8a6 	bl	8011ec0 <memset>
 8009d74:	2000      	movs	r0, #0
 8009d76:	bd08      	pop	{r3, pc}
 8009d78:	200b      	movs	r0, #11
 8009d7a:	4770      	bx	lr
 8009d7c:	0000      	movs	r0, r0
	...

08009d80 <rclc_executor_handle_init>:
 8009d80:	b168      	cbz	r0, 8009d9e <rclc_executor_handle_init+0x1e>
 8009d82:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8009da8 <rclc_executor_handle_init+0x28>
 8009d86:	2300      	movs	r3, #0
 8009d88:	220b      	movs	r2, #11
 8009d8a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8009d8e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8009d92:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8009d96:	8002      	strh	r2, [r0, #0]
 8009d98:	8703      	strh	r3, [r0, #56]	@ 0x38
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	4770      	bx	lr
 8009d9e:	200b      	movs	r0, #11
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	f3af 8000 	nop.w
	...

08009db0 <rclc_support_init>:
 8009db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db4:	b086      	sub	sp, #24
 8009db6:	b3b8      	cbz	r0, 8009e28 <rclc_support_init+0x78>
 8009db8:	461c      	mov	r4, r3
 8009dba:	b3ab      	cbz	r3, 8009e28 <rclc_support_init+0x78>
 8009dbc:	460f      	mov	r7, r1
 8009dbe:	4690      	mov	r8, r2
 8009dc0:	4606      	mov	r6, r0
 8009dc2:	f000 fb7b 	bl	800a4bc <rcl_get_zero_initialized_init_options>
 8009dc6:	f104 030c 	add.w	r3, r4, #12
 8009dca:	9005      	str	r0, [sp, #20]
 8009dcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009dd0:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009dd4:	a805      	add	r0, sp, #20
 8009dd6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009dda:	f000 fb71 	bl	800a4c0 <rcl_init_options_init>
 8009dde:	4605      	mov	r5, r0
 8009de0:	b9e0      	cbnz	r0, 8009e1c <rclc_support_init+0x6c>
 8009de2:	ad02      	add	r5, sp, #8
 8009de4:	4628      	mov	r0, r5
 8009de6:	f000 f9f5 	bl	800a1d4 <rcl_get_zero_initialized_context>
 8009dea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009dee:	4633      	mov	r3, r6
 8009df0:	e886 0003 	stmia.w	r6, {r0, r1}
 8009df4:	aa05      	add	r2, sp, #20
 8009df6:	4641      	mov	r1, r8
 8009df8:	4638      	mov	r0, r7
 8009dfa:	f000 fa5b 	bl	800a2b4 <rcl_init>
 8009dfe:	4605      	mov	r5, r0
 8009e00:	b9b8      	cbnz	r0, 8009e32 <rclc_support_init+0x82>
 8009e02:	60b4      	str	r4, [r6, #8]
 8009e04:	4622      	mov	r2, r4
 8009e06:	f106 010c 	add.w	r1, r6, #12
 8009e0a:	2003      	movs	r0, #3
 8009e0c:	f001 f8b2 	bl	800af74 <rcl_clock_init>
 8009e10:	4605      	mov	r5, r0
 8009e12:	b970      	cbnz	r0, 8009e32 <rclc_support_init+0x82>
 8009e14:	a805      	add	r0, sp, #20
 8009e16:	f000 fbb9 	bl	800a58c <rcl_init_options_fini>
 8009e1a:	b108      	cbz	r0, 8009e20 <rclc_support_init+0x70>
 8009e1c:	f000 f8e8 	bl	8009ff0 <rcutils_reset_error>
 8009e20:	4628      	mov	r0, r5
 8009e22:	b006      	add	sp, #24
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e28:	250b      	movs	r5, #11
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	b006      	add	sp, #24
 8009e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e32:	f000 f8dd 	bl	8009ff0 <rcutils_reset_error>
 8009e36:	a805      	add	r0, sp, #20
 8009e38:	f000 fba8 	bl	800a58c <rcl_init_options_fini>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d0ef      	beq.n	8009e20 <rclc_support_init+0x70>
 8009e40:	e7ec      	b.n	8009e1c <rclc_support_init+0x6c>
 8009e42:	bf00      	nop

08009e44 <rclc_node_init_default>:
 8009e44:	b3b8      	cbz	r0, 8009eb6 <rclc_node_init_default+0x72>
 8009e46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e4a:	460d      	mov	r5, r1
 8009e4c:	b0a1      	sub	sp, #132	@ 0x84
 8009e4e:	b329      	cbz	r1, 8009e9c <rclc_node_init_default+0x58>
 8009e50:	4616      	mov	r6, r2
 8009e52:	b31a      	cbz	r2, 8009e9c <rclc_node_init_default+0x58>
 8009e54:	461f      	mov	r7, r3
 8009e56:	b30b      	cbz	r3, 8009e9c <rclc_node_init_default+0x58>
 8009e58:	f10d 0810 	add.w	r8, sp, #16
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	4640      	mov	r0, r8
 8009e60:	f000 fc4c 	bl	800a6fc <rcl_get_zero_initialized_node>
 8009e64:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009e68:	f10d 0918 	add.w	r9, sp, #24
 8009e6c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009e70:	4648      	mov	r0, r9
 8009e72:	f000 fdbb 	bl	800a9ec <rcl_node_get_default_options>
 8009e76:	4640      	mov	r0, r8
 8009e78:	f000 fc40 	bl	800a6fc <rcl_get_zero_initialized_node>
 8009e7c:	f8cd 9000 	str.w	r9, [sp]
 8009e80:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009e84:	463b      	mov	r3, r7
 8009e86:	e884 0003 	stmia.w	r4, {r0, r1}
 8009e8a:	4632      	mov	r2, r6
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 fc3e 	bl	800a710 <rcl_node_init>
 8009e94:	b930      	cbnz	r0, 8009ea4 <rclc_node_init_default+0x60>
 8009e96:	b021      	add	sp, #132	@ 0x84
 8009e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e9c:	200b      	movs	r0, #11
 8009e9e:	b021      	add	sp, #132	@ 0x84
 8009ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ea4:	9003      	str	r0, [sp, #12]
 8009ea6:	f000 f8a3 	bl	8009ff0 <rcutils_reset_error>
 8009eaa:	f000 f8a1 	bl	8009ff0 <rcutils_reset_error>
 8009eae:	9803      	ldr	r0, [sp, #12]
 8009eb0:	b021      	add	sp, #132	@ 0x84
 8009eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eb6:	200b      	movs	r0, #11
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop

08009ebc <rclc_subscription_init_default>:
 8009ebc:	b368      	cbz	r0, 8009f1a <rclc_subscription_init_default+0x5e>
 8009ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	b0a0      	sub	sp, #128	@ 0x80
 8009ec6:	b321      	cbz	r1, 8009f12 <rclc_subscription_init_default+0x56>
 8009ec8:	4616      	mov	r6, r2
 8009eca:	b312      	cbz	r2, 8009f12 <rclc_subscription_init_default+0x56>
 8009ecc:	461f      	mov	r7, r3
 8009ece:	b303      	cbz	r3, 8009f12 <rclc_subscription_init_default+0x56>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	f000 ff5b 	bl	800ad8c <rcl_get_zero_initialized_subscription>
 8009ed6:	f10d 0810 	add.w	r8, sp, #16
 8009eda:	6020      	str	r0, [r4, #0]
 8009edc:	4640      	mov	r0, r8
 8009ede:	f001 f803 	bl	800aee8 <rcl_subscription_get_default_options>
 8009ee2:	490f      	ldr	r1, [pc, #60]	@ (8009f20 <rclc_subscription_init_default+0x64>)
 8009ee4:	2250      	movs	r2, #80	@ 0x50
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	f008 f8b3 	bl	8012052 <memcpy>
 8009eec:	f8cd 8000 	str.w	r8, [sp]
 8009ef0:	463b      	mov	r3, r7
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 ff4e 	bl	800ad98 <rcl_subscription_init>
 8009efc:	b910      	cbnz	r0, 8009f04 <rclc_subscription_init_default+0x48>
 8009efe:	b020      	add	sp, #128	@ 0x80
 8009f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f04:	9003      	str	r0, [sp, #12]
 8009f06:	f000 f873 	bl	8009ff0 <rcutils_reset_error>
 8009f0a:	9803      	ldr	r0, [sp, #12]
 8009f0c:	b020      	add	sp, #128	@ 0x80
 8009f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f12:	200b      	movs	r0, #11
 8009f14:	b020      	add	sp, #128	@ 0x80
 8009f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f1a:	200b      	movs	r0, #11
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	08013118 	.word	0x08013118

08009f24 <__default_zero_allocate>:
 8009f24:	f007 bbf2 	b.w	801170c <calloc>

08009f28 <__default_reallocate>:
 8009f28:	f007 bd7e 	b.w	8011a28 <realloc>

08009f2c <__default_deallocate>:
 8009f2c:	f007 bc5a 	b.w	80117e4 <free>

08009f30 <__default_allocate>:
 8009f30:	f007 bc50 	b.w	80117d4 <malloc>

08009f34 <rcutils_get_zero_initialized_allocator>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	4c05      	ldr	r4, [pc, #20]	@ (8009f4c <rcutils_get_zero_initialized_allocator+0x18>)
 8009f38:	4686      	mov	lr, r0
 8009f3a:	4684      	mov	ip, r0
 8009f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	f8cc 3000 	str.w	r3, [ip]
 8009f48:	4670      	mov	r0, lr
 8009f4a:	bd10      	pop	{r4, pc}
 8009f4c:	08013168 	.word	0x08013168

08009f50 <rcutils_set_default_allocator>:
 8009f50:	b1a8      	cbz	r0, 8009f7e <rcutils_set_default_allocator+0x2e>
 8009f52:	6802      	ldr	r2, [r0, #0]
 8009f54:	b1a2      	cbz	r2, 8009f80 <rcutils_set_default_allocator+0x30>
 8009f56:	6841      	ldr	r1, [r0, #4]
 8009f58:	b1a1      	cbz	r1, 8009f84 <rcutils_set_default_allocator+0x34>
 8009f5a:	b410      	push	{r4}
 8009f5c:	68c4      	ldr	r4, [r0, #12]
 8009f5e:	b164      	cbz	r4, 8009f7a <rcutils_set_default_allocator+0x2a>
 8009f60:	6880      	ldr	r0, [r0, #8]
 8009f62:	b138      	cbz	r0, 8009f74 <rcutils_set_default_allocator+0x24>
 8009f64:	4b08      	ldr	r3, [pc, #32]	@ (8009f88 <rcutils_set_default_allocator+0x38>)
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8009f6e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8009f72:	2001      	movs	r0, #1
 8009f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	e7fa      	b.n	8009f74 <rcutils_set_default_allocator+0x24>
 8009f7e:	4770      	bx	lr
 8009f80:	4610      	mov	r0, r2
 8009f82:	4770      	bx	lr
 8009f84:	4608      	mov	r0, r1
 8009f86:	4770      	bx	lr
 8009f88:	200001bc 	.word	0x200001bc

08009f8c <rcutils_get_default_allocator>:
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	4c05      	ldr	r4, [pc, #20]	@ (8009fa4 <rcutils_get_default_allocator+0x18>)
 8009f90:	4686      	mov	lr, r0
 8009f92:	4684      	mov	ip, r0
 8009f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	f8cc 3000 	str.w	r3, [ip]
 8009fa0:	4670      	mov	r0, lr
 8009fa2:	bd10      	pop	{r4, pc}
 8009fa4:	200001bc 	.word	0x200001bc

08009fa8 <rcutils_allocator_is_valid>:
 8009fa8:	b158      	cbz	r0, 8009fc2 <rcutils_allocator_is_valid+0x1a>
 8009faa:	6803      	ldr	r3, [r0, #0]
 8009fac:	b143      	cbz	r3, 8009fc0 <rcutils_allocator_is_valid+0x18>
 8009fae:	6843      	ldr	r3, [r0, #4]
 8009fb0:	b133      	cbz	r3, 8009fc0 <rcutils_allocator_is_valid+0x18>
 8009fb2:	68c3      	ldr	r3, [r0, #12]
 8009fb4:	b123      	cbz	r3, 8009fc0 <rcutils_allocator_is_valid+0x18>
 8009fb6:	6880      	ldr	r0, [r0, #8]
 8009fb8:	3800      	subs	r0, #0
 8009fba:	bf18      	it	ne
 8009fbc:	2001      	movne	r0, #1
 8009fbe:	4770      	bx	lr
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	4770      	bx	lr

08009fc4 <rcutils_get_error_string>:
 8009fc4:	4b06      	ldr	r3, [pc, #24]	@ (8009fe0 <rcutils_get_error_string+0x1c>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	b13b      	cbz	r3, 8009fda <rcutils_get_error_string+0x16>
 8009fca:	4b06      	ldr	r3, [pc, #24]	@ (8009fe4 <rcutils_get_error_string+0x20>)
 8009fcc:	781a      	ldrb	r2, [r3, #0]
 8009fce:	b90a      	cbnz	r2, 8009fd4 <rcutils_get_error_string+0x10>
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	701a      	strb	r2, [r3, #0]
 8009fd4:	4b04      	ldr	r3, [pc, #16]	@ (8009fe8 <rcutils_get_error_string+0x24>)
 8009fd6:	7818      	ldrb	r0, [r3, #0]
 8009fd8:	4770      	bx	lr
 8009fda:	4b04      	ldr	r3, [pc, #16]	@ (8009fec <rcutils_get_error_string+0x28>)
 8009fdc:	7818      	ldrb	r0, [r3, #0]
 8009fde:	4770      	bx	lr
 8009fe0:	2000914c 	.word	0x2000914c
 8009fe4:	20009161 	.word	0x20009161
 8009fe8:	20009160 	.word	0x20009160
 8009fec:	0801317c 	.word	0x0801317c

08009ff0 <rcutils_reset_error>:
 8009ff0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a010 <rcutils_reset_error+0x20>
 8009ff4:	4a08      	ldr	r2, [pc, #32]	@ (800a018 <rcutils_reset_error+0x28>)
 8009ff6:	4809      	ldr	r0, [pc, #36]	@ (800a01c <rcutils_reset_error+0x2c>)
 8009ff8:	4909      	ldr	r1, [pc, #36]	@ (800a020 <rcutils_reset_error+0x30>)
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	8013      	strh	r3, [r2, #0]
 8009ffe:	ed82 7b02 	vstr	d7, [r2, #8]
 800a002:	4a08      	ldr	r2, [pc, #32]	@ (800a024 <rcutils_reset_error+0x34>)
 800a004:	7003      	strb	r3, [r0, #0]
 800a006:	700b      	strb	r3, [r1, #0]
 800a008:	7013      	strb	r3, [r2, #0]
 800a00a:	4770      	bx	lr
 800a00c:	f3af 8000 	nop.w
	...
 800a018:	20009150 	.word	0x20009150
 800a01c:	20009161 	.word	0x20009161
 800a020:	20009160 	.word	0x20009160
 800a024:	2000914c 	.word	0x2000914c

0800a028 <rcutils_system_time_now>:
 800a028:	b308      	cbz	r0, 800a06e <rcutils_system_time_now+0x46>
 800a02a:	b570      	push	{r4, r5, r6, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	4604      	mov	r4, r0
 800a030:	4669      	mov	r1, sp
 800a032:	2001      	movs	r0, #1
 800a034:	f7f7 feec 	bl	8001e10 <clock_gettime>
 800a038:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a03c:	2d00      	cmp	r5, #0
 800a03e:	db13      	blt.n	800a068 <rcutils_system_time_now+0x40>
 800a040:	9902      	ldr	r1, [sp, #8]
 800a042:	2900      	cmp	r1, #0
 800a044:	db0d      	blt.n	800a062 <rcutils_system_time_now+0x3a>
 800a046:	4e0b      	ldr	r6, [pc, #44]	@ (800a074 <rcutils_system_time_now+0x4c>)
 800a048:	fba3 3206 	umull	r3, r2, r3, r6
 800a04c:	185b      	adds	r3, r3, r1
 800a04e:	fb06 2205 	mla	r2, r6, r5, r2
 800a052:	f04f 0000 	mov.w	r0, #0
 800a056:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a05a:	e9c4 3200 	strd	r3, r2, [r4]
 800a05e:	b004      	add	sp, #16
 800a060:	bd70      	pop	{r4, r5, r6, pc}
 800a062:	ea53 0205 	orrs.w	r2, r3, r5
 800a066:	d1ee      	bne.n	800a046 <rcutils_system_time_now+0x1e>
 800a068:	2002      	movs	r0, #2
 800a06a:	b004      	add	sp, #16
 800a06c:	bd70      	pop	{r4, r5, r6, pc}
 800a06e:	200b      	movs	r0, #11
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	3b9aca00 	.word	0x3b9aca00

0800a078 <rcutils_steady_time_now>:
 800a078:	b308      	cbz	r0, 800a0be <rcutils_steady_time_now+0x46>
 800a07a:	b570      	push	{r4, r5, r6, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	4604      	mov	r4, r0
 800a080:	4669      	mov	r1, sp
 800a082:	2000      	movs	r0, #0
 800a084:	f7f7 fec4 	bl	8001e10 <clock_gettime>
 800a088:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a08c:	2d00      	cmp	r5, #0
 800a08e:	db13      	blt.n	800a0b8 <rcutils_steady_time_now+0x40>
 800a090:	9902      	ldr	r1, [sp, #8]
 800a092:	2900      	cmp	r1, #0
 800a094:	db0d      	blt.n	800a0b2 <rcutils_steady_time_now+0x3a>
 800a096:	4e0b      	ldr	r6, [pc, #44]	@ (800a0c4 <rcutils_steady_time_now+0x4c>)
 800a098:	fba3 3206 	umull	r3, r2, r3, r6
 800a09c:	185b      	adds	r3, r3, r1
 800a09e:	fb06 2205 	mla	r2, r6, r5, r2
 800a0a2:	f04f 0000 	mov.w	r0, #0
 800a0a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a0aa:	e9c4 3200 	strd	r3, r2, [r4]
 800a0ae:	b004      	add	sp, #16
 800a0b0:	bd70      	pop	{r4, r5, r6, pc}
 800a0b2:	ea53 0205 	orrs.w	r2, r3, r5
 800a0b6:	d1ee      	bne.n	800a096 <rcutils_steady_time_now+0x1e>
 800a0b8:	2002      	movs	r0, #2
 800a0ba:	b004      	add	sp, #16
 800a0bc:	bd70      	pop	{r4, r5, r6, pc}
 800a0be:	200b      	movs	r0, #11
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	3b9aca00 	.word	0x3b9aca00

0800a0c8 <rmw_uros_set_custom_transport>:
 800a0c8:	b470      	push	{r4, r5, r6}
 800a0ca:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a0ce:	b162      	cbz	r2, 800a0ea <rmw_uros_set_custom_transport+0x22>
 800a0d0:	b15b      	cbz	r3, 800a0ea <rmw_uros_set_custom_transport+0x22>
 800a0d2:	b155      	cbz	r5, 800a0ea <rmw_uros_set_custom_transport+0x22>
 800a0d4:	b14e      	cbz	r6, 800a0ea <rmw_uros_set_custom_transport+0x22>
 800a0d6:	4c06      	ldr	r4, [pc, #24]	@ (800a0f0 <rmw_uros_set_custom_transport+0x28>)
 800a0d8:	7020      	strb	r0, [r4, #0]
 800a0da:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a0de:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a0e2:	6166      	str	r6, [r4, #20]
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	bc70      	pop	{r4, r5, r6}
 800a0e8:	4770      	bx	lr
 800a0ea:	200b      	movs	r0, #11
 800a0ec:	bc70      	pop	{r4, r5, r6}
 800a0ee:	4770      	bx	lr
 800a0f0:	20009164 	.word	0x20009164

0800a0f4 <get_message_typesupport_handle>:
 800a0f4:	6883      	ldr	r3, [r0, #8]
 800a0f6:	4718      	bx	r3

0800a0f8 <get_message_typesupport_handle_function>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	6800      	ldr	r0, [r0, #0]
 800a0fe:	f7f6 f86f 	bl	80001e0 <strcmp>
 800a102:	2800      	cmp	r0, #0
 800a104:	bf0c      	ite	eq
 800a106:	4620      	moveq	r0, r4
 800a108:	2000      	movne	r0, #0
 800a10a:	bd10      	pop	{r4, pc}

0800a10c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800a10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a110:	6805      	ldr	r5, [r0, #0]
 800a112:	4604      	mov	r4, r0
 800a114:	4628      	mov	r0, r5
 800a116:	460e      	mov	r6, r1
 800a118:	f7f6 f862 	bl	80001e0 <strcmp>
 800a11c:	b1c8      	cbz	r0, 800a152 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800a11e:	4b11      	ldr	r3, [pc, #68]	@ (800a164 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	429d      	cmp	r5, r3
 800a124:	d112      	bne.n	800a14c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800a126:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a12a:	f8d8 4000 	ldr.w	r4, [r8]
 800a12e:	b16c      	cbz	r4, 800a14c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800a130:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800a134:	2700      	movs	r7, #0
 800a136:	3d04      	subs	r5, #4
 800a138:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800a13c:	4631      	mov	r1, r6
 800a13e:	f7f6 f84f 	bl	80001e0 <strcmp>
 800a142:	00bb      	lsls	r3, r7, #2
 800a144:	b140      	cbz	r0, 800a158 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800a146:	3701      	adds	r7, #1
 800a148:	42bc      	cmp	r4, r7
 800a14a:	d1f5      	bne.n	800a138 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800a14c:	2000      	movs	r0, #0
 800a14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a152:	4620      	mov	r0, r4
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a160:	58d3      	ldr	r3, [r2, r3]
 800a162:	4718      	bx	r3
 800a164:	200001d0 	.word	0x200001d0

0800a168 <geometry_msgs__msg__Twist__init>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	4605      	mov	r5, r0
 800a16c:	b1a8      	cbz	r0, 800a19a <geometry_msgs__msg__Twist__init+0x32>
 800a16e:	f000 f82b 	bl	800a1c8 <geometry_msgs__msg__Vector3__init>
 800a172:	4604      	mov	r4, r0
 800a174:	b140      	cbz	r0, 800a188 <geometry_msgs__msg__Twist__init+0x20>
 800a176:	f105 0618 	add.w	r6, r5, #24
 800a17a:	4630      	mov	r0, r6
 800a17c:	f000 f824 	bl	800a1c8 <geometry_msgs__msg__Vector3__init>
 800a180:	4604      	mov	r4, r0
 800a182:	b168      	cbz	r0, 800a1a0 <geometry_msgs__msg__Twist__init+0x38>
 800a184:	4620      	mov	r0, r4
 800a186:	bd70      	pop	{r4, r5, r6, pc}
 800a188:	4628      	mov	r0, r5
 800a18a:	f000 f821 	bl	800a1d0 <geometry_msgs__msg__Vector3__fini>
 800a18e:	f105 0018 	add.w	r0, r5, #24
 800a192:	f000 f81d 	bl	800a1d0 <geometry_msgs__msg__Vector3__fini>
 800a196:	4620      	mov	r0, r4
 800a198:	bd70      	pop	{r4, r5, r6, pc}
 800a19a:	4604      	mov	r4, r0
 800a19c:	4620      	mov	r0, r4
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f000 f815 	bl	800a1d0 <geometry_msgs__msg__Vector3__fini>
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f000 f812 	bl	800a1d0 <geometry_msgs__msg__Vector3__fini>
 800a1ac:	e7ea      	b.n	800a184 <geometry_msgs__msg__Twist__init+0x1c>
 800a1ae:	bf00      	nop

0800a1b0 <geometry_msgs__msg__Twist__fini>:
 800a1b0:	b148      	cbz	r0, 800a1c6 <geometry_msgs__msg__Twist__fini+0x16>
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	f000 f80b 	bl	800a1d0 <geometry_msgs__msg__Vector3__fini>
 800a1ba:	f104 0018 	add.w	r0, r4, #24
 800a1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c2:	f000 b805 	b.w	800a1d0 <geometry_msgs__msg__Vector3__fini>
 800a1c6:	4770      	bx	lr

0800a1c8 <geometry_msgs__msg__Vector3__init>:
 800a1c8:	3800      	subs	r0, #0
 800a1ca:	bf18      	it	ne
 800a1cc:	2001      	movne	r0, #1
 800a1ce:	4770      	bx	lr

0800a1d0 <geometry_msgs__msg__Vector3__fini>:
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop

0800a1d4 <rcl_get_zero_initialized_context>:
 800a1d4:	4a03      	ldr	r2, [pc, #12]	@ (800a1e4 <rcl_get_zero_initialized_context+0x10>)
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	4770      	bx	lr
 800a1e4:	08013198 	.word	0x08013198

0800a1e8 <rcl_context_is_valid>:
 800a1e8:	b118      	cbz	r0, 800a1f2 <rcl_context_is_valid+0xa>
 800a1ea:	6840      	ldr	r0, [r0, #4]
 800a1ec:	3800      	subs	r0, #0
 800a1ee:	bf18      	it	ne
 800a1f0:	2001      	movne	r0, #1
 800a1f2:	4770      	bx	lr

0800a1f4 <__cleanup_context>:
 800a1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	6800      	ldr	r0, [r0, #0]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	6073      	str	r3, [r6, #4]
 800a200:	2800      	cmp	r0, #0
 800a202:	d049      	beq.n	800a298 <__cleanup_context+0xa4>
 800a204:	6947      	ldr	r7, [r0, #20]
 800a206:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800a20a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800a20e:	b137      	cbz	r7, 800a21e <__cleanup_context+0x2a>
 800a210:	3014      	adds	r0, #20
 800a212:	f000 f9bb 	bl	800a58c <rcl_init_options_fini>
 800a216:	4607      	mov	r7, r0
 800a218:	2800      	cmp	r0, #0
 800a21a:	d144      	bne.n	800a2a6 <__cleanup_context+0xb2>
 800a21c:	6830      	ldr	r0, [r6, #0]
 800a21e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a220:	b143      	cbz	r3, 800a234 <__cleanup_context+0x40>
 800a222:	3028      	adds	r0, #40	@ 0x28
 800a224:	f001 ff20 	bl	800c068 <rmw_context_fini>
 800a228:	b118      	cbz	r0, 800a232 <__cleanup_context+0x3e>
 800a22a:	2f00      	cmp	r7, #0
 800a22c:	d03e      	beq.n	800a2ac <__cleanup_context+0xb8>
 800a22e:	f7ff fedf 	bl	8009ff0 <rcutils_reset_error>
 800a232:	6830      	ldr	r0, [r6, #0]
 800a234:	6a03      	ldr	r3, [r0, #32]
 800a236:	b1db      	cbz	r3, 800a270 <__cleanup_context+0x7c>
 800a238:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800a23c:	2a01      	cmp	r2, #1
 800a23e:	f17c 0100 	sbcs.w	r1, ip, #0
 800a242:	db11      	blt.n	800a268 <__cleanup_context+0x74>
 800a244:	2400      	movs	r4, #0
 800a246:	4625      	mov	r5, r4
 800a248:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a24c:	4649      	mov	r1, r9
 800a24e:	b1b8      	cbz	r0, 800a280 <__cleanup_context+0x8c>
 800a250:	47c0      	blx	r8
 800a252:	6833      	ldr	r3, [r6, #0]
 800a254:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800a258:	3401      	adds	r4, #1
 800a25a:	f145 0500 	adc.w	r5, r5, #0
 800a25e:	4294      	cmp	r4, r2
 800a260:	eb75 010c 	sbcs.w	r1, r5, ip
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	dbef      	blt.n	800a248 <__cleanup_context+0x54>
 800a268:	4618      	mov	r0, r3
 800a26a:	4649      	mov	r1, r9
 800a26c:	47c0      	blx	r8
 800a26e:	6830      	ldr	r0, [r6, #0]
 800a270:	4649      	mov	r1, r9
 800a272:	47c0      	blx	r8
 800a274:	2300      	movs	r3, #0
 800a276:	e9c6 3300 	strd	r3, r3, [r6]
 800a27a:	4638      	mov	r0, r7
 800a27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a280:	3401      	adds	r4, #1
 800a282:	f145 0500 	adc.w	r5, r5, #0
 800a286:	4294      	cmp	r4, r2
 800a288:	eb75 010c 	sbcs.w	r1, r5, ip
 800a28c:	dbdc      	blt.n	800a248 <__cleanup_context+0x54>
 800a28e:	4618      	mov	r0, r3
 800a290:	4649      	mov	r1, r9
 800a292:	47c0      	blx	r8
 800a294:	6830      	ldr	r0, [r6, #0]
 800a296:	e7eb      	b.n	800a270 <__cleanup_context+0x7c>
 800a298:	4607      	mov	r7, r0
 800a29a:	2300      	movs	r3, #0
 800a29c:	e9c6 3300 	strd	r3, r3, [r6]
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a6:	f7ff fea3 	bl	8009ff0 <rcutils_reset_error>
 800a2aa:	e7b7      	b.n	800a21c <__cleanup_context+0x28>
 800a2ac:	f005 fe4e 	bl	800ff4c <rcl_convert_rmw_ret_to_rcl_ret>
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	e7bc      	b.n	800a22e <__cleanup_context+0x3a>

0800a2b4 <rcl_init>:
 800a2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b8:	1e05      	subs	r5, r0, #0
 800a2ba:	b09e      	sub	sp, #120	@ 0x78
 800a2bc:	460e      	mov	r6, r1
 800a2be:	4690      	mov	r8, r2
 800a2c0:	461f      	mov	r7, r3
 800a2c2:	f340 809c 	ble.w	800a3fe <rcl_init+0x14a>
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	f000 809c 	beq.w	800a404 <rcl_init+0x150>
 800a2cc:	f1a1 0e04 	sub.w	lr, r1, #4
 800a2d0:	f04f 0c00 	mov.w	ip, #0
 800a2d4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800a2d8:	f10c 0c01 	add.w	ip, ip, #1
 800a2dc:	2c00      	cmp	r4, #0
 800a2de:	f000 8091 	beq.w	800a404 <rcl_init+0x150>
 800a2e2:	4565      	cmp	r5, ip
 800a2e4:	d1f6      	bne.n	800a2d4 <rcl_init+0x20>
 800a2e6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ea:	f000 808b 	beq.w	800a404 <rcl_init+0x150>
 800a2ee:	f8d8 4000 	ldr.w	r4, [r8]
 800a2f2:	2c00      	cmp	r4, #0
 800a2f4:	f000 8086 	beq.w	800a404 <rcl_init+0x150>
 800a2f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2fa:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800a2fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	f8cc 3000 	str.w	r3, [ip]
 800a308:	a819      	add	r0, sp, #100	@ 0x64
 800a30a:	f7ff fe4d 	bl	8009fa8 <rcutils_allocator_is_valid>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d078      	beq.n	800a404 <rcl_init+0x150>
 800a312:	2f00      	cmp	r7, #0
 800a314:	d076      	beq.n	800a404 <rcl_init+0x150>
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d178      	bne.n	800a40e <rcl_init+0x15a>
 800a31c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800a320:	2178      	movs	r1, #120	@ 0x78
 800a322:	2001      	movs	r0, #1
 800a324:	4798      	blx	r3
 800a326:	4604      	mov	r4, r0
 800a328:	6038      	str	r0, [r7, #0]
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f000 80b6 	beq.w	800a49c <rcl_init+0x1e8>
 800a330:	a802      	add	r0, sp, #8
 800a332:	f001 fa9d 	bl	800b870 <rmw_get_zero_initialized_context>
 800a336:	a902      	add	r1, sp, #8
 800a338:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a33c:	2250      	movs	r2, #80	@ 0x50
 800a33e:	ac19      	add	r4, sp, #100	@ 0x64
 800a340:	f007 fe87 	bl	8012052 <memcpy>
 800a344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a346:	f8d7 e000 	ldr.w	lr, [r7]
 800a34a:	46f4      	mov	ip, lr
 800a34c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	f8cc 3000 	str.w	r3, [ip]
 800a356:	f10e 0114 	add.w	r1, lr, #20
 800a35a:	4640      	mov	r0, r8
 800a35c:	f000 f940 	bl	800a5e0 <rcl_init_options_copy>
 800a360:	4604      	mov	r4, r0
 800a362:	2800      	cmp	r0, #0
 800a364:	d144      	bne.n	800a3f0 <rcl_init+0x13c>
 800a366:	f8d7 9000 	ldr.w	r9, [r7]
 800a36a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800a36e:	f8c9 0020 	str.w	r0, [r9, #32]
 800a372:	f8c9 5018 	str.w	r5, [r9, #24]
 800a376:	f8c9 801c 	str.w	r8, [r9, #28]
 800a37a:	2d00      	cmp	r5, #0
 800a37c:	d04e      	beq.n	800a41c <rcl_init+0x168>
 800a37e:	2e00      	cmp	r6, #0
 800a380:	d04c      	beq.n	800a41c <rcl_init+0x168>
 800a382:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800a386:	2104      	movs	r1, #4
 800a388:	4628      	mov	r0, r5
 800a38a:	4798      	blx	r3
 800a38c:	f8c9 0020 	str.w	r0, [r9, #32]
 800a390:	f8d7 9000 	ldr.w	r9, [r7]
 800a394:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800a398:	46ca      	mov	sl, r9
 800a39a:	b343      	cbz	r3, 800a3ee <rcl_init+0x13a>
 800a39c:	2d01      	cmp	r5, #1
 800a39e:	f178 0300 	sbcs.w	r3, r8, #0
 800a3a2:	db3b      	blt.n	800a41c <rcl_init+0x168>
 800a3a4:	2400      	movs	r4, #0
 800a3a6:	3e04      	subs	r6, #4
 800a3a8:	46a1      	mov	r9, r4
 800a3aa:	e00b      	b.n	800a3c4 <rcl_init+0x110>
 800a3ac:	6831      	ldr	r1, [r6, #0]
 800a3ae:	f007 fe50 	bl	8012052 <memcpy>
 800a3b2:	3401      	adds	r4, #1
 800a3b4:	f149 0900 	adc.w	r9, r9, #0
 800a3b8:	45c8      	cmp	r8, r9
 800a3ba:	bf08      	it	eq
 800a3bc:	42a5      	cmpeq	r5, r4
 800a3be:	d02b      	beq.n	800a418 <rcl_init+0x164>
 800a3c0:	f8d7 a000 	ldr.w	sl, [r7]
 800a3c4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800a3c8:	f7f5 ff14 	bl	80001f4 <strlen>
 800a3cc:	1c42      	adds	r2, r0, #1
 800a3ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3d0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800a3d2:	f8da a020 	ldr.w	sl, [sl, #32]
 800a3d6:	9201      	str	r2, [sp, #4]
 800a3d8:	4610      	mov	r0, r2
 800a3da:	4798      	blx	r3
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800a3e2:	6a1b      	ldr	r3, [r3, #32]
 800a3e4:	9a01      	ldr	r2, [sp, #4]
 800a3e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d1de      	bne.n	800a3ac <rcl_init+0xf8>
 800a3ee:	240a      	movs	r4, #10
 800a3f0:	4638      	mov	r0, r7
 800a3f2:	f7ff feff 	bl	800a1f4 <__cleanup_context>
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	b01e      	add	sp, #120	@ 0x78
 800a3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fe:	2900      	cmp	r1, #0
 800a400:	f43f af71 	beq.w	800a2e6 <rcl_init+0x32>
 800a404:	240b      	movs	r4, #11
 800a406:	4620      	mov	r0, r4
 800a408:	b01e      	add	sp, #120	@ 0x78
 800a40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a40e:	2464      	movs	r4, #100	@ 0x64
 800a410:	4620      	mov	r0, r4
 800a412:	b01e      	add	sp, #120	@ 0x78
 800a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a418:	f8d7 9000 	ldr.w	r9, [r7]
 800a41c:	4926      	ldr	r1, [pc, #152]	@ (800a4b8 <rcl_init+0x204>)
 800a41e:	680b      	ldr	r3, [r1, #0]
 800a420:	3301      	adds	r3, #1
 800a422:	d036      	beq.n	800a492 <rcl_init+0x1de>
 800a424:	600b      	str	r3, [r1, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	2400      	movs	r4, #0
 800a42a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800a42e:	607b      	str	r3, [r7, #4]
 800a430:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a432:	3301      	adds	r3, #1
 800a434:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800a438:	d034      	beq.n	800a4a4 <rcl_init+0x1f0>
 800a43a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800a43e:	b93b      	cbnz	r3, 800a450 <rcl_init+0x19c>
 800a440:	3030      	adds	r0, #48	@ 0x30
 800a442:	f000 f939 	bl	800a6b8 <rcl_get_localhost_only>
 800a446:	4604      	mov	r4, r0
 800a448:	2800      	cmp	r0, #0
 800a44a:	d1d1      	bne.n	800a3f0 <rcl_init+0x13c>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	6958      	ldr	r0, [r3, #20]
 800a450:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800a452:	aa18      	add	r2, sp, #96	@ 0x60
 800a454:	a917      	add	r1, sp, #92	@ 0x5c
 800a456:	f000 fe5d 	bl	800b114 <rcl_validate_enclave_name>
 800a45a:	4604      	mov	r4, r0
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d1c7      	bne.n	800a3f0 <rcl_init+0x13c>
 800a460:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a462:	b9eb      	cbnz	r3, 800a4a0 <rcl_init+0x1ec>
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	694b      	ldr	r3, [r1, #20]
 800a468:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a46a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800a46e:	f000 fc3d 	bl	800acec <rcl_get_security_options_from_environment>
 800a472:	4604      	mov	r4, r0
 800a474:	2800      	cmp	r0, #0
 800a476:	d1bb      	bne.n	800a3f0 <rcl_init+0x13c>
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6948      	ldr	r0, [r1, #20]
 800a47c:	3128      	adds	r1, #40	@ 0x28
 800a47e:	3018      	adds	r0, #24
 800a480:	f001 fcbc 	bl	800bdfc <rmw_init>
 800a484:	4604      	mov	r4, r0
 800a486:	2800      	cmp	r0, #0
 800a488:	d0bd      	beq.n	800a406 <rcl_init+0x152>
 800a48a:	f005 fd5f 	bl	800ff4c <rcl_convert_rmw_ret_to_rcl_ret>
 800a48e:	4604      	mov	r4, r0
 800a490:	e7ae      	b.n	800a3f0 <rcl_init+0x13c>
 800a492:	2201      	movs	r2, #1
 800a494:	461c      	mov	r4, r3
 800a496:	600a      	str	r2, [r1, #0]
 800a498:	4613      	mov	r3, r2
 800a49a:	e7c6      	b.n	800a42a <rcl_init+0x176>
 800a49c:	240a      	movs	r4, #10
 800a49e:	e7b2      	b.n	800a406 <rcl_init+0x152>
 800a4a0:	2401      	movs	r4, #1
 800a4a2:	e7a5      	b.n	800a3f0 <rcl_init+0x13c>
 800a4a4:	3024      	adds	r0, #36	@ 0x24
 800a4a6:	f005 fd65 	bl	800ff74 <rcl_get_default_domain_id>
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d19f      	bne.n	800a3f0 <rcl_init+0x13c>
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	6958      	ldr	r0, [r3, #20]
 800a4b4:	e7c1      	b.n	800a43a <rcl_init+0x186>
 800a4b6:	bf00      	nop
 800a4b8:	20009180 	.word	0x20009180

0800a4bc <rcl_get_zero_initialized_init_options>:
 800a4bc:	2000      	movs	r0, #0
 800a4be:	4770      	bx	lr

0800a4c0 <rcl_init_options_init>:
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c4:	b097      	sub	sp, #92	@ 0x5c
 800a4c6:	ae1d      	add	r6, sp, #116	@ 0x74
 800a4c8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d058      	beq.n	800a582 <rcl_init_options_init+0xc2>
 800a4d0:	6803      	ldr	r3, [r0, #0]
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	b133      	cbz	r3, 800a4e4 <rcl_init_options_init+0x24>
 800a4d6:	2464      	movs	r4, #100	@ 0x64
 800a4d8:	4620      	mov	r0, r4
 800a4da:	b017      	add	sp, #92	@ 0x5c
 800a4dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a4e0:	b004      	add	sp, #16
 800a4e2:	4770      	bx	lr
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7ff fd5f 	bl	8009fa8 <rcutils_allocator_is_valid>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d049      	beq.n	800a582 <rcl_init_options_init+0xc2>
 800a4ee:	46b4      	mov	ip, r6
 800a4f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a4f4:	ac11      	add	r4, sp, #68	@ 0x44
 800a4f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4f8:	f8dc 3000 	ldr.w	r3, [ip]
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a500:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a502:	2050      	movs	r0, #80	@ 0x50
 800a504:	4798      	blx	r3
 800a506:	4604      	mov	r4, r0
 800a508:	6028      	str	r0, [r5, #0]
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d03b      	beq.n	800a586 <rcl_init_options_init+0xc6>
 800a50e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800a512:	4686      	mov	lr, r0
 800a514:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a518:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a51c:	f8dc 3000 	ldr.w	r3, [ip]
 800a520:	f8ce 3000 	str.w	r3, [lr]
 800a524:	a802      	add	r0, sp, #8
 800a526:	f001 f9b3 	bl	800b890 <rmw_get_zero_initialized_init_options>
 800a52a:	f10d 0e08 	add.w	lr, sp, #8
 800a52e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a532:	f104 0c18 	add.w	ip, r4, #24
 800a536:	682f      	ldr	r7, [r5, #0]
 800a538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a53c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a540:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a544:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a548:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a54c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a550:	ac20      	add	r4, sp, #128	@ 0x80
 800a552:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a55a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a55e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a562:	f107 0018 	add.w	r0, r7, #24
 800a566:	f001 fb51 	bl	800bc0c <rmw_init_options_init>
 800a56a:	4604      	mov	r4, r0
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d0b3      	beq.n	800a4d8 <rcl_init_options_init+0x18>
 800a570:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a572:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a574:	6828      	ldr	r0, [r5, #0]
 800a576:	4798      	blx	r3
 800a578:	4620      	mov	r0, r4
 800a57a:	f005 fce7 	bl	800ff4c <rcl_convert_rmw_ret_to_rcl_ret>
 800a57e:	4604      	mov	r4, r0
 800a580:	e7aa      	b.n	800a4d8 <rcl_init_options_init+0x18>
 800a582:	240b      	movs	r4, #11
 800a584:	e7a8      	b.n	800a4d8 <rcl_init_options_init+0x18>
 800a586:	240a      	movs	r4, #10
 800a588:	e7a6      	b.n	800a4d8 <rcl_init_options_init+0x18>
 800a58a:	bf00      	nop

0800a58c <rcl_init_options_fini>:
 800a58c:	b530      	push	{r4, r5, lr}
 800a58e:	b087      	sub	sp, #28
 800a590:	b1f0      	cbz	r0, 800a5d0 <rcl_init_options_fini+0x44>
 800a592:	6803      	ldr	r3, [r0, #0]
 800a594:	4604      	mov	r4, r0
 800a596:	b1db      	cbz	r3, 800a5d0 <rcl_init_options_fini+0x44>
 800a598:	469c      	mov	ip, r3
 800a59a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a59e:	f10d 0e04 	add.w	lr, sp, #4
 800a5a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a5a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a5aa:	f8ce 3000 	str.w	r3, [lr]
 800a5ae:	a801      	add	r0, sp, #4
 800a5b0:	f7ff fcfa 	bl	8009fa8 <rcutils_allocator_is_valid>
 800a5b4:	b160      	cbz	r0, 800a5d0 <rcl_init_options_fini+0x44>
 800a5b6:	6820      	ldr	r0, [r4, #0]
 800a5b8:	3018      	adds	r0, #24
 800a5ba:	f001 fbd7 	bl	800bd6c <rmw_init_options_fini>
 800a5be:	4605      	mov	r5, r0
 800a5c0:	b950      	cbnz	r0, 800a5d8 <rcl_init_options_fini+0x4c>
 800a5c2:	6820      	ldr	r0, [r4, #0]
 800a5c4:	9b02      	ldr	r3, [sp, #8]
 800a5c6:	9905      	ldr	r1, [sp, #20]
 800a5c8:	4798      	blx	r3
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	b007      	add	sp, #28
 800a5ce:	bd30      	pop	{r4, r5, pc}
 800a5d0:	250b      	movs	r5, #11
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	b007      	add	sp, #28
 800a5d6:	bd30      	pop	{r4, r5, pc}
 800a5d8:	f005 fcb8 	bl	800ff4c <rcl_convert_rmw_ret_to_rcl_ret>
 800a5dc:	4605      	mov	r5, r0
 800a5de:	e7f8      	b.n	800a5d2 <rcl_init_options_fini+0x46>

0800a5e0 <rcl_init_options_copy>:
 800a5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e4:	b094      	sub	sp, #80	@ 0x50
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d058      	beq.n	800a69c <rcl_init_options_copy+0xbc>
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	6800      	ldr	r0, [r0, #0]
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d054      	beq.n	800a69c <rcl_init_options_copy+0xbc>
 800a5f2:	460e      	mov	r6, r1
 800a5f4:	f7ff fcd8 	bl	8009fa8 <rcutils_allocator_is_valid>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d04f      	beq.n	800a69c <rcl_init_options_copy+0xbc>
 800a5fc:	2e00      	cmp	r6, #0
 800a5fe:	d04d      	beq.n	800a69c <rcl_init_options_copy+0xbc>
 800a600:	6833      	ldr	r3, [r6, #0]
 800a602:	b123      	cbz	r3, 800a60e <rcl_init_options_copy+0x2e>
 800a604:	2464      	movs	r4, #100	@ 0x64
 800a606:	4620      	mov	r0, r4
 800a608:	b014      	add	sp, #80	@ 0x50
 800a60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a60e:	6827      	ldr	r7, [r4, #0]
 800a610:	46bc      	mov	ip, r7
 800a612:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a616:	ad0f      	add	r5, sp, #60	@ 0x3c
 800a618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a61a:	f8dc 3000 	ldr.w	r3, [ip]
 800a61e:	f8d7 8000 	ldr.w	r8, [r7]
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	4619      	mov	r1, r3
 800a626:	2050      	movs	r0, #80	@ 0x50
 800a628:	47c0      	blx	r8
 800a62a:	4605      	mov	r5, r0
 800a62c:	6030      	str	r0, [r6, #0]
 800a62e:	b3d0      	cbz	r0, 800a6a6 <rcl_init_options_copy+0xc6>
 800a630:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800a634:	4686      	mov	lr, r0
 800a636:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a63a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a63e:	f8dc 3000 	ldr.w	r3, [ip]
 800a642:	f8ce 3000 	str.w	r3, [lr]
 800a646:	4668      	mov	r0, sp
 800a648:	f001 f922 	bl	800b890 <rmw_get_zero_initialized_init_options>
 800a64c:	46ee      	mov	lr, sp
 800a64e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a652:	f105 0c18 	add.w	ip, r5, #24
 800a656:	6824      	ldr	r4, [r4, #0]
 800a658:	6835      	ldr	r5, [r6, #0]
 800a65a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a65e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a662:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a666:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a66a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a66e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a672:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a676:	f104 0018 	add.w	r0, r4, #24
 800a67a:	f105 0118 	add.w	r1, r5, #24
 800a67e:	f001 fb2d 	bl	800bcdc <rmw_init_options_copy>
 800a682:	4604      	mov	r4, r0
 800a684:	2800      	cmp	r0, #0
 800a686:	d0be      	beq.n	800a606 <rcl_init_options_copy+0x26>
 800a688:	f7ff fc9c 	bl	8009fc4 <rcutils_get_error_string>
 800a68c:	f7ff fcb0 	bl	8009ff0 <rcutils_reset_error>
 800a690:	4630      	mov	r0, r6
 800a692:	f7ff ff7b 	bl	800a58c <rcl_init_options_fini>
 800a696:	b140      	cbz	r0, 800a6aa <rcl_init_options_copy+0xca>
 800a698:	4604      	mov	r4, r0
 800a69a:	e7b4      	b.n	800a606 <rcl_init_options_copy+0x26>
 800a69c:	240b      	movs	r4, #11
 800a69e:	4620      	mov	r0, r4
 800a6a0:	b014      	add	sp, #80	@ 0x50
 800a6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a6:	240a      	movs	r4, #10
 800a6a8:	e7ad      	b.n	800a606 <rcl_init_options_copy+0x26>
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	b014      	add	sp, #80	@ 0x50
 800a6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b2:	f005 bc4b 	b.w	800ff4c <rcl_convert_rmw_ret_to_rcl_ret>
 800a6b6:	bf00      	nop

0800a6b8 <rcl_get_localhost_only>:
 800a6b8:	b510      	push	{r4, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	b1b8      	cbz	r0, 800a6f2 <rcl_get_localhost_only+0x3a>
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	a901      	add	r1, sp, #4
 800a6c6:	480c      	ldr	r0, [pc, #48]	@ (800a6f8 <rcl_get_localhost_only+0x40>)
 800a6c8:	f000 fe26 	bl	800b318 <rcutils_get_env>
 800a6cc:	b110      	cbz	r0, 800a6d4 <rcl_get_localhost_only+0x1c>
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	b002      	add	sp, #8
 800a6d2:	bd10      	pop	{r4, pc}
 800a6d4:	9b01      	ldr	r3, [sp, #4]
 800a6d6:	b113      	cbz	r3, 800a6de <rcl_get_localhost_only+0x26>
 800a6d8:	781a      	ldrb	r2, [r3, #0]
 800a6da:	2a31      	cmp	r2, #49	@ 0x31
 800a6dc:	d004      	beq.n	800a6e8 <rcl_get_localhost_only+0x30>
 800a6de:	2302      	movs	r3, #2
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	7023      	strb	r3, [r4, #0]
 800a6e4:	b002      	add	sp, #8
 800a6e6:	bd10      	pop	{r4, pc}
 800a6e8:	785b      	ldrb	r3, [r3, #1]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1f7      	bne.n	800a6de <rcl_get_localhost_only+0x26>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e7f6      	b.n	800a6e0 <rcl_get_localhost_only+0x28>
 800a6f2:	200b      	movs	r0, #11
 800a6f4:	b002      	add	sp, #8
 800a6f6:	bd10      	pop	{r4, pc}
 800a6f8:	080131a0 	.word	0x080131a0

0800a6fc <rcl_get_zero_initialized_node>:
 800a6fc:	4a03      	ldr	r2, [pc, #12]	@ (800a70c <rcl_get_zero_initialized_node+0x10>)
 800a6fe:	4603      	mov	r3, r0
 800a700:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a704:	e883 0003 	stmia.w	r3, {r0, r1}
 800a708:	4618      	mov	r0, r3
 800a70a:	4770      	bx	lr
 800a70c:	080131d0 	.word	0x080131d0

0800a710 <rcl_node_init>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	b0a9      	sub	sp, #164	@ 0xa4
 800a716:	4604      	mov	r4, r0
 800a718:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800a71c:	a823      	add	r0, sp, #140	@ 0x8c
 800a71e:	460e      	mov	r6, r1
 800a720:	4615      	mov	r5, r2
 800a722:	461f      	mov	r7, r3
 800a724:	f005 fe4e 	bl	80103c4 <rcl_guard_condition_get_default_options>
 800a728:	f1b8 0f00 	cmp.w	r8, #0
 800a72c:	f000 80e6 	beq.w	800a8fc <rcl_node_init+0x1ec>
 800a730:	4640      	mov	r0, r8
 800a732:	f7ff fc39 	bl	8009fa8 <rcutils_allocator_is_valid>
 800a736:	2800      	cmp	r0, #0
 800a738:	f000 80e0 	beq.w	800a8fc <rcl_node_init+0x1ec>
 800a73c:	2e00      	cmp	r6, #0
 800a73e:	f000 80dd 	beq.w	800a8fc <rcl_node_init+0x1ec>
 800a742:	2d00      	cmp	r5, #0
 800a744:	f000 80da 	beq.w	800a8fc <rcl_node_init+0x1ec>
 800a748:	2c00      	cmp	r4, #0
 800a74a:	f000 80d7 	beq.w	800a8fc <rcl_node_init+0x1ec>
 800a74e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a752:	f1b9 0f00 	cmp.w	r9, #0
 800a756:	f040 80fd 	bne.w	800a954 <rcl_node_init+0x244>
 800a75a:	2f00      	cmp	r7, #0
 800a75c:	f000 80ce 	beq.w	800a8fc <rcl_node_init+0x1ec>
 800a760:	4638      	mov	r0, r7
 800a762:	f7ff fd41 	bl	800a1e8 <rcl_context_is_valid>
 800a766:	4682      	mov	sl, r0
 800a768:	2800      	cmp	r0, #0
 800a76a:	f000 80cd 	beq.w	800a908 <rcl_node_init+0x1f8>
 800a76e:	464a      	mov	r2, r9
 800a770:	a922      	add	r1, sp, #136	@ 0x88
 800a772:	4630      	mov	r0, r6
 800a774:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800a778:	f001 f9a0 	bl	800babc <rmw_validate_node_name>
 800a77c:	4681      	mov	r9, r0
 800a77e:	2800      	cmp	r0, #0
 800a780:	f040 80be 	bne.w	800a900 <rcl_node_init+0x1f0>
 800a784:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800a786:	2800      	cmp	r0, #0
 800a788:	f040 80f0 	bne.w	800a96c <rcl_node_init+0x25c>
 800a78c:	4628      	mov	r0, r5
 800a78e:	f7f5 fd31 	bl	80001f4 <strlen>
 800a792:	2800      	cmp	r0, #0
 800a794:	f040 80bb 	bne.w	800a90e <rcl_node_init+0x1fe>
 800a798:	4d7c      	ldr	r5, [pc, #496]	@ (800a98c <rcl_node_init+0x27c>)
 800a79a:	a922      	add	r1, sp, #136	@ 0x88
 800a79c:	2200      	movs	r2, #0
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f001 f96e 	bl	800ba80 <rmw_validate_namespace>
 800a7a4:	4681      	mov	r9, r0
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f040 80aa 	bne.w	800a900 <rcl_node_init+0x1f0>
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	f040 80e0 	bne.w	800a976 <rcl_node_init+0x266>
 800a7b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a7be:	2078      	movs	r0, #120	@ 0x78
 800a7c0:	4798      	blx	r3
 800a7c2:	4681      	mov	r9, r0
 800a7c4:	6060      	str	r0, [r4, #4]
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	f000 80ca 	beq.w	800a960 <rcl_node_init+0x250>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800a7d4:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800a7d8:	a808      	add	r0, sp, #32
 800a7da:	f000 f907 	bl	800a9ec <rcl_node_get_default_options>
 800a7de:	a908      	add	r1, sp, #32
 800a7e0:	4648      	mov	r0, r9
 800a7e2:	2268      	movs	r2, #104	@ 0x68
 800a7e4:	f007 fc35 	bl	8012052 <memcpy>
 800a7e8:	6861      	ldr	r1, [r4, #4]
 800a7ea:	6027      	str	r7, [r4, #0]
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	f000 f90b 	bl	800aa08 <rcl_node_options_copy>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d158      	bne.n	800a8a8 <rcl_node_init+0x198>
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f7f5 fcfc 	bl	80001f4 <strlen>
 800a7fc:	4428      	add	r0, r5
 800a7fe:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800a802:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800a806:	2b2f      	cmp	r3, #47	@ 0x2f
 800a808:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	bf0c      	ite	eq
 800a810:	4b5f      	ldreq	r3, [pc, #380]	@ (800a990 <rcl_node_init+0x280>)
 800a812:	4b60      	ldrne	r3, [pc, #384]	@ (800a994 <rcl_node_init+0x284>)
 800a814:	9302      	str	r3, [sp, #8]
 800a816:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a820:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a824:	f000 fda0 	bl	800b368 <rcutils_format_string_limit>
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	4631      	mov	r1, r6
 800a832:	3028      	adds	r0, #40	@ 0x28
 800a834:	462a      	mov	r2, r5
 800a836:	6866      	ldr	r6, [r4, #4]
 800a838:	f001 fcc2 	bl	800c1c0 <rmw_create_node>
 800a83c:	6863      	ldr	r3, [r4, #4]
 800a83e:	66b0      	str	r0, [r6, #104]	@ 0x68
 800a840:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a842:	2800      	cmp	r0, #0
 800a844:	d032      	beq.n	800a8ac <rcl_node_init+0x19c>
 800a846:	f001 fd4f 	bl	800c2e8 <rmw_node_get_graph_guard_condition>
 800a84a:	4681      	mov	r9, r0
 800a84c:	b360      	cbz	r0, 800a8a8 <rcl_node_init+0x198>
 800a84e:	f8d8 3000 	ldr.w	r3, [r8]
 800a852:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a856:	6866      	ldr	r6, [r4, #4]
 800a858:	2008      	movs	r0, #8
 800a85a:	4798      	blx	r3
 800a85c:	6863      	ldr	r3, [r4, #4]
 800a85e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800a860:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800a864:	f1bb 0f00 	cmp.w	fp, #0
 800a868:	d020      	beq.n	800a8ac <rcl_node_init+0x19c>
 800a86a:	a806      	add	r0, sp, #24
 800a86c:	f005 fd1a 	bl	80102a4 <rcl_get_zero_initialized_guard_condition>
 800a870:	a806      	add	r0, sp, #24
 800a872:	c803      	ldmia	r0, {r0, r1}
 800a874:	6863      	ldr	r3, [r4, #4]
 800a876:	46c4      	mov	ip, r8
 800a878:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800a87c:	e88b 0003 	stmia.w	fp, {r0, r1}
 800a880:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a884:	ae23      	add	r6, sp, #140	@ 0x8c
 800a886:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a888:	f8dc 3000 	ldr.w	r3, [ip]
 800a88c:	6033      	str	r3, [r6, #0]
 800a88e:	ab28      	add	r3, sp, #160	@ 0xa0
 800a890:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a894:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a898:	4649      	mov	r1, r9
 800a89a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a89c:	463a      	mov	r2, r7
 800a89e:	4670      	mov	r0, lr
 800a8a0:	f005 fd0a 	bl	80102b8 <rcl_guard_condition_init_from_rmw>
 800a8a4:	4681      	mov	r9, r0
 800a8a6:	b328      	cbz	r0, 800a8f4 <rcl_node_init+0x1e4>
 800a8a8:	6863      	ldr	r3, [r4, #4]
 800a8aa:	b1f3      	cbz	r3, 800a8ea <rcl_node_init+0x1da>
 800a8ac:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a8ae:	b128      	cbz	r0, 800a8bc <rcl_node_init+0x1ac>
 800a8b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8b4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a8b8:	4798      	blx	r3
 800a8ba:	6863      	ldr	r3, [r4, #4]
 800a8bc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a8be:	b110      	cbz	r0, 800a8c6 <rcl_node_init+0x1b6>
 800a8c0:	f001 fc96 	bl	800c1f0 <rmw_destroy_node>
 800a8c4:	6863      	ldr	r3, [r4, #4]
 800a8c6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a8c8:	b148      	cbz	r0, 800a8de <rcl_node_init+0x1ce>
 800a8ca:	f005 fd55 	bl	8010378 <rcl_guard_condition_fini>
 800a8ce:	6863      	ldr	r3, [r4, #4]
 800a8d0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a8d4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a8d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8da:	4798      	blx	r3
 800a8dc:	6863      	ldr	r3, [r4, #4]
 800a8de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8e8:	4798      	blx	r3
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	e9c4 3300 	strd	r3, r3, [r4]
 800a8f0:	f04f 0901 	mov.w	r9, #1
 800a8f4:	f1ba 0f00 	cmp.w	sl, #0
 800a8f8:	d125      	bne.n	800a946 <rcl_node_init+0x236>
 800a8fa:	e001      	b.n	800a900 <rcl_node_init+0x1f0>
 800a8fc:	f04f 090b 	mov.w	r9, #11
 800a900:	4648      	mov	r0, r9
 800a902:	b029      	add	sp, #164	@ 0xa4
 800a904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a908:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800a90c:	e7f8      	b.n	800a900 <rcl_node_init+0x1f0>
 800a90e:	782b      	ldrb	r3, [r5, #0]
 800a910:	2b2f      	cmp	r3, #47	@ 0x2f
 800a912:	f43f af42 	beq.w	800a79a <rcl_node_init+0x8a>
 800a916:	9503      	str	r5, [sp, #12]
 800a918:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	4b1e      	ldr	r3, [pc, #120]	@ (800a998 <rcl_node_init+0x288>)
 800a920:	9302      	str	r3, [sp, #8]
 800a922:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a92c:	f000 fd1c 	bl	800b368 <rcutils_format_string_limit>
 800a930:	4605      	mov	r5, r0
 800a932:	b340      	cbz	r0, 800a986 <rcl_node_init+0x276>
 800a934:	2200      	movs	r2, #0
 800a936:	a922      	add	r1, sp, #136	@ 0x88
 800a938:	9222      	str	r2, [sp, #136]	@ 0x88
 800a93a:	f001 f8a1 	bl	800ba80 <rmw_validate_namespace>
 800a93e:	4681      	mov	r9, r0
 800a940:	2800      	cmp	r0, #0
 800a942:	f43f af34 	beq.w	800a7ae <rcl_node_init+0x9e>
 800a946:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a94a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a94e:	4628      	mov	r0, r5
 800a950:	4798      	blx	r3
 800a952:	e7d5      	b.n	800a900 <rcl_node_init+0x1f0>
 800a954:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800a958:	4648      	mov	r0, r9
 800a95a:	b029      	add	sp, #164	@ 0xa4
 800a95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a960:	f04f 090a 	mov.w	r9, #10
 800a964:	f1ba 0f00 	cmp.w	sl, #0
 800a968:	d1ed      	bne.n	800a946 <rcl_node_init+0x236>
 800a96a:	e7c9      	b.n	800a900 <rcl_node_init+0x1f0>
 800a96c:	f001 f8f8 	bl	800bb60 <rmw_node_name_validation_result_string>
 800a970:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800a974:	e7c4      	b.n	800a900 <rcl_node_init+0x1f0>
 800a976:	f001 f895 	bl	800baa4 <rmw_namespace_validation_result_string>
 800a97a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800a97e:	f1ba 0f00 	cmp.w	sl, #0
 800a982:	d1e0      	bne.n	800a946 <rcl_node_init+0x236>
 800a984:	e7bc      	b.n	800a900 <rcl_node_init+0x1f0>
 800a986:	f04f 090a 	mov.w	r9, #10
 800a98a:	e7b9      	b.n	800a900 <rcl_node_init+0x1f0>
 800a98c:	080131b8 	.word	0x080131b8
 800a990:	080131c0 	.word	0x080131c0
 800a994:	080131c8 	.word	0x080131c8
 800a998:	080131bc 	.word	0x080131bc

0800a99c <rcl_node_is_valid>:
 800a99c:	b130      	cbz	r0, 800a9ac <rcl_node_is_valid+0x10>
 800a99e:	6843      	ldr	r3, [r0, #4]
 800a9a0:	b123      	cbz	r3, 800a9ac <rcl_node_is_valid+0x10>
 800a9a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9a4:	b113      	cbz	r3, 800a9ac <rcl_node_is_valid+0x10>
 800a9a6:	6800      	ldr	r0, [r0, #0]
 800a9a8:	f7ff bc1e 	b.w	800a1e8 <rcl_context_is_valid>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	4770      	bx	lr

0800a9b0 <rcl_node_get_name>:
 800a9b0:	b120      	cbz	r0, 800a9bc <rcl_node_get_name+0xc>
 800a9b2:	6840      	ldr	r0, [r0, #4]
 800a9b4:	b110      	cbz	r0, 800a9bc <rcl_node_get_name+0xc>
 800a9b6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a9b8:	b100      	cbz	r0, 800a9bc <rcl_node_get_name+0xc>
 800a9ba:	6880      	ldr	r0, [r0, #8]
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop

0800a9c0 <rcl_node_get_namespace>:
 800a9c0:	b120      	cbz	r0, 800a9cc <rcl_node_get_namespace+0xc>
 800a9c2:	6840      	ldr	r0, [r0, #4]
 800a9c4:	b110      	cbz	r0, 800a9cc <rcl_node_get_namespace+0xc>
 800a9c6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a9c8:	b100      	cbz	r0, 800a9cc <rcl_node_get_namespace+0xc>
 800a9ca:	68c0      	ldr	r0, [r0, #12]
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop

0800a9d0 <rcl_node_get_options>:
 800a9d0:	b128      	cbz	r0, 800a9de <rcl_node_get_options+0xe>
 800a9d2:	6840      	ldr	r0, [r0, #4]
 800a9d4:	b118      	cbz	r0, 800a9de <rcl_node_get_options+0xe>
 800a9d6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	bf08      	it	eq
 800a9dc:	2000      	moveq	r0, #0
 800a9de:	4770      	bx	lr

0800a9e0 <rcl_node_get_rmw_handle>:
 800a9e0:	b110      	cbz	r0, 800a9e8 <rcl_node_get_rmw_handle+0x8>
 800a9e2:	6840      	ldr	r0, [r0, #4]
 800a9e4:	b100      	cbz	r0, 800a9e8 <rcl_node_get_rmw_handle+0x8>
 800a9e6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop

0800a9ec <rcl_node_get_default_options>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	2268      	movs	r2, #104	@ 0x68
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	f007 fa64 	bl	8011ec0 <memset>
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f7ff fac7 	bl	8009f8c <rcutils_get_default_allocator>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	7523      	strb	r3, [r4, #20]
 800aa02:	4620      	mov	r0, r4
 800aa04:	bd10      	pop	{r4, pc}
 800aa06:	bf00      	nop

0800aa08 <rcl_node_options_copy>:
 800aa08:	b1d0      	cbz	r0, 800aa40 <rcl_node_options_copy+0x38>
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	b1a9      	cbz	r1, 800aa3c <rcl_node_options_copy+0x34>
 800aa10:	4288      	cmp	r0, r1
 800aa12:	4684      	mov	ip, r0
 800aa14:	d012      	beq.n	800aa3c <rcl_node_options_copy+0x34>
 800aa16:	4605      	mov	r5, r0
 800aa18:	8a86      	ldrh	r6, [r0, #20]
 800aa1a:	468e      	mov	lr, r1
 800aa1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aa22:	682b      	ldr	r3, [r5, #0]
 800aa24:	f8ce 3000 	str.w	r3, [lr]
 800aa28:	f10c 0118 	add.w	r1, ip, #24
 800aa2c:	2250      	movs	r2, #80	@ 0x50
 800aa2e:	82a6      	strh	r6, [r4, #20]
 800aa30:	f104 0018 	add.w	r0, r4, #24
 800aa34:	f007 fb0d 	bl	8012052 <memcpy>
 800aa38:	2000      	movs	r0, #0
 800aa3a:	bd70      	pop	{r4, r5, r6, pc}
 800aa3c:	200b      	movs	r0, #11
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	200b      	movs	r0, #11
 800aa42:	4770      	bx	lr

0800aa44 <rcl_node_resolve_name>:
 800aa44:	b082      	sub	sp, #8
 800aa46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4a:	b091      	sub	sp, #68	@ 0x44
 800aa4c:	ac1a      	add	r4, sp, #104	@ 0x68
 800aa4e:	e884 000c 	stmia.w	r4, {r2, r3}
 800aa52:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d03b      	beq.n	800aad2 <rcl_node_resolve_name+0x8e>
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	f7ff ffb7 	bl	800a9d0 <rcl_node_get_options>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d037      	beq.n	800aad6 <rcl_node_resolve_name+0x92>
 800aa66:	4628      	mov	r0, r5
 800aa68:	f7ff ffa2 	bl	800a9b0 <rcl_node_get_name>
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	4628      	mov	r0, r5
 800aa70:	f7ff ffa6 	bl	800a9c0 <rcl_node_get_namespace>
 800aa74:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800aa78:	4681      	mov	r9, r0
 800aa7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aa7e:	ad0b      	add	r5, sp, #44	@ 0x2c
 800aa80:	46ac      	mov	ip, r5
 800aa82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aa86:	f8de 3000 	ldr.w	r3, [lr]
 800aa8a:	f8cc 3000 	str.w	r3, [ip]
 800aa8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa90:	b1fb      	cbz	r3, 800aad2 <rcl_node_resolve_name+0x8e>
 800aa92:	468a      	mov	sl, r1
 800aa94:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800aa98:	f000 fdbe 	bl	800b618 <rcutils_get_zero_initialized_string_map>
 800aa9c:	ab10      	add	r3, sp, #64	@ 0x40
 800aa9e:	9008      	str	r0, [sp, #32]
 800aaa0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800aaa4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	e895 000c 	ldmia.w	r5, {r2, r3}
 800aaae:	a808      	add	r0, sp, #32
 800aab0:	f000 fe2a 	bl	800b708 <rcutils_string_map_init>
 800aab4:	4607      	mov	r7, r0
 800aab6:	b180      	cbz	r0, 800aada <rcl_node_resolve_name+0x96>
 800aab8:	f7ff fa84 	bl	8009fc4 <rcutils_get_error_string>
 800aabc:	f7ff fa98 	bl	8009ff0 <rcutils_reset_error>
 800aac0:	2f0a      	cmp	r7, #10
 800aac2:	bf18      	it	ne
 800aac4:	2701      	movne	r7, #1
 800aac6:	4638      	mov	r0, r7
 800aac8:	b011      	add	sp, #68	@ 0x44
 800aaca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aace:	b002      	add	sp, #8
 800aad0:	4770      	bx	lr
 800aad2:	270b      	movs	r7, #11
 800aad4:	e7f7      	b.n	800aac6 <rcl_node_resolve_name+0x82>
 800aad6:	2701      	movs	r7, #1
 800aad8:	e7f5      	b.n	800aac6 <rcl_node_resolve_name+0x82>
 800aada:	9009      	str	r0, [sp, #36]	@ 0x24
 800aadc:	9007      	str	r0, [sp, #28]
 800aade:	a808      	add	r0, sp, #32
 800aae0:	f005 fbda 	bl	8010298 <rcl_get_default_topic_name_substitutions>
 800aae4:	4607      	mov	r7, r0
 800aae6:	b1a8      	cbz	r0, 800ab14 <rcl_node_resolve_name+0xd0>
 800aae8:	280a      	cmp	r0, #10
 800aaea:	9c07      	ldr	r4, [sp, #28]
 800aaec:	d000      	beq.n	800aaf0 <rcl_node_resolve_name+0xac>
 800aaee:	2701      	movs	r7, #1
 800aaf0:	a808      	add	r0, sp, #32
 800aaf2:	f000 fe49 	bl	800b788 <rcutils_string_map_fini>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d13d      	bne.n	800ab76 <rcl_node_resolve_name+0x132>
 800aafa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aafc:	4659      	mov	r1, fp
 800aafe:	47d0      	blx	sl
 800ab00:	4659      	mov	r1, fp
 800ab02:	4620      	mov	r0, r4
 800ab04:	47d0      	blx	sl
 800ab06:	f1b8 0f00 	cmp.w	r8, #0
 800ab0a:	d0dc      	beq.n	800aac6 <rcl_node_resolve_name+0x82>
 800ab0c:	2f67      	cmp	r7, #103	@ 0x67
 800ab0e:	bf08      	it	eq
 800ab10:	2768      	moveq	r7, #104	@ 0x68
 800ab12:	e7d8      	b.n	800aac6 <rcl_node_resolve_name+0x82>
 800ab14:	ab09      	add	r3, sp, #36	@ 0x24
 800ab16:	9305      	str	r3, [sp, #20]
 800ab18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab1a:	46ec      	mov	ip, sp
 800ab1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	f8cc 3000 	str.w	r3, [ip]
 800ab26:	464a      	mov	r2, r9
 800ab28:	4631      	mov	r1, r6
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	ab08      	add	r3, sp, #32
 800ab2e:	f005 fa55 	bl	800ffdc <rcl_expand_topic_name>
 800ab32:	4607      	mov	r7, r0
 800ab34:	b9b8      	cbnz	r0, 800ab66 <rcl_node_resolve_name+0x122>
 800ab36:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ab38:	9009      	str	r0, [sp, #36]	@ 0x24
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	a90a      	add	r1, sp, #40	@ 0x28
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 feda 	bl	800b8f8 <rmw_validate_full_topic_name>
 800ab44:	b988      	cbnz	r0, 800ab6a <rcl_node_resolve_name+0x126>
 800ab46:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ab48:	b9d5      	cbnz	r5, 800ab80 <rcl_node_resolve_name+0x13c>
 800ab4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab4c:	a808      	add	r0, sp, #32
 800ab4e:	601c      	str	r4, [r3, #0]
 800ab50:	f000 fe1a 	bl	800b788 <rcutils_string_map_fini>
 800ab54:	4607      	mov	r7, r0
 800ab56:	b1a8      	cbz	r0, 800ab84 <rcl_node_resolve_name+0x140>
 800ab58:	f7ff fa34 	bl	8009fc4 <rcutils_get_error_string>
 800ab5c:	462c      	mov	r4, r5
 800ab5e:	f7ff fa47 	bl	8009ff0 <rcutils_reset_error>
 800ab62:	2701      	movs	r7, #1
 800ab64:	e7c9      	b.n	800aafa <rcl_node_resolve_name+0xb6>
 800ab66:	9c07      	ldr	r4, [sp, #28]
 800ab68:	e7c2      	b.n	800aaf0 <rcl_node_resolve_name+0xac>
 800ab6a:	f7ff fa2b 	bl	8009fc4 <rcutils_get_error_string>
 800ab6e:	2701      	movs	r7, #1
 800ab70:	f7ff fa3e 	bl	8009ff0 <rcutils_reset_error>
 800ab74:	e7bc      	b.n	800aaf0 <rcl_node_resolve_name+0xac>
 800ab76:	f7ff fa25 	bl	8009fc4 <rcutils_get_error_string>
 800ab7a:	f7ff fa39 	bl	8009ff0 <rcutils_reset_error>
 800ab7e:	e7bc      	b.n	800aafa <rcl_node_resolve_name+0xb6>
 800ab80:	2767      	movs	r7, #103	@ 0x67
 800ab82:	e7b5      	b.n	800aaf0 <rcl_node_resolve_name+0xac>
 800ab84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab86:	4659      	mov	r1, fp
 800ab88:	47d0      	blx	sl
 800ab8a:	4659      	mov	r1, fp
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	47d0      	blx	sl
 800ab90:	e799      	b.n	800aac6 <rcl_node_resolve_name+0x82>
 800ab92:	bf00      	nop

0800ab94 <exact_match_lookup>:
 800ab94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab96:	f102 0708 	add.w	r7, r2, #8
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	4606      	mov	r6, r0
 800aba0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800aba4:	b085      	sub	sp, #20
 800aba6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800abaa:	4618      	mov	r0, r3
 800abac:	4919      	ldr	r1, [pc, #100]	@ (800ac14 <exact_match_lookup+0x80>)
 800abae:	e894 000c 	ldmia.w	r4, {r2, r3}
 800abb2:	f000 fbcb 	bl	800b34c <rcutils_join_path>
 800abb6:	7833      	ldrb	r3, [r6, #0]
 800abb8:	2b2f      	cmp	r3, #47	@ 0x2f
 800abba:	4605      	mov	r5, r0
 800abbc:	d023      	beq.n	800ac06 <exact_match_lookup+0x72>
 800abbe:	f104 030c 	add.w	r3, r4, #12
 800abc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abc6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800abca:	1c70      	adds	r0, r6, #1
 800abcc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800abd0:	f000 fbc2 	bl	800b358 <rcutils_to_native_path>
 800abd4:	4606      	mov	r6, r0
 800abd6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800abda:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800abde:	4631      	mov	r1, r6
 800abe0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 fbb1 	bl	800b34c <rcutils_join_path>
 800abea:	6862      	ldr	r2, [r4, #4]
 800abec:	6921      	ldr	r1, [r4, #16]
 800abee:	4603      	mov	r3, r0
 800abf0:	4630      	mov	r0, r6
 800abf2:	461e      	mov	r6, r3
 800abf4:	4790      	blx	r2
 800abf6:	4628      	mov	r0, r5
 800abf8:	6863      	ldr	r3, [r4, #4]
 800abfa:	6921      	ldr	r1, [r4, #16]
 800abfc:	4798      	blx	r3
 800abfe:	4635      	mov	r5, r6
 800ac00:	4628      	mov	r0, r5
 800ac02:	b005      	add	sp, #20
 800ac04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac06:	7873      	ldrb	r3, [r6, #1]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1d8      	bne.n	800abbe <exact_match_lookup+0x2a>
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	b005      	add	sp, #20
 800ac10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac12:	bf00      	nop
 800ac14:	08013214 	.word	0x08013214

0800ac18 <rcl_get_secure_root>:
 800ac18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac1c:	b085      	sub	sp, #20
 800ac1e:	b168      	cbz	r0, 800ac3c <rcl_get_secure_root+0x24>
 800ac20:	4607      	mov	r7, r0
 800ac22:	4608      	mov	r0, r1
 800ac24:	460c      	mov	r4, r1
 800ac26:	f7ff f9bf 	bl	8009fa8 <rcutils_allocator_is_valid>
 800ac2a:	b138      	cbz	r0, 800ac3c <rcl_get_secure_root+0x24>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	482d      	ldr	r0, [pc, #180]	@ (800ace4 <rcl_get_secure_root+0xcc>)
 800ac30:	9303      	str	r3, [sp, #12]
 800ac32:	a903      	add	r1, sp, #12
 800ac34:	f000 fb70 	bl	800b318 <rcutils_get_env>
 800ac38:	4605      	mov	r5, r0
 800ac3a:	b120      	cbz	r0, 800ac46 <rcl_get_secure_root+0x2e>
 800ac3c:	2500      	movs	r5, #0
 800ac3e:	4628      	mov	r0, r5
 800ac40:	b005      	add	sp, #20
 800ac42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	781a      	ldrb	r2, [r3, #0]
 800ac4a:	2a00      	cmp	r2, #0
 800ac4c:	d0f6      	beq.n	800ac3c <rcl_get_secure_root+0x24>
 800ac4e:	f104 090c 	add.w	r9, r4, #12
 800ac52:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ac56:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ac60:	f000 fc9c 	bl	800b59c <rcutils_strdup>
 800ac64:	4680      	mov	r8, r0
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d0e8      	beq.n	800ac3c <rcl_get_secure_root+0x24>
 800ac6a:	481f      	ldr	r0, [pc, #124]	@ (800ace8 <rcl_get_secure_root+0xd0>)
 800ac6c:	9503      	str	r5, [sp, #12]
 800ac6e:	a903      	add	r1, sp, #12
 800ac70:	f000 fb52 	bl	800b318 <rcutils_get_env>
 800ac74:	b160      	cbz	r0, 800ac90 <rcl_get_secure_root+0x78>
 800ac76:	2600      	movs	r6, #0
 800ac78:	6863      	ldr	r3, [r4, #4]
 800ac7a:	6921      	ldr	r1, [r4, #16]
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	4798      	blx	r3
 800ac80:	4640      	mov	r0, r8
 800ac82:	6863      	ldr	r3, [r4, #4]
 800ac84:	6921      	ldr	r1, [r4, #16]
 800ac86:	4798      	blx	r3
 800ac88:	4628      	mov	r0, r5
 800ac8a:	b005      	add	sp, #20
 800ac8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac90:	9b03      	ldr	r3, [sp, #12]
 800ac92:	781e      	ldrb	r6, [r3, #0]
 800ac94:	b1f6      	cbz	r6, 800acd4 <rcl_get_secure_root+0xbc>
 800ac96:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ac9a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aca4:	f000 fc7a 	bl	800b59c <rcutils_strdup>
 800aca8:	4606      	mov	r6, r0
 800acaa:	2800      	cmp	r0, #0
 800acac:	d0e3      	beq.n	800ac76 <rcl_get_secure_root+0x5e>
 800acae:	4622      	mov	r2, r4
 800acb0:	4641      	mov	r1, r8
 800acb2:	f7ff ff6f 	bl	800ab94 <exact_match_lookup>
 800acb6:	4605      	mov	r5, r0
 800acb8:	2d00      	cmp	r5, #0
 800acba:	d0dd      	beq.n	800ac78 <rcl_get_secure_root+0x60>
 800acbc:	4628      	mov	r0, r5
 800acbe:	f000 fb43 	bl	800b348 <rcutils_is_directory>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d1d7      	bne.n	800ac78 <rcl_get_secure_root+0x60>
 800acc8:	4628      	mov	r0, r5
 800acca:	6921      	ldr	r1, [r4, #16]
 800accc:	461d      	mov	r5, r3
 800acce:	6863      	ldr	r3, [r4, #4]
 800acd0:	4798      	blx	r3
 800acd2:	e7d1      	b.n	800ac78 <rcl_get_secure_root+0x60>
 800acd4:	4622      	mov	r2, r4
 800acd6:	4638      	mov	r0, r7
 800acd8:	4641      	mov	r1, r8
 800acda:	f7ff ff5b 	bl	800ab94 <exact_match_lookup>
 800acde:	4605      	mov	r5, r0
 800ace0:	e7ea      	b.n	800acb8 <rcl_get_secure_root+0xa0>
 800ace2:	bf00      	nop
 800ace4:	08013220 	.word	0x08013220
 800ace8:	08013238 	.word	0x08013238

0800acec <rcl_get_security_options_from_environment>:
 800acec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	2300      	movs	r3, #0
 800acf4:	4606      	mov	r6, r0
 800acf6:	460f      	mov	r7, r1
 800acf8:	4820      	ldr	r0, [pc, #128]	@ (800ad7c <rcl_get_security_options_from_environment+0x90>)
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	a901      	add	r1, sp, #4
 800acfe:	4690      	mov	r8, r2
 800ad00:	f000 fb0a 	bl	800b318 <rcutils_get_env>
 800ad04:	b120      	cbz	r0, 800ad10 <rcl_get_security_options_from_environment+0x24>
 800ad06:	2501      	movs	r5, #1
 800ad08:	4628      	mov	r0, r5
 800ad0a:	b002      	add	sp, #8
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad10:	491b      	ldr	r1, [pc, #108]	@ (800ad80 <rcl_get_security_options_from_environment+0x94>)
 800ad12:	4604      	mov	r4, r0
 800ad14:	9801      	ldr	r0, [sp, #4]
 800ad16:	f7f5 fa63 	bl	80001e0 <strcmp>
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	b9e8      	cbnz	r0, 800ad5a <rcl_get_security_options_from_environment+0x6e>
 800ad1e:	9001      	str	r0, [sp, #4]
 800ad20:	f1b8 0f00 	cmp.w	r8, #0
 800ad24:	d020      	beq.n	800ad68 <rcl_get_security_options_from_environment+0x7c>
 800ad26:	4817      	ldr	r0, [pc, #92]	@ (800ad84 <rcl_get_security_options_from_environment+0x98>)
 800ad28:	a901      	add	r1, sp, #4
 800ad2a:	f000 faf5 	bl	800b318 <rcutils_get_env>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d1e9      	bne.n	800ad06 <rcl_get_security_options_from_environment+0x1a>
 800ad32:	4915      	ldr	r1, [pc, #84]	@ (800ad88 <rcl_get_security_options_from_environment+0x9c>)
 800ad34:	9801      	ldr	r0, [sp, #4]
 800ad36:	f7f5 fa53 	bl	80001e0 <strcmp>
 800ad3a:	fab0 f080 	clz	r0, r0
 800ad3e:	0940      	lsrs	r0, r0, #5
 800ad40:	f888 0000 	strb.w	r0, [r8]
 800ad44:	4639      	mov	r1, r7
 800ad46:	4630      	mov	r0, r6
 800ad48:	f7ff ff66 	bl	800ac18 <rcl_get_secure_root>
 800ad4c:	b170      	cbz	r0, 800ad6c <rcl_get_security_options_from_environment+0x80>
 800ad4e:	f8c8 0004 	str.w	r0, [r8, #4]
 800ad52:	4628      	mov	r0, r5
 800ad54:	b002      	add	sp, #8
 800ad56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad5a:	4625      	mov	r5, r4
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f888 4000 	strb.w	r4, [r8]
 800ad62:	b002      	add	sp, #8
 800ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad68:	250b      	movs	r5, #11
 800ad6a:	e7cd      	b.n	800ad08 <rcl_get_security_options_from_environment+0x1c>
 800ad6c:	f898 5000 	ldrb.w	r5, [r8]
 800ad70:	f1a5 0501 	sub.w	r5, r5, #1
 800ad74:	fab5 f585 	clz	r5, r5
 800ad78:	096d      	lsrs	r5, r5, #5
 800ad7a:	e7c5      	b.n	800ad08 <rcl_get_security_options_from_environment+0x1c>
 800ad7c:	080131d8 	.word	0x080131d8
 800ad80:	080131ec 	.word	0x080131ec
 800ad84:	080131f4 	.word	0x080131f4
 800ad88:	0801320c 	.word	0x0801320c

0800ad8c <rcl_get_zero_initialized_subscription>:
 800ad8c:	4b01      	ldr	r3, [pc, #4]	@ (800ad94 <rcl_get_zero_initialized_subscription+0x8>)
 800ad8e:	6818      	ldr	r0, [r3, #0]
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	08013258 	.word	0x08013258

0800ad98 <rcl_subscription_init>:
 800ad98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad9c:	b089      	sub	sp, #36	@ 0x24
 800ad9e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ada0:	b1d6      	cbz	r6, 800add8 <rcl_subscription_init+0x40>
 800ada2:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800ada6:	4604      	mov	r4, r0
 800ada8:	4648      	mov	r0, r9
 800adaa:	460d      	mov	r5, r1
 800adac:	4690      	mov	r8, r2
 800adae:	461f      	mov	r7, r3
 800adb0:	f7ff f8fa 	bl	8009fa8 <rcutils_allocator_is_valid>
 800adb4:	b180      	cbz	r0, 800add8 <rcl_subscription_init+0x40>
 800adb6:	b17c      	cbz	r4, 800add8 <rcl_subscription_init+0x40>
 800adb8:	4628      	mov	r0, r5
 800adba:	f7ff fdef 	bl	800a99c <rcl_node_is_valid>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	d054      	beq.n	800ae6c <rcl_subscription_init+0xd4>
 800adc2:	f1b8 0f00 	cmp.w	r8, #0
 800adc6:	d007      	beq.n	800add8 <rcl_subscription_init+0x40>
 800adc8:	b137      	cbz	r7, 800add8 <rcl_subscription_init+0x40>
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	b14b      	cbz	r3, 800ade2 <rcl_subscription_init+0x4a>
 800adce:	2764      	movs	r7, #100	@ 0x64
 800add0:	4638      	mov	r0, r7
 800add2:	b009      	add	sp, #36	@ 0x24
 800add4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800add8:	270b      	movs	r7, #11
 800adda:	4638      	mov	r0, r7
 800addc:	b009      	add	sp, #36	@ 0x24
 800adde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ade2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ade6:	aa07      	add	r2, sp, #28
 800ade8:	9205      	str	r2, [sp, #20]
 800adea:	9307      	str	r3, [sp, #28]
 800adec:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800adf0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800adf4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800adf8:	4639      	mov	r1, r7
 800adfa:	e899 000c 	ldmia.w	r9, {r2, r3}
 800adfe:	4628      	mov	r0, r5
 800ae00:	f7ff fe20 	bl	800aa44 <rcl_node_resolve_name>
 800ae04:	4607      	mov	r7, r0
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d15f      	bne.n	800aeca <rcl_subscription_init+0x132>
 800ae0a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800ae0e:	21c8      	movs	r1, #200	@ 0xc8
 800ae10:	2001      	movs	r0, #1
 800ae12:	4798      	blx	r3
 800ae14:	6020      	str	r0, [r4, #0]
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d05d      	beq.n	800aed6 <rcl_subscription_init+0x13e>
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f7ff fde0 	bl	800a9e0 <rcl_node_get_rmw_handle>
 800ae20:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	9a07      	ldr	r2, [sp, #28]
 800ae28:	6827      	ldr	r7, [r4, #0]
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	4633      	mov	r3, r6
 800ae2e:	f001 faf7 	bl	800c420 <rmw_create_subscription>
 800ae32:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800ae36:	6827      	ldr	r7, [r4, #0]
 800ae38:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800ae3c:	b348      	cbz	r0, 800ae92 <rcl_subscription_init+0xfa>
 800ae3e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ae42:	f001 fbcf 	bl	800c5e4 <rmw_subscription_get_actual_qos>
 800ae46:	4607      	mov	r7, r0
 800ae48:	b9a8      	cbnz	r0, 800ae76 <rcl_subscription_init+0xde>
 800ae4a:	6820      	ldr	r0, [r4, #0]
 800ae4c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ae50:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800ae54:	2270      	movs	r2, #112	@ 0x70
 800ae56:	4631      	mov	r1, r6
 800ae58:	f007 f8fb 	bl	8012052 <memcpy>
 800ae5c:	9807      	ldr	r0, [sp, #28]
 800ae5e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ae60:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ae62:	4798      	blx	r3
 800ae64:	4638      	mov	r0, r7
 800ae66:	b009      	add	sp, #36	@ 0x24
 800ae68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae6c:	27c8      	movs	r7, #200	@ 0xc8
 800ae6e:	4638      	mov	r0, r7
 800ae70:	b009      	add	sp, #36	@ 0x24
 800ae72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae76:	6827      	ldr	r7, [r4, #0]
 800ae78:	b32f      	cbz	r7, 800aec6 <rcl_subscription_init+0x12e>
 800ae7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ae7e:	b14b      	cbz	r3, 800ae94 <rcl_subscription_init+0xfc>
 800ae80:	4628      	mov	r0, r5
 800ae82:	f7ff fdad 	bl	800a9e0 <rcl_node_get_rmw_handle>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800ae8c:	f001 fbba 	bl	800c604 <rmw_destroy_subscription>
 800ae90:	6827      	ldr	r7, [r4, #0]
 800ae92:	b197      	cbz	r7, 800aeba <rcl_subscription_init+0x122>
 800ae94:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f7ff f885 	bl	8009fa8 <rcutils_allocator_is_valid>
 800ae9e:	b158      	cbz	r0, 800aeb8 <rcl_subscription_init+0x120>
 800aea0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aea2:	b148      	cbz	r0, 800aeb8 <rcl_subscription_init+0x120>
 800aea4:	4629      	mov	r1, r5
 800aea6:	f000 fd07 	bl	800b8b8 <rmw_subscription_content_filter_options_fini>
 800aeaa:	4605      	mov	r5, r0
 800aeac:	b9b8      	cbnz	r0, 800aede <rcl_subscription_init+0x146>
 800aeae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeb0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800aeb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aeb4:	4798      	blx	r3
 800aeb6:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800aeb8:	6827      	ldr	r7, [r4, #0]
 800aeba:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800aebc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800aebe:	4638      	mov	r0, r7
 800aec0:	4798      	blx	r3
 800aec2:	2300      	movs	r3, #0
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	2701      	movs	r7, #1
 800aec8:	e7c8      	b.n	800ae5c <rcl_subscription_init+0xc4>
 800aeca:	2867      	cmp	r0, #103	@ 0x67
 800aecc:	d0c6      	beq.n	800ae5c <rcl_subscription_init+0xc4>
 800aece:	2869      	cmp	r0, #105	@ 0x69
 800aed0:	d003      	beq.n	800aeda <rcl_subscription_init+0x142>
 800aed2:	280a      	cmp	r0, #10
 800aed4:	d1f7      	bne.n	800aec6 <rcl_subscription_init+0x12e>
 800aed6:	270a      	movs	r7, #10
 800aed8:	e7c0      	b.n	800ae5c <rcl_subscription_init+0xc4>
 800aeda:	2767      	movs	r7, #103	@ 0x67
 800aedc:	e7be      	b.n	800ae5c <rcl_subscription_init+0xc4>
 800aede:	f005 f835 	bl	800ff4c <rcl_convert_rmw_ret_to_rcl_ret>
 800aee2:	6827      	ldr	r7, [r4, #0]
 800aee4:	e7e9      	b.n	800aeba <rcl_subscription_init+0x122>
 800aee6:	bf00      	nop

0800aee8 <rcl_subscription_get_default_options>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	4d14      	ldr	r5, [pc, #80]	@ (800af3c <rcl_subscription_get_default_options+0x54>)
 800aeec:	4914      	ldr	r1, [pc, #80]	@ (800af40 <rcl_subscription_get_default_options+0x58>)
 800aeee:	b08a      	sub	sp, #40	@ 0x28
 800aef0:	4604      	mov	r4, r0
 800aef2:	2250      	movs	r2, #80	@ 0x50
 800aef4:	4628      	mov	r0, r5
 800aef6:	f007 f8ac 	bl	8012052 <memcpy>
 800aefa:	a804      	add	r0, sp, #16
 800aefc:	f7ff f846 	bl	8009f8c <rcutils_get_default_allocator>
 800af00:	f10d 0c10 	add.w	ip, sp, #16
 800af04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800af08:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800af0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800af10:	466e      	mov	r6, sp
 800af12:	f8dc 3000 	ldr.w	r3, [ip]
 800af16:	f8ce 3000 	str.w	r3, [lr]
 800af1a:	4630      	mov	r0, r6
 800af1c:	f000 fce6 	bl	800b8ec <rmw_get_default_subscription_options>
 800af20:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800af24:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800af28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af2c:	2270      	movs	r2, #112	@ 0x70
 800af2e:	4629      	mov	r1, r5
 800af30:	4620      	mov	r0, r4
 800af32:	f007 f88e 	bl	8012052 <memcpy>
 800af36:	4620      	mov	r0, r4
 800af38:	b00a      	add	sp, #40	@ 0x28
 800af3a:	bd70      	pop	{r4, r5, r6, pc}
 800af3c:	20009188 	.word	0x20009188
 800af40:	08013260 	.word	0x08013260

0800af44 <rcl_get_system_time>:
 800af44:	4608      	mov	r0, r1
 800af46:	f7ff b86f 	b.w	800a028 <rcutils_system_time_now>
 800af4a:	bf00      	nop

0800af4c <rcl_get_steady_time>:
 800af4c:	4608      	mov	r0, r1
 800af4e:	f7ff b893 	b.w	800a078 <rcutils_steady_time_now>
 800af52:	bf00      	nop

0800af54 <rcl_get_ros_time>:
 800af54:	7a03      	ldrb	r3, [r0, #8]
 800af56:	b510      	push	{r4, lr}
 800af58:	460c      	mov	r4, r1
 800af5a:	b133      	cbz	r3, 800af6a <rcl_get_ros_time+0x16>
 800af5c:	2105      	movs	r1, #5
 800af5e:	f000 f9a5 	bl	800b2ac <__atomic_load_8>
 800af62:	e9c4 0100 	strd	r0, r1, [r4]
 800af66:	2000      	movs	r0, #0
 800af68:	bd10      	pop	{r4, pc}
 800af6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af6e:	4608      	mov	r0, r1
 800af70:	f7ff b85a 	b.w	800a028 <rcutils_system_time_now>

0800af74 <rcl_clock_init>:
 800af74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af76:	4605      	mov	r5, r0
 800af78:	4610      	mov	r0, r2
 800af7a:	4614      	mov	r4, r2
 800af7c:	460e      	mov	r6, r1
 800af7e:	f7ff f813 	bl	8009fa8 <rcutils_allocator_is_valid>
 800af82:	b128      	cbz	r0, 800af90 <rcl_clock_init+0x1c>
 800af84:	2d03      	cmp	r5, #3
 800af86:	d803      	bhi.n	800af90 <rcl_clock_init+0x1c>
 800af88:	e8df f005 	tbb	[pc, r5]
 800af8c:	06532e1d 	.word	0x06532e1d
 800af90:	f04f 0c0b 	mov.w	ip, #11
 800af94:	4660      	mov	r0, ip
 800af96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af98:	2e00      	cmp	r6, #0
 800af9a:	d0f9      	beq.n	800af90 <rcl_clock_init+0x1c>
 800af9c:	2c00      	cmp	r4, #0
 800af9e:	d0f7      	beq.n	800af90 <rcl_clock_init+0x1c>
 800afa0:	2300      	movs	r3, #0
 800afa2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800afa6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800b05c <rcl_clock_init+0xe8>
 800afaa:	6133      	str	r3, [r6, #16]
 800afac:	f106 0514 	add.w	r5, r6, #20
 800afb0:	469c      	mov	ip, r3
 800afb2:	2703      	movs	r7, #3
 800afb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afb8:	6823      	ldr	r3, [r4, #0]
 800afba:	602b      	str	r3, [r5, #0]
 800afbc:	7037      	strb	r7, [r6, #0]
 800afbe:	f8c6 e00c 	str.w	lr, [r6, #12]
 800afc2:	4660      	mov	r0, ip
 800afc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	d0e2      	beq.n	800af90 <rcl_clock_init+0x1c>
 800afca:	2300      	movs	r3, #0
 800afcc:	7033      	strb	r3, [r6, #0]
 800afce:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800afd2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800afd6:	469c      	mov	ip, r3
 800afd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afda:	f106 0514 	add.w	r5, r6, #20
 800afde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	602b      	str	r3, [r5, #0]
 800afe4:	4660      	mov	r0, ip
 800afe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe8:	2e00      	cmp	r6, #0
 800afea:	d0d1      	beq.n	800af90 <rcl_clock_init+0x1c>
 800afec:	2c00      	cmp	r4, #0
 800afee:	d0cf      	beq.n	800af90 <rcl_clock_init+0x1c>
 800aff0:	2700      	movs	r7, #0
 800aff2:	7037      	strb	r7, [r6, #0]
 800aff4:	46a4      	mov	ip, r4
 800aff6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800affa:	f106 0514 	add.w	r5, r6, #20
 800affe:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800b002:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800b006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b008:	f8dc 3000 	ldr.w	r3, [ip]
 800b00c:	602b      	str	r3, [r5, #0]
 800b00e:	6921      	ldr	r1, [r4, #16]
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	2010      	movs	r0, #16
 800b014:	4798      	blx	r3
 800b016:	6130      	str	r0, [r6, #16]
 800b018:	b1d0      	cbz	r0, 800b050 <rcl_clock_init+0xdc>
 800b01a:	2200      	movs	r2, #0
 800b01c:	2300      	movs	r3, #0
 800b01e:	e9c0 2300 	strd	r2, r3, [r0]
 800b022:	2301      	movs	r3, #1
 800b024:	7207      	strb	r7, [r0, #8]
 800b026:	4a0c      	ldr	r2, [pc, #48]	@ (800b058 <rcl_clock_init+0xe4>)
 800b028:	7033      	strb	r3, [r6, #0]
 800b02a:	46bc      	mov	ip, r7
 800b02c:	60f2      	str	r2, [r6, #12]
 800b02e:	4660      	mov	r0, ip
 800b030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b032:	2e00      	cmp	r6, #0
 800b034:	d0ac      	beq.n	800af90 <rcl_clock_init+0x1c>
 800b036:	2c00      	cmp	r4, #0
 800b038:	d0aa      	beq.n	800af90 <rcl_clock_init+0x1c>
 800b03a:	2300      	movs	r3, #0
 800b03c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800b040:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800b060 <rcl_clock_init+0xec>
 800b044:	6133      	str	r3, [r6, #16]
 800b046:	f106 0514 	add.w	r5, r6, #20
 800b04a:	469c      	mov	ip, r3
 800b04c:	2702      	movs	r7, #2
 800b04e:	e7b1      	b.n	800afb4 <rcl_clock_init+0x40>
 800b050:	f04f 0c0a 	mov.w	ip, #10
 800b054:	e79e      	b.n	800af94 <rcl_clock_init+0x20>
 800b056:	bf00      	nop
 800b058:	0800af55 	.word	0x0800af55
 800b05c:	0800af4d 	.word	0x0800af4d
 800b060:	0800af45 	.word	0x0800af45

0800b064 <rcl_validate_enclave_name_with_size>:
 800b064:	b378      	cbz	r0, 800b0c6 <rcl_validate_enclave_name_with_size+0x62>
 800b066:	b570      	push	{r4, r5, r6, lr}
 800b068:	4615      	mov	r5, r2
 800b06a:	b0c2      	sub	sp, #264	@ 0x108
 800b06c:	b302      	cbz	r2, 800b0b0 <rcl_validate_enclave_name_with_size+0x4c>
 800b06e:	461e      	mov	r6, r3
 800b070:	466a      	mov	r2, sp
 800b072:	ab01      	add	r3, sp, #4
 800b074:	460c      	mov	r4, r1
 800b076:	f000 fcb5 	bl	800b9e4 <rmw_validate_namespace_with_size>
 800b07a:	4684      	mov	ip, r0
 800b07c:	b9e8      	cbnz	r0, 800b0ba <rcl_validate_enclave_name_with_size+0x56>
 800b07e:	9b00      	ldr	r3, [sp, #0]
 800b080:	b923      	cbnz	r3, 800b08c <rcl_validate_enclave_name_with_size+0x28>
 800b082:	2300      	movs	r3, #0
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	4660      	mov	r0, ip
 800b088:	b042      	add	sp, #264	@ 0x108
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	2b07      	cmp	r3, #7
 800b08e:	d007      	beq.n	800b0a0 <rcl_validate_enclave_name_with_size+0x3c>
 800b090:	1e5a      	subs	r2, r3, #1
 800b092:	2a05      	cmp	r2, #5
 800b094:	d833      	bhi.n	800b0fe <rcl_validate_enclave_name_with_size+0x9a>
 800b096:	e8df f002 	tbb	[pc, r2]
 800b09a:	2c2f      	.short	0x2c2f
 800b09c:	1a232629 	.word	0x1a232629
 800b0a0:	2cff      	cmp	r4, #255	@ 0xff
 800b0a2:	d9ee      	bls.n	800b082 <rcl_validate_enclave_name_with_size+0x1e>
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	2e00      	cmp	r6, #0
 800b0a8:	d0ed      	beq.n	800b086 <rcl_validate_enclave_name_with_size+0x22>
 800b0aa:	23fe      	movs	r3, #254	@ 0xfe
 800b0ac:	6033      	str	r3, [r6, #0]
 800b0ae:	e7ea      	b.n	800b086 <rcl_validate_enclave_name_with_size+0x22>
 800b0b0:	f04f 0c0b 	mov.w	ip, #11
 800b0b4:	4660      	mov	r0, ip
 800b0b6:	b042      	add	sp, #264	@ 0x108
 800b0b8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ba:	f004 ff47 	bl	800ff4c <rcl_convert_rmw_ret_to_rcl_ret>
 800b0be:	4684      	mov	ip, r0
 800b0c0:	4660      	mov	r0, ip
 800b0c2:	b042      	add	sp, #264	@ 0x108
 800b0c4:	bd70      	pop	{r4, r5, r6, pc}
 800b0c6:	f04f 0c0b 	mov.w	ip, #11
 800b0ca:	4660      	mov	r0, ip
 800b0cc:	4770      	bx	lr
 800b0ce:	2306      	movs	r3, #6
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	2e00      	cmp	r6, #0
 800b0d4:	d0d7      	beq.n	800b086 <rcl_validate_enclave_name_with_size+0x22>
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	6033      	str	r3, [r6, #0]
 800b0da:	4660      	mov	r0, ip
 800b0dc:	b042      	add	sp, #264	@ 0x108
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
 800b0e0:	2305      	movs	r3, #5
 800b0e2:	602b      	str	r3, [r5, #0]
 800b0e4:	e7f5      	b.n	800b0d2 <rcl_validate_enclave_name_with_size+0x6e>
 800b0e6:	2304      	movs	r3, #4
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	e7f2      	b.n	800b0d2 <rcl_validate_enclave_name_with_size+0x6e>
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	602b      	str	r3, [r5, #0]
 800b0f0:	e7ef      	b.n	800b0d2 <rcl_validate_enclave_name_with_size+0x6e>
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	e7ec      	b.n	800b0d2 <rcl_validate_enclave_name_with_size+0x6e>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	602b      	str	r3, [r5, #0]
 800b0fc:	e7e9      	b.n	800b0d2 <rcl_validate_enclave_name_with_size+0x6e>
 800b0fe:	4a04      	ldr	r2, [pc, #16]	@ (800b110 <rcl_validate_enclave_name_with_size+0xac>)
 800b100:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b104:	a802      	add	r0, sp, #8
 800b106:	f000 fa1d 	bl	800b544 <rcutils_snprintf>
 800b10a:	f04f 0c01 	mov.w	ip, #1
 800b10e:	e7ba      	b.n	800b086 <rcl_validate_enclave_name_with_size+0x22>
 800b110:	080132b0 	.word	0x080132b0

0800b114 <rcl_validate_enclave_name>:
 800b114:	b168      	cbz	r0, 800b132 <rcl_validate_enclave_name+0x1e>
 800b116:	b570      	push	{r4, r5, r6, lr}
 800b118:	460d      	mov	r5, r1
 800b11a:	4616      	mov	r6, r2
 800b11c:	4604      	mov	r4, r0
 800b11e:	f7f5 f869 	bl	80001f4 <strlen>
 800b122:	4633      	mov	r3, r6
 800b124:	4601      	mov	r1, r0
 800b126:	462a      	mov	r2, r5
 800b128:	4620      	mov	r0, r4
 800b12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b12e:	f7ff bf99 	b.w	800b064 <rcl_validate_enclave_name_with_size>
 800b132:	200b      	movs	r0, #11
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop

0800b138 <rcl_get_zero_initialized_wait_set>:
 800b138:	b510      	push	{r4, lr}
 800b13a:	4c08      	ldr	r4, [pc, #32]	@ (800b15c <rcl_get_zero_initialized_wait_set+0x24>)
 800b13c:	4686      	mov	lr, r0
 800b13e:	4684      	mov	ip, r0
 800b140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b142:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b148:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b14c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b14e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	f8cc 3000 	str.w	r3, [ip]
 800b158:	4670      	mov	r0, lr
 800b15a:	bd10      	pop	{r4, pc}
 800b15c:	08013310 	.word	0x08013310

0800b160 <rcl_wait_set_is_valid>:
 800b160:	b118      	cbz	r0, 800b16a <rcl_wait_set_is_valid+0xa>
 800b162:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800b164:	3800      	subs	r0, #0
 800b166:	bf18      	it	ne
 800b168:	2001      	movne	r0, #1
 800b16a:	4770      	bx	lr

0800b16c <rcl_wait_set_fini>:
 800b16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	2800      	cmp	r0, #0
 800b174:	f000 8095 	beq.w	800b2a2 <rcl_wait_set_fini+0x136>
 800b178:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800b17a:	4604      	mov	r4, r0
 800b17c:	2e00      	cmp	r6, #0
 800b17e:	f000 808c 	beq.w	800b29a <rcl_wait_set_fini+0x12e>
 800b182:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800b184:	f001 fab6 	bl	800c6f4 <rmw_destroy_wait_set>
 800b188:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b18a:	1e06      	subs	r6, r0, #0
 800b18c:	bf18      	it	ne
 800b18e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800b192:	2d00      	cmp	r5, #0
 800b194:	f000 8081 	beq.w	800b29a <rcl_wait_set_fini+0x12e>
 800b198:	6820      	ldr	r0, [r4, #0]
 800b19a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800b19e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800b1a0:	2700      	movs	r7, #0
 800b1a2:	6067      	str	r7, [r4, #4]
 800b1a4:	602f      	str	r7, [r5, #0]
 800b1a6:	b120      	cbz	r0, 800b1b2 <rcl_wait_set_fini+0x46>
 800b1a8:	9101      	str	r1, [sp, #4]
 800b1aa:	47c0      	blx	r8
 800b1ac:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b1ae:	9901      	ldr	r1, [sp, #4]
 800b1b0:	6027      	str	r7, [r4, #0]
 800b1b2:	68a8      	ldr	r0, [r5, #8]
 800b1b4:	b120      	cbz	r0, 800b1c0 <rcl_wait_set_fini+0x54>
 800b1b6:	47c0      	blx	r8
 800b1b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800b1c0:	68a0      	ldr	r0, [r4, #8]
 800b1c2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800b1c4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800b1c6:	f04f 0800 	mov.w	r8, #0
 800b1ca:	f8c4 800c 	str.w	r8, [r4, #12]
 800b1ce:	f8c5 800c 	str.w	r8, [r5, #12]
 800b1d2:	b128      	cbz	r0, 800b1e0 <rcl_wait_set_fini+0x74>
 800b1d4:	47b8      	blx	r7
 800b1d6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b1d8:	f8c4 8008 	str.w	r8, [r4, #8]
 800b1dc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800b1de:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800b1e0:	6968      	ldr	r0, [r5, #20]
 800b1e2:	f04f 0800 	mov.w	r8, #0
 800b1e6:	f8c5 8010 	str.w	r8, [r5, #16]
 800b1ea:	b128      	cbz	r0, 800b1f8 <rcl_wait_set_fini+0x8c>
 800b1ec:	47b8      	blx	r7
 800b1ee:	f8c5 8014 	str.w	r8, [r5, #20]
 800b1f2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b1f4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800b1f6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800b1f8:	6920      	ldr	r0, [r4, #16]
 800b1fa:	f04f 0800 	mov.w	r8, #0
 800b1fe:	f8c4 8014 	str.w	r8, [r4, #20]
 800b202:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800b206:	b128      	cbz	r0, 800b214 <rcl_wait_set_fini+0xa8>
 800b208:	47b8      	blx	r7
 800b20a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b20c:	f8c4 8010 	str.w	r8, [r4, #16]
 800b210:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800b212:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800b214:	69a0      	ldr	r0, [r4, #24]
 800b216:	f04f 0800 	mov.w	r8, #0
 800b21a:	f8c4 801c 	str.w	r8, [r4, #28]
 800b21e:	f8c5 8018 	str.w	r8, [r5, #24]
 800b222:	b128      	cbz	r0, 800b230 <rcl_wait_set_fini+0xc4>
 800b224:	9101      	str	r1, [sp, #4]
 800b226:	47b8      	blx	r7
 800b228:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b22a:	9901      	ldr	r1, [sp, #4]
 800b22c:	f8c4 8018 	str.w	r8, [r4, #24]
 800b230:	6a28      	ldr	r0, [r5, #32]
 800b232:	b120      	cbz	r0, 800b23e <rcl_wait_set_fini+0xd2>
 800b234:	47b8      	blx	r7
 800b236:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b238:	2300      	movs	r3, #0
 800b23a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800b23e:	6a20      	ldr	r0, [r4, #32]
 800b240:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800b244:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800b246:	2700      	movs	r7, #0
 800b248:	6267      	str	r7, [r4, #36]	@ 0x24
 800b24a:	626f      	str	r7, [r5, #36]	@ 0x24
 800b24c:	b120      	cbz	r0, 800b258 <rcl_wait_set_fini+0xec>
 800b24e:	9101      	str	r1, [sp, #4]
 800b250:	47c0      	blx	r8
 800b252:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b254:	9901      	ldr	r1, [sp, #4]
 800b256:	6227      	str	r7, [r4, #32]
 800b258:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800b25a:	b120      	cbz	r0, 800b266 <rcl_wait_set_fini+0xfa>
 800b25c:	47c0      	blx	r8
 800b25e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b260:	2300      	movs	r3, #0
 800b262:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800b266:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b268:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800b26c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800b26e:	2700      	movs	r7, #0
 800b270:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800b272:	632f      	str	r7, [r5, #48]	@ 0x30
 800b274:	b120      	cbz	r0, 800b280 <rcl_wait_set_fini+0x114>
 800b276:	9101      	str	r1, [sp, #4]
 800b278:	47c0      	blx	r8
 800b27a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b27c:	9901      	ldr	r1, [sp, #4]
 800b27e:	62a7      	str	r7, [r4, #40]	@ 0x28
 800b280:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800b282:	b120      	cbz	r0, 800b28e <rcl_wait_set_fini+0x122>
 800b284:	47c0      	blx	r8
 800b286:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800b288:	2300      	movs	r3, #0
 800b28a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800b28e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b290:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800b292:	4628      	mov	r0, r5
 800b294:	4798      	blx	r3
 800b296:	2300      	movs	r3, #0
 800b298:	6323      	str	r3, [r4, #48]	@ 0x30
 800b29a:	4630      	mov	r0, r6
 800b29c:	b002      	add	sp, #8
 800b29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a2:	260b      	movs	r6, #11
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	b002      	add	sp, #8
 800b2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2ac <__atomic_load_8>:
 800b2ac:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800b2b0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800b2b4:	4a15      	ldr	r2, [pc, #84]	@ (800b30c <__atomic_load_8+0x60>)
 800b2b6:	4b16      	ldr	r3, [pc, #88]	@ (800b310 <__atomic_load_8+0x64>)
 800b2b8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b2bc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800b2c0:	fb02 f101 	mul.w	r1, r2, r1
 800b2c4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800b2c8:	fba3 2301 	umull	r2, r3, r3, r1
 800b2cc:	091b      	lsrs	r3, r3, #4
 800b2ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b2d2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800b2d6:	b4d0      	push	{r4, r6, r7}
 800b2d8:	4c0e      	ldr	r4, [pc, #56]	@ (800b314 <__atomic_load_8+0x68>)
 800b2da:	1ac9      	subs	r1, r1, r3
 800b2dc:	1862      	adds	r2, r4, r1
 800b2de:	f04f 0c01 	mov.w	ip, #1
 800b2e2:	e8d2 3f4f 	ldrexb	r3, [r2]
 800b2e6:	e8c2 cf46 	strexb	r6, ip, [r2]
 800b2ea:	2e00      	cmp	r6, #0
 800b2ec:	d1f9      	bne.n	800b2e2 <__atomic_load_8+0x36>
 800b2ee:	f3bf 8f5b 	dmb	ish
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1f4      	bne.n	800b2e2 <__atomic_load_8+0x36>
 800b2f8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800b2fc:	f3bf 8f5b 	dmb	ish
 800b300:	5463      	strb	r3, [r4, r1]
 800b302:	4630      	mov	r0, r6
 800b304:	4639      	mov	r1, r7
 800b306:	bcd0      	pop	{r4, r6, r7}
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	27d4eb2d 	.word	0x27d4eb2d
 800b310:	b21642c9 	.word	0xb21642c9
 800b314:	200091f8 	.word	0x200091f8

0800b318 <rcutils_get_env>:
 800b318:	b168      	cbz	r0, 800b336 <rcutils_get_env+0x1e>
 800b31a:	b510      	push	{r4, lr}
 800b31c:	460c      	mov	r4, r1
 800b31e:	b129      	cbz	r1, 800b32c <rcutils_get_env+0x14>
 800b320:	f006 fa10 	bl	8011744 <getenv>
 800b324:	b120      	cbz	r0, 800b330 <rcutils_get_env+0x18>
 800b326:	6020      	str	r0, [r4, #0]
 800b328:	2000      	movs	r0, #0
 800b32a:	bd10      	pop	{r4, pc}
 800b32c:	4803      	ldr	r0, [pc, #12]	@ (800b33c <rcutils_get_env+0x24>)
 800b32e:	bd10      	pop	{r4, pc}
 800b330:	4b03      	ldr	r3, [pc, #12]	@ (800b340 <rcutils_get_env+0x28>)
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	bd10      	pop	{r4, pc}
 800b336:	4803      	ldr	r0, [pc, #12]	@ (800b344 <rcutils_get_env+0x2c>)
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	08013360 	.word	0x08013360
 800b340:	08013484 	.word	0x08013484
 800b344:	08013344 	.word	0x08013344

0800b348 <rcutils_is_directory>:
 800b348:	2000      	movs	r0, #0
 800b34a:	4770      	bx	lr

0800b34c <rcutils_join_path>:
 800b34c:	b082      	sub	sp, #8
 800b34e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b352:	2000      	movs	r0, #0
 800b354:	b002      	add	sp, #8
 800b356:	4770      	bx	lr

0800b358 <rcutils_to_native_path>:
 800b358:	b084      	sub	sp, #16
 800b35a:	a801      	add	r0, sp, #4
 800b35c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800b360:	b004      	add	sp, #16
 800b362:	2000      	movs	r0, #0
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop

0800b368 <rcutils_format_string_limit>:
 800b368:	b40f      	push	{r0, r1, r2, r3}
 800b36a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36c:	b083      	sub	sp, #12
 800b36e:	ac08      	add	r4, sp, #32
 800b370:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b376:	b34e      	cbz	r6, 800b3cc <rcutils_format_string_limit+0x64>
 800b378:	a808      	add	r0, sp, #32
 800b37a:	f7fe fe15 	bl	8009fa8 <rcutils_allocator_is_valid>
 800b37e:	b328      	cbz	r0, 800b3cc <rcutils_format_string_limit+0x64>
 800b380:	2100      	movs	r1, #0
 800b382:	ab0f      	add	r3, sp, #60	@ 0x3c
 800b384:	4632      	mov	r2, r6
 800b386:	4608      	mov	r0, r1
 800b388:	e9cd 3300 	strd	r3, r3, [sp]
 800b38c:	f000 f8f4 	bl	800b578 <rcutils_vsnprintf>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	4605      	mov	r5, r0
 800b394:	d01a      	beq.n	800b3cc <rcutils_format_string_limit+0x64>
 800b396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b398:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b39a:	1c47      	adds	r7, r0, #1
 800b39c:	429f      	cmp	r7, r3
 800b39e:	bf84      	itt	hi
 800b3a0:	461f      	movhi	r7, r3
 800b3a2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	9b08      	ldr	r3, [sp, #32]
 800b3aa:	4798      	blx	r3
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	b168      	cbz	r0, 800b3cc <rcutils_format_string_limit+0x64>
 800b3b0:	9b01      	ldr	r3, [sp, #4]
 800b3b2:	4632      	mov	r2, r6
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	f000 f8df 	bl	800b578 <rcutils_vsnprintf>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	db02      	blt.n	800b3c4 <rcutils_format_string_limit+0x5c>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	5563      	strb	r3, [r4, r5]
 800b3c2:	e004      	b.n	800b3ce <rcutils_format_string_limit+0x66>
 800b3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	4798      	blx	r3
 800b3cc:	2400      	movs	r4, #0
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	b003      	add	sp, #12
 800b3d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b3d6:	b004      	add	sp, #16
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop

0800b3dc <rcutils_repl_str>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	ed2d 8b02 	vpush	{d8}
 800b3e4:	b087      	sub	sp, #28
 800b3e6:	4680      	mov	r8, r0
 800b3e8:	4608      	mov	r0, r1
 800b3ea:	f8cd 8004 	str.w	r8, [sp, #4]
 800b3ee:	ee08 2a10 	vmov	s16, r2
 800b3f2:	468a      	mov	sl, r1
 800b3f4:	4699      	mov	r9, r3
 800b3f6:	f7f4 fefd 	bl	80001f4 <strlen>
 800b3fa:	2600      	movs	r6, #0
 800b3fc:	4647      	mov	r7, r8
 800b3fe:	9002      	str	r0, [sp, #8]
 800b400:	46b3      	mov	fp, r6
 800b402:	2510      	movs	r5, #16
 800b404:	46b0      	mov	r8, r6
 800b406:	e01d      	b.n	800b444 <rcutils_repl_str+0x68>
 800b408:	f10b 0b01 	add.w	fp, fp, #1
 800b40c:	455e      	cmp	r6, fp
 800b40e:	d211      	bcs.n	800b434 <rcutils_repl_str+0x58>
 800b410:	442e      	add	r6, r5
 800b412:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b416:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b41a:	00b1      	lsls	r1, r6, #2
 800b41c:	4798      	blx	r3
 800b41e:	2800      	cmp	r0, #0
 800b420:	f000 8088 	beq.w	800b534 <rcutils_repl_str+0x158>
 800b424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b428:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800b42c:	4680      	mov	r8, r0
 800b42e:	bf28      	it	cs
 800b430:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800b434:	9a01      	ldr	r2, [sp, #4]
 800b436:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800b43a:	1aa2      	subs	r2, r4, r2
 800b43c:	f843 2c04 	str.w	r2, [r3, #-4]
 800b440:	9b02      	ldr	r3, [sp, #8]
 800b442:	18e7      	adds	r7, r4, r3
 800b444:	4651      	mov	r1, sl
 800b446:	4638      	mov	r0, r7
 800b448:	f006 fd61 	bl	8011f0e <strstr>
 800b44c:	4604      	mov	r4, r0
 800b44e:	4640      	mov	r0, r8
 800b450:	2c00      	cmp	r4, #0
 800b452:	d1d9      	bne.n	800b408 <rcutils_repl_str+0x2c>
 800b454:	46b8      	mov	r8, r7
 800b456:	4607      	mov	r7, r0
 800b458:	4640      	mov	r0, r8
 800b45a:	f7f4 fecb 	bl	80001f4 <strlen>
 800b45e:	9b01      	ldr	r3, [sp, #4]
 800b460:	eba8 0303 	sub.w	r3, r8, r3
 800b464:	181c      	adds	r4, r3, r0
 800b466:	9404      	str	r4, [sp, #16]
 800b468:	f1bb 0f00 	cmp.w	fp, #0
 800b46c:	d04a      	beq.n	800b504 <rcutils_repl_str+0x128>
 800b46e:	ee18 0a10 	vmov	r0, s16
 800b472:	f7f4 febf 	bl	80001f4 <strlen>
 800b476:	9b02      	ldr	r3, [sp, #8]
 800b478:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b47c:	1ac3      	subs	r3, r0, r3
 800b47e:	fb0b 4303 	mla	r3, fp, r3, r4
 800b482:	461a      	mov	r2, r3
 800b484:	9305      	str	r3, [sp, #20]
 800b486:	4606      	mov	r6, r0
 800b488:	f8d9 3000 	ldr.w	r3, [r9]
 800b48c:	1c50      	adds	r0, r2, #1
 800b48e:	4798      	blx	r3
 800b490:	9003      	str	r0, [sp, #12]
 800b492:	2800      	cmp	r0, #0
 800b494:	d04f      	beq.n	800b536 <rcutils_repl_str+0x15a>
 800b496:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	4641      	mov	r1, r8
 800b49e:	f006 fdd8 	bl	8012052 <memcpy>
 800b4a2:	683d      	ldr	r5, [r7, #0]
 800b4a4:	9b03      	ldr	r3, [sp, #12]
 800b4a6:	9701      	str	r7, [sp, #4]
 800b4a8:	46ba      	mov	sl, r7
 800b4aa:	441d      	add	r5, r3
 800b4ac:	9f02      	ldr	r7, [sp, #8]
 800b4ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4b2:	2401      	movs	r4, #1
 800b4b4:	46d1      	mov	r9, sl
 800b4b6:	ee18 aa10 	vmov	sl, s16
 800b4ba:	e00a      	b.n	800b4d2 <rcutils_repl_str+0xf6>
 800b4bc:	f8d9 5000 	ldr.w	r5, [r9]
 800b4c0:	1aaa      	subs	r2, r5, r2
 800b4c2:	1885      	adds	r5, r0, r2
 800b4c4:	f006 fdc5 	bl	8012052 <memcpy>
 800b4c8:	45a3      	cmp	fp, r4
 800b4ca:	f104 0201 	add.w	r2, r4, #1
 800b4ce:	d935      	bls.n	800b53c <rcutils_repl_str+0x160>
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	4632      	mov	r2, r6
 800b4d4:	4651      	mov	r1, sl
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f006 fdbb 	bl	8012052 <memcpy>
 800b4dc:	f859 2b04 	ldr.w	r2, [r9], #4
 800b4e0:	45a3      	cmp	fp, r4
 800b4e2:	443a      	add	r2, r7
 800b4e4:	eb05 0006 	add.w	r0, r5, r6
 800b4e8:	eb08 0102 	add.w	r1, r8, r2
 800b4ec:	d1e6      	bne.n	800b4bc <rcutils_repl_str+0xe0>
 800b4ee:	9b04      	ldr	r3, [sp, #16]
 800b4f0:	1a9a      	subs	r2, r3, r2
 800b4f2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800b4f6:	f006 fdac 	bl	8012052 <memcpy>
 800b4fa:	9a03      	ldr	r2, [sp, #12]
 800b4fc:	9905      	ldr	r1, [sp, #20]
 800b4fe:	2300      	movs	r3, #0
 800b500:	5453      	strb	r3, [r2, r1]
 800b502:	e00b      	b.n	800b51c <rcutils_repl_str+0x140>
 800b504:	4620      	mov	r0, r4
 800b506:	f8d9 3000 	ldr.w	r3, [r9]
 800b50a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b50e:	3001      	adds	r0, #1
 800b510:	4798      	blx	r3
 800b512:	9003      	str	r0, [sp, #12]
 800b514:	b110      	cbz	r0, 800b51c <rcutils_repl_str+0x140>
 800b516:	9901      	ldr	r1, [sp, #4]
 800b518:	f006 fd93 	bl	8012042 <strcpy>
 800b51c:	4638      	mov	r0, r7
 800b51e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b522:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b526:	4798      	blx	r3
 800b528:	9803      	ldr	r0, [sp, #12]
 800b52a:	b007      	add	sp, #28
 800b52c:	ecbd 8b02 	vpop	{d8}
 800b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b534:	4647      	mov	r7, r8
 800b536:	2300      	movs	r3, #0
 800b538:	9303      	str	r3, [sp, #12]
 800b53a:	e7ef      	b.n	800b51c <rcutils_repl_str+0x140>
 800b53c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800b540:	e7db      	b.n	800b4fa <rcutils_repl_str+0x11e>
 800b542:	bf00      	nop

0800b544 <rcutils_snprintf>:
 800b544:	b40c      	push	{r2, r3}
 800b546:	b530      	push	{r4, r5, lr}
 800b548:	b083      	sub	sp, #12
 800b54a:	ab06      	add	r3, sp, #24
 800b54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	b152      	cbz	r2, 800b56a <rcutils_snprintf+0x26>
 800b554:	b138      	cbz	r0, 800b566 <rcutils_snprintf+0x22>
 800b556:	b141      	cbz	r1, 800b56a <rcutils_snprintf+0x26>
 800b558:	f006 fc8a 	bl	8011e70 <vsniprintf>
 800b55c:	b003      	add	sp, #12
 800b55e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b562:	b002      	add	sp, #8
 800b564:	4770      	bx	lr
 800b566:	2900      	cmp	r1, #0
 800b568:	d0f6      	beq.n	800b558 <rcutils_snprintf+0x14>
 800b56a:	f006 fd3d 	bl	8011fe8 <__errno>
 800b56e:	2316      	movs	r3, #22
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b576:	e7f1      	b.n	800b55c <rcutils_snprintf+0x18>

0800b578 <rcutils_vsnprintf>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	b13a      	cbz	r2, 800b58c <rcutils_vsnprintf+0x14>
 800b57c:	b120      	cbz	r0, 800b588 <rcutils_vsnprintf+0x10>
 800b57e:	b129      	cbz	r1, 800b58c <rcutils_vsnprintf+0x14>
 800b580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b584:	f006 bc74 	b.w	8011e70 <vsniprintf>
 800b588:	2900      	cmp	r1, #0
 800b58a:	d0f9      	beq.n	800b580 <rcutils_vsnprintf+0x8>
 800b58c:	f006 fd2c 	bl	8011fe8 <__errno>
 800b590:	2316      	movs	r3, #22
 800b592:	6003      	str	r3, [r0, #0]
 800b594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b598:	bd70      	pop	{r4, r5, r6, pc}
 800b59a:	bf00      	nop

0800b59c <rcutils_strdup>:
 800b59c:	b084      	sub	sp, #16
 800b59e:	b570      	push	{r4, r5, r6, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	ac07      	add	r4, sp, #28
 800b5a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	b1b0      	cbz	r0, 800b5da <rcutils_strdup+0x3e>
 800b5ac:	f7f4 fe22 	bl	80001f4 <strlen>
 800b5b0:	1c42      	adds	r2, r0, #1
 800b5b2:	9b07      	ldr	r3, [sp, #28]
 800b5b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5b6:	9201      	str	r2, [sp, #4]
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	4798      	blx	r3
 800b5be:	4604      	mov	r4, r0
 800b5c0:	b128      	cbz	r0, 800b5ce <rcutils_strdup+0x32>
 800b5c2:	9a01      	ldr	r2, [sp, #4]
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	f006 fd44 	bl	8012052 <memcpy>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	55a3      	strb	r3, [r4, r6]
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	b002      	add	sp, #8
 800b5d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5d6:	b004      	add	sp, #16
 800b5d8:	4770      	bx	lr
 800b5da:	4604      	mov	r4, r0
 800b5dc:	e7f7      	b.n	800b5ce <rcutils_strdup+0x32>
 800b5de:	bf00      	nop

0800b5e0 <rcutils_strndup>:
 800b5e0:	b082      	sub	sp, #8
 800b5e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e4:	ac06      	add	r4, sp, #24
 800b5e6:	e884 000c 	stmia.w	r4, {r2, r3}
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	b188      	cbz	r0, 800b612 <rcutils_strndup+0x32>
 800b5ee:	1c4f      	adds	r7, r1, #1
 800b5f0:	460e      	mov	r6, r1
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5f6:	4790      	blx	r2
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	b128      	cbz	r0, 800b608 <rcutils_strndup+0x28>
 800b5fc:	463a      	mov	r2, r7
 800b5fe:	4629      	mov	r1, r5
 800b600:	f006 fd27 	bl	8012052 <memcpy>
 800b604:	2300      	movs	r3, #0
 800b606:	55a3      	strb	r3, [r4, r6]
 800b608:	4620      	mov	r0, r4
 800b60a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b60e:	b002      	add	sp, #8
 800b610:	4770      	bx	lr
 800b612:	4604      	mov	r4, r0
 800b614:	e7f8      	b.n	800b608 <rcutils_strndup+0x28>
 800b616:	bf00      	nop

0800b618 <rcutils_get_zero_initialized_string_map>:
 800b618:	4b01      	ldr	r3, [pc, #4]	@ (800b620 <rcutils_get_zero_initialized_string_map+0x8>)
 800b61a:	2000      	movs	r0, #0
 800b61c:	6018      	str	r0, [r3, #0]
 800b61e:	4770      	bx	lr
 800b620:	20009210 	.word	0x20009210

0800b624 <rcutils_string_map_reserve>:
 800b624:	2800      	cmp	r0, #0
 800b626:	d05f      	beq.n	800b6e8 <rcutils_string_map_reserve+0xc4>
 800b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	460c      	mov	r4, r1
 800b62e:	6801      	ldr	r1, [r0, #0]
 800b630:	b082      	sub	sp, #8
 800b632:	4605      	mov	r5, r0
 800b634:	b129      	cbz	r1, 800b642 <rcutils_string_map_reserve+0x1e>
 800b636:	68cb      	ldr	r3, [r1, #12]
 800b638:	42a3      	cmp	r3, r4
 800b63a:	d906      	bls.n	800b64a <rcutils_string_map_reserve+0x26>
 800b63c:	461c      	mov	r4, r3
 800b63e:	2900      	cmp	r1, #0
 800b640:	d1f9      	bne.n	800b636 <rcutils_string_map_reserve+0x12>
 800b642:	201f      	movs	r0, #31
 800b644:	b002      	add	sp, #8
 800b646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b64a:	688b      	ldr	r3, [r1, #8]
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	d047      	beq.n	800b6e0 <rcutils_string_map_reserve+0xbc>
 800b650:	6a0e      	ldr	r6, [r1, #32]
 800b652:	2c00      	cmp	r4, #0
 800b654:	d034      	beq.n	800b6c0 <rcutils_string_map_reserve+0x9c>
 800b656:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800b65a:	d243      	bcs.n	800b6e4 <rcutils_string_map_reserve+0xc0>
 800b65c:	00a7      	lsls	r7, r4, #2
 800b65e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800b662:	6808      	ldr	r0, [r1, #0]
 800b664:	4632      	mov	r2, r6
 800b666:	4639      	mov	r1, r7
 800b668:	47c0      	blx	r8
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d03a      	beq.n	800b6e4 <rcutils_string_map_reserve+0xc0>
 800b66e:	682b      	ldr	r3, [r5, #0]
 800b670:	4632      	mov	r2, r6
 800b672:	6018      	str	r0, [r3, #0]
 800b674:	4639      	mov	r1, r7
 800b676:	6858      	ldr	r0, [r3, #4]
 800b678:	47c0      	blx	r8
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d032      	beq.n	800b6e4 <rcutils_string_map_reserve+0xc0>
 800b67e:	682d      	ldr	r5, [r5, #0]
 800b680:	68ab      	ldr	r3, [r5, #8]
 800b682:	6068      	str	r0, [r5, #4]
 800b684:	42a3      	cmp	r3, r4
 800b686:	d226      	bcs.n	800b6d6 <rcutils_string_map_reserve+0xb2>
 800b688:	682a      	ldr	r2, [r5, #0]
 800b68a:	eb00 0c07 	add.w	ip, r0, r7
 800b68e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800b692:	45e6      	cmp	lr, ip
 800b694:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800b698:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800b69c:	d203      	bcs.n	800b6a6 <rcutils_string_map_reserve+0x82>
 800b69e:	eb02 0c07 	add.w	ip, r2, r7
 800b6a2:	4566      	cmp	r6, ip
 800b6a4:	d322      	bcc.n	800b6ec <rcutils_string_map_reserve+0xc8>
 800b6a6:	1ae3      	subs	r3, r4, r3
 800b6a8:	009a      	lsls	r2, r3, #2
 800b6aa:	4670      	mov	r0, lr
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	9201      	str	r2, [sp, #4]
 800b6b0:	f006 fc06 	bl	8011ec0 <memset>
 800b6b4:	9a01      	ldr	r2, [sp, #4]
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f006 fc01 	bl	8011ec0 <memset>
 800b6be:	e00a      	b.n	800b6d6 <rcutils_string_map_reserve+0xb2>
 800b6c0:	694f      	ldr	r7, [r1, #20]
 800b6c2:	6808      	ldr	r0, [r1, #0]
 800b6c4:	4631      	mov	r1, r6
 800b6c6:	47b8      	blx	r7
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	6858      	ldr	r0, [r3, #4]
 800b6ce:	601c      	str	r4, [r3, #0]
 800b6d0:	47b8      	blx	r7
 800b6d2:	682d      	ldr	r5, [r5, #0]
 800b6d4:	606c      	str	r4, [r5, #4]
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	60ac      	str	r4, [r5, #8]
 800b6da:	b002      	add	sp, #8
 800b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	e7af      	b.n	800b644 <rcutils_string_map_reserve+0x20>
 800b6e4:	200a      	movs	r0, #10
 800b6e6:	e7ad      	b.n	800b644 <rcutils_string_map_reserve+0x20>
 800b6e8:	200b      	movs	r0, #11
 800b6ea:	4770      	bx	lr
 800b6ec:	1f0b      	subs	r3, r1, #4
 800b6ee:	4418      	add	r0, r3
 800b6f0:	4413      	add	r3, r2
 800b6f2:	3a04      	subs	r2, #4
 800b6f4:	4417      	add	r7, r2
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f843 2f04 	str.w	r2, [r3, #4]!
 800b6fc:	42bb      	cmp	r3, r7
 800b6fe:	f840 2f04 	str.w	r2, [r0, #4]!
 800b702:	d1f9      	bne.n	800b6f8 <rcutils_string_map_reserve+0xd4>
 800b704:	e7e7      	b.n	800b6d6 <rcutils_string_map_reserve+0xb2>
 800b706:	bf00      	nop

0800b708 <rcutils_string_map_init>:
 800b708:	b082      	sub	sp, #8
 800b70a:	b570      	push	{r4, r5, r6, lr}
 800b70c:	ac04      	add	r4, sp, #16
 800b70e:	e884 000c 	stmia.w	r4, {r2, r3}
 800b712:	b380      	cbz	r0, 800b776 <rcutils_string_map_init+0x6e>
 800b714:	6806      	ldr	r6, [r0, #0]
 800b716:	4604      	mov	r4, r0
 800b718:	b12e      	cbz	r6, 800b726 <rcutils_string_map_init+0x1e>
 800b71a:	251e      	movs	r5, #30
 800b71c:	4628      	mov	r0, r5
 800b71e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b722:	b002      	add	sp, #8
 800b724:	4770      	bx	lr
 800b726:	a804      	add	r0, sp, #16
 800b728:	460d      	mov	r5, r1
 800b72a:	f7fe fc3d 	bl	8009fa8 <rcutils_allocator_is_valid>
 800b72e:	b310      	cbz	r0, 800b776 <rcutils_string_map_init+0x6e>
 800b730:	9b04      	ldr	r3, [sp, #16]
 800b732:	9908      	ldr	r1, [sp, #32]
 800b734:	2024      	movs	r0, #36	@ 0x24
 800b736:	4798      	blx	r3
 800b738:	6020      	str	r0, [r4, #0]
 800b73a:	b310      	cbz	r0, 800b782 <rcutils_string_map_init+0x7a>
 800b73c:	f10d 0e10 	add.w	lr, sp, #16
 800b740:	e9c0 6600 	strd	r6, r6, [r0]
 800b744:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800b748:	f100 0c10 	add.w	ip, r0, #16
 800b74c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b750:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b754:	f8de 3000 	ldr.w	r3, [lr]
 800b758:	f8cc 3000 	str.w	r3, [ip]
 800b75c:	4629      	mov	r1, r5
 800b75e:	4620      	mov	r0, r4
 800b760:	f7ff ff60 	bl	800b624 <rcutils_string_map_reserve>
 800b764:	4605      	mov	r5, r0
 800b766:	2800      	cmp	r0, #0
 800b768:	d0d8      	beq.n	800b71c <rcutils_string_map_init+0x14>
 800b76a:	9b05      	ldr	r3, [sp, #20]
 800b76c:	9908      	ldr	r1, [sp, #32]
 800b76e:	6820      	ldr	r0, [r4, #0]
 800b770:	4798      	blx	r3
 800b772:	6026      	str	r6, [r4, #0]
 800b774:	e7d2      	b.n	800b71c <rcutils_string_map_init+0x14>
 800b776:	250b      	movs	r5, #11
 800b778:	4628      	mov	r0, r5
 800b77a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b77e:	b002      	add	sp, #8
 800b780:	4770      	bx	lr
 800b782:	250a      	movs	r5, #10
 800b784:	e7ca      	b.n	800b71c <rcutils_string_map_init+0x14>
 800b786:	bf00      	nop

0800b788 <rcutils_string_map_fini>:
 800b788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78c:	b082      	sub	sp, #8
 800b78e:	2800      	cmp	r0, #0
 800b790:	d03a      	beq.n	800b808 <rcutils_string_map_fini+0x80>
 800b792:	6804      	ldr	r4, [r0, #0]
 800b794:	4606      	mov	r6, r0
 800b796:	2c00      	cmp	r4, #0
 800b798:	d032      	beq.n	800b800 <rcutils_string_map_fini+0x78>
 800b79a:	68a3      	ldr	r3, [r4, #8]
 800b79c:	b32b      	cbz	r3, 800b7ea <rcutils_string_map_fini+0x62>
 800b79e:	2500      	movs	r5, #0
 800b7a0:	6822      	ldr	r2, [r4, #0]
 800b7a2:	462f      	mov	r7, r5
 800b7a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800b7a8:	b1e0      	cbz	r0, 800b7e4 <rcutils_string_map_fini+0x5c>
 800b7aa:	6a21      	ldr	r1, [r4, #32]
 800b7ac:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800b7b0:	9101      	str	r1, [sp, #4]
 800b7b2:	47c0      	blx	r8
 800b7b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b7b8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800b7bc:	9901      	ldr	r1, [sp, #4]
 800b7be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7c2:	47c0      	blx	r8
 800b7c4:	68e3      	ldr	r3, [r4, #12]
 800b7c6:	6862      	ldr	r2, [r4, #4]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800b7ce:	60e3      	str	r3, [r4, #12]
 800b7d0:	6834      	ldr	r4, [r6, #0]
 800b7d2:	68a3      	ldr	r3, [r4, #8]
 800b7d4:	3501      	adds	r5, #1
 800b7d6:	429d      	cmp	r5, r3
 800b7d8:	d207      	bcs.n	800b7ea <rcutils_string_map_fini+0x62>
 800b7da:	6822      	ldr	r2, [r4, #0]
 800b7dc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d1e2      	bne.n	800b7aa <rcutils_string_map_fini+0x22>
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	429d      	cmp	r5, r3
 800b7e8:	d3dc      	bcc.n	800b7a4 <rcutils_string_map_fini+0x1c>
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f7ff ff19 	bl	800b624 <rcutils_string_map_reserve>
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	b920      	cbnz	r0, 800b800 <rcutils_string_map_fini+0x78>
 800b7f6:	6830      	ldr	r0, [r6, #0]
 800b7f8:	6943      	ldr	r3, [r0, #20]
 800b7fa:	6a01      	ldr	r1, [r0, #32]
 800b7fc:	4798      	blx	r3
 800b7fe:	6034      	str	r4, [r6, #0]
 800b800:	4620      	mov	r0, r4
 800b802:	b002      	add	sp, #8
 800b804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b808:	240b      	movs	r4, #11
 800b80a:	4620      	mov	r0, r4
 800b80c:	b002      	add	sp, #8
 800b80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b812:	bf00      	nop

0800b814 <rcutils_string_map_getn>:
 800b814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	b300      	cbz	r0, 800b85c <rcutils_string_map_getn+0x48>
 800b81a:	6807      	ldr	r7, [r0, #0]
 800b81c:	b1ff      	cbz	r7, 800b85e <rcutils_string_map_getn+0x4a>
 800b81e:	4688      	mov	r8, r1
 800b820:	b1e1      	cbz	r1, 800b85c <rcutils_string_map_getn+0x48>
 800b822:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b826:	683e      	ldr	r6, [r7, #0]
 800b828:	f1ba 0f00 	cmp.w	sl, #0
 800b82c:	d016      	beq.n	800b85c <rcutils_string_map_getn+0x48>
 800b82e:	4691      	mov	r9, r2
 800b830:	3e04      	subs	r6, #4
 800b832:	2400      	movs	r4, #0
 800b834:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800b838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b83c:	4628      	mov	r0, r5
 800b83e:	3401      	adds	r4, #1
 800b840:	b155      	cbz	r5, 800b858 <rcutils_string_map_getn+0x44>
 800b842:	f7f4 fcd7 	bl	80001f4 <strlen>
 800b846:	4548      	cmp	r0, r9
 800b848:	4602      	mov	r2, r0
 800b84a:	4629      	mov	r1, r5
 800b84c:	bf38      	it	cc
 800b84e:	464a      	movcc	r2, r9
 800b850:	4640      	mov	r0, r8
 800b852:	f006 fb4a 	bl	8011eea <strncmp>
 800b856:	b128      	cbz	r0, 800b864 <rcutils_string_map_getn+0x50>
 800b858:	45a2      	cmp	sl, r4
 800b85a:	d1eb      	bne.n	800b834 <rcutils_string_map_getn+0x20>
 800b85c:	2700      	movs	r7, #0
 800b85e:	4638      	mov	r0, r7
 800b860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f853 700b 	ldr.w	r7, [r3, fp]
 800b86a:	4638      	mov	r0, r7
 800b86c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b870 <rmw_get_zero_initialized_context>:
 800b870:	b510      	push	{r4, lr}
 800b872:	4604      	mov	r4, r0
 800b874:	3010      	adds	r0, #16
 800b876:	f000 f80b 	bl	800b890 <rmw_get_zero_initialized_init_options>
 800b87a:	2300      	movs	r3, #0
 800b87c:	2000      	movs	r0, #0
 800b87e:	2100      	movs	r1, #0
 800b880:	e9c4 0100 	strd	r0, r1, [r4]
 800b884:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800b888:	60a3      	str	r3, [r4, #8]
 800b88a:	4620      	mov	r0, r4
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	bf00      	nop

0800b890 <rmw_get_zero_initialized_init_options>:
 800b890:	b510      	push	{r4, lr}
 800b892:	2238      	movs	r2, #56	@ 0x38
 800b894:	4604      	mov	r4, r0
 800b896:	2100      	movs	r1, #0
 800b898:	f006 fb12 	bl	8011ec0 <memset>
 800b89c:	f104 0010 	add.w	r0, r4, #16
 800b8a0:	f000 f806 	bl	800b8b0 <rmw_get_default_security_options>
 800b8a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8a8:	60e3      	str	r3, [r4, #12]
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	bd10      	pop	{r4, pc}
 800b8ae:	bf00      	nop

0800b8b0 <rmw_get_default_security_options>:
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	7002      	strb	r2, [r0, #0]
 800b8b4:	6042      	str	r2, [r0, #4]
 800b8b6:	4770      	bx	lr

0800b8b8 <rmw_subscription_content_filter_options_fini>:
 800b8b8:	b1b0      	cbz	r0, 800b8e8 <rmw_subscription_content_filter_options_fini+0x30>
 800b8ba:	b538      	push	{r3, r4, r5, lr}
 800b8bc:	4604      	mov	r4, r0
 800b8be:	4608      	mov	r0, r1
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	f7fe fb71 	bl	8009fa8 <rcutils_allocator_is_valid>
 800b8c6:	b168      	cbz	r0, 800b8e4 <rmw_subscription_content_filter_options_fini+0x2c>
 800b8c8:	6820      	ldr	r0, [r4, #0]
 800b8ca:	b120      	cbz	r0, 800b8d6 <rmw_subscription_content_filter_options_fini+0x1e>
 800b8cc:	686b      	ldr	r3, [r5, #4]
 800b8ce:	6929      	ldr	r1, [r5, #16]
 800b8d0:	4798      	blx	r3
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	1d20      	adds	r0, r4, #4
 800b8d8:	f004 fe62 	bl	80105a0 <rcutils_string_array_fini>
 800b8dc:	3800      	subs	r0, #0
 800b8de:	bf18      	it	ne
 800b8e0:	2001      	movne	r0, #1
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	200b      	movs	r0, #11
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}
 800b8e8:	200b      	movs	r0, #11
 800b8ea:	4770      	bx	lr

0800b8ec <rmw_get_default_subscription_options>:
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	e9c0 2200 	strd	r2, r2, [r0]
 800b8f2:	6082      	str	r2, [r0, #8]
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop

0800b8f8 <rmw_validate_full_topic_name>:
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d057      	beq.n	800b9ac <rmw_validate_full_topic_name+0xb4>
 800b8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b900:	460d      	mov	r5, r1
 800b902:	2900      	cmp	r1, #0
 800b904:	d054      	beq.n	800b9b0 <rmw_validate_full_topic_name+0xb8>
 800b906:	4616      	mov	r6, r2
 800b908:	4604      	mov	r4, r0
 800b90a:	f7f4 fc73 	bl	80001f4 <strlen>
 800b90e:	b148      	cbz	r0, 800b924 <rmw_validate_full_topic_name+0x2c>
 800b910:	7823      	ldrb	r3, [r4, #0]
 800b912:	2b2f      	cmp	r3, #47	@ 0x2f
 800b914:	d00d      	beq.n	800b932 <rmw_validate_full_topic_name+0x3a>
 800b916:	2302      	movs	r3, #2
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	b13e      	cbz	r6, 800b92c <rmw_validate_full_topic_name+0x34>
 800b91c:	2000      	movs	r0, #0
 800b91e:	6030      	str	r0, [r6, #0]
 800b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b924:	2301      	movs	r3, #1
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	2e00      	cmp	r6, #0
 800b92a:	d1f7      	bne.n	800b91c <rmw_validate_full_topic_name+0x24>
 800b92c:	2000      	movs	r0, #0
 800b92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b932:	1e43      	subs	r3, r0, #1
 800b934:	5ce2      	ldrb	r2, [r4, r3]
 800b936:	2a2f      	cmp	r2, #47	@ 0x2f
 800b938:	d03c      	beq.n	800b9b4 <rmw_validate_full_topic_name+0xbc>
 800b93a:	1e63      	subs	r3, r4, #1
 800b93c:	eb03 0800 	add.w	r8, r3, r0
 800b940:	f1c4 0e01 	rsb	lr, r4, #1
 800b944:	eb0e 0703 	add.w	r7, lr, r3
 800b948:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b94c:	f021 0220 	bic.w	r2, r1, #32
 800b950:	3a41      	subs	r2, #65	@ 0x41
 800b952:	2a19      	cmp	r2, #25
 800b954:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800b958:	d90b      	bls.n	800b972 <rmw_validate_full_topic_name+0x7a>
 800b95a:	295f      	cmp	r1, #95	@ 0x5f
 800b95c:	d009      	beq.n	800b972 <rmw_validate_full_topic_name+0x7a>
 800b95e:	f1bc 0f0a 	cmp.w	ip, #10
 800b962:	d906      	bls.n	800b972 <rmw_validate_full_topic_name+0x7a>
 800b964:	2304      	movs	r3, #4
 800b966:	602b      	str	r3, [r5, #0]
 800b968:	2e00      	cmp	r6, #0
 800b96a:	d0df      	beq.n	800b92c <rmw_validate_full_topic_name+0x34>
 800b96c:	6037      	str	r7, [r6, #0]
 800b96e:	2000      	movs	r0, #0
 800b970:	e7d6      	b.n	800b920 <rmw_validate_full_topic_name+0x28>
 800b972:	4543      	cmp	r3, r8
 800b974:	d1e6      	bne.n	800b944 <rmw_validate_full_topic_name+0x4c>
 800b976:	4f1a      	ldr	r7, [pc, #104]	@ (800b9e0 <rmw_validate_full_topic_name+0xe8>)
 800b978:	2301      	movs	r3, #1
 800b97a:	e004      	b.n	800b986 <rmw_validate_full_topic_name+0x8e>
 800b97c:	4298      	cmp	r0, r3
 800b97e:	f104 0401 	add.w	r4, r4, #1
 800b982:	d91c      	bls.n	800b9be <rmw_validate_full_topic_name+0xc6>
 800b984:	4613      	mov	r3, r2
 800b986:	4298      	cmp	r0, r3
 800b988:	f103 0201 	add.w	r2, r3, #1
 800b98c:	d0f6      	beq.n	800b97c <rmw_validate_full_topic_name+0x84>
 800b98e:	7821      	ldrb	r1, [r4, #0]
 800b990:	292f      	cmp	r1, #47	@ 0x2f
 800b992:	d1f3      	bne.n	800b97c <rmw_validate_full_topic_name+0x84>
 800b994:	7861      	ldrb	r1, [r4, #1]
 800b996:	292f      	cmp	r1, #47	@ 0x2f
 800b998:	d01c      	beq.n	800b9d4 <rmw_validate_full_topic_name+0xdc>
 800b99a:	5dc9      	ldrb	r1, [r1, r7]
 800b99c:	0749      	lsls	r1, r1, #29
 800b99e:	d5ed      	bpl.n	800b97c <rmw_validate_full_topic_name+0x84>
 800b9a0:	2206      	movs	r2, #6
 800b9a2:	602a      	str	r2, [r5, #0]
 800b9a4:	2e00      	cmp	r6, #0
 800b9a6:	d0c1      	beq.n	800b92c <rmw_validate_full_topic_name+0x34>
 800b9a8:	6033      	str	r3, [r6, #0]
 800b9aa:	e7bf      	b.n	800b92c <rmw_validate_full_topic_name+0x34>
 800b9ac:	200b      	movs	r0, #11
 800b9ae:	4770      	bx	lr
 800b9b0:	200b      	movs	r0, #11
 800b9b2:	e7b5      	b.n	800b920 <rmw_validate_full_topic_name+0x28>
 800b9b4:	2203      	movs	r2, #3
 800b9b6:	602a      	str	r2, [r5, #0]
 800b9b8:	2e00      	cmp	r6, #0
 800b9ba:	d1f5      	bne.n	800b9a8 <rmw_validate_full_topic_name+0xb0>
 800b9bc:	e7b6      	b.n	800b92c <rmw_validate_full_topic_name+0x34>
 800b9be:	28f7      	cmp	r0, #247	@ 0xf7
 800b9c0:	d802      	bhi.n	800b9c8 <rmw_validate_full_topic_name+0xd0>
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	6028      	str	r0, [r5, #0]
 800b9c6:	e7ab      	b.n	800b920 <rmw_validate_full_topic_name+0x28>
 800b9c8:	2307      	movs	r3, #7
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	2e00      	cmp	r6, #0
 800b9ce:	d0ad      	beq.n	800b92c <rmw_validate_full_topic_name+0x34>
 800b9d0:	23f6      	movs	r3, #246	@ 0xf6
 800b9d2:	e7e9      	b.n	800b9a8 <rmw_validate_full_topic_name+0xb0>
 800b9d4:	2205      	movs	r2, #5
 800b9d6:	602a      	str	r2, [r5, #0]
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	d1e5      	bne.n	800b9a8 <rmw_validate_full_topic_name+0xb0>
 800b9dc:	e7a6      	b.n	800b92c <rmw_validate_full_topic_name+0x34>
 800b9de:	bf00      	nop
 800b9e0:	0801397c 	.word	0x0801397c

0800b9e4 <rmw_validate_namespace_with_size>:
 800b9e4:	b340      	cbz	r0, 800ba38 <rmw_validate_namespace_with_size+0x54>
 800b9e6:	b570      	push	{r4, r5, r6, lr}
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	b0c2      	sub	sp, #264	@ 0x108
 800b9ec:	b332      	cbz	r2, 800ba3c <rmw_validate_namespace_with_size+0x58>
 800b9ee:	2901      	cmp	r1, #1
 800b9f0:	460d      	mov	r5, r1
 800b9f2:	461e      	mov	r6, r3
 800b9f4:	d102      	bne.n	800b9fc <rmw_validate_namespace_with_size+0x18>
 800b9f6:	7803      	ldrb	r3, [r0, #0]
 800b9f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800b9fa:	d012      	beq.n	800ba22 <rmw_validate_namespace_with_size+0x3e>
 800b9fc:	aa01      	add	r2, sp, #4
 800b9fe:	4669      	mov	r1, sp
 800ba00:	f7ff ff7a 	bl	800b8f8 <rmw_validate_full_topic_name>
 800ba04:	b978      	cbnz	r0, 800ba26 <rmw_validate_namespace_with_size+0x42>
 800ba06:	9b00      	ldr	r3, [sp, #0]
 800ba08:	b14b      	cbz	r3, 800ba1e <rmw_validate_namespace_with_size+0x3a>
 800ba0a:	2b07      	cmp	r3, #7
 800ba0c:	d007      	beq.n	800ba1e <rmw_validate_namespace_with_size+0x3a>
 800ba0e:	1e5a      	subs	r2, r3, #1
 800ba10:	2a05      	cmp	r2, #5
 800ba12:	d82b      	bhi.n	800ba6c <rmw_validate_namespace_with_size+0x88>
 800ba14:	e8df f002 	tbb	[pc, r2]
 800ba18:	1e212427 	.word	0x1e212427
 800ba1c:	141b      	.short	0x141b
 800ba1e:	2df5      	cmp	r5, #245	@ 0xf5
 800ba20:	d803      	bhi.n	800ba2a <rmw_validate_namespace_with_size+0x46>
 800ba22:	2000      	movs	r0, #0
 800ba24:	6020      	str	r0, [r4, #0]
 800ba26:	b042      	add	sp, #264	@ 0x108
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
 800ba2a:	2307      	movs	r3, #7
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	2e00      	cmp	r6, #0
 800ba30:	d0f9      	beq.n	800ba26 <rmw_validate_namespace_with_size+0x42>
 800ba32:	23f4      	movs	r3, #244	@ 0xf4
 800ba34:	6033      	str	r3, [r6, #0]
 800ba36:	e7f6      	b.n	800ba26 <rmw_validate_namespace_with_size+0x42>
 800ba38:	200b      	movs	r0, #11
 800ba3a:	4770      	bx	lr
 800ba3c:	200b      	movs	r0, #11
 800ba3e:	e7f2      	b.n	800ba26 <rmw_validate_namespace_with_size+0x42>
 800ba40:	2306      	movs	r3, #6
 800ba42:	6023      	str	r3, [r4, #0]
 800ba44:	2e00      	cmp	r6, #0
 800ba46:	d0ee      	beq.n	800ba26 <rmw_validate_namespace_with_size+0x42>
 800ba48:	9b01      	ldr	r3, [sp, #4]
 800ba4a:	6033      	str	r3, [r6, #0]
 800ba4c:	e7eb      	b.n	800ba26 <rmw_validate_namespace_with_size+0x42>
 800ba4e:	2305      	movs	r3, #5
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	e7f7      	b.n	800ba44 <rmw_validate_namespace_with_size+0x60>
 800ba54:	2304      	movs	r3, #4
 800ba56:	6023      	str	r3, [r4, #0]
 800ba58:	e7f4      	b.n	800ba44 <rmw_validate_namespace_with_size+0x60>
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	e7f1      	b.n	800ba44 <rmw_validate_namespace_with_size+0x60>
 800ba60:	2302      	movs	r3, #2
 800ba62:	6023      	str	r3, [r4, #0]
 800ba64:	e7ee      	b.n	800ba44 <rmw_validate_namespace_with_size+0x60>
 800ba66:	2301      	movs	r3, #1
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	e7eb      	b.n	800ba44 <rmw_validate_namespace_with_size+0x60>
 800ba6c:	4a03      	ldr	r2, [pc, #12]	@ (800ba7c <rmw_validate_namespace_with_size+0x98>)
 800ba6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ba72:	a802      	add	r0, sp, #8
 800ba74:	f7ff fd66 	bl	800b544 <rcutils_snprintf>
 800ba78:	2001      	movs	r0, #1
 800ba7a:	e7d4      	b.n	800ba26 <rmw_validate_namespace_with_size+0x42>
 800ba7c:	0801337c 	.word	0x0801337c

0800ba80 <rmw_validate_namespace>:
 800ba80:	b168      	cbz	r0, 800ba9e <rmw_validate_namespace+0x1e>
 800ba82:	b570      	push	{r4, r5, r6, lr}
 800ba84:	460d      	mov	r5, r1
 800ba86:	4616      	mov	r6, r2
 800ba88:	4604      	mov	r4, r0
 800ba8a:	f7f4 fbb3 	bl	80001f4 <strlen>
 800ba8e:	4633      	mov	r3, r6
 800ba90:	4601      	mov	r1, r0
 800ba92:	462a      	mov	r2, r5
 800ba94:	4620      	mov	r0, r4
 800ba96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba9a:	f7ff bfa3 	b.w	800b9e4 <rmw_validate_namespace_with_size>
 800ba9e:	200b      	movs	r0, #11
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop

0800baa4 <rmw_namespace_validation_result_string>:
 800baa4:	2807      	cmp	r0, #7
 800baa6:	bf9a      	itte	ls
 800baa8:	4b02      	ldrls	r3, [pc, #8]	@ (800bab4 <rmw_namespace_validation_result_string+0x10>)
 800baaa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800baae:	4802      	ldrhi	r0, [pc, #8]	@ (800bab8 <rmw_namespace_validation_result_string+0x14>)
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	08013574 	.word	0x08013574
 800bab8:	080133cc 	.word	0x080133cc

0800babc <rmw_validate_node_name>:
 800babc:	2800      	cmp	r0, #0
 800babe:	d03b      	beq.n	800bb38 <rmw_validate_node_name+0x7c>
 800bac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac4:	460d      	mov	r5, r1
 800bac6:	2900      	cmp	r1, #0
 800bac8:	d038      	beq.n	800bb3c <rmw_validate_node_name+0x80>
 800baca:	4616      	mov	r6, r2
 800bacc:	4604      	mov	r4, r0
 800bace:	f7f4 fb91 	bl	80001f4 <strlen>
 800bad2:	b1e0      	cbz	r0, 800bb0e <rmw_validate_node_name+0x52>
 800bad4:	1e63      	subs	r3, r4, #1
 800bad6:	eb03 0800 	add.w	r8, r3, r0
 800bada:	f1c4 0101 	rsb	r1, r4, #1
 800bade:	18cf      	adds	r7, r1, r3
 800bae0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800bae4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800bae8:	f02e 0c20 	bic.w	ip, lr, #32
 800baec:	2a09      	cmp	r2, #9
 800baee:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800baf2:	d914      	bls.n	800bb1e <rmw_validate_node_name+0x62>
 800baf4:	f1bc 0f19 	cmp.w	ip, #25
 800baf8:	d911      	bls.n	800bb1e <rmw_validate_node_name+0x62>
 800bafa:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800bafe:	d00e      	beq.n	800bb1e <rmw_validate_node_name+0x62>
 800bb00:	2302      	movs	r3, #2
 800bb02:	602b      	str	r3, [r5, #0]
 800bb04:	b106      	cbz	r6, 800bb08 <rmw_validate_node_name+0x4c>
 800bb06:	6037      	str	r7, [r6, #0]
 800bb08:	2000      	movs	r0, #0
 800bb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0e:	2301      	movs	r3, #1
 800bb10:	602b      	str	r3, [r5, #0]
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	d0f8      	beq.n	800bb08 <rmw_validate_node_name+0x4c>
 800bb16:	2000      	movs	r0, #0
 800bb18:	6030      	str	r0, [r6, #0]
 800bb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1e:	4543      	cmp	r3, r8
 800bb20:	d1dd      	bne.n	800bade <rmw_validate_node_name+0x22>
 800bb22:	7822      	ldrb	r2, [r4, #0]
 800bb24:	4b0d      	ldr	r3, [pc, #52]	@ (800bb5c <rmw_validate_node_name+0xa0>)
 800bb26:	5cd3      	ldrb	r3, [r2, r3]
 800bb28:	f013 0304 	ands.w	r3, r3, #4
 800bb2c:	d110      	bne.n	800bb50 <rmw_validate_node_name+0x94>
 800bb2e:	28ff      	cmp	r0, #255	@ 0xff
 800bb30:	d806      	bhi.n	800bb40 <rmw_validate_node_name+0x84>
 800bb32:	602b      	str	r3, [r5, #0]
 800bb34:	4618      	mov	r0, r3
 800bb36:	e7e8      	b.n	800bb0a <rmw_validate_node_name+0x4e>
 800bb38:	200b      	movs	r0, #11
 800bb3a:	4770      	bx	lr
 800bb3c:	200b      	movs	r0, #11
 800bb3e:	e7e4      	b.n	800bb0a <rmw_validate_node_name+0x4e>
 800bb40:	2204      	movs	r2, #4
 800bb42:	602a      	str	r2, [r5, #0]
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	d0df      	beq.n	800bb08 <rmw_validate_node_name+0x4c>
 800bb48:	22fe      	movs	r2, #254	@ 0xfe
 800bb4a:	6032      	str	r2, [r6, #0]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	e7dc      	b.n	800bb0a <rmw_validate_node_name+0x4e>
 800bb50:	2303      	movs	r3, #3
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	2e00      	cmp	r6, #0
 800bb56:	d1de      	bne.n	800bb16 <rmw_validate_node_name+0x5a>
 800bb58:	e7d6      	b.n	800bb08 <rmw_validate_node_name+0x4c>
 800bb5a:	bf00      	nop
 800bb5c:	0801397c 	.word	0x0801397c

0800bb60 <rmw_node_name_validation_result_string>:
 800bb60:	2804      	cmp	r0, #4
 800bb62:	bf9a      	itte	ls
 800bb64:	4b02      	ldrls	r3, [pc, #8]	@ (800bb70 <rmw_node_name_validation_result_string+0x10>)
 800bb66:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800bb6a:	4802      	ldrhi	r0, [pc, #8]	@ (800bb74 <rmw_node_name_validation_result_string+0x14>)
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	08013680 	.word	0x08013680
 800bb74:	08013594 	.word	0x08013594

0800bb78 <rmw_destroy_client>:
 800bb78:	b570      	push	{r4, r5, r6, lr}
 800bb7a:	b128      	cbz	r0, 800bb88 <rmw_destroy_client+0x10>
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	6800      	ldr	r0, [r0, #0]
 800bb80:	460d      	mov	r5, r1
 800bb82:	f001 f87d 	bl	800cc80 <is_uxrce_rmw_identifier_valid>
 800bb86:	b910      	cbnz	r0, 800bb8e <rmw_destroy_client+0x16>
 800bb88:	2401      	movs	r4, #1
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	bd70      	pop	{r4, r5, r6, pc}
 800bb8e:	6863      	ldr	r3, [r4, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d0f9      	beq.n	800bb88 <rmw_destroy_client+0x10>
 800bb94:	2d00      	cmp	r5, #0
 800bb96:	d0f7      	beq.n	800bb88 <rmw_destroy_client+0x10>
 800bb98:	6828      	ldr	r0, [r5, #0]
 800bb9a:	f001 f871 	bl	800cc80 <is_uxrce_rmw_identifier_valid>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d0f2      	beq.n	800bb88 <rmw_destroy_client+0x10>
 800bba2:	686e      	ldr	r6, [r5, #4]
 800bba4:	2e00      	cmp	r6, #0
 800bba6:	d0ef      	beq.n	800bb88 <rmw_destroy_client+0x10>
 800bba8:	6864      	ldr	r4, [r4, #4]
 800bbaa:	6932      	ldr	r2, [r6, #16]
 800bbac:	6920      	ldr	r0, [r4, #16]
 800bbae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bbb2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bbb6:	6819      	ldr	r1, [r3, #0]
 800bbb8:	f001 faf8 	bl	800d1ac <uxr_buffer_cancel_data>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	6920      	ldr	r0, [r4, #16]
 800bbc0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800bbc4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800bbc8:	f000 ffda 	bl	800cb80 <run_xrce_session>
 800bbcc:	6920      	ldr	r0, [r4, #16]
 800bbce:	6932      	ldr	r2, [r6, #16]
 800bbd0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bbd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bbd8:	6819      	ldr	r1, [r3, #0]
 800bbda:	f001 f85f 	bl	800cc9c <uxr_buffer_delete_entity>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	6920      	ldr	r0, [r4, #16]
 800bbe2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800bbe6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800bbea:	f000 ffc9 	bl	800cb80 <run_xrce_session>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	bf14      	ite	ne
 800bbf4:	2400      	movne	r4, #0
 800bbf6:	2402      	moveq	r4, #2
 800bbf8:	f000 ff50 	bl	800ca9c <rmw_uxrce_fini_client_memory>
 800bbfc:	e7c5      	b.n	800bb8a <rmw_destroy_client+0x12>
 800bbfe:	bf00      	nop

0800bc00 <rmw_get_implementation_identifier>:
 800bc00:	4b01      	ldr	r3, [pc, #4]	@ (800bc08 <rmw_get_implementation_identifier+0x8>)
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	08013908 	.word	0x08013908

0800bc0c <rmw_init_options_init>:
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc10:	b083      	sub	sp, #12
 800bc12:	ad09      	add	r5, sp, #36	@ 0x24
 800bc14:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800bc18:	b130      	cbz	r0, 800bc28 <rmw_init_options_init+0x1c>
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f7fe f9c3 	bl	8009fa8 <rcutils_allocator_is_valid>
 800bc22:	b108      	cbz	r0, 800bc28 <rmw_init_options_init+0x1c>
 800bc24:	68a6      	ldr	r6, [r4, #8]
 800bc26:	b12e      	cbz	r6, 800bc34 <rmw_init_options_init+0x28>
 800bc28:	200b      	movs	r0, #11
 800bc2a:	b003      	add	sp, #12
 800bc2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc30:	b004      	add	sp, #16
 800bc32:	4770      	bx	lr
 800bc34:	2200      	movs	r2, #0
 800bc36:	2300      	movs	r3, #0
 800bc38:	e9c4 2300 	strd	r2, r3, [r4]
 800bc3c:	4b22      	ldr	r3, [pc, #136]	@ (800bcc8 <rmw_init_options_init+0xbc>)
 800bc3e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800bcd8 <rmw_init_options_init+0xcc>
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	60a3      	str	r3, [r4, #8]
 800bc46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc48:	f104 0c20 	add.w	ip, r4, #32
 800bc4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc50:	466f      	mov	r7, sp
 800bc52:	682b      	ldr	r3, [r5, #0]
 800bc54:	f8cc 3000 	str.w	r3, [ip]
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800bc5e:	60e6      	str	r6, [r4, #12]
 800bc60:	f7ff fe26 	bl	800b8b0 <rmw_get_default_security_options>
 800bc64:	e897 0003 	ldmia.w	r7, {r0, r1}
 800bc68:	f104 0310 	add.w	r3, r4, #16
 800bc6c:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc70:	2203      	movs	r2, #3
 800bc72:	4816      	ldr	r0, [pc, #88]	@ (800bccc <rmw_init_options_init+0xc0>)
 800bc74:	4916      	ldr	r1, [pc, #88]	@ (800bcd0 <rmw_init_options_init+0xc4>)
 800bc76:	7626      	strb	r6, [r4, #24]
 800bc78:	f000 fe50 	bl	800c91c <rmw_uxrce_init_init_options_impl_memory>
 800bc7c:	4813      	ldr	r0, [pc, #76]	@ (800bccc <rmw_init_options_init+0xc0>)
 800bc7e:	f004 fd9f 	bl	80107c0 <get_memory>
 800bc82:	b1f0      	cbz	r0, 800bcc2 <rmw_init_options_init+0xb6>
 800bc84:	4a13      	ldr	r2, [pc, #76]	@ (800bcd4 <rmw_init_options_init+0xc8>)
 800bc86:	6883      	ldr	r3, [r0, #8]
 800bc88:	6851      	ldr	r1, [r2, #4]
 800bc8a:	7810      	ldrb	r0, [r2, #0]
 800bc8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc8e:	7418      	strb	r0, [r3, #16]
 800bc90:	6159      	str	r1, [r3, #20]
 800bc92:	68d1      	ldr	r1, [r2, #12]
 800bc94:	61d9      	str	r1, [r3, #28]
 800bc96:	6911      	ldr	r1, [r2, #16]
 800bc98:	6219      	str	r1, [r3, #32]
 800bc9a:	6951      	ldr	r1, [r2, #20]
 800bc9c:	6892      	ldr	r2, [r2, #8]
 800bc9e:	619a      	str	r2, [r3, #24]
 800bca0:	6259      	str	r1, [r3, #36]	@ 0x24
 800bca2:	f003 f9c1 	bl	800f028 <uxr_nanos>
 800bca6:	f005 fe53 	bl	8011950 <srand>
 800bcaa:	f005 fe7f 	bl	80119ac <rand>
 800bcae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcb0:	6298      	str	r0, [r3, #40]	@ 0x28
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d0f9      	beq.n	800bcaa <rmw_init_options_init+0x9e>
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	b003      	add	sp, #12
 800bcba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bcbe:	b004      	add	sp, #16
 800bcc0:	4770      	bx	lr
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	e7b1      	b.n	800bc2a <rmw_init_options_init+0x1e>
 800bcc6:	bf00      	nop
 800bcc8:	08013908 	.word	0x08013908
 800bccc:	2000db0c 	.word	0x2000db0c
 800bcd0:	200093a8 	.word	0x200093a8
 800bcd4:	20009164 	.word	0x20009164
 800bcd8:	080131b8 	.word	0x080131b8

0800bcdc <rmw_init_options_copy>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	b158      	cbz	r0, 800bcf8 <rmw_init_options_copy+0x1c>
 800bce0:	460d      	mov	r5, r1
 800bce2:	b149      	cbz	r1, 800bcf8 <rmw_init_options_copy+0x1c>
 800bce4:	4604      	mov	r4, r0
 800bce6:	6880      	ldr	r0, [r0, #8]
 800bce8:	b120      	cbz	r0, 800bcf4 <rmw_init_options_copy+0x18>
 800bcea:	4b1e      	ldr	r3, [pc, #120]	@ (800bd64 <rmw_init_options_copy+0x88>)
 800bcec:	6819      	ldr	r1, [r3, #0]
 800bcee:	f7f4 fa77 	bl	80001e0 <strcmp>
 800bcf2:	bb90      	cbnz	r0, 800bd5a <rmw_init_options_copy+0x7e>
 800bcf4:	68ab      	ldr	r3, [r5, #8]
 800bcf6:	b113      	cbz	r3, 800bcfe <rmw_init_options_copy+0x22>
 800bcf8:	250b      	movs	r5, #11
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	bd70      	pop	{r4, r5, r6, pc}
 800bcfe:	4623      	mov	r3, r4
 800bd00:	462a      	mov	r2, r5
 800bd02:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800bd06:	f8d3 c000 	ldr.w	ip, [r3]
 800bd0a:	6858      	ldr	r0, [r3, #4]
 800bd0c:	6899      	ldr	r1, [r3, #8]
 800bd0e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800bd12:	f8c2 e00c 	str.w	lr, [r2, #12]
 800bd16:	3310      	adds	r3, #16
 800bd18:	42b3      	cmp	r3, r6
 800bd1a:	f8c2 c000 	str.w	ip, [r2]
 800bd1e:	6050      	str	r0, [r2, #4]
 800bd20:	6091      	str	r1, [r2, #8]
 800bd22:	f102 0210 	add.w	r2, r2, #16
 800bd26:	d1ee      	bne.n	800bd06 <rmw_init_options_copy+0x2a>
 800bd28:	6819      	ldr	r1, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	480e      	ldr	r0, [pc, #56]	@ (800bd68 <rmw_init_options_copy+0x8c>)
 800bd2e:	6053      	str	r3, [r2, #4]
 800bd30:	6011      	str	r1, [r2, #0]
 800bd32:	f004 fd45 	bl	80107c0 <get_memory>
 800bd36:	b198      	cbz	r0, 800bd60 <rmw_init_options_copy+0x84>
 800bd38:	6883      	ldr	r3, [r0, #8]
 800bd3a:	636b      	str	r3, [r5, #52]	@ 0x34
 800bd3c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bd3e:	f102 0c10 	add.w	ip, r2, #16
 800bd42:	f103 0410 	add.w	r4, r3, #16
 800bd46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bd4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd4c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800bd50:	2500      	movs	r5, #0
 800bd52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd56:	4628      	mov	r0, r5
 800bd58:	bd70      	pop	{r4, r5, r6, pc}
 800bd5a:	250c      	movs	r5, #12
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	2501      	movs	r5, #1
 800bd62:	e7ca      	b.n	800bcfa <rmw_init_options_copy+0x1e>
 800bd64:	08013908 	.word	0x08013908
 800bd68:	2000db0c 	.word	0x2000db0c

0800bd6c <rmw_init_options_fini>:
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d03d      	beq.n	800bdec <rmw_init_options_fini+0x80>
 800bd70:	b510      	push	{r4, lr}
 800bd72:	4604      	mov	r4, r0
 800bd74:	b08e      	sub	sp, #56	@ 0x38
 800bd76:	3020      	adds	r0, #32
 800bd78:	f7fe f916 	bl	8009fa8 <rcutils_allocator_is_valid>
 800bd7c:	b360      	cbz	r0, 800bdd8 <rmw_init_options_fini+0x6c>
 800bd7e:	68a0      	ldr	r0, [r4, #8]
 800bd80:	b120      	cbz	r0, 800bd8c <rmw_init_options_fini+0x20>
 800bd82:	4b1c      	ldr	r3, [pc, #112]	@ (800bdf4 <rmw_init_options_fini+0x88>)
 800bd84:	6819      	ldr	r1, [r3, #0]
 800bd86:	f7f4 fa2b 	bl	80001e0 <strcmp>
 800bd8a:	bb68      	cbnz	r0, 800bde8 <rmw_init_options_fini+0x7c>
 800bd8c:	4b1a      	ldr	r3, [pc, #104]	@ (800bdf8 <rmw_init_options_fini+0x8c>)
 800bd8e:	6819      	ldr	r1, [r3, #0]
 800bd90:	b331      	cbz	r1, 800bde0 <rmw_init_options_fini+0x74>
 800bd92:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bd94:	e001      	b.n	800bd9a <rmw_init_options_fini+0x2e>
 800bd96:	6849      	ldr	r1, [r1, #4]
 800bd98:	b311      	cbz	r1, 800bde0 <rmw_init_options_fini+0x74>
 800bd9a:	688b      	ldr	r3, [r1, #8]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d1fa      	bne.n	800bd96 <rmw_init_options_fini+0x2a>
 800bda0:	4815      	ldr	r0, [pc, #84]	@ (800bdf8 <rmw_init_options_fini+0x8c>)
 800bda2:	f004 fd1d 	bl	80107e0 <put_memory>
 800bda6:	4668      	mov	r0, sp
 800bda8:	f7ff fd72 	bl	800b890 <rmw_get_zero_initialized_init_options>
 800bdac:	46ee      	mov	lr, sp
 800bdae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdb2:	46a4      	mov	ip, r4
 800bdb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdc8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bdcc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	b00e      	add	sp, #56	@ 0x38
 800bdd6:	bd10      	pop	{r4, pc}
 800bdd8:	230b      	movs	r3, #11
 800bdda:	4618      	mov	r0, r3
 800bddc:	b00e      	add	sp, #56	@ 0x38
 800bdde:	bd10      	pop	{r4, pc}
 800bde0:	2301      	movs	r3, #1
 800bde2:	4618      	mov	r0, r3
 800bde4:	b00e      	add	sp, #56	@ 0x38
 800bde6:	bd10      	pop	{r4, pc}
 800bde8:	230c      	movs	r3, #12
 800bdea:	e7f2      	b.n	800bdd2 <rmw_init_options_fini+0x66>
 800bdec:	230b      	movs	r3, #11
 800bdee:	4618      	mov	r0, r3
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	08013908 	.word	0x08013908
 800bdf8:	2000db0c 	.word	0x2000db0c

0800bdfc <rmw_init>:
 800bdfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be00:	b083      	sub	sp, #12
 800be02:	2800      	cmp	r0, #0
 800be04:	f000 80d3 	beq.w	800bfae <rmw_init+0x1b2>
 800be08:	460e      	mov	r6, r1
 800be0a:	2900      	cmp	r1, #0
 800be0c:	f000 80cf 	beq.w	800bfae <rmw_init+0x1b2>
 800be10:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800be12:	4605      	mov	r5, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 80ca 	beq.w	800bfae <rmw_init+0x1b2>
 800be1a:	4b78      	ldr	r3, [pc, #480]	@ (800bffc <rmw_init+0x200>)
 800be1c:	6880      	ldr	r0, [r0, #8]
 800be1e:	681f      	ldr	r7, [r3, #0]
 800be20:	b128      	cbz	r0, 800be2e <rmw_init+0x32>
 800be22:	4639      	mov	r1, r7
 800be24:	f7f4 f9dc 	bl	80001e0 <strcmp>
 800be28:	2800      	cmp	r0, #0
 800be2a:	f040 80ca 	bne.w	800bfc2 <rmw_init+0x1c6>
 800be2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be32:	4c73      	ldr	r4, [pc, #460]	@ (800c000 <rmw_init+0x204>)
 800be34:	4973      	ldr	r1, [pc, #460]	@ (800c004 <rmw_init+0x208>)
 800be36:	4874      	ldr	r0, [pc, #464]	@ (800c008 <rmw_init+0x20c>)
 800be38:	60b7      	str	r7, [r6, #8]
 800be3a:	e9c6 2300 	strd	r2, r3, [r6]
 800be3e:	68eb      	ldr	r3, [r5, #12]
 800be40:	64b3      	str	r3, [r6, #72]	@ 0x48
 800be42:	2201      	movs	r2, #1
 800be44:	f000 fd0a 	bl	800c85c <rmw_uxrce_init_session_memory>
 800be48:	4620      	mov	r0, r4
 800be4a:	4970      	ldr	r1, [pc, #448]	@ (800c00c <rmw_init+0x210>)
 800be4c:	2204      	movs	r2, #4
 800be4e:	f000 fd45 	bl	800c8dc <rmw_uxrce_init_static_input_buffer_memory>
 800be52:	f04f 0800 	mov.w	r8, #0
 800be56:	486c      	ldr	r0, [pc, #432]	@ (800c008 <rmw_init+0x20c>)
 800be58:	f884 800d 	strb.w	r8, [r4, #13]
 800be5c:	f004 fcb0 	bl	80107c0 <get_memory>
 800be60:	2800      	cmp	r0, #0
 800be62:	f000 80a9 	beq.w	800bfb8 <rmw_init+0x1bc>
 800be66:	6884      	ldr	r4, [r0, #8]
 800be68:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800be6a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800be6c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800be70:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800be74:	9101      	str	r1, [sp, #4]
 800be76:	6a00      	ldr	r0, [r0, #32]
 800be78:	9000      	str	r0, [sp, #0]
 800be7a:	f104 0910 	add.w	r9, r4, #16
 800be7e:	4661      	mov	r1, ip
 800be80:	4648      	mov	r0, r9
 800be82:	f001 f8e3 	bl	800d04c <uxr_set_custom_transport_callbacks>
 800be86:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800be8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800be8e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800be92:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800be96:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800be9a:	495d      	ldr	r1, [pc, #372]	@ (800c010 <rmw_init+0x214>)
 800be9c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800bea0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800bea4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800bea8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800beac:	4859      	ldr	r0, [pc, #356]	@ (800c014 <rmw_init+0x218>)
 800beae:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800beb2:	2201      	movs	r2, #1
 800beb4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800beb6:	f000 fcb1 	bl	800c81c <rmw_uxrce_init_node_memory>
 800beba:	4957      	ldr	r1, [pc, #348]	@ (800c018 <rmw_init+0x21c>)
 800bebc:	4857      	ldr	r0, [pc, #348]	@ (800c01c <rmw_init+0x220>)
 800bebe:	2205      	movs	r2, #5
 800bec0:	f000 fc8c 	bl	800c7dc <rmw_uxrce_init_subscription_memory>
 800bec4:	4956      	ldr	r1, [pc, #344]	@ (800c020 <rmw_init+0x224>)
 800bec6:	4857      	ldr	r0, [pc, #348]	@ (800c024 <rmw_init+0x228>)
 800bec8:	220a      	movs	r2, #10
 800beca:	f000 fc67 	bl	800c79c <rmw_uxrce_init_publisher_memory>
 800bece:	4956      	ldr	r1, [pc, #344]	@ (800c028 <rmw_init+0x22c>)
 800bed0:	4856      	ldr	r0, [pc, #344]	@ (800c02c <rmw_init+0x230>)
 800bed2:	2201      	movs	r2, #1
 800bed4:	f000 fc22 	bl	800c71c <rmw_uxrce_init_service_memory>
 800bed8:	4955      	ldr	r1, [pc, #340]	@ (800c030 <rmw_init+0x234>)
 800beda:	4856      	ldr	r0, [pc, #344]	@ (800c034 <rmw_init+0x238>)
 800bedc:	2201      	movs	r2, #1
 800bede:	f000 fc3d 	bl	800c75c <rmw_uxrce_init_client_memory>
 800bee2:	4955      	ldr	r1, [pc, #340]	@ (800c038 <rmw_init+0x23c>)
 800bee4:	4855      	ldr	r0, [pc, #340]	@ (800c03c <rmw_init+0x240>)
 800bee6:	220f      	movs	r2, #15
 800bee8:	f000 fcd8 	bl	800c89c <rmw_uxrce_init_topic_memory>
 800beec:	4954      	ldr	r1, [pc, #336]	@ (800c040 <rmw_init+0x244>)
 800beee:	4855      	ldr	r0, [pc, #340]	@ (800c044 <rmw_init+0x248>)
 800bef0:	2203      	movs	r2, #3
 800bef2:	f000 fd13 	bl	800c91c <rmw_uxrce_init_init_options_impl_memory>
 800bef6:	4954      	ldr	r1, [pc, #336]	@ (800c048 <rmw_init+0x24c>)
 800bef8:	4854      	ldr	r0, [pc, #336]	@ (800c04c <rmw_init+0x250>)
 800befa:	2204      	movs	r2, #4
 800befc:	f000 fd2e 	bl	800c95c <rmw_uxrce_init_wait_set_memory>
 800bf00:	4953      	ldr	r1, [pc, #332]	@ (800c050 <rmw_init+0x254>)
 800bf02:	4854      	ldr	r0, [pc, #336]	@ (800c054 <rmw_init+0x258>)
 800bf04:	2204      	movs	r2, #4
 800bf06:	f000 fd49 	bl	800c99c <rmw_uxrce_init_guard_condition_memory>
 800bf0a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800bf0c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800bf0e:	4642      	mov	r2, r8
 800bf10:	f000 fbd8 	bl	800c6c4 <rmw_uxrce_transport_init>
 800bf14:	4607      	mov	r7, r0
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d158      	bne.n	800bfcc <rmw_init+0x1d0>
 800bf1a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800bf1c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800bf20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf22:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800bf26:	4628      	mov	r0, r5
 800bf28:	f001 fac6 	bl	800d4b8 <uxr_init_session>
 800bf2c:	494a      	ldr	r1, [pc, #296]	@ (800c058 <rmw_init+0x25c>)
 800bf2e:	4622      	mov	r2, r4
 800bf30:	4628      	mov	r0, r5
 800bf32:	f001 fae5 	bl	800d500 <uxr_set_topic_callback>
 800bf36:	4949      	ldr	r1, [pc, #292]	@ (800c05c <rmw_init+0x260>)
 800bf38:	463a      	mov	r2, r7
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f001 fadc 	bl	800d4f8 <uxr_set_status_callback>
 800bf40:	4947      	ldr	r1, [pc, #284]	@ (800c060 <rmw_init+0x264>)
 800bf42:	463a      	mov	r2, r7
 800bf44:	4628      	mov	r0, r5
 800bf46:	f001 fadf 	bl	800d508 <uxr_set_request_callback>
 800bf4a:	4946      	ldr	r1, [pc, #280]	@ (800c064 <rmw_init+0x268>)
 800bf4c:	463a      	mov	r2, r7
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f001 fade 	bl	800d510 <uxr_set_reply_callback>
 800bf54:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bf58:	2304      	movs	r3, #4
 800bf5a:	0092      	lsls	r2, r2, #2
 800bf5c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800bf60:	4628      	mov	r0, r5
 800bf62:	f001 fb13 	bl	800d58c <uxr_create_input_reliable_stream>
 800bf66:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bf6a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800bf6e:	0092      	lsls	r2, r2, #2
 800bf70:	2304      	movs	r3, #4
 800bf72:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800bf76:	4628      	mov	r0, r5
 800bf78:	f001 fae0 	bl	800d53c <uxr_create_output_reliable_stream>
 800bf7c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800bf80:	4628      	mov	r0, r5
 800bf82:	f001 fafd 	bl	800d580 <uxr_create_input_best_effort_stream>
 800bf86:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800bf8a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800bf8e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bf92:	3114      	adds	r1, #20
 800bf94:	4628      	mov	r0, r5
 800bf96:	f001 fabf 	bl	800d518 <uxr_create_output_best_effort_stream>
 800bf9a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f001 ffea 	bl	800df78 <uxr_create_session>
 800bfa4:	b1f8      	cbz	r0, 800bfe6 <rmw_init+0x1ea>
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	b003      	add	sp, #12
 800bfaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfae:	270b      	movs	r7, #11
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	b003      	add	sp, #12
 800bfb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfb8:	2701      	movs	r7, #1
 800bfba:	4638      	mov	r0, r7
 800bfbc:	b003      	add	sp, #12
 800bfbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfc2:	270c      	movs	r7, #12
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	b003      	add	sp, #12
 800bfc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfcc:	4648      	mov	r0, r9
 800bfce:	f001 f87f 	bl	800d0d0 <uxr_close_custom_transport>
 800bfd2:	480d      	ldr	r0, [pc, #52]	@ (800c008 <rmw_init+0x20c>)
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	f004 fc03 	bl	80107e0 <put_memory>
 800bfda:	4638      	mov	r0, r7
 800bfdc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800bfe0:	b003      	add	sp, #12
 800bfe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfe6:	4648      	mov	r0, r9
 800bfe8:	f001 f872 	bl	800d0d0 <uxr_close_custom_transport>
 800bfec:	4806      	ldr	r0, [pc, #24]	@ (800c008 <rmw_init+0x20c>)
 800bfee:	4621      	mov	r1, r4
 800bff0:	f004 fbf6 	bl	80107e0 <put_memory>
 800bff4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800bff6:	2701      	movs	r7, #1
 800bff8:	e7d5      	b.n	800bfa6 <rmw_init+0x1aa>
 800bffa:	bf00      	nop
 800bffc:	08013908 	.word	0x08013908
 800c000:	2000db5c 	.word	0x2000db5c
 800c004:	20009e08 	.word	0x20009e08
 800c008:	2000db4c 	.word	0x2000db4c
 800c00c:	2000b3b0 	.word	0x2000b3b0
 800c010:	2000942c 	.word	0x2000942c
 800c014:	2000db1c 	.word	0x2000db1c
 800c018:	2000d4b0 	.word	0x2000d4b0
 800c01c:	2000db6c 	.word	0x2000db6c
 800c020:	200094d0 	.word	0x200094d0
 800c024:	2000db2c 	.word	0x2000db2c
 800c028:	20009d40 	.word	0x20009d40
 800c02c:	2000db3c 	.word	0x2000db3c
 800c030:	20009260 	.word	0x20009260
 800c034:	20009250 	.word	0x20009250
 800c038:	2000d8e8 	.word	0x2000d8e8
 800c03c:	2000db7c 	.word	0x2000db7c
 800c040:	200093a8 	.word	0x200093a8
 800c044:	2000db0c 	.word	0x2000db0c
 800c048:	2000da8c 	.word	0x2000da8c
 800c04c:	2000db8c 	.word	0x2000db8c
 800c050:	20009328 	.word	0x20009328
 800c054:	2000dafc 	.word	0x2000dafc
 800c058:	080105f9 	.word	0x080105f9
 800c05c:	080105f1 	.word	0x080105f1
 800c060:	08010691 	.word	0x08010691
 800c064:	0801072d 	.word	0x0801072d

0800c068 <rmw_context_fini>:
 800c068:	4b17      	ldr	r3, [pc, #92]	@ (800c0c8 <rmw_context_fini+0x60>)
 800c06a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c06c:	b570      	push	{r4, r5, r6, lr}
 800c06e:	681c      	ldr	r4, [r3, #0]
 800c070:	4605      	mov	r5, r0
 800c072:	b334      	cbz	r4, 800c0c2 <rmw_context_fini+0x5a>
 800c074:	2600      	movs	r6, #0
 800c076:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800c07a:	6902      	ldr	r2, [r0, #16]
 800c07c:	428a      	cmp	r2, r1
 800c07e:	d018      	beq.n	800c0b2 <rmw_context_fini+0x4a>
 800c080:	2c00      	cmp	r4, #0
 800c082:	d1f8      	bne.n	800c076 <rmw_context_fini+0xe>
 800c084:	b189      	cbz	r1, 800c0aa <rmw_context_fini+0x42>
 800c086:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800c08a:	789b      	ldrb	r3, [r3, #2]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800c092:	bf14      	ite	ne
 800c094:	210a      	movne	r1, #10
 800c096:	2100      	moveq	r1, #0
 800c098:	f001 ff46 	bl	800df28 <uxr_delete_session_retries>
 800c09c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c09e:	f000 fc9d 	bl	800c9dc <rmw_uxrce_fini_session_memory>
 800c0a2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c0a4:	3010      	adds	r0, #16
 800c0a6:	f001 f813 	bl	800d0d0 <uxr_close_custom_transport>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	bd70      	pop	{r4, r5, r6, pc}
 800c0b2:	3018      	adds	r0, #24
 800c0b4:	f000 f89c 	bl	800c1f0 <rmw_destroy_node>
 800c0b8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	2c00      	cmp	r4, #0
 800c0be:	d1da      	bne.n	800c076 <rmw_context_fini+0xe>
 800c0c0:	e7e0      	b.n	800c084 <rmw_context_fini+0x1c>
 800c0c2:	4626      	mov	r6, r4
 800c0c4:	e7de      	b.n	800c084 <rmw_context_fini+0x1c>
 800c0c6:	bf00      	nop
 800c0c8:	2000db1c 	.word	0x2000db1c

0800c0cc <create_node>:
 800c0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0d0:	b083      	sub	sp, #12
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d05f      	beq.n	800c196 <create_node+0xca>
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	4835      	ldr	r0, [pc, #212]	@ (800c1b0 <create_node+0xe4>)
 800c0da:	460f      	mov	r7, r1
 800c0dc:	4690      	mov	r8, r2
 800c0de:	461d      	mov	r5, r3
 800c0e0:	f004 fb6e 	bl	80107c0 <get_memory>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d056      	beq.n	800c196 <create_node+0xca>
 800c0e8:	6884      	ldr	r4, [r0, #8]
 800c0ea:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800c0ec:	6123      	str	r3, [r4, #16]
 800c0ee:	f7ff fd87 	bl	800bc00 <rmw_get_implementation_identifier>
 800c0f2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800c0f6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800c0fa:	f8c4 9020 	str.w	r9, [r4, #32]
 800c0fe:	4630      	mov	r0, r6
 800c100:	f7f4 f878 	bl	80001f4 <strlen>
 800c104:	1c42      	adds	r2, r0, #1
 800c106:	2a3c      	cmp	r2, #60	@ 0x3c
 800c108:	f104 0518 	add.w	r5, r4, #24
 800c10c:	d840      	bhi.n	800c190 <create_node+0xc4>
 800c10e:	4648      	mov	r0, r9
 800c110:	4631      	mov	r1, r6
 800c112:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800c116:	f005 ff9c 	bl	8012052 <memcpy>
 800c11a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800c11e:	4638      	mov	r0, r7
 800c120:	f7f4 f868 	bl	80001f4 <strlen>
 800c124:	1c42      	adds	r2, r0, #1
 800c126:	2a3c      	cmp	r2, #60	@ 0x3c
 800c128:	d832      	bhi.n	800c190 <create_node+0xc4>
 800c12a:	4639      	mov	r1, r7
 800c12c:	4648      	mov	r0, r9
 800c12e:	f005 ff90 	bl	8012052 <memcpy>
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c138:	2101      	movs	r1, #1
 800c13a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800c13e:	1842      	adds	r2, r0, r1
 800c140:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800c144:	f000 ffc8 	bl	800d0d8 <uxr_object_id>
 800c148:	6160      	str	r0, [r4, #20]
 800c14a:	783b      	ldrb	r3, [r7, #0]
 800c14c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c14e:	d127      	bne.n	800c1a0 <create_node+0xd4>
 800c150:	787b      	ldrb	r3, [r7, #1]
 800c152:	bb2b      	cbnz	r3, 800c1a0 <create_node+0xd4>
 800c154:	4a17      	ldr	r2, [pc, #92]	@ (800c1b4 <create_node+0xe8>)
 800c156:	4818      	ldr	r0, [pc, #96]	@ (800c1b8 <create_node+0xec>)
 800c158:	4633      	mov	r3, r6
 800c15a:	213c      	movs	r1, #60	@ 0x3c
 800c15c:	f005 fde6 	bl	8011d2c <sniprintf>
 800c160:	6920      	ldr	r0, [r4, #16]
 800c162:	4915      	ldr	r1, [pc, #84]	@ (800c1b8 <create_node+0xec>)
 800c164:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800c168:	9100      	str	r1, [sp, #0]
 800c16a:	2106      	movs	r1, #6
 800c16c:	9101      	str	r1, [sp, #4]
 800c16e:	6811      	ldr	r1, [r2, #0]
 800c170:	6962      	ldr	r2, [r4, #20]
 800c172:	fa1f f388 	uxth.w	r3, r8
 800c176:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c17a:	f000 fddb 	bl	800cd34 <uxr_buffer_create_participant_bin>
 800c17e:	4602      	mov	r2, r0
 800c180:	6920      	ldr	r0, [r4, #16]
 800c182:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c186:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c18a:	f000 fcf9 	bl	800cb80 <run_xrce_session>
 800c18e:	b918      	cbnz	r0, 800c198 <create_node+0xcc>
 800c190:	4628      	mov	r0, r5
 800c192:	f000 fc29 	bl	800c9e8 <rmw_uxrce_fini_node_memory>
 800c196:	2500      	movs	r5, #0
 800c198:	4628      	mov	r0, r5
 800c19a:	b003      	add	sp, #12
 800c19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1a0:	4a06      	ldr	r2, [pc, #24]	@ (800c1bc <create_node+0xf0>)
 800c1a2:	9600      	str	r6, [sp, #0]
 800c1a4:	463b      	mov	r3, r7
 800c1a6:	213c      	movs	r1, #60	@ 0x3c
 800c1a8:	4803      	ldr	r0, [pc, #12]	@ (800c1b8 <create_node+0xec>)
 800c1aa:	f005 fdbf 	bl	8011d2c <sniprintf>
 800c1ae:	e7d7      	b.n	800c160 <create_node+0x94>
 800c1b0:	2000db1c 	.word	0x2000db1c
 800c1b4:	080136a4 	.word	0x080136a4
 800c1b8:	20009214 	.word	0x20009214
 800c1bc:	080131c8 	.word	0x080131c8

0800c1c0 <rmw_create_node>:
 800c1c0:	b199      	cbz	r1, 800c1ea <rmw_create_node+0x2a>
 800c1c2:	780b      	ldrb	r3, [r1, #0]
 800c1c4:	468c      	mov	ip, r1
 800c1c6:	b183      	cbz	r3, 800c1ea <rmw_create_node+0x2a>
 800c1c8:	b410      	push	{r4}
 800c1ca:	4614      	mov	r4, r2
 800c1cc:	b14a      	cbz	r2, 800c1e2 <rmw_create_node+0x22>
 800c1ce:	7813      	ldrb	r3, [r2, #0]
 800c1d0:	b13b      	cbz	r3, 800c1e2 <rmw_create_node+0x22>
 800c1d2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	4660      	mov	r0, ip
 800c1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1de:	f7ff bf75 	b.w	800c0cc <create_node>
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop

0800c1f0 <rmw_destroy_node>:
 800c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f2:	b328      	cbz	r0, 800c240 <rmw_destroy_node+0x50>
 800c1f4:	4607      	mov	r7, r0
 800c1f6:	6800      	ldr	r0, [r0, #0]
 800c1f8:	b120      	cbz	r0, 800c204 <rmw_destroy_node+0x14>
 800c1fa:	4b36      	ldr	r3, [pc, #216]	@ (800c2d4 <rmw_destroy_node+0xe4>)
 800c1fc:	6819      	ldr	r1, [r3, #0]
 800c1fe:	f7f3 ffef 	bl	80001e0 <strcmp>
 800c202:	b9e8      	cbnz	r0, 800c240 <rmw_destroy_node+0x50>
 800c204:	687d      	ldr	r5, [r7, #4]
 800c206:	b1dd      	cbz	r5, 800c240 <rmw_destroy_node+0x50>
 800c208:	4b33      	ldr	r3, [pc, #204]	@ (800c2d8 <rmw_destroy_node+0xe8>)
 800c20a:	681c      	ldr	r4, [r3, #0]
 800c20c:	2c00      	cmp	r4, #0
 800c20e:	d05f      	beq.n	800c2d0 <rmw_destroy_node+0xe0>
 800c210:	2600      	movs	r6, #0
 800c212:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c216:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800c21a:	429d      	cmp	r5, r3
 800c21c:	d013      	beq.n	800c246 <rmw_destroy_node+0x56>
 800c21e:	2c00      	cmp	r4, #0
 800c220:	d1f7      	bne.n	800c212 <rmw_destroy_node+0x22>
 800c222:	4b2e      	ldr	r3, [pc, #184]	@ (800c2dc <rmw_destroy_node+0xec>)
 800c224:	681c      	ldr	r4, [r3, #0]
 800c226:	b1c4      	cbz	r4, 800c25a <rmw_destroy_node+0x6a>
 800c228:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c22c:	6a0b      	ldr	r3, [r1, #32]
 800c22e:	429d      	cmp	r5, r3
 800c230:	d1f9      	bne.n	800c226 <rmw_destroy_node+0x36>
 800c232:	317c      	adds	r1, #124	@ 0x7c
 800c234:	4638      	mov	r0, r7
 800c236:	f000 f9e5 	bl	800c604 <rmw_destroy_subscription>
 800c23a:	2801      	cmp	r0, #1
 800c23c:	4606      	mov	r6, r0
 800c23e:	d1f2      	bne.n	800c226 <rmw_destroy_node+0x36>
 800c240:	2601      	movs	r6, #1
 800c242:	4630      	mov	r0, r6
 800c244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c246:	3184      	adds	r1, #132	@ 0x84
 800c248:	4638      	mov	r0, r7
 800c24a:	f000 f853 	bl	800c2f4 <rmw_destroy_publisher>
 800c24e:	2801      	cmp	r0, #1
 800c250:	4606      	mov	r6, r0
 800c252:	d0f5      	beq.n	800c240 <rmw_destroy_node+0x50>
 800c254:	2c00      	cmp	r4, #0
 800c256:	d1dc      	bne.n	800c212 <rmw_destroy_node+0x22>
 800c258:	e7e3      	b.n	800c222 <rmw_destroy_node+0x32>
 800c25a:	4b21      	ldr	r3, [pc, #132]	@ (800c2e0 <rmw_destroy_node+0xf0>)
 800c25c:	681c      	ldr	r4, [r3, #0]
 800c25e:	b16c      	cbz	r4, 800c27c <rmw_destroy_node+0x8c>
 800c260:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c264:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c266:	429d      	cmp	r5, r3
 800c268:	d1f9      	bne.n	800c25e <rmw_destroy_node+0x6e>
 800c26a:	317c      	adds	r1, #124	@ 0x7c
 800c26c:	4638      	mov	r0, r7
 800c26e:	f000 f893 	bl	800c398 <rmw_destroy_service>
 800c272:	2801      	cmp	r0, #1
 800c274:	4606      	mov	r6, r0
 800c276:	d0e3      	beq.n	800c240 <rmw_destroy_node+0x50>
 800c278:	2c00      	cmp	r4, #0
 800c27a:	d1f1      	bne.n	800c260 <rmw_destroy_node+0x70>
 800c27c:	4b19      	ldr	r3, [pc, #100]	@ (800c2e4 <rmw_destroy_node+0xf4>)
 800c27e:	681c      	ldr	r4, [r3, #0]
 800c280:	b16c      	cbz	r4, 800c29e <rmw_destroy_node+0xae>
 800c282:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c286:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c288:	429d      	cmp	r5, r3
 800c28a:	d1f9      	bne.n	800c280 <rmw_destroy_node+0x90>
 800c28c:	317c      	adds	r1, #124	@ 0x7c
 800c28e:	4638      	mov	r0, r7
 800c290:	f7ff fc72 	bl	800bb78 <rmw_destroy_client>
 800c294:	2801      	cmp	r0, #1
 800c296:	4606      	mov	r6, r0
 800c298:	d0d2      	beq.n	800c240 <rmw_destroy_node+0x50>
 800c29a:	2c00      	cmp	r4, #0
 800c29c:	d1f1      	bne.n	800c282 <rmw_destroy_node+0x92>
 800c29e:	6928      	ldr	r0, [r5, #16]
 800c2a0:	696a      	ldr	r2, [r5, #20]
 800c2a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c2a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c2aa:	6819      	ldr	r1, [r3, #0]
 800c2ac:	f000 fcf6 	bl	800cc9c <uxr_buffer_delete_entity>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	6928      	ldr	r0, [r5, #16]
 800c2b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c2b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c2bc:	f000 fc60 	bl	800cb80 <run_xrce_session>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	bf08      	it	eq
 800c2c4:	2602      	moveq	r6, #2
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f000 fb8e 	bl	800c9e8 <rmw_uxrce_fini_node_memory>
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d0:	4626      	mov	r6, r4
 800c2d2:	e7a6      	b.n	800c222 <rmw_destroy_node+0x32>
 800c2d4:	08013908 	.word	0x08013908
 800c2d8:	2000db2c 	.word	0x2000db2c
 800c2dc:	2000db6c 	.word	0x2000db6c
 800c2e0:	2000db3c 	.word	0x2000db3c
 800c2e4:	20009250 	.word	0x20009250

0800c2e8 <rmw_node_get_graph_guard_condition>:
 800c2e8:	6843      	ldr	r3, [r0, #4]
 800c2ea:	6918      	ldr	r0, [r3, #16]
 800c2ec:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop

0800c2f4 <rmw_destroy_publisher>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	b128      	cbz	r0, 800c304 <rmw_destroy_publisher+0x10>
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	6800      	ldr	r0, [r0, #0]
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	f000 fcbf 	bl	800cc80 <is_uxrce_rmw_identifier_valid>
 800c302:	b910      	cbnz	r0, 800c30a <rmw_destroy_publisher+0x16>
 800c304:	2401      	movs	r4, #1
 800c306:	4620      	mov	r0, r4
 800c308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c30a:	6863      	ldr	r3, [r4, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d0f9      	beq.n	800c304 <rmw_destroy_publisher+0x10>
 800c310:	2d00      	cmp	r5, #0
 800c312:	d0f7      	beq.n	800c304 <rmw_destroy_publisher+0x10>
 800c314:	6828      	ldr	r0, [r5, #0]
 800c316:	f000 fcb3 	bl	800cc80 <is_uxrce_rmw_identifier_valid>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d0f2      	beq.n	800c304 <rmw_destroy_publisher+0x10>
 800c31e:	686c      	ldr	r4, [r5, #4]
 800c320:	2c00      	cmp	r4, #0
 800c322:	d0ef      	beq.n	800c304 <rmw_destroy_publisher+0x10>
 800c324:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c326:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c32a:	f004 fae5 	bl	80108f8 <destroy_topic>
 800c32e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c332:	6962      	ldr	r2, [r4, #20]
 800c334:	6918      	ldr	r0, [r3, #16]
 800c336:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c33a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c33e:	6819      	ldr	r1, [r3, #0]
 800c340:	f000 fcac 	bl	800cc9c <uxr_buffer_delete_entity>
 800c344:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c348:	6922      	ldr	r2, [r4, #16]
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c350:	4604      	mov	r4, r0
 800c352:	6809      	ldr	r1, [r1, #0]
 800c354:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c358:	f000 fca0 	bl	800cc9c <uxr_buffer_delete_entity>
 800c35c:	693e      	ldr	r6, [r7, #16]
 800c35e:	4622      	mov	r2, r4
 800c360:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c364:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c368:	4604      	mov	r4, r0
 800c36a:	4630      	mov	r0, r6
 800c36c:	f000 fc08 	bl	800cb80 <run_xrce_session>
 800c370:	693e      	ldr	r6, [r7, #16]
 800c372:	4622      	mov	r2, r4
 800c374:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c378:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c37c:	4604      	mov	r4, r0
 800c37e:	4630      	mov	r0, r6
 800c380:	f000 fbfe 	bl	800cb80 <run_xrce_session>
 800c384:	b12c      	cbz	r4, 800c392 <rmw_destroy_publisher+0x9e>
 800c386:	b120      	cbz	r0, 800c392 <rmw_destroy_publisher+0x9e>
 800c388:	2400      	movs	r4, #0
 800c38a:	4628      	mov	r0, r5
 800c38c:	f000 fb44 	bl	800ca18 <rmw_uxrce_fini_publisher_memory>
 800c390:	e7b9      	b.n	800c306 <rmw_destroy_publisher+0x12>
 800c392:	2402      	movs	r4, #2
 800c394:	e7f9      	b.n	800c38a <rmw_destroy_publisher+0x96>
 800c396:	bf00      	nop

0800c398 <rmw_destroy_service>:
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	b128      	cbz	r0, 800c3a8 <rmw_destroy_service+0x10>
 800c39c:	4604      	mov	r4, r0
 800c39e:	6800      	ldr	r0, [r0, #0]
 800c3a0:	460d      	mov	r5, r1
 800c3a2:	f000 fc6d 	bl	800cc80 <is_uxrce_rmw_identifier_valid>
 800c3a6:	b910      	cbnz	r0, 800c3ae <rmw_destroy_service+0x16>
 800c3a8:	2401      	movs	r4, #1
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	bd70      	pop	{r4, r5, r6, pc}
 800c3ae:	6863      	ldr	r3, [r4, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d0f9      	beq.n	800c3a8 <rmw_destroy_service+0x10>
 800c3b4:	2d00      	cmp	r5, #0
 800c3b6:	d0f7      	beq.n	800c3a8 <rmw_destroy_service+0x10>
 800c3b8:	6828      	ldr	r0, [r5, #0]
 800c3ba:	f000 fc61 	bl	800cc80 <is_uxrce_rmw_identifier_valid>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d0f2      	beq.n	800c3a8 <rmw_destroy_service+0x10>
 800c3c2:	686e      	ldr	r6, [r5, #4]
 800c3c4:	2e00      	cmp	r6, #0
 800c3c6:	d0ef      	beq.n	800c3a8 <rmw_destroy_service+0x10>
 800c3c8:	6864      	ldr	r4, [r4, #4]
 800c3ca:	6932      	ldr	r2, [r6, #16]
 800c3cc:	6920      	ldr	r0, [r4, #16]
 800c3ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c3d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c3d6:	6819      	ldr	r1, [r3, #0]
 800c3d8:	f000 fee8 	bl	800d1ac <uxr_buffer_cancel_data>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	6920      	ldr	r0, [r4, #16]
 800c3e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c3e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c3e8:	f000 fbca 	bl	800cb80 <run_xrce_session>
 800c3ec:	6920      	ldr	r0, [r4, #16]
 800c3ee:	6932      	ldr	r2, [r6, #16]
 800c3f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c3f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c3f8:	6819      	ldr	r1, [r3, #0]
 800c3fa:	f000 fc4f 	bl	800cc9c <uxr_buffer_delete_entity>
 800c3fe:	4602      	mov	r2, r0
 800c400:	6920      	ldr	r0, [r4, #16]
 800c402:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c406:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c40a:	f000 fbb9 	bl	800cb80 <run_xrce_session>
 800c40e:	2800      	cmp	r0, #0
 800c410:	4628      	mov	r0, r5
 800c412:	bf14      	ite	ne
 800c414:	2400      	movne	r4, #0
 800c416:	2402      	moveq	r4, #2
 800c418:	f000 fb2a 	bl	800ca70 <rmw_uxrce_fini_service_memory>
 800c41c:	e7c5      	b.n	800c3aa <rmw_destroy_service+0x12>
 800c41e:	bf00      	nop

0800c420 <rmw_create_subscription>:
 800c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	b08d      	sub	sp, #52	@ 0x34
 800c426:	2800      	cmp	r0, #0
 800c428:	f000 80d1 	beq.w	800c5ce <rmw_create_subscription+0x1ae>
 800c42c:	460e      	mov	r6, r1
 800c42e:	2900      	cmp	r1, #0
 800c430:	f000 80cd 	beq.w	800c5ce <rmw_create_subscription+0x1ae>
 800c434:	4604      	mov	r4, r0
 800c436:	6800      	ldr	r0, [r0, #0]
 800c438:	4615      	mov	r5, r2
 800c43a:	4698      	mov	r8, r3
 800c43c:	f000 fc20 	bl	800cc80 <is_uxrce_rmw_identifier_valid>
 800c440:	2800      	cmp	r0, #0
 800c442:	f000 80c4 	beq.w	800c5ce <rmw_create_subscription+0x1ae>
 800c446:	2d00      	cmp	r5, #0
 800c448:	f000 80c1 	beq.w	800c5ce <rmw_create_subscription+0x1ae>
 800c44c:	782b      	ldrb	r3, [r5, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f000 80bd 	beq.w	800c5ce <rmw_create_subscription+0x1ae>
 800c454:	f1b8 0f00 	cmp.w	r8, #0
 800c458:	f000 80b9 	beq.w	800c5ce <rmw_create_subscription+0x1ae>
 800c45c:	485e      	ldr	r0, [pc, #376]	@ (800c5d8 <rmw_create_subscription+0x1b8>)
 800c45e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c462:	f004 f9ad 	bl	80107c0 <get_memory>
 800c466:	4604      	mov	r4, r0
 800c468:	2800      	cmp	r0, #0
 800c46a:	f000 80b1 	beq.w	800c5d0 <rmw_create_subscription+0x1b0>
 800c46e:	6887      	ldr	r7, [r0, #8]
 800c470:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800c474:	f7ff fbc4 	bl	800bc00 <rmw_get_implementation_identifier>
 800c478:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800c47c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c47e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800c482:	4628      	mov	r0, r5
 800c484:	f7f3 feb6 	bl	80001f4 <strlen>
 800c488:	3001      	adds	r0, #1
 800c48a:	283c      	cmp	r0, #60	@ 0x3c
 800c48c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800c490:	f200 8096 	bhi.w	800c5c0 <rmw_create_subscription+0x1a0>
 800c494:	4a51      	ldr	r2, [pc, #324]	@ (800c5dc <rmw_create_subscription+0x1bc>)
 800c496:	462b      	mov	r3, r5
 800c498:	213c      	movs	r1, #60	@ 0x3c
 800c49a:	4650      	mov	r0, sl
 800c49c:	f005 fc46 	bl	8011d2c <sniprintf>
 800c4a0:	4641      	mov	r1, r8
 800c4a2:	f8c7 9020 	str.w	r9, [r7, #32]
 800c4a6:	2250      	movs	r2, #80	@ 0x50
 800c4a8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c4ac:	f005 fdd1 	bl	8012052 <memcpy>
 800c4b0:	494b      	ldr	r1, [pc, #300]	@ (800c5e0 <rmw_create_subscription+0x1c0>)
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f7fd fe1e 	bl	800a0f4 <get_message_typesupport_handle>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f000 8081 	beq.w	800c5c0 <rmw_create_subscription+0x1a0>
 800c4be:	6842      	ldr	r2, [r0, #4]
 800c4c0:	61ba      	str	r2, [r7, #24]
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	d07c      	beq.n	800c5c0 <rmw_create_subscription+0x1a0>
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	4643      	mov	r3, r8
 800c4ca:	4648      	mov	r0, r9
 800c4cc:	f004 f9c4 	bl	8010858 <create_topic>
 800c4d0:	61f8      	str	r0, [r7, #28]
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d078      	beq.n	800c5c8 <rmw_create_subscription+0x1a8>
 800c4d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4de:	2104      	movs	r1, #4
 800c4e0:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800c4e4:	1c42      	adds	r2, r0, #1
 800c4e6:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800c4ea:	f000 fdf5 	bl	800d0d8 <uxr_object_id>
 800c4ee:	6138      	str	r0, [r7, #16]
 800c4f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c4f4:	2506      	movs	r5, #6
 800c4f6:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800c4fa:	9500      	str	r5, [sp, #0]
 800c4fc:	6819      	ldr	r1, [r3, #0]
 800c4fe:	693a      	ldr	r2, [r7, #16]
 800c500:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c504:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c508:	f000 fc7c 	bl	800ce04 <uxr_buffer_create_subscriber_bin>
 800c50c:	4602      	mov	r2, r0
 800c50e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c512:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c516:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c51a:	f000 fb31 	bl	800cb80 <run_xrce_session>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d04e      	beq.n	800c5c0 <rmw_create_subscription+0x1a0>
 800c522:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c52a:	4629      	mov	r1, r5
 800c52c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800c530:	1c42      	adds	r2, r0, #1
 800c532:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800c536:	f000 fdcf 	bl	800d0d8 <uxr_object_id>
 800c53a:	ae08      	add	r6, sp, #32
 800c53c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	6178      	str	r0, [r7, #20]
 800c544:	4641      	mov	r1, r8
 800c546:	4630      	mov	r0, r6
 800c548:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800c54c:	9305      	str	r3, [sp, #20]
 800c54e:	f000 fb33 	bl	800cbb8 <convert_qos_profile>
 800c552:	9503      	str	r5, [sp, #12]
 800c554:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c558:	9b05      	ldr	r3, [sp, #20]
 800c55a:	9001      	str	r0, [sp, #4]
 800c55c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c568:	f8db 1000 	ldr.w	r1, [fp]
 800c56c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800c570:	f000 fc78 	bl	800ce64 <uxr_buffer_create_datareader_bin>
 800c574:	4602      	mov	r2, r0
 800c576:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c57a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c57e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c582:	f000 fafd 	bl	800cb80 <run_xrce_session>
 800c586:	b1d8      	cbz	r0, 800c5c0 <rmw_create_subscription+0x1a0>
 800c588:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c58c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c590:	2b02      	cmp	r3, #2
 800c592:	bf0c      	ite	eq
 800c594:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800c598:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800c59c:	9307      	str	r3, [sp, #28]
 800c59e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800c5a8:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	9b07      	ldr	r3, [sp, #28]
 800c5b4:	6809      	ldr	r1, [r1, #0]
 800c5b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c5ba:	f000 fdbd 	bl	800d138 <uxr_buffer_request_data>
 800c5be:	e007      	b.n	800c5d0 <rmw_create_subscription+0x1b0>
 800c5c0:	69f8      	ldr	r0, [r7, #28]
 800c5c2:	b108      	cbz	r0, 800c5c8 <rmw_create_subscription+0x1a8>
 800c5c4:	f000 fa80 	bl	800cac8 <rmw_uxrce_fini_topic_memory>
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f000 fa3b 	bl	800ca44 <rmw_uxrce_fini_subscription_memory>
 800c5ce:	2400      	movs	r4, #0
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	b00d      	add	sp, #52	@ 0x34
 800c5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d8:	2000db6c 	.word	0x2000db6c
 800c5dc:	080136a4 	.word	0x080136a4
 800c5e0:	08012fc0 	.word	0x08012fc0

0800c5e4 <rmw_subscription_get_actual_qos>:
 800c5e4:	b150      	cbz	r0, 800c5fc <rmw_subscription_get_actual_qos+0x18>
 800c5e6:	b508      	push	{r3, lr}
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	b149      	cbz	r1, 800c600 <rmw_subscription_get_actual_qos+0x1c>
 800c5ec:	6841      	ldr	r1, [r0, #4]
 800c5ee:	2250      	movs	r2, #80	@ 0x50
 800c5f0:	3128      	adds	r1, #40	@ 0x28
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f005 fd2d 	bl	8012052 <memcpy>
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	bd08      	pop	{r3, pc}
 800c5fc:	200b      	movs	r0, #11
 800c5fe:	4770      	bx	lr
 800c600:	200b      	movs	r0, #11
 800c602:	bd08      	pop	{r3, pc}

0800c604 <rmw_destroy_subscription>:
 800c604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c606:	b128      	cbz	r0, 800c614 <rmw_destroy_subscription+0x10>
 800c608:	4604      	mov	r4, r0
 800c60a:	6800      	ldr	r0, [r0, #0]
 800c60c:	460d      	mov	r5, r1
 800c60e:	f000 fb37 	bl	800cc80 <is_uxrce_rmw_identifier_valid>
 800c612:	b910      	cbnz	r0, 800c61a <rmw_destroy_subscription+0x16>
 800c614:	2401      	movs	r4, #1
 800c616:	4620      	mov	r0, r4
 800c618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c61a:	6863      	ldr	r3, [r4, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d0f9      	beq.n	800c614 <rmw_destroy_subscription+0x10>
 800c620:	2d00      	cmp	r5, #0
 800c622:	d0f7      	beq.n	800c614 <rmw_destroy_subscription+0x10>
 800c624:	6828      	ldr	r0, [r5, #0]
 800c626:	f000 fb2b 	bl	800cc80 <is_uxrce_rmw_identifier_valid>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d0f2      	beq.n	800c614 <rmw_destroy_subscription+0x10>
 800c62e:	686c      	ldr	r4, [r5, #4]
 800c630:	2c00      	cmp	r4, #0
 800c632:	d0ef      	beq.n	800c614 <rmw_destroy_subscription+0x10>
 800c634:	6a26      	ldr	r6, [r4, #32]
 800c636:	6962      	ldr	r2, [r4, #20]
 800c638:	6930      	ldr	r0, [r6, #16]
 800c63a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c63e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c642:	6819      	ldr	r1, [r3, #0]
 800c644:	f000 fdb2 	bl	800d1ac <uxr_buffer_cancel_data>
 800c648:	4602      	mov	r2, r0
 800c64a:	6930      	ldr	r0, [r6, #16]
 800c64c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c650:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c654:	f000 fa94 	bl	800cb80 <run_xrce_session>
 800c658:	69e0      	ldr	r0, [r4, #28]
 800c65a:	f004 f94d 	bl	80108f8 <destroy_topic>
 800c65e:	6a23      	ldr	r3, [r4, #32]
 800c660:	6962      	ldr	r2, [r4, #20]
 800c662:	6918      	ldr	r0, [r3, #16]
 800c664:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c668:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c66c:	6819      	ldr	r1, [r3, #0]
 800c66e:	f000 fb15 	bl	800cc9c <uxr_buffer_delete_entity>
 800c672:	6a23      	ldr	r3, [r4, #32]
 800c674:	6922      	ldr	r2, [r4, #16]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c67c:	4604      	mov	r4, r0
 800c67e:	6809      	ldr	r1, [r1, #0]
 800c680:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c684:	f000 fb0a 	bl	800cc9c <uxr_buffer_delete_entity>
 800c688:	6937      	ldr	r7, [r6, #16]
 800c68a:	4622      	mov	r2, r4
 800c68c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c690:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c694:	4604      	mov	r4, r0
 800c696:	4638      	mov	r0, r7
 800c698:	f000 fa72 	bl	800cb80 <run_xrce_session>
 800c69c:	6936      	ldr	r6, [r6, #16]
 800c69e:	4622      	mov	r2, r4
 800c6a0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c6a4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f000 fa68 	bl	800cb80 <run_xrce_session>
 800c6b0:	b12c      	cbz	r4, 800c6be <rmw_destroy_subscription+0xba>
 800c6b2:	b120      	cbz	r0, 800c6be <rmw_destroy_subscription+0xba>
 800c6b4:	2400      	movs	r4, #0
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f000 f9c4 	bl	800ca44 <rmw_uxrce_fini_subscription_memory>
 800c6bc:	e7ab      	b.n	800c616 <rmw_destroy_subscription+0x12>
 800c6be:	2402      	movs	r4, #2
 800c6c0:	e7f9      	b.n	800c6b6 <rmw_destroy_subscription+0xb2>
 800c6c2:	bf00      	nop

0800c6c4 <rmw_uxrce_transport_init>:
 800c6c4:	b508      	push	{r3, lr}
 800c6c6:	b108      	cbz	r0, 800c6cc <rmw_uxrce_transport_init+0x8>
 800c6c8:	f100 0210 	add.w	r2, r0, #16
 800c6cc:	b139      	cbz	r1, 800c6de <rmw_uxrce_transport_init+0x1a>
 800c6ce:	6949      	ldr	r1, [r1, #20]
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	f000 fcc9 	bl	800d068 <uxr_init_custom_transport>
 800c6d6:	f080 0001 	eor.w	r0, r0, #1
 800c6da:	b2c0      	uxtb	r0, r0
 800c6dc:	bd08      	pop	{r3, pc}
 800c6de:	4b04      	ldr	r3, [pc, #16]	@ (800c6f0 <rmw_uxrce_transport_init+0x2c>)
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	6859      	ldr	r1, [r3, #4]
 800c6e4:	f000 fcc0 	bl	800d068 <uxr_init_custom_transport>
 800c6e8:	f080 0001 	eor.w	r0, r0, #1
 800c6ec:	b2c0      	uxtb	r0, r0
 800c6ee:	bd08      	pop	{r3, pc}
 800c6f0:	20009164 	.word	0x20009164

0800c6f4 <rmw_destroy_wait_set>:
 800c6f4:	b508      	push	{r3, lr}
 800c6f6:	4b08      	ldr	r3, [pc, #32]	@ (800c718 <rmw_destroy_wait_set+0x24>)
 800c6f8:	6819      	ldr	r1, [r3, #0]
 800c6fa:	b911      	cbnz	r1, 800c702 <rmw_destroy_wait_set+0xe>
 800c6fc:	e00a      	b.n	800c714 <rmw_destroy_wait_set+0x20>
 800c6fe:	6849      	ldr	r1, [r1, #4]
 800c700:	b141      	cbz	r1, 800c714 <rmw_destroy_wait_set+0x20>
 800c702:	688b      	ldr	r3, [r1, #8]
 800c704:	3310      	adds	r3, #16
 800c706:	4298      	cmp	r0, r3
 800c708:	d1f9      	bne.n	800c6fe <rmw_destroy_wait_set+0xa>
 800c70a:	4803      	ldr	r0, [pc, #12]	@ (800c718 <rmw_destroy_wait_set+0x24>)
 800c70c:	f004 f868 	bl	80107e0 <put_memory>
 800c710:	2000      	movs	r0, #0
 800c712:	bd08      	pop	{r3, pc}
 800c714:	2001      	movs	r0, #1
 800c716:	bd08      	pop	{r3, pc}
 800c718:	2000db8c 	.word	0x2000db8c

0800c71c <rmw_uxrce_init_service_memory>:
 800c71c:	b1e2      	cbz	r2, 800c758 <rmw_uxrce_init_service_memory+0x3c>
 800c71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c722:	7b05      	ldrb	r5, [r0, #12]
 800c724:	4606      	mov	r6, r0
 800c726:	b9ad      	cbnz	r5, 800c754 <rmw_uxrce_init_service_memory+0x38>
 800c728:	23c8      	movs	r3, #200	@ 0xc8
 800c72a:	e9c0 5500 	strd	r5, r5, [r0]
 800c72e:	6083      	str	r3, [r0, #8]
 800c730:	f240 1301 	movw	r3, #257	@ 0x101
 800c734:	4617      	mov	r7, r2
 800c736:	8183      	strh	r3, [r0, #12]
 800c738:	460c      	mov	r4, r1
 800c73a:	46a8      	mov	r8, r5
 800c73c:	4621      	mov	r1, r4
 800c73e:	4630      	mov	r0, r6
 800c740:	3501      	adds	r5, #1
 800c742:	f004 f84d 	bl	80107e0 <put_memory>
 800c746:	42af      	cmp	r7, r5
 800c748:	60a4      	str	r4, [r4, #8]
 800c74a:	f884 800c 	strb.w	r8, [r4, #12]
 800c74e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c752:	d1f3      	bne.n	800c73c <rmw_uxrce_init_service_memory+0x20>
 800c754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop

0800c75c <rmw_uxrce_init_client_memory>:
 800c75c:	b1e2      	cbz	r2, 800c798 <rmw_uxrce_init_client_memory+0x3c>
 800c75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c762:	7b05      	ldrb	r5, [r0, #12]
 800c764:	4606      	mov	r6, r0
 800c766:	b9ad      	cbnz	r5, 800c794 <rmw_uxrce_init_client_memory+0x38>
 800c768:	23c8      	movs	r3, #200	@ 0xc8
 800c76a:	e9c0 5500 	strd	r5, r5, [r0]
 800c76e:	6083      	str	r3, [r0, #8]
 800c770:	f240 1301 	movw	r3, #257	@ 0x101
 800c774:	4617      	mov	r7, r2
 800c776:	8183      	strh	r3, [r0, #12]
 800c778:	460c      	mov	r4, r1
 800c77a:	46a8      	mov	r8, r5
 800c77c:	4621      	mov	r1, r4
 800c77e:	4630      	mov	r0, r6
 800c780:	3501      	adds	r5, #1
 800c782:	f004 f82d 	bl	80107e0 <put_memory>
 800c786:	42af      	cmp	r7, r5
 800c788:	60a4      	str	r4, [r4, #8]
 800c78a:	f884 800c 	strb.w	r8, [r4, #12]
 800c78e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c792:	d1f3      	bne.n	800c77c <rmw_uxrce_init_client_memory+0x20>
 800c794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop

0800c79c <rmw_uxrce_init_publisher_memory>:
 800c79c:	b1e2      	cbz	r2, 800c7d8 <rmw_uxrce_init_publisher_memory+0x3c>
 800c79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	7b05      	ldrb	r5, [r0, #12]
 800c7a4:	4606      	mov	r6, r0
 800c7a6:	b9ad      	cbnz	r5, 800c7d4 <rmw_uxrce_init_publisher_memory+0x38>
 800c7a8:	23d8      	movs	r3, #216	@ 0xd8
 800c7aa:	e9c0 5500 	strd	r5, r5, [r0]
 800c7ae:	6083      	str	r3, [r0, #8]
 800c7b0:	f240 1301 	movw	r3, #257	@ 0x101
 800c7b4:	4617      	mov	r7, r2
 800c7b6:	8183      	strh	r3, [r0, #12]
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	46a8      	mov	r8, r5
 800c7bc:	4621      	mov	r1, r4
 800c7be:	4630      	mov	r0, r6
 800c7c0:	3501      	adds	r5, #1
 800c7c2:	f004 f80d 	bl	80107e0 <put_memory>
 800c7c6:	42af      	cmp	r7, r5
 800c7c8:	60a4      	str	r4, [r4, #8]
 800c7ca:	f884 800c 	strb.w	r8, [r4, #12]
 800c7ce:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c7d2:	d1f3      	bne.n	800c7bc <rmw_uxrce_init_publisher_memory+0x20>
 800c7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop

0800c7dc <rmw_uxrce_init_subscription_memory>:
 800c7dc:	b1e2      	cbz	r2, 800c818 <rmw_uxrce_init_subscription_memory+0x3c>
 800c7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e2:	7b05      	ldrb	r5, [r0, #12]
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	b9ad      	cbnz	r5, 800c814 <rmw_uxrce_init_subscription_memory+0x38>
 800c7e8:	23d8      	movs	r3, #216	@ 0xd8
 800c7ea:	e9c0 5500 	strd	r5, r5, [r0]
 800c7ee:	6083      	str	r3, [r0, #8]
 800c7f0:	f240 1301 	movw	r3, #257	@ 0x101
 800c7f4:	4617      	mov	r7, r2
 800c7f6:	8183      	strh	r3, [r0, #12]
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	46a8      	mov	r8, r5
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	4630      	mov	r0, r6
 800c800:	3501      	adds	r5, #1
 800c802:	f003 ffed 	bl	80107e0 <put_memory>
 800c806:	42af      	cmp	r7, r5
 800c808:	60a4      	str	r4, [r4, #8]
 800c80a:	f884 800c 	strb.w	r8, [r4, #12]
 800c80e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c812:	d1f3      	bne.n	800c7fc <rmw_uxrce_init_subscription_memory+0x20>
 800c814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop

0800c81c <rmw_uxrce_init_node_memory>:
 800c81c:	b1e2      	cbz	r2, 800c858 <rmw_uxrce_init_node_memory+0x3c>
 800c81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c822:	7b05      	ldrb	r5, [r0, #12]
 800c824:	4606      	mov	r6, r0
 800c826:	b9ad      	cbnz	r5, 800c854 <rmw_uxrce_init_node_memory+0x38>
 800c828:	23a4      	movs	r3, #164	@ 0xa4
 800c82a:	e9c0 5500 	strd	r5, r5, [r0]
 800c82e:	6083      	str	r3, [r0, #8]
 800c830:	f240 1301 	movw	r3, #257	@ 0x101
 800c834:	4617      	mov	r7, r2
 800c836:	8183      	strh	r3, [r0, #12]
 800c838:	460c      	mov	r4, r1
 800c83a:	46a8      	mov	r8, r5
 800c83c:	4621      	mov	r1, r4
 800c83e:	4630      	mov	r0, r6
 800c840:	3501      	adds	r5, #1
 800c842:	f003 ffcd 	bl	80107e0 <put_memory>
 800c846:	42af      	cmp	r7, r5
 800c848:	60a4      	str	r4, [r4, #8]
 800c84a:	f884 800c 	strb.w	r8, [r4, #12]
 800c84e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c852:	d1f3      	bne.n	800c83c <rmw_uxrce_init_node_memory+0x20>
 800c854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop

0800c85c <rmw_uxrce_init_session_memory>:
 800c85c:	b1ea      	cbz	r2, 800c89a <rmw_uxrce_init_session_memory+0x3e>
 800c85e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c862:	7b05      	ldrb	r5, [r0, #12]
 800c864:	4606      	mov	r6, r0
 800c866:	b9b5      	cbnz	r5, 800c896 <rmw_uxrce_init_session_memory+0x3a>
 800c868:	e9c0 5500 	strd	r5, r5, [r0]
 800c86c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c870:	f240 1301 	movw	r3, #257	@ 0x101
 800c874:	4617      	mov	r7, r2
 800c876:	f8c0 8008 	str.w	r8, [r0, #8]
 800c87a:	460c      	mov	r4, r1
 800c87c:	8183      	strh	r3, [r0, #12]
 800c87e:	46a9      	mov	r9, r5
 800c880:	4621      	mov	r1, r4
 800c882:	4630      	mov	r0, r6
 800c884:	3501      	adds	r5, #1
 800c886:	f003 ffab 	bl	80107e0 <put_memory>
 800c88a:	42af      	cmp	r7, r5
 800c88c:	60a4      	str	r4, [r4, #8]
 800c88e:	f884 900c 	strb.w	r9, [r4, #12]
 800c892:	4444      	add	r4, r8
 800c894:	d1f4      	bne.n	800c880 <rmw_uxrce_init_session_memory+0x24>
 800c896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c89a:	4770      	bx	lr

0800c89c <rmw_uxrce_init_topic_memory>:
 800c89c:	b1e2      	cbz	r2, 800c8d8 <rmw_uxrce_init_topic_memory+0x3c>
 800c89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a2:	7b05      	ldrb	r5, [r0, #12]
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	b9ad      	cbnz	r5, 800c8d4 <rmw_uxrce_init_topic_memory+0x38>
 800c8a8:	231c      	movs	r3, #28
 800c8aa:	e9c0 5500 	strd	r5, r5, [r0]
 800c8ae:	6083      	str	r3, [r0, #8]
 800c8b0:	f240 1301 	movw	r3, #257	@ 0x101
 800c8b4:	4617      	mov	r7, r2
 800c8b6:	8183      	strh	r3, [r0, #12]
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	46a8      	mov	r8, r5
 800c8bc:	4621      	mov	r1, r4
 800c8be:	4630      	mov	r0, r6
 800c8c0:	3501      	adds	r5, #1
 800c8c2:	f003 ff8d 	bl	80107e0 <put_memory>
 800c8c6:	42af      	cmp	r7, r5
 800c8c8:	60a4      	str	r4, [r4, #8]
 800c8ca:	f884 800c 	strb.w	r8, [r4, #12]
 800c8ce:	f104 041c 	add.w	r4, r4, #28
 800c8d2:	d1f3      	bne.n	800c8bc <rmw_uxrce_init_topic_memory+0x20>
 800c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop

0800c8dc <rmw_uxrce_init_static_input_buffer_memory>:
 800c8dc:	b1ea      	cbz	r2, 800c91a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e2:	7b05      	ldrb	r5, [r0, #12]
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	b9b5      	cbnz	r5, 800c916 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c8e8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c8ec:	e9c0 5500 	strd	r5, r5, [r0]
 800c8f0:	6083      	str	r3, [r0, #8]
 800c8f2:	f240 1301 	movw	r3, #257	@ 0x101
 800c8f6:	4617      	mov	r7, r2
 800c8f8:	8183      	strh	r3, [r0, #12]
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	46a8      	mov	r8, r5
 800c8fe:	4621      	mov	r1, r4
 800c900:	4630      	mov	r0, r6
 800c902:	3501      	adds	r5, #1
 800c904:	f003 ff6c 	bl	80107e0 <put_memory>
 800c908:	42af      	cmp	r7, r5
 800c90a:	60a4      	str	r4, [r4, #8]
 800c90c:	f884 800c 	strb.w	r8, [r4, #12]
 800c910:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c914:	d1f3      	bne.n	800c8fe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91a:	4770      	bx	lr

0800c91c <rmw_uxrce_init_init_options_impl_memory>:
 800c91c:	b1e2      	cbz	r2, 800c958 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c922:	7b05      	ldrb	r5, [r0, #12]
 800c924:	4606      	mov	r6, r0
 800c926:	b9ad      	cbnz	r5, 800c954 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c928:	232c      	movs	r3, #44	@ 0x2c
 800c92a:	e9c0 5500 	strd	r5, r5, [r0]
 800c92e:	6083      	str	r3, [r0, #8]
 800c930:	f240 1301 	movw	r3, #257	@ 0x101
 800c934:	4617      	mov	r7, r2
 800c936:	8183      	strh	r3, [r0, #12]
 800c938:	460c      	mov	r4, r1
 800c93a:	46a8      	mov	r8, r5
 800c93c:	4621      	mov	r1, r4
 800c93e:	4630      	mov	r0, r6
 800c940:	3501      	adds	r5, #1
 800c942:	f003 ff4d 	bl	80107e0 <put_memory>
 800c946:	42af      	cmp	r7, r5
 800c948:	60a4      	str	r4, [r4, #8]
 800c94a:	f884 800c 	strb.w	r8, [r4, #12]
 800c94e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c952:	d1f3      	bne.n	800c93c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop

0800c95c <rmw_uxrce_init_wait_set_memory>:
 800c95c:	b1e2      	cbz	r2, 800c998 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c962:	7b05      	ldrb	r5, [r0, #12]
 800c964:	4606      	mov	r6, r0
 800c966:	b9ad      	cbnz	r5, 800c994 <rmw_uxrce_init_wait_set_memory+0x38>
 800c968:	231c      	movs	r3, #28
 800c96a:	e9c0 5500 	strd	r5, r5, [r0]
 800c96e:	6083      	str	r3, [r0, #8]
 800c970:	f240 1301 	movw	r3, #257	@ 0x101
 800c974:	4617      	mov	r7, r2
 800c976:	8183      	strh	r3, [r0, #12]
 800c978:	460c      	mov	r4, r1
 800c97a:	46a8      	mov	r8, r5
 800c97c:	4621      	mov	r1, r4
 800c97e:	4630      	mov	r0, r6
 800c980:	3501      	adds	r5, #1
 800c982:	f003 ff2d 	bl	80107e0 <put_memory>
 800c986:	42af      	cmp	r7, r5
 800c988:	60a4      	str	r4, [r4, #8]
 800c98a:	f884 800c 	strb.w	r8, [r4, #12]
 800c98e:	f104 041c 	add.w	r4, r4, #28
 800c992:	d1f3      	bne.n	800c97c <rmw_uxrce_init_wait_set_memory+0x20>
 800c994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop

0800c99c <rmw_uxrce_init_guard_condition_memory>:
 800c99c:	b1e2      	cbz	r2, 800c9d8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a2:	7b05      	ldrb	r5, [r0, #12]
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	b9ad      	cbnz	r5, 800c9d4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c9a8:	2320      	movs	r3, #32
 800c9aa:	e9c0 5500 	strd	r5, r5, [r0]
 800c9ae:	6083      	str	r3, [r0, #8]
 800c9b0:	f240 1301 	movw	r3, #257	@ 0x101
 800c9b4:	4617      	mov	r7, r2
 800c9b6:	8183      	strh	r3, [r0, #12]
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	46a8      	mov	r8, r5
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4630      	mov	r0, r6
 800c9c0:	3501      	adds	r5, #1
 800c9c2:	f003 ff0d 	bl	80107e0 <put_memory>
 800c9c6:	42af      	cmp	r7, r5
 800c9c8:	60a4      	str	r4, [r4, #8]
 800c9ca:	f884 800c 	strb.w	r8, [r4, #12]
 800c9ce:	f104 0420 	add.w	r4, r4, #32
 800c9d2:	d1f3      	bne.n	800c9bc <rmw_uxrce_init_guard_condition_memory+0x20>
 800c9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop

0800c9dc <rmw_uxrce_fini_session_memory>:
 800c9dc:	4601      	mov	r1, r0
 800c9de:	4801      	ldr	r0, [pc, #4]	@ (800c9e4 <rmw_uxrce_fini_session_memory+0x8>)
 800c9e0:	f003 befe 	b.w	80107e0 <put_memory>
 800c9e4:	2000db4c 	.word	0x2000db4c

0800c9e8 <rmw_uxrce_fini_node_memory>:
 800c9e8:	b538      	push	{r3, r4, r5, lr}
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	6800      	ldr	r0, [r0, #0]
 800c9ee:	b128      	cbz	r0, 800c9fc <rmw_uxrce_fini_node_memory+0x14>
 800c9f0:	4b07      	ldr	r3, [pc, #28]	@ (800ca10 <rmw_uxrce_fini_node_memory+0x28>)
 800c9f2:	6819      	ldr	r1, [r3, #0]
 800c9f4:	f7f3 fbf4 	bl	80001e0 <strcmp>
 800c9f8:	b940      	cbnz	r0, 800ca0c <rmw_uxrce_fini_node_memory+0x24>
 800c9fa:	6020      	str	r0, [r4, #0]
 800c9fc:	6861      	ldr	r1, [r4, #4]
 800c9fe:	b129      	cbz	r1, 800ca0c <rmw_uxrce_fini_node_memory+0x24>
 800ca00:	2500      	movs	r5, #0
 800ca02:	4804      	ldr	r0, [pc, #16]	@ (800ca14 <rmw_uxrce_fini_node_memory+0x2c>)
 800ca04:	610d      	str	r5, [r1, #16]
 800ca06:	f003 feeb 	bl	80107e0 <put_memory>
 800ca0a:	6065      	str	r5, [r4, #4]
 800ca0c:	bd38      	pop	{r3, r4, r5, pc}
 800ca0e:	bf00      	nop
 800ca10:	08013908 	.word	0x08013908
 800ca14:	2000db1c 	.word	0x2000db1c

0800ca18 <rmw_uxrce_fini_publisher_memory>:
 800ca18:	b510      	push	{r4, lr}
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	6800      	ldr	r0, [r0, #0]
 800ca1e:	b128      	cbz	r0, 800ca2c <rmw_uxrce_fini_publisher_memory+0x14>
 800ca20:	4b06      	ldr	r3, [pc, #24]	@ (800ca3c <rmw_uxrce_fini_publisher_memory+0x24>)
 800ca22:	6819      	ldr	r1, [r3, #0]
 800ca24:	f7f3 fbdc 	bl	80001e0 <strcmp>
 800ca28:	b938      	cbnz	r0, 800ca3a <rmw_uxrce_fini_publisher_memory+0x22>
 800ca2a:	6020      	str	r0, [r4, #0]
 800ca2c:	6861      	ldr	r1, [r4, #4]
 800ca2e:	b121      	cbz	r1, 800ca3a <rmw_uxrce_fini_publisher_memory+0x22>
 800ca30:	4803      	ldr	r0, [pc, #12]	@ (800ca40 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ca32:	f003 fed5 	bl	80107e0 <put_memory>
 800ca36:	2300      	movs	r3, #0
 800ca38:	6063      	str	r3, [r4, #4]
 800ca3a:	bd10      	pop	{r4, pc}
 800ca3c:	08013908 	.word	0x08013908
 800ca40:	2000db2c 	.word	0x2000db2c

0800ca44 <rmw_uxrce_fini_subscription_memory>:
 800ca44:	b510      	push	{r4, lr}
 800ca46:	4604      	mov	r4, r0
 800ca48:	6800      	ldr	r0, [r0, #0]
 800ca4a:	b128      	cbz	r0, 800ca58 <rmw_uxrce_fini_subscription_memory+0x14>
 800ca4c:	4b06      	ldr	r3, [pc, #24]	@ (800ca68 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ca4e:	6819      	ldr	r1, [r3, #0]
 800ca50:	f7f3 fbc6 	bl	80001e0 <strcmp>
 800ca54:	b938      	cbnz	r0, 800ca66 <rmw_uxrce_fini_subscription_memory+0x22>
 800ca56:	6020      	str	r0, [r4, #0]
 800ca58:	6861      	ldr	r1, [r4, #4]
 800ca5a:	b121      	cbz	r1, 800ca66 <rmw_uxrce_fini_subscription_memory+0x22>
 800ca5c:	4803      	ldr	r0, [pc, #12]	@ (800ca6c <rmw_uxrce_fini_subscription_memory+0x28>)
 800ca5e:	f003 febf 	bl	80107e0 <put_memory>
 800ca62:	2300      	movs	r3, #0
 800ca64:	6063      	str	r3, [r4, #4]
 800ca66:	bd10      	pop	{r4, pc}
 800ca68:	08013908 	.word	0x08013908
 800ca6c:	2000db6c 	.word	0x2000db6c

0800ca70 <rmw_uxrce_fini_service_memory>:
 800ca70:	b510      	push	{r4, lr}
 800ca72:	4604      	mov	r4, r0
 800ca74:	6800      	ldr	r0, [r0, #0]
 800ca76:	b128      	cbz	r0, 800ca84 <rmw_uxrce_fini_service_memory+0x14>
 800ca78:	4b06      	ldr	r3, [pc, #24]	@ (800ca94 <rmw_uxrce_fini_service_memory+0x24>)
 800ca7a:	6819      	ldr	r1, [r3, #0]
 800ca7c:	f7f3 fbb0 	bl	80001e0 <strcmp>
 800ca80:	b938      	cbnz	r0, 800ca92 <rmw_uxrce_fini_service_memory+0x22>
 800ca82:	6020      	str	r0, [r4, #0]
 800ca84:	6861      	ldr	r1, [r4, #4]
 800ca86:	b121      	cbz	r1, 800ca92 <rmw_uxrce_fini_service_memory+0x22>
 800ca88:	4803      	ldr	r0, [pc, #12]	@ (800ca98 <rmw_uxrce_fini_service_memory+0x28>)
 800ca8a:	f003 fea9 	bl	80107e0 <put_memory>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	6063      	str	r3, [r4, #4]
 800ca92:	bd10      	pop	{r4, pc}
 800ca94:	08013908 	.word	0x08013908
 800ca98:	2000db3c 	.word	0x2000db3c

0800ca9c <rmw_uxrce_fini_client_memory>:
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	4604      	mov	r4, r0
 800caa0:	6800      	ldr	r0, [r0, #0]
 800caa2:	b128      	cbz	r0, 800cab0 <rmw_uxrce_fini_client_memory+0x14>
 800caa4:	4b06      	ldr	r3, [pc, #24]	@ (800cac0 <rmw_uxrce_fini_client_memory+0x24>)
 800caa6:	6819      	ldr	r1, [r3, #0]
 800caa8:	f7f3 fb9a 	bl	80001e0 <strcmp>
 800caac:	b938      	cbnz	r0, 800cabe <rmw_uxrce_fini_client_memory+0x22>
 800caae:	6020      	str	r0, [r4, #0]
 800cab0:	6861      	ldr	r1, [r4, #4]
 800cab2:	b121      	cbz	r1, 800cabe <rmw_uxrce_fini_client_memory+0x22>
 800cab4:	4803      	ldr	r0, [pc, #12]	@ (800cac4 <rmw_uxrce_fini_client_memory+0x28>)
 800cab6:	f003 fe93 	bl	80107e0 <put_memory>
 800caba:	2300      	movs	r3, #0
 800cabc:	6063      	str	r3, [r4, #4]
 800cabe:	bd10      	pop	{r4, pc}
 800cac0:	08013908 	.word	0x08013908
 800cac4:	20009250 	.word	0x20009250

0800cac8 <rmw_uxrce_fini_topic_memory>:
 800cac8:	b510      	push	{r4, lr}
 800caca:	4604      	mov	r4, r0
 800cacc:	4621      	mov	r1, r4
 800cace:	4803      	ldr	r0, [pc, #12]	@ (800cadc <rmw_uxrce_fini_topic_memory+0x14>)
 800cad0:	f003 fe86 	bl	80107e0 <put_memory>
 800cad4:	2300      	movs	r3, #0
 800cad6:	61a3      	str	r3, [r4, #24]
 800cad8:	bd10      	pop	{r4, pc}
 800cada:	bf00      	nop
 800cadc:	2000db7c 	.word	0x2000db7c

0800cae0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800cae0:	b082      	sub	sp, #8
 800cae2:	b530      	push	{r4, r5, lr}
 800cae4:	4925      	ldr	r1, [pc, #148]	@ (800cb7c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cae6:	680d      	ldr	r5, [r1, #0]
 800cae8:	ac03      	add	r4, sp, #12
 800caea:	e884 000c 	stmia.w	r4, {r2, r3}
 800caee:	461c      	mov	r4, r3
 800caf0:	2d00      	cmp	r5, #0
 800caf2:	d041      	beq.n	800cb78 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800caf4:	462b      	mov	r3, r5
 800caf6:	2100      	movs	r1, #0
 800caf8:	689a      	ldr	r2, [r3, #8]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800cb00:	4290      	cmp	r0, r2
 800cb02:	bf08      	it	eq
 800cb04:	3101      	addeq	r1, #1
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f6      	bne.n	800caf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800cb0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d029      	beq.n	800cb66 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cb12:	d907      	bls.n	800cb24 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cb14:	2b03      	cmp	r3, #3
 800cb16:	d005      	beq.n	800cb24 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cb18:	2100      	movs	r1, #0
 800cb1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb1e:	4608      	mov	r0, r1
 800cb20:	b002      	add	sp, #8
 800cb22:	4770      	bx	lr
 800cb24:	b314      	cbz	r4, 800cb6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cb26:	428c      	cmp	r4, r1
 800cb28:	d820      	bhi.n	800cb6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cb2a:	2d00      	cmp	r5, #0
 800cb2c:	d0f4      	beq.n	800cb18 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cb2e:	2100      	movs	r1, #0
 800cb30:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800cb34:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800cb38:	e002      	b.n	800cb40 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800cb3a:	686d      	ldr	r5, [r5, #4]
 800cb3c:	2d00      	cmp	r5, #0
 800cb3e:	d0ec      	beq.n	800cb1a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800cb40:	68ab      	ldr	r3, [r5, #8]
 800cb42:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800cb46:	4290      	cmp	r0, r2
 800cb48:	d1f7      	bne.n	800cb3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cb4a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800cb4e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800cb52:	4562      	cmp	r2, ip
 800cb54:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800cb58:	eb73 0e04 	sbcs.w	lr, r3, r4
 800cb5c:	daed      	bge.n	800cb3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cb5e:	4694      	mov	ip, r2
 800cb60:	461c      	mov	r4, r3
 800cb62:	4629      	mov	r1, r5
 800cb64:	e7e9      	b.n	800cb3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cb66:	b10c      	cbz	r4, 800cb6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cb68:	428c      	cmp	r4, r1
 800cb6a:	d9d5      	bls.n	800cb18 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cb6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb70:	4802      	ldr	r0, [pc, #8]	@ (800cb7c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cb72:	b002      	add	sp, #8
 800cb74:	f003 be24 	b.w	80107c0 <get_memory>
 800cb78:	4629      	mov	r1, r5
 800cb7a:	e7c6      	b.n	800cb0a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800cb7c:	2000db5c 	.word	0x2000db5c

0800cb80 <run_xrce_session>:
 800cb80:	b510      	push	{r4, lr}
 800cb82:	788c      	ldrb	r4, [r1, #2]
 800cb84:	b086      	sub	sp, #24
 800cb86:	2c01      	cmp	r4, #1
 800cb88:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cb8c:	d00c      	beq.n	800cba8 <run_xrce_session+0x28>
 800cb8e:	4619      	mov	r1, r3
 800cb90:	2301      	movs	r3, #1
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	f10d 020e 	add.w	r2, sp, #14
 800cb98:	f10d 0317 	add.w	r3, sp, #23
 800cb9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cba0:	f001 f8a0 	bl	800dce4 <uxr_run_session_until_all_status>
 800cba4:	b006      	add	sp, #24
 800cba6:	bd10      	pop	{r4, pc}
 800cba8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbac:	f000 fd14 	bl	800d5d8 <uxr_flash_output_streams>
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	b006      	add	sp, #24
 800cbb4:	bd10      	pop	{r4, pc}
 800cbb6:	bf00      	nop

0800cbb8 <convert_qos_profile>:
 800cbb8:	7a4a      	ldrb	r2, [r1, #9]
 800cbba:	f891 c008 	ldrb.w	ip, [r1, #8]
 800cbbe:	2a02      	cmp	r2, #2
 800cbc0:	bf18      	it	ne
 800cbc2:	2200      	movne	r2, #0
 800cbc4:	7002      	strb	r2, [r0, #0]
 800cbc6:	780a      	ldrb	r2, [r1, #0]
 800cbc8:	8889      	ldrh	r1, [r1, #4]
 800cbca:	8081      	strh	r1, [r0, #4]
 800cbcc:	f1ac 0c02 	sub.w	ip, ip, #2
 800cbd0:	f1a2 0202 	sub.w	r2, r2, #2
 800cbd4:	fabc fc8c 	clz	ip, ip
 800cbd8:	fab2 f282 	clz	r2, r2
 800cbdc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800cbe0:	0952      	lsrs	r2, r2, #5
 800cbe2:	f880 c001 	strb.w	ip, [r0, #1]
 800cbe6:	7082      	strb	r2, [r0, #2]
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop

0800cbec <generate_type_name>:
 800cbec:	b530      	push	{r4, r5, lr}
 800cbee:	2300      	movs	r3, #0
 800cbf0:	700b      	strb	r3, [r1, #0]
 800cbf2:	6803      	ldr	r3, [r0, #0]
 800cbf4:	b087      	sub	sp, #28
 800cbf6:	4614      	mov	r4, r2
 800cbf8:	b1d3      	cbz	r3, 800cc30 <generate_type_name+0x44>
 800cbfa:	4a0f      	ldr	r2, [pc, #60]	@ (800cc38 <generate_type_name+0x4c>)
 800cbfc:	4615      	mov	r5, r2
 800cbfe:	9203      	str	r2, [sp, #12]
 800cc00:	9500      	str	r5, [sp, #0]
 800cc02:	6842      	ldr	r2, [r0, #4]
 800cc04:	480d      	ldr	r0, [pc, #52]	@ (800cc3c <generate_type_name+0x50>)
 800cc06:	9001      	str	r0, [sp, #4]
 800cc08:	4608      	mov	r0, r1
 800cc0a:	490d      	ldr	r1, [pc, #52]	@ (800cc40 <generate_type_name+0x54>)
 800cc0c:	9204      	str	r2, [sp, #16]
 800cc0e:	9105      	str	r1, [sp, #20]
 800cc10:	9102      	str	r1, [sp, #8]
 800cc12:	4a0c      	ldr	r2, [pc, #48]	@ (800cc44 <generate_type_name+0x58>)
 800cc14:	4621      	mov	r1, r4
 800cc16:	f005 f889 	bl	8011d2c <sniprintf>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	db05      	blt.n	800cc2a <generate_type_name+0x3e>
 800cc1e:	4284      	cmp	r4, r0
 800cc20:	bfd4      	ite	le
 800cc22:	2000      	movle	r0, #0
 800cc24:	2001      	movgt	r0, #1
 800cc26:	b007      	add	sp, #28
 800cc28:	bd30      	pop	{r4, r5, pc}
 800cc2a:	2000      	movs	r0, #0
 800cc2c:	b007      	add	sp, #28
 800cc2e:	bd30      	pop	{r4, r5, pc}
 800cc30:	4b05      	ldr	r3, [pc, #20]	@ (800cc48 <generate_type_name+0x5c>)
 800cc32:	4a01      	ldr	r2, [pc, #4]	@ (800cc38 <generate_type_name+0x4c>)
 800cc34:	461d      	mov	r5, r3
 800cc36:	e7e2      	b.n	800cbfe <generate_type_name+0x12>
 800cc38:	08013694 	.word	0x08013694
 800cc3c:	080136ac 	.word	0x080136ac
 800cc40:	080136a8 	.word	0x080136a8
 800cc44:	08013698 	.word	0x08013698
 800cc48:	08013484 	.word	0x08013484

0800cc4c <generate_topic_name>:
 800cc4c:	b510      	push	{r4, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	4614      	mov	r4, r2
 800cc52:	9000      	str	r0, [sp, #0]
 800cc54:	4b08      	ldr	r3, [pc, #32]	@ (800cc78 <generate_topic_name+0x2c>)
 800cc56:	4a09      	ldr	r2, [pc, #36]	@ (800cc7c <generate_topic_name+0x30>)
 800cc58:	4608      	mov	r0, r1
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	f005 f866 	bl	8011d2c <sniprintf>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	db05      	blt.n	800cc70 <generate_topic_name+0x24>
 800cc64:	4284      	cmp	r4, r0
 800cc66:	bfd4      	ite	le
 800cc68:	2000      	movle	r0, #0
 800cc6a:	2001      	movgt	r0, #1
 800cc6c:	b002      	add	sp, #8
 800cc6e:	bd10      	pop	{r4, pc}
 800cc70:	2000      	movs	r0, #0
 800cc72:	b002      	add	sp, #8
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	bf00      	nop
 800cc78:	080136b0 	.word	0x080136b0
 800cc7c:	080131c0 	.word	0x080131c0

0800cc80 <is_uxrce_rmw_identifier_valid>:
 800cc80:	b510      	push	{r4, lr}
 800cc82:	4604      	mov	r4, r0
 800cc84:	b140      	cbz	r0, 800cc98 <is_uxrce_rmw_identifier_valid+0x18>
 800cc86:	f7fe ffbb 	bl	800bc00 <rmw_get_implementation_identifier>
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f7f3 faa7 	bl	80001e0 <strcmp>
 800cc92:	fab0 f080 	clz	r0, r0
 800cc96:	0940      	lsrs	r0, r0, #5
 800cc98:	bd10      	pop	{r4, pc}
 800cc9a:	bf00      	nop

0800cc9c <uxr_buffer_delete_entity>:
 800cc9c:	b510      	push	{r4, lr}
 800cc9e:	2300      	movs	r3, #0
 800cca0:	b08e      	sub	sp, #56	@ 0x38
 800cca2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cca6:	2303      	movs	r3, #3
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	2204      	movs	r2, #4
 800ccac:	ab06      	add	r3, sp, #24
 800ccae:	4604      	mov	r4, r0
 800ccb0:	9103      	str	r1, [sp, #12]
 800ccb2:	f001 fa3f 	bl	800e134 <uxr_prepare_stream_to_write_submessage>
 800ccb6:	b918      	cbnz	r0, 800ccc0 <uxr_buffer_delete_entity+0x24>
 800ccb8:	4604      	mov	r4, r0
 800ccba:	4620      	mov	r0, r4
 800ccbc:	b00e      	add	sp, #56	@ 0x38
 800ccbe:	bd10      	pop	{r4, pc}
 800ccc0:	9902      	ldr	r1, [sp, #8]
 800ccc2:	aa05      	add	r2, sp, #20
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f001 fb6b 	bl	800e3a0 <uxr_init_base_object_request>
 800ccca:	a905      	add	r1, sp, #20
 800cccc:	4604      	mov	r4, r0
 800ccce:	a806      	add	r0, sp, #24
 800ccd0:	f002 ffd8 	bl	800fc84 <uxr_serialize_DELETE_Payload>
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	b00e      	add	sp, #56	@ 0x38
 800ccd8:	bd10      	pop	{r4, pc}
 800ccda:	bf00      	nop

0800ccdc <uxr_common_create_entity>:
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800cce2:	b08c      	sub	sp, #48	@ 0x30
 800cce4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cce8:	f1bc 0f01 	cmp.w	ip, #1
 800ccec:	bf0c      	ite	eq
 800ccee:	f003 0201 	andeq.w	r2, r3, #1
 800ccf2:	2200      	movne	r2, #0
 800ccf4:	330e      	adds	r3, #14
 800ccf6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800ccfa:	9101      	str	r1, [sp, #4]
 800ccfc:	441a      	add	r2, r3
 800ccfe:	2301      	movs	r3, #1
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	9903      	ldr	r1, [sp, #12]
 800cd04:	ab04      	add	r3, sp, #16
 800cd06:	b292      	uxth	r2, r2
 800cd08:	4604      	mov	r4, r0
 800cd0a:	f001 fa13 	bl	800e134 <uxr_prepare_stream_to_write_submessage>
 800cd0e:	b918      	cbnz	r0, 800cd18 <uxr_common_create_entity+0x3c>
 800cd10:	4604      	mov	r4, r0
 800cd12:	4620      	mov	r0, r4
 800cd14:	b00c      	add	sp, #48	@ 0x30
 800cd16:	bd10      	pop	{r4, pc}
 800cd18:	9902      	ldr	r1, [sp, #8]
 800cd1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f001 fb3f 	bl	800e3a0 <uxr_init_base_object_request>
 800cd22:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd24:	4604      	mov	r4, r0
 800cd26:	a804      	add	r0, sp, #16
 800cd28:	f002 ff08 	bl	800fb3c <uxr_serialize_CREATE_Payload>
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	b00c      	add	sp, #48	@ 0x30
 800cd30:	bd10      	pop	{r4, pc}
 800cd32:	bf00      	nop

0800cd34 <uxr_buffer_create_participant_bin>:
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800cd3a:	ac11      	add	r4, sp, #68	@ 0x44
 800cd3c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800cd40:	2303      	movs	r3, #3
 800cd42:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cd46:	7223      	strb	r3, [r4, #8]
 800cd48:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800cd4a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800cd4e:	2201      	movs	r2, #1
 800cd50:	2100      	movs	r1, #0
 800cd52:	4605      	mov	r5, r0
 800cd54:	7122      	strb	r2, [r4, #4]
 800cd56:	f88d 1014 	strb.w	r1, [sp, #20]
 800cd5a:	b1cb      	cbz	r3, 800cd90 <uxr_buffer_create_participant_bin+0x5c>
 800cd5c:	f88d 201c 	strb.w	r2, [sp, #28]
 800cd60:	9308      	str	r3, [sp, #32]
 800cd62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd66:	a915      	add	r1, sp, #84	@ 0x54
 800cd68:	a809      	add	r0, sp, #36	@ 0x24
 800cd6a:	f7fc fe99 	bl	8009aa0 <ucdr_init_buffer>
 800cd6e:	a905      	add	r1, sp, #20
 800cd70:	a809      	add	r0, sp, #36	@ 0x24
 800cd72:	f002 fba1 	bl	800f4b8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800cd76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd78:	9600      	str	r6, [sp, #0]
 800cd7a:	9401      	str	r4, [sp, #4]
 800cd7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cd80:	60e3      	str	r3, [r4, #12]
 800cd82:	4628      	mov	r0, r5
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	f7ff ffa9 	bl	800ccdc <uxr_common_create_entity>
 800cd8a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800cd8e:	bd70      	pop	{r4, r5, r6, pc}
 800cd90:	f88d 301c 	strb.w	r3, [sp, #28]
 800cd94:	e7e5      	b.n	800cd62 <uxr_buffer_create_participant_bin+0x2e>
 800cd96:	bf00      	nop

0800cd98 <uxr_buffer_create_topic_bin>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800cd9e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cda2:	9105      	str	r1, [sp, #20]
 800cda4:	4605      	mov	r5, r0
 800cda6:	a997      	add	r1, sp, #604	@ 0x25c
 800cda8:	4618      	mov	r0, r3
 800cdaa:	2302      	movs	r3, #2
 800cdac:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800cdb0:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800cdb4:	f000 f9b2 	bl	800d11c <uxr_object_id_to_raw>
 800cdb8:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800cdba:	9306      	str	r3, [sp, #24]
 800cdbc:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800cdbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdcc:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800cdd0:	a917      	add	r1, sp, #92	@ 0x5c
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	a80b      	add	r0, sp, #44	@ 0x2c
 800cdd6:	f88d 301c 	strb.w	r3, [sp, #28]
 800cdda:	f7fc fe61 	bl	8009aa0 <ucdr_init_buffer>
 800cdde:	a906      	add	r1, sp, #24
 800cde0:	a80b      	add	r0, sp, #44	@ 0x2c
 800cde2:	f002 fb8b 	bl	800f4fc <uxr_serialize_OBJK_Topic_Binary>
 800cde6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cde8:	9316      	str	r3, [sp, #88]	@ 0x58
 800cdea:	ac13      	add	r4, sp, #76	@ 0x4c
 800cdec:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cdf0:	9600      	str	r6, [sp, #0]
 800cdf2:	9401      	str	r4, [sp, #4]
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f7ff ff70 	bl	800ccdc <uxr_common_create_entity>
 800cdfc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	bf00      	nop

0800ce04 <uxr_buffer_create_subscriber_bin>:
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800ce0a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ce0e:	9105      	str	r1, [sp, #20]
 800ce10:	4605      	mov	r5, r0
 800ce12:	a992      	add	r1, sp, #584	@ 0x248
 800ce14:	4618      	mov	r0, r3
 800ce16:	2304      	movs	r3, #4
 800ce18:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800ce1c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800ce20:	f000 f97c 	bl	800d11c <uxr_object_id_to_raw>
 800ce24:	2300      	movs	r3, #0
 800ce26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce2a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800ce2e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800ce32:	a912      	add	r1, sp, #72	@ 0x48
 800ce34:	2303      	movs	r3, #3
 800ce36:	a806      	add	r0, sp, #24
 800ce38:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800ce3c:	f7fc fe30 	bl	8009aa0 <ucdr_init_buffer>
 800ce40:	a993      	add	r1, sp, #588	@ 0x24c
 800ce42:	a806      	add	r0, sp, #24
 800ce44:	f002 fc0e 	bl	800f664 <uxr_serialize_OBJK_Subscriber_Binary>
 800ce48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce4a:	9311      	str	r3, [sp, #68]	@ 0x44
 800ce4c:	ac0e      	add	r4, sp, #56	@ 0x38
 800ce4e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ce52:	9600      	str	r6, [sp, #0]
 800ce54:	9401      	str	r4, [sp, #4]
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	4628      	mov	r0, r5
 800ce5a:	f7ff ff3f 	bl	800ccdc <uxr_common_create_entity>
 800ce5e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800ce62:	bd70      	pop	{r4, r5, r6, pc}

0800ce64 <uxr_buffer_create_datareader_bin>:
 800ce64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce68:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ce6c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ce6e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ce72:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800ce76:	9105      	str	r1, [sp, #20]
 800ce78:	4606      	mov	r6, r0
 800ce7a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	2306      	movs	r3, #6
 800ce80:	7123      	strb	r3, [r4, #4]
 800ce82:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800ce86:	2703      	movs	r7, #3
 800ce88:	f000 f948 	bl	800d11c <uxr_object_id_to_raw>
 800ce8c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800ce8e:	7227      	strb	r7, [r4, #8]
 800ce90:	a90e      	add	r1, sp, #56	@ 0x38
 800ce92:	f000 f943 	bl	800d11c <uxr_object_id_to_raw>
 800ce96:	2300      	movs	r3, #0
 800ce98:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800ce9c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800cea0:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800cea4:	3d00      	subs	r5, #0
 800cea6:	bf18      	it	ne
 800cea8:	2501      	movne	r5, #1
 800ceaa:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ceae:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800ceb2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ceb6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ceba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cebe:	2301      	movs	r3, #1
 800cec0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800cec4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800cec8:	bb8a      	cbnz	r2, 800cf2e <uxr_buffer_create_datareader_bin+0xca>
 800ceca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cece:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ced2:	f04f 0c13 	mov.w	ip, #19
 800ced6:	250b      	movs	r5, #11
 800ced8:	2221      	movs	r2, #33	@ 0x21
 800ceda:	2111      	movs	r1, #17
 800cedc:	2009      	movs	r0, #9
 800cede:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800cee2:	b923      	cbnz	r3, 800ceee <uxr_buffer_create_datareader_bin+0x8a>
 800cee4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800cee8:	4672      	mov	r2, lr
 800ceea:	4661      	mov	r1, ip
 800ceec:	4628      	mov	r0, r5
 800ceee:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d025      	beq.n	800cf42 <uxr_buffer_create_datareader_bin+0xde>
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d029      	beq.n	800cf4e <uxr_buffer_create_datareader_bin+0xea>
 800cefa:	b32b      	cbz	r3, 800cf48 <uxr_buffer_create_datareader_bin+0xe4>
 800cefc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf00:	a923      	add	r1, sp, #140	@ 0x8c
 800cf02:	a806      	add	r0, sp, #24
 800cf04:	f7fc fdcc 	bl	8009aa0 <ucdr_init_buffer>
 800cf08:	a90e      	add	r1, sp, #56	@ 0x38
 800cf0a:	a806      	add	r0, sp, #24
 800cf0c:	f002 fc20 	bl	800f750 <uxr_serialize_OBJK_DataReader_Binary>
 800cf10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf12:	f8cd 8000 	str.w	r8, [sp]
 800cf16:	9401      	str	r4, [sp, #4]
 800cf18:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cf1c:	60e3      	str	r3, [r4, #12]
 800cf1e:	4630      	mov	r0, r6
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	f7ff fedb 	bl	800ccdc <uxr_common_create_entity>
 800cf26:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cf2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800cf32:	f04f 0c12 	mov.w	ip, #18
 800cf36:	250a      	movs	r5, #10
 800cf38:	2220      	movs	r2, #32
 800cf3a:	2110      	movs	r1, #16
 800cf3c:	2008      	movs	r0, #8
 800cf3e:	2702      	movs	r7, #2
 800cf40:	e7cd      	b.n	800cede <uxr_buffer_create_datareader_bin+0x7a>
 800cf42:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800cf46:	e7d9      	b.n	800cefc <uxr_buffer_create_datareader_bin+0x98>
 800cf48:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800cf4c:	e7d6      	b.n	800cefc <uxr_buffer_create_datareader_bin+0x98>
 800cf4e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800cf52:	e7d3      	b.n	800cefc <uxr_buffer_create_datareader_bin+0x98>

0800cf54 <get_custom_error>:
 800cf54:	4b01      	ldr	r3, [pc, #4]	@ (800cf5c <get_custom_error+0x8>)
 800cf56:	7818      	ldrb	r0, [r3, #0]
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	2000db9c 	.word	0x2000db9c

0800cf60 <recv_custom_msg>:
 800cf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	4693      	mov	fp, r2
 800cf66:	b089      	sub	sp, #36	@ 0x24
 800cf68:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800cf6c:	9305      	str	r3, [sp, #20]
 800cf6e:	468a      	mov	sl, r1
 800cf70:	2100      	movs	r1, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	f88d 101e 	strb.w	r1, [sp, #30]
 800cf78:	b322      	cbz	r2, 800cfc4 <recv_custom_msg+0x64>
 800cf7a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800cf7e:	f10d 081f 	add.w	r8, sp, #31
 800cf82:	af05      	add	r7, sp, #20
 800cf84:	f10d 061e 	add.w	r6, sp, #30
 800cf88:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800cf8c:	e002      	b.n	800cf94 <recv_custom_msg+0x34>
 800cf8e:	9b05      	ldr	r3, [sp, #20]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	dd0f      	ble.n	800cfb4 <recv_custom_msg+0x54>
 800cf94:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800cf98:	4623      	mov	r3, r4
 800cf9a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800cf9e:	e9cd 5600 	strd	r5, r6, [sp]
 800cfa2:	4622      	mov	r2, r4
 800cfa4:	4648      	mov	r0, r9
 800cfa6:	f001 fc29 	bl	800e7fc <uxr_read_framed_msg>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d0ef      	beq.n	800cf8e <recv_custom_msg+0x2e>
 800cfae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cfb2:	b1b3      	cbz	r3, 800cfe2 <recv_custom_msg+0x82>
 800cfb4:	4b0f      	ldr	r3, [pc, #60]	@ (800cff4 <recv_custom_msg+0x94>)
 800cfb6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800cfba:	701a      	strb	r2, [r3, #0]
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	b009      	add	sp, #36	@ 0x24
 800cfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc4:	f10d 021f 	add.w	r2, sp, #31
 800cfc8:	9200      	str	r2, [sp, #0]
 800cfca:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800cfce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	47a8      	blx	r5
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d0ec      	beq.n	800cfb4 <recv_custom_msg+0x54>
 800cfda:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1e8      	bne.n	800cfb4 <recv_custom_msg+0x54>
 800cfe2:	f8cb 0000 	str.w	r0, [fp]
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	f8ca 4000 	str.w	r4, [sl]
 800cfec:	b009      	add	sp, #36	@ 0x24
 800cfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff2:	bf00      	nop
 800cff4:	2000db9c 	.word	0x2000db9c

0800cff8 <send_custom_msg>:
 800cff8:	b530      	push	{r4, r5, lr}
 800cffa:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800cffe:	b087      	sub	sp, #28
 800d000:	4615      	mov	r5, r2
 800d002:	b974      	cbnz	r4, 800d022 <send_custom_msg+0x2a>
 800d004:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800d008:	f10d 0317 	add.w	r3, sp, #23
 800d00c:	47a0      	blx	r4
 800d00e:	b108      	cbz	r0, 800d014 <send_custom_msg+0x1c>
 800d010:	42a8      	cmp	r0, r5
 800d012:	d015      	beq.n	800d040 <send_custom_msg+0x48>
 800d014:	4b0c      	ldr	r3, [pc, #48]	@ (800d048 <send_custom_msg+0x50>)
 800d016:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d01a:	701a      	strb	r2, [r3, #0]
 800d01c:	2000      	movs	r0, #0
 800d01e:	b007      	add	sp, #28
 800d020:	bd30      	pop	{r4, r5, pc}
 800d022:	460b      	mov	r3, r1
 800d024:	2200      	movs	r2, #0
 800d026:	f10d 0117 	add.w	r1, sp, #23
 800d02a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d02e:	4602      	mov	r2, r0
 800d030:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800d034:	9500      	str	r5, [sp, #0]
 800d036:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800d03a:	f001 f9e7 	bl	800e40c <uxr_write_framed_msg>
 800d03e:	e7e6      	b.n	800d00e <send_custom_msg+0x16>
 800d040:	2001      	movs	r0, #1
 800d042:	b007      	add	sp, #28
 800d044:	bd30      	pop	{r4, r5, pc}
 800d046:	bf00      	nop
 800d048:	2000db9c 	.word	0x2000db9c

0800d04c <uxr_set_custom_transport_callbacks>:
 800d04c:	b410      	push	{r4}
 800d04e:	9c01      	ldr	r4, [sp, #4]
 800d050:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800d054:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800d058:	9b02      	ldr	r3, [sp, #8]
 800d05a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800d05e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d062:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800d066:	4770      	bx	lr

0800d068 <uxr_init_custom_transport>:
 800d068:	b538      	push	{r3, r4, r5, lr}
 800d06a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800d06e:	b303      	cbz	r3, 800d0b2 <uxr_init_custom_transport+0x4a>
 800d070:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800d074:	4604      	mov	r4, r0
 800d076:	b1e2      	cbz	r2, 800d0b2 <uxr_init_custom_transport+0x4a>
 800d078:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800d07c:	b1ca      	cbz	r2, 800d0b2 <uxr_init_custom_transport+0x4a>
 800d07e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800d082:	b1b2      	cbz	r2, 800d0b2 <uxr_init_custom_transport+0x4a>
 800d084:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800d088:	4798      	blx	r3
 800d08a:	4605      	mov	r5, r0
 800d08c:	b188      	cbz	r0, 800d0b2 <uxr_init_custom_transport+0x4a>
 800d08e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800d092:	b98b      	cbnz	r3, 800d0b8 <uxr_init_custom_transport+0x50>
 800d094:	490b      	ldr	r1, [pc, #44]	@ (800d0c4 <uxr_init_custom_transport+0x5c>)
 800d096:	4b0c      	ldr	r3, [pc, #48]	@ (800d0c8 <uxr_init_custom_transport+0x60>)
 800d098:	4a0c      	ldr	r2, [pc, #48]	@ (800d0cc <uxr_init_custom_transport+0x64>)
 800d09a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800d09e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0a2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800d0a6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800d0aa:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	bd38      	pop	{r3, r4, r5, pc}
 800d0b2:	2500      	movs	r5, #0
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800d0be:	f001 f99f 	bl	800e400 <uxr_init_framing_io>
 800d0c2:	e7e7      	b.n	800d094 <uxr_init_custom_transport+0x2c>
 800d0c4:	0800cff9 	.word	0x0800cff9
 800d0c8:	0800cf61 	.word	0x0800cf61
 800d0cc:	0800cf55 	.word	0x0800cf55

0800d0d0 <uxr_close_custom_transport>:
 800d0d0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800d0d4:	4718      	bx	r3
 800d0d6:	bf00      	nop

0800d0d8 <uxr_object_id>:
 800d0d8:	b082      	sub	sp, #8
 800d0da:	2300      	movs	r3, #0
 800d0dc:	f88d 1006 	strb.w	r1, [sp, #6]
 800d0e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d0e4:	f360 030f 	bfi	r3, r0, #0, #16
 800d0e8:	f362 431f 	bfi	r3, r2, #16, #16
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	b002      	add	sp, #8
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop

0800d0f4 <uxr_object_id_from_raw>:
 800d0f4:	7843      	ldrb	r3, [r0, #1]
 800d0f6:	7801      	ldrb	r1, [r0, #0]
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	f003 020f 	and.w	r2, r3, #15
 800d0fe:	f88d 2006 	strb.w	r2, [sp, #6]
 800d102:	091b      	lsrs	r3, r3, #4
 800d104:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d108:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d10c:	2000      	movs	r0, #0
 800d10e:	f363 000f 	bfi	r0, r3, #0, #16
 800d112:	f362 401f 	bfi	r0, r2, #16, #16
 800d116:	b002      	add	sp, #8
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop

0800d11c <uxr_object_id_to_raw>:
 800d11c:	4602      	mov	r2, r0
 800d11e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d122:	b082      	sub	sp, #8
 800d124:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d128:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d12c:	f881 c000 	strb.w	ip, [r1]
 800d130:	7048      	strb	r0, [r1, #1]
 800d132:	b002      	add	sp, #8
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop

0800d138 <uxr_buffer_request_data>:
 800d138:	b530      	push	{r4, r5, lr}
 800d13a:	b095      	sub	sp, #84	@ 0x54
 800d13c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d140:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800d142:	9303      	str	r3, [sp, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	2d00      	cmp	r5, #0
 800d148:	bf14      	ite	ne
 800d14a:	2101      	movne	r1, #1
 800d14c:	4611      	moveq	r1, r2
 800d14e:	4604      	mov	r4, r0
 800d150:	f88d 301c 	strb.w	r3, [sp, #28]
 800d154:	f88d 201d 	strb.w	r2, [sp, #29]
 800d158:	f88d 201e 	strb.w	r2, [sp, #30]
 800d15c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800d160:	d021      	beq.n	800d1a6 <uxr_buffer_request_data+0x6e>
 800d162:	682a      	ldr	r2, [r5, #0]
 800d164:	686b      	ldr	r3, [r5, #4]
 800d166:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800d16a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d16e:	2210      	movs	r2, #16
 800d170:	2308      	movs	r3, #8
 800d172:	2100      	movs	r1, #0
 800d174:	e9cd 3100 	strd	r3, r1, [sp]
 800d178:	4620      	mov	r0, r4
 800d17a:	9905      	ldr	r1, [sp, #20]
 800d17c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d17e:	f000 ffd9 	bl	800e134 <uxr_prepare_stream_to_write_submessage>
 800d182:	b918      	cbnz	r0, 800d18c <uxr_buffer_request_data+0x54>
 800d184:	4604      	mov	r4, r0
 800d186:	4620      	mov	r0, r4
 800d188:	b015      	add	sp, #84	@ 0x54
 800d18a:	bd30      	pop	{r4, r5, pc}
 800d18c:	9904      	ldr	r1, [sp, #16]
 800d18e:	aa06      	add	r2, sp, #24
 800d190:	4620      	mov	r0, r4
 800d192:	f001 f905 	bl	800e3a0 <uxr_init_base_object_request>
 800d196:	a906      	add	r1, sp, #24
 800d198:	4604      	mov	r4, r0
 800d19a:	a80c      	add	r0, sp, #48	@ 0x30
 800d19c:	f002 fe1c 	bl	800fdd8 <uxr_serialize_READ_DATA_Payload>
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	b015      	add	sp, #84	@ 0x54
 800d1a4:	bd30      	pop	{r4, r5, pc}
 800d1a6:	2208      	movs	r2, #8
 800d1a8:	e7e2      	b.n	800d170 <uxr_buffer_request_data+0x38>
 800d1aa:	bf00      	nop

0800d1ac <uxr_buffer_cancel_data>:
 800d1ac:	b510      	push	{r4, lr}
 800d1ae:	b094      	sub	sp, #80	@ 0x50
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	9202      	str	r2, [sp, #8]
 800d1b4:	9205      	str	r2, [sp, #20]
 800d1b6:	9301      	str	r3, [sp, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d1be:	f88d 301e 	strb.w	r3, [sp, #30]
 800d1c2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800d1c6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d1ca:	2308      	movs	r3, #8
 800d1cc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	2210      	movs	r2, #16
 800d1d4:	ab0c      	add	r3, sp, #48	@ 0x30
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	9103      	str	r1, [sp, #12]
 800d1da:	f000 ffab 	bl	800e134 <uxr_prepare_stream_to_write_submessage>
 800d1de:	b918      	cbnz	r0, 800d1e8 <uxr_buffer_cancel_data+0x3c>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	b014      	add	sp, #80	@ 0x50
 800d1e6:	bd10      	pop	{r4, pc}
 800d1e8:	9905      	ldr	r1, [sp, #20]
 800d1ea:	aa06      	add	r2, sp, #24
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f001 f8d7 	bl	800e3a0 <uxr_init_base_object_request>
 800d1f2:	a906      	add	r1, sp, #24
 800d1f4:	4604      	mov	r4, r0
 800d1f6:	a80c      	add	r0, sp, #48	@ 0x30
 800d1f8:	f002 fdee 	bl	800fdd8 <uxr_serialize_READ_DATA_Payload>
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	b014      	add	sp, #80	@ 0x50
 800d200:	bd10      	pop	{r4, pc}
 800d202:	bf00      	nop

0800d204 <read_submessage_format>:
 800d204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d208:	b095      	sub	sp, #84	@ 0x54
 800d20a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800d20e:	b113      	cbz	r3, 800d216 <read_submessage_format+0x12>
 800d210:	b015      	add	sp, #84	@ 0x54
 800d212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d216:	460c      	mov	r4, r1
 800d218:	4615      	mov	r5, r2
 800d21a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d21e:	4607      	mov	r7, r0
 800d220:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800d222:	9004      	str	r0, [sp, #16]
 800d224:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d226:	9005      	str	r0, [sp, #20]
 800d228:	1a52      	subs	r2, r2, r1
 800d22a:	a80c      	add	r0, sp, #48	@ 0x30
 800d22c:	4699      	mov	r9, r3
 800d22e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800d232:	f7fc fc35 	bl	8009aa0 <ucdr_init_buffer>
 800d236:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d23a:	a80c      	add	r0, sp, #48	@ 0x30
 800d23c:	f7fc fc04 	bl	8009a48 <ucdr_set_on_full_buffer_callback>
 800d240:	69e2      	ldr	r2, [r4, #28]
 800d242:	b19a      	cbz	r2, 800d26c <read_submessage_format+0x68>
 800d244:	f1b8 0f07 	cmp.w	r8, #7
 800d248:	f882 9014 	strb.w	r9, [r2, #20]
 800d24c:	d040      	beq.n	800d2d0 <read_submessage_format+0xcc>
 800d24e:	f1b8 0f08 	cmp.w	r8, #8
 800d252:	d02e      	beq.n	800d2b2 <read_submessage_format+0xae>
 800d254:	f1b8 0f06 	cmp.w	r8, #6
 800d258:	d011      	beq.n	800d27e <read_submessage_format+0x7a>
 800d25a:	2301      	movs	r3, #1
 800d25c:	7513      	strb	r3, [r2, #20]
 800d25e:	4629      	mov	r1, r5
 800d260:	4620      	mov	r0, r4
 800d262:	f7fc fc6d 	bl	8009b40 <ucdr_advance_buffer>
 800d266:	b015      	add	sp, #84	@ 0x54
 800d268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d26c:	f1b8 0f07 	cmp.w	r8, #7
 800d270:	d02e      	beq.n	800d2d0 <read_submessage_format+0xcc>
 800d272:	f1b8 0f08 	cmp.w	r8, #8
 800d276:	d01c      	beq.n	800d2b2 <read_submessage_format+0xae>
 800d278:	f1b8 0f06 	cmp.w	r8, #6
 800d27c:	d1ef      	bne.n	800d25e <read_submessage_format+0x5a>
 800d27e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800d282:	f1b8 0f00 	cmp.w	r8, #0
 800d286:	d011      	beq.n	800d2ac <read_submessage_format+0xa8>
 800d288:	ab0c      	add	r3, sp, #48	@ 0x30
 800d28a:	e9cd 3500 	strd	r3, r5, [sp]
 800d28e:	2306      	movs	r3, #6
 800d290:	f88d 3016 	strb.w	r3, [sp, #22]
 800d294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d298:	9302      	str	r3, [sp, #8]
 800d29a:	4632      	mov	r2, r6
 800d29c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	47c0      	blx	r8
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	69e2      	ldr	r2, [r4, #28]
 800d2a8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d2ac:	2a00      	cmp	r2, #0
 800d2ae:	d1d4      	bne.n	800d25a <read_submessage_format+0x56>
 800d2b0:	e7d5      	b.n	800d25e <read_submessage_format+0x5a>
 800d2b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0f8      	beq.n	800d2ac <read_submessage_format+0xa8>
 800d2ba:	a906      	add	r1, sp, #24
 800d2bc:	a80c      	add	r0, sp, #48	@ 0x30
 800d2be:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d2c2:	f002 fe19 	bl	800fef8 <uxr_deserialize_SampleIdentity>
 800d2c6:	b9a0      	cbnz	r0, 800d2f2 <read_submessage_format+0xee>
 800d2c8:	69e2      	ldr	r2, [r4, #28]
 800d2ca:	2a00      	cmp	r2, #0
 800d2cc:	d1c5      	bne.n	800d25a <read_submessage_format+0x56>
 800d2ce:	e7c6      	b.n	800d25e <read_submessage_format+0x5a>
 800d2d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2d4:	b13b      	cbz	r3, 800d2e6 <read_submessage_format+0xe2>
 800d2d6:	a906      	add	r1, sp, #24
 800d2d8:	a80c      	add	r0, sp, #48	@ 0x30
 800d2da:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d2de:	f002 fb15 	bl	800f90c <uxr_deserialize_BaseObjectRequest>
 800d2e2:	bb60      	cbnz	r0, 800d33e <read_submessage_format+0x13a>
 800d2e4:	69e2      	ldr	r2, [r4, #28]
 800d2e6:	68a3      	ldr	r3, [r4, #8]
 800d2e8:	442b      	add	r3, r5
 800d2ea:	60a3      	str	r3, [r4, #8]
 800d2ec:	2a00      	cmp	r2, #0
 800d2ee:	d1b4      	bne.n	800d25a <read_submessage_format+0x56>
 800d2f0:	e7b5      	b.n	800d25e <read_submessage_format+0x5a>
 800d2f2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d2f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2f8:	1a52      	subs	r2, r2, r1
 800d2fa:	eba8 0803 	sub.w	r8, r8, r3
 800d2fe:	a80c      	add	r0, sp, #48	@ 0x30
 800d300:	f7fc fbce 	bl	8009aa0 <ucdr_init_buffer>
 800d304:	44a8      	add	r8, r5
 800d306:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d30a:	a80c      	add	r0, sp, #48	@ 0x30
 800d30c:	f7fc fb9c 	bl	8009a48 <ucdr_set_on_full_buffer_callback>
 800d310:	fa1f f888 	uxth.w	r8, r8
 800d314:	ab0c      	add	r3, sp, #48	@ 0x30
 800d316:	9300      	str	r3, [sp, #0]
 800d318:	f8cd 8004 	str.w	r8, [sp, #4]
 800d31c:	2108      	movs	r1, #8
 800d31e:	f88d 1016 	strb.w	r1, [sp, #22]
 800d322:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800d326:	9102      	str	r1, [sp, #8]
 800d328:	ab06      	add	r3, sp, #24
 800d32a:	4632      	mov	r2, r6
 800d32c:	9905      	ldr	r1, [sp, #20]
 800d32e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800d332:	4638      	mov	r0, r7
 800d334:	47b0      	blx	r6
 800d336:	2301      	movs	r3, #1
 800d338:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d33c:	e7c4      	b.n	800d2c8 <read_submessage_format+0xc4>
 800d33e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d342:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d344:	1a52      	subs	r2, r2, r1
 800d346:	a80c      	add	r0, sp, #48	@ 0x30
 800d348:	eba8 0803 	sub.w	r8, r8, r3
 800d34c:	f7fc fba8 	bl	8009aa0 <ucdr_init_buffer>
 800d350:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d354:	a80c      	add	r0, sp, #48	@ 0x30
 800d356:	f7fc fb77 	bl	8009a48 <ucdr_set_on_full_buffer_callback>
 800d35a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d362:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d366:	44a8      	add	r8, r5
 800d368:	fa1f f888 	uxth.w	r8, r8
 800d36c:	f8cd 8004 	str.w	r8, [sp, #4]
 800d370:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d374:	2107      	movs	r1, #7
 800d376:	f88d 1016 	strb.w	r1, [sp, #22]
 800d37a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800d37e:	9102      	str	r1, [sp, #8]
 800d380:	4632      	mov	r2, r6
 800d382:	b29b      	uxth	r3, r3
 800d384:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800d388:	9905      	ldr	r1, [sp, #20]
 800d38a:	4638      	mov	r0, r7
 800d38c:	47b0      	blx	r6
 800d38e:	2301      	movs	r3, #1
 800d390:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d394:	e7a6      	b.n	800d2e4 <read_submessage_format+0xe0>
 800d396:	bf00      	nop

0800d398 <on_get_fragmentation_info>:
 800d398:	b500      	push	{lr}
 800d39a:	b08b      	sub	sp, #44	@ 0x2c
 800d39c:	4601      	mov	r1, r0
 800d39e:	2204      	movs	r2, #4
 800d3a0:	a802      	add	r0, sp, #8
 800d3a2:	f7fc fb7d 	bl	8009aa0 <ucdr_init_buffer>
 800d3a6:	f10d 0305 	add.w	r3, sp, #5
 800d3aa:	f10d 0206 	add.w	r2, sp, #6
 800d3ae:	a901      	add	r1, sp, #4
 800d3b0:	a802      	add	r0, sp, #8
 800d3b2:	f001 fdf3 	bl	800ef9c <uxr_read_submessage_header>
 800d3b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d3ba:	2b0d      	cmp	r3, #13
 800d3bc:	d003      	beq.n	800d3c6 <on_get_fragmentation_info+0x2e>
 800d3be:	2000      	movs	r0, #0
 800d3c0:	b00b      	add	sp, #44	@ 0x2c
 800d3c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d3ca:	f013 0f02 	tst.w	r3, #2
 800d3ce:	bf14      	ite	ne
 800d3d0:	2002      	movne	r0, #2
 800d3d2:	2001      	moveq	r0, #1
 800d3d4:	b00b      	add	sp, #44	@ 0x2c
 800d3d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3da:	bf00      	nop

0800d3dc <read_submessage_get_info>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	2500      	movs	r5, #0
 800d3e0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d3ea:	460e      	mov	r6, r1
 800d3ec:	a810      	add	r0, sp, #64	@ 0x40
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d3f4:	f004 fd64 	bl	8011ec0 <memset>
 800d3f8:	a903      	add	r1, sp, #12
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f002 fc2e 	bl	800fc5c <uxr_deserialize_GET_INFO_Payload>
 800d400:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d404:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d408:	4620      	mov	r0, r4
 800d40a:	f000 ffc1 	bl	800e390 <uxr_session_header_offset>
 800d40e:	462b      	mov	r3, r5
 800d410:	9000      	str	r0, [sp, #0]
 800d412:	220c      	movs	r2, #12
 800d414:	a905      	add	r1, sp, #20
 800d416:	a808      	add	r0, sp, #32
 800d418:	f7fc fb30 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 800d41c:	a910      	add	r1, sp, #64	@ 0x40
 800d41e:	a808      	add	r0, sp, #32
 800d420:	f002 fc8e 	bl	800fd40 <uxr_serialize_INFO_Payload>
 800d424:	9b08      	ldr	r3, [sp, #32]
 800d426:	462a      	mov	r2, r5
 800d428:	4629      	mov	r1, r5
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 ff5a 	bl	800e2e4 <uxr_stamp_session_header>
 800d430:	a808      	add	r0, sp, #32
 800d432:	f7fc fb61 	bl	8009af8 <ucdr_buffer_length>
 800d436:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d438:	4602      	mov	r2, r0
 800d43a:	a905      	add	r1, sp, #20
 800d43c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d440:	47a0      	blx	r4
 800d442:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800d446:	bd70      	pop	{r4, r5, r6, pc}

0800d448 <write_submessage_acknack.isra.0>:
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	b092      	sub	sp, #72	@ 0x48
 800d44c:	4605      	mov	r5, r0
 800d44e:	460e      	mov	r6, r1
 800d450:	4614      	mov	r4, r2
 800d452:	f000 ff9d 	bl	800e390 <uxr_session_header_offset>
 800d456:	a905      	add	r1, sp, #20
 800d458:	9000      	str	r0, [sp, #0]
 800d45a:	2300      	movs	r3, #0
 800d45c:	a80a      	add	r0, sp, #40	@ 0x28
 800d45e:	2211      	movs	r2, #17
 800d460:	f7fc fb0c 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 800d464:	2218      	movs	r2, #24
 800d466:	fb02 5404 	mla	r4, r2, r4, r5
 800d46a:	2300      	movs	r3, #0
 800d46c:	2205      	movs	r2, #5
 800d46e:	3450      	adds	r4, #80	@ 0x50
 800d470:	210a      	movs	r1, #10
 800d472:	a80a      	add	r0, sp, #40	@ 0x28
 800d474:	f001 fd78 	bl	800ef68 <uxr_buffer_submessage_header>
 800d478:	a903      	add	r1, sp, #12
 800d47a:	4620      	mov	r0, r4
 800d47c:	f003 fdaa 	bl	8010fd4 <uxr_compute_acknack>
 800d480:	ba40      	rev16	r0, r0
 800d482:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d486:	a903      	add	r1, sp, #12
 800d488:	a80a      	add	r0, sp, #40	@ 0x28
 800d48a:	f88d 6010 	strb.w	r6, [sp, #16]
 800d48e:	f002 fcb7 	bl	800fe00 <uxr_serialize_ACKNACK_Payload>
 800d492:	2200      	movs	r2, #0
 800d494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d496:	4611      	mov	r1, r2
 800d498:	4628      	mov	r0, r5
 800d49a:	f000 ff23 	bl	800e2e4 <uxr_stamp_session_header>
 800d49e:	a80a      	add	r0, sp, #40	@ 0x28
 800d4a0:	f7fc fb2a 	bl	8009af8 <ucdr_buffer_length>
 800d4a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	a905      	add	r1, sp, #20
 800d4aa:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d4ae:	47a0      	blx	r4
 800d4b0:	b012      	add	sp, #72	@ 0x48
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
 800d4b4:	0000      	movs	r0, r0
	...

0800d4b8 <uxr_init_session>:
 800d4b8:	b510      	push	{r4, lr}
 800d4ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d4f0 <uxr_init_session+0x38>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d4ca:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d4ce:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800d4d2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800d4d6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800d4da:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800d4de:	2181      	movs	r1, #129	@ 0x81
 800d4e0:	f000 fe6c 	bl	800e1bc <uxr_init_session_info>
 800d4e4:	f104 0008 	add.w	r0, r4, #8
 800d4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4ec:	f001 bc6e 	b.w	800edcc <uxr_init_stream_storage>
	...

0800d4f8 <uxr_set_status_callback>:
 800d4f8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop

0800d500 <uxr_set_topic_callback>:
 800d500:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop

0800d508 <uxr_set_request_callback>:
 800d508:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop

0800d510 <uxr_set_reply_callback>:
 800d510:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop

0800d518 <uxr_create_output_best_effort_stream>:
 800d518:	b510      	push	{r4, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	e9cd 2100 	strd	r2, r1, [sp]
 800d520:	4604      	mov	r4, r0
 800d522:	f000 ff35 	bl	800e390 <uxr_session_header_offset>
 800d526:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d52a:	4603      	mov	r3, r0
 800d52c:	f104 0008 	add.w	r0, r4, #8
 800d530:	b004      	add	sp, #16
 800d532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d536:	f001 bc93 	b.w	800ee60 <uxr_add_output_best_effort_buffer>
 800d53a:	bf00      	nop

0800d53c <uxr_create_output_reliable_stream>:
 800d53c:	b510      	push	{r4, lr}
 800d53e:	b088      	sub	sp, #32
 800d540:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d544:	4604      	mov	r4, r0
 800d546:	9303      	str	r3, [sp, #12]
 800d548:	f000 ff22 	bl	800e390 <uxr_session_header_offset>
 800d54c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d550:	9000      	str	r0, [sp, #0]
 800d552:	9905      	ldr	r1, [sp, #20]
 800d554:	f104 0008 	add.w	r0, r4, #8
 800d558:	f001 fc96 	bl	800ee88 <uxr_add_output_reliable_buffer>
 800d55c:	2200      	movs	r2, #0
 800d55e:	b2c3      	uxtb	r3, r0
 800d560:	f363 0207 	bfi	r2, r3, #0, #8
 800d564:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d568:	f363 220f 	bfi	r2, r3, #8, #8
 800d56c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d570:	f363 4217 	bfi	r2, r3, #16, #8
 800d574:	0e03      	lsrs	r3, r0, #24
 800d576:	f363 621f 	bfi	r2, r3, #24, #8
 800d57a:	4610      	mov	r0, r2
 800d57c:	b008      	add	sp, #32
 800d57e:	bd10      	pop	{r4, pc}

0800d580 <uxr_create_input_best_effort_stream>:
 800d580:	b082      	sub	sp, #8
 800d582:	3008      	adds	r0, #8
 800d584:	b002      	add	sp, #8
 800d586:	f001 bc99 	b.w	800eebc <uxr_add_input_best_effort_buffer>
 800d58a:	bf00      	nop

0800d58c <uxr_create_input_reliable_stream>:
 800d58c:	b510      	push	{r4, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	4c0b      	ldr	r4, [pc, #44]	@ (800d5c0 <uxr_create_input_reliable_stream+0x34>)
 800d592:	9400      	str	r4, [sp, #0]
 800d594:	3008      	adds	r0, #8
 800d596:	f001 fca7 	bl	800eee8 <uxr_add_input_reliable_buffer>
 800d59a:	2200      	movs	r2, #0
 800d59c:	b2c3      	uxtb	r3, r0
 800d59e:	f363 0207 	bfi	r2, r3, #0, #8
 800d5a2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d5a6:	f363 220f 	bfi	r2, r3, #8, #8
 800d5aa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d5ae:	f363 4217 	bfi	r2, r3, #16, #8
 800d5b2:	0e03      	lsrs	r3, r0, #24
 800d5b4:	f363 621f 	bfi	r2, r3, #24, #8
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	b004      	add	sp, #16
 800d5bc:	bd10      	pop	{r4, pc}
 800d5be:	bf00      	nop
 800d5c0:	0800d399 	.word	0x0800d399

0800d5c4 <uxr_epoch_nanos>:
 800d5c4:	b510      	push	{r4, lr}
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	f001 fd2e 	bl	800f028 <uxr_nanos>
 800d5cc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800d5d0:	1ac0      	subs	r0, r0, r3
 800d5d2:	eb61 0102 	sbc.w	r1, r1, r2
 800d5d6:	bd10      	pop	{r4, pc}

0800d5d8 <uxr_flash_output_streams>:
 800d5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5dc:	7e03      	ldrb	r3, [r0, #24]
 800d5de:	b084      	sub	sp, #16
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d035      	beq.n	800d652 <uxr_flash_output_streams+0x7a>
 800d5e6:	f04f 0900 	mov.w	r9, #0
 800d5ea:	4648      	mov	r0, r9
 800d5ec:	f10d 0802 	add.w	r8, sp, #2
 800d5f0:	af03      	add	r7, sp, #12
 800d5f2:	ae02      	add	r6, sp, #8
 800d5f4:	e006      	b.n	800d604 <uxr_flash_output_streams+0x2c>
 800d5f6:	7e23      	ldrb	r3, [r4, #24]
 800d5f8:	f109 0901 	add.w	r9, r9, #1
 800d5fc:	fa5f f089 	uxtb.w	r0, r9
 800d600:	4283      	cmp	r3, r0
 800d602:	d926      	bls.n	800d652 <uxr_flash_output_streams+0x7a>
 800d604:	2201      	movs	r2, #1
 800d606:	4611      	mov	r1, r2
 800d608:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d60c:	f001 fb8a 	bl	800ed24 <uxr_stream_id>
 800d610:	3508      	adds	r5, #8
 800d612:	4684      	mov	ip, r0
 800d614:	4643      	mov	r3, r8
 800d616:	463a      	mov	r2, r7
 800d618:	4631      	mov	r1, r6
 800d61a:	4628      	mov	r0, r5
 800d61c:	f8cd c004 	str.w	ip, [sp, #4]
 800d620:	f003 fd5e 	bl	80110e0 <uxr_prepare_best_effort_buffer_to_send>
 800d624:	2800      	cmp	r0, #0
 800d626:	d0e6      	beq.n	800d5f6 <uxr_flash_output_streams+0x1e>
 800d628:	9b02      	ldr	r3, [sp, #8]
 800d62a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d62e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d632:	4620      	mov	r0, r4
 800d634:	f000 fe56 	bl	800e2e4 <uxr_stamp_session_header>
 800d638:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d63a:	9a03      	ldr	r2, [sp, #12]
 800d63c:	685d      	ldr	r5, [r3, #4]
 800d63e:	6818      	ldr	r0, [r3, #0]
 800d640:	9902      	ldr	r1, [sp, #8]
 800d642:	47a8      	blx	r5
 800d644:	f109 0901 	add.w	r9, r9, #1
 800d648:	7e23      	ldrb	r3, [r4, #24]
 800d64a:	fa5f f089 	uxtb.w	r0, r9
 800d64e:	4283      	cmp	r3, r0
 800d650:	d8d8      	bhi.n	800d604 <uxr_flash_output_streams+0x2c>
 800d652:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d656:	b38b      	cbz	r3, 800d6bc <uxr_flash_output_streams+0xe4>
 800d658:	f04f 0900 	mov.w	r9, #0
 800d65c:	f10d 0802 	add.w	r8, sp, #2
 800d660:	af03      	add	r7, sp, #12
 800d662:	ae02      	add	r6, sp, #8
 800d664:	4648      	mov	r0, r9
 800d666:	2201      	movs	r2, #1
 800d668:	2102      	movs	r1, #2
 800d66a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d66e:	f001 fb59 	bl	800ed24 <uxr_stream_id>
 800d672:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d676:	3520      	adds	r5, #32
 800d678:	9001      	str	r0, [sp, #4]
 800d67a:	e00d      	b.n	800d698 <uxr_flash_output_streams+0xc0>
 800d67c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d680:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d684:	9b02      	ldr	r3, [sp, #8]
 800d686:	f000 fe2d 	bl	800e2e4 <uxr_stamp_session_header>
 800d68a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d68c:	9a03      	ldr	r2, [sp, #12]
 800d68e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d692:	9902      	ldr	r1, [sp, #8]
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	47d0      	blx	sl
 800d698:	4643      	mov	r3, r8
 800d69a:	463a      	mov	r2, r7
 800d69c:	4631      	mov	r1, r6
 800d69e:	4628      	mov	r0, r5
 800d6a0:	f003 ff3c 	bl	801151c <uxr_prepare_next_reliable_buffer_to_send>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1e7      	bne.n	800d67c <uxr_flash_output_streams+0xa4>
 800d6ac:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d6b0:	f109 0901 	add.w	r9, r9, #1
 800d6b4:	fa5f f089 	uxtb.w	r0, r9
 800d6b8:	4283      	cmp	r3, r0
 800d6ba:	d8d4      	bhi.n	800d666 <uxr_flash_output_streams+0x8e>
 800d6bc:	b004      	add	sp, #16
 800d6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c2:	bf00      	nop

0800d6c4 <read_submessage_info>:
 800d6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c8:	460d      	mov	r5, r1
 800d6ca:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d6ce:	4669      	mov	r1, sp
 800d6d0:	4607      	mov	r7, r0
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f002 f9d0 	bl	800fa78 <uxr_deserialize_BaseObjectReply>
 800d6d8:	a902      	add	r1, sp, #8
 800d6da:	4604      	mov	r4, r0
 800d6dc:	4628      	mov	r0, r5
 800d6de:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d6e2:	f7fb f91b 	bl	800891c <ucdr_deserialize_bool>
 800d6e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d6ea:	4004      	ands	r4, r0
 800d6ec:	b2e4      	uxtb	r4, r4
 800d6ee:	b95b      	cbnz	r3, 800d708 <read_submessage_info+0x44>
 800d6f0:	a987      	add	r1, sp, #540	@ 0x21c
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	f7fb f912 	bl	800891c <ucdr_deserialize_bool>
 800d6f8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800d6fc:	4606      	mov	r6, r0
 800d6fe:	b94b      	cbnz	r3, 800d714 <read_submessage_info+0x50>
 800d700:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d708:	a903      	add	r1, sp, #12
 800d70a:	4628      	mov	r0, r5
 800d70c:	f002 f85c 	bl	800f7c8 <uxr_deserialize_ObjectVariant>
 800d710:	4004      	ands	r4, r0
 800d712:	e7ed      	b.n	800d6f0 <read_submessage_info+0x2c>
 800d714:	a988      	add	r1, sp, #544	@ 0x220
 800d716:	4628      	mov	r0, r5
 800d718:	f7fb f92e 	bl	8008978 <ucdr_deserialize_uint8_t>
 800d71c:	4234      	tst	r4, r6
 800d71e:	d0ef      	beq.n	800d700 <read_submessage_info+0x3c>
 800d720:	2800      	cmp	r0, #0
 800d722:	d0ed      	beq.n	800d700 <read_submessage_info+0x3c>
 800d724:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800d728:	2b0d      	cmp	r3, #13
 800d72a:	d1e9      	bne.n	800d700 <read_submessage_info+0x3c>
 800d72c:	a98a      	add	r1, sp, #552	@ 0x228
 800d72e:	4628      	mov	r0, r5
 800d730:	f7fb fec8 	bl	80094c4 <ucdr_deserialize_int16_t>
 800d734:	b140      	cbz	r0, 800d748 <read_submessage_info+0x84>
 800d736:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	dd07      	ble.n	800d74e <read_submessage_info+0x8a>
 800d73e:	f1b8 0f00 	cmp.w	r8, #0
 800d742:	bf14      	ite	ne
 800d744:	2001      	movne	r0, #1
 800d746:	2002      	moveq	r0, #2
 800d748:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800d74c:	e7d8      	b.n	800d700 <read_submessage_info+0x3c>
 800d74e:	2000      	movs	r0, #0
 800d750:	e7fa      	b.n	800d748 <read_submessage_info+0x84>
 800d752:	bf00      	nop

0800d754 <read_submessage_list>:
 800d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d758:	b097      	sub	sp, #92	@ 0x5c
 800d75a:	4ec1      	ldr	r6, [pc, #772]	@ (800da60 <read_submessage_list+0x30c>)
 800d75c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d75e:	4604      	mov	r4, r0
 800d760:	460d      	mov	r5, r1
 800d762:	f04f 0801 	mov.w	r8, #1
 800d766:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800d76a:	aa0c      	add	r2, sp, #48	@ 0x30
 800d76c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d770:	4628      	mov	r0, r5
 800d772:	f001 fc13 	bl	800ef9c <uxr_read_submessage_header>
 800d776:	2800      	cmp	r0, #0
 800d778:	f000 813e 	beq.w	800d9f8 <read_submessage_list+0x2a4>
 800d77c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800d780:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800d784:	3b02      	subs	r3, #2
 800d786:	2b0d      	cmp	r3, #13
 800d788:	d8ed      	bhi.n	800d766 <read_submessage_list+0x12>
 800d78a:	a101      	add	r1, pc, #4	@ (adr r1, 800d790 <read_submessage_list+0x3c>)
 800d78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d790:	0800d9ef 	.word	0x0800d9ef
 800d794:	0800d767 	.word	0x0800d767
 800d798:	0800d9df 	.word	0x0800d9df
 800d79c:	0800d97d 	.word	0x0800d97d
 800d7a0:	0800d973 	.word	0x0800d973
 800d7a4:	0800d767 	.word	0x0800d767
 800d7a8:	0800d767 	.word	0x0800d767
 800d7ac:	0800d8d3 	.word	0x0800d8d3
 800d7b0:	0800d863 	.word	0x0800d863
 800d7b4:	0800d823 	.word	0x0800d823
 800d7b8:	0800d767 	.word	0x0800d767
 800d7bc:	0800d767 	.word	0x0800d767
 800d7c0:	0800d767 	.word	0x0800d767
 800d7c4:	0800d7c9 	.word	0x0800d7c9
 800d7c8:	a910      	add	r1, sp, #64	@ 0x40
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f002 fb68 	bl	800fea0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d7d0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d7d4:	f1b9 0f00 	cmp.w	r9, #0
 800d7d8:	f000 8116 	beq.w	800da08 <read_submessage_list+0x2b4>
 800d7dc:	f001 fc24 	bl	800f028 <uxr_nanos>
 800d7e0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	468c      	mov	ip, r1
 800d7ec:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d7f0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d7f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d7f6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d7f8:	468c      	mov	ip, r1
 800d7fa:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d7fe:	46e2      	mov	sl, ip
 800d800:	46bc      	mov	ip, r7
 800d802:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d806:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d80a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d80e:	e9cd 7100 	strd	r7, r1, [sp]
 800d812:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d816:	9106      	str	r1, [sp, #24]
 800d818:	4620      	mov	r0, r4
 800d81a:	47c8      	blx	r9
 800d81c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d820:	e7a1      	b.n	800d766 <read_submessage_list+0x12>
 800d822:	a910      	add	r1, sp, #64	@ 0x40
 800d824:	4628      	mov	r0, r5
 800d826:	f002 fb29 	bl	800fe7c <uxr_deserialize_HEARTBEAT_Payload>
 800d82a:	2100      	movs	r1, #0
 800d82c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d830:	f001 faa2 	bl	800ed78 <uxr_stream_id_from_raw>
 800d834:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d838:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d83a:	4639      	mov	r1, r7
 800d83c:	f104 0008 	add.w	r0, r4, #8
 800d840:	f001 fb88 	bl	800ef54 <uxr_get_input_reliable_stream>
 800d844:	2800      	cmp	r0, #0
 800d846:	d08e      	beq.n	800d766 <read_submessage_list+0x12>
 800d848:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d84c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d850:	f003 fbb4 	bl	8010fbc <uxr_process_heartbeat>
 800d854:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d858:	463a      	mov	r2, r7
 800d85a:	4620      	mov	r0, r4
 800d85c:	f7ff fdf4 	bl	800d448 <write_submessage_acknack.isra.0>
 800d860:	e781      	b.n	800d766 <read_submessage_list+0x12>
 800d862:	a910      	add	r1, sp, #64	@ 0x40
 800d864:	4628      	mov	r0, r5
 800d866:	f002 fae1 	bl	800fe2c <uxr_deserialize_ACKNACK_Payload>
 800d86a:	2100      	movs	r1, #0
 800d86c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d870:	f001 fa82 	bl	800ed78 <uxr_stream_id_from_raw>
 800d874:	900d      	str	r0, [sp, #52]	@ 0x34
 800d876:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d87a:	f104 0008 	add.w	r0, r4, #8
 800d87e:	f001 fb55 	bl	800ef2c <uxr_get_output_reliable_stream>
 800d882:	4607      	mov	r7, r0
 800d884:	2800      	cmp	r0, #0
 800d886:	f43f af6e 	beq.w	800d766 <read_submessage_list+0x12>
 800d88a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d88e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d892:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d896:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d89a:	b289      	uxth	r1, r1
 800d89c:	f003 fee8 	bl	8011670 <uxr_process_acknack>
 800d8a0:	4638      	mov	r0, r7
 800d8a2:	f003 fea5 	bl	80115f0 <uxr_begin_output_nack_buffer_it>
 800d8a6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d8aa:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d8ae:	e006      	b.n	800d8be <read_submessage_list+0x16a>
 800d8b0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d8b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d8b4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d8b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d8ba:	6818      	ldr	r0, [r3, #0]
 800d8bc:	47c8      	blx	r9
 800d8be:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d8c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d8c4:	4651      	mov	r1, sl
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	f003 fe94 	bl	80115f4 <uxr_next_reliable_nack_buffer_to_send>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d1ef      	bne.n	800d8b0 <read_submessage_list+0x15c>
 800d8d0:	e749      	b.n	800d766 <read_submessage_list+0x12>
 800d8d2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d8d6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d8da:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d8de:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d8e2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d8e6:	4651      	mov	r1, sl
 800d8e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d8ec:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d8f0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d8f4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d8fe:	f002 f805 	bl	800f90c <uxr_deserialize_BaseObjectRequest>
 800d902:	4650      	mov	r0, sl
 800d904:	a90f      	add	r1, sp, #60	@ 0x3c
 800d906:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d90a:	f000 fd67 	bl	800e3dc <uxr_parse_base_object_request>
 800d90e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d912:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d914:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d918:	9110      	str	r1, [sp, #64]	@ 0x40
 800d91a:	3f04      	subs	r7, #4
 800d91c:	f009 090e 	and.w	r9, r9, #14
 800d920:	b2bf      	uxth	r7, r7
 800d922:	f1bb 0f00 	cmp.w	fp, #0
 800d926:	d006      	beq.n	800d936 <read_submessage_list+0x1e2>
 800d928:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	4652      	mov	r2, sl
 800d930:	2300      	movs	r3, #0
 800d932:	4620      	mov	r0, r4
 800d934:	47d8      	blx	fp
 800d936:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d938:	b16a      	cbz	r2, 800d956 <read_submessage_list+0x202>
 800d93a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d93c:	2100      	movs	r1, #0
 800d93e:	3802      	subs	r0, #2
 800d940:	e002      	b.n	800d948 <read_submessage_list+0x1f4>
 800d942:	3101      	adds	r1, #1
 800d944:	4291      	cmp	r1, r2
 800d946:	d006      	beq.n	800d956 <read_submessage_list+0x202>
 800d948:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d94c:	4553      	cmp	r3, sl
 800d94e:	d1f8      	bne.n	800d942 <read_submessage_list+0x1ee>
 800d950:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d952:	2200      	movs	r2, #0
 800d954:	545a      	strb	r2, [r3, r1]
 800d956:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d95a:	9102      	str	r1, [sp, #8]
 800d95c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d95e:	9101      	str	r1, [sp, #4]
 800d960:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d962:	9100      	str	r1, [sp, #0]
 800d964:	464b      	mov	r3, r9
 800d966:	463a      	mov	r2, r7
 800d968:	4629      	mov	r1, r5
 800d96a:	4620      	mov	r0, r4
 800d96c:	f7ff fc4a 	bl	800d204 <read_submessage_format>
 800d970:	e6f9      	b.n	800d766 <read_submessage_list+0x12>
 800d972:	4629      	mov	r1, r5
 800d974:	4620      	mov	r0, r4
 800d976:	f7ff fea5 	bl	800d6c4 <read_submessage_info>
 800d97a:	e6f4      	b.n	800d766 <read_submessage_list+0x12>
 800d97c:	2a00      	cmp	r2, #0
 800d97e:	d03e      	beq.n	800d9fe <read_submessage_list+0x2aa>
 800d980:	a910      	add	r1, sp, #64	@ 0x40
 800d982:	4628      	mov	r0, r5
 800d984:	f002 f9be 	bl	800fd04 <uxr_deserialize_STATUS_Payload>
 800d988:	a90e      	add	r1, sp, #56	@ 0x38
 800d98a:	aa0d      	add	r2, sp, #52	@ 0x34
 800d98c:	a810      	add	r0, sp, #64	@ 0x40
 800d98e:	f000 fd25 	bl	800e3dc <uxr_parse_base_object_request>
 800d992:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d996:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d998:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d99c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d9a0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d9a2:	f1ba 0f00 	cmp.w	sl, #0
 800d9a6:	d006      	beq.n	800d9b6 <read_submessage_list+0x262>
 800d9a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	463a      	mov	r2, r7
 800d9b0:	464b      	mov	r3, r9
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	47d0      	blx	sl
 800d9b6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d9b8:	2a00      	cmp	r2, #0
 800d9ba:	f43f aed4 	beq.w	800d766 <read_submessage_list+0x12>
 800d9be:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	3802      	subs	r0, #2
 800d9c4:	e003      	b.n	800d9ce <read_submessage_list+0x27a>
 800d9c6:	3101      	adds	r1, #1
 800d9c8:	4291      	cmp	r1, r2
 800d9ca:	f43f aecc 	beq.w	800d766 <read_submessage_list+0x12>
 800d9ce:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d9d2:	42bb      	cmp	r3, r7
 800d9d4:	d1f7      	bne.n	800d9c6 <read_submessage_list+0x272>
 800d9d6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d9d8:	f803 9001 	strb.w	r9, [r3, r1]
 800d9dc:	e6c3      	b.n	800d766 <read_submessage_list+0x12>
 800d9de:	2a00      	cmp	r2, #0
 800d9e0:	f47f aec1 	bne.w	800d766 <read_submessage_list+0x12>
 800d9e4:	4629      	mov	r1, r5
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f000 fc3e 	bl	800e268 <uxr_read_create_session_status>
 800d9ec:	e6bb      	b.n	800d766 <read_submessage_list+0x12>
 800d9ee:	4629      	mov	r1, r5
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f7ff fcf3 	bl	800d3dc <read_submessage_get_info>
 800d9f6:	e6b6      	b.n	800d766 <read_submessage_list+0x12>
 800d9f8:	b017      	add	sp, #92	@ 0x5c
 800d9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fe:	4629      	mov	r1, r5
 800da00:	4620      	mov	r0, r4
 800da02:	f000 fc3d 	bl	800e280 <uxr_read_delete_session_status>
 800da06:	e6ae      	b.n	800d766 <read_submessage_list+0x12>
 800da08:	f001 fb0e 	bl	800f028 <uxr_nanos>
 800da0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800da10:	464f      	mov	r7, r9
 800da12:	fbc3 2706 	smlal	r2, r7, r3, r6
 800da16:	1812      	adds	r2, r2, r0
 800da18:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800da1a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800da1c:	eb47 0101 	adc.w	r1, r7, r1
 800da20:	464f      	mov	r7, r9
 800da22:	fbc3 0706 	smlal	r0, r7, r3, r6
 800da26:	463b      	mov	r3, r7
 800da28:	4684      	mov	ip, r0
 800da2a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800da2e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800da32:	eb1c 0c00 	adds.w	ip, ip, r0
 800da36:	464f      	mov	r7, r9
 800da38:	eb43 0307 	adc.w	r3, r3, r7
 800da3c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800da40:	eb61 0303 	sbc.w	r3, r1, r3
 800da44:	0fda      	lsrs	r2, r3, #31
 800da46:	eb12 020c 	adds.w	r2, r2, ip
 800da4a:	f143 0300 	adc.w	r3, r3, #0
 800da4e:	0852      	lsrs	r2, r2, #1
 800da50:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800da54:	105b      	asrs	r3, r3, #1
 800da56:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800da5a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800da5e:	e6dd      	b.n	800d81c <read_submessage_list+0xc8>
 800da60:	3b9aca00 	.word	0x3b9aca00

0800da64 <listen_message_reliably>:
 800da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da68:	1e0b      	subs	r3, r1, #0
 800da6a:	b09d      	sub	sp, #116	@ 0x74
 800da6c:	bfb8      	it	lt
 800da6e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800da72:	4680      	mov	r8, r0
 800da74:	9305      	str	r3, [sp, #20]
 800da76:	f001 fabd 	bl	800eff4 <uxr_millis>
 800da7a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800da7e:	4681      	mov	r9, r0
 800da80:	2a00      	cmp	r2, #0
 800da82:	f000 80a1 	beq.w	800dbc8 <listen_message_reliably+0x164>
 800da86:	2600      	movs	r6, #0
 800da88:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800da8c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800da90:	9303      	str	r3, [sp, #12]
 800da92:	4630      	mov	r0, r6
 800da94:	460f      	mov	r7, r1
 800da96:	e00f      	b.n	800dab8 <listen_message_reliably+0x54>
 800da98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800da9c:	9903      	ldr	r1, [sp, #12]
 800da9e:	455a      	cmp	r2, fp
 800daa0:	f106 0601 	add.w	r6, r6, #1
 800daa4:	eb73 0101 	sbcs.w	r1, r3, r1
 800daa8:	b2f0      	uxtb	r0, r6
 800daaa:	da01      	bge.n	800dab0 <listen_message_reliably+0x4c>
 800daac:	4693      	mov	fp, r2
 800daae:	9303      	str	r3, [sp, #12]
 800dab0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800dab4:	4283      	cmp	r3, r0
 800dab6:	d960      	bls.n	800db7a <listen_message_reliably+0x116>
 800dab8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800dabc:	2102      	movs	r1, #2
 800dabe:	2201      	movs	r2, #1
 800dac0:	f001 f930 	bl	800ed24 <uxr_stream_id>
 800dac4:	00e4      	lsls	r4, r4, #3
 800dac6:	f104 0520 	add.w	r5, r4, #32
 800daca:	4445      	add	r5, r8
 800dacc:	4601      	mov	r1, r0
 800dace:	463b      	mov	r3, r7
 800dad0:	464a      	mov	r2, r9
 800dad2:	4628      	mov	r0, r5
 800dad4:	9109      	str	r1, [sp, #36]	@ 0x24
 800dad6:	f003 fd61 	bl	801159c <uxr_update_output_stream_heartbeat_timestamp>
 800dada:	eb08 0304 	add.w	r3, r8, r4
 800dade:	2800      	cmp	r0, #0
 800dae0:	d0da      	beq.n	800da98 <listen_message_reliably+0x34>
 800dae2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800dae6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800daea:	9304      	str	r3, [sp, #16]
 800daec:	4640      	mov	r0, r8
 800daee:	f000 fc4f 	bl	800e390 <uxr_session_header_offset>
 800daf2:	3501      	adds	r5, #1
 800daf4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800daf8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800dafc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800db00:	2300      	movs	r3, #0
 800db02:	2211      	movs	r2, #17
 800db04:	9000      	str	r0, [sp, #0]
 800db06:	a90c      	add	r1, sp, #48	@ 0x30
 800db08:	4650      	mov	r0, sl
 800db0a:	f7fb ffb7 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 800db0e:	2300      	movs	r3, #0
 800db10:	2205      	movs	r2, #5
 800db12:	210b      	movs	r1, #11
 800db14:	4650      	mov	r0, sl
 800db16:	f001 fa27 	bl	800ef68 <uxr_buffer_submessage_header>
 800db1a:	8968      	ldrh	r0, [r5, #10]
 800db1c:	2101      	movs	r1, #1
 800db1e:	f003 fdd5 	bl	80116cc <uxr_seq_num_add>
 800db22:	892b      	ldrh	r3, [r5, #8]
 800db24:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800db28:	4602      	mov	r2, r0
 800db2a:	9b04      	ldr	r3, [sp, #16]
 800db2c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800db30:	a90a      	add	r1, sp, #40	@ 0x28
 800db32:	4650      	mov	r0, sl
 800db34:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800db38:	f002 f98c 	bl	800fe54 <uxr_serialize_HEARTBEAT_Payload>
 800db3c:	2200      	movs	r2, #0
 800db3e:	4611      	mov	r1, r2
 800db40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800db42:	4640      	mov	r0, r8
 800db44:	f000 fbce 	bl	800e2e4 <uxr_stamp_session_header>
 800db48:	4650      	mov	r0, sl
 800db4a:	f7fb ffd5 	bl	8009af8 <ucdr_buffer_length>
 800db4e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800db52:	4602      	mov	r2, r0
 800db54:	a90c      	add	r1, sp, #48	@ 0x30
 800db56:	e9d3 0500 	ldrd	r0, r5, [r3]
 800db5a:	4444      	add	r4, r8
 800db5c:	47a8      	blx	r5
 800db5e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800db62:	9903      	ldr	r1, [sp, #12]
 800db64:	455a      	cmp	r2, fp
 800db66:	f106 0601 	add.w	r6, r6, #1
 800db6a:	eb73 0101 	sbcs.w	r1, r3, r1
 800db6e:	b2f0      	uxtb	r0, r6
 800db70:	db9c      	blt.n	800daac <listen_message_reliably+0x48>
 800db72:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800db76:	4283      	cmp	r3, r0
 800db78:	d89e      	bhi.n	800dab8 <listen_message_reliably+0x54>
 800db7a:	9a03      	ldr	r2, [sp, #12]
 800db7c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800db80:	429a      	cmp	r2, r3
 800db82:	bf08      	it	eq
 800db84:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800db88:	d01e      	beq.n	800dbc8 <listen_message_reliably+0x164>
 800db8a:	ebab 0309 	sub.w	r3, fp, r9
 800db8e:	9905      	ldr	r1, [sp, #20]
 800db90:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800db94:	2b00      	cmp	r3, #0
 800db96:	bf08      	it	eq
 800db98:	2301      	moveq	r3, #1
 800db9a:	4299      	cmp	r1, r3
 800db9c:	bfa8      	it	ge
 800db9e:	4619      	movge	r1, r3
 800dba0:	6894      	ldr	r4, [r2, #8]
 800dba2:	6810      	ldr	r0, [r2, #0]
 800dba4:	4689      	mov	r9, r1
 800dba6:	460b      	mov	r3, r1
 800dba8:	aa08      	add	r2, sp, #32
 800dbaa:	a907      	add	r1, sp, #28
 800dbac:	47a0      	blx	r4
 800dbae:	b968      	cbnz	r0, 800dbcc <listen_message_reliably+0x168>
 800dbb0:	9b05      	ldr	r3, [sp, #20]
 800dbb2:	eba3 0309 	sub.w	r3, r3, r9
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	9305      	str	r3, [sp, #20]
 800dbba:	f73f af5c 	bgt.w	800da76 <listen_message_reliably+0x12>
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	b01d      	add	sp, #116	@ 0x74
 800dbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc8:	9b05      	ldr	r3, [sp, #20]
 800dbca:	e7e0      	b.n	800db8e <listen_message_reliably+0x12a>
 800dbcc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	a80c      	add	r0, sp, #48	@ 0x30
 800dbd4:	f7fb ff64 	bl	8009aa0 <ucdr_init_buffer>
 800dbd8:	2500      	movs	r5, #0
 800dbda:	f10d 031a 	add.w	r3, sp, #26
 800dbde:	aa06      	add	r2, sp, #24
 800dbe0:	a90c      	add	r1, sp, #48	@ 0x30
 800dbe2:	4640      	mov	r0, r8
 800dbe4:	f88d 5018 	strb.w	r5, [sp, #24]
 800dbe8:	f000 fb90 	bl	800e30c <uxr_read_session_header>
 800dbec:	b918      	cbnz	r0, 800dbf6 <listen_message_reliably+0x192>
 800dbee:	4620      	mov	r0, r4
 800dbf0:	b01d      	add	sp, #116	@ 0x74
 800dbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dbfc:	f001 f8bc 	bl	800ed78 <uxr_stream_id_from_raw>
 800dc00:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800dc04:	2d01      	cmp	r5, #1
 800dc06:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800dc0a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800dc0e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dc12:	d04b      	beq.n	800dcac <listen_message_reliably+0x248>
 800dc14:	2d02      	cmp	r5, #2
 800dc16:	d00f      	beq.n	800dc38 <listen_message_reliably+0x1d4>
 800dc18:	2d00      	cmp	r5, #0
 800dc1a:	d1e8      	bne.n	800dbee <listen_message_reliably+0x18a>
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f001 f8aa 	bl	800ed78 <uxr_stream_id_from_raw>
 800dc24:	a90c      	add	r1, sp, #48	@ 0x30
 800dc26:	4602      	mov	r2, r0
 800dc28:	4640      	mov	r0, r8
 800dc2a:	920a      	str	r2, [sp, #40]	@ 0x28
 800dc2c:	f7ff fd92 	bl	800d754 <read_submessage_list>
 800dc30:	4620      	mov	r0, r4
 800dc32:	b01d      	add	sp, #116	@ 0x74
 800dc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc38:	4631      	mov	r1, r6
 800dc3a:	f108 0008 	add.w	r0, r8, #8
 800dc3e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800dc42:	f001 f987 	bl	800ef54 <uxr_get_input_reliable_stream>
 800dc46:	4607      	mov	r7, r0
 800dc48:	b338      	cbz	r0, 800dc9a <listen_message_reliably+0x236>
 800dc4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc4c:	9203      	str	r2, [sp, #12]
 800dc4e:	a80c      	add	r0, sp, #48	@ 0x30
 800dc50:	f7fb ff56 	bl	8009b00 <ucdr_buffer_remaining>
 800dc54:	4603      	mov	r3, r0
 800dc56:	f10d 0019 	add.w	r0, sp, #25
 800dc5a:	9000      	str	r0, [sp, #0]
 800dc5c:	9a03      	ldr	r2, [sp, #12]
 800dc5e:	4651      	mov	r1, sl
 800dc60:	4638      	mov	r0, r7
 800dc62:	f003 f8b1 	bl	8010dc8 <uxr_receive_reliable_message>
 800dc66:	b1c0      	cbz	r0, 800dc9a <listen_message_reliably+0x236>
 800dc68:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800dc6c:	b393      	cbz	r3, 800dcd4 <listen_message_reliably+0x270>
 800dc6e:	ad14      	add	r5, sp, #80	@ 0x50
 800dc70:	f04f 0a02 	mov.w	sl, #2
 800dc74:	e00a      	b.n	800dc8c <listen_message_reliably+0x228>
 800dc76:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800dc7a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800dc7e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800dc82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc84:	4629      	mov	r1, r5
 800dc86:	4640      	mov	r0, r8
 800dc88:	f7ff fd64 	bl	800d754 <read_submessage_list>
 800dc8c:	2204      	movs	r2, #4
 800dc8e:	4629      	mov	r1, r5
 800dc90:	4638      	mov	r0, r7
 800dc92:	f003 f919 	bl	8010ec8 <uxr_next_input_reliable_buffer_available>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	d1ed      	bne.n	800dc76 <listen_message_reliably+0x212>
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	4632      	mov	r2, r6
 800dc9e:	4649      	mov	r1, r9
 800dca0:	f7ff fbd2 	bl	800d448 <write_submessage_acknack.isra.0>
 800dca4:	4620      	mov	r0, r4
 800dca6:	b01d      	add	sp, #116	@ 0x74
 800dca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcac:	4631      	mov	r1, r6
 800dcae:	f108 0008 	add.w	r0, r8, #8
 800dcb2:	f001 f945 	bl	800ef40 <uxr_get_input_best_effort_stream>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	d099      	beq.n	800dbee <listen_message_reliably+0x18a>
 800dcba:	4651      	mov	r1, sl
 800dcbc:	f002 fff0 	bl	8010ca0 <uxr_receive_best_effort_message>
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d094      	beq.n	800dbee <listen_message_reliably+0x18a>
 800dcc4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800dcc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcca:	a90c      	add	r1, sp, #48	@ 0x30
 800dccc:	4640      	mov	r0, r8
 800dcce:	f7ff fd41 	bl	800d754 <read_submessage_list>
 800dcd2:	e78c      	b.n	800dbee <listen_message_reliably+0x18a>
 800dcd4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800dcd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcda:	a90c      	add	r1, sp, #48	@ 0x30
 800dcdc:	4640      	mov	r0, r8
 800dcde:	f7ff fd39 	bl	800d754 <read_submessage_list>
 800dce2:	e7c4      	b.n	800dc6e <listen_message_reliably+0x20a>

0800dce4 <uxr_run_session_until_all_status>:
 800dce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dce8:	9c08      	ldr	r4, [sp, #32]
 800dcea:	4606      	mov	r6, r0
 800dcec:	460f      	mov	r7, r1
 800dcee:	4691      	mov	r9, r2
 800dcf0:	461d      	mov	r5, r3
 800dcf2:	f7ff fc71 	bl	800d5d8 <uxr_flash_output_streams>
 800dcf6:	b124      	cbz	r4, 800dd02 <uxr_run_session_until_all_status+0x1e>
 800dcf8:	4622      	mov	r2, r4
 800dcfa:	21ff      	movs	r1, #255	@ 0xff
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	f004 f8df 	bl	8011ec0 <memset>
 800dd02:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800dd06:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800dd08:	f001 f974 	bl	800eff4 <uxr_millis>
 800dd0c:	3d01      	subs	r5, #1
 800dd0e:	f1a9 0902 	sub.w	r9, r9, #2
 800dd12:	4680      	mov	r8, r0
 800dd14:	4639      	mov	r1, r7
 800dd16:	4630      	mov	r0, r6
 800dd18:	f7ff fea4 	bl	800da64 <listen_message_reliably>
 800dd1c:	f001 f96a 	bl	800eff4 <uxr_millis>
 800dd20:	eba0 0008 	sub.w	r0, r0, r8
 800dd24:	1a39      	subs	r1, r7, r0
 800dd26:	b344      	cbz	r4, 800dd7a <uxr_run_session_until_all_status+0x96>
 800dd28:	4628      	mov	r0, r5
 800dd2a:	46ac      	mov	ip, r5
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e002      	b.n	800dd36 <uxr_run_session_until_all_status+0x52>
 800dd30:	42a3      	cmp	r3, r4
 800dd32:	d20d      	bcs.n	800dd50 <uxr_run_session_until_all_status+0x6c>
 800dd34:	3301      	adds	r3, #1
 800dd36:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800dd3a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800dd3e:	d1f7      	bne.n	800dd30 <uxr_run_session_until_all_status+0x4c>
 800dd40:	42a3      	cmp	r3, r4
 800dd42:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800dd46:	d213      	bcs.n	800dd70 <uxr_run_session_until_all_status+0x8c>
 800dd48:	2a00      	cmp	r2, #0
 800dd4a:	d0f3      	beq.n	800dd34 <uxr_run_session_until_all_status+0x50>
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	dce2      	bgt.n	800dd16 <uxr_run_session_until_all_status+0x32>
 800dd50:	2300      	movs	r3, #0
 800dd52:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800dd54:	442c      	add	r4, r5
 800dd56:	e001      	b.n	800dd5c <uxr_run_session_until_all_status+0x78>
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d812      	bhi.n	800dd82 <uxr_run_session_until_all_status+0x9e>
 800dd5c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800dd60:	4284      	cmp	r4, r0
 800dd62:	d1f9      	bne.n	800dd58 <uxr_run_session_until_all_status+0x74>
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	bf8c      	ite	hi
 800dd68:	2000      	movhi	r0, #0
 800dd6a:	2001      	movls	r0, #1
 800dd6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd70:	2900      	cmp	r1, #0
 800dd72:	dded      	ble.n	800dd50 <uxr_run_session_until_all_status+0x6c>
 800dd74:	2a00      	cmp	r2, #0
 800dd76:	d1ce      	bne.n	800dd16 <uxr_run_session_until_all_status+0x32>
 800dd78:	e7ea      	b.n	800dd50 <uxr_run_session_until_all_status+0x6c>
 800dd7a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800dd7c:	2001      	movs	r0, #1
 800dd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd82:	2000      	movs	r0, #0
 800dd84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dd88 <wait_session_status>:
 800dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	b09d      	sub	sp, #116	@ 0x74
 800dd90:	20ff      	movs	r0, #255	@ 0xff
 800dd92:	7160      	strb	r0, [r4, #5]
 800dd94:	9303      	str	r3, [sp, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f000 80b6 	beq.w	800df08 <wait_session_status+0x180>
 800dd9c:	468a      	mov	sl, r1
 800dd9e:	4691      	mov	r9, r2
 800dda0:	f04f 0b00 	mov.w	fp, #0
 800dda4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dda6:	464a      	mov	r2, r9
 800dda8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ddac:	4651      	mov	r1, sl
 800ddae:	47a8      	blx	r5
 800ddb0:	f001 f920 	bl	800eff4 <uxr_millis>
 800ddb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ddb8:	4605      	mov	r5, r0
 800ddba:	e009      	b.n	800ddd0 <wait_session_status+0x48>
 800ddbc:	f001 f91a 	bl	800eff4 <uxr_millis>
 800ddc0:	1b40      	subs	r0, r0, r5
 800ddc2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	dd40      	ble.n	800de4c <wait_session_status+0xc4>
 800ddca:	7960      	ldrb	r0, [r4, #5]
 800ddcc:	28ff      	cmp	r0, #255	@ 0xff
 800ddce:	d145      	bne.n	800de5c <wait_session_status+0xd4>
 800ddd0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800ddd2:	a908      	add	r1, sp, #32
 800ddd4:	6896      	ldr	r6, [r2, #8]
 800ddd6:	6810      	ldr	r0, [r2, #0]
 800ddd8:	aa09      	add	r2, sp, #36	@ 0x24
 800ddda:	47b0      	blx	r6
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d0ed      	beq.n	800ddbc <wait_session_status+0x34>
 800dde0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800dde4:	a80c      	add	r0, sp, #48	@ 0x30
 800dde6:	f7fb fe5b 	bl	8009aa0 <ucdr_init_buffer>
 800ddea:	2600      	movs	r6, #0
 800ddec:	f10d 031e 	add.w	r3, sp, #30
 800ddf0:	aa07      	add	r2, sp, #28
 800ddf2:	a90c      	add	r1, sp, #48	@ 0x30
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f88d 601c 	strb.w	r6, [sp, #28]
 800ddfa:	f000 fa87 	bl	800e30c <uxr_read_session_header>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d0dc      	beq.n	800ddbc <wait_session_status+0x34>
 800de02:	4631      	mov	r1, r6
 800de04:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800de08:	f000 ffb6 	bl	800ed78 <uxr_stream_id_from_raw>
 800de0c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800de10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800de14:	9302      	str	r3, [sp, #8]
 800de16:	2f01      	cmp	r7, #1
 800de18:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800de1c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800de20:	d05c      	beq.n	800dedc <wait_session_status+0x154>
 800de22:	2f02      	cmp	r7, #2
 800de24:	d020      	beq.n	800de68 <wait_session_status+0xe0>
 800de26:	2f00      	cmp	r7, #0
 800de28:	d1c8      	bne.n	800ddbc <wait_session_status+0x34>
 800de2a:	4639      	mov	r1, r7
 800de2c:	4638      	mov	r0, r7
 800de2e:	f000 ffa3 	bl	800ed78 <uxr_stream_id_from_raw>
 800de32:	a90c      	add	r1, sp, #48	@ 0x30
 800de34:	4602      	mov	r2, r0
 800de36:	900b      	str	r0, [sp, #44]	@ 0x2c
 800de38:	4620      	mov	r0, r4
 800de3a:	f7ff fc8b 	bl	800d754 <read_submessage_list>
 800de3e:	f001 f8d9 	bl	800eff4 <uxr_millis>
 800de42:	1b40      	subs	r0, r0, r5
 800de44:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800de48:	2b00      	cmp	r3, #0
 800de4a:	dcbe      	bgt.n	800ddca <wait_session_status+0x42>
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	7960      	ldrb	r0, [r4, #5]
 800de50:	f10b 0b01 	add.w	fp, fp, #1
 800de54:	455b      	cmp	r3, fp
 800de56:	d001      	beq.n	800de5c <wait_session_status+0xd4>
 800de58:	28ff      	cmp	r0, #255	@ 0xff
 800de5a:	d0a3      	beq.n	800dda4 <wait_session_status+0x1c>
 800de5c:	38ff      	subs	r0, #255	@ 0xff
 800de5e:	bf18      	it	ne
 800de60:	2001      	movne	r0, #1
 800de62:	b01d      	add	sp, #116	@ 0x74
 800de64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de68:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800de6c:	9304      	str	r3, [sp, #16]
 800de6e:	4631      	mov	r1, r6
 800de70:	f104 0008 	add.w	r0, r4, #8
 800de74:	f001 f86e 	bl	800ef54 <uxr_get_input_reliable_stream>
 800de78:	4680      	mov	r8, r0
 800de7a:	b348      	cbz	r0, 800ded0 <wait_session_status+0x148>
 800de7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de7e:	9205      	str	r2, [sp, #20]
 800de80:	a80c      	add	r0, sp, #48	@ 0x30
 800de82:	f7fb fe3d 	bl	8009b00 <ucdr_buffer_remaining>
 800de86:	4603      	mov	r3, r0
 800de88:	f10d 001d 	add.w	r0, sp, #29
 800de8c:	9000      	str	r0, [sp, #0]
 800de8e:	9a05      	ldr	r2, [sp, #20]
 800de90:	9902      	ldr	r1, [sp, #8]
 800de92:	4640      	mov	r0, r8
 800de94:	f002 ff98 	bl	8010dc8 <uxr_receive_reliable_message>
 800de98:	b1d0      	cbz	r0, 800ded0 <wait_session_status+0x148>
 800de9a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d03a      	beq.n	800df18 <wait_session_status+0x190>
 800dea2:	9f04      	ldr	r7, [sp, #16]
 800dea4:	e00a      	b.n	800debc <wait_session_status+0x134>
 800dea6:	f04f 0302 	mov.w	r3, #2
 800deaa:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800deae:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800deb2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800deb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800deb8:	f7ff fc4c 	bl	800d754 <read_submessage_list>
 800debc:	a914      	add	r1, sp, #80	@ 0x50
 800debe:	2204      	movs	r2, #4
 800dec0:	4640      	mov	r0, r8
 800dec2:	f003 f801 	bl	8010ec8 <uxr_next_input_reliable_buffer_available>
 800dec6:	4603      	mov	r3, r0
 800dec8:	a914      	add	r1, sp, #80	@ 0x50
 800deca:	4620      	mov	r0, r4
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1ea      	bne.n	800dea6 <wait_session_status+0x11e>
 800ded0:	9904      	ldr	r1, [sp, #16]
 800ded2:	4632      	mov	r2, r6
 800ded4:	4620      	mov	r0, r4
 800ded6:	f7ff fab7 	bl	800d448 <write_submessage_acknack.isra.0>
 800deda:	e76f      	b.n	800ddbc <wait_session_status+0x34>
 800dedc:	4631      	mov	r1, r6
 800dede:	f104 0008 	add.w	r0, r4, #8
 800dee2:	f001 f82d 	bl	800ef40 <uxr_get_input_best_effort_stream>
 800dee6:	2800      	cmp	r0, #0
 800dee8:	f43f af68 	beq.w	800ddbc <wait_session_status+0x34>
 800deec:	9902      	ldr	r1, [sp, #8]
 800deee:	f002 fed7 	bl	8010ca0 <uxr_receive_best_effort_message>
 800def2:	2800      	cmp	r0, #0
 800def4:	f43f af62 	beq.w	800ddbc <wait_session_status+0x34>
 800def8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800defc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800defe:	a90c      	add	r1, sp, #48	@ 0x30
 800df00:	4620      	mov	r0, r4
 800df02:	f7ff fc27 	bl	800d754 <read_submessage_list>
 800df06:	e759      	b.n	800ddbc <wait_session_status+0x34>
 800df08:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df0a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800df0e:	47a0      	blx	r4
 800df10:	2001      	movs	r0, #1
 800df12:	b01d      	add	sp, #116	@ 0x74
 800df14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df18:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800df1c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800df1e:	a90c      	add	r1, sp, #48	@ 0x30
 800df20:	4620      	mov	r0, r4
 800df22:	f7ff fc17 	bl	800d754 <read_submessage_list>
 800df26:	e7bc      	b.n	800dea2 <wait_session_status+0x11a>

0800df28 <uxr_delete_session_retries>:
 800df28:	b530      	push	{r4, r5, lr}
 800df2a:	b08f      	sub	sp, #60	@ 0x3c
 800df2c:	4604      	mov	r4, r0
 800df2e:	460d      	mov	r5, r1
 800df30:	f000 fa2e 	bl	800e390 <uxr_session_header_offset>
 800df34:	2300      	movs	r3, #0
 800df36:	2210      	movs	r2, #16
 800df38:	9000      	str	r0, [sp, #0]
 800df3a:	a902      	add	r1, sp, #8
 800df3c:	a806      	add	r0, sp, #24
 800df3e:	f7fb fd9d 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 800df42:	a906      	add	r1, sp, #24
 800df44:	4620      	mov	r0, r4
 800df46:	f000 f973 	bl	800e230 <uxr_buffer_delete_session>
 800df4a:	2200      	movs	r2, #0
 800df4c:	4611      	mov	r1, r2
 800df4e:	9b06      	ldr	r3, [sp, #24]
 800df50:	4620      	mov	r0, r4
 800df52:	f000 f9c7 	bl	800e2e4 <uxr_stamp_session_header>
 800df56:	a806      	add	r0, sp, #24
 800df58:	f7fb fdce 	bl	8009af8 <ucdr_buffer_length>
 800df5c:	462b      	mov	r3, r5
 800df5e:	4602      	mov	r2, r0
 800df60:	a902      	add	r1, sp, #8
 800df62:	4620      	mov	r0, r4
 800df64:	f7ff ff10 	bl	800dd88 <wait_session_status>
 800df68:	b118      	cbz	r0, 800df72 <uxr_delete_session_retries+0x4a>
 800df6a:	7960      	ldrb	r0, [r4, #5]
 800df6c:	fab0 f080 	clz	r0, r0
 800df70:	0940      	lsrs	r0, r0, #5
 800df72:	b00f      	add	sp, #60	@ 0x3c
 800df74:	bd30      	pop	{r4, r5, pc}
 800df76:	bf00      	nop

0800df78 <uxr_create_session>:
 800df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7c:	f100 0b08 	add.w	fp, r0, #8
 800df80:	b0ab      	sub	sp, #172	@ 0xac
 800df82:	4604      	mov	r4, r0
 800df84:	4658      	mov	r0, fp
 800df86:	f000 ff2b 	bl	800ede0 <uxr_reset_stream_storage>
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 fa00 	bl	800e390 <uxr_session_header_offset>
 800df90:	2300      	movs	r3, #0
 800df92:	9000      	str	r0, [sp, #0]
 800df94:	221c      	movs	r2, #28
 800df96:	a90b      	add	r1, sp, #44	@ 0x2c
 800df98:	a812      	add	r0, sp, #72	@ 0x48
 800df9a:	f7fb fd6f 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 800df9e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dfa0:	8a1a      	ldrh	r2, [r3, #16]
 800dfa2:	3a04      	subs	r2, #4
 800dfa4:	b292      	uxth	r2, r2
 800dfa6:	a912      	add	r1, sp, #72	@ 0x48
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f000 f917 	bl	800e1dc <uxr_buffer_create_session>
 800dfae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f000 f983 	bl	800e2bc <uxr_stamp_create_session_header>
 800dfb6:	a812      	add	r0, sp, #72	@ 0x48
 800dfb8:	f7fb fd9e 	bl	8009af8 <ucdr_buffer_length>
 800dfbc:	23ff      	movs	r3, #255	@ 0xff
 800dfbe:	7163      	strb	r3, [r4, #5]
 800dfc0:	230a      	movs	r3, #10
 800dfc2:	46da      	mov	sl, fp
 800dfc4:	9303      	str	r3, [sp, #12]
 800dfc6:	4683      	mov	fp, r0
 800dfc8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dfca:	465a      	mov	r2, fp
 800dfcc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dfd0:	a90b      	add	r1, sp, #44	@ 0x2c
 800dfd2:	47a8      	blx	r5
 800dfd4:	f001 f80e 	bl	800eff4 <uxr_millis>
 800dfd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dfdc:	4605      	mov	r5, r0
 800dfde:	e009      	b.n	800dff4 <uxr_create_session+0x7c>
 800dfe0:	f001 f808 	bl	800eff4 <uxr_millis>
 800dfe4:	1b40      	subs	r0, r0, r5
 800dfe6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	7962      	ldrb	r2, [r4, #5]
 800dfee:	dd38      	ble.n	800e062 <uxr_create_session+0xea>
 800dff0:	2aff      	cmp	r2, #255	@ 0xff
 800dff2:	d13c      	bne.n	800e06e <uxr_create_session+0xf6>
 800dff4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800dff6:	a907      	add	r1, sp, #28
 800dff8:	6896      	ldr	r6, [r2, #8]
 800dffa:	6810      	ldr	r0, [r2, #0]
 800dffc:	aa08      	add	r2, sp, #32
 800dffe:	47b0      	blx	r6
 800e000:	2800      	cmp	r0, #0
 800e002:	d0ed      	beq.n	800dfe0 <uxr_create_session+0x68>
 800e004:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e008:	a81a      	add	r0, sp, #104	@ 0x68
 800e00a:	f7fb fd49 	bl	8009aa0 <ucdr_init_buffer>
 800e00e:	2600      	movs	r6, #0
 800e010:	f10d 031a 	add.w	r3, sp, #26
 800e014:	aa06      	add	r2, sp, #24
 800e016:	a91a      	add	r1, sp, #104	@ 0x68
 800e018:	4620      	mov	r0, r4
 800e01a:	f88d 6018 	strb.w	r6, [sp, #24]
 800e01e:	f000 f975 	bl	800e30c <uxr_read_session_header>
 800e022:	2800      	cmp	r0, #0
 800e024:	d0dc      	beq.n	800dfe0 <uxr_create_session+0x68>
 800e026:	4631      	mov	r1, r6
 800e028:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e02c:	f000 fea4 	bl	800ed78 <uxr_stream_id_from_raw>
 800e030:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e034:	2e01      	cmp	r6, #1
 800e036:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e03a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e03e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e042:	d053      	beq.n	800e0ec <uxr_create_session+0x174>
 800e044:	2e02      	cmp	r6, #2
 800e046:	d018      	beq.n	800e07a <uxr_create_session+0x102>
 800e048:	2e00      	cmp	r6, #0
 800e04a:	d1c9      	bne.n	800dfe0 <uxr_create_session+0x68>
 800e04c:	4631      	mov	r1, r6
 800e04e:	4630      	mov	r0, r6
 800e050:	f000 fe92 	bl	800ed78 <uxr_stream_id_from_raw>
 800e054:	a91a      	add	r1, sp, #104	@ 0x68
 800e056:	4602      	mov	r2, r0
 800e058:	900a      	str	r0, [sp, #40]	@ 0x28
 800e05a:	4620      	mov	r0, r4
 800e05c:	f7ff fb7a 	bl	800d754 <read_submessage_list>
 800e060:	e7be      	b.n	800dfe0 <uxr_create_session+0x68>
 800e062:	9b03      	ldr	r3, [sp, #12]
 800e064:	3b01      	subs	r3, #1
 800e066:	9303      	str	r3, [sp, #12]
 800e068:	d001      	beq.n	800e06e <uxr_create_session+0xf6>
 800e06a:	2aff      	cmp	r2, #255	@ 0xff
 800e06c:	d0ac      	beq.n	800dfc8 <uxr_create_session+0x50>
 800e06e:	2a00      	cmp	r2, #0
 800e070:	d051      	beq.n	800e116 <uxr_create_session+0x19e>
 800e072:	2000      	movs	r0, #0
 800e074:	b02b      	add	sp, #172	@ 0xac
 800e076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e07e:	9304      	str	r3, [sp, #16]
 800e080:	4639      	mov	r1, r7
 800e082:	4650      	mov	r0, sl
 800e084:	f000 ff66 	bl	800ef54 <uxr_get_input_reliable_stream>
 800e088:	4680      	mov	r8, r0
 800e08a:	b348      	cbz	r0, 800e0e0 <uxr_create_session+0x168>
 800e08c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e08e:	9205      	str	r2, [sp, #20]
 800e090:	a81a      	add	r0, sp, #104	@ 0x68
 800e092:	f7fb fd35 	bl	8009b00 <ucdr_buffer_remaining>
 800e096:	4603      	mov	r3, r0
 800e098:	f10d 0019 	add.w	r0, sp, #25
 800e09c:	9000      	str	r0, [sp, #0]
 800e09e:	9a05      	ldr	r2, [sp, #20]
 800e0a0:	4649      	mov	r1, r9
 800e0a2:	4640      	mov	r0, r8
 800e0a4:	f002 fe90 	bl	8010dc8 <uxr_receive_reliable_message>
 800e0a8:	b1d0      	cbz	r0, 800e0e0 <uxr_create_session+0x168>
 800e0aa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d038      	beq.n	800e124 <uxr_create_session+0x1ac>
 800e0b2:	9e04      	ldr	r6, [sp, #16]
 800e0b4:	e00a      	b.n	800e0cc <uxr_create_session+0x154>
 800e0b6:	f04f 0302 	mov.w	r3, #2
 800e0ba:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e0be:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e0c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0c8:	f7ff fb44 	bl	800d754 <read_submessage_list>
 800e0cc:	a922      	add	r1, sp, #136	@ 0x88
 800e0ce:	2204      	movs	r2, #4
 800e0d0:	4640      	mov	r0, r8
 800e0d2:	f002 fef9 	bl	8010ec8 <uxr_next_input_reliable_buffer_available>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	a922      	add	r1, sp, #136	@ 0x88
 800e0da:	4620      	mov	r0, r4
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d1ea      	bne.n	800e0b6 <uxr_create_session+0x13e>
 800e0e0:	9904      	ldr	r1, [sp, #16]
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f7ff f9af 	bl	800d448 <write_submessage_acknack.isra.0>
 800e0ea:	e779      	b.n	800dfe0 <uxr_create_session+0x68>
 800e0ec:	4639      	mov	r1, r7
 800e0ee:	4650      	mov	r0, sl
 800e0f0:	f000 ff26 	bl	800ef40 <uxr_get_input_best_effort_stream>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	f43f af73 	beq.w	800dfe0 <uxr_create_session+0x68>
 800e0fa:	4649      	mov	r1, r9
 800e0fc:	f002 fdd0 	bl	8010ca0 <uxr_receive_best_effort_message>
 800e100:	2800      	cmp	r0, #0
 800e102:	f43f af6d 	beq.w	800dfe0 <uxr_create_session+0x68>
 800e106:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e10a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e10c:	a91a      	add	r1, sp, #104	@ 0x68
 800e10e:	4620      	mov	r0, r4
 800e110:	f7ff fb20 	bl	800d754 <read_submessage_list>
 800e114:	e764      	b.n	800dfe0 <uxr_create_session+0x68>
 800e116:	4650      	mov	r0, sl
 800e118:	f000 fe62 	bl	800ede0 <uxr_reset_stream_storage>
 800e11c:	2001      	movs	r0, #1
 800e11e:	b02b      	add	sp, #172	@ 0xac
 800e120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e124:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e128:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e12a:	a91a      	add	r1, sp, #104	@ 0x68
 800e12c:	4620      	mov	r0, r4
 800e12e:	f7ff fb11 	bl	800d754 <read_submessage_list>
 800e132:	e7be      	b.n	800e0b2 <uxr_create_session+0x13a>

0800e134 <uxr_prepare_stream_to_write_submessage>:
 800e134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e138:	b082      	sub	sp, #8
 800e13a:	4682      	mov	sl, r0
 800e13c:	4610      	mov	r0, r2
 800e13e:	4615      	mov	r5, r2
 800e140:	461e      	mov	r6, r3
 800e142:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e146:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e14a:	9101      	str	r1, [sp, #4]
 800e14c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e150:	f000 ff4a 	bl	800efe8 <uxr_submessage_padding>
 800e154:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e158:	f105 0904 	add.w	r9, r5, #4
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	4481      	add	r9, r0
 800e160:	d01d      	beq.n	800e19e <uxr_prepare_stream_to_write_submessage+0x6a>
 800e162:	2b02      	cmp	r3, #2
 800e164:	d116      	bne.n	800e194 <uxr_prepare_stream_to_write_submessage+0x60>
 800e166:	4621      	mov	r1, r4
 800e168:	f10a 0008 	add.w	r0, sl, #8
 800e16c:	f000 fede 	bl	800ef2c <uxr_get_output_reliable_stream>
 800e170:	4604      	mov	r4, r0
 800e172:	b158      	cbz	r0, 800e18c <uxr_prepare_stream_to_write_submessage+0x58>
 800e174:	4649      	mov	r1, r9
 800e176:	4632      	mov	r2, r6
 800e178:	f003 f862 	bl	8011240 <uxr_prepare_reliable_buffer_to_write>
 800e17c:	4604      	mov	r4, r0
 800e17e:	b12c      	cbz	r4, 800e18c <uxr_prepare_stream_to_write_submessage+0x58>
 800e180:	4643      	mov	r3, r8
 800e182:	b2aa      	uxth	r2, r5
 800e184:	4639      	mov	r1, r7
 800e186:	4630      	mov	r0, r6
 800e188:	f000 feee 	bl	800ef68 <uxr_buffer_submessage_header>
 800e18c:	4620      	mov	r0, r4
 800e18e:	b002      	add	sp, #8
 800e190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e194:	2400      	movs	r4, #0
 800e196:	4620      	mov	r0, r4
 800e198:	b002      	add	sp, #8
 800e19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e19e:	4621      	mov	r1, r4
 800e1a0:	f10a 0008 	add.w	r0, sl, #8
 800e1a4:	f000 feba 	bl	800ef1c <uxr_get_output_best_effort_stream>
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d0ee      	beq.n	800e18c <uxr_prepare_stream_to_write_submessage+0x58>
 800e1ae:	4649      	mov	r1, r9
 800e1b0:	4632      	mov	r2, r6
 800e1b2:	f002 ff75 	bl	80110a0 <uxr_prepare_best_effort_buffer_to_write>
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	e7e1      	b.n	800e17e <uxr_prepare_stream_to_write_submessage+0x4a>
 800e1ba:	bf00      	nop

0800e1bc <uxr_init_session_info>:
 800e1bc:	0e13      	lsrs	r3, r2, #24
 800e1be:	7043      	strb	r3, [r0, #1]
 800e1c0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e1c4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e1c8:	7001      	strb	r1, [r0, #0]
 800e1ca:	70c3      	strb	r3, [r0, #3]
 800e1cc:	2109      	movs	r1, #9
 800e1ce:	23ff      	movs	r3, #255	@ 0xff
 800e1d0:	f880 c002 	strb.w	ip, [r0, #2]
 800e1d4:	7102      	strb	r2, [r0, #4]
 800e1d6:	80c1      	strh	r1, [r0, #6]
 800e1d8:	7143      	strb	r3, [r0, #5]
 800e1da:	4770      	bx	lr

0800e1dc <uxr_buffer_create_session>:
 800e1dc:	b530      	push	{r4, r5, lr}
 800e1de:	b089      	sub	sp, #36	@ 0x24
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	4d12      	ldr	r5, [pc, #72]	@ (800e22c <uxr_buffer_create_session+0x50>)
 800e1e4:	9307      	str	r3, [sp, #28]
 800e1e6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	80c2      	strh	r2, [r0, #6]
 800e1f0:	f88d 2004 	strb.w	r2, [sp, #4]
 800e1f4:	682a      	ldr	r2, [r5, #0]
 800e1f6:	9200      	str	r2, [sp, #0]
 800e1f8:	88aa      	ldrh	r2, [r5, #4]
 800e1fa:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e1fe:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e202:	9202      	str	r2, [sp, #8]
 800e204:	460c      	mov	r4, r1
 800e206:	7802      	ldrb	r2, [r0, #0]
 800e208:	9303      	str	r3, [sp, #12]
 800e20a:	4619      	mov	r1, r3
 800e20c:	f88d 200c 	strb.w	r2, [sp, #12]
 800e210:	4620      	mov	r0, r4
 800e212:	2210      	movs	r2, #16
 800e214:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e218:	9306      	str	r3, [sp, #24]
 800e21a:	f000 fea5 	bl	800ef68 <uxr_buffer_submessage_header>
 800e21e:	4669      	mov	r1, sp
 800e220:	4620      	mov	r0, r4
 800e222:	f001 fc89 	bl	800fb38 <uxr_serialize_CREATE_CLIENT_Payload>
 800e226:	b009      	add	sp, #36	@ 0x24
 800e228:	bd30      	pop	{r4, r5, pc}
 800e22a:	bf00      	nop
 800e22c:	08012e7c 	.word	0x08012e7c

0800e230 <uxr_buffer_delete_session>:
 800e230:	b510      	push	{r4, lr}
 800e232:	4b0c      	ldr	r3, [pc, #48]	@ (800e264 <uxr_buffer_delete_session+0x34>)
 800e234:	b082      	sub	sp, #8
 800e236:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e23a:	f8ad c006 	strh.w	ip, [sp, #6]
 800e23e:	460c      	mov	r4, r1
 800e240:	2202      	movs	r2, #2
 800e242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e246:	80c2      	strh	r2, [r0, #6]
 800e248:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e24c:	2204      	movs	r2, #4
 800e24e:	2300      	movs	r3, #0
 800e250:	2103      	movs	r1, #3
 800e252:	4620      	mov	r0, r4
 800e254:	f000 fe88 	bl	800ef68 <uxr_buffer_submessage_header>
 800e258:	a901      	add	r1, sp, #4
 800e25a:	4620      	mov	r0, r4
 800e25c:	f001 fd12 	bl	800fc84 <uxr_serialize_DELETE_Payload>
 800e260:	b002      	add	sp, #8
 800e262:	bd10      	pop	{r4, pc}
 800e264:	08012e7c 	.word	0x08012e7c

0800e268 <uxr_read_create_session_status>:
 800e268:	b510      	push	{r4, lr}
 800e26a:	b088      	sub	sp, #32
 800e26c:	4604      	mov	r4, r0
 800e26e:	4608      	mov	r0, r1
 800e270:	a901      	add	r1, sp, #4
 800e272:	f001 fd17 	bl	800fca4 <uxr_deserialize_STATUS_AGENT_Payload>
 800e276:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e27a:	7163      	strb	r3, [r4, #5]
 800e27c:	b008      	add	sp, #32
 800e27e:	bd10      	pop	{r4, pc}

0800e280 <uxr_read_delete_session_status>:
 800e280:	b510      	push	{r4, lr}
 800e282:	4604      	mov	r4, r0
 800e284:	b084      	sub	sp, #16
 800e286:	4608      	mov	r0, r1
 800e288:	a902      	add	r1, sp, #8
 800e28a:	f001 fd3b 	bl	800fd04 <uxr_deserialize_STATUS_Payload>
 800e28e:	88e3      	ldrh	r3, [r4, #6]
 800e290:	2b02      	cmp	r3, #2
 800e292:	d001      	beq.n	800e298 <uxr_read_delete_session_status+0x18>
 800e294:	b004      	add	sp, #16
 800e296:	bd10      	pop	{r4, pc}
 800e298:	f10d 000a 	add.w	r0, sp, #10
 800e29c:	f7fe ff2a 	bl	800d0f4 <uxr_object_id_from_raw>
 800e2a0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e2a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e2a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	bf04      	itt	eq
 800e2b2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e2b6:	7163      	strbeq	r3, [r4, #5]
 800e2b8:	b004      	add	sp, #16
 800e2ba:	bd10      	pop	{r4, pc}

0800e2bc <uxr_stamp_create_session_header>:
 800e2bc:	b510      	push	{r4, lr}
 800e2be:	2208      	movs	r2, #8
 800e2c0:	b08a      	sub	sp, #40	@ 0x28
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	eb0d 0002 	add.w	r0, sp, r2
 800e2c8:	f7fb fbea 	bl	8009aa0 <ucdr_init_buffer>
 800e2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d0:	9400      	str	r4, [sp, #0]
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e2da:	a802      	add	r0, sp, #8
 800e2dc:	f000 feba 	bl	800f054 <uxr_serialize_message_header>
 800e2e0:	b00a      	add	sp, #40	@ 0x28
 800e2e2:	bd10      	pop	{r4, pc}

0800e2e4 <uxr_stamp_session_header>:
 800e2e4:	b530      	push	{r4, r5, lr}
 800e2e6:	b08d      	sub	sp, #52	@ 0x34
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	9203      	str	r2, [sp, #12]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	a804      	add	r0, sp, #16
 800e2f2:	2208      	movs	r2, #8
 800e2f4:	f7fb fbd4 	bl	8009aa0 <ucdr_init_buffer>
 800e2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2fc:	9b03      	ldr	r3, [sp, #12]
 800e2fe:	9400      	str	r4, [sp, #0]
 800e300:	462a      	mov	r2, r5
 800e302:	a804      	add	r0, sp, #16
 800e304:	f000 fea6 	bl	800f054 <uxr_serialize_message_header>
 800e308:	b00d      	add	sp, #52	@ 0x34
 800e30a:	bd30      	pop	{r4, r5, pc}

0800e30c <uxr_read_session_header>:
 800e30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e310:	4607      	mov	r7, r0
 800e312:	b084      	sub	sp, #16
 800e314:	4608      	mov	r0, r1
 800e316:	460c      	mov	r4, r1
 800e318:	4615      	mov	r5, r2
 800e31a:	461e      	mov	r6, r3
 800e31c:	f7fb fbf0 	bl	8009b00 <ucdr_buffer_remaining>
 800e320:	2808      	cmp	r0, #8
 800e322:	d803      	bhi.n	800e32c <uxr_read_session_header+0x20>
 800e324:	2000      	movs	r0, #0
 800e326:	b004      	add	sp, #16
 800e328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32c:	f10d 080c 	add.w	r8, sp, #12
 800e330:	4633      	mov	r3, r6
 800e332:	462a      	mov	r2, r5
 800e334:	f8cd 8000 	str.w	r8, [sp]
 800e338:	4620      	mov	r0, r4
 800e33a:	f10d 010b 	add.w	r1, sp, #11
 800e33e:	f000 fea7 	bl	800f090 <uxr_deserialize_message_header>
 800e342:	783a      	ldrb	r2, [r7, #0]
 800e344:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e348:	4293      	cmp	r3, r2
 800e34a:	d1eb      	bne.n	800e324 <uxr_read_session_header+0x18>
 800e34c:	061b      	lsls	r3, r3, #24
 800e34e:	d41c      	bmi.n	800e38a <uxr_read_session_header+0x7e>
 800e350:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e354:	787b      	ldrb	r3, [r7, #1]
 800e356:	429a      	cmp	r2, r3
 800e358:	d003      	beq.n	800e362 <uxr_read_session_header+0x56>
 800e35a:	2001      	movs	r0, #1
 800e35c:	f080 0001 	eor.w	r0, r0, #1
 800e360:	e7e1      	b.n	800e326 <uxr_read_session_header+0x1a>
 800e362:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e366:	78bb      	ldrb	r3, [r7, #2]
 800e368:	429a      	cmp	r2, r3
 800e36a:	f107 0102 	add.w	r1, r7, #2
 800e36e:	d1f4      	bne.n	800e35a <uxr_read_session_header+0x4e>
 800e370:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e374:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e378:	429a      	cmp	r2, r3
 800e37a:	d1ee      	bne.n	800e35a <uxr_read_session_header+0x4e>
 800e37c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e380:	784b      	ldrb	r3, [r1, #1]
 800e382:	429a      	cmp	r2, r3
 800e384:	d1e9      	bne.n	800e35a <uxr_read_session_header+0x4e>
 800e386:	2000      	movs	r0, #0
 800e388:	e7e8      	b.n	800e35c <uxr_read_session_header+0x50>
 800e38a:	2001      	movs	r0, #1
 800e38c:	e7cb      	b.n	800e326 <uxr_read_session_header+0x1a>
 800e38e:	bf00      	nop

0800e390 <uxr_session_header_offset>:
 800e390:	f990 3000 	ldrsb.w	r3, [r0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	bfac      	ite	ge
 800e398:	2008      	movge	r0, #8
 800e39a:	2004      	movlt	r0, #4
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop

0800e3a0 <uxr_init_base_object_request>:
 800e3a0:	b510      	push	{r4, lr}
 800e3a2:	88c3      	ldrh	r3, [r0, #6]
 800e3a4:	b082      	sub	sp, #8
 800e3a6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800e3aa:	9101      	str	r1, [sp, #4]
 800e3ac:	f1a3 010a 	sub.w	r1, r3, #10
 800e3b0:	b289      	uxth	r1, r1
 800e3b2:	42a1      	cmp	r1, r4
 800e3b4:	d80e      	bhi.n	800e3d4 <uxr_init_base_object_request+0x34>
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	b29c      	uxth	r4, r3
 800e3ba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	80c4      	strh	r4, [r0, #6]
 800e3c2:	9801      	ldr	r0, [sp, #4]
 800e3c4:	7011      	strb	r1, [r2, #0]
 800e3c6:	7053      	strb	r3, [r2, #1]
 800e3c8:	1c91      	adds	r1, r2, #2
 800e3ca:	f7fe fea7 	bl	800d11c <uxr_object_id_to_raw>
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	b002      	add	sp, #8
 800e3d2:	bd10      	pop	{r4, pc}
 800e3d4:	230a      	movs	r3, #10
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	461c      	mov	r4, r3
 800e3da:	e7f1      	b.n	800e3c0 <uxr_init_base_object_request+0x20>

0800e3dc <uxr_parse_base_object_request>:
 800e3dc:	b570      	push	{r4, r5, r6, lr}
 800e3de:	4604      	mov	r4, r0
 800e3e0:	3002      	adds	r0, #2
 800e3e2:	460d      	mov	r5, r1
 800e3e4:	4616      	mov	r6, r2
 800e3e6:	f7fe fe85 	bl	800d0f4 <uxr_object_id_from_raw>
 800e3ea:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e3ee:	8028      	strh	r0, [r5, #0]
 800e3f0:	806b      	strh	r3, [r5, #2]
 800e3f2:	7822      	ldrb	r2, [r4, #0]
 800e3f4:	7863      	ldrb	r3, [r4, #1]
 800e3f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e3fa:	8033      	strh	r3, [r6, #0]
 800e3fc:	bd70      	pop	{r4, r5, r6, pc}
 800e3fe:	bf00      	nop

0800e400 <uxr_init_framing_io>:
 800e400:	2300      	movs	r3, #0
 800e402:	7041      	strb	r1, [r0, #1]
 800e404:	7003      	strb	r3, [r0, #0]
 800e406:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop

0800e40c <uxr_write_framed_msg>:
 800e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e410:	4617      	mov	r7, r2
 800e412:	7842      	ldrb	r2, [r0, #1]
 800e414:	b083      	sub	sp, #12
 800e416:	460e      	mov	r6, r1
 800e418:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800e41c:	469a      	mov	sl, r3
 800e41e:	2901      	cmp	r1, #1
 800e420:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800e424:	4604      	mov	r4, r0
 800e426:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800e42a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800e42e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800e432:	f240 8137 	bls.w	800e6a4 <uxr_write_framed_msg+0x298>
 800e436:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800e43a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800e43e:	2901      	cmp	r1, #1
 800e440:	f04f 0202 	mov.w	r2, #2
 800e444:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e448:	f240 808f 	bls.w	800e56a <uxr_write_framed_msg+0x15e>
 800e44c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e44e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800e452:	b2dd      	uxtb	r5, r3
 800e454:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e458:	2203      	movs	r2, #3
 800e45a:	2901      	cmp	r1, #1
 800e45c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e460:	f240 809a 	bls.w	800e598 <uxr_write_framed_msg+0x18c>
 800e464:	18a1      	adds	r1, r4, r2
 800e466:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e468:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800e46c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e470:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800e474:	3201      	adds	r2, #1
 800e476:	2801      	cmp	r0, #1
 800e478:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e47c:	f240 80a0 	bls.w	800e5c0 <uxr_write_framed_msg+0x1b4>
 800e480:	18a0      	adds	r0, r4, r2
 800e482:	3201      	adds	r2, #1
 800e484:	b2d2      	uxtb	r2, r2
 800e486:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e48a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 80a9 	beq.w	800e5e6 <uxr_write_framed_msg+0x1da>
 800e494:	f04f 0900 	mov.w	r9, #0
 800e498:	46c8      	mov	r8, r9
 800e49a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800e49e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e4a2:	2901      	cmp	r1, #1
 800e4a4:	f240 80c3 	bls.w	800e62e <uxr_write_framed_msg+0x222>
 800e4a8:	2a29      	cmp	r2, #41	@ 0x29
 800e4aa:	f200 809f 	bhi.w	800e5ec <uxr_write_framed_msg+0x1e0>
 800e4ae:	18a1      	adds	r1, r4, r2
 800e4b0:	3201      	adds	r2, #1
 800e4b2:	b2d2      	uxtb	r2, r2
 800e4b4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800e4b8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e4bc:	ea89 0303 	eor.w	r3, r9, r3
 800e4c0:	498c      	ldr	r1, [pc, #560]	@ (800e6f4 <uxr_write_framed_msg+0x2e8>)
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	f108 0801 	add.w	r8, r8, #1
 800e4c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e4cc:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800e4d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4d2:	4543      	cmp	r3, r8
 800e4d4:	d8e1      	bhi.n	800e49a <uxr_write_framed_msg+0x8e>
 800e4d6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e4da:	fa5f f889 	uxtb.w	r8, r9
 800e4de:	9301      	str	r3, [sp, #4]
 800e4e0:	f04f 0900 	mov.w	r9, #0
 800e4e4:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800e4e8:	fa5f f18a 	uxtb.w	r1, sl
 800e4ec:	2901      	cmp	r1, #1
 800e4ee:	d921      	bls.n	800e534 <uxr_write_framed_msg+0x128>
 800e4f0:	2a29      	cmp	r2, #41	@ 0x29
 800e4f2:	f240 80af 	bls.w	800e654 <uxr_write_framed_msg+0x248>
 800e4f6:	2500      	movs	r5, #0
 800e4f8:	e000      	b.n	800e4fc <uxr_write_framed_msg+0xf0>
 800e4fa:	b160      	cbz	r0, 800e516 <uxr_write_framed_msg+0x10a>
 800e4fc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e500:	1b52      	subs	r2, r2, r5
 800e502:	465b      	mov	r3, fp
 800e504:	4421      	add	r1, r4
 800e506:	4638      	mov	r0, r7
 800e508:	47b0      	blx	r6
 800e50a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e50e:	4405      	add	r5, r0
 800e510:	4295      	cmp	r5, r2
 800e512:	d3f2      	bcc.n	800e4fa <uxr_write_framed_msg+0xee>
 800e514:	d003      	beq.n	800e51e <uxr_write_framed_msg+0x112>
 800e516:	2000      	movs	r0, #0
 800e518:	b003      	add	sp, #12
 800e51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51e:	fa5f f18a 	uxtb.w	r1, sl
 800e522:	f04f 0300 	mov.w	r3, #0
 800e526:	2901      	cmp	r1, #1
 800e528:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e52c:	f04f 0200 	mov.w	r2, #0
 800e530:	f200 8090 	bhi.w	800e654 <uxr_write_framed_msg+0x248>
 800e534:	1c51      	adds	r1, r2, #1
 800e536:	b2c9      	uxtb	r1, r1
 800e538:	2929      	cmp	r1, #41	@ 0x29
 800e53a:	d8dc      	bhi.n	800e4f6 <uxr_write_framed_msg+0xea>
 800e53c:	18a5      	adds	r5, r4, r2
 800e53e:	4421      	add	r1, r4
 800e540:	3202      	adds	r2, #2
 800e542:	f088 0820 	eor.w	r8, r8, #32
 800e546:	4648      	mov	r0, r9
 800e548:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800e54c:	b2d2      	uxtb	r2, r2
 800e54e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e552:	f04f 0901 	mov.w	r9, #1
 800e556:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800e55a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e55e:	2800      	cmp	r0, #0
 800e560:	f040 8085 	bne.w	800e66e <uxr_write_framed_msg+0x262>
 800e564:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e568:	e7bc      	b.n	800e4e4 <uxr_write_framed_msg+0xd8>
 800e56a:	4611      	mov	r1, r2
 800e56c:	f04f 0c03 	mov.w	ip, #3
 800e570:	2204      	movs	r2, #4
 800e572:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e574:	4421      	add	r1, r4
 800e576:	b2dd      	uxtb	r5, r3
 800e578:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800e57c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800e580:	44a4      	add	ip, r4
 800e582:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e586:	f080 0020 	eor.w	r0, r0, #32
 800e58a:	2901      	cmp	r1, #1
 800e58c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800e590:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e594:	f63f af66 	bhi.w	800e464 <uxr_write_framed_msg+0x58>
 800e598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e59a:	18a0      	adds	r0, r4, r2
 800e59c:	f085 0520 	eor.w	r5, r5, #32
 800e5a0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e5a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e5a8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800e5ac:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800e5b0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800e5b4:	3202      	adds	r2, #2
 800e5b6:	2801      	cmp	r0, #1
 800e5b8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e5bc:	f63f af60 	bhi.w	800e480 <uxr_write_framed_msg+0x74>
 800e5c0:	1c50      	adds	r0, r2, #1
 800e5c2:	18a5      	adds	r5, r4, r2
 800e5c4:	fa54 f080 	uxtab	r0, r4, r0
 800e5c8:	3202      	adds	r2, #2
 800e5ca:	f081 0120 	eor.w	r1, r1, #32
 800e5ce:	b2d2      	uxtb	r2, r2
 800e5d0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e5d4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800e5d8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e5dc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f47f af57 	bne.w	800e494 <uxr_write_framed_msg+0x88>
 800e5e6:	9301      	str	r3, [sp, #4]
 800e5e8:	4698      	mov	r8, r3
 800e5ea:	e779      	b.n	800e4e0 <uxr_write_framed_msg+0xd4>
 800e5ec:	2500      	movs	r5, #0
 800e5ee:	e001      	b.n	800e5f4 <uxr_write_framed_msg+0x1e8>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d090      	beq.n	800e516 <uxr_write_framed_msg+0x10a>
 800e5f4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e5f8:	1b52      	subs	r2, r2, r5
 800e5fa:	465b      	mov	r3, fp
 800e5fc:	4421      	add	r1, r4
 800e5fe:	4638      	mov	r0, r7
 800e600:	47b0      	blx	r6
 800e602:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e606:	4405      	add	r5, r0
 800e608:	4295      	cmp	r5, r2
 800e60a:	d3f1      	bcc.n	800e5f0 <uxr_write_framed_msg+0x1e4>
 800e60c:	d183      	bne.n	800e516 <uxr_write_framed_msg+0x10a>
 800e60e:	f04f 0300 	mov.w	r3, #0
 800e612:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e616:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e618:	4543      	cmp	r3, r8
 800e61a:	d964      	bls.n	800e6e6 <uxr_write_framed_msg+0x2da>
 800e61c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800e620:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e624:	2901      	cmp	r1, #1
 800e626:	f04f 0200 	mov.w	r2, #0
 800e62a:	f63f af3d 	bhi.w	800e4a8 <uxr_write_framed_msg+0x9c>
 800e62e:	1c51      	adds	r1, r2, #1
 800e630:	b2c9      	uxtb	r1, r1
 800e632:	2929      	cmp	r1, #41	@ 0x29
 800e634:	d8da      	bhi.n	800e5ec <uxr_write_framed_msg+0x1e0>
 800e636:	18a0      	adds	r0, r4, r2
 800e638:	4421      	add	r1, r4
 800e63a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800e63e:	3202      	adds	r2, #2
 800e640:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800e644:	b2d2      	uxtb	r2, r2
 800e646:	f083 0020 	eor.w	r0, r3, #32
 800e64a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800e64e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e652:	e733      	b.n	800e4bc <uxr_write_framed_msg+0xb0>
 800e654:	18a1      	adds	r1, r4, r2
 800e656:	3201      	adds	r2, #1
 800e658:	4648      	mov	r0, r9
 800e65a:	b2d2      	uxtb	r2, r2
 800e65c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800e660:	f04f 0901 	mov.w	r9, #1
 800e664:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e668:	2800      	cmp	r0, #0
 800e66a:	f43f af7b 	beq.w	800e564 <uxr_write_framed_msg+0x158>
 800e66e:	2500      	movs	r5, #0
 800e670:	e002      	b.n	800e678 <uxr_write_framed_msg+0x26c>
 800e672:	2800      	cmp	r0, #0
 800e674:	f43f af4f 	beq.w	800e516 <uxr_write_framed_msg+0x10a>
 800e678:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e67c:	1b52      	subs	r2, r2, r5
 800e67e:	465b      	mov	r3, fp
 800e680:	4421      	add	r1, r4
 800e682:	4638      	mov	r0, r7
 800e684:	47b0      	blx	r6
 800e686:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e68a:	4405      	add	r5, r0
 800e68c:	4295      	cmp	r5, r2
 800e68e:	d3f0      	bcc.n	800e672 <uxr_write_framed_msg+0x266>
 800e690:	f47f af41 	bne.w	800e516 <uxr_write_framed_msg+0x10a>
 800e694:	2300      	movs	r3, #0
 800e696:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e69a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e69c:	b298      	uxth	r0, r3
 800e69e:	b003      	add	sp, #12
 800e6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a4:	217d      	movs	r1, #125	@ 0x7d
 800e6a6:	f082 0220 	eor.w	r2, r2, #32
 800e6aa:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800e6ae:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800e6b2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800e6b6:	2901      	cmp	r1, #1
 800e6b8:	f04f 0203 	mov.w	r2, #3
 800e6bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e6c0:	d804      	bhi.n	800e6cc <uxr_write_framed_msg+0x2c0>
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	f04f 0c04 	mov.w	ip, #4
 800e6c8:	2205      	movs	r2, #5
 800e6ca:	e752      	b.n	800e572 <uxr_write_framed_msg+0x166>
 800e6cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6ce:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800e6d2:	b2dd      	uxtb	r5, r3
 800e6d4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e6d8:	2204      	movs	r2, #4
 800e6da:	2901      	cmp	r1, #1
 800e6dc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e6e0:	f63f aec0 	bhi.w	800e464 <uxr_write_framed_msg+0x58>
 800e6e4:	e758      	b.n	800e598 <uxr_write_framed_msg+0x18c>
 800e6e6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e6ea:	fa5f f889 	uxtb.w	r8, r9
 800e6ee:	9301      	str	r3, [sp, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	e6f5      	b.n	800e4e0 <uxr_write_framed_msg+0xd4>
 800e6f4:	080136b4 	.word	0x080136b4

0800e6f8 <uxr_framing_read_transport>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	b083      	sub	sp, #12
 800e700:	461f      	mov	r7, r3
 800e702:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800e706:	4689      	mov	r9, r1
 800e708:	4692      	mov	sl, r2
 800e70a:	f000 fc73 	bl	800eff4 <uxr_millis>
 800e70e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e712:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800e716:	42b3      	cmp	r3, r6
 800e718:	4680      	mov	r8, r0
 800e71a:	d061      	beq.n	800e7e0 <uxr_framing_read_transport+0xe8>
 800e71c:	d81c      	bhi.n	800e758 <uxr_framing_read_transport+0x60>
 800e71e:	1e75      	subs	r5, r6, #1
 800e720:	1aed      	subs	r5, r5, r3
 800e722:	b2ed      	uxtb	r5, r5
 800e724:	2600      	movs	r6, #0
 800e726:	455d      	cmp	r5, fp
 800e728:	d81f      	bhi.n	800e76a <uxr_framing_read_transport+0x72>
 800e72a:	19ab      	adds	r3, r5, r6
 800e72c:	455b      	cmp	r3, fp
 800e72e:	bf84      	itt	hi
 800e730:	ebab 0605 	subhi.w	r6, fp, r5
 800e734:	b2f6      	uxtbhi	r6, r6
 800e736:	b9ed      	cbnz	r5, 800e774 <uxr_framing_read_transport+0x7c>
 800e738:	f04f 0b00 	mov.w	fp, #0
 800e73c:	f000 fc5a 	bl	800eff4 <uxr_millis>
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	eba0 0808 	sub.w	r8, r0, r8
 800e746:	eba3 0308 	sub.w	r3, r3, r8
 800e74a:	4658      	mov	r0, fp
 800e74c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e750:	603b      	str	r3, [r7, #0]
 800e752:	b003      	add	sp, #12
 800e754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e758:	2e00      	cmp	r6, #0
 800e75a:	d049      	beq.n	800e7f0 <uxr_framing_read_transport+0xf8>
 800e75c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800e760:	b2ed      	uxtb	r5, r5
 800e762:	3e01      	subs	r6, #1
 800e764:	455d      	cmp	r5, fp
 800e766:	b2f6      	uxtb	r6, r6
 800e768:	d9df      	bls.n	800e72a <uxr_framing_read_transport+0x32>
 800e76a:	fa5f f58b 	uxtb.w	r5, fp
 800e76e:	2600      	movs	r6, #0
 800e770:	2d00      	cmp	r5, #0
 800e772:	d0e1      	beq.n	800e738 <uxr_framing_read_transport+0x40>
 800e774:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e778:	3102      	adds	r1, #2
 800e77a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	4421      	add	r1, r4
 800e782:	462a      	mov	r2, r5
 800e784:	4650      	mov	r0, sl
 800e786:	47c8      	blx	r9
 800e788:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e78c:	4a1a      	ldr	r2, [pc, #104]	@ (800e7f8 <uxr_framing_read_transport+0x100>)
 800e78e:	4403      	add	r3, r0
 800e790:	0859      	lsrs	r1, r3, #1
 800e792:	fba2 2101 	umull	r2, r1, r2, r1
 800e796:	0889      	lsrs	r1, r1, #2
 800e798:	222a      	movs	r2, #42	@ 0x2a
 800e79a:	fb02 3111 	mls	r1, r2, r1, r3
 800e79e:	4683      	mov	fp, r0
 800e7a0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d0c7      	beq.n	800e738 <uxr_framing_read_transport+0x40>
 800e7a8:	42a8      	cmp	r0, r5
 800e7aa:	d1c7      	bne.n	800e73c <uxr_framing_read_transport+0x44>
 800e7ac:	2e00      	cmp	r6, #0
 800e7ae:	d0c5      	beq.n	800e73c <uxr_framing_read_transport+0x44>
 800e7b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	3102      	adds	r1, #2
 800e7b6:	4632      	mov	r2, r6
 800e7b8:	4421      	add	r1, r4
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	4650      	mov	r0, sl
 800e7be:	47c8      	blx	r9
 800e7c0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e7c4:	4a0c      	ldr	r2, [pc, #48]	@ (800e7f8 <uxr_framing_read_transport+0x100>)
 800e7c6:	180b      	adds	r3, r1, r0
 800e7c8:	0859      	lsrs	r1, r3, #1
 800e7ca:	fba2 1201 	umull	r1, r2, r2, r1
 800e7ce:	0892      	lsrs	r2, r2, #2
 800e7d0:	212a      	movs	r1, #42	@ 0x2a
 800e7d2:	fb01 3312 	mls	r3, r1, r2, r3
 800e7d6:	eb00 0b05 	add.w	fp, r0, r5
 800e7da:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800e7de:	e7ad      	b.n	800e73c <uxr_framing_read_transport+0x44>
 800e7e0:	2600      	movs	r6, #0
 800e7e2:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800e7e6:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800e7e8:	d9bf      	bls.n	800e76a <uxr_framing_read_transport+0x72>
 800e7ea:	2102      	movs	r1, #2
 800e7ec:	2529      	movs	r5, #41	@ 0x29
 800e7ee:	e7c4      	b.n	800e77a <uxr_framing_read_transport+0x82>
 800e7f0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800e7f4:	b2ed      	uxtb	r5, r5
 800e7f6:	e796      	b.n	800e726 <uxr_framing_read_transport+0x2e>
 800e7f8:	30c30c31 	.word	0x30c30c31

0800e7fc <uxr_read_framed_msg>:
 800e7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e800:	461e      	mov	r6, r3
 800e802:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800e806:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800e80a:	429d      	cmp	r5, r3
 800e80c:	b083      	sub	sp, #12
 800e80e:	4604      	mov	r4, r0
 800e810:	4688      	mov	r8, r1
 800e812:	4691      	mov	r9, r2
 800e814:	f000 8188 	beq.w	800eb28 <uxr_read_framed_msg+0x32c>
 800e818:	7823      	ldrb	r3, [r4, #0]
 800e81a:	4dc1      	ldr	r5, [pc, #772]	@ (800eb20 <uxr_read_framed_msg+0x324>)
 800e81c:	4fc1      	ldr	r7, [pc, #772]	@ (800eb24 <uxr_read_framed_msg+0x328>)
 800e81e:	2b07      	cmp	r3, #7
 800e820:	d8fd      	bhi.n	800e81e <uxr_read_framed_msg+0x22>
 800e822:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e826:	0115      	.short	0x0115
 800e828:	00d600f6 	.word	0x00d600f6
 800e82c:	009000b9 	.word	0x009000b9
 800e830:	0030004d 	.word	0x0030004d
 800e834:	0008      	.short	0x0008
 800e836:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e83a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e83e:	4299      	cmp	r1, r3
 800e840:	f000 814a 	beq.w	800ead8 <uxr_read_framed_msg+0x2dc>
 800e844:	18e2      	adds	r2, r4, r3
 800e846:	7892      	ldrb	r2, [r2, #2]
 800e848:	2a7d      	cmp	r2, #125	@ 0x7d
 800e84a:	f000 8199 	beq.w	800eb80 <uxr_read_framed_msg+0x384>
 800e84e:	3301      	adds	r3, #1
 800e850:	0858      	lsrs	r0, r3, #1
 800e852:	fba5 1000 	umull	r1, r0, r5, r0
 800e856:	0880      	lsrs	r0, r0, #2
 800e858:	212a      	movs	r1, #42	@ 0x2a
 800e85a:	fb01 3310 	mls	r3, r1, r0, r3
 800e85e:	2a7e      	cmp	r2, #126	@ 0x7e
 800e860:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e864:	f000 8252 	beq.w	800ed0c <uxr_read_framed_msg+0x510>
 800e868:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e86a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800e86c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e870:	b29b      	uxth	r3, r3
 800e872:	2200      	movs	r2, #0
 800e874:	4299      	cmp	r1, r3
 800e876:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e878:	7022      	strb	r2, [r4, #0]
 800e87a:	f000 8179 	beq.w	800eb70 <uxr_read_framed_msg+0x374>
 800e87e:	2000      	movs	r0, #0
 800e880:	b003      	add	sp, #12
 800e882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e886:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e88a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e88e:	4299      	cmp	r1, r3
 800e890:	f000 8131 	beq.w	800eaf6 <uxr_read_framed_msg+0x2fa>
 800e894:	18e2      	adds	r2, r4, r3
 800e896:	7890      	ldrb	r0, [r2, #2]
 800e898:	287d      	cmp	r0, #125	@ 0x7d
 800e89a:	f000 8190 	beq.w	800ebbe <uxr_read_framed_msg+0x3c2>
 800e89e:	3301      	adds	r3, #1
 800e8a0:	085a      	lsrs	r2, r3, #1
 800e8a2:	fba5 1202 	umull	r1, r2, r5, r2
 800e8a6:	0892      	lsrs	r2, r2, #2
 800e8a8:	212a      	movs	r1, #42	@ 0x2a
 800e8aa:	fb01 3312 	mls	r3, r1, r2, r3
 800e8ae:	287e      	cmp	r0, #126	@ 0x7e
 800e8b0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e8b4:	f000 821a 	beq.w	800ecec <uxr_read_framed_msg+0x4f0>
 800e8b8:	2307      	movs	r3, #7
 800e8ba:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800e8bc:	7023      	strb	r3, [r4, #0]
 800e8be:	e7ae      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800e8c0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e8c2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e8c6:	459e      	cmp	lr, r3
 800e8c8:	d938      	bls.n	800e93c <uxr_read_framed_msg+0x140>
 800e8ca:	ee07 8a90 	vmov	s15, r8
 800e8ce:	212a      	movs	r1, #42	@ 0x2a
 800e8d0:	e020      	b.n	800e914 <uxr_read_framed_msg+0x118>
 800e8d2:	f89b c002 	ldrb.w	ip, [fp, #2]
 800e8d6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800e8da:	f000 80d4 	beq.w	800ea86 <uxr_read_framed_msg+0x28a>
 800e8de:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e8e2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e8e6:	f000 8219 	beq.w	800ed1c <uxr_read_framed_msg+0x520>
 800e8ea:	f806 c003 	strb.w	ip, [r6, r3]
 800e8ee:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800e8f2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e8f4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e8f8:	ea8a 000c 	eor.w	r0, sl, ip
 800e8fc:	b2c0      	uxtb	r0, r0
 800e8fe:	3301      	adds	r3, #1
 800e900:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800e904:	b29b      	uxth	r3, r3
 800e906:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800e90a:	4573      	cmp	r3, lr
 800e90c:	8663      	strh	r3, [r4, #50]	@ 0x32
 800e90e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e910:	f080 8120 	bcs.w	800eb54 <uxr_read_framed_msg+0x358>
 800e914:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800e918:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800e91c:	f100 0c01 	add.w	ip, r0, #1
 800e920:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e924:	fba5 8202 	umull	r8, r2, r5, r2
 800e928:	0892      	lsrs	r2, r2, #2
 800e92a:	4582      	cmp	sl, r0
 800e92c:	eb04 0b00 	add.w	fp, r4, r0
 800e930:	fb01 c212 	mls	r2, r1, r2, ip
 800e934:	d1cd      	bne.n	800e8d2 <uxr_read_framed_msg+0xd6>
 800e936:	ee17 8a90 	vmov	r8, s15
 800e93a:	459e      	cmp	lr, r3
 800e93c:	f040 8111 	bne.w	800eb62 <uxr_read_framed_msg+0x366>
 800e940:	2306      	movs	r3, #6
 800e942:	7023      	strb	r3, [r4, #0]
 800e944:	e76b      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800e946:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e94a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e94e:	4298      	cmp	r0, r3
 800e950:	f000 80c2 	beq.w	800ead8 <uxr_read_framed_msg+0x2dc>
 800e954:	18e2      	adds	r2, r4, r3
 800e956:	7891      	ldrb	r1, [r2, #2]
 800e958:	297d      	cmp	r1, #125	@ 0x7d
 800e95a:	f000 814c 	beq.w	800ebf6 <uxr_read_framed_msg+0x3fa>
 800e95e:	3301      	adds	r3, #1
 800e960:	085a      	lsrs	r2, r3, #1
 800e962:	fba5 0202 	umull	r0, r2, r5, r2
 800e966:	0892      	lsrs	r2, r2, #2
 800e968:	202a      	movs	r0, #42	@ 0x2a
 800e96a:	fb00 3312 	mls	r3, r0, r2, r3
 800e96e:	297e      	cmp	r1, #126	@ 0x7e
 800e970:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e974:	f000 81ca 	beq.w	800ed0c <uxr_read_framed_msg+0x510>
 800e978:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800e97a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e97e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e980:	b29b      	uxth	r3, r3
 800e982:	2000      	movs	r0, #0
 800e984:	428b      	cmp	r3, r1
 800e986:	8623      	strh	r3, [r4, #48]	@ 0x30
 800e988:	8660      	strh	r0, [r4, #50]	@ 0x32
 800e98a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800e98c:	f240 80df 	bls.w	800eb4e <uxr_read_framed_msg+0x352>
 800e990:	7020      	strb	r0, [r4, #0]
 800e992:	b003      	add	sp, #12
 800e994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e998:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e99c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e9a0:	4299      	cmp	r1, r3
 800e9a2:	f000 80a8 	beq.w	800eaf6 <uxr_read_framed_msg+0x2fa>
 800e9a6:	18e2      	adds	r2, r4, r3
 800e9a8:	7890      	ldrb	r0, [r2, #2]
 800e9aa:	287d      	cmp	r0, #125	@ 0x7d
 800e9ac:	f000 8164 	beq.w	800ec78 <uxr_read_framed_msg+0x47c>
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	085a      	lsrs	r2, r3, #1
 800e9b4:	fba5 1202 	umull	r1, r2, r5, r2
 800e9b8:	0892      	lsrs	r2, r2, #2
 800e9ba:	212a      	movs	r1, #42	@ 0x2a
 800e9bc:	fb01 3312 	mls	r3, r1, r2, r3
 800e9c0:	287e      	cmp	r0, #126	@ 0x7e
 800e9c2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e9c6:	f000 8191 	beq.w	800ecec <uxr_read_framed_msg+0x4f0>
 800e9ca:	2304      	movs	r3, #4
 800e9cc:	8620      	strh	r0, [r4, #48]	@ 0x30
 800e9ce:	7023      	strb	r3, [r4, #0]
 800e9d0:	e725      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800e9d2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e9d6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e9da:	4290      	cmp	r0, r2
 800e9dc:	f000 80b3 	beq.w	800eb46 <uxr_read_framed_msg+0x34a>
 800e9e0:	18a3      	adds	r3, r4, r2
 800e9e2:	7899      	ldrb	r1, [r3, #2]
 800e9e4:	297d      	cmp	r1, #125	@ 0x7d
 800e9e6:	f000 8164 	beq.w	800ecb2 <uxr_read_framed_msg+0x4b6>
 800e9ea:	3201      	adds	r2, #1
 800e9ec:	0850      	lsrs	r0, r2, #1
 800e9ee:	fba5 3000 	umull	r3, r0, r5, r0
 800e9f2:	0880      	lsrs	r0, r0, #2
 800e9f4:	232a      	movs	r3, #42	@ 0x2a
 800e9f6:	fb03 2210 	mls	r2, r3, r0, r2
 800e9fa:	297e      	cmp	r1, #126	@ 0x7e
 800e9fc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ea00:	f000 8188 	beq.w	800ed14 <uxr_read_framed_msg+0x518>
 800ea04:	7863      	ldrb	r3, [r4, #1]
 800ea06:	428b      	cmp	r3, r1
 800ea08:	bf0c      	ite	eq
 800ea0a:	2303      	moveq	r3, #3
 800ea0c:	2300      	movne	r3, #0
 800ea0e:	7023      	strb	r3, [r4, #0]
 800ea10:	e705      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800ea12:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ea16:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	4299      	cmp	r1, r3
 800ea1e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800ea22:	d06c      	beq.n	800eafe <uxr_read_framed_msg+0x302>
 800ea24:	18e2      	adds	r2, r4, r3
 800ea26:	7890      	ldrb	r0, [r2, #2]
 800ea28:	287d      	cmp	r0, #125	@ 0x7d
 800ea2a:	f000 8101 	beq.w	800ec30 <uxr_read_framed_msg+0x434>
 800ea2e:	3301      	adds	r3, #1
 800ea30:	085a      	lsrs	r2, r3, #1
 800ea32:	fba5 1202 	umull	r1, r2, r5, r2
 800ea36:	0892      	lsrs	r2, r2, #2
 800ea38:	212a      	movs	r1, #42	@ 0x2a
 800ea3a:	fb01 3312 	mls	r3, r1, r2, r3
 800ea3e:	287e      	cmp	r0, #126	@ 0x7e
 800ea40:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800ea44:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ea48:	d059      	beq.n	800eafe <uxr_read_framed_msg+0x302>
 800ea4a:	2302      	movs	r3, #2
 800ea4c:	7023      	strb	r3, [r4, #0]
 800ea4e:	e6e6      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800ea50:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800ea54:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ea58:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800ea5c:	1c51      	adds	r1, r2, #1
 800ea5e:	084b      	lsrs	r3, r1, #1
 800ea60:	fba5 c303 	umull	ip, r3, r5, r3
 800ea64:	089b      	lsrs	r3, r3, #2
 800ea66:	fb0e 1313 	mls	r3, lr, r3, r1
 800ea6a:	4592      	cmp	sl, r2
 800ea6c:	eb04 0002 	add.w	r0, r4, r2
 800ea70:	b2da      	uxtb	r2, r3
 800ea72:	f43f af04 	beq.w	800e87e <uxr_read_framed_msg+0x82>
 800ea76:	7883      	ldrb	r3, [r0, #2]
 800ea78:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ea7c:	2b7e      	cmp	r3, #126	@ 0x7e
 800ea7e:	d1ed      	bne.n	800ea5c <uxr_read_framed_msg+0x260>
 800ea80:	2301      	movs	r3, #1
 800ea82:	7023      	strb	r3, [r4, #0]
 800ea84:	e6cb      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800ea86:	f100 0c01 	add.w	ip, r0, #1
 800ea8a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800ea8e:	fba5 8202 	umull	r8, r2, r5, r2
 800ea92:	0892      	lsrs	r2, r2, #2
 800ea94:	fb01 c212 	mls	r2, r1, r2, ip
 800ea98:	eb04 0c02 	add.w	ip, r4, r2
 800ea9c:	b2d2      	uxtb	r2, r2
 800ea9e:	4592      	cmp	sl, r2
 800eaa0:	f100 0002 	add.w	r0, r0, #2
 800eaa4:	f43f af47 	beq.w	800e936 <uxr_read_framed_msg+0x13a>
 800eaa8:	0842      	lsrs	r2, r0, #1
 800eaaa:	f89c a002 	ldrb.w	sl, [ip, #2]
 800eaae:	fba5 8202 	umull	r8, r2, r5, r2
 800eab2:	0892      	lsrs	r2, r2, #2
 800eab4:	fb01 0012 	mls	r0, r1, r2, r0
 800eab8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800eabc:	f08a 0c20 	eor.w	ip, sl, #32
 800eac0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800eac4:	f47f af11 	bne.w	800e8ea <uxr_read_framed_msg+0xee>
 800eac8:	459e      	cmp	lr, r3
 800eaca:	ee17 8a90 	vmov	r8, s15
 800eace:	f43f af37 	beq.w	800e940 <uxr_read_framed_msg+0x144>
 800ead2:	2301      	movs	r3, #1
 800ead4:	7023      	strb	r3, [r4, #0]
 800ead6:	e6a2      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800ead8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	2301      	movs	r3, #1
 800eade:	9301      	str	r3, [sp, #4]
 800eae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eae2:	464a      	mov	r2, r9
 800eae4:	4641      	mov	r1, r8
 800eae6:	4620      	mov	r0, r4
 800eae8:	f7ff fe06 	bl	800e6f8 <uxr_framing_read_transport>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f43f aec6 	beq.w	800e87e <uxr_read_framed_msg+0x82>
 800eaf2:	7823      	ldrb	r3, [r4, #0]
 800eaf4:	e693      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800eaf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	2302      	movs	r3, #2
 800eafc:	e7ef      	b.n	800eade <uxr_read_framed_msg+0x2e2>
 800eafe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	2304      	movs	r3, #4
 800eb04:	9301      	str	r3, [sp, #4]
 800eb06:	464a      	mov	r2, r9
 800eb08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb0a:	4641      	mov	r1, r8
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f7ff fdf3 	bl	800e6f8 <uxr_framing_read_transport>
 800eb12:	2800      	cmp	r0, #0
 800eb14:	d1ed      	bne.n	800eaf2 <uxr_read_framed_msg+0x2f6>
 800eb16:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800eb1a:	2b7e      	cmp	r3, #126	@ 0x7e
 800eb1c:	d0e9      	beq.n	800eaf2 <uxr_read_framed_msg+0x2f6>
 800eb1e:	e6ae      	b.n	800e87e <uxr_read_framed_msg+0x82>
 800eb20:	30c30c31 	.word	0x30c30c31
 800eb24:	080136b4 	.word	0x080136b4
 800eb28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	2305      	movs	r3, #5
 800eb2e:	9301      	str	r3, [sp, #4]
 800eb30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb32:	f7ff fde1 	bl	800e6f8 <uxr_framing_read_transport>
 800eb36:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eb3a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	f43f ae9d 	beq.w	800e87e <uxr_read_framed_msg+0x82>
 800eb44:	e668      	b.n	800e818 <uxr_read_framed_msg+0x1c>
 800eb46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb48:	9300      	str	r3, [sp, #0]
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	e7c7      	b.n	800eade <uxr_read_framed_msg+0x2e2>
 800eb4e:	2305      	movs	r3, #5
 800eb50:	7023      	strb	r3, [r4, #0]
 800eb52:	e664      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800eb54:	ee17 8a90 	vmov	r8, s15
 800eb58:	f43f aef2 	beq.w	800e940 <uxr_read_framed_msg+0x144>
 800eb5c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800eb60:	d08e      	beq.n	800ea80 <uxr_read_framed_msg+0x284>
 800eb62:	ebae 0303 	sub.w	r3, lr, r3
 800eb66:	3302      	adds	r3, #2
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	e7b7      	b.n	800eae0 <uxr_read_framed_msg+0x2e4>
 800eb70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb72:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800eb76:	7013      	strb	r3, [r2, #0]
 800eb78:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800eb7a:	b003      	add	sp, #12
 800eb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb80:	f103 0c01 	add.w	ip, r3, #1
 800eb84:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800eb88:	fba5 0202 	umull	r0, r2, r5, r2
 800eb8c:	0892      	lsrs	r2, r2, #2
 800eb8e:	202a      	movs	r0, #42	@ 0x2a
 800eb90:	fb00 c212 	mls	r2, r0, r2, ip
 800eb94:	fa5f fc82 	uxtb.w	ip, r2
 800eb98:	4561      	cmp	r1, ip
 800eb9a:	d09d      	beq.n	800ead8 <uxr_read_framed_msg+0x2dc>
 800eb9c:	3302      	adds	r3, #2
 800eb9e:	4422      	add	r2, r4
 800eba0:	0859      	lsrs	r1, r3, #1
 800eba2:	7892      	ldrb	r2, [r2, #2]
 800eba4:	fba5 c101 	umull	ip, r1, r5, r1
 800eba8:	0889      	lsrs	r1, r1, #2
 800ebaa:	fb00 3311 	mls	r3, r0, r1, r3
 800ebae:	2a7e      	cmp	r2, #126	@ 0x7e
 800ebb0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ebb4:	f000 80aa 	beq.w	800ed0c <uxr_read_framed_msg+0x510>
 800ebb8:	f082 0220 	eor.w	r2, r2, #32
 800ebbc:	e654      	b.n	800e868 <uxr_read_framed_msg+0x6c>
 800ebbe:	1c58      	adds	r0, r3, #1
 800ebc0:	0842      	lsrs	r2, r0, #1
 800ebc2:	fba5 c202 	umull	ip, r2, r5, r2
 800ebc6:	0892      	lsrs	r2, r2, #2
 800ebc8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ebcc:	fb0c 0212 	mls	r2, ip, r2, r0
 800ebd0:	b2d0      	uxtb	r0, r2
 800ebd2:	4281      	cmp	r1, r0
 800ebd4:	d08f      	beq.n	800eaf6 <uxr_read_framed_msg+0x2fa>
 800ebd6:	4422      	add	r2, r4
 800ebd8:	3302      	adds	r3, #2
 800ebda:	7890      	ldrb	r0, [r2, #2]
 800ebdc:	085a      	lsrs	r2, r3, #1
 800ebde:	fba5 1202 	umull	r1, r2, r5, r2
 800ebe2:	0892      	lsrs	r2, r2, #2
 800ebe4:	fb0c 3312 	mls	r3, ip, r2, r3
 800ebe8:	287e      	cmp	r0, #126	@ 0x7e
 800ebea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ebee:	d07d      	beq.n	800ecec <uxr_read_framed_msg+0x4f0>
 800ebf0:	f080 0020 	eor.w	r0, r0, #32
 800ebf4:	e660      	b.n	800e8b8 <uxr_read_framed_msg+0xbc>
 800ebf6:	1c59      	adds	r1, r3, #1
 800ebf8:	084a      	lsrs	r2, r1, #1
 800ebfa:	fba5 c202 	umull	ip, r2, r5, r2
 800ebfe:	0892      	lsrs	r2, r2, #2
 800ec00:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ec04:	fb0c 1212 	mls	r2, ip, r2, r1
 800ec08:	b2d1      	uxtb	r1, r2
 800ec0a:	4288      	cmp	r0, r1
 800ec0c:	f43f af64 	beq.w	800ead8 <uxr_read_framed_msg+0x2dc>
 800ec10:	4422      	add	r2, r4
 800ec12:	3302      	adds	r3, #2
 800ec14:	7891      	ldrb	r1, [r2, #2]
 800ec16:	085a      	lsrs	r2, r3, #1
 800ec18:	fba5 0202 	umull	r0, r2, r5, r2
 800ec1c:	0892      	lsrs	r2, r2, #2
 800ec1e:	fb0c 3312 	mls	r3, ip, r2, r3
 800ec22:	297e      	cmp	r1, #126	@ 0x7e
 800ec24:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ec28:	d070      	beq.n	800ed0c <uxr_read_framed_msg+0x510>
 800ec2a:	f081 0120 	eor.w	r1, r1, #32
 800ec2e:	e6a3      	b.n	800e978 <uxr_read_framed_msg+0x17c>
 800ec30:	f103 0c01 	add.w	ip, r3, #1
 800ec34:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800ec38:	fba5 0202 	umull	r0, r2, r5, r2
 800ec3c:	0892      	lsrs	r2, r2, #2
 800ec3e:	202a      	movs	r0, #42	@ 0x2a
 800ec40:	fb00 c212 	mls	r2, r0, r2, ip
 800ec44:	fa5f fc82 	uxtb.w	ip, r2
 800ec48:	4561      	cmp	r1, ip
 800ec4a:	f43f af58 	beq.w	800eafe <uxr_read_framed_msg+0x302>
 800ec4e:	4422      	add	r2, r4
 800ec50:	3302      	adds	r3, #2
 800ec52:	7891      	ldrb	r1, [r2, #2]
 800ec54:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800ec58:	085a      	lsrs	r2, r3, #1
 800ec5a:	fba5 c202 	umull	ip, r2, r5, r2
 800ec5e:	0892      	lsrs	r2, r2, #2
 800ec60:	fb00 3312 	mls	r3, r0, r2, r3
 800ec64:	297e      	cmp	r1, #126	@ 0x7e
 800ec66:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ec6a:	f43f af48 	beq.w	800eafe <uxr_read_framed_msg+0x302>
 800ec6e:	f081 0120 	eor.w	r1, r1, #32
 800ec72:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800ec76:	e6e8      	b.n	800ea4a <uxr_read_framed_msg+0x24e>
 800ec78:	1c58      	adds	r0, r3, #1
 800ec7a:	0842      	lsrs	r2, r0, #1
 800ec7c:	fba5 c202 	umull	ip, r2, r5, r2
 800ec80:	0892      	lsrs	r2, r2, #2
 800ec82:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ec86:	fb0c 0212 	mls	r2, ip, r2, r0
 800ec8a:	b2d0      	uxtb	r0, r2
 800ec8c:	4281      	cmp	r1, r0
 800ec8e:	f43f af32 	beq.w	800eaf6 <uxr_read_framed_msg+0x2fa>
 800ec92:	4422      	add	r2, r4
 800ec94:	3302      	adds	r3, #2
 800ec96:	7890      	ldrb	r0, [r2, #2]
 800ec98:	085a      	lsrs	r2, r3, #1
 800ec9a:	fba5 1202 	umull	r1, r2, r5, r2
 800ec9e:	0892      	lsrs	r2, r2, #2
 800eca0:	fb0c 3312 	mls	r3, ip, r2, r3
 800eca4:	287e      	cmp	r0, #126	@ 0x7e
 800eca6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ecaa:	d01f      	beq.n	800ecec <uxr_read_framed_msg+0x4f0>
 800ecac:	f080 0020 	eor.w	r0, r0, #32
 800ecb0:	e68b      	b.n	800e9ca <uxr_read_framed_msg+0x1ce>
 800ecb2:	1c51      	adds	r1, r2, #1
 800ecb4:	084b      	lsrs	r3, r1, #1
 800ecb6:	fba5 c303 	umull	ip, r3, r5, r3
 800ecba:	089b      	lsrs	r3, r3, #2
 800ecbc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ecc0:	fb0c 1313 	mls	r3, ip, r3, r1
 800ecc4:	b2d9      	uxtb	r1, r3
 800ecc6:	4288      	cmp	r0, r1
 800ecc8:	f43f af3d 	beq.w	800eb46 <uxr_read_framed_msg+0x34a>
 800eccc:	3202      	adds	r2, #2
 800ecce:	4423      	add	r3, r4
 800ecd0:	0850      	lsrs	r0, r2, #1
 800ecd2:	789b      	ldrb	r3, [r3, #2]
 800ecd4:	fba5 1000 	umull	r1, r0, r5, r0
 800ecd8:	0880      	lsrs	r0, r0, #2
 800ecda:	fb0c 2210 	mls	r2, ip, r0, r2
 800ecde:	2b7e      	cmp	r3, #126	@ 0x7e
 800ece0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ece4:	d016      	beq.n	800ed14 <uxr_read_framed_msg+0x518>
 800ece6:	f083 0120 	eor.w	r1, r3, #32
 800ecea:	e68b      	b.n	800ea04 <uxr_read_framed_msg+0x208>
 800ecec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	2302      	movs	r3, #2
 800ecf2:	9301      	str	r3, [sp, #4]
 800ecf4:	464a      	mov	r2, r9
 800ecf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecf8:	4641      	mov	r1, r8
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f7ff fcfc 	bl	800e6f8 <uxr_framing_read_transport>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	f47f aef6 	bne.w	800eaf2 <uxr_read_framed_msg+0x2f6>
 800ed06:	2301      	movs	r3, #1
 800ed08:	7023      	strb	r3, [r4, #0]
 800ed0a:	e588      	b.n	800e81e <uxr_read_framed_msg+0x22>
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	2301      	movs	r3, #1
 800ed12:	e7ee      	b.n	800ecf2 <uxr_read_framed_msg+0x4f6>
 800ed14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	2303      	movs	r3, #3
 800ed1a:	e7ea      	b.n	800ecf2 <uxr_read_framed_msg+0x4f6>
 800ed1c:	ee17 8a90 	vmov	r8, s15
 800ed20:	e6ae      	b.n	800ea80 <uxr_read_framed_msg+0x284>
 800ed22:	bf00      	nop

0800ed24 <uxr_stream_id>:
 800ed24:	2901      	cmp	r1, #1
 800ed26:	b082      	sub	sp, #8
 800ed28:	d01d      	beq.n	800ed66 <uxr_stream_id+0x42>
 800ed2a:	2902      	cmp	r1, #2
 800ed2c:	f04f 0c00 	mov.w	ip, #0
 800ed30:	d01e      	beq.n	800ed70 <uxr_stream_id+0x4c>
 800ed32:	2300      	movs	r3, #0
 800ed34:	f36c 0307 	bfi	r3, ip, #0, #8
 800ed38:	f360 230f 	bfi	r3, r0, #8, #8
 800ed3c:	f361 4317 	bfi	r3, r1, #16, #8
 800ed40:	f362 631f 	bfi	r3, r2, #24, #8
 800ed44:	b2da      	uxtb	r2, r3
 800ed46:	2000      	movs	r0, #0
 800ed48:	f362 0007 	bfi	r0, r2, #0, #8
 800ed4c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ed50:	f362 200f 	bfi	r0, r2, #8, #8
 800ed54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ed58:	f362 4017 	bfi	r0, r2, #16, #8
 800ed5c:	0e1b      	lsrs	r3, r3, #24
 800ed5e:	f363 601f 	bfi	r0, r3, #24, #8
 800ed62:	b002      	add	sp, #8
 800ed64:	4770      	bx	lr
 800ed66:	f100 0c01 	add.w	ip, r0, #1
 800ed6a:	fa5f fc8c 	uxtb.w	ip, ip
 800ed6e:	e7e0      	b.n	800ed32 <uxr_stream_id+0xe>
 800ed70:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800ed74:	e7dd      	b.n	800ed32 <uxr_stream_id+0xe>
 800ed76:	bf00      	nop

0800ed78 <uxr_stream_id_from_raw>:
 800ed78:	b082      	sub	sp, #8
 800ed7a:	b130      	cbz	r0, 800ed8a <uxr_stream_id_from_raw+0x12>
 800ed7c:	0603      	lsls	r3, r0, #24
 800ed7e:	d420      	bmi.n	800edc2 <uxr_stream_id_from_raw+0x4a>
 800ed80:	1e42      	subs	r2, r0, #1
 800ed82:	b2d2      	uxtb	r2, r2
 800ed84:	f04f 0c01 	mov.w	ip, #1
 800ed88:	e001      	b.n	800ed8e <uxr_stream_id_from_raw+0x16>
 800ed8a:	4684      	mov	ip, r0
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	2300      	movs	r3, #0
 800ed90:	f360 0307 	bfi	r3, r0, #0, #8
 800ed94:	f362 230f 	bfi	r3, r2, #8, #8
 800ed98:	f36c 4317 	bfi	r3, ip, #16, #8
 800ed9c:	f361 631f 	bfi	r3, r1, #24, #8
 800eda0:	b2da      	uxtb	r2, r3
 800eda2:	2000      	movs	r0, #0
 800eda4:	f362 0007 	bfi	r0, r2, #0, #8
 800eda8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800edac:	f362 200f 	bfi	r0, r2, #8, #8
 800edb0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800edb4:	f362 4017 	bfi	r0, r2, #16, #8
 800edb8:	0e1b      	lsrs	r3, r3, #24
 800edba:	f363 601f 	bfi	r0, r3, #24, #8
 800edbe:	b002      	add	sp, #8
 800edc0:	4770      	bx	lr
 800edc2:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800edc6:	f04f 0c02 	mov.w	ip, #2
 800edca:	e7e0      	b.n	800ed8e <uxr_stream_id_from_raw+0x16>

0800edcc <uxr_init_stream_storage>:
 800edcc:	2300      	movs	r3, #0
 800edce:	7403      	strb	r3, [r0, #16]
 800edd0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800edd4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800edd8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop

0800ede0 <uxr_reset_stream_storage>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	7c03      	ldrb	r3, [r0, #16]
 800ede4:	4604      	mov	r4, r0
 800ede6:	b153      	cbz	r3, 800edfe <uxr_reset_stream_storage+0x1e>
 800ede8:	4606      	mov	r6, r0
 800edea:	2500      	movs	r5, #0
 800edec:	4630      	mov	r0, r6
 800edee:	f002 f951 	bl	8011094 <uxr_reset_output_best_effort_stream>
 800edf2:	7c23      	ldrb	r3, [r4, #16]
 800edf4:	3501      	adds	r5, #1
 800edf6:	42ab      	cmp	r3, r5
 800edf8:	f106 0610 	add.w	r6, r6, #16
 800edfc:	d8f6      	bhi.n	800edec <uxr_reset_stream_storage+0xc>
 800edfe:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ee02:	b163      	cbz	r3, 800ee1e <uxr_reset_stream_storage+0x3e>
 800ee04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee08:	2500      	movs	r5, #0
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	f001 ff44 	bl	8010c98 <uxr_reset_input_best_effort_stream>
 800ee10:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ee14:	3501      	adds	r5, #1
 800ee16:	42ab      	cmp	r3, r5
 800ee18:	f106 0602 	add.w	r6, r6, #2
 800ee1c:	d8f5      	bhi.n	800ee0a <uxr_reset_stream_storage+0x2a>
 800ee1e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ee22:	b163      	cbz	r3, 800ee3e <uxr_reset_stream_storage+0x5e>
 800ee24:	f104 0618 	add.w	r6, r4, #24
 800ee28:	2500      	movs	r5, #0
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	f002 f9de 	bl	80111ec <uxr_reset_output_reliable_stream>
 800ee30:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ee34:	3501      	adds	r5, #1
 800ee36:	42ab      	cmp	r3, r5
 800ee38:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800ee3c:	d8f5      	bhi.n	800ee2a <uxr_reset_stream_storage+0x4a>
 800ee3e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ee42:	b163      	cbz	r3, 800ee5e <uxr_reset_stream_storage+0x7e>
 800ee44:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ee48:	2500      	movs	r5, #0
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f001 ff98 	bl	8010d80 <uxr_reset_input_reliable_stream>
 800ee50:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ee54:	3501      	adds	r5, #1
 800ee56:	42ab      	cmp	r3, r5
 800ee58:	f106 0618 	add.w	r6, r6, #24
 800ee5c:	d8f5      	bhi.n	800ee4a <uxr_reset_stream_storage+0x6a>
 800ee5e:	bd70      	pop	{r4, r5, r6, pc}

0800ee60 <uxr_add_output_best_effort_buffer>:
 800ee60:	b510      	push	{r4, lr}
 800ee62:	7c04      	ldrb	r4, [r0, #16]
 800ee64:	f104 0c01 	add.w	ip, r4, #1
 800ee68:	b082      	sub	sp, #8
 800ee6a:	f880 c010 	strb.w	ip, [r0, #16]
 800ee6e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ee72:	f002 f905 	bl	8011080 <uxr_init_output_best_effort_stream>
 800ee76:	2201      	movs	r2, #1
 800ee78:	4611      	mov	r1, r2
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	b002      	add	sp, #8
 800ee7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee82:	f7ff bf4f 	b.w	800ed24 <uxr_stream_id>
 800ee86:	bf00      	nop

0800ee88 <uxr_add_output_reliable_buffer>:
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	4684      	mov	ip, r0
 800ee8e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ee92:	9000      	str	r0, [sp, #0]
 800ee94:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ee98:	2028      	movs	r0, #40	@ 0x28
 800ee9a:	fb00 c004 	mla	r0, r0, r4, ip
 800ee9e:	f104 0e01 	add.w	lr, r4, #1
 800eea2:	3018      	adds	r0, #24
 800eea4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800eea8:	f002 f968 	bl	801117c <uxr_init_output_reliable_stream>
 800eeac:	2201      	movs	r2, #1
 800eeae:	2102      	movs	r1, #2
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	b004      	add	sp, #16
 800eeb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeb8:	f7ff bf34 	b.w	800ed24 <uxr_stream_id>

0800eebc <uxr_add_input_best_effort_buffer>:
 800eebc:	b510      	push	{r4, lr}
 800eebe:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800eec2:	4603      	mov	r3, r0
 800eec4:	1c62      	adds	r2, r4, #1
 800eec6:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800eeca:	b082      	sub	sp, #8
 800eecc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800eed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eed4:	f001 fedc 	bl	8010c90 <uxr_init_input_best_effort_stream>
 800eed8:	2200      	movs	r2, #0
 800eeda:	2101      	movs	r1, #1
 800eedc:	4620      	mov	r0, r4
 800eede:	b002      	add	sp, #8
 800eee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eee4:	f7ff bf1e 	b.w	800ed24 <uxr_stream_id>

0800eee8 <uxr_add_input_reliable_buffer>:
 800eee8:	b510      	push	{r4, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	4684      	mov	ip, r0
 800eeee:	9806      	ldr	r0, [sp, #24]
 800eef0:	9000      	str	r0, [sp, #0]
 800eef2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800eef6:	2018      	movs	r0, #24
 800eef8:	fb00 c004 	mla	r0, r0, r4, ip
 800eefc:	f104 0e01 	add.w	lr, r4, #1
 800ef00:	3048      	adds	r0, #72	@ 0x48
 800ef02:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ef06:	f001 ff0f 	bl	8010d28 <uxr_init_input_reliable_stream>
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	2102      	movs	r1, #2
 800ef0e:	4620      	mov	r0, r4
 800ef10:	b004      	add	sp, #16
 800ef12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef16:	f7ff bf05 	b.w	800ed24 <uxr_stream_id>
 800ef1a:	bf00      	nop

0800ef1c <uxr_get_output_best_effort_stream>:
 800ef1c:	7c03      	ldrb	r3, [r0, #16]
 800ef1e:	428b      	cmp	r3, r1
 800ef20:	bf8c      	ite	hi
 800ef22:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ef26:	2000      	movls	r0, #0
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop

0800ef2c <uxr_get_output_reliable_stream>:
 800ef2c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ef30:	428b      	cmp	r3, r1
 800ef32:	bf83      	ittte	hi
 800ef34:	2328      	movhi	r3, #40	@ 0x28
 800ef36:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ef3a:	3018      	addhi	r0, #24
 800ef3c:	2000      	movls	r0, #0
 800ef3e:	4770      	bx	lr

0800ef40 <uxr_get_input_best_effort_stream>:
 800ef40:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ef44:	428b      	cmp	r3, r1
 800ef46:	bf86      	itte	hi
 800ef48:	3121      	addhi	r1, #33	@ 0x21
 800ef4a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ef4e:	2000      	movls	r0, #0
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop

0800ef54 <uxr_get_input_reliable_stream>:
 800ef54:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ef58:	428b      	cmp	r3, r1
 800ef5a:	bf83      	ittte	hi
 800ef5c:	2318      	movhi	r3, #24
 800ef5e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ef62:	3048      	addhi	r0, #72	@ 0x48
 800ef64:	2000      	movls	r0, #0
 800ef66:	4770      	bx	lr

0800ef68 <uxr_buffer_submessage_header>:
 800ef68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	460e      	mov	r6, r1
 800ef6e:	2104      	movs	r1, #4
 800ef70:	4615      	mov	r5, r2
 800ef72:	461f      	mov	r7, r3
 800ef74:	f7fa fdae 	bl	8009ad4 <ucdr_align_to>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	ea47 0203 	orr.w	r2, r7, r3
 800ef7e:	4631      	mov	r1, r6
 800ef80:	7523      	strb	r3, [r4, #20]
 800ef82:	4620      	mov	r0, r4
 800ef84:	462b      	mov	r3, r5
 800ef86:	f000 f8a3 	bl	800f0d0 <uxr_serialize_submessage_header>
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7fa fdb8 	bl	8009b00 <ucdr_buffer_remaining>
 800ef90:	42a8      	cmp	r0, r5
 800ef92:	bf34      	ite	cc
 800ef94:	2000      	movcc	r0, #0
 800ef96:	2001      	movcs	r0, #1
 800ef98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef9a:	bf00      	nop

0800ef9c <uxr_read_submessage_header>:
 800ef9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa0:	4604      	mov	r4, r0
 800efa2:	460d      	mov	r5, r1
 800efa4:	2104      	movs	r1, #4
 800efa6:	4616      	mov	r6, r2
 800efa8:	4698      	mov	r8, r3
 800efaa:	f7fa fd93 	bl	8009ad4 <ucdr_align_to>
 800efae:	4620      	mov	r0, r4
 800efb0:	f7fa fda6 	bl	8009b00 <ucdr_buffer_remaining>
 800efb4:	2803      	cmp	r0, #3
 800efb6:	bf8c      	ite	hi
 800efb8:	2701      	movhi	r7, #1
 800efba:	2700      	movls	r7, #0
 800efbc:	d802      	bhi.n	800efc4 <uxr_read_submessage_header+0x28>
 800efbe:	4638      	mov	r0, r7
 800efc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc4:	4633      	mov	r3, r6
 800efc6:	4642      	mov	r2, r8
 800efc8:	4620      	mov	r0, r4
 800efca:	4629      	mov	r1, r5
 800efcc:	f000 f894 	bl	800f0f8 <uxr_deserialize_submessage_header>
 800efd0:	f898 3000 	ldrb.w	r3, [r8]
 800efd4:	f003 0201 	and.w	r2, r3, #1
 800efd8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800efdc:	f888 3000 	strb.w	r3, [r8]
 800efe0:	7522      	strb	r2, [r4, #20]
 800efe2:	4638      	mov	r0, r7
 800efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800efe8 <uxr_submessage_padding>:
 800efe8:	f010 0003 	ands.w	r0, r0, #3
 800efec:	bf18      	it	ne
 800efee:	f1c0 0004 	rsbne	r0, r0, #4
 800eff2:	4770      	bx	lr

0800eff4 <uxr_millis>:
 800eff4:	b510      	push	{r4, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	4669      	mov	r1, sp
 800effa:	2001      	movs	r0, #1
 800effc:	f7f2 ff08 	bl	8001e10 <clock_gettime>
 800f000:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800f004:	4906      	ldr	r1, [pc, #24]	@ (800f020 <uxr_millis+0x2c>)
 800f006:	fba0 0301 	umull	r0, r3, r0, r1
 800f00a:	1900      	adds	r0, r0, r4
 800f00c:	fb01 3102 	mla	r1, r1, r2, r3
 800f010:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f014:	4a03      	ldr	r2, [pc, #12]	@ (800f024 <uxr_millis+0x30>)
 800f016:	2300      	movs	r3, #0
 800f018:	f7f1 fdc0 	bl	8000b9c <__aeabi_ldivmod>
 800f01c:	b004      	add	sp, #16
 800f01e:	bd10      	pop	{r4, pc}
 800f020:	3b9aca00 	.word	0x3b9aca00
 800f024:	000f4240 	.word	0x000f4240

0800f028 <uxr_nanos>:
 800f028:	b510      	push	{r4, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	4669      	mov	r1, sp
 800f02e:	2001      	movs	r0, #1
 800f030:	f7f2 feee 	bl	8001e10 <clock_gettime>
 800f034:	4a06      	ldr	r2, [pc, #24]	@ (800f050 <uxr_nanos+0x28>)
 800f036:	9800      	ldr	r0, [sp, #0]
 800f038:	9902      	ldr	r1, [sp, #8]
 800f03a:	9c01      	ldr	r4, [sp, #4]
 800f03c:	fba0 0302 	umull	r0, r3, r0, r2
 800f040:	1840      	adds	r0, r0, r1
 800f042:	fb02 3304 	mla	r3, r2, r4, r3
 800f046:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f04a:	b004      	add	sp, #16
 800f04c:	bd10      	pop	{r4, pc}
 800f04e:	bf00      	nop
 800f050:	3b9aca00 	.word	0x3b9aca00

0800f054 <uxr_serialize_message_header>:
 800f054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f056:	b083      	sub	sp, #12
 800f058:	4616      	mov	r6, r2
 800f05a:	4604      	mov	r4, r0
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	460d      	mov	r5, r1
 800f060:	9f08      	ldr	r7, [sp, #32]
 800f062:	f7f9 fc73 	bl	800894c <ucdr_serialize_uint8_t>
 800f066:	4631      	mov	r1, r6
 800f068:	4620      	mov	r0, r4
 800f06a:	f7f9 fc6f 	bl	800894c <ucdr_serialize_uint8_t>
 800f06e:	9a01      	ldr	r2, [sp, #4]
 800f070:	2101      	movs	r1, #1
 800f072:	4620      	mov	r0, r4
 800f074:	f7f9 fd16 	bl	8008aa4 <ucdr_serialize_endian_uint16_t>
 800f078:	062b      	lsls	r3, r5, #24
 800f07a:	d501      	bpl.n	800f080 <uxr_serialize_message_header+0x2c>
 800f07c:	b003      	add	sp, #12
 800f07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f080:	2204      	movs	r2, #4
 800f082:	4639      	mov	r1, r7
 800f084:	4620      	mov	r0, r4
 800f086:	b003      	add	sp, #12
 800f088:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f08c:	f001 bcc8 	b.w	8010a20 <ucdr_serialize_array_uint8_t>

0800f090 <uxr_deserialize_message_header>:
 800f090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f092:	b083      	sub	sp, #12
 800f094:	4616      	mov	r6, r2
 800f096:	4604      	mov	r4, r0
 800f098:	9301      	str	r3, [sp, #4]
 800f09a:	460d      	mov	r5, r1
 800f09c:	9f08      	ldr	r7, [sp, #32]
 800f09e:	f7f9 fc6b 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f0a2:	4631      	mov	r1, r6
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	f7f9 fc67 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f0aa:	9a01      	ldr	r2, [sp, #4]
 800f0ac:	2101      	movs	r1, #1
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f7f9 fdec 	bl	8008c8c <ucdr_deserialize_endian_uint16_t>
 800f0b4:	f995 3000 	ldrsb.w	r3, [r5]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	da01      	bge.n	800f0c0 <uxr_deserialize_message_header+0x30>
 800f0bc:	b003      	add	sp, #12
 800f0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0c0:	2204      	movs	r2, #4
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	b003      	add	sp, #12
 800f0c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f0cc:	f001 bd0c 	b.w	8010ae8 <ucdr_deserialize_array_uint8_t>

0800f0d0 <uxr_serialize_submessage_header>:
 800f0d0:	b530      	push	{r4, r5, lr}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	4615      	mov	r5, r2
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	9301      	str	r3, [sp, #4]
 800f0da:	f7f9 fc37 	bl	800894c <ucdr_serialize_uint8_t>
 800f0de:	4629      	mov	r1, r5
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f7f9 fc33 	bl	800894c <ucdr_serialize_uint8_t>
 800f0e6:	9a01      	ldr	r2, [sp, #4]
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	b003      	add	sp, #12
 800f0ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0f2:	f7f9 bcd7 	b.w	8008aa4 <ucdr_serialize_endian_uint16_t>
 800f0f6:	bf00      	nop

0800f0f8 <uxr_deserialize_submessage_header>:
 800f0f8:	b530      	push	{r4, r5, lr}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	4615      	mov	r5, r2
 800f0fe:	4604      	mov	r4, r0
 800f100:	9301      	str	r3, [sp, #4]
 800f102:	f7f9 fc39 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f106:	4629      	mov	r1, r5
 800f108:	4620      	mov	r0, r4
 800f10a:	f7f9 fc35 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f10e:	9a01      	ldr	r2, [sp, #4]
 800f110:	2101      	movs	r1, #1
 800f112:	4620      	mov	r0, r4
 800f114:	b003      	add	sp, #12
 800f116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f11a:	f7f9 bdb7 	b.w	8008c8c <ucdr_deserialize_endian_uint16_t>
 800f11e:	bf00      	nop

0800f120 <uxr_serialize_CLIENT_Representation>:
 800f120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f124:	2204      	movs	r2, #4
 800f126:	460e      	mov	r6, r1
 800f128:	4605      	mov	r5, r0
 800f12a:	f001 fc79 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f12e:	2202      	movs	r2, #2
 800f130:	4607      	mov	r7, r0
 800f132:	1d31      	adds	r1, r6, #4
 800f134:	4628      	mov	r0, r5
 800f136:	f001 fc73 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f13a:	4038      	ands	r0, r7
 800f13c:	2202      	movs	r2, #2
 800f13e:	1db1      	adds	r1, r6, #6
 800f140:	b2c7      	uxtb	r7, r0
 800f142:	4628      	mov	r0, r5
 800f144:	f001 fc6c 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f148:	2204      	movs	r2, #4
 800f14a:	4007      	ands	r7, r0
 800f14c:	f106 0108 	add.w	r1, r6, #8
 800f150:	4628      	mov	r0, r5
 800f152:	f001 fc65 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f156:	7b31      	ldrb	r1, [r6, #12]
 800f158:	4007      	ands	r7, r0
 800f15a:	4628      	mov	r0, r5
 800f15c:	f7f9 fbf6 	bl	800894c <ucdr_serialize_uint8_t>
 800f160:	7b71      	ldrb	r1, [r6, #13]
 800f162:	4007      	ands	r7, r0
 800f164:	4628      	mov	r0, r5
 800f166:	f7f9 fbc3 	bl	80088f0 <ucdr_serialize_bool>
 800f16a:	7b73      	ldrb	r3, [r6, #13]
 800f16c:	ea07 0800 	and.w	r8, r7, r0
 800f170:	b93b      	cbnz	r3, 800f182 <uxr_serialize_CLIENT_Representation+0x62>
 800f172:	8bb1      	ldrh	r1, [r6, #28]
 800f174:	4628      	mov	r0, r5
 800f176:	f7f9 fc15 	bl	80089a4 <ucdr_serialize_uint16_t>
 800f17a:	ea08 0000 	and.w	r0, r8, r0
 800f17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f182:	6931      	ldr	r1, [r6, #16]
 800f184:	4628      	mov	r0, r5
 800f186:	f7f9 fdf7 	bl	8008d78 <ucdr_serialize_uint32_t>
 800f18a:	6933      	ldr	r3, [r6, #16]
 800f18c:	b1e3      	cbz	r3, 800f1c8 <uxr_serialize_CLIENT_Representation+0xa8>
 800f18e:	b1c0      	cbz	r0, 800f1c2 <uxr_serialize_CLIENT_Representation+0xa2>
 800f190:	4637      	mov	r7, r6
 800f192:	f04f 0900 	mov.w	r9, #0
 800f196:	e001      	b.n	800f19c <uxr_serialize_CLIENT_Representation+0x7c>
 800f198:	3708      	adds	r7, #8
 800f19a:	b194      	cbz	r4, 800f1c2 <uxr_serialize_CLIENT_Representation+0xa2>
 800f19c:	6979      	ldr	r1, [r7, #20]
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f001 fd5e 	bl	8010c60 <ucdr_serialize_string>
 800f1a4:	69b9      	ldr	r1, [r7, #24]
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	f001 fd59 	bl	8010c60 <ucdr_serialize_string>
 800f1ae:	6933      	ldr	r3, [r6, #16]
 800f1b0:	f109 0901 	add.w	r9, r9, #1
 800f1b4:	4004      	ands	r4, r0
 800f1b6:	4599      	cmp	r9, r3
 800f1b8:	b2e4      	uxtb	r4, r4
 800f1ba:	d3ed      	bcc.n	800f198 <uxr_serialize_CLIENT_Representation+0x78>
 800f1bc:	ea08 0804 	and.w	r8, r8, r4
 800f1c0:	e7d7      	b.n	800f172 <uxr_serialize_CLIENT_Representation+0x52>
 800f1c2:	f04f 0800 	mov.w	r8, #0
 800f1c6:	e7d4      	b.n	800f172 <uxr_serialize_CLIENT_Representation+0x52>
 800f1c8:	ea08 0800 	and.w	r8, r8, r0
 800f1cc:	e7d1      	b.n	800f172 <uxr_serialize_CLIENT_Representation+0x52>
 800f1ce:	bf00      	nop

0800f1d0 <uxr_deserialize_CLIENT_Representation>:
 800f1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d4:	2204      	movs	r2, #4
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	4605      	mov	r5, r0
 800f1da:	f001 fc85 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f1de:	2202      	movs	r2, #2
 800f1e0:	4607      	mov	r7, r0
 800f1e2:	1d21      	adds	r1, r4, #4
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f001 fc7f 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f1ea:	4038      	ands	r0, r7
 800f1ec:	2202      	movs	r2, #2
 800f1ee:	1da1      	adds	r1, r4, #6
 800f1f0:	b2c6      	uxtb	r6, r0
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	f001 fc78 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f1f8:	2204      	movs	r2, #4
 800f1fa:	4006      	ands	r6, r0
 800f1fc:	f104 0108 	add.w	r1, r4, #8
 800f200:	4628      	mov	r0, r5
 800f202:	f001 fc71 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f206:	f104 010c 	add.w	r1, r4, #12
 800f20a:	4006      	ands	r6, r0
 800f20c:	4628      	mov	r0, r5
 800f20e:	f7f9 fbb3 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f212:	f104 010d 	add.w	r1, r4, #13
 800f216:	ea06 0700 	and.w	r7, r6, r0
 800f21a:	4628      	mov	r0, r5
 800f21c:	f7f9 fb7e 	bl	800891c <ucdr_deserialize_bool>
 800f220:	7b63      	ldrb	r3, [r4, #13]
 800f222:	4007      	ands	r7, r0
 800f224:	b93b      	cbnz	r3, 800f236 <uxr_deserialize_CLIENT_Representation+0x66>
 800f226:	f104 011c 	add.w	r1, r4, #28
 800f22a:	4628      	mov	r0, r5
 800f22c:	f7f9 fcba 	bl	8008ba4 <ucdr_deserialize_uint16_t>
 800f230:	4038      	ands	r0, r7
 800f232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f236:	f104 0110 	add.w	r1, r4, #16
 800f23a:	4628      	mov	r0, r5
 800f23c:	f7f9 fecc 	bl	8008fd8 <ucdr_deserialize_uint32_t>
 800f240:	6923      	ldr	r3, [r4, #16]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d903      	bls.n	800f24e <uxr_deserialize_CLIENT_Representation+0x7e>
 800f246:	2301      	movs	r3, #1
 800f248:	75ab      	strb	r3, [r5, #22]
 800f24a:	2700      	movs	r7, #0
 800f24c:	e7eb      	b.n	800f226 <uxr_deserialize_CLIENT_Representation+0x56>
 800f24e:	b30b      	cbz	r3, 800f294 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f250:	2800      	cmp	r0, #0
 800f252:	d0fa      	beq.n	800f24a <uxr_deserialize_CLIENT_Representation+0x7a>
 800f254:	46a0      	mov	r8, r4
 800f256:	f04f 0900 	mov.w	r9, #0
 800f25a:	e001      	b.n	800f260 <uxr_deserialize_CLIENT_Representation+0x90>
 800f25c:	2e00      	cmp	r6, #0
 800f25e:	d0f4      	beq.n	800f24a <uxr_deserialize_CLIENT_Representation+0x7a>
 800f260:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f268:	4628      	mov	r0, r5
 800f26a:	f001 fd09 	bl	8010c80 <ucdr_deserialize_string>
 800f26e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f272:	4606      	mov	r6, r0
 800f274:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f278:	4628      	mov	r0, r5
 800f27a:	f001 fd01 	bl	8010c80 <ucdr_deserialize_string>
 800f27e:	6923      	ldr	r3, [r4, #16]
 800f280:	f109 0901 	add.w	r9, r9, #1
 800f284:	4006      	ands	r6, r0
 800f286:	4599      	cmp	r9, r3
 800f288:	f108 0808 	add.w	r8, r8, #8
 800f28c:	b2f6      	uxtb	r6, r6
 800f28e:	d3e5      	bcc.n	800f25c <uxr_deserialize_CLIENT_Representation+0x8c>
 800f290:	4037      	ands	r7, r6
 800f292:	e7c8      	b.n	800f226 <uxr_deserialize_CLIENT_Representation+0x56>
 800f294:	4007      	ands	r7, r0
 800f296:	e7c6      	b.n	800f226 <uxr_deserialize_CLIENT_Representation+0x56>

0800f298 <uxr_serialize_AGENT_Representation>:
 800f298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f29c:	2204      	movs	r2, #4
 800f29e:	460f      	mov	r7, r1
 800f2a0:	4605      	mov	r5, r0
 800f2a2:	f001 fbbd 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f2a6:	2202      	movs	r2, #2
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	1d39      	adds	r1, r7, #4
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	f001 fbb7 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f2b2:	4020      	ands	r0, r4
 800f2b4:	2202      	movs	r2, #2
 800f2b6:	1db9      	adds	r1, r7, #6
 800f2b8:	b2c4      	uxtb	r4, r0
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f001 fbb0 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f2c0:	7a39      	ldrb	r1, [r7, #8]
 800f2c2:	4004      	ands	r4, r0
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	f7f9 fb13 	bl	80088f0 <ucdr_serialize_bool>
 800f2ca:	7a3b      	ldrb	r3, [r7, #8]
 800f2cc:	ea00 0804 	and.w	r8, r0, r4
 800f2d0:	b913      	cbnz	r3, 800f2d8 <uxr_serialize_AGENT_Representation+0x40>
 800f2d2:	4640      	mov	r0, r8
 800f2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2d8:	68f9      	ldr	r1, [r7, #12]
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f7f9 fd4c 	bl	8008d78 <ucdr_serialize_uint32_t>
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	b303      	cbz	r3, 800f326 <uxr_serialize_AGENT_Representation+0x8e>
 800f2e4:	b1d0      	cbz	r0, 800f31c <uxr_serialize_AGENT_Representation+0x84>
 800f2e6:	463e      	mov	r6, r7
 800f2e8:	f04f 0900 	mov.w	r9, #0
 800f2ec:	e001      	b.n	800f2f2 <uxr_serialize_AGENT_Representation+0x5a>
 800f2ee:	3608      	adds	r6, #8
 800f2f0:	b1a4      	cbz	r4, 800f31c <uxr_serialize_AGENT_Representation+0x84>
 800f2f2:	6931      	ldr	r1, [r6, #16]
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	f001 fcb3 	bl	8010c60 <ucdr_serialize_string>
 800f2fa:	6971      	ldr	r1, [r6, #20]
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	4628      	mov	r0, r5
 800f300:	f001 fcae 	bl	8010c60 <ucdr_serialize_string>
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f109 0901 	add.w	r9, r9, #1
 800f30a:	4004      	ands	r4, r0
 800f30c:	4599      	cmp	r9, r3
 800f30e:	b2e4      	uxtb	r4, r4
 800f310:	d3ed      	bcc.n	800f2ee <uxr_serialize_AGENT_Representation+0x56>
 800f312:	ea08 0804 	and.w	r8, r8, r4
 800f316:	4640      	mov	r0, r8
 800f318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f31c:	f04f 0800 	mov.w	r8, #0
 800f320:	4640      	mov	r0, r8
 800f322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f326:	ea08 0800 	and.w	r8, r8, r0
 800f32a:	e7d2      	b.n	800f2d2 <uxr_serialize_AGENT_Representation+0x3a>

0800f32c <uxr_serialize_DATAWRITER_Representation>:
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	460d      	mov	r5, r1
 800f330:	7809      	ldrb	r1, [r1, #0]
 800f332:	4606      	mov	r6, r0
 800f334:	f7f9 fb0a 	bl	800894c <ucdr_serialize_uint8_t>
 800f338:	4604      	mov	r4, r0
 800f33a:	b130      	cbz	r0, 800f34a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f33c:	782b      	ldrb	r3, [r5, #0]
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d00c      	beq.n	800f35c <uxr_serialize_DATAWRITER_Representation+0x30>
 800f342:	2b03      	cmp	r3, #3
 800f344:	d010      	beq.n	800f368 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f346:	2b01      	cmp	r3, #1
 800f348:	d008      	beq.n	800f35c <uxr_serialize_DATAWRITER_Representation+0x30>
 800f34a:	2202      	movs	r2, #2
 800f34c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f350:	4630      	mov	r0, r6
 800f352:	f001 fb65 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f356:	4020      	ands	r0, r4
 800f358:	b2c0      	uxtb	r0, r0
 800f35a:	bd70      	pop	{r4, r5, r6, pc}
 800f35c:	6869      	ldr	r1, [r5, #4]
 800f35e:	4630      	mov	r0, r6
 800f360:	f001 fc7e 	bl	8010c60 <ucdr_serialize_string>
 800f364:	4604      	mov	r4, r0
 800f366:	e7f0      	b.n	800f34a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f368:	4629      	mov	r1, r5
 800f36a:	4630      	mov	r0, r6
 800f36c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f370:	3104      	adds	r1, #4
 800f372:	f001 fc49 	bl	8010c08 <ucdr_serialize_sequence_uint8_t>
 800f376:	4604      	mov	r4, r0
 800f378:	e7e7      	b.n	800f34a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f37a:	bf00      	nop

0800f37c <uxr_serialize_ObjectVariant.part.0>:
 800f37c:	b570      	push	{r4, r5, r6, lr}
 800f37e:	780b      	ldrb	r3, [r1, #0]
 800f380:	3b01      	subs	r3, #1
 800f382:	460c      	mov	r4, r1
 800f384:	4605      	mov	r5, r0
 800f386:	2b0d      	cmp	r3, #13
 800f388:	d854      	bhi.n	800f434 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f38a:	e8df f003 	tbb	[pc, r3]
 800f38e:	0730      	.short	0x0730
 800f390:	07071b1b 	.word	0x07071b1b
 800f394:	0c530707 	.word	0x0c530707
 800f398:	494e0c0c 	.word	0x494e0c0c
 800f39c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3a0:	3104      	adds	r1, #4
 800f3a2:	f7ff bfc3 	b.w	800f32c <uxr_serialize_DATAWRITER_Representation>
 800f3a6:	7909      	ldrb	r1, [r1, #4]
 800f3a8:	f7f9 fad0 	bl	800894c <ucdr_serialize_uint8_t>
 800f3ac:	b1e8      	cbz	r0, 800f3ea <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f3ae:	7923      	ldrb	r3, [r4, #4]
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d001      	beq.n	800f3b8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f3b4:	2b02      	cmp	r3, #2
 800f3b6:	d13d      	bne.n	800f434 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f3b8:	68a1      	ldr	r1, [r4, #8]
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3c0:	f001 bc4e 	b.w	8010c60 <ucdr_serialize_string>
 800f3c4:	7909      	ldrb	r1, [r1, #4]
 800f3c6:	f7f9 fac1 	bl	800894c <ucdr_serialize_uint8_t>
 800f3ca:	4606      	mov	r6, r0
 800f3cc:	b120      	cbz	r0, 800f3d8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f3ce:	7923      	ldrb	r3, [r4, #4]
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d039      	beq.n	800f448 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f3d4:	2b03      	cmp	r3, #3
 800f3d6:	d02f      	beq.n	800f438 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f3d8:	2202      	movs	r2, #2
 800f3da:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f3de:	4628      	mov	r0, r5
 800f3e0:	f001 fb1e 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f3e4:	4030      	ands	r0, r6
 800f3e6:	b2c0      	uxtb	r0, r0
 800f3e8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	bd70      	pop	{r4, r5, r6, pc}
 800f3ee:	7909      	ldrb	r1, [r1, #4]
 800f3f0:	f7f9 faac 	bl	800894c <ucdr_serialize_uint8_t>
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	b158      	cbz	r0, 800f410 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f3f8:	7923      	ldrb	r3, [r4, #4]
 800f3fa:	2b02      	cmp	r3, #2
 800f3fc:	d003      	beq.n	800f406 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f3fe:	2b03      	cmp	r3, #3
 800f400:	d028      	beq.n	800f454 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f402:	2b01      	cmp	r3, #1
 800f404:	d104      	bne.n	800f410 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f406:	68a1      	ldr	r1, [r4, #8]
 800f408:	4628      	mov	r0, r5
 800f40a:	f001 fc29 	bl	8010c60 <ucdr_serialize_string>
 800f40e:	4606      	mov	r6, r0
 800f410:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f414:	4628      	mov	r0, r5
 800f416:	f7f9 ffd5 	bl	80093c4 <ucdr_serialize_int16_t>
 800f41a:	4030      	ands	r0, r6
 800f41c:	b2c0      	uxtb	r0, r0
 800f41e:	bd70      	pop	{r4, r5, r6, pc}
 800f420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f424:	3104      	adds	r1, #4
 800f426:	f7ff be7b 	b.w	800f120 <uxr_serialize_CLIENT_Representation>
 800f42a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f42e:	3104      	adds	r1, #4
 800f430:	f7ff bf32 	b.w	800f298 <uxr_serialize_AGENT_Representation>
 800f434:	2001      	movs	r0, #1
 800f436:	bd70      	pop	{r4, r5, r6, pc}
 800f438:	68a2      	ldr	r2, [r4, #8]
 800f43a:	f104 010c 	add.w	r1, r4, #12
 800f43e:	4628      	mov	r0, r5
 800f440:	f001 fbe2 	bl	8010c08 <ucdr_serialize_sequence_uint8_t>
 800f444:	4606      	mov	r6, r0
 800f446:	e7c7      	b.n	800f3d8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f448:	68a1      	ldr	r1, [r4, #8]
 800f44a:	4628      	mov	r0, r5
 800f44c:	f001 fc08 	bl	8010c60 <ucdr_serialize_string>
 800f450:	4606      	mov	r6, r0
 800f452:	e7c1      	b.n	800f3d8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f454:	68a2      	ldr	r2, [r4, #8]
 800f456:	f104 010c 	add.w	r1, r4, #12
 800f45a:	4628      	mov	r0, r5
 800f45c:	f001 fbd4 	bl	8010c08 <ucdr_serialize_sequence_uint8_t>
 800f460:	4606      	mov	r6, r0
 800f462:	e7d5      	b.n	800f410 <uxr_serialize_ObjectVariant.part.0+0x94>

0800f464 <uxr_deserialize_DATAWRITER_Representation>:
 800f464:	b570      	push	{r4, r5, r6, lr}
 800f466:	4606      	mov	r6, r0
 800f468:	460d      	mov	r5, r1
 800f46a:	f7f9 fa85 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f46e:	4604      	mov	r4, r0
 800f470:	b130      	cbz	r0, 800f480 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f472:	782b      	ldrb	r3, [r5, #0]
 800f474:	2b02      	cmp	r3, #2
 800f476:	d00c      	beq.n	800f492 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f478:	2b03      	cmp	r3, #3
 800f47a:	d012      	beq.n	800f4a2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d008      	beq.n	800f492 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f480:	2202      	movs	r2, #2
 800f482:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f486:	4630      	mov	r0, r6
 800f488:	f001 fb2e 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f48c:	4020      	ands	r0, r4
 800f48e:	b2c0      	uxtb	r0, r0
 800f490:	bd70      	pop	{r4, r5, r6, pc}
 800f492:	6869      	ldr	r1, [r5, #4]
 800f494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f498:	4630      	mov	r0, r6
 800f49a:	f001 fbf1 	bl	8010c80 <ucdr_deserialize_string>
 800f49e:	4604      	mov	r4, r0
 800f4a0:	e7ee      	b.n	800f480 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f4a2:	1d2b      	adds	r3, r5, #4
 800f4a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4a8:	f105 0108 	add.w	r1, r5, #8
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f001 fbbd 	bl	8010c2c <ucdr_deserialize_sequence_uint8_t>
 800f4b2:	4604      	mov	r4, r0
 800f4b4:	e7e4      	b.n	800f480 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f4b6:	bf00      	nop

0800f4b8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f4b8:	b570      	push	{r4, r5, r6, lr}
 800f4ba:	460d      	mov	r5, r1
 800f4bc:	7809      	ldrb	r1, [r1, #0]
 800f4be:	4606      	mov	r6, r0
 800f4c0:	f7f9 fa16 	bl	80088f0 <ucdr_serialize_bool>
 800f4c4:	782b      	ldrb	r3, [r5, #0]
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	b94b      	cbnz	r3, 800f4de <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f4ca:	7a29      	ldrb	r1, [r5, #8]
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f7f9 fa0f 	bl	80088f0 <ucdr_serialize_bool>
 800f4d2:	7a2b      	ldrb	r3, [r5, #8]
 800f4d4:	4004      	ands	r4, r0
 800f4d6:	b2e4      	uxtb	r4, r4
 800f4d8:	b943      	cbnz	r3, 800f4ec <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f4da:	4620      	mov	r0, r4
 800f4dc:	bd70      	pop	{r4, r5, r6, pc}
 800f4de:	6869      	ldr	r1, [r5, #4]
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f001 fbbd 	bl	8010c60 <ucdr_serialize_string>
 800f4e6:	4004      	ands	r4, r0
 800f4e8:	b2e4      	uxtb	r4, r4
 800f4ea:	e7ee      	b.n	800f4ca <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f4ec:	68e9      	ldr	r1, [r5, #12]
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f001 fbb6 	bl	8010c60 <ucdr_serialize_string>
 800f4f4:	4004      	ands	r4, r0
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	bd70      	pop	{r4, r5, r6, pc}
 800f4fa:	bf00      	nop

0800f4fc <uxr_serialize_OBJK_Topic_Binary>:
 800f4fc:	b570      	push	{r4, r5, r6, lr}
 800f4fe:	460d      	mov	r5, r1
 800f500:	6809      	ldr	r1, [r1, #0]
 800f502:	4606      	mov	r6, r0
 800f504:	f001 fbac 	bl	8010c60 <ucdr_serialize_string>
 800f508:	7929      	ldrb	r1, [r5, #4]
 800f50a:	4604      	mov	r4, r0
 800f50c:	4630      	mov	r0, r6
 800f50e:	f7f9 f9ef 	bl	80088f0 <ucdr_serialize_bool>
 800f512:	792b      	ldrb	r3, [r5, #4]
 800f514:	4004      	ands	r4, r0
 800f516:	b2e4      	uxtb	r4, r4
 800f518:	b943      	cbnz	r3, 800f52c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f51a:	7b29      	ldrb	r1, [r5, #12]
 800f51c:	4630      	mov	r0, r6
 800f51e:	f7f9 f9e7 	bl	80088f0 <ucdr_serialize_bool>
 800f522:	7b2b      	ldrb	r3, [r5, #12]
 800f524:	4004      	ands	r4, r0
 800f526:	b93b      	cbnz	r3, 800f538 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f528:	4620      	mov	r0, r4
 800f52a:	bd70      	pop	{r4, r5, r6, pc}
 800f52c:	68a9      	ldr	r1, [r5, #8]
 800f52e:	4630      	mov	r0, r6
 800f530:	f001 fb96 	bl	8010c60 <ucdr_serialize_string>
 800f534:	4004      	ands	r4, r0
 800f536:	e7f0      	b.n	800f51a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f538:	6929      	ldr	r1, [r5, #16]
 800f53a:	4630      	mov	r0, r6
 800f53c:	f001 fb90 	bl	8010c60 <ucdr_serialize_string>
 800f540:	4004      	ands	r4, r0
 800f542:	b2e4      	uxtb	r4, r4
 800f544:	4620      	mov	r0, r4
 800f546:	bd70      	pop	{r4, r5, r6, pc}

0800f548 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f54c:	460c      	mov	r4, r1
 800f54e:	7809      	ldrb	r1, [r1, #0]
 800f550:	4606      	mov	r6, r0
 800f552:	f7f9 f9cd 	bl	80088f0 <ucdr_serialize_bool>
 800f556:	7823      	ldrb	r3, [r4, #0]
 800f558:	4605      	mov	r5, r0
 800f55a:	b96b      	cbnz	r3, 800f578 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f55c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f560:	4630      	mov	r0, r6
 800f562:	f7f9 f9c5 	bl	80088f0 <ucdr_serialize_bool>
 800f566:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f56a:	4005      	ands	r5, r0
 800f56c:	b2ed      	uxtb	r5, r5
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d169      	bne.n	800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f572:	4628      	mov	r0, r5
 800f574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f578:	6861      	ldr	r1, [r4, #4]
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7f9 fbfc 	bl	8008d78 <ucdr_serialize_uint32_t>
 800f580:	6863      	ldr	r3, [r4, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d06b      	beq.n	800f65e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f586:	2800      	cmp	r0, #0
 800f588:	d067      	beq.n	800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f58a:	68a1      	ldr	r1, [r4, #8]
 800f58c:	4630      	mov	r0, r6
 800f58e:	f001 fb67 	bl	8010c60 <ucdr_serialize_string>
 800f592:	6863      	ldr	r3, [r4, #4]
 800f594:	2b01      	cmp	r3, #1
 800f596:	d953      	bls.n	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f598:	2800      	cmp	r0, #0
 800f59a:	d05e      	beq.n	800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f59c:	68e1      	ldr	r1, [r4, #12]
 800f59e:	4630      	mov	r0, r6
 800f5a0:	f001 fb5e 	bl	8010c60 <ucdr_serialize_string>
 800f5a4:	6863      	ldr	r3, [r4, #4]
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	d94a      	bls.n	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d055      	beq.n	800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5ae:	6921      	ldr	r1, [r4, #16]
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f001 fb55 	bl	8010c60 <ucdr_serialize_string>
 800f5b6:	6863      	ldr	r3, [r4, #4]
 800f5b8:	2b03      	cmp	r3, #3
 800f5ba:	d941      	bls.n	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d04c      	beq.n	800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5c0:	6961      	ldr	r1, [r4, #20]
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	f001 fb4c 	bl	8010c60 <ucdr_serialize_string>
 800f5c8:	6863      	ldr	r3, [r4, #4]
 800f5ca:	2b04      	cmp	r3, #4
 800f5cc:	d938      	bls.n	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d043      	beq.n	800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5d2:	69a1      	ldr	r1, [r4, #24]
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	f001 fb43 	bl	8010c60 <ucdr_serialize_string>
 800f5da:	6863      	ldr	r3, [r4, #4]
 800f5dc:	2b05      	cmp	r3, #5
 800f5de:	d92f      	bls.n	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d03a      	beq.n	800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5e4:	69e1      	ldr	r1, [r4, #28]
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f001 fb3a 	bl	8010c60 <ucdr_serialize_string>
 800f5ec:	6863      	ldr	r3, [r4, #4]
 800f5ee:	2b06      	cmp	r3, #6
 800f5f0:	d926      	bls.n	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5f2:	b390      	cbz	r0, 800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5f4:	6a21      	ldr	r1, [r4, #32]
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	f001 fb32 	bl	8010c60 <ucdr_serialize_string>
 800f5fc:	6863      	ldr	r3, [r4, #4]
 800f5fe:	2b07      	cmp	r3, #7
 800f600:	d91e      	bls.n	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f602:	b350      	cbz	r0, 800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f604:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f606:	4630      	mov	r0, r6
 800f608:	f001 fb2a 	bl	8010c60 <ucdr_serialize_string>
 800f60c:	6863      	ldr	r3, [r4, #4]
 800f60e:	2b08      	cmp	r3, #8
 800f610:	d916      	bls.n	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f612:	b310      	cbz	r0, 800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f614:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f616:	4630      	mov	r0, r6
 800f618:	f001 fb22 	bl	8010c60 <ucdr_serialize_string>
 800f61c:	6863      	ldr	r3, [r4, #4]
 800f61e:	2b09      	cmp	r3, #9
 800f620:	d90e      	bls.n	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f622:	b1d0      	cbz	r0, 800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f624:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f628:	2709      	movs	r7, #9
 800f62a:	e000      	b.n	800f62e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f62c:	b1a8      	cbz	r0, 800f65a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f62e:	f858 1b04 	ldr.w	r1, [r8], #4
 800f632:	4630      	mov	r0, r6
 800f634:	f001 fb14 	bl	8010c60 <ucdr_serialize_string>
 800f638:	6862      	ldr	r2, [r4, #4]
 800f63a:	3701      	adds	r7, #1
 800f63c:	4297      	cmp	r7, r2
 800f63e:	d3f5      	bcc.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f640:	4005      	ands	r5, r0
 800f642:	b2ed      	uxtb	r5, r5
 800f644:	e78a      	b.n	800f55c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f646:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f648:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f64c:	4630      	mov	r0, r6
 800f64e:	f001 fadb 	bl	8010c08 <ucdr_serialize_sequence_uint8_t>
 800f652:	4005      	ands	r5, r0
 800f654:	4628      	mov	r0, r5
 800f656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f65a:	2500      	movs	r5, #0
 800f65c:	e77e      	b.n	800f55c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f65e:	4028      	ands	r0, r5
 800f660:	b2c5      	uxtb	r5, r0
 800f662:	e77b      	b.n	800f55c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f664 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f664:	b570      	push	{r4, r5, r6, lr}
 800f666:	460d      	mov	r5, r1
 800f668:	7809      	ldrb	r1, [r1, #0]
 800f66a:	4606      	mov	r6, r0
 800f66c:	f7f9 f940 	bl	80088f0 <ucdr_serialize_bool>
 800f670:	782b      	ldrb	r3, [r5, #0]
 800f672:	4604      	mov	r4, r0
 800f674:	b94b      	cbnz	r3, 800f68a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f676:	7a29      	ldrb	r1, [r5, #8]
 800f678:	4630      	mov	r0, r6
 800f67a:	f7f9 f939 	bl	80088f0 <ucdr_serialize_bool>
 800f67e:	7a2b      	ldrb	r3, [r5, #8]
 800f680:	4004      	ands	r4, r0
 800f682:	b2e4      	uxtb	r4, r4
 800f684:	b943      	cbnz	r3, 800f698 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f686:	4620      	mov	r0, r4
 800f688:	bd70      	pop	{r4, r5, r6, pc}
 800f68a:	6869      	ldr	r1, [r5, #4]
 800f68c:	4630      	mov	r0, r6
 800f68e:	f001 fae7 	bl	8010c60 <ucdr_serialize_string>
 800f692:	4004      	ands	r4, r0
 800f694:	b2e4      	uxtb	r4, r4
 800f696:	e7ee      	b.n	800f676 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f698:	f105 010c 	add.w	r1, r5, #12
 800f69c:	4630      	mov	r0, r6
 800f69e:	f7ff ff53 	bl	800f548 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f6a2:	4004      	ands	r4, r0
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	bd70      	pop	{r4, r5, r6, pc}

0800f6a8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f6a8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f6ac:	4688      	mov	r8, r1
 800f6ae:	8809      	ldrh	r1, [r1, #0]
 800f6b0:	4681      	mov	r9, r0
 800f6b2:	f7f9 f977 	bl	80089a4 <ucdr_serialize_uint16_t>
 800f6b6:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	4648      	mov	r0, r9
 800f6be:	f7f9 f917 	bl	80088f0 <ucdr_serialize_bool>
 800f6c2:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f6c6:	4006      	ands	r6, r0
 800f6c8:	b2f5      	uxtb	r5, r6
 800f6ca:	b9eb      	cbnz	r3, 800f708 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f6cc:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f6d0:	4648      	mov	r0, r9
 800f6d2:	f7f9 f90d 	bl	80088f0 <ucdr_serialize_bool>
 800f6d6:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f6da:	4005      	ands	r5, r0
 800f6dc:	bb7b      	cbnz	r3, 800f73e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f6de:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f6e2:	4648      	mov	r0, r9
 800f6e4:	f7f9 f904 	bl	80088f0 <ucdr_serialize_bool>
 800f6e8:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f6ec:	4005      	ands	r5, r0
 800f6ee:	b9f3      	cbnz	r3, 800f72e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f6f0:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f6f4:	4648      	mov	r0, r9
 800f6f6:	f7f9 f8fb 	bl	80088f0 <ucdr_serialize_bool>
 800f6fa:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f6fe:	4005      	ands	r5, r0
 800f700:	b94b      	cbnz	r3, 800f716 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f702:	4628      	mov	r0, r5
 800f704:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f708:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f70c:	4648      	mov	r0, r9
 800f70e:	f7f9 f949 	bl	80089a4 <ucdr_serialize_uint16_t>
 800f712:	4005      	ands	r5, r0
 800f714:	e7da      	b.n	800f6cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f716:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f71a:	f108 011c 	add.w	r1, r8, #28
 800f71e:	4648      	mov	r0, r9
 800f720:	f001 fa72 	bl	8010c08 <ucdr_serialize_sequence_uint8_t>
 800f724:	4028      	ands	r0, r5
 800f726:	b2c5      	uxtb	r5, r0
 800f728:	4628      	mov	r0, r5
 800f72a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f72e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f732:	4648      	mov	r0, r9
 800f734:	f7f9 fb20 	bl	8008d78 <ucdr_serialize_uint32_t>
 800f738:	4028      	ands	r0, r5
 800f73a:	b2c5      	uxtb	r5, r0
 800f73c:	e7d8      	b.n	800f6f0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f73e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f742:	4648      	mov	r0, r9
 800f744:	f7f9 fb18 	bl	8008d78 <ucdr_serialize_uint32_t>
 800f748:	4028      	ands	r0, r5
 800f74a:	b2c5      	uxtb	r5, r0
 800f74c:	e7c7      	b.n	800f6de <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f74e:	bf00      	nop

0800f750 <uxr_serialize_OBJK_DataReader_Binary>:
 800f750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f752:	2202      	movs	r2, #2
 800f754:	460c      	mov	r4, r1
 800f756:	4606      	mov	r6, r0
 800f758:	f001 f962 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f75c:	78a1      	ldrb	r1, [r4, #2]
 800f75e:	4605      	mov	r5, r0
 800f760:	4630      	mov	r0, r6
 800f762:	f7f9 f8c5 	bl	80088f0 <ucdr_serialize_bool>
 800f766:	78a3      	ldrb	r3, [r4, #2]
 800f768:	4005      	ands	r5, r0
 800f76a:	b2ed      	uxtb	r5, r5
 800f76c:	b90b      	cbnz	r3, 800f772 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f76e:	4628      	mov	r0, r5
 800f770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f772:	f104 0108 	add.w	r1, r4, #8
 800f776:	4630      	mov	r0, r6
 800f778:	f7ff ff96 	bl	800f6a8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f77c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f780:	4607      	mov	r7, r0
 800f782:	4630      	mov	r0, r6
 800f784:	f7f9 f8b4 	bl	80088f0 <ucdr_serialize_bool>
 800f788:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f78c:	4038      	ands	r0, r7
 800f78e:	b2c7      	uxtb	r7, r0
 800f790:	b95b      	cbnz	r3, 800f7aa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f792:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f796:	4630      	mov	r0, r6
 800f798:	f7f9 f8aa 	bl	80088f0 <ucdr_serialize_bool>
 800f79c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f7a0:	4007      	ands	r7, r0
 800f7a2:	b94b      	cbnz	r3, 800f7b8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f7a4:	403d      	ands	r5, r7
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7aa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f7f9 fd38 	bl	8009224 <ucdr_serialize_uint64_t>
 800f7b4:	4007      	ands	r7, r0
 800f7b6:	e7ec      	b.n	800f792 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f7b8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f7ba:	4630      	mov	r0, r6
 800f7bc:	f001 fa50 	bl	8010c60 <ucdr_serialize_string>
 800f7c0:	4007      	ands	r7, r0
 800f7c2:	b2ff      	uxtb	r7, r7
 800f7c4:	e7ee      	b.n	800f7a4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f7c6:	bf00      	nop

0800f7c8 <uxr_deserialize_ObjectVariant>:
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	4605      	mov	r5, r0
 800f7cc:	460e      	mov	r6, r1
 800f7ce:	f7f9 f8d3 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f7d2:	b168      	cbz	r0, 800f7f0 <uxr_deserialize_ObjectVariant+0x28>
 800f7d4:	7833      	ldrb	r3, [r6, #0]
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	4604      	mov	r4, r0
 800f7da:	2b0d      	cmp	r3, #13
 800f7dc:	d809      	bhi.n	800f7f2 <uxr_deserialize_ObjectVariant+0x2a>
 800f7de:	e8df f003 	tbb	[pc, r3]
 800f7e2:	0a41      	.short	0x0a41
 800f7e4:	0a0a2323 	.word	0x0a0a2323
 800f7e8:	10080a0a 	.word	0x10080a0a
 800f7ec:	565c1010 	.word	0x565c1010
 800f7f0:	2400      	movs	r4, #0
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	bd70      	pop	{r4, r5, r6, pc}
 800f7f6:	1d31      	adds	r1, r6, #4
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7fe:	f7ff be31 	b.w	800f464 <uxr_deserialize_DATAWRITER_Representation>
 800f802:	1d31      	adds	r1, r6, #4
 800f804:	4628      	mov	r0, r5
 800f806:	f7f9 f8b7 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f80a:	2800      	cmp	r0, #0
 800f80c:	d0f0      	beq.n	800f7f0 <uxr_deserialize_ObjectVariant+0x28>
 800f80e:	7933      	ldrb	r3, [r6, #4]
 800f810:	2b01      	cmp	r3, #1
 800f812:	d001      	beq.n	800f818 <uxr_deserialize_ObjectVariant+0x50>
 800f814:	2b02      	cmp	r3, #2
 800f816:	d1ec      	bne.n	800f7f2 <uxr_deserialize_ObjectVariant+0x2a>
 800f818:	68b1      	ldr	r1, [r6, #8]
 800f81a:	4628      	mov	r0, r5
 800f81c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f824:	f001 ba2c 	b.w	8010c80 <ucdr_deserialize_string>
 800f828:	1d31      	adds	r1, r6, #4
 800f82a:	4628      	mov	r0, r5
 800f82c:	f7f9 f8a4 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f830:	4604      	mov	r4, r0
 800f832:	b170      	cbz	r0, 800f852 <uxr_deserialize_ObjectVariant+0x8a>
 800f834:	7933      	ldrb	r3, [r6, #4]
 800f836:	2b02      	cmp	r3, #2
 800f838:	d04c      	beq.n	800f8d4 <uxr_deserialize_ObjectVariant+0x10c>
 800f83a:	2b03      	cmp	r3, #3
 800f83c:	d109      	bne.n	800f852 <uxr_deserialize_ObjectVariant+0x8a>
 800f83e:	f106 0308 	add.w	r3, r6, #8
 800f842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f846:	f106 010c 	add.w	r1, r6, #12
 800f84a:	4628      	mov	r0, r5
 800f84c:	f001 f9ee 	bl	8010c2c <ucdr_deserialize_sequence_uint8_t>
 800f850:	4604      	mov	r4, r0
 800f852:	2202      	movs	r2, #2
 800f854:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f858:	4628      	mov	r0, r5
 800f85a:	f001 f945 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f85e:	4020      	ands	r0, r4
 800f860:	b2c4      	uxtb	r4, r0
 800f862:	e7c6      	b.n	800f7f2 <uxr_deserialize_ObjectVariant+0x2a>
 800f864:	1d31      	adds	r1, r6, #4
 800f866:	4628      	mov	r0, r5
 800f868:	f7f9 f886 	bl	8008978 <ucdr_deserialize_uint8_t>
 800f86c:	4604      	mov	r4, r0
 800f86e:	b130      	cbz	r0, 800f87e <uxr_deserialize_ObjectVariant+0xb6>
 800f870:	7933      	ldrb	r3, [r6, #4]
 800f872:	2b02      	cmp	r3, #2
 800f874:	d036      	beq.n	800f8e4 <uxr_deserialize_ObjectVariant+0x11c>
 800f876:	2b03      	cmp	r3, #3
 800f878:	d03c      	beq.n	800f8f4 <uxr_deserialize_ObjectVariant+0x12c>
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d032      	beq.n	800f8e4 <uxr_deserialize_ObjectVariant+0x11c>
 800f87e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f882:	4628      	mov	r0, r5
 800f884:	f7f9 fe1e 	bl	80094c4 <ucdr_deserialize_int16_t>
 800f888:	4020      	ands	r0, r4
 800f88a:	b2c4      	uxtb	r4, r0
 800f88c:	e7b1      	b.n	800f7f2 <uxr_deserialize_ObjectVariant+0x2a>
 800f88e:	1d31      	adds	r1, r6, #4
 800f890:	4628      	mov	r0, r5
 800f892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f896:	f7ff bc9b 	b.w	800f1d0 <uxr_deserialize_CLIENT_Representation>
 800f89a:	2204      	movs	r2, #4
 800f89c:	18b1      	adds	r1, r6, r2
 800f89e:	4628      	mov	r0, r5
 800f8a0:	f001 f922 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f8a4:	2202      	movs	r2, #2
 800f8a6:	f106 0108 	add.w	r1, r6, #8
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	f001 f91b 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	4004      	ands	r4, r0
 800f8b6:	f106 010a 	add.w	r1, r6, #10
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	f001 f914 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f8c0:	b2e4      	uxtb	r4, r4
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	f106 010c 	add.w	r1, r6, #12
 800f8c8:	4628      	mov	r0, r5
 800f8ca:	401c      	ands	r4, r3
 800f8cc:	f7f9 f826 	bl	800891c <ucdr_deserialize_bool>
 800f8d0:	4004      	ands	r4, r0
 800f8d2:	e78e      	b.n	800f7f2 <uxr_deserialize_ObjectVariant+0x2a>
 800f8d4:	68b1      	ldr	r1, [r6, #8]
 800f8d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8da:	4628      	mov	r0, r5
 800f8dc:	f001 f9d0 	bl	8010c80 <ucdr_deserialize_string>
 800f8e0:	4604      	mov	r4, r0
 800f8e2:	e7b6      	b.n	800f852 <uxr_deserialize_ObjectVariant+0x8a>
 800f8e4:	68b1      	ldr	r1, [r6, #8]
 800f8e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f001 f9c8 	bl	8010c80 <ucdr_deserialize_string>
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	e7c4      	b.n	800f87e <uxr_deserialize_ObjectVariant+0xb6>
 800f8f4:	f106 0308 	add.w	r3, r6, #8
 800f8f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8fc:	f106 010c 	add.w	r1, r6, #12
 800f900:	4628      	mov	r0, r5
 800f902:	f001 f993 	bl	8010c2c <ucdr_deserialize_sequence_uint8_t>
 800f906:	4604      	mov	r4, r0
 800f908:	e7b9      	b.n	800f87e <uxr_deserialize_ObjectVariant+0xb6>
 800f90a:	bf00      	nop

0800f90c <uxr_deserialize_BaseObjectRequest>:
 800f90c:	b570      	push	{r4, r5, r6, lr}
 800f90e:	2202      	movs	r2, #2
 800f910:	4605      	mov	r5, r0
 800f912:	460e      	mov	r6, r1
 800f914:	f001 f8e8 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f918:	2202      	movs	r2, #2
 800f91a:	4604      	mov	r4, r0
 800f91c:	18b1      	adds	r1, r6, r2
 800f91e:	4628      	mov	r0, r5
 800f920:	f001 f8e2 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800f924:	4020      	ands	r0, r4
 800f926:	b2c0      	uxtb	r0, r0
 800f928:	bd70      	pop	{r4, r5, r6, pc}
 800f92a:	bf00      	nop

0800f92c <uxr_serialize_ActivityInfoVariant>:
 800f92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f930:	460d      	mov	r5, r1
 800f932:	7809      	ldrb	r1, [r1, #0]
 800f934:	4607      	mov	r7, r0
 800f936:	f7f9 f809 	bl	800894c <ucdr_serialize_uint8_t>
 800f93a:	4681      	mov	r9, r0
 800f93c:	b138      	cbz	r0, 800f94e <uxr_serialize_ActivityInfoVariant+0x22>
 800f93e:	782b      	ldrb	r3, [r5, #0]
 800f940:	2b06      	cmp	r3, #6
 800f942:	f000 8082 	beq.w	800fa4a <uxr_serialize_ActivityInfoVariant+0x11e>
 800f946:	2b0d      	cmp	r3, #13
 800f948:	d016      	beq.n	800f978 <uxr_serialize_ActivityInfoVariant+0x4c>
 800f94a:	2b05      	cmp	r3, #5
 800f94c:	d002      	beq.n	800f954 <uxr_serialize_ActivityInfoVariant+0x28>
 800f94e:	4648      	mov	r0, r9
 800f950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f954:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f958:	4638      	mov	r0, r7
 800f95a:	f7f9 fd33 	bl	80093c4 <ucdr_serialize_int16_t>
 800f95e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f962:	4681      	mov	r9, r0
 800f964:	4638      	mov	r0, r7
 800f966:	f7f9 fc5d 	bl	8009224 <ucdr_serialize_uint64_t>
 800f96a:	ea09 0000 	and.w	r0, r9, r0
 800f96e:	fa5f f980 	uxtb.w	r9, r0
 800f972:	4648      	mov	r0, r9
 800f974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f978:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f97c:	4638      	mov	r0, r7
 800f97e:	f7f9 fd21 	bl	80093c4 <ucdr_serialize_int16_t>
 800f982:	68e9      	ldr	r1, [r5, #12]
 800f984:	4681      	mov	r9, r0
 800f986:	4638      	mov	r0, r7
 800f988:	f7f9 f9f6 	bl	8008d78 <ucdr_serialize_uint32_t>
 800f98c:	68eb      	ldr	r3, [r5, #12]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d0eb      	beq.n	800f96a <uxr_serialize_ActivityInfoVariant+0x3e>
 800f992:	b320      	cbz	r0, 800f9de <uxr_serialize_ActivityInfoVariant+0xb2>
 800f994:	f105 080c 	add.w	r8, r5, #12
 800f998:	2600      	movs	r6, #0
 800f99a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f99e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f9a2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	f7f8 ffd0 	bl	800894c <ucdr_serialize_uint8_t>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d053      	beq.n	800fa58 <uxr_serialize_ActivityInfoVariant+0x12c>
 800f9b0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f9b4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f9b8:	0074      	lsls	r4, r6, #1
 800f9ba:	00c9      	lsls	r1, r1, #3
 800f9bc:	2b03      	cmp	r3, #3
 800f9be:	d854      	bhi.n	800fa6a <uxr_serialize_ActivityInfoVariant+0x13e>
 800f9c0:	e8df f003 	tbb	[pc, r3]
 800f9c4:	02102132 	.word	0x02102132
 800f9c8:	4441      	add	r1, r8
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	6889      	ldr	r1, [r1, #8]
 800f9ce:	f001 f947 	bl	8010c60 <ucdr_serialize_string>
 800f9d2:	68ea      	ldr	r2, [r5, #12]
 800f9d4:	3601      	adds	r6, #1
 800f9d6:	4296      	cmp	r6, r2
 800f9d8:	d242      	bcs.n	800fa60 <uxr_serialize_ActivityInfoVariant+0x134>
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d1dd      	bne.n	800f99a <uxr_serialize_ActivityInfoVariant+0x6e>
 800f9de:	f04f 0900 	mov.w	r9, #0
 800f9e2:	e7b4      	b.n	800f94e <uxr_serialize_ActivityInfoVariant+0x22>
 800f9e4:	3108      	adds	r1, #8
 800f9e6:	4441      	add	r1, r8
 800f9e8:	2210      	movs	r2, #16
 800f9ea:	4638      	mov	r0, r7
 800f9ec:	f001 f818 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800f9f0:	4434      	add	r4, r6
 800f9f2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f9fa:	4638      	mov	r0, r7
 800f9fc:	f7f9 f9bc 	bl	8008d78 <ucdr_serialize_uint32_t>
 800fa00:	4020      	ands	r0, r4
 800fa02:	b2c0      	uxtb	r0, r0
 800fa04:	e7e5      	b.n	800f9d2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fa06:	3108      	adds	r1, #8
 800fa08:	4441      	add	r1, r8
 800fa0a:	2204      	movs	r2, #4
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	f001 f807 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fa12:	4434      	add	r4, r6
 800fa14:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fa18:	4604      	mov	r4, r0
 800fa1a:	8b19      	ldrh	r1, [r3, #24]
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	f7f8 ffc1 	bl	80089a4 <ucdr_serialize_uint16_t>
 800fa22:	4020      	ands	r0, r4
 800fa24:	b2c0      	uxtb	r0, r0
 800fa26:	e7d4      	b.n	800f9d2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fa28:	3108      	adds	r1, #8
 800fa2a:	4441      	add	r1, r8
 800fa2c:	2202      	movs	r2, #2
 800fa2e:	4638      	mov	r0, r7
 800fa30:	f000 fff6 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fa34:	4434      	add	r4, r6
 800fa36:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	7d99      	ldrb	r1, [r3, #22]
 800fa3e:	4638      	mov	r0, r7
 800fa40:	f7f8 ff84 	bl	800894c <ucdr_serialize_uint8_t>
 800fa44:	4020      	ands	r0, r4
 800fa46:	b2c0      	uxtb	r0, r0
 800fa48:	e7c3      	b.n	800f9d2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fa4a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fa4e:	4638      	mov	r0, r7
 800fa50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa54:	f7f9 bcb6 	b.w	80093c4 <ucdr_serialize_int16_t>
 800fa58:	68ea      	ldr	r2, [r5, #12]
 800fa5a:	3601      	adds	r6, #1
 800fa5c:	42b2      	cmp	r2, r6
 800fa5e:	d8be      	bhi.n	800f9de <uxr_serialize_ActivityInfoVariant+0xb2>
 800fa60:	ea09 0900 	and.w	r9, r9, r0
 800fa64:	fa5f f989 	uxtb.w	r9, r9
 800fa68:	e771      	b.n	800f94e <uxr_serialize_ActivityInfoVariant+0x22>
 800fa6a:	68eb      	ldr	r3, [r5, #12]
 800fa6c:	3601      	adds	r6, #1
 800fa6e:	429e      	cmp	r6, r3
 800fa70:	f10a 0a18 	add.w	sl, sl, #24
 800fa74:	d395      	bcc.n	800f9a2 <uxr_serialize_ActivityInfoVariant+0x76>
 800fa76:	e76a      	b.n	800f94e <uxr_serialize_ActivityInfoVariant+0x22>

0800fa78 <uxr_deserialize_BaseObjectReply>:
 800fa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7c:	2202      	movs	r2, #2
 800fa7e:	4606      	mov	r6, r0
 800fa80:	460f      	mov	r7, r1
 800fa82:	f001 f831 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fa86:	2202      	movs	r2, #2
 800fa88:	18b9      	adds	r1, r7, r2
 800fa8a:	4605      	mov	r5, r0
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	f001 f82b 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fa92:	1d39      	adds	r1, r7, #4
 800fa94:	4680      	mov	r8, r0
 800fa96:	4630      	mov	r0, r6
 800fa98:	f7f8 ff6e 	bl	8008978 <ucdr_deserialize_uint8_t>
 800fa9c:	1d79      	adds	r1, r7, #5
 800fa9e:	4604      	mov	r4, r0
 800faa0:	4630      	mov	r0, r6
 800faa2:	f7f8 ff69 	bl	8008978 <ucdr_deserialize_uint8_t>
 800faa6:	ea05 0508 	and.w	r5, r5, r8
 800faaa:	402c      	ands	r4, r5
 800faac:	4020      	ands	r0, r4
 800faae:	b2c0      	uxtb	r0, r0
 800fab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fab4 <uxr_serialize_ReadSpecification>:
 800fab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fab8:	460e      	mov	r6, r1
 800faba:	7809      	ldrb	r1, [r1, #0]
 800fabc:	4607      	mov	r7, r0
 800fabe:	f7f8 ff45 	bl	800894c <ucdr_serialize_uint8_t>
 800fac2:	7871      	ldrb	r1, [r6, #1]
 800fac4:	4604      	mov	r4, r0
 800fac6:	4638      	mov	r0, r7
 800fac8:	f7f8 ff40 	bl	800894c <ucdr_serialize_uint8_t>
 800facc:	78b1      	ldrb	r1, [r6, #2]
 800face:	4004      	ands	r4, r0
 800fad0:	4638      	mov	r0, r7
 800fad2:	f7f8 ff0d 	bl	80088f0 <ucdr_serialize_bool>
 800fad6:	78b3      	ldrb	r3, [r6, #2]
 800fad8:	b2e4      	uxtb	r4, r4
 800fada:	4004      	ands	r4, r0
 800fadc:	b94b      	cbnz	r3, 800faf2 <uxr_serialize_ReadSpecification+0x3e>
 800fade:	7a31      	ldrb	r1, [r6, #8]
 800fae0:	4638      	mov	r0, r7
 800fae2:	f7f8 ff05 	bl	80088f0 <ucdr_serialize_bool>
 800fae6:	7a33      	ldrb	r3, [r6, #8]
 800fae8:	4004      	ands	r4, r0
 800faea:	b943      	cbnz	r3, 800fafe <uxr_serialize_ReadSpecification+0x4a>
 800faec:	4620      	mov	r0, r4
 800faee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf2:	6871      	ldr	r1, [r6, #4]
 800faf4:	4638      	mov	r0, r7
 800faf6:	f001 f8b3 	bl	8010c60 <ucdr_serialize_string>
 800fafa:	4004      	ands	r4, r0
 800fafc:	e7ef      	b.n	800fade <uxr_serialize_ReadSpecification+0x2a>
 800fafe:	8971      	ldrh	r1, [r6, #10]
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7f8 ff4f 	bl	80089a4 <ucdr_serialize_uint16_t>
 800fb06:	89b1      	ldrh	r1, [r6, #12]
 800fb08:	4605      	mov	r5, r0
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	f7f8 ff4a 	bl	80089a4 <ucdr_serialize_uint16_t>
 800fb10:	89f1      	ldrh	r1, [r6, #14]
 800fb12:	4005      	ands	r5, r0
 800fb14:	4638      	mov	r0, r7
 800fb16:	f7f8 ff45 	bl	80089a4 <ucdr_serialize_uint16_t>
 800fb1a:	8a31      	ldrh	r1, [r6, #16]
 800fb1c:	4680      	mov	r8, r0
 800fb1e:	4638      	mov	r0, r7
 800fb20:	f7f8 ff40 	bl	80089a4 <ucdr_serialize_uint16_t>
 800fb24:	b2ed      	uxtb	r5, r5
 800fb26:	4025      	ands	r5, r4
 800fb28:	ea08 0505 	and.w	r5, r8, r5
 800fb2c:	ea00 0405 	and.w	r4, r0, r5
 800fb30:	4620      	mov	r0, r4
 800fb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb36:	bf00      	nop

0800fb38 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fb38:	f7ff baf2 	b.w	800f120 <uxr_serialize_CLIENT_Representation>

0800fb3c <uxr_serialize_CREATE_Payload>:
 800fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3e:	2202      	movs	r2, #2
 800fb40:	4607      	mov	r7, r0
 800fb42:	460e      	mov	r6, r1
 800fb44:	f000 ff6c 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fb48:	2202      	movs	r2, #2
 800fb4a:	18b1      	adds	r1, r6, r2
 800fb4c:	4605      	mov	r5, r0
 800fb4e:	4638      	mov	r0, r7
 800fb50:	f000 ff66 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fb54:	7931      	ldrb	r1, [r6, #4]
 800fb56:	4604      	mov	r4, r0
 800fb58:	4638      	mov	r0, r7
 800fb5a:	f7f8 fef7 	bl	800894c <ucdr_serialize_uint8_t>
 800fb5e:	b170      	cbz	r0, 800fb7e <uxr_serialize_CREATE_Payload+0x42>
 800fb60:	7933      	ldrb	r3, [r6, #4]
 800fb62:	402c      	ands	r4, r5
 800fb64:	3b01      	subs	r3, #1
 800fb66:	b2e4      	uxtb	r4, r4
 800fb68:	2b0d      	cmp	r3, #13
 800fb6a:	d809      	bhi.n	800fb80 <uxr_serialize_CREATE_Payload+0x44>
 800fb6c:	e8df f003 	tbb	[pc, r3]
 800fb70:	23230a4c 	.word	0x23230a4c
 800fb74:	0a0a0a0a 	.word	0x0a0a0a0a
 800fb78:	12121208 	.word	0x12121208
 800fb7c:	3e45      	.short	0x3e45
 800fb7e:	2400      	movs	r4, #0
 800fb80:	4620      	mov	r0, r4
 800fb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb84:	f106 0108 	add.w	r1, r6, #8
 800fb88:	4638      	mov	r0, r7
 800fb8a:	f7ff fbcf 	bl	800f32c <uxr_serialize_DATAWRITER_Representation>
 800fb8e:	4004      	ands	r4, r0
 800fb90:	4620      	mov	r0, r4
 800fb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb94:	7a31      	ldrb	r1, [r6, #8]
 800fb96:	4638      	mov	r0, r7
 800fb98:	f7f8 fed8 	bl	800894c <ucdr_serialize_uint8_t>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d0ee      	beq.n	800fb7e <uxr_serialize_CREATE_Payload+0x42>
 800fba0:	7a33      	ldrb	r3, [r6, #8]
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d001      	beq.n	800fbaa <uxr_serialize_CREATE_Payload+0x6e>
 800fba6:	2b02      	cmp	r3, #2
 800fba8:	d1ea      	bne.n	800fb80 <uxr_serialize_CREATE_Payload+0x44>
 800fbaa:	68f1      	ldr	r1, [r6, #12]
 800fbac:	4638      	mov	r0, r7
 800fbae:	f001 f857 	bl	8010c60 <ucdr_serialize_string>
 800fbb2:	4004      	ands	r4, r0
 800fbb4:	e7e4      	b.n	800fb80 <uxr_serialize_CREATE_Payload+0x44>
 800fbb6:	7a31      	ldrb	r1, [r6, #8]
 800fbb8:	4638      	mov	r0, r7
 800fbba:	f7f8 fec7 	bl	800894c <ucdr_serialize_uint8_t>
 800fbbe:	4605      	mov	r5, r0
 800fbc0:	b158      	cbz	r0, 800fbda <uxr_serialize_CREATE_Payload+0x9e>
 800fbc2:	7a33      	ldrb	r3, [r6, #8]
 800fbc4:	2b02      	cmp	r3, #2
 800fbc6:	d034      	beq.n	800fc32 <uxr_serialize_CREATE_Payload+0xf6>
 800fbc8:	2b03      	cmp	r3, #3
 800fbca:	d106      	bne.n	800fbda <uxr_serialize_CREATE_Payload+0x9e>
 800fbcc:	68f2      	ldr	r2, [r6, #12]
 800fbce:	f106 0110 	add.w	r1, r6, #16
 800fbd2:	4638      	mov	r0, r7
 800fbd4:	f001 f818 	bl	8010c08 <ucdr_serialize_sequence_uint8_t>
 800fbd8:	4605      	mov	r5, r0
 800fbda:	2202      	movs	r2, #2
 800fbdc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	f000 ff1d 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fbe6:	4028      	ands	r0, r5
 800fbe8:	4004      	ands	r4, r0
 800fbea:	e7c9      	b.n	800fb80 <uxr_serialize_CREATE_Payload+0x44>
 800fbec:	f106 0108 	add.w	r1, r6, #8
 800fbf0:	4638      	mov	r0, r7
 800fbf2:	f7ff fa95 	bl	800f120 <uxr_serialize_CLIENT_Representation>
 800fbf6:	4004      	ands	r4, r0
 800fbf8:	e7c2      	b.n	800fb80 <uxr_serialize_CREATE_Payload+0x44>
 800fbfa:	f106 0108 	add.w	r1, r6, #8
 800fbfe:	4638      	mov	r0, r7
 800fc00:	f7ff fb4a 	bl	800f298 <uxr_serialize_AGENT_Representation>
 800fc04:	4004      	ands	r4, r0
 800fc06:	e7bb      	b.n	800fb80 <uxr_serialize_CREATE_Payload+0x44>
 800fc08:	7a31      	ldrb	r1, [r6, #8]
 800fc0a:	4638      	mov	r0, r7
 800fc0c:	f7f8 fe9e 	bl	800894c <ucdr_serialize_uint8_t>
 800fc10:	4605      	mov	r5, r0
 800fc12:	b130      	cbz	r0, 800fc22 <uxr_serialize_CREATE_Payload+0xe6>
 800fc14:	7a33      	ldrb	r3, [r6, #8]
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	d011      	beq.n	800fc3e <uxr_serialize_CREATE_Payload+0x102>
 800fc1a:	2b03      	cmp	r3, #3
 800fc1c:	d015      	beq.n	800fc4a <uxr_serialize_CREATE_Payload+0x10e>
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d00d      	beq.n	800fc3e <uxr_serialize_CREATE_Payload+0x102>
 800fc22:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800fc26:	4638      	mov	r0, r7
 800fc28:	f7f9 fbcc 	bl	80093c4 <ucdr_serialize_int16_t>
 800fc2c:	4028      	ands	r0, r5
 800fc2e:	4004      	ands	r4, r0
 800fc30:	e7a6      	b.n	800fb80 <uxr_serialize_CREATE_Payload+0x44>
 800fc32:	68f1      	ldr	r1, [r6, #12]
 800fc34:	4638      	mov	r0, r7
 800fc36:	f001 f813 	bl	8010c60 <ucdr_serialize_string>
 800fc3a:	4605      	mov	r5, r0
 800fc3c:	e7cd      	b.n	800fbda <uxr_serialize_CREATE_Payload+0x9e>
 800fc3e:	68f1      	ldr	r1, [r6, #12]
 800fc40:	4638      	mov	r0, r7
 800fc42:	f001 f80d 	bl	8010c60 <ucdr_serialize_string>
 800fc46:	4605      	mov	r5, r0
 800fc48:	e7eb      	b.n	800fc22 <uxr_serialize_CREATE_Payload+0xe6>
 800fc4a:	68f2      	ldr	r2, [r6, #12]
 800fc4c:	f106 0110 	add.w	r1, r6, #16
 800fc50:	4638      	mov	r0, r7
 800fc52:	f000 ffd9 	bl	8010c08 <ucdr_serialize_sequence_uint8_t>
 800fc56:	4605      	mov	r5, r0
 800fc58:	e7e3      	b.n	800fc22 <uxr_serialize_CREATE_Payload+0xe6>
 800fc5a:	bf00      	nop

0800fc5c <uxr_deserialize_GET_INFO_Payload>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	2202      	movs	r2, #2
 800fc60:	4605      	mov	r5, r0
 800fc62:	460e      	mov	r6, r1
 800fc64:	f000 ff40 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fc68:	2202      	movs	r2, #2
 800fc6a:	18b1      	adds	r1, r6, r2
 800fc6c:	4604      	mov	r4, r0
 800fc6e:	4628      	mov	r0, r5
 800fc70:	f000 ff3a 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fc74:	1d31      	adds	r1, r6, #4
 800fc76:	4004      	ands	r4, r0
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f7f9 f9ad 	bl	8008fd8 <ucdr_deserialize_uint32_t>
 800fc7e:	b2e4      	uxtb	r4, r4
 800fc80:	4020      	ands	r0, r4
 800fc82:	bd70      	pop	{r4, r5, r6, pc}

0800fc84 <uxr_serialize_DELETE_Payload>:
 800fc84:	b570      	push	{r4, r5, r6, lr}
 800fc86:	2202      	movs	r2, #2
 800fc88:	4605      	mov	r5, r0
 800fc8a:	460e      	mov	r6, r1
 800fc8c:	f000 fec8 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fc90:	2202      	movs	r2, #2
 800fc92:	4604      	mov	r4, r0
 800fc94:	18b1      	adds	r1, r6, r2
 800fc96:	4628      	mov	r0, r5
 800fc98:	f000 fec2 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fc9c:	4020      	ands	r0, r4
 800fc9e:	b2c0      	uxtb	r0, r0
 800fca0:	bd70      	pop	{r4, r5, r6, pc}
 800fca2:	bf00      	nop

0800fca4 <uxr_deserialize_STATUS_AGENT_Payload>:
 800fca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca8:	4605      	mov	r5, r0
 800fcaa:	460e      	mov	r6, r1
 800fcac:	f7f8 fe64 	bl	8008978 <ucdr_deserialize_uint8_t>
 800fcb0:	1c71      	adds	r1, r6, #1
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	f7f8 fe5f 	bl	8008978 <ucdr_deserialize_uint8_t>
 800fcba:	2204      	movs	r2, #4
 800fcbc:	18b1      	adds	r1, r6, r2
 800fcbe:	4680      	mov	r8, r0
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	f000 ff11 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fcc6:	f106 0108 	add.w	r1, r6, #8
 800fcca:	4607      	mov	r7, r0
 800fccc:	2202      	movs	r2, #2
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f000 ff0a 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fcd4:	ea04 0308 	and.w	r3, r4, r8
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	ea03 0407 	and.w	r4, r3, r7
 800fcde:	2202      	movs	r2, #2
 800fce0:	4607      	mov	r7, r0
 800fce2:	f106 010a 	add.w	r1, r6, #10
 800fce6:	4628      	mov	r0, r5
 800fce8:	f000 fefe 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fcec:	f106 010c 	add.w	r1, r6, #12
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	4628      	mov	r0, r5
 800fcf4:	461d      	mov	r5, r3
 800fcf6:	f7f8 fe11 	bl	800891c <ucdr_deserialize_bool>
 800fcfa:	403c      	ands	r4, r7
 800fcfc:	4025      	ands	r5, r4
 800fcfe:	4028      	ands	r0, r5
 800fd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd04 <uxr_deserialize_STATUS_Payload>:
 800fd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd08:	2202      	movs	r2, #2
 800fd0a:	4606      	mov	r6, r0
 800fd0c:	460f      	mov	r7, r1
 800fd0e:	f000 feeb 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fd12:	2202      	movs	r2, #2
 800fd14:	18b9      	adds	r1, r7, r2
 800fd16:	4605      	mov	r5, r0
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f000 fee5 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fd1e:	1d39      	adds	r1, r7, #4
 800fd20:	4680      	mov	r8, r0
 800fd22:	4630      	mov	r0, r6
 800fd24:	f7f8 fe28 	bl	8008978 <ucdr_deserialize_uint8_t>
 800fd28:	1d79      	adds	r1, r7, #5
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	f7f8 fe23 	bl	8008978 <ucdr_deserialize_uint8_t>
 800fd32:	ea05 0508 	and.w	r5, r5, r8
 800fd36:	402c      	ands	r4, r5
 800fd38:	4020      	ands	r0, r4
 800fd3a:	b2c0      	uxtb	r0, r0
 800fd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd40 <uxr_serialize_INFO_Payload>:
 800fd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd44:	2202      	movs	r2, #2
 800fd46:	460c      	mov	r4, r1
 800fd48:	4605      	mov	r5, r0
 800fd4a:	f000 fe69 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fd4e:	2202      	movs	r2, #2
 800fd50:	18a1      	adds	r1, r4, r2
 800fd52:	4680      	mov	r8, r0
 800fd54:	4628      	mov	r0, r5
 800fd56:	f000 fe63 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fd5a:	7921      	ldrb	r1, [r4, #4]
 800fd5c:	4607      	mov	r7, r0
 800fd5e:	4628      	mov	r0, r5
 800fd60:	f7f8 fdf4 	bl	800894c <ucdr_serialize_uint8_t>
 800fd64:	7961      	ldrb	r1, [r4, #5]
 800fd66:	4606      	mov	r6, r0
 800fd68:	4628      	mov	r0, r5
 800fd6a:	f7f8 fdef 	bl	800894c <ucdr_serialize_uint8_t>
 800fd6e:	ea08 0807 	and.w	r8, r8, r7
 800fd72:	ea06 0608 	and.w	r6, r6, r8
 800fd76:	4006      	ands	r6, r0
 800fd78:	7a21      	ldrb	r1, [r4, #8]
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	f7f8 fdb8 	bl	80088f0 <ucdr_serialize_bool>
 800fd80:	7a23      	ldrb	r3, [r4, #8]
 800fd82:	b2f7      	uxtb	r7, r6
 800fd84:	4606      	mov	r6, r0
 800fd86:	b96b      	cbnz	r3, 800fda4 <uxr_serialize_INFO_Payload+0x64>
 800fd88:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	f7f8 fdaf 	bl	80088f0 <ucdr_serialize_bool>
 800fd92:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800fd96:	4030      	ands	r0, r6
 800fd98:	b2c6      	uxtb	r6, r0
 800fd9a:	b983      	cbnz	r3, 800fdbe <uxr_serialize_INFO_Payload+0x7e>
 800fd9c:	ea06 0007 	and.w	r0, r6, r7
 800fda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda4:	7b21      	ldrb	r1, [r4, #12]
 800fda6:	4628      	mov	r0, r5
 800fda8:	f7f8 fdd0 	bl	800894c <ucdr_serialize_uint8_t>
 800fdac:	b188      	cbz	r0, 800fdd2 <uxr_serialize_INFO_Payload+0x92>
 800fdae:	f104 010c 	add.w	r1, r4, #12
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	f7ff fae2 	bl	800f37c <uxr_serialize_ObjectVariant.part.0>
 800fdb8:	4030      	ands	r0, r6
 800fdba:	b2c6      	uxtb	r6, r0
 800fdbc:	e7e4      	b.n	800fd88 <uxr_serialize_INFO_Payload+0x48>
 800fdbe:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	f7ff fdb2 	bl	800f92c <uxr_serialize_ActivityInfoVariant>
 800fdc8:	4006      	ands	r6, r0
 800fdca:	ea06 0007 	and.w	r0, r6, r7
 800fdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd2:	4606      	mov	r6, r0
 800fdd4:	e7d8      	b.n	800fd88 <uxr_serialize_INFO_Payload+0x48>
 800fdd6:	bf00      	nop

0800fdd8 <uxr_serialize_READ_DATA_Payload>:
 800fdd8:	b570      	push	{r4, r5, r6, lr}
 800fdda:	2202      	movs	r2, #2
 800fddc:	4605      	mov	r5, r0
 800fdde:	460e      	mov	r6, r1
 800fde0:	f000 fe1e 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fde4:	2202      	movs	r2, #2
 800fde6:	18b1      	adds	r1, r6, r2
 800fde8:	4604      	mov	r4, r0
 800fdea:	4628      	mov	r0, r5
 800fdec:	f000 fe18 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fdf0:	1d31      	adds	r1, r6, #4
 800fdf2:	4004      	ands	r4, r0
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	f7ff fe5d 	bl	800fab4 <uxr_serialize_ReadSpecification>
 800fdfa:	b2e4      	uxtb	r4, r4
 800fdfc:	4020      	ands	r0, r4
 800fdfe:	bd70      	pop	{r4, r5, r6, pc}

0800fe00 <uxr_serialize_ACKNACK_Payload>:
 800fe00:	b570      	push	{r4, r5, r6, lr}
 800fe02:	460c      	mov	r4, r1
 800fe04:	460e      	mov	r6, r1
 800fe06:	f834 1b02 	ldrh.w	r1, [r4], #2
 800fe0a:	4605      	mov	r5, r0
 800fe0c:	f7f8 fdca 	bl	80089a4 <ucdr_serialize_uint16_t>
 800fe10:	2202      	movs	r2, #2
 800fe12:	4621      	mov	r1, r4
 800fe14:	4604      	mov	r4, r0
 800fe16:	4628      	mov	r0, r5
 800fe18:	f000 fe02 	bl	8010a20 <ucdr_serialize_array_uint8_t>
 800fe1c:	7931      	ldrb	r1, [r6, #4]
 800fe1e:	4004      	ands	r4, r0
 800fe20:	4628      	mov	r0, r5
 800fe22:	f7f8 fd93 	bl	800894c <ucdr_serialize_uint8_t>
 800fe26:	b2e4      	uxtb	r4, r4
 800fe28:	4020      	ands	r0, r4
 800fe2a:	bd70      	pop	{r4, r5, r6, pc}

0800fe2c <uxr_deserialize_ACKNACK_Payload>:
 800fe2c:	b570      	push	{r4, r5, r6, lr}
 800fe2e:	4605      	mov	r5, r0
 800fe30:	460e      	mov	r6, r1
 800fe32:	f7f8 feb7 	bl	8008ba4 <ucdr_deserialize_uint16_t>
 800fe36:	2202      	movs	r2, #2
 800fe38:	18b1      	adds	r1, r6, r2
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	f000 fe53 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800fe42:	1d31      	adds	r1, r6, #4
 800fe44:	4004      	ands	r4, r0
 800fe46:	4628      	mov	r0, r5
 800fe48:	f7f8 fd96 	bl	8008978 <ucdr_deserialize_uint8_t>
 800fe4c:	b2e4      	uxtb	r4, r4
 800fe4e:	4020      	ands	r0, r4
 800fe50:	bd70      	pop	{r4, r5, r6, pc}
 800fe52:	bf00      	nop

0800fe54 <uxr_serialize_HEARTBEAT_Payload>:
 800fe54:	b570      	push	{r4, r5, r6, lr}
 800fe56:	460d      	mov	r5, r1
 800fe58:	8809      	ldrh	r1, [r1, #0]
 800fe5a:	4606      	mov	r6, r0
 800fe5c:	f7f8 fda2 	bl	80089a4 <ucdr_serialize_uint16_t>
 800fe60:	8869      	ldrh	r1, [r5, #2]
 800fe62:	4604      	mov	r4, r0
 800fe64:	4630      	mov	r0, r6
 800fe66:	f7f8 fd9d 	bl	80089a4 <ucdr_serialize_uint16_t>
 800fe6a:	7929      	ldrb	r1, [r5, #4]
 800fe6c:	4004      	ands	r4, r0
 800fe6e:	4630      	mov	r0, r6
 800fe70:	f7f8 fd6c 	bl	800894c <ucdr_serialize_uint8_t>
 800fe74:	b2e4      	uxtb	r4, r4
 800fe76:	4020      	ands	r0, r4
 800fe78:	bd70      	pop	{r4, r5, r6, pc}
 800fe7a:	bf00      	nop

0800fe7c <uxr_deserialize_HEARTBEAT_Payload>:
 800fe7c:	b570      	push	{r4, r5, r6, lr}
 800fe7e:	4605      	mov	r5, r0
 800fe80:	460e      	mov	r6, r1
 800fe82:	f7f8 fe8f 	bl	8008ba4 <ucdr_deserialize_uint16_t>
 800fe86:	1cb1      	adds	r1, r6, #2
 800fe88:	4604      	mov	r4, r0
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	f7f8 fe8a 	bl	8008ba4 <ucdr_deserialize_uint16_t>
 800fe90:	1d31      	adds	r1, r6, #4
 800fe92:	4004      	ands	r4, r0
 800fe94:	4628      	mov	r0, r5
 800fe96:	f7f8 fd6f 	bl	8008978 <ucdr_deserialize_uint8_t>
 800fe9a:	b2e4      	uxtb	r4, r4
 800fe9c:	4020      	ands	r0, r4
 800fe9e:	bd70      	pop	{r4, r5, r6, pc}

0800fea0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800fea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea4:	4605      	mov	r5, r0
 800fea6:	460e      	mov	r6, r1
 800fea8:	f7f9 fb80 	bl	80095ac <ucdr_deserialize_int32_t>
 800feac:	1d31      	adds	r1, r6, #4
 800feae:	4607      	mov	r7, r0
 800feb0:	4628      	mov	r0, r5
 800feb2:	f7f9 f891 	bl	8008fd8 <ucdr_deserialize_uint32_t>
 800feb6:	f106 0108 	add.w	r1, r6, #8
 800feba:	4680      	mov	r8, r0
 800febc:	4628      	mov	r0, r5
 800febe:	f7f9 fb75 	bl	80095ac <ucdr_deserialize_int32_t>
 800fec2:	f106 010c 	add.w	r1, r6, #12
 800fec6:	4604      	mov	r4, r0
 800fec8:	4628      	mov	r0, r5
 800feca:	f7f9 f885 	bl	8008fd8 <ucdr_deserialize_uint32_t>
 800fece:	ea07 0708 	and.w	r7, r7, r8
 800fed2:	403c      	ands	r4, r7
 800fed4:	f106 0110 	add.w	r1, r6, #16
 800fed8:	4004      	ands	r4, r0
 800feda:	4628      	mov	r0, r5
 800fedc:	f7f9 fb66 	bl	80095ac <ucdr_deserialize_int32_t>
 800fee0:	f106 0114 	add.w	r1, r6, #20
 800fee4:	4607      	mov	r7, r0
 800fee6:	4628      	mov	r0, r5
 800fee8:	f7f9 f876 	bl	8008fd8 <ucdr_deserialize_uint32_t>
 800feec:	b2e4      	uxtb	r4, r4
 800feee:	403c      	ands	r4, r7
 800fef0:	4020      	ands	r0, r4
 800fef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fef6:	bf00      	nop

0800fef8 <uxr_deserialize_SampleIdentity>:
 800fef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fefc:	220c      	movs	r2, #12
 800fefe:	4604      	mov	r4, r0
 800ff00:	460d      	mov	r5, r1
 800ff02:	f000 fdf1 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800ff06:	2203      	movs	r2, #3
 800ff08:	f105 010c 	add.w	r1, r5, #12
 800ff0c:	4607      	mov	r7, r0
 800ff0e:	4620      	mov	r0, r4
 800ff10:	f000 fdea 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 800ff14:	f105 010f 	add.w	r1, r5, #15
 800ff18:	4680      	mov	r8, r0
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f7f8 fd2c 	bl	8008978 <ucdr_deserialize_uint8_t>
 800ff20:	f105 0110 	add.w	r1, r5, #16
 800ff24:	4606      	mov	r6, r0
 800ff26:	4620      	mov	r0, r4
 800ff28:	f7f9 fb40 	bl	80095ac <ucdr_deserialize_int32_t>
 800ff2c:	f105 0114 	add.w	r1, r5, #20
 800ff30:	4603      	mov	r3, r0
 800ff32:	4620      	mov	r0, r4
 800ff34:	ea07 0708 	and.w	r7, r7, r8
 800ff38:	461c      	mov	r4, r3
 800ff3a:	f7f9 f84d 	bl	8008fd8 <ucdr_deserialize_uint32_t>
 800ff3e:	403e      	ands	r6, r7
 800ff40:	4034      	ands	r4, r6
 800ff42:	4020      	ands	r0, r4
 800ff44:	b2c0      	uxtb	r0, r0
 800ff46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4a:	bf00      	nop

0800ff4c <rcl_convert_rmw_ret_to_rcl_ret>:
 800ff4c:	280b      	cmp	r0, #11
 800ff4e:	dc0d      	bgt.n	800ff6c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	db09      	blt.n	800ff68 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800ff54:	280b      	cmp	r0, #11
 800ff56:	d807      	bhi.n	800ff68 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800ff58:	e8df f000 	tbb	[pc, r0]
 800ff5c:	07060607 	.word	0x07060607
 800ff60:	06060606 	.word	0x06060606
 800ff64:	07070606 	.word	0x07070606
 800ff68:	2001      	movs	r0, #1
 800ff6a:	4770      	bx	lr
 800ff6c:	28cb      	cmp	r0, #203	@ 0xcb
 800ff6e:	bf18      	it	ne
 800ff70:	2001      	movne	r0, #1
 800ff72:	4770      	bx	lr

0800ff74 <rcl_get_default_domain_id>:
 800ff74:	b530      	push	{r4, r5, lr}
 800ff76:	b083      	sub	sp, #12
 800ff78:	2300      	movs	r3, #0
 800ff7a:	9300      	str	r3, [sp, #0]
 800ff7c:	b1d0      	cbz	r0, 800ffb4 <rcl_get_default_domain_id+0x40>
 800ff7e:	4604      	mov	r4, r0
 800ff80:	4669      	mov	r1, sp
 800ff82:	4815      	ldr	r0, [pc, #84]	@ (800ffd8 <rcl_get_default_domain_id+0x64>)
 800ff84:	f7fb f9c8 	bl	800b318 <rcutils_get_env>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	b110      	cbz	r0, 800ff92 <rcl_get_default_domain_id+0x1e>
 800ff8c:	2001      	movs	r0, #1
 800ff8e:	b003      	add	sp, #12
 800ff90:	bd30      	pop	{r4, r5, pc}
 800ff92:	9b00      	ldr	r3, [sp, #0]
 800ff94:	b18b      	cbz	r3, 800ffba <rcl_get_default_domain_id+0x46>
 800ff96:	7818      	ldrb	r0, [r3, #0]
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d0f8      	beq.n	800ff8e <rcl_get_default_domain_id+0x1a>
 800ff9c:	a901      	add	r1, sp, #4
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	9201      	str	r2, [sp, #4]
 800ffa2:	f001 fde5 	bl	8011b70 <strtoul>
 800ffa6:	4605      	mov	r5, r0
 800ffa8:	b150      	cbz	r0, 800ffc0 <rcl_get_default_domain_id+0x4c>
 800ffaa:	1c43      	adds	r3, r0, #1
 800ffac:	d00d      	beq.n	800ffca <rcl_get_default_domain_id+0x56>
 800ffae:	6025      	str	r5, [r4, #0]
 800ffb0:	2000      	movs	r0, #0
 800ffb2:	e7ec      	b.n	800ff8e <rcl_get_default_domain_id+0x1a>
 800ffb4:	200b      	movs	r0, #11
 800ffb6:	b003      	add	sp, #12
 800ffb8:	bd30      	pop	{r4, r5, pc}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	b003      	add	sp, #12
 800ffbe:	bd30      	pop	{r4, r5, pc}
 800ffc0:	9b01      	ldr	r3, [sp, #4]
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d0f2      	beq.n	800ffae <rcl_get_default_domain_id+0x3a>
 800ffc8:	e7e0      	b.n	800ff8c <rcl_get_default_domain_id+0x18>
 800ffca:	f002 f80d 	bl	8011fe8 <__errno>
 800ffce:	6803      	ldr	r3, [r0, #0]
 800ffd0:	2b22      	cmp	r3, #34	@ 0x22
 800ffd2:	d1ec      	bne.n	800ffae <rcl_get_default_domain_id+0x3a>
 800ffd4:	e7da      	b.n	800ff8c <rcl_get_default_domain_id+0x18>
 800ffd6:	bf00      	nop
 800ffd8:	080138b4 	.word	0x080138b4

0800ffdc <rcl_expand_topic_name>:
 800ffdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe0:	b08b      	sub	sp, #44	@ 0x2c
 800ffe2:	9306      	str	r3, [sp, #24]
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	f000 80ad 	beq.w	8010144 <rcl_expand_topic_name+0x168>
 800ffea:	460e      	mov	r6, r1
 800ffec:	2900      	cmp	r1, #0
 800ffee:	f000 80a9 	beq.w	8010144 <rcl_expand_topic_name+0x168>
 800fff2:	4617      	mov	r7, r2
 800fff4:	2a00      	cmp	r2, #0
 800fff6:	f000 80a5 	beq.w	8010144 <rcl_expand_topic_name+0x168>
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f000 80a2 	beq.w	8010144 <rcl_expand_topic_name+0x168>
 8010000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010002:	2b00      	cmp	r3, #0
 8010004:	f000 809e 	beq.w	8010144 <rcl_expand_topic_name+0x168>
 8010008:	2200      	movs	r2, #0
 801000a:	a909      	add	r1, sp, #36	@ 0x24
 801000c:	4680      	mov	r8, r0
 801000e:	f000 f9f5 	bl	80103fc <rcl_validate_topic_name>
 8010012:	4604      	mov	r4, r0
 8010014:	2800      	cmp	r0, #0
 8010016:	f040 8096 	bne.w	8010146 <rcl_expand_topic_name+0x16a>
 801001a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801001c:	2b00      	cmp	r3, #0
 801001e:	f040 809a 	bne.w	8010156 <rcl_expand_topic_name+0x17a>
 8010022:	4602      	mov	r2, r0
 8010024:	a909      	add	r1, sp, #36	@ 0x24
 8010026:	4630      	mov	r0, r6
 8010028:	f7fb fd48 	bl	800babc <rmw_validate_node_name>
 801002c:	2800      	cmp	r0, #0
 801002e:	f040 808e 	bne.w	801014e <rcl_expand_topic_name+0x172>
 8010032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010034:	2a00      	cmp	r2, #0
 8010036:	f040 8093 	bne.w	8010160 <rcl_expand_topic_name+0x184>
 801003a:	a909      	add	r1, sp, #36	@ 0x24
 801003c:	4638      	mov	r0, r7
 801003e:	f7fb fd1f 	bl	800ba80 <rmw_validate_namespace>
 8010042:	2800      	cmp	r0, #0
 8010044:	f040 8083 	bne.w	801014e <rcl_expand_topic_name+0x172>
 8010048:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801004a:	2c00      	cmp	r4, #0
 801004c:	f040 80ed 	bne.w	801022a <rcl_expand_topic_name+0x24e>
 8010050:	217b      	movs	r1, #123	@ 0x7b
 8010052:	4640      	mov	r0, r8
 8010054:	f001 ff3c 	bl	8011ed0 <strchr>
 8010058:	f898 3000 	ldrb.w	r3, [r8]
 801005c:	2b2f      	cmp	r3, #47	@ 0x2f
 801005e:	4605      	mov	r5, r0
 8010060:	f000 809e 	beq.w	80101a0 <rcl_expand_topic_name+0x1c4>
 8010064:	2b7e      	cmp	r3, #126	@ 0x7e
 8010066:	f040 80a2 	bne.w	80101ae <rcl_expand_topic_name+0x1d2>
 801006a:	4638      	mov	r0, r7
 801006c:	f7f0 f8c2 	bl	80001f4 <strlen>
 8010070:	4a82      	ldr	r2, [pc, #520]	@ (801027c <rcl_expand_topic_name+0x2a0>)
 8010072:	4b83      	ldr	r3, [pc, #524]	@ (8010280 <rcl_expand_topic_name+0x2a4>)
 8010074:	2801      	cmp	r0, #1
 8010076:	bf18      	it	ne
 8010078:	4613      	movne	r3, r2
 801007a:	9302      	str	r3, [sp, #8]
 801007c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8010084:	f108 0301 	add.w	r3, r8, #1
 8010088:	9305      	str	r3, [sp, #20]
 801008a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801008e:	9301      	str	r3, [sp, #4]
 8010090:	ab14      	add	r3, sp, #80	@ 0x50
 8010092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010094:	f7fb f968 	bl	800b368 <rcutils_format_string_limit>
 8010098:	4682      	mov	sl, r0
 801009a:	2800      	cmp	r0, #0
 801009c:	f000 80c7 	beq.w	801022e <rcl_expand_topic_name+0x252>
 80100a0:	2d00      	cmp	r5, #0
 80100a2:	f000 80a2 	beq.w	80101ea <rcl_expand_topic_name+0x20e>
 80100a6:	217b      	movs	r1, #123	@ 0x7b
 80100a8:	f001 ff12 	bl	8011ed0 <strchr>
 80100ac:	46d1      	mov	r9, sl
 80100ae:	4605      	mov	r5, r0
 80100b0:	9407      	str	r4, [sp, #28]
 80100b2:	46d3      	mov	fp, sl
 80100b4:	464c      	mov	r4, r9
 80100b6:	2d00      	cmp	r5, #0
 80100b8:	f000 80be 	beq.w	8010238 <rcl_expand_topic_name+0x25c>
 80100bc:	217d      	movs	r1, #125	@ 0x7d
 80100be:	4620      	mov	r0, r4
 80100c0:	f001 ff06 	bl	8011ed0 <strchr>
 80100c4:	eba0 0905 	sub.w	r9, r0, r5
 80100c8:	f109 0a01 	add.w	sl, r9, #1
 80100cc:	486d      	ldr	r0, [pc, #436]	@ (8010284 <rcl_expand_topic_name+0x2a8>)
 80100ce:	4652      	mov	r2, sl
 80100d0:	4629      	mov	r1, r5
 80100d2:	f001 ff0a 	bl	8011eea <strncmp>
 80100d6:	2800      	cmp	r0, #0
 80100d8:	d067      	beq.n	80101aa <rcl_expand_topic_name+0x1ce>
 80100da:	486b      	ldr	r0, [pc, #428]	@ (8010288 <rcl_expand_topic_name+0x2ac>)
 80100dc:	4652      	mov	r2, sl
 80100de:	4629      	mov	r1, r5
 80100e0:	f001 ff03 	bl	8011eea <strncmp>
 80100e4:	b130      	cbz	r0, 80100f4 <rcl_expand_topic_name+0x118>
 80100e6:	4869      	ldr	r0, [pc, #420]	@ (801028c <rcl_expand_topic_name+0x2b0>)
 80100e8:	4652      	mov	r2, sl
 80100ea:	4629      	mov	r1, r5
 80100ec:	f001 fefd 	bl	8011eea <strncmp>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d137      	bne.n	8010164 <rcl_expand_topic_name+0x188>
 80100f4:	46b9      	mov	r9, r7
 80100f6:	ab16      	add	r3, sp, #88	@ 0x58
 80100f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80100fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010100:	ab14      	add	r3, sp, #80	@ 0x50
 8010102:	4628      	mov	r0, r5
 8010104:	cb0c      	ldmia	r3, {r2, r3}
 8010106:	4651      	mov	r1, sl
 8010108:	f7fb fa6a 	bl	800b5e0 <rcutils_strndup>
 801010c:	4605      	mov	r5, r0
 801010e:	2800      	cmp	r0, #0
 8010110:	f000 809c 	beq.w	801024c <rcl_expand_topic_name+0x270>
 8010114:	464a      	mov	r2, r9
 8010116:	4620      	mov	r0, r4
 8010118:	ab14      	add	r3, sp, #80	@ 0x50
 801011a:	4629      	mov	r1, r5
 801011c:	f7fb f95e 	bl	800b3dc <rcutils_repl_str>
 8010120:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010122:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010124:	4604      	mov	r4, r0
 8010126:	4628      	mov	r0, r5
 8010128:	4798      	blx	r3
 801012a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801012c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801012e:	4658      	mov	r0, fp
 8010130:	4798      	blx	r3
 8010132:	2c00      	cmp	r4, #0
 8010134:	d07b      	beq.n	801022e <rcl_expand_topic_name+0x252>
 8010136:	217b      	movs	r1, #123	@ 0x7b
 8010138:	4620      	mov	r0, r4
 801013a:	f001 fec9 	bl	8011ed0 <strchr>
 801013e:	46a3      	mov	fp, r4
 8010140:	4605      	mov	r5, r0
 8010142:	e7b8      	b.n	80100b6 <rcl_expand_topic_name+0xda>
 8010144:	240b      	movs	r4, #11
 8010146:	4620      	mov	r0, r4
 8010148:	b00b      	add	sp, #44	@ 0x2c
 801014a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801014e:	f7ff fefd 	bl	800ff4c <rcl_convert_rmw_ret_to_rcl_ret>
 8010152:	4604      	mov	r4, r0
 8010154:	e7f7      	b.n	8010146 <rcl_expand_topic_name+0x16a>
 8010156:	2467      	movs	r4, #103	@ 0x67
 8010158:	4620      	mov	r0, r4
 801015a:	b00b      	add	sp, #44	@ 0x2c
 801015c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010160:	24c9      	movs	r4, #201	@ 0xc9
 8010162:	e7f0      	b.n	8010146 <rcl_expand_topic_name+0x16a>
 8010164:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8010168:	9806      	ldr	r0, [sp, #24]
 801016a:	1c69      	adds	r1, r5, #1
 801016c:	f7fb fb52 	bl	800b814 <rcutils_string_map_getn>
 8010170:	4681      	mov	r9, r0
 8010172:	2800      	cmp	r0, #0
 8010174:	d1bf      	bne.n	80100f6 <rcl_expand_topic_name+0x11a>
 8010176:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010178:	aa16      	add	r2, sp, #88	@ 0x58
 801017a:	6018      	str	r0, [r3, #0]
 801017c:	ca07      	ldmia	r2, {r0, r1, r2}
 801017e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010182:	ab14      	add	r3, sp, #80	@ 0x50
 8010184:	cb0c      	ldmia	r3, {r2, r3}
 8010186:	4651      	mov	r1, sl
 8010188:	4628      	mov	r0, r5
 801018a:	f7fb fa29 	bl	800b5e0 <rcutils_strndup>
 801018e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010190:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010192:	4798      	blx	r3
 8010194:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010196:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010198:	4658      	mov	r0, fp
 801019a:	2469      	movs	r4, #105	@ 0x69
 801019c:	4798      	blx	r3
 801019e:	e7d2      	b.n	8010146 <rcl_expand_topic_name+0x16a>
 80101a0:	2800      	cmp	r0, #0
 80101a2:	d05b      	beq.n	801025c <rcl_expand_topic_name+0x280>
 80101a4:	46c1      	mov	r9, r8
 80101a6:	46a2      	mov	sl, r4
 80101a8:	e782      	b.n	80100b0 <rcl_expand_topic_name+0xd4>
 80101aa:	46b1      	mov	r9, r6
 80101ac:	e7a3      	b.n	80100f6 <rcl_expand_topic_name+0x11a>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	d1f8      	bne.n	80101a4 <rcl_expand_topic_name+0x1c8>
 80101b2:	4638      	mov	r0, r7
 80101b4:	f7f0 f81e 	bl	80001f4 <strlen>
 80101b8:	4a35      	ldr	r2, [pc, #212]	@ (8010290 <rcl_expand_topic_name+0x2b4>)
 80101ba:	4b36      	ldr	r3, [pc, #216]	@ (8010294 <rcl_expand_topic_name+0x2b8>)
 80101bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80101c0:	2801      	cmp	r0, #1
 80101c2:	bf18      	it	ne
 80101c4:	4613      	movne	r3, r2
 80101c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80101ca:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80101ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80101d0:	9703      	str	r7, [sp, #12]
 80101d2:	9200      	str	r2, [sp, #0]
 80101d4:	ab14      	add	r3, sp, #80	@ 0x50
 80101d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101d8:	f7fb f8c6 	bl	800b368 <rcutils_format_string_limit>
 80101dc:	4682      	mov	sl, r0
 80101de:	4653      	mov	r3, sl
 80101e0:	b32b      	cbz	r3, 801022e <rcl_expand_topic_name+0x252>
 80101e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80101e4:	f8c3 a000 	str.w	sl, [r3]
 80101e8:	e7ad      	b.n	8010146 <rcl_expand_topic_name+0x16a>
 80101ea:	f89a 3000 	ldrb.w	r3, [sl]
 80101ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80101f0:	d0f7      	beq.n	80101e2 <rcl_expand_topic_name+0x206>
 80101f2:	4638      	mov	r0, r7
 80101f4:	f7ef fffe 	bl	80001f4 <strlen>
 80101f8:	4a25      	ldr	r2, [pc, #148]	@ (8010290 <rcl_expand_topic_name+0x2b4>)
 80101fa:	4b26      	ldr	r3, [pc, #152]	@ (8010294 <rcl_expand_topic_name+0x2b8>)
 80101fc:	f8cd a010 	str.w	sl, [sp, #16]
 8010200:	2801      	cmp	r0, #1
 8010202:	bf18      	it	ne
 8010204:	4613      	movne	r3, r2
 8010206:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801020a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801020e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010210:	9703      	str	r7, [sp, #12]
 8010212:	9200      	str	r2, [sp, #0]
 8010214:	ab14      	add	r3, sp, #80	@ 0x50
 8010216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010218:	f7fb f8a6 	bl	800b368 <rcutils_format_string_limit>
 801021c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801021e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010220:	4605      	mov	r5, r0
 8010222:	4650      	mov	r0, sl
 8010224:	4798      	blx	r3
 8010226:	46aa      	mov	sl, r5
 8010228:	e7d9      	b.n	80101de <rcl_expand_topic_name+0x202>
 801022a:	24ca      	movs	r4, #202	@ 0xca
 801022c:	e78b      	b.n	8010146 <rcl_expand_topic_name+0x16a>
 801022e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010230:	2300      	movs	r3, #0
 8010232:	6013      	str	r3, [r2, #0]
 8010234:	240a      	movs	r4, #10
 8010236:	e786      	b.n	8010146 <rcl_expand_topic_name+0x16a>
 8010238:	465b      	mov	r3, fp
 801023a:	9c07      	ldr	r4, [sp, #28]
 801023c:	46da      	mov	sl, fp
 801023e:	2b00      	cmp	r3, #0
 8010240:	d1d3      	bne.n	80101ea <rcl_expand_topic_name+0x20e>
 8010242:	f898 3000 	ldrb.w	r3, [r8]
 8010246:	2b2f      	cmp	r3, #47	@ 0x2f
 8010248:	d0cb      	beq.n	80101e2 <rcl_expand_topic_name+0x206>
 801024a:	e7b2      	b.n	80101b2 <rcl_expand_topic_name+0x1d6>
 801024c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8010250:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010252:	6015      	str	r5, [r2, #0]
 8010254:	4658      	mov	r0, fp
 8010256:	4798      	blx	r3
 8010258:	240a      	movs	r4, #10
 801025a:	e774      	b.n	8010146 <rcl_expand_topic_name+0x16a>
 801025c:	ab17      	add	r3, sp, #92	@ 0x5c
 801025e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010262:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010266:	ab14      	add	r3, sp, #80	@ 0x50
 8010268:	cb0e      	ldmia	r3, {r1, r2, r3}
 801026a:	4640      	mov	r0, r8
 801026c:	f7fb f996 	bl	800b59c <rcutils_strdup>
 8010270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010272:	2800      	cmp	r0, #0
 8010274:	6018      	str	r0, [r3, #0]
 8010276:	bf08      	it	eq
 8010278:	240a      	moveq	r4, #10
 801027a:	e764      	b.n	8010146 <rcl_expand_topic_name+0x16a>
 801027c:	080138c4 	.word	0x080138c4
 8010280:	080136a0 	.word	0x080136a0
 8010284:	080138cc 	.word	0x080138cc
 8010288:	080138d4 	.word	0x080138d4
 801028c:	080138dc 	.word	0x080138dc
 8010290:	080131c8 	.word	0x080131c8
 8010294:	080131c0 	.word	0x080131c0

08010298 <rcl_get_default_topic_name_substitutions>:
 8010298:	2800      	cmp	r0, #0
 801029a:	bf0c      	ite	eq
 801029c:	200b      	moveq	r0, #11
 801029e:	2000      	movne	r0, #0
 80102a0:	4770      	bx	lr
 80102a2:	bf00      	nop

080102a4 <rcl_get_zero_initialized_guard_condition>:
 80102a4:	4a03      	ldr	r2, [pc, #12]	@ (80102b4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80102a6:	4603      	mov	r3, r0
 80102a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80102b0:	4618      	mov	r0, r3
 80102b2:	4770      	bx	lr
 80102b4:	080138e8 	.word	0x080138e8

080102b8 <rcl_guard_condition_init_from_rmw>:
 80102b8:	b082      	sub	sp, #8
 80102ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80102c4:	4604      	mov	r4, r0
 80102c6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80102ca:	460e      	mov	r6, r1
 80102cc:	4617      	mov	r7, r2
 80102ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102d2:	f10d 0e04 	add.w	lr, sp, #4
 80102d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80102da:	f8dc 3000 	ldr.w	r3, [ip]
 80102de:	f8ce 3000 	str.w	r3, [lr]
 80102e2:	a801      	add	r0, sp, #4
 80102e4:	f7f9 fe60 	bl	8009fa8 <rcutils_allocator_is_valid>
 80102e8:	b350      	cbz	r0, 8010340 <rcl_guard_condition_init_from_rmw+0x88>
 80102ea:	b34c      	cbz	r4, 8010340 <rcl_guard_condition_init_from_rmw+0x88>
 80102ec:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80102f0:	f1b8 0f00 	cmp.w	r8, #0
 80102f4:	d11e      	bne.n	8010334 <rcl_guard_condition_init_from_rmw+0x7c>
 80102f6:	b31f      	cbz	r7, 8010340 <rcl_guard_condition_init_from_rmw+0x88>
 80102f8:	4638      	mov	r0, r7
 80102fa:	f7f9 ff75 	bl	800a1e8 <rcl_context_is_valid>
 80102fe:	b328      	cbz	r0, 801034c <rcl_guard_condition_init_from_rmw+0x94>
 8010300:	9b01      	ldr	r3, [sp, #4]
 8010302:	9905      	ldr	r1, [sp, #20]
 8010304:	201c      	movs	r0, #28
 8010306:	4798      	blx	r3
 8010308:	4605      	mov	r5, r0
 801030a:	6060      	str	r0, [r4, #4]
 801030c:	b358      	cbz	r0, 8010366 <rcl_guard_condition_init_from_rmw+0xae>
 801030e:	b1fe      	cbz	r6, 8010350 <rcl_guard_condition_init_from_rmw+0x98>
 8010310:	6006      	str	r6, [r0, #0]
 8010312:	f880 8004 	strb.w	r8, [r0, #4]
 8010316:	ac01      	add	r4, sp, #4
 8010318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801031a:	f105 0c08 	add.w	ip, r5, #8
 801031e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010322:	6823      	ldr	r3, [r4, #0]
 8010324:	f8cc 3000 	str.w	r3, [ip]
 8010328:	2000      	movs	r0, #0
 801032a:	b006      	add	sp, #24
 801032c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010330:	b002      	add	sp, #8
 8010332:	4770      	bx	lr
 8010334:	2064      	movs	r0, #100	@ 0x64
 8010336:	b006      	add	sp, #24
 8010338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801033c:	b002      	add	sp, #8
 801033e:	4770      	bx	lr
 8010340:	200b      	movs	r0, #11
 8010342:	b006      	add	sp, #24
 8010344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010348:	b002      	add	sp, #8
 801034a:	4770      	bx	lr
 801034c:	2065      	movs	r0, #101	@ 0x65
 801034e:	e7f2      	b.n	8010336 <rcl_guard_condition_init_from_rmw+0x7e>
 8010350:	6838      	ldr	r0, [r7, #0]
 8010352:	3028      	adds	r0, #40	@ 0x28
 8010354:	f000 fa58 	bl	8010808 <rmw_create_guard_condition>
 8010358:	6028      	str	r0, [r5, #0]
 801035a:	6865      	ldr	r5, [r4, #4]
 801035c:	682e      	ldr	r6, [r5, #0]
 801035e:	b126      	cbz	r6, 801036a <rcl_guard_condition_init_from_rmw+0xb2>
 8010360:	2301      	movs	r3, #1
 8010362:	712b      	strb	r3, [r5, #4]
 8010364:	e7d7      	b.n	8010316 <rcl_guard_condition_init_from_rmw+0x5e>
 8010366:	200a      	movs	r0, #10
 8010368:	e7e5      	b.n	8010336 <rcl_guard_condition_init_from_rmw+0x7e>
 801036a:	4628      	mov	r0, r5
 801036c:	9b02      	ldr	r3, [sp, #8]
 801036e:	9905      	ldr	r1, [sp, #20]
 8010370:	4798      	blx	r3
 8010372:	6066      	str	r6, [r4, #4]
 8010374:	2001      	movs	r0, #1
 8010376:	e7de      	b.n	8010336 <rcl_guard_condition_init_from_rmw+0x7e>

08010378 <rcl_guard_condition_fini>:
 8010378:	b570      	push	{r4, r5, r6, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	b1f0      	cbz	r0, 80103bc <rcl_guard_condition_fini+0x44>
 801037e:	6843      	ldr	r3, [r0, #4]
 8010380:	4604      	mov	r4, r0
 8010382:	b163      	cbz	r3, 801039e <rcl_guard_condition_fini+0x26>
 8010384:	6818      	ldr	r0, [r3, #0]
 8010386:	68de      	ldr	r6, [r3, #12]
 8010388:	6999      	ldr	r1, [r3, #24]
 801038a:	b160      	cbz	r0, 80103a6 <rcl_guard_condition_fini+0x2e>
 801038c:	791d      	ldrb	r5, [r3, #4]
 801038e:	b965      	cbnz	r5, 80103aa <rcl_guard_condition_fini+0x32>
 8010390:	4618      	mov	r0, r3
 8010392:	47b0      	blx	r6
 8010394:	2300      	movs	r3, #0
 8010396:	4628      	mov	r0, r5
 8010398:	6063      	str	r3, [r4, #4]
 801039a:	b002      	add	sp, #8
 801039c:	bd70      	pop	{r4, r5, r6, pc}
 801039e:	461d      	mov	r5, r3
 80103a0:	4628      	mov	r0, r5
 80103a2:	b002      	add	sp, #8
 80103a4:	bd70      	pop	{r4, r5, r6, pc}
 80103a6:	4605      	mov	r5, r0
 80103a8:	e7f2      	b.n	8010390 <rcl_guard_condition_fini+0x18>
 80103aa:	9101      	str	r1, [sp, #4]
 80103ac:	f000 fa40 	bl	8010830 <rmw_destroy_guard_condition>
 80103b0:	1e05      	subs	r5, r0, #0
 80103b2:	6863      	ldr	r3, [r4, #4]
 80103b4:	9901      	ldr	r1, [sp, #4]
 80103b6:	bf18      	it	ne
 80103b8:	2501      	movne	r5, #1
 80103ba:	e7e9      	b.n	8010390 <rcl_guard_condition_fini+0x18>
 80103bc:	250b      	movs	r5, #11
 80103be:	4628      	mov	r0, r5
 80103c0:	b002      	add	sp, #8
 80103c2:	bd70      	pop	{r4, r5, r6, pc}

080103c4 <rcl_guard_condition_get_default_options>:
 80103c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103c6:	b087      	sub	sp, #28
 80103c8:	4606      	mov	r6, r0
 80103ca:	4668      	mov	r0, sp
 80103cc:	f7f9 fdde 	bl	8009f8c <rcutils_get_default_allocator>
 80103d0:	4b09      	ldr	r3, [pc, #36]	@ (80103f8 <rcl_guard_condition_get_default_options+0x34>)
 80103d2:	46ee      	mov	lr, sp
 80103d4:	469c      	mov	ip, r3
 80103d6:	461d      	mov	r5, r3
 80103d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103e2:	4634      	mov	r4, r6
 80103e4:	f8de 7000 	ldr.w	r7, [lr]
 80103e8:	f8cc 7000 	str.w	r7, [ip]
 80103ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103ee:	4630      	mov	r0, r6
 80103f0:	6027      	str	r7, [r4, #0]
 80103f2:	b007      	add	sp, #28
 80103f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103f6:	bf00      	nop
 80103f8:	2000dba0 	.word	0x2000dba0

080103fc <rcl_validate_topic_name>:
 80103fc:	2800      	cmp	r0, #0
 80103fe:	d07a      	beq.n	80104f6 <rcl_validate_topic_name+0xfa>
 8010400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010404:	460e      	mov	r6, r1
 8010406:	2900      	cmp	r1, #0
 8010408:	d07c      	beq.n	8010504 <rcl_validate_topic_name+0x108>
 801040a:	4617      	mov	r7, r2
 801040c:	4605      	mov	r5, r0
 801040e:	f7ef fef1 	bl	80001f4 <strlen>
 8010412:	b1b0      	cbz	r0, 8010442 <rcl_validate_topic_name+0x46>
 8010414:	f895 9000 	ldrb.w	r9, [r5]
 8010418:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801059c <rcl_validate_topic_name+0x1a0>
 801041c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8010420:	f013 0304 	ands.w	r3, r3, #4
 8010424:	d169      	bne.n	80104fa <rcl_validate_topic_name+0xfe>
 8010426:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801042a:	f815 2008 	ldrb.w	r2, [r5, r8]
 801042e:	2a2f      	cmp	r2, #47	@ 0x2f
 8010430:	d10e      	bne.n	8010450 <rcl_validate_topic_name+0x54>
 8010432:	2202      	movs	r2, #2
 8010434:	6032      	str	r2, [r6, #0]
 8010436:	b36f      	cbz	r7, 8010494 <rcl_validate_topic_name+0x98>
 8010438:	f8c7 8000 	str.w	r8, [r7]
 801043c:	4618      	mov	r0, r3
 801043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010442:	2301      	movs	r3, #1
 8010444:	6033      	str	r3, [r6, #0]
 8010446:	b32f      	cbz	r7, 8010494 <rcl_validate_topic_name+0x98>
 8010448:	2000      	movs	r0, #0
 801044a:	6038      	str	r0, [r7, #0]
 801044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010450:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8010454:	461c      	mov	r4, r3
 8010456:	4619      	mov	r1, r3
 8010458:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801045c:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010460:	f1be 0f09 	cmp.w	lr, #9
 8010464:	d919      	bls.n	801049a <rcl_validate_topic_name+0x9e>
 8010466:	f022 0e20 	bic.w	lr, r2, #32
 801046a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801046e:	f1be 0f19 	cmp.w	lr, #25
 8010472:	d912      	bls.n	801049a <rcl_validate_topic_name+0x9e>
 8010474:	2a5f      	cmp	r2, #95	@ 0x5f
 8010476:	d019      	beq.n	80104ac <rcl_validate_topic_name+0xb0>
 8010478:	2a2f      	cmp	r2, #47	@ 0x2f
 801047a:	d051      	beq.n	8010520 <rcl_validate_topic_name+0x124>
 801047c:	2a7e      	cmp	r2, #126	@ 0x7e
 801047e:	d048      	beq.n	8010512 <rcl_validate_topic_name+0x116>
 8010480:	2a7b      	cmp	r2, #123	@ 0x7b
 8010482:	d054      	beq.n	801052e <rcl_validate_topic_name+0x132>
 8010484:	2a7d      	cmp	r2, #125	@ 0x7d
 8010486:	d161      	bne.n	801054c <rcl_validate_topic_name+0x150>
 8010488:	2c00      	cmp	r4, #0
 801048a:	d155      	bne.n	8010538 <rcl_validate_topic_name+0x13c>
 801048c:	2305      	movs	r3, #5
 801048e:	6033      	str	r3, [r6, #0]
 8010490:	b107      	cbz	r7, 8010494 <rcl_validate_topic_name+0x98>
 8010492:	6039      	str	r1, [r7, #0]
 8010494:	2000      	movs	r0, #0
 8010496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801049a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801049e:	0752      	lsls	r2, r2, #29
 80104a0:	d504      	bpl.n	80104ac <rcl_validate_topic_name+0xb0>
 80104a2:	b11c      	cbz	r4, 80104ac <rcl_validate_topic_name+0xb0>
 80104a4:	b111      	cbz	r1, 80104ac <rcl_validate_topic_name+0xb0>
 80104a6:	1e4a      	subs	r2, r1, #1
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d02d      	beq.n	8010508 <rcl_validate_topic_name+0x10c>
 80104ac:	3101      	adds	r1, #1
 80104ae:	4288      	cmp	r0, r1
 80104b0:	d1d2      	bne.n	8010458 <rcl_validate_topic_name+0x5c>
 80104b2:	2c00      	cmp	r4, #0
 80104b4:	d145      	bne.n	8010542 <rcl_validate_topic_name+0x146>
 80104b6:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80104ba:	d04f      	beq.n	801055c <rcl_validate_topic_name+0x160>
 80104bc:	4620      	mov	r0, r4
 80104be:	2301      	movs	r3, #1
 80104c0:	e006      	b.n	80104d0 <rcl_validate_topic_name+0xd4>
 80104c2:	428b      	cmp	r3, r1
 80104c4:	f105 0501 	add.w	r5, r5, #1
 80104c8:	f103 0201 	add.w	r2, r3, #1
 80104cc:	d236      	bcs.n	801053c <rcl_validate_topic_name+0x140>
 80104ce:	4613      	mov	r3, r2
 80104d0:	4580      	cmp	r8, r0
 80104d2:	f100 0001 	add.w	r0, r0, #1
 80104d6:	d0f4      	beq.n	80104c2 <rcl_validate_topic_name+0xc6>
 80104d8:	782a      	ldrb	r2, [r5, #0]
 80104da:	2a2f      	cmp	r2, #47	@ 0x2f
 80104dc:	d1f1      	bne.n	80104c2 <rcl_validate_topic_name+0xc6>
 80104de:	786a      	ldrb	r2, [r5, #1]
 80104e0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80104e4:	0754      	lsls	r4, r2, #29
 80104e6:	d5ec      	bpl.n	80104c2 <rcl_validate_topic_name+0xc6>
 80104e8:	2204      	movs	r2, #4
 80104ea:	6032      	str	r2, [r6, #0]
 80104ec:	2f00      	cmp	r7, #0
 80104ee:	d0d1      	beq.n	8010494 <rcl_validate_topic_name+0x98>
 80104f0:	603b      	str	r3, [r7, #0]
 80104f2:	2000      	movs	r0, #0
 80104f4:	e7aa      	b.n	801044c <rcl_validate_topic_name+0x50>
 80104f6:	200b      	movs	r0, #11
 80104f8:	4770      	bx	lr
 80104fa:	2304      	movs	r3, #4
 80104fc:	6033      	str	r3, [r6, #0]
 80104fe:	2f00      	cmp	r7, #0
 8010500:	d1a2      	bne.n	8010448 <rcl_validate_topic_name+0x4c>
 8010502:	e7c7      	b.n	8010494 <rcl_validate_topic_name+0x98>
 8010504:	200b      	movs	r0, #11
 8010506:	e7a1      	b.n	801044c <rcl_validate_topic_name+0x50>
 8010508:	2309      	movs	r3, #9
 801050a:	6033      	str	r3, [r6, #0]
 801050c:	2f00      	cmp	r7, #0
 801050e:	d1c0      	bne.n	8010492 <rcl_validate_topic_name+0x96>
 8010510:	e7c0      	b.n	8010494 <rcl_validate_topic_name+0x98>
 8010512:	2900      	cmp	r1, #0
 8010514:	d0ca      	beq.n	80104ac <rcl_validate_topic_name+0xb0>
 8010516:	2306      	movs	r3, #6
 8010518:	6033      	str	r3, [r6, #0]
 801051a:	2f00      	cmp	r7, #0
 801051c:	d1b9      	bne.n	8010492 <rcl_validate_topic_name+0x96>
 801051e:	e7b9      	b.n	8010494 <rcl_validate_topic_name+0x98>
 8010520:	2c00      	cmp	r4, #0
 8010522:	d0c3      	beq.n	80104ac <rcl_validate_topic_name+0xb0>
 8010524:	2308      	movs	r3, #8
 8010526:	6033      	str	r3, [r6, #0]
 8010528:	2f00      	cmp	r7, #0
 801052a:	d1b2      	bne.n	8010492 <rcl_validate_topic_name+0x96>
 801052c:	e7b2      	b.n	8010494 <rcl_validate_topic_name+0x98>
 801052e:	2c00      	cmp	r4, #0
 8010530:	d1f8      	bne.n	8010524 <rcl_validate_topic_name+0x128>
 8010532:	460b      	mov	r3, r1
 8010534:	2401      	movs	r4, #1
 8010536:	e7b9      	b.n	80104ac <rcl_validate_topic_name+0xb0>
 8010538:	2400      	movs	r4, #0
 801053a:	e7b7      	b.n	80104ac <rcl_validate_topic_name+0xb0>
 801053c:	2000      	movs	r0, #0
 801053e:	6030      	str	r0, [r6, #0]
 8010540:	e784      	b.n	801044c <rcl_validate_topic_name+0x50>
 8010542:	2205      	movs	r2, #5
 8010544:	6032      	str	r2, [r6, #0]
 8010546:	2f00      	cmp	r7, #0
 8010548:	d1d2      	bne.n	80104f0 <rcl_validate_topic_name+0xf4>
 801054a:	e7a3      	b.n	8010494 <rcl_validate_topic_name+0x98>
 801054c:	2c00      	cmp	r4, #0
 801054e:	bf14      	ite	ne
 8010550:	2308      	movne	r3, #8
 8010552:	2303      	moveq	r3, #3
 8010554:	6033      	str	r3, [r6, #0]
 8010556:	2f00      	cmp	r7, #0
 8010558:	d19b      	bne.n	8010492 <rcl_validate_topic_name+0x96>
 801055a:	e79b      	b.n	8010494 <rcl_validate_topic_name+0x98>
 801055c:	2301      	movs	r3, #1
 801055e:	e00a      	b.n	8010576 <rcl_validate_topic_name+0x17a>
 8010560:	2c01      	cmp	r4, #1
 8010562:	d013      	beq.n	801058c <rcl_validate_topic_name+0x190>
 8010564:	4299      	cmp	r1, r3
 8010566:	f104 0401 	add.w	r4, r4, #1
 801056a:	f105 0501 	add.w	r5, r5, #1
 801056e:	f103 0201 	add.w	r2, r3, #1
 8010572:	d9e3      	bls.n	801053c <rcl_validate_topic_name+0x140>
 8010574:	4613      	mov	r3, r2
 8010576:	45a0      	cmp	r8, r4
 8010578:	d0f4      	beq.n	8010564 <rcl_validate_topic_name+0x168>
 801057a:	782a      	ldrb	r2, [r5, #0]
 801057c:	2a2f      	cmp	r2, #47	@ 0x2f
 801057e:	d1ef      	bne.n	8010560 <rcl_validate_topic_name+0x164>
 8010580:	786a      	ldrb	r2, [r5, #1]
 8010582:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8010586:	0752      	lsls	r2, r2, #29
 8010588:	d5ec      	bpl.n	8010564 <rcl_validate_topic_name+0x168>
 801058a:	e7ad      	b.n	80104e8 <rcl_validate_topic_name+0xec>
 801058c:	2307      	movs	r3, #7
 801058e:	6033      	str	r3, [r6, #0]
 8010590:	2f00      	cmp	r7, #0
 8010592:	f43f af7f 	beq.w	8010494 <rcl_validate_topic_name+0x98>
 8010596:	603c      	str	r4, [r7, #0]
 8010598:	2000      	movs	r0, #0
 801059a:	e757      	b.n	801044c <rcl_validate_topic_name+0x50>
 801059c:	0801397c 	.word	0x0801397c

080105a0 <rcutils_string_array_fini>:
 80105a0:	b320      	cbz	r0, 80105ec <rcutils_string_array_fini+0x4c>
 80105a2:	b570      	push	{r4, r5, r6, lr}
 80105a4:	4604      	mov	r4, r0
 80105a6:	6840      	ldr	r0, [r0, #4]
 80105a8:	b1d8      	cbz	r0, 80105e2 <rcutils_string_array_fini+0x42>
 80105aa:	f104 0008 	add.w	r0, r4, #8
 80105ae:	f7f9 fcfb 	bl	8009fa8 <rcutils_allocator_is_valid>
 80105b2:	b1b8      	cbz	r0, 80105e4 <rcutils_string_array_fini+0x44>
 80105b4:	6823      	ldr	r3, [r4, #0]
 80105b6:	b1bb      	cbz	r3, 80105e8 <rcutils_string_array_fini+0x48>
 80105b8:	2500      	movs	r5, #0
 80105ba:	6860      	ldr	r0, [r4, #4]
 80105bc:	462e      	mov	r6, r5
 80105be:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80105c2:	68e3      	ldr	r3, [r4, #12]
 80105c4:	69a1      	ldr	r1, [r4, #24]
 80105c6:	4798      	blx	r3
 80105c8:	e9d4 3000 	ldrd	r3, r0, [r4]
 80105cc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80105d0:	3501      	adds	r5, #1
 80105d2:	429d      	cmp	r5, r3
 80105d4:	d3f3      	bcc.n	80105be <rcutils_string_array_fini+0x1e>
 80105d6:	68e3      	ldr	r3, [r4, #12]
 80105d8:	69a1      	ldr	r1, [r4, #24]
 80105da:	4798      	blx	r3
 80105dc:	2000      	movs	r0, #0
 80105de:	e9c4 0000 	strd	r0, r0, [r4]
 80105e2:	bd70      	pop	{r4, r5, r6, pc}
 80105e4:	200b      	movs	r0, #11
 80105e6:	bd70      	pop	{r4, r5, r6, pc}
 80105e8:	6860      	ldr	r0, [r4, #4]
 80105ea:	e7f4      	b.n	80105d6 <rcutils_string_array_fini+0x36>
 80105ec:	200b      	movs	r0, #11
 80105ee:	4770      	bx	lr

080105f0 <on_status>:
 80105f0:	b082      	sub	sp, #8
 80105f2:	b002      	add	sp, #8
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop

080105f8 <on_topic>:
 80105f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105fc:	4a22      	ldr	r2, [pc, #136]	@ (8010688 <on_topic+0x90>)
 80105fe:	b094      	sub	sp, #80	@ 0x50
 8010600:	6812      	ldr	r2, [r2, #0]
 8010602:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8010604:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8010608:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801060c:	b3c2      	cbz	r2, 8010680 <on_topic+0x88>
 801060e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8010612:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8010616:	e001      	b.n	801061c <on_topic+0x24>
 8010618:	6852      	ldr	r2, [r2, #4]
 801061a:	b38a      	cbz	r2, 8010680 <on_topic+0x88>
 801061c:	6894      	ldr	r4, [r2, #8]
 801061e:	8aa3      	ldrh	r3, [r4, #20]
 8010620:	428b      	cmp	r3, r1
 8010622:	d1f9      	bne.n	8010618 <on_topic+0x20>
 8010624:	7da3      	ldrb	r3, [r4, #22]
 8010626:	4283      	cmp	r3, r0
 8010628:	d1f6      	bne.n	8010618 <on_topic+0x20>
 801062a:	2248      	movs	r2, #72	@ 0x48
 801062c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010630:	4668      	mov	r0, sp
 8010632:	f001 fd0e 	bl	8012052 <memcpy>
 8010636:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801063a:	cb0c      	ldmia	r3, {r2, r3}
 801063c:	4620      	mov	r0, r4
 801063e:	f7fc fa4f 	bl	800cae0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010642:	4607      	mov	r7, r0
 8010644:	b1e0      	cbz	r0, 8010680 <on_topic+0x88>
 8010646:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801064a:	4632      	mov	r2, r6
 801064c:	4628      	mov	r0, r5
 801064e:	f108 0110 	add.w	r1, r8, #16
 8010652:	f000 fa49 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 8010656:	b930      	cbnz	r0, 8010666 <on_topic+0x6e>
 8010658:	480c      	ldr	r0, [pc, #48]	@ (801068c <on_topic+0x94>)
 801065a:	4639      	mov	r1, r7
 801065c:	b014      	add	sp, #80	@ 0x50
 801065e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010662:	f000 b8bd 	b.w	80107e0 <put_memory>
 8010666:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801066a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801066e:	f000 f965 	bl	801093c <rmw_uros_epoch_nanos>
 8010672:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8010676:	2305      	movs	r3, #5
 8010678:	e942 0102 	strd	r0, r1, [r2, #-8]
 801067c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8010680:	b014      	add	sp, #80	@ 0x50
 8010682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010686:	bf00      	nop
 8010688:	2000db6c 	.word	0x2000db6c
 801068c:	2000db5c 	.word	0x2000db5c

08010690 <on_request>:
 8010690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010694:	4823      	ldr	r0, [pc, #140]	@ (8010724 <on_request+0x94>)
 8010696:	b094      	sub	sp, #80	@ 0x50
 8010698:	6800      	ldr	r0, [r0, #0]
 801069a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801069c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80106a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80106a2:	2800      	cmp	r0, #0
 80106a4:	d03b      	beq.n	801071e <on_request+0x8e>
 80106a6:	461d      	mov	r5, r3
 80106a8:	e001      	b.n	80106ae <on_request+0x1e>
 80106aa:	6840      	ldr	r0, [r0, #4]
 80106ac:	b3b8      	cbz	r0, 801071e <on_request+0x8e>
 80106ae:	6884      	ldr	r4, [r0, #8]
 80106b0:	8b21      	ldrh	r1, [r4, #24]
 80106b2:	4291      	cmp	r1, r2
 80106b4:	d1f9      	bne.n	80106aa <on_request+0x1a>
 80106b6:	2248      	movs	r2, #72	@ 0x48
 80106b8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80106bc:	4668      	mov	r0, sp
 80106be:	f001 fcc8 	bl	8012052 <memcpy>
 80106c2:	f104 0320 	add.w	r3, r4, #32
 80106c6:	cb0c      	ldmia	r3, {r2, r3}
 80106c8:	4620      	mov	r0, r4
 80106ca:	f7fc fa09 	bl	800cae0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80106ce:	4680      	mov	r8, r0
 80106d0:	b328      	cbz	r0, 801071e <on_request+0x8e>
 80106d2:	4638      	mov	r0, r7
 80106d4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80106d8:	4632      	mov	r2, r6
 80106da:	f107 0110 	add.w	r1, r7, #16
 80106de:	f000 fa03 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 80106e2:	b930      	cbnz	r0, 80106f2 <on_request+0x62>
 80106e4:	4810      	ldr	r0, [pc, #64]	@ (8010728 <on_request+0x98>)
 80106e6:	4641      	mov	r1, r8
 80106e8:	b014      	add	sp, #80	@ 0x50
 80106ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106ee:	f000 b877 	b.w	80107e0 <put_memory>
 80106f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106f4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80106f8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80106fc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8010700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010704:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010708:	e88c 0003 	stmia.w	ip, {r0, r1}
 801070c:	f000 f916 	bl	801093c <rmw_uros_epoch_nanos>
 8010710:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8010714:	2303      	movs	r3, #3
 8010716:	e942 0102 	strd	r0, r1, [r2, #-8]
 801071a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801071e:	b014      	add	sp, #80	@ 0x50
 8010720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010724:	2000db3c 	.word	0x2000db3c
 8010728:	2000db5c 	.word	0x2000db5c

0801072c <on_reply>:
 801072c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010730:	4821      	ldr	r0, [pc, #132]	@ (80107b8 <on_reply+0x8c>)
 8010732:	b094      	sub	sp, #80	@ 0x50
 8010734:	6800      	ldr	r0, [r0, #0]
 8010736:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8010738:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801073c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801073e:	b3b8      	cbz	r0, 80107b0 <on_reply+0x84>
 8010740:	461d      	mov	r5, r3
 8010742:	e001      	b.n	8010748 <on_reply+0x1c>
 8010744:	6840      	ldr	r0, [r0, #4]
 8010746:	b398      	cbz	r0, 80107b0 <on_reply+0x84>
 8010748:	6884      	ldr	r4, [r0, #8]
 801074a:	8b21      	ldrh	r1, [r4, #24]
 801074c:	4291      	cmp	r1, r2
 801074e:	d1f9      	bne.n	8010744 <on_reply+0x18>
 8010750:	2248      	movs	r2, #72	@ 0x48
 8010752:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8010756:	4668      	mov	r0, sp
 8010758:	f001 fc7b 	bl	8012052 <memcpy>
 801075c:	f104 0320 	add.w	r3, r4, #32
 8010760:	cb0c      	ldmia	r3, {r2, r3}
 8010762:	4620      	mov	r0, r4
 8010764:	f7fc f9bc 	bl	800cae0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010768:	4680      	mov	r8, r0
 801076a:	b308      	cbz	r0, 80107b0 <on_reply+0x84>
 801076c:	4638      	mov	r0, r7
 801076e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010772:	4632      	mov	r2, r6
 8010774:	f107 0110 	add.w	r1, r7, #16
 8010778:	f000 f9b6 	bl	8010ae8 <ucdr_deserialize_array_uint8_t>
 801077c:	b930      	cbnz	r0, 801078c <on_reply+0x60>
 801077e:	480f      	ldr	r0, [pc, #60]	@ (80107bc <on_reply+0x90>)
 8010780:	4641      	mov	r1, r8
 8010782:	b014      	add	sp, #80	@ 0x50
 8010784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010788:	f000 b82a 	b.w	80107e0 <put_memory>
 801078c:	2200      	movs	r2, #0
 801078e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8010792:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8010796:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801079a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801079e:	f000 f8cd 	bl	801093c <rmw_uros_epoch_nanos>
 80107a2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80107a6:	2304      	movs	r3, #4
 80107a8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80107ac:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80107b0:	b014      	add	sp, #80	@ 0x50
 80107b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107b6:	bf00      	nop
 80107b8:	20009250 	.word	0x20009250
 80107bc:	2000db5c 	.word	0x2000db5c

080107c0 <get_memory>:
 80107c0:	4603      	mov	r3, r0
 80107c2:	6840      	ldr	r0, [r0, #4]
 80107c4:	b158      	cbz	r0, 80107de <get_memory+0x1e>
 80107c6:	6842      	ldr	r2, [r0, #4]
 80107c8:	605a      	str	r2, [r3, #4]
 80107ca:	b10a      	cbz	r2, 80107d0 <get_memory+0x10>
 80107cc:	2100      	movs	r1, #0
 80107ce:	6011      	str	r1, [r2, #0]
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	6042      	str	r2, [r0, #4]
 80107d4:	b102      	cbz	r2, 80107d8 <get_memory+0x18>
 80107d6:	6010      	str	r0, [r2, #0]
 80107d8:	2200      	movs	r2, #0
 80107da:	6002      	str	r2, [r0, #0]
 80107dc:	6018      	str	r0, [r3, #0]
 80107de:	4770      	bx	lr

080107e0 <put_memory>:
 80107e0:	680b      	ldr	r3, [r1, #0]
 80107e2:	b10b      	cbz	r3, 80107e8 <put_memory+0x8>
 80107e4:	684a      	ldr	r2, [r1, #4]
 80107e6:	605a      	str	r2, [r3, #4]
 80107e8:	684a      	ldr	r2, [r1, #4]
 80107ea:	b102      	cbz	r2, 80107ee <put_memory+0xe>
 80107ec:	6013      	str	r3, [r2, #0]
 80107ee:	6803      	ldr	r3, [r0, #0]
 80107f0:	428b      	cmp	r3, r1
 80107f2:	6843      	ldr	r3, [r0, #4]
 80107f4:	bf08      	it	eq
 80107f6:	6002      	streq	r2, [r0, #0]
 80107f8:	604b      	str	r3, [r1, #4]
 80107fa:	b103      	cbz	r3, 80107fe <put_memory+0x1e>
 80107fc:	6019      	str	r1, [r3, #0]
 80107fe:	2300      	movs	r3, #0
 8010800:	600b      	str	r3, [r1, #0]
 8010802:	6041      	str	r1, [r0, #4]
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop

08010808 <rmw_create_guard_condition>:
 8010808:	b538      	push	{r3, r4, r5, lr}
 801080a:	4605      	mov	r5, r0
 801080c:	4807      	ldr	r0, [pc, #28]	@ (801082c <rmw_create_guard_condition+0x24>)
 801080e:	f7ff ffd7 	bl	80107c0 <get_memory>
 8010812:	b148      	cbz	r0, 8010828 <rmw_create_guard_condition+0x20>
 8010814:	6884      	ldr	r4, [r0, #8]
 8010816:	2300      	movs	r3, #0
 8010818:	7423      	strb	r3, [r4, #16]
 801081a:	61e5      	str	r5, [r4, #28]
 801081c:	f7fb f9f0 	bl	800bc00 <rmw_get_implementation_identifier>
 8010820:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8010824:	f104 0014 	add.w	r0, r4, #20
 8010828:	bd38      	pop	{r3, r4, r5, pc}
 801082a:	bf00      	nop
 801082c:	2000dafc 	.word	0x2000dafc

08010830 <rmw_destroy_guard_condition>:
 8010830:	b508      	push	{r3, lr}
 8010832:	4b08      	ldr	r3, [pc, #32]	@ (8010854 <rmw_destroy_guard_condition+0x24>)
 8010834:	6819      	ldr	r1, [r3, #0]
 8010836:	b911      	cbnz	r1, 801083e <rmw_destroy_guard_condition+0xe>
 8010838:	e00a      	b.n	8010850 <rmw_destroy_guard_condition+0x20>
 801083a:	6849      	ldr	r1, [r1, #4]
 801083c:	b141      	cbz	r1, 8010850 <rmw_destroy_guard_condition+0x20>
 801083e:	688b      	ldr	r3, [r1, #8]
 8010840:	3314      	adds	r3, #20
 8010842:	4298      	cmp	r0, r3
 8010844:	d1f9      	bne.n	801083a <rmw_destroy_guard_condition+0xa>
 8010846:	4803      	ldr	r0, [pc, #12]	@ (8010854 <rmw_destroy_guard_condition+0x24>)
 8010848:	f7ff ffca 	bl	80107e0 <put_memory>
 801084c:	2000      	movs	r0, #0
 801084e:	bd08      	pop	{r3, pc}
 8010850:	2001      	movs	r0, #1
 8010852:	bd08      	pop	{r3, pc}
 8010854:	2000dafc 	.word	0x2000dafc

08010858 <create_topic>:
 8010858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801085c:	4605      	mov	r5, r0
 801085e:	b084      	sub	sp, #16
 8010860:	4822      	ldr	r0, [pc, #136]	@ (80108ec <create_topic+0x94>)
 8010862:	460f      	mov	r7, r1
 8010864:	4616      	mov	r6, r2
 8010866:	f7ff ffab 	bl	80107c0 <get_memory>
 801086a:	4604      	mov	r4, r0
 801086c:	2800      	cmp	r0, #0
 801086e:	d039      	beq.n	80108e4 <create_topic+0x8c>
 8010870:	692b      	ldr	r3, [r5, #16]
 8010872:	6884      	ldr	r4, [r0, #8]
 8010874:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80108f4 <create_topic+0x9c>
 8010878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801087c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8010880:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8010884:	1c42      	adds	r2, r0, #1
 8010886:	2102      	movs	r1, #2
 8010888:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801088c:	f7fc fc24 	bl	800d0d8 <uxr_object_id>
 8010890:	223c      	movs	r2, #60	@ 0x3c
 8010892:	6120      	str	r0, [r4, #16]
 8010894:	4641      	mov	r1, r8
 8010896:	4638      	mov	r0, r7
 8010898:	f7fc f9d8 	bl	800cc4c <generate_topic_name>
 801089c:	b1f0      	cbz	r0, 80108dc <create_topic+0x84>
 801089e:	4f14      	ldr	r7, [pc, #80]	@ (80108f0 <create_topic+0x98>)
 80108a0:	4630      	mov	r0, r6
 80108a2:	2264      	movs	r2, #100	@ 0x64
 80108a4:	4639      	mov	r1, r7
 80108a6:	f7fc f9a1 	bl	800cbec <generate_type_name>
 80108aa:	b1b8      	cbz	r0, 80108dc <create_topic+0x84>
 80108ac:	6928      	ldr	r0, [r5, #16]
 80108ae:	2306      	movs	r3, #6
 80108b0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80108b4:	f8cd 8000 	str.w	r8, [sp]
 80108b8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80108bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108c0:	6811      	ldr	r1, [r2, #0]
 80108c2:	696b      	ldr	r3, [r5, #20]
 80108c4:	6922      	ldr	r2, [r4, #16]
 80108c6:	f7fc fa67 	bl	800cd98 <uxr_buffer_create_topic_bin>
 80108ca:	4602      	mov	r2, r0
 80108cc:	6928      	ldr	r0, [r5, #16]
 80108ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80108d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80108d6:	f7fc f953 	bl	800cb80 <run_xrce_session>
 80108da:	b918      	cbnz	r0, 80108e4 <create_topic+0x8c>
 80108dc:	4620      	mov	r0, r4
 80108de:	f7fc f8f3 	bl	800cac8 <rmw_uxrce_fini_topic_memory>
 80108e2:	2400      	movs	r4, #0
 80108e4:	4620      	mov	r0, r4
 80108e6:	b004      	add	sp, #16
 80108e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ec:	2000db7c 	.word	0x2000db7c
 80108f0:	2000dbf0 	.word	0x2000dbf0
 80108f4:	2000dbb4 	.word	0x2000dbb4

080108f8 <destroy_topic>:
 80108f8:	b538      	push	{r3, r4, r5, lr}
 80108fa:	6985      	ldr	r5, [r0, #24]
 80108fc:	b1d5      	cbz	r5, 8010934 <destroy_topic+0x3c>
 80108fe:	4604      	mov	r4, r0
 8010900:	6928      	ldr	r0, [r5, #16]
 8010902:	6922      	ldr	r2, [r4, #16]
 8010904:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010908:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801090c:	6819      	ldr	r1, [r3, #0]
 801090e:	f7fc f9c5 	bl	800cc9c <uxr_buffer_delete_entity>
 8010912:	4602      	mov	r2, r0
 8010914:	6928      	ldr	r0, [r5, #16]
 8010916:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801091a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801091e:	f7fc f92f 	bl	800cb80 <run_xrce_session>
 8010922:	2800      	cmp	r0, #0
 8010924:	4620      	mov	r0, r4
 8010926:	bf14      	ite	ne
 8010928:	2400      	movne	r4, #0
 801092a:	2402      	moveq	r4, #2
 801092c:	f7fc f8cc 	bl	800cac8 <rmw_uxrce_fini_topic_memory>
 8010930:	4620      	mov	r0, r4
 8010932:	bd38      	pop	{r3, r4, r5, pc}
 8010934:	2401      	movs	r4, #1
 8010936:	4620      	mov	r0, r4
 8010938:	bd38      	pop	{r3, r4, r5, pc}
 801093a:	bf00      	nop

0801093c <rmw_uros_epoch_nanos>:
 801093c:	4b05      	ldr	r3, [pc, #20]	@ (8010954 <rmw_uros_epoch_nanos+0x18>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	b123      	cbz	r3, 801094c <rmw_uros_epoch_nanos+0x10>
 8010942:	6898      	ldr	r0, [r3, #8]
 8010944:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010948:	f7fc be3c 	b.w	800d5c4 <uxr_epoch_nanos>
 801094c:	2000      	movs	r0, #0
 801094e:	2100      	movs	r1, #0
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	2000db4c 	.word	0x2000db4c

08010958 <ucdr_serialize_endian_array_char>:
 8010958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801095c:	4619      	mov	r1, r3
 801095e:	461f      	mov	r7, r3
 8010960:	4605      	mov	r5, r0
 8010962:	4690      	mov	r8, r2
 8010964:	f7f9 f848 	bl	80099f8 <ucdr_check_buffer_available_for>
 8010968:	b9e0      	cbnz	r0, 80109a4 <ucdr_serialize_endian_array_char+0x4c>
 801096a:	463e      	mov	r6, r7
 801096c:	e009      	b.n	8010982 <ucdr_serialize_endian_array_char+0x2a>
 801096e:	68a8      	ldr	r0, [r5, #8]
 8010970:	f001 fb6f 	bl	8012052 <memcpy>
 8010974:	68ab      	ldr	r3, [r5, #8]
 8010976:	6928      	ldr	r0, [r5, #16]
 8010978:	4423      	add	r3, r4
 801097a:	4420      	add	r0, r4
 801097c:	1b36      	subs	r6, r6, r4
 801097e:	60ab      	str	r3, [r5, #8]
 8010980:	6128      	str	r0, [r5, #16]
 8010982:	4631      	mov	r1, r6
 8010984:	2201      	movs	r2, #1
 8010986:	4628      	mov	r0, r5
 8010988:	f7f9 f8be 	bl	8009b08 <ucdr_check_final_buffer_behavior_array>
 801098c:	1bb9      	subs	r1, r7, r6
 801098e:	4441      	add	r1, r8
 8010990:	4604      	mov	r4, r0
 8010992:	4602      	mov	r2, r0
 8010994:	2800      	cmp	r0, #0
 8010996:	d1ea      	bne.n	801096e <ucdr_serialize_endian_array_char+0x16>
 8010998:	2301      	movs	r3, #1
 801099a:	7da8      	ldrb	r0, [r5, #22]
 801099c:	756b      	strb	r3, [r5, #21]
 801099e:	4058      	eors	r0, r3
 80109a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a4:	463a      	mov	r2, r7
 80109a6:	68a8      	ldr	r0, [r5, #8]
 80109a8:	4641      	mov	r1, r8
 80109aa:	f001 fb52 	bl	8012052 <memcpy>
 80109ae:	68aa      	ldr	r2, [r5, #8]
 80109b0:	692b      	ldr	r3, [r5, #16]
 80109b2:	443a      	add	r2, r7
 80109b4:	443b      	add	r3, r7
 80109b6:	60aa      	str	r2, [r5, #8]
 80109b8:	612b      	str	r3, [r5, #16]
 80109ba:	e7ed      	b.n	8010998 <ucdr_serialize_endian_array_char+0x40>

080109bc <ucdr_deserialize_endian_array_char>:
 80109bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c0:	4619      	mov	r1, r3
 80109c2:	461f      	mov	r7, r3
 80109c4:	4605      	mov	r5, r0
 80109c6:	4690      	mov	r8, r2
 80109c8:	f7f9 f816 	bl	80099f8 <ucdr_check_buffer_available_for>
 80109cc:	b9e0      	cbnz	r0, 8010a08 <ucdr_deserialize_endian_array_char+0x4c>
 80109ce:	463e      	mov	r6, r7
 80109d0:	e009      	b.n	80109e6 <ucdr_deserialize_endian_array_char+0x2a>
 80109d2:	68a9      	ldr	r1, [r5, #8]
 80109d4:	f001 fb3d 	bl	8012052 <memcpy>
 80109d8:	68ab      	ldr	r3, [r5, #8]
 80109da:	6928      	ldr	r0, [r5, #16]
 80109dc:	4423      	add	r3, r4
 80109de:	4420      	add	r0, r4
 80109e0:	1b36      	subs	r6, r6, r4
 80109e2:	60ab      	str	r3, [r5, #8]
 80109e4:	6128      	str	r0, [r5, #16]
 80109e6:	2201      	movs	r2, #1
 80109e8:	4631      	mov	r1, r6
 80109ea:	4628      	mov	r0, r5
 80109ec:	f7f9 f88c 	bl	8009b08 <ucdr_check_final_buffer_behavior_array>
 80109f0:	4604      	mov	r4, r0
 80109f2:	1bb8      	subs	r0, r7, r6
 80109f4:	4440      	add	r0, r8
 80109f6:	4622      	mov	r2, r4
 80109f8:	2c00      	cmp	r4, #0
 80109fa:	d1ea      	bne.n	80109d2 <ucdr_deserialize_endian_array_char+0x16>
 80109fc:	2301      	movs	r3, #1
 80109fe:	7da8      	ldrb	r0, [r5, #22]
 8010a00:	756b      	strb	r3, [r5, #21]
 8010a02:	4058      	eors	r0, r3
 8010a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a08:	463a      	mov	r2, r7
 8010a0a:	68a9      	ldr	r1, [r5, #8]
 8010a0c:	4640      	mov	r0, r8
 8010a0e:	f001 fb20 	bl	8012052 <memcpy>
 8010a12:	68aa      	ldr	r2, [r5, #8]
 8010a14:	692b      	ldr	r3, [r5, #16]
 8010a16:	443a      	add	r2, r7
 8010a18:	443b      	add	r3, r7
 8010a1a:	60aa      	str	r2, [r5, #8]
 8010a1c:	612b      	str	r3, [r5, #16]
 8010a1e:	e7ed      	b.n	80109fc <ucdr_deserialize_endian_array_char+0x40>

08010a20 <ucdr_serialize_array_uint8_t>:
 8010a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a24:	4688      	mov	r8, r1
 8010a26:	4611      	mov	r1, r2
 8010a28:	4617      	mov	r7, r2
 8010a2a:	4605      	mov	r5, r0
 8010a2c:	f7f8 ffe4 	bl	80099f8 <ucdr_check_buffer_available_for>
 8010a30:	b9e0      	cbnz	r0, 8010a6c <ucdr_serialize_array_uint8_t+0x4c>
 8010a32:	463e      	mov	r6, r7
 8010a34:	e009      	b.n	8010a4a <ucdr_serialize_array_uint8_t+0x2a>
 8010a36:	68a8      	ldr	r0, [r5, #8]
 8010a38:	f001 fb0b 	bl	8012052 <memcpy>
 8010a3c:	68aa      	ldr	r2, [r5, #8]
 8010a3e:	692b      	ldr	r3, [r5, #16]
 8010a40:	4422      	add	r2, r4
 8010a42:	4423      	add	r3, r4
 8010a44:	1b36      	subs	r6, r6, r4
 8010a46:	60aa      	str	r2, [r5, #8]
 8010a48:	612b      	str	r3, [r5, #16]
 8010a4a:	4631      	mov	r1, r6
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	4628      	mov	r0, r5
 8010a50:	f7f9 f85a 	bl	8009b08 <ucdr_check_final_buffer_behavior_array>
 8010a54:	1bb9      	subs	r1, r7, r6
 8010a56:	4441      	add	r1, r8
 8010a58:	4604      	mov	r4, r0
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d1ea      	bne.n	8010a36 <ucdr_serialize_array_uint8_t+0x16>
 8010a60:	2301      	movs	r3, #1
 8010a62:	7da8      	ldrb	r0, [r5, #22]
 8010a64:	756b      	strb	r3, [r5, #21]
 8010a66:	4058      	eors	r0, r3
 8010a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a6c:	463a      	mov	r2, r7
 8010a6e:	68a8      	ldr	r0, [r5, #8]
 8010a70:	4641      	mov	r1, r8
 8010a72:	f001 faee 	bl	8012052 <memcpy>
 8010a76:	68aa      	ldr	r2, [r5, #8]
 8010a78:	692b      	ldr	r3, [r5, #16]
 8010a7a:	443a      	add	r2, r7
 8010a7c:	443b      	add	r3, r7
 8010a7e:	60aa      	str	r2, [r5, #8]
 8010a80:	612b      	str	r3, [r5, #16]
 8010a82:	e7ed      	b.n	8010a60 <ucdr_serialize_array_uint8_t+0x40>

08010a84 <ucdr_serialize_endian_array_uint8_t>:
 8010a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a88:	4619      	mov	r1, r3
 8010a8a:	461f      	mov	r7, r3
 8010a8c:	4605      	mov	r5, r0
 8010a8e:	4690      	mov	r8, r2
 8010a90:	f7f8 ffb2 	bl	80099f8 <ucdr_check_buffer_available_for>
 8010a94:	b9e0      	cbnz	r0, 8010ad0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8010a96:	463e      	mov	r6, r7
 8010a98:	e009      	b.n	8010aae <ucdr_serialize_endian_array_uint8_t+0x2a>
 8010a9a:	68a8      	ldr	r0, [r5, #8]
 8010a9c:	f001 fad9 	bl	8012052 <memcpy>
 8010aa0:	68ab      	ldr	r3, [r5, #8]
 8010aa2:	6928      	ldr	r0, [r5, #16]
 8010aa4:	4423      	add	r3, r4
 8010aa6:	4420      	add	r0, r4
 8010aa8:	1b36      	subs	r6, r6, r4
 8010aaa:	60ab      	str	r3, [r5, #8]
 8010aac:	6128      	str	r0, [r5, #16]
 8010aae:	4631      	mov	r1, r6
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	f7f9 f828 	bl	8009b08 <ucdr_check_final_buffer_behavior_array>
 8010ab8:	1bb9      	subs	r1, r7, r6
 8010aba:	4441      	add	r1, r8
 8010abc:	4604      	mov	r4, r0
 8010abe:	4602      	mov	r2, r0
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	d1ea      	bne.n	8010a9a <ucdr_serialize_endian_array_uint8_t+0x16>
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	7da8      	ldrb	r0, [r5, #22]
 8010ac8:	756b      	strb	r3, [r5, #21]
 8010aca:	4058      	eors	r0, r3
 8010acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad0:	463a      	mov	r2, r7
 8010ad2:	68a8      	ldr	r0, [r5, #8]
 8010ad4:	4641      	mov	r1, r8
 8010ad6:	f001 fabc 	bl	8012052 <memcpy>
 8010ada:	68aa      	ldr	r2, [r5, #8]
 8010adc:	692b      	ldr	r3, [r5, #16]
 8010ade:	443a      	add	r2, r7
 8010ae0:	443b      	add	r3, r7
 8010ae2:	60aa      	str	r2, [r5, #8]
 8010ae4:	612b      	str	r3, [r5, #16]
 8010ae6:	e7ed      	b.n	8010ac4 <ucdr_serialize_endian_array_uint8_t+0x40>

08010ae8 <ucdr_deserialize_array_uint8_t>:
 8010ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aec:	4688      	mov	r8, r1
 8010aee:	4611      	mov	r1, r2
 8010af0:	4617      	mov	r7, r2
 8010af2:	4605      	mov	r5, r0
 8010af4:	f7f8 ff80 	bl	80099f8 <ucdr_check_buffer_available_for>
 8010af8:	b9e0      	cbnz	r0, 8010b34 <ucdr_deserialize_array_uint8_t+0x4c>
 8010afa:	463e      	mov	r6, r7
 8010afc:	e009      	b.n	8010b12 <ucdr_deserialize_array_uint8_t+0x2a>
 8010afe:	68a9      	ldr	r1, [r5, #8]
 8010b00:	f001 faa7 	bl	8012052 <memcpy>
 8010b04:	68aa      	ldr	r2, [r5, #8]
 8010b06:	692b      	ldr	r3, [r5, #16]
 8010b08:	4422      	add	r2, r4
 8010b0a:	4423      	add	r3, r4
 8010b0c:	1b36      	subs	r6, r6, r4
 8010b0e:	60aa      	str	r2, [r5, #8]
 8010b10:	612b      	str	r3, [r5, #16]
 8010b12:	2201      	movs	r2, #1
 8010b14:	4631      	mov	r1, r6
 8010b16:	4628      	mov	r0, r5
 8010b18:	f7f8 fff6 	bl	8009b08 <ucdr_check_final_buffer_behavior_array>
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	1bb8      	subs	r0, r7, r6
 8010b20:	4440      	add	r0, r8
 8010b22:	4622      	mov	r2, r4
 8010b24:	2c00      	cmp	r4, #0
 8010b26:	d1ea      	bne.n	8010afe <ucdr_deserialize_array_uint8_t+0x16>
 8010b28:	2301      	movs	r3, #1
 8010b2a:	7da8      	ldrb	r0, [r5, #22]
 8010b2c:	756b      	strb	r3, [r5, #21]
 8010b2e:	4058      	eors	r0, r3
 8010b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b34:	463a      	mov	r2, r7
 8010b36:	68a9      	ldr	r1, [r5, #8]
 8010b38:	4640      	mov	r0, r8
 8010b3a:	f001 fa8a 	bl	8012052 <memcpy>
 8010b3e:	68aa      	ldr	r2, [r5, #8]
 8010b40:	692b      	ldr	r3, [r5, #16]
 8010b42:	443a      	add	r2, r7
 8010b44:	443b      	add	r3, r7
 8010b46:	60aa      	str	r2, [r5, #8]
 8010b48:	612b      	str	r3, [r5, #16]
 8010b4a:	e7ed      	b.n	8010b28 <ucdr_deserialize_array_uint8_t+0x40>

08010b4c <ucdr_deserialize_endian_array_uint8_t>:
 8010b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b50:	4619      	mov	r1, r3
 8010b52:	461f      	mov	r7, r3
 8010b54:	4605      	mov	r5, r0
 8010b56:	4690      	mov	r8, r2
 8010b58:	f7f8 ff4e 	bl	80099f8 <ucdr_check_buffer_available_for>
 8010b5c:	b9e0      	cbnz	r0, 8010b98 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8010b5e:	463e      	mov	r6, r7
 8010b60:	e009      	b.n	8010b76 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8010b62:	68a9      	ldr	r1, [r5, #8]
 8010b64:	f001 fa75 	bl	8012052 <memcpy>
 8010b68:	68ab      	ldr	r3, [r5, #8]
 8010b6a:	6928      	ldr	r0, [r5, #16]
 8010b6c:	4423      	add	r3, r4
 8010b6e:	4420      	add	r0, r4
 8010b70:	1b36      	subs	r6, r6, r4
 8010b72:	60ab      	str	r3, [r5, #8]
 8010b74:	6128      	str	r0, [r5, #16]
 8010b76:	2201      	movs	r2, #1
 8010b78:	4631      	mov	r1, r6
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	f7f8 ffc4 	bl	8009b08 <ucdr_check_final_buffer_behavior_array>
 8010b80:	4604      	mov	r4, r0
 8010b82:	1bb8      	subs	r0, r7, r6
 8010b84:	4440      	add	r0, r8
 8010b86:	4622      	mov	r2, r4
 8010b88:	2c00      	cmp	r4, #0
 8010b8a:	d1ea      	bne.n	8010b62 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	7da8      	ldrb	r0, [r5, #22]
 8010b90:	756b      	strb	r3, [r5, #21]
 8010b92:	4058      	eors	r0, r3
 8010b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b98:	463a      	mov	r2, r7
 8010b9a:	68a9      	ldr	r1, [r5, #8]
 8010b9c:	4640      	mov	r0, r8
 8010b9e:	f001 fa58 	bl	8012052 <memcpy>
 8010ba2:	68aa      	ldr	r2, [r5, #8]
 8010ba4:	692b      	ldr	r3, [r5, #16]
 8010ba6:	443a      	add	r2, r7
 8010ba8:	443b      	add	r3, r7
 8010baa:	60aa      	str	r2, [r5, #8]
 8010bac:	612b      	str	r3, [r5, #16]
 8010bae:	e7ed      	b.n	8010b8c <ucdr_deserialize_endian_array_uint8_t+0x40>

08010bb0 <ucdr_serialize_sequence_char>:
 8010bb0:	b570      	push	{r4, r5, r6, lr}
 8010bb2:	4615      	mov	r5, r2
 8010bb4:	460e      	mov	r6, r1
 8010bb6:	7d01      	ldrb	r1, [r0, #20]
 8010bb8:	4604      	mov	r4, r0
 8010bba:	f7f8 f975 	bl	8008ea8 <ucdr_serialize_endian_uint32_t>
 8010bbe:	b90d      	cbnz	r5, 8010bc4 <ucdr_serialize_sequence_char+0x14>
 8010bc0:	2001      	movs	r0, #1
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
 8010bc4:	7d21      	ldrb	r1, [r4, #20]
 8010bc6:	462b      	mov	r3, r5
 8010bc8:	4632      	mov	r2, r6
 8010bca:	4620      	mov	r0, r4
 8010bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bd0:	f7ff bec2 	b.w	8010958 <ucdr_serialize_endian_array_char>

08010bd4 <ucdr_deserialize_sequence_char>:
 8010bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd8:	461d      	mov	r5, r3
 8010bda:	4616      	mov	r6, r2
 8010bdc:	460f      	mov	r7, r1
 8010bde:	461a      	mov	r2, r3
 8010be0:	7d01      	ldrb	r1, [r0, #20]
 8010be2:	4604      	mov	r4, r0
 8010be4:	f7f8 fa88 	bl	80090f8 <ucdr_deserialize_endian_uint32_t>
 8010be8:	682b      	ldr	r3, [r5, #0]
 8010bea:	429e      	cmp	r6, r3
 8010bec:	bf3c      	itt	cc
 8010bee:	2201      	movcc	r2, #1
 8010bf0:	75a2      	strbcc	r2, [r4, #22]
 8010bf2:	b913      	cbnz	r3, 8010bfa <ucdr_deserialize_sequence_char+0x26>
 8010bf4:	2001      	movs	r0, #1
 8010bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bfa:	7d21      	ldrb	r1, [r4, #20]
 8010bfc:	463a      	mov	r2, r7
 8010bfe:	4620      	mov	r0, r4
 8010c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c04:	f7ff beda 	b.w	80109bc <ucdr_deserialize_endian_array_char>

08010c08 <ucdr_serialize_sequence_uint8_t>:
 8010c08:	b570      	push	{r4, r5, r6, lr}
 8010c0a:	4615      	mov	r5, r2
 8010c0c:	460e      	mov	r6, r1
 8010c0e:	7d01      	ldrb	r1, [r0, #20]
 8010c10:	4604      	mov	r4, r0
 8010c12:	f7f8 f949 	bl	8008ea8 <ucdr_serialize_endian_uint32_t>
 8010c16:	b90d      	cbnz	r5, 8010c1c <ucdr_serialize_sequence_uint8_t+0x14>
 8010c18:	2001      	movs	r0, #1
 8010c1a:	bd70      	pop	{r4, r5, r6, pc}
 8010c1c:	7d21      	ldrb	r1, [r4, #20]
 8010c1e:	462b      	mov	r3, r5
 8010c20:	4632      	mov	r2, r6
 8010c22:	4620      	mov	r0, r4
 8010c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c28:	f7ff bf2c 	b.w	8010a84 <ucdr_serialize_endian_array_uint8_t>

08010c2c <ucdr_deserialize_sequence_uint8_t>:
 8010c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c30:	461d      	mov	r5, r3
 8010c32:	4616      	mov	r6, r2
 8010c34:	460f      	mov	r7, r1
 8010c36:	461a      	mov	r2, r3
 8010c38:	7d01      	ldrb	r1, [r0, #20]
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	f7f8 fa5c 	bl	80090f8 <ucdr_deserialize_endian_uint32_t>
 8010c40:	682b      	ldr	r3, [r5, #0]
 8010c42:	429e      	cmp	r6, r3
 8010c44:	bf3c      	itt	cc
 8010c46:	2201      	movcc	r2, #1
 8010c48:	75a2      	strbcc	r2, [r4, #22]
 8010c4a:	b913      	cbnz	r3, 8010c52 <ucdr_deserialize_sequence_uint8_t+0x26>
 8010c4c:	2001      	movs	r0, #1
 8010c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c52:	7d21      	ldrb	r1, [r4, #20]
 8010c54:	463a      	mov	r2, r7
 8010c56:	4620      	mov	r0, r4
 8010c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c5c:	f7ff bf76 	b.w	8010b4c <ucdr_deserialize_endian_array_uint8_t>

08010c60 <ucdr_serialize_string>:
 8010c60:	b510      	push	{r4, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	4604      	mov	r4, r0
 8010c66:	4608      	mov	r0, r1
 8010c68:	9101      	str	r1, [sp, #4]
 8010c6a:	f7ef fac3 	bl	80001f4 <strlen>
 8010c6e:	9901      	ldr	r1, [sp, #4]
 8010c70:	1c42      	adds	r2, r0, #1
 8010c72:	4620      	mov	r0, r4
 8010c74:	b002      	add	sp, #8
 8010c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c7a:	f7ff bf99 	b.w	8010bb0 <ucdr_serialize_sequence_char>
 8010c7e:	bf00      	nop

08010c80 <ucdr_deserialize_string>:
 8010c80:	b500      	push	{lr}
 8010c82:	b083      	sub	sp, #12
 8010c84:	ab01      	add	r3, sp, #4
 8010c86:	f7ff ffa5 	bl	8010bd4 <ucdr_deserialize_sequence_char>
 8010c8a:	b003      	add	sp, #12
 8010c8c:	f85d fb04 	ldr.w	pc, [sp], #4

08010c90 <uxr_init_input_best_effort_stream>:
 8010c90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010c94:	8003      	strh	r3, [r0, #0]
 8010c96:	4770      	bx	lr

08010c98 <uxr_reset_input_best_effort_stream>:
 8010c98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010c9c:	8003      	strh	r3, [r0, #0]
 8010c9e:	4770      	bx	lr

08010ca0 <uxr_receive_best_effort_message>:
 8010ca0:	b538      	push	{r3, r4, r5, lr}
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	8800      	ldrh	r0, [r0, #0]
 8010ca6:	460d      	mov	r5, r1
 8010ca8:	f000 fd18 	bl	80116dc <uxr_seq_num_cmp>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8010cb4:	bfb8      	it	lt
 8010cb6:	8025      	strhlt	r5, [r4, #0]
 8010cb8:	bd38      	pop	{r3, r4, r5, pc}
 8010cba:	bf00      	nop

08010cbc <on_full_input_buffer>:
 8010cbc:	b570      	push	{r4, r5, r6, lr}
 8010cbe:	4605      	mov	r5, r0
 8010cc0:	460c      	mov	r4, r1
 8010cc2:	682b      	ldr	r3, [r5, #0]
 8010cc4:	6809      	ldr	r1, [r1, #0]
 8010cc6:	8920      	ldrh	r0, [r4, #8]
 8010cc8:	6862      	ldr	r2, [r4, #4]
 8010cca:	fbb2 f2f0 	udiv	r2, r2, r0
 8010cce:	eba3 0c01 	sub.w	ip, r3, r1
 8010cd2:	fbbc fcf2 	udiv	ip, ip, r2
 8010cd6:	f10c 0c01 	add.w	ip, ip, #1
 8010cda:	fa1f f38c 	uxth.w	r3, ip
 8010cde:	fbb3 f6f0 	udiv	r6, r3, r0
 8010ce2:	fb00 3316 	mls	r3, r0, r6, r3
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	fb02 f303 	mul.w	r3, r2, r3
 8010cec:	1d18      	adds	r0, r3, #4
 8010cee:	4408      	add	r0, r1
 8010cf0:	7d26      	ldrb	r6, [r4, #20]
 8010cf2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010cf6:	b116      	cbz	r6, 8010cfe <on_full_input_buffer+0x42>
 8010cf8:	2600      	movs	r6, #0
 8010cfa:	f840 6c04 	str.w	r6, [r0, #-4]
 8010cfe:	2a03      	cmp	r2, #3
 8010d00:	d801      	bhi.n	8010d06 <on_full_input_buffer+0x4a>
 8010d02:	2001      	movs	r0, #1
 8010d04:	bd70      	pop	{r4, r5, r6, pc}
 8010d06:	3308      	adds	r3, #8
 8010d08:	4419      	add	r1, r3
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	692b      	ldr	r3, [r5, #16]
 8010d0e:	3a04      	subs	r2, #4
 8010d10:	f7f8 febe 	bl	8009a90 <ucdr_init_buffer_origin>
 8010d14:	4628      	mov	r0, r5
 8010d16:	4903      	ldr	r1, [pc, #12]	@ (8010d24 <on_full_input_buffer+0x68>)
 8010d18:	4622      	mov	r2, r4
 8010d1a:	f7f8 fe95 	bl	8009a48 <ucdr_set_on_full_buffer_callback>
 8010d1e:	2000      	movs	r0, #0
 8010d20:	bd70      	pop	{r4, r5, r6, pc}
 8010d22:	bf00      	nop
 8010d24:	08010cbd 	.word	0x08010cbd

08010d28 <uxr_init_input_reliable_stream>:
 8010d28:	b500      	push	{lr}
 8010d2a:	e9c0 1200 	strd	r1, r2, [r0]
 8010d2e:	f04f 0e00 	mov.w	lr, #0
 8010d32:	9a01      	ldr	r2, [sp, #4]
 8010d34:	8103      	strh	r3, [r0, #8]
 8010d36:	6102      	str	r2, [r0, #16]
 8010d38:	f880 e014 	strb.w	lr, [r0, #20]
 8010d3c:	b1d3      	cbz	r3, 8010d74 <uxr_init_input_reliable_stream+0x4c>
 8010d3e:	f8c1 e000 	str.w	lr, [r1]
 8010d42:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8010d46:	f1bc 0f01 	cmp.w	ip, #1
 8010d4a:	d913      	bls.n	8010d74 <uxr_init_input_reliable_stream+0x4c>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	fbb3 f1fc 	udiv	r1, r3, ip
 8010d52:	fb0c 3111 	mls	r1, ip, r1, r3
 8010d56:	b289      	uxth	r1, r1
 8010d58:	6842      	ldr	r2, [r0, #4]
 8010d5a:	fbb2 f2fc 	udiv	r2, r2, ip
 8010d5e:	fb01 f202 	mul.w	r2, r1, r2
 8010d62:	6801      	ldr	r1, [r0, #0]
 8010d64:	f841 e002 	str.w	lr, [r1, r2]
 8010d68:	3301      	adds	r3, #1
 8010d6a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	459c      	cmp	ip, r3
 8010d72:	d8ec      	bhi.n	8010d4e <uxr_init_input_reliable_stream+0x26>
 8010d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010d78:	60c3      	str	r3, [r0, #12]
 8010d7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d7e:	bf00      	nop

08010d80 <uxr_reset_input_reliable_stream>:
 8010d80:	8901      	ldrh	r1, [r0, #8]
 8010d82:	b1e9      	cbz	r1, 8010dc0 <uxr_reset_input_reliable_stream+0x40>
 8010d84:	f04f 0c00 	mov.w	ip, #0
 8010d88:	b500      	push	{lr}
 8010d8a:	4663      	mov	r3, ip
 8010d8c:	46e6      	mov	lr, ip
 8010d8e:	fbb3 f2f1 	udiv	r2, r3, r1
 8010d92:	fb01 3312 	mls	r3, r1, r2, r3
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	6842      	ldr	r2, [r0, #4]
 8010d9a:	fbb2 f2f1 	udiv	r2, r2, r1
 8010d9e:	fb02 f303 	mul.w	r3, r2, r3
 8010da2:	6802      	ldr	r2, [r0, #0]
 8010da4:	f842 e003 	str.w	lr, [r2, r3]
 8010da8:	f10c 0c01 	add.w	ip, ip, #1
 8010dac:	8901      	ldrh	r1, [r0, #8]
 8010dae:	fa1f f38c 	uxth.w	r3, ip
 8010db2:	4299      	cmp	r1, r3
 8010db4:	d8eb      	bhi.n	8010d8e <uxr_reset_input_reliable_stream+0xe>
 8010db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010dba:	60c3      	str	r3, [r0, #12]
 8010dbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010dc4:	60c3      	str	r3, [r0, #12]
 8010dc6:	4770      	bx	lr

08010dc8 <uxr_receive_reliable_message>:
 8010dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dcc:	4604      	mov	r4, r0
 8010dce:	460d      	mov	r5, r1
 8010dd0:	8901      	ldrh	r1, [r0, #8]
 8010dd2:	8980      	ldrh	r0, [r0, #12]
 8010dd4:	4690      	mov	r8, r2
 8010dd6:	461f      	mov	r7, r3
 8010dd8:	f000 fc78 	bl	80116cc <uxr_seq_num_add>
 8010ddc:	4629      	mov	r1, r5
 8010dde:	4606      	mov	r6, r0
 8010de0:	89a0      	ldrh	r0, [r4, #12]
 8010de2:	f000 fc7b 	bl	80116dc <uxr_seq_num_cmp>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	db0a      	blt.n	8010e00 <uxr_receive_reliable_message+0x38>
 8010dea:	2600      	movs	r6, #0
 8010dec:	89e0      	ldrh	r0, [r4, #14]
 8010dee:	4629      	mov	r1, r5
 8010df0:	f000 fc74 	bl	80116dc <uxr_seq_num_cmp>
 8010df4:	2800      	cmp	r0, #0
 8010df6:	da00      	bge.n	8010dfa <uxr_receive_reliable_message+0x32>
 8010df8:	81e5      	strh	r5, [r4, #14]
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e00:	4630      	mov	r0, r6
 8010e02:	4629      	mov	r1, r5
 8010e04:	f000 fc6a 	bl	80116dc <uxr_seq_num_cmp>
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	dbee      	blt.n	8010dea <uxr_receive_reliable_message+0x22>
 8010e0c:	6923      	ldr	r3, [r4, #16]
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4798      	blx	r3
 8010e12:	2101      	movs	r1, #1
 8010e14:	4681      	mov	r9, r0
 8010e16:	89a0      	ldrh	r0, [r4, #12]
 8010e18:	f000 fc58 	bl	80116cc <uxr_seq_num_add>
 8010e1c:	f1b9 0f00 	cmp.w	r9, #0
 8010e20:	d101      	bne.n	8010e26 <uxr_receive_reliable_message+0x5e>
 8010e22:	4285      	cmp	r5, r0
 8010e24:	d047      	beq.n	8010eb6 <uxr_receive_reliable_message+0xee>
 8010e26:	8922      	ldrh	r2, [r4, #8]
 8010e28:	fbb5 f0f2 	udiv	r0, r5, r2
 8010e2c:	fb02 5010 	mls	r0, r2, r0, r5
 8010e30:	b280      	uxth	r0, r0
 8010e32:	6863      	ldr	r3, [r4, #4]
 8010e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e38:	fb00 f303 	mul.w	r3, r0, r3
 8010e3c:	6820      	ldr	r0, [r4, #0]
 8010e3e:	3304      	adds	r3, #4
 8010e40:	4418      	add	r0, r3
 8010e42:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d1cf      	bne.n	8010dea <uxr_receive_reliable_message+0x22>
 8010e4a:	4641      	mov	r1, r8
 8010e4c:	463a      	mov	r2, r7
 8010e4e:	f001 f900 	bl	8012052 <memcpy>
 8010e52:	8921      	ldrh	r1, [r4, #8]
 8010e54:	fbb5 f2f1 	udiv	r2, r5, r1
 8010e58:	fb01 5212 	mls	r2, r1, r2, r5
 8010e5c:	b292      	uxth	r2, r2
 8010e5e:	6863      	ldr	r3, [r4, #4]
 8010e60:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e64:	fb02 f303 	mul.w	r3, r2, r3
 8010e68:	6822      	ldr	r2, [r4, #0]
 8010e6a:	50d7      	str	r7, [r2, r3]
 8010e6c:	9a08      	ldr	r2, [sp, #32]
 8010e6e:	2301      	movs	r3, #1
 8010e70:	7013      	strb	r3, [r2, #0]
 8010e72:	f1b9 0f00 	cmp.w	r9, #0
 8010e76:	d0b8      	beq.n	8010dea <uxr_receive_reliable_message+0x22>
 8010e78:	89a6      	ldrh	r6, [r4, #12]
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	2101      	movs	r1, #1
 8010e7e:	f000 fc25 	bl	80116cc <uxr_seq_num_add>
 8010e82:	8922      	ldrh	r2, [r4, #8]
 8010e84:	6863      	ldr	r3, [r4, #4]
 8010e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e8a:	4606      	mov	r6, r0
 8010e8c:	fbb0 f0f2 	udiv	r0, r0, r2
 8010e90:	fb02 6010 	mls	r0, r2, r0, r6
 8010e94:	b280      	uxth	r0, r0
 8010e96:	fb00 f303 	mul.w	r3, r0, r3
 8010e9a:	6820      	ldr	r0, [r4, #0]
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	4418      	add	r0, r3
 8010ea0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d0a0      	beq.n	8010dea <uxr_receive_reliable_message+0x22>
 8010ea8:	6923      	ldr	r3, [r4, #16]
 8010eaa:	4798      	blx	r3
 8010eac:	2802      	cmp	r0, #2
 8010eae:	d008      	beq.n	8010ec2 <uxr_receive_reliable_message+0xfa>
 8010eb0:	2801      	cmp	r0, #1
 8010eb2:	d0e2      	beq.n	8010e7a <uxr_receive_reliable_message+0xb2>
 8010eb4:	e799      	b.n	8010dea <uxr_receive_reliable_message+0x22>
 8010eb6:	9b08      	ldr	r3, [sp, #32]
 8010eb8:	81a5      	strh	r5, [r4, #12]
 8010eba:	2601      	movs	r6, #1
 8010ebc:	f883 9000 	strb.w	r9, [r3]
 8010ec0:	e794      	b.n	8010dec <uxr_receive_reliable_message+0x24>
 8010ec2:	2601      	movs	r6, #1
 8010ec4:	e792      	b.n	8010dec <uxr_receive_reliable_message+0x24>
 8010ec6:	bf00      	nop

08010ec8 <uxr_next_input_reliable_buffer_available>:
 8010ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ecc:	4604      	mov	r4, r0
 8010ece:	460f      	mov	r7, r1
 8010ed0:	8980      	ldrh	r0, [r0, #12]
 8010ed2:	2101      	movs	r1, #1
 8010ed4:	4690      	mov	r8, r2
 8010ed6:	f000 fbf9 	bl	80116cc <uxr_seq_num_add>
 8010eda:	8922      	ldrh	r2, [r4, #8]
 8010edc:	fbb0 f6f2 	udiv	r6, r0, r2
 8010ee0:	fb02 0616 	mls	r6, r2, r6, r0
 8010ee4:	b2b6      	uxth	r6, r6
 8010ee6:	6863      	ldr	r3, [r4, #4]
 8010ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8010eec:	fb06 f303 	mul.w	r3, r6, r3
 8010ef0:	6826      	ldr	r6, [r4, #0]
 8010ef2:	3304      	adds	r3, #4
 8010ef4:	441e      	add	r6, r3
 8010ef6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8010efa:	f1b9 0f00 	cmp.w	r9, #0
 8010efe:	d023      	beq.n	8010f48 <uxr_next_input_reliable_buffer_available+0x80>
 8010f00:	6923      	ldr	r3, [r4, #16]
 8010f02:	4605      	mov	r5, r0
 8010f04:	4630      	mov	r0, r6
 8010f06:	4798      	blx	r3
 8010f08:	4682      	mov	sl, r0
 8010f0a:	b300      	cbz	r0, 8010f4e <uxr_next_input_reliable_buffer_available+0x86>
 8010f0c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8010f10:	2101      	movs	r1, #1
 8010f12:	4650      	mov	r0, sl
 8010f14:	f000 fbda 	bl	80116cc <uxr_seq_num_add>
 8010f18:	8921      	ldrh	r1, [r4, #8]
 8010f1a:	fbb0 f2f1 	udiv	r2, r0, r1
 8010f1e:	4682      	mov	sl, r0
 8010f20:	fb01 0212 	mls	r2, r1, r2, r0
 8010f24:	e9d4 0300 	ldrd	r0, r3, [r4]
 8010f28:	b292      	uxth	r2, r2
 8010f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f2e:	fb02 f303 	mul.w	r3, r2, r3
 8010f32:	3304      	adds	r3, #4
 8010f34:	4418      	add	r0, r3
 8010f36:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010f3a:	b12b      	cbz	r3, 8010f48 <uxr_next_input_reliable_buffer_available+0x80>
 8010f3c:	6923      	ldr	r3, [r4, #16]
 8010f3e:	4798      	blx	r3
 8010f40:	2802      	cmp	r0, #2
 8010f42:	d01b      	beq.n	8010f7c <uxr_next_input_reliable_buffer_available+0xb4>
 8010f44:	2801      	cmp	r0, #1
 8010f46:	d0e3      	beq.n	8010f10 <uxr_next_input_reliable_buffer_available+0x48>
 8010f48:	2000      	movs	r0, #0
 8010f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f4e:	464a      	mov	r2, r9
 8010f50:	4631      	mov	r1, r6
 8010f52:	4638      	mov	r0, r7
 8010f54:	f7f8 fda4 	bl	8009aa0 <ucdr_init_buffer>
 8010f58:	8921      	ldrh	r1, [r4, #8]
 8010f5a:	fbb5 f2f1 	udiv	r2, r5, r1
 8010f5e:	fb01 5212 	mls	r2, r1, r2, r5
 8010f62:	b292      	uxth	r2, r2
 8010f64:	6863      	ldr	r3, [r4, #4]
 8010f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f6a:	fb02 f303 	mul.w	r3, r2, r3
 8010f6e:	6822      	ldr	r2, [r4, #0]
 8010f70:	f842 a003 	str.w	sl, [r2, r3]
 8010f74:	2001      	movs	r0, #1
 8010f76:	81a5      	strh	r5, [r4, #12]
 8010f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f7c:	8920      	ldrh	r0, [r4, #8]
 8010f7e:	fbb5 f3f0 	udiv	r3, r5, r0
 8010f82:	fb00 5513 	mls	r5, r0, r3, r5
 8010f86:	b2ad      	uxth	r5, r5
 8010f88:	6863      	ldr	r3, [r4, #4]
 8010f8a:	fbb3 f3f0 	udiv	r3, r3, r0
 8010f8e:	fb03 f505 	mul.w	r5, r3, r5
 8010f92:	6823      	ldr	r3, [r4, #0]
 8010f94:	2000      	movs	r0, #0
 8010f96:	5158      	str	r0, [r3, r5]
 8010f98:	eb06 0108 	add.w	r1, r6, r8
 8010f9c:	eba9 0208 	sub.w	r2, r9, r8
 8010fa0:	4638      	mov	r0, r7
 8010fa2:	f7f8 fd7d 	bl	8009aa0 <ucdr_init_buffer>
 8010fa6:	4638      	mov	r0, r7
 8010fa8:	4903      	ldr	r1, [pc, #12]	@ (8010fb8 <uxr_next_input_reliable_buffer_available+0xf0>)
 8010faa:	4622      	mov	r2, r4
 8010fac:	f7f8 fd4c 	bl	8009a48 <ucdr_set_on_full_buffer_callback>
 8010fb0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8010fb4:	2001      	movs	r0, #1
 8010fb6:	e7c8      	b.n	8010f4a <uxr_next_input_reliable_buffer_available+0x82>
 8010fb8:	08010cbd 	.word	0x08010cbd

08010fbc <uxr_process_heartbeat>:
 8010fbc:	b538      	push	{r3, r4, r5, lr}
 8010fbe:	4611      	mov	r1, r2
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	89c0      	ldrh	r0, [r0, #14]
 8010fc4:	4615      	mov	r5, r2
 8010fc6:	f000 fb89 	bl	80116dc <uxr_seq_num_cmp>
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	bfb8      	it	lt
 8010fce:	81e5      	strhlt	r5, [r4, #14]
 8010fd0:	bd38      	pop	{r3, r4, r5, pc}
 8010fd2:	bf00      	nop

08010fd4 <uxr_compute_acknack>:
 8010fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fd8:	8903      	ldrh	r3, [r0, #8]
 8010fda:	8985      	ldrh	r5, [r0, #12]
 8010fdc:	4604      	mov	r4, r0
 8010fde:	460e      	mov	r6, r1
 8010fe0:	b1d3      	cbz	r3, 8011018 <uxr_compute_acknack+0x44>
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	2701      	movs	r7, #1
 8010fe6:	e003      	b.n	8010ff0 <uxr_compute_acknack+0x1c>
 8010fe8:	4567      	cmp	r7, ip
 8010fea:	d215      	bcs.n	8011018 <uxr_compute_acknack+0x44>
 8010fec:	89a0      	ldrh	r0, [r4, #12]
 8010fee:	3701      	adds	r7, #1
 8010ff0:	b2b9      	uxth	r1, r7
 8010ff2:	f000 fb6b 	bl	80116cc <uxr_seq_num_add>
 8010ff6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010ffa:	fbb0 f3fc 	udiv	r3, r0, ip
 8010ffe:	fb0c 0313 	mls	r3, ip, r3, r0
 8011002:	b29a      	uxth	r2, r3
 8011004:	e9d4 1300 	ldrd	r1, r3, [r4]
 8011008:	fbb3 f3fc 	udiv	r3, r3, ip
 801100c:	fb02 f303 	mul.w	r3, r2, r3
 8011010:	58cb      	ldr	r3, [r1, r3]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d1e8      	bne.n	8010fe8 <uxr_compute_acknack+0x14>
 8011016:	4605      	mov	r5, r0
 8011018:	8035      	strh	r5, [r6, #0]
 801101a:	2101      	movs	r1, #1
 801101c:	4628      	mov	r0, r5
 801101e:	89e7      	ldrh	r7, [r4, #14]
 8011020:	f000 fb58 	bl	80116d4 <uxr_seq_num_sub>
 8011024:	4601      	mov	r1, r0
 8011026:	4638      	mov	r0, r7
 8011028:	f000 fb54 	bl	80116d4 <uxr_seq_num_sub>
 801102c:	4605      	mov	r5, r0
 801102e:	b318      	cbz	r0, 8011078 <uxr_compute_acknack+0xa4>
 8011030:	f04f 0900 	mov.w	r9, #0
 8011034:	464f      	mov	r7, r9
 8011036:	f04f 0801 	mov.w	r8, #1
 801103a:	fa1f f189 	uxth.w	r1, r9
 801103e:	8830      	ldrh	r0, [r6, #0]
 8011040:	f000 fb44 	bl	80116cc <uxr_seq_num_add>
 8011044:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011048:	fbb0 f3fc 	udiv	r3, r0, ip
 801104c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8011050:	fb03 001c 	mls	r0, r3, ip, r0
 8011054:	b283      	uxth	r3, r0
 8011056:	fbb2 f2fc 	udiv	r2, r2, ip
 801105a:	fb02 f303 	mul.w	r3, r2, r3
 801105e:	fa08 f209 	lsl.w	r2, r8, r9
 8011062:	58cb      	ldr	r3, [r1, r3]
 8011064:	f109 0901 	add.w	r9, r9, #1
 8011068:	b90b      	cbnz	r3, 801106e <uxr_compute_acknack+0x9a>
 801106a:	4317      	orrs	r7, r2
 801106c:	b2bf      	uxth	r7, r7
 801106e:	454d      	cmp	r5, r9
 8011070:	d1e3      	bne.n	801103a <uxr_compute_acknack+0x66>
 8011072:	4638      	mov	r0, r7
 8011074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011078:	4607      	mov	r7, r0
 801107a:	4638      	mov	r0, r7
 801107c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011080 <uxr_init_output_best_effort_stream>:
 8011080:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8011084:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8011088:	6001      	str	r1, [r0, #0]
 801108a:	7303      	strb	r3, [r0, #12]
 801108c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop

08011094 <uxr_reset_output_best_effort_stream>:
 8011094:	7b02      	ldrb	r2, [r0, #12]
 8011096:	6042      	str	r2, [r0, #4]
 8011098:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801109c:	81c3      	strh	r3, [r0, #14]
 801109e:	4770      	bx	lr

080110a0 <uxr_prepare_best_effort_buffer_to_write>:
 80110a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110a2:	4604      	mov	r4, r0
 80110a4:	b083      	sub	sp, #12
 80110a6:	6840      	ldr	r0, [r0, #4]
 80110a8:	460d      	mov	r5, r1
 80110aa:	4616      	mov	r6, r2
 80110ac:	f7fd ff9c 	bl	800efe8 <uxr_submessage_padding>
 80110b0:	6863      	ldr	r3, [r4, #4]
 80110b2:	4418      	add	r0, r3
 80110b4:	68a3      	ldr	r3, [r4, #8]
 80110b6:	1942      	adds	r2, r0, r5
 80110b8:	4293      	cmp	r3, r2
 80110ba:	bf2c      	ite	cs
 80110bc:	2701      	movcs	r7, #1
 80110be:	2700      	movcc	r7, #0
 80110c0:	d202      	bcs.n	80110c8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80110c2:	4638      	mov	r0, r7
 80110c4:	b003      	add	sp, #12
 80110c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110c8:	9000      	str	r0, [sp, #0]
 80110ca:	6821      	ldr	r1, [r4, #0]
 80110cc:	4630      	mov	r0, r6
 80110ce:	2300      	movs	r3, #0
 80110d0:	f7f8 fcd4 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 80110d4:	6861      	ldr	r1, [r4, #4]
 80110d6:	4638      	mov	r0, r7
 80110d8:	4429      	add	r1, r5
 80110da:	6061      	str	r1, [r4, #4]
 80110dc:	b003      	add	sp, #12
 80110de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080110e0 <uxr_prepare_best_effort_buffer_to_send>:
 80110e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110e4:	4604      	mov	r4, r0
 80110e6:	461d      	mov	r5, r3
 80110e8:	6840      	ldr	r0, [r0, #4]
 80110ea:	7b23      	ldrb	r3, [r4, #12]
 80110ec:	4298      	cmp	r0, r3
 80110ee:	bf8c      	ite	hi
 80110f0:	2601      	movhi	r6, #1
 80110f2:	2600      	movls	r6, #0
 80110f4:	d802      	bhi.n	80110fc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80110f6:	4630      	mov	r0, r6
 80110f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110fc:	4688      	mov	r8, r1
 80110fe:	89e0      	ldrh	r0, [r4, #14]
 8011100:	2101      	movs	r1, #1
 8011102:	4617      	mov	r7, r2
 8011104:	f000 fae2 	bl	80116cc <uxr_seq_num_add>
 8011108:	6823      	ldr	r3, [r4, #0]
 801110a:	81e0      	strh	r0, [r4, #14]
 801110c:	8028      	strh	r0, [r5, #0]
 801110e:	f8c8 3000 	str.w	r3, [r8]
 8011112:	6863      	ldr	r3, [r4, #4]
 8011114:	603b      	str	r3, [r7, #0]
 8011116:	7b23      	ldrb	r3, [r4, #12]
 8011118:	6063      	str	r3, [r4, #4]
 801111a:	4630      	mov	r0, r6
 801111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011120 <on_full_output_buffer>:
 8011120:	b538      	push	{r3, r4, r5, lr}
 8011122:	6802      	ldr	r2, [r0, #0]
 8011124:	460c      	mov	r4, r1
 8011126:	6809      	ldr	r1, [r1, #0]
 8011128:	8923      	ldrh	r3, [r4, #8]
 801112a:	eba2 0c01 	sub.w	ip, r2, r1
 801112e:	6862      	ldr	r2, [r4, #4]
 8011130:	fbb2 f2f3 	udiv	r2, r2, r3
 8011134:	fbbc fcf2 	udiv	ip, ip, r2
 8011138:	f10c 0c01 	add.w	ip, ip, #1
 801113c:	fa1f fc8c 	uxth.w	ip, ip
 8011140:	fbbc fef3 	udiv	lr, ip, r3
 8011144:	fb03 c31e 	mls	r3, r3, lr, ip
 8011148:	b29b      	uxth	r3, r3
 801114a:	fb02 f303 	mul.w	r3, r2, r3
 801114e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8011152:	58ca      	ldr	r2, [r1, r3]
 8011154:	4463      	add	r3, ip
 8011156:	eba2 020c 	sub.w	r2, r2, ip
 801115a:	3308      	adds	r3, #8
 801115c:	4605      	mov	r5, r0
 801115e:	4419      	add	r1, r3
 8011160:	3a04      	subs	r2, #4
 8011162:	6903      	ldr	r3, [r0, #16]
 8011164:	f7f8 fc94 	bl	8009a90 <ucdr_init_buffer_origin>
 8011168:	4628      	mov	r0, r5
 801116a:	4903      	ldr	r1, [pc, #12]	@ (8011178 <on_full_output_buffer+0x58>)
 801116c:	4622      	mov	r2, r4
 801116e:	f7f8 fc6b 	bl	8009a48 <ucdr_set_on_full_buffer_callback>
 8011172:	2000      	movs	r0, #0
 8011174:	bd38      	pop	{r3, r4, r5, pc}
 8011176:	bf00      	nop
 8011178:	08011121 	.word	0x08011121

0801117c <uxr_init_output_reliable_stream>:
 801117c:	b410      	push	{r4}
 801117e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8011182:	8103      	strh	r3, [r0, #8]
 8011184:	e9c0 1200 	strd	r1, r2, [r0]
 8011188:	f880 c00c 	strb.w	ip, [r0, #12]
 801118c:	b1d3      	cbz	r3, 80111c4 <uxr_init_output_reliable_stream+0x48>
 801118e:	f8c1 c000 	str.w	ip, [r1]
 8011192:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8011196:	f1bc 0f01 	cmp.w	ip, #1
 801119a:	d913      	bls.n	80111c4 <uxr_init_output_reliable_stream+0x48>
 801119c:	2301      	movs	r3, #1
 801119e:	fbb3 f1fc 	udiv	r1, r3, ip
 80111a2:	fb0c 3111 	mls	r1, ip, r1, r3
 80111a6:	b289      	uxth	r1, r1
 80111a8:	6842      	ldr	r2, [r0, #4]
 80111aa:	6804      	ldr	r4, [r0, #0]
 80111ac:	fbb2 f2fc 	udiv	r2, r2, ip
 80111b0:	fb01 f202 	mul.w	r2, r1, r2
 80111b4:	7b01      	ldrb	r1, [r0, #12]
 80111b6:	50a1      	str	r1, [r4, r2]
 80111b8:	3301      	adds	r3, #1
 80111ba:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80111be:	b29b      	uxth	r3, r3
 80111c0:	459c      	cmp	ip, r3
 80111c2:	d8ec      	bhi.n	801119e <uxr_init_output_reliable_stream+0x22>
 80111c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80111c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80111cc:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80111d0:	4905      	ldr	r1, [pc, #20]	@ (80111e8 <uxr_init_output_reliable_stream+0x6c>)
 80111d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111d6:	f8c0 100e 	str.w	r1, [r0, #14]
 80111da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80111de:	2300      	movs	r3, #0
 80111e0:	8242      	strh	r2, [r0, #18]
 80111e2:	8403      	strh	r3, [r0, #32]
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop
 80111e8:	ffff0000 	.word	0xffff0000

080111ec <uxr_reset_output_reliable_stream>:
 80111ec:	8901      	ldrh	r1, [r0, #8]
 80111ee:	b1b1      	cbz	r1, 801121e <uxr_reset_output_reliable_stream+0x32>
 80111f0:	f04f 0c00 	mov.w	ip, #0
 80111f4:	4663      	mov	r3, ip
 80111f6:	fbb3 f2f1 	udiv	r2, r3, r1
 80111fa:	fb01 3312 	mls	r3, r1, r2, r3
 80111fe:	b29b      	uxth	r3, r3
 8011200:	6842      	ldr	r2, [r0, #4]
 8011202:	fbb2 f2f1 	udiv	r2, r2, r1
 8011206:	6801      	ldr	r1, [r0, #0]
 8011208:	fb02 f303 	mul.w	r3, r2, r3
 801120c:	7b02      	ldrb	r2, [r0, #12]
 801120e:	50ca      	str	r2, [r1, r3]
 8011210:	f10c 0c01 	add.w	ip, ip, #1
 8011214:	8901      	ldrh	r1, [r0, #8]
 8011216:	fa1f f38c 	uxth.w	r3, ip
 801121a:	4299      	cmp	r1, r3
 801121c:	d8eb      	bhi.n	80111f6 <uxr_reset_output_reliable_stream+0xa>
 801121e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011222:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011226:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801122a:	4904      	ldr	r1, [pc, #16]	@ (801123c <uxr_reset_output_reliable_stream+0x50>)
 801122c:	f8c0 100e 	str.w	r1, [r0, #14]
 8011230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011234:	2300      	movs	r3, #0
 8011236:	8242      	strh	r2, [r0, #18]
 8011238:	8403      	strh	r3, [r0, #32]
 801123a:	4770      	bx	lr
 801123c:	ffff0000 	.word	0xffff0000

08011240 <uxr_prepare_reliable_buffer_to_write>:
 8011240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011244:	4604      	mov	r4, r0
 8011246:	b091      	sub	sp, #68	@ 0x44
 8011248:	8900      	ldrh	r0, [r0, #8]
 801124a:	89e6      	ldrh	r6, [r4, #14]
 801124c:	6823      	ldr	r3, [r4, #0]
 801124e:	9204      	str	r2, [sp, #16]
 8011250:	fbb6 f2f0 	udiv	r2, r6, r0
 8011254:	fb00 6212 	mls	r2, r0, r2, r6
 8011258:	b292      	uxth	r2, r2
 801125a:	6865      	ldr	r5, [r4, #4]
 801125c:	fbb5 f5f0 	udiv	r5, r5, r0
 8011260:	fb05 3202 	mla	r2, r5, r2, r3
 8011264:	3204      	adds	r2, #4
 8011266:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801126a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801126e:	9203      	str	r2, [sp, #12]
 8011270:	468b      	mov	fp, r1
 8011272:	1f2f      	subs	r7, r5, #4
 8011274:	2800      	cmp	r0, #0
 8011276:	f000 814c 	beq.w	8011512 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801127a:	f04f 0c00 	mov.w	ip, #0
 801127e:	46e2      	mov	sl, ip
 8011280:	4661      	mov	r1, ip
 8011282:	fbb1 f2f0 	udiv	r2, r1, r0
 8011286:	fb00 1212 	mls	r2, r0, r2, r1
 801128a:	b292      	uxth	r2, r2
 801128c:	fb05 f202 	mul.w	r2, r5, r2
 8011290:	f10c 0c01 	add.w	ip, ip, #1
 8011294:	589a      	ldr	r2, [r3, r2]
 8011296:	454a      	cmp	r2, r9
 8011298:	bf08      	it	eq
 801129a:	f10a 0a01 	addeq.w	sl, sl, #1
 801129e:	fa1f f18c 	uxth.w	r1, ip
 80112a2:	bf08      	it	eq
 80112a4:	fa1f fa8a 	uxtheq.w	sl, sl
 80112a8:	4281      	cmp	r1, r0
 80112aa:	d3ea      	bcc.n	8011282 <uxr_prepare_reliable_buffer_to_write+0x42>
 80112ac:	4640      	mov	r0, r8
 80112ae:	2104      	movs	r1, #4
 80112b0:	f8cd a014 	str.w	sl, [sp, #20]
 80112b4:	f7f8 fbf8 	bl	8009aa8 <ucdr_alignment>
 80112b8:	4480      	add	r8, r0
 80112ba:	eb08 020b 	add.w	r2, r8, fp
 80112be:	42ba      	cmp	r2, r7
 80112c0:	f240 80cd 	bls.w	801145e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80112c4:	7b22      	ldrb	r2, [r4, #12]
 80112c6:	445a      	add	r2, fp
 80112c8:	42ba      	cmp	r2, r7
 80112ca:	f240 80b5 	bls.w	8011438 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80112ce:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80112d2:	33fc      	adds	r3, #252	@ 0xfc
 80112d4:	b2ba      	uxth	r2, r7
 80112d6:	4413      	add	r3, r2
 80112d8:	b29b      	uxth	r3, r3
 80112da:	fb0a f903 	mul.w	r9, sl, r3
 80112de:	45d9      	cmp	r9, fp
 80112e0:	9305      	str	r3, [sp, #20]
 80112e2:	9306      	str	r3, [sp, #24]
 80112e4:	f0c0 80b7 	bcc.w	8011456 <uxr_prepare_reliable_buffer_to_write+0x216>
 80112e8:	f108 0304 	add.w	r3, r8, #4
 80112ec:	42bb      	cmp	r3, r7
 80112ee:	f080 80db 	bcs.w	80114a8 <uxr_prepare_reliable_buffer_to_write+0x268>
 80112f2:	f1a2 0904 	sub.w	r9, r2, #4
 80112f6:	eba9 0908 	sub.w	r9, r9, r8
 80112fa:	9b05      	ldr	r3, [sp, #20]
 80112fc:	fa1f f989 	uxth.w	r9, r9
 8011300:	ebab 0b09 	sub.w	fp, fp, r9
 8011304:	fbbb f2f3 	udiv	r2, fp, r3
 8011308:	fb03 b312 	mls	r3, r3, r2, fp
 801130c:	2b00      	cmp	r3, #0
 801130e:	f000 80c8 	beq.w	80114a2 <uxr_prepare_reliable_buffer_to_write+0x262>
 8011312:	3201      	adds	r2, #1
 8011314:	b292      	uxth	r2, r2
 8011316:	9306      	str	r3, [sp, #24]
 8011318:	4552      	cmp	r2, sl
 801131a:	f200 809c 	bhi.w	8011456 <uxr_prepare_reliable_buffer_to_write+0x216>
 801131e:	f10d 0b20 	add.w	fp, sp, #32
 8011322:	2a00      	cmp	r2, #0
 8011324:	d042      	beq.n	80113ac <uxr_prepare_reliable_buffer_to_write+0x16c>
 8011326:	f8cd 801c 	str.w	r8, [sp, #28]
 801132a:	f04f 0a00 	mov.w	sl, #0
 801132e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011332:	9505      	str	r5, [sp, #20]
 8011334:	f10d 0b20 	add.w	fp, sp, #32
 8011338:	4615      	mov	r5, r2
 801133a:	e000      	b.n	801133e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801133c:	46c1      	mov	r9, r8
 801133e:	8920      	ldrh	r0, [r4, #8]
 8011340:	fbb6 f2f0 	udiv	r2, r6, r0
 8011344:	fb00 6112 	mls	r1, r0, r2, r6
 8011348:	b28a      	uxth	r2, r1
 801134a:	6863      	ldr	r3, [r4, #4]
 801134c:	fbb3 f1f0 	udiv	r1, r3, r0
 8011350:	6823      	ldr	r3, [r4, #0]
 8011352:	fb02 f101 	mul.w	r1, r2, r1
 8011356:	3104      	adds	r1, #4
 8011358:	4419      	add	r1, r3
 801135a:	4658      	mov	r0, fp
 801135c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8011360:	9200      	str	r2, [sp, #0]
 8011362:	2300      	movs	r3, #0
 8011364:	463a      	mov	r2, r7
 8011366:	f7f8 fb89 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 801136a:	464a      	mov	r2, r9
 801136c:	2300      	movs	r3, #0
 801136e:	210d      	movs	r1, #13
 8011370:	4658      	mov	r0, fp
 8011372:	f7fd fdf9 	bl	800ef68 <uxr_buffer_submessage_header>
 8011376:	8921      	ldrh	r1, [r4, #8]
 8011378:	fbb6 f2f1 	udiv	r2, r6, r1
 801137c:	fb01 6212 	mls	r2, r1, r2, r6
 8011380:	b292      	uxth	r2, r2
 8011382:	6863      	ldr	r3, [r4, #4]
 8011384:	fbb3 f3f1 	udiv	r3, r3, r1
 8011388:	fb02 f303 	mul.w	r3, r2, r3
 801138c:	6822      	ldr	r2, [r4, #0]
 801138e:	4630      	mov	r0, r6
 8011390:	50d7      	str	r7, [r2, r3]
 8011392:	2101      	movs	r1, #1
 8011394:	f000 f99a 	bl	80116cc <uxr_seq_num_add>
 8011398:	f10a 0a01 	add.w	sl, sl, #1
 801139c:	fa1f f38a 	uxth.w	r3, sl
 80113a0:	429d      	cmp	r5, r3
 80113a2:	4606      	mov	r6, r0
 80113a4:	d8ca      	bhi.n	801133c <uxr_prepare_reliable_buffer_to_write+0xfc>
 80113a6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80113aa:	9d05      	ldr	r5, [sp, #20]
 80113ac:	8920      	ldrh	r0, [r4, #8]
 80113ae:	fbb6 f3f0 	udiv	r3, r6, r0
 80113b2:	fb00 6313 	mls	r3, r0, r3, r6
 80113b6:	b299      	uxth	r1, r3
 80113b8:	6863      	ldr	r3, [r4, #4]
 80113ba:	fbb3 f3f0 	udiv	r3, r3, r0
 80113be:	fb01 f303 	mul.w	r3, r1, r3
 80113c2:	6821      	ldr	r1, [r4, #0]
 80113c4:	3304      	adds	r3, #4
 80113c6:	4419      	add	r1, r3
 80113c8:	463a      	mov	r2, r7
 80113ca:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80113ce:	9000      	str	r0, [sp, #0]
 80113d0:	2300      	movs	r3, #0
 80113d2:	4658      	mov	r0, fp
 80113d4:	f7f8 fb52 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 80113d8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80113dc:	4658      	mov	r0, fp
 80113de:	fa1f f289 	uxth.w	r2, r9
 80113e2:	2302      	movs	r3, #2
 80113e4:	210d      	movs	r1, #13
 80113e6:	f7fd fdbf 	bl	800ef68 <uxr_buffer_submessage_header>
 80113ea:	9b03      	ldr	r3, [sp, #12]
 80113ec:	8927      	ldrh	r7, [r4, #8]
 80113ee:	7b20      	ldrb	r0, [r4, #12]
 80113f0:	f108 0104 	add.w	r1, r8, #4
 80113f4:	440b      	add	r3, r1
 80113f6:	4619      	mov	r1, r3
 80113f8:	fbb6 f3f7 	udiv	r3, r6, r7
 80113fc:	fb07 6313 	mls	r3, r7, r3, r6
 8011400:	f1a5 0208 	sub.w	r2, r5, #8
 8011404:	b29d      	uxth	r5, r3
 8011406:	3004      	adds	r0, #4
 8011408:	6863      	ldr	r3, [r4, #4]
 801140a:	fbb3 f3f7 	udiv	r3, r3, r7
 801140e:	fb05 f303 	mul.w	r3, r5, r3
 8011412:	6825      	ldr	r5, [r4, #0]
 8011414:	4448      	add	r0, r9
 8011416:	50e8      	str	r0, [r5, r3]
 8011418:	9d04      	ldr	r5, [sp, #16]
 801141a:	eba2 0208 	sub.w	r2, r2, r8
 801141e:	4628      	mov	r0, r5
 8011420:	f7f8 fb3e 	bl	8009aa0 <ucdr_init_buffer>
 8011424:	4628      	mov	r0, r5
 8011426:	493c      	ldr	r1, [pc, #240]	@ (8011518 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8011428:	4622      	mov	r2, r4
 801142a:	f7f8 fb0d 	bl	8009a48 <ucdr_set_on_full_buffer_callback>
 801142e:	2001      	movs	r0, #1
 8011430:	81e6      	strh	r6, [r4, #14]
 8011432:	b011      	add	sp, #68	@ 0x44
 8011434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011438:	2101      	movs	r1, #1
 801143a:	89e0      	ldrh	r0, [r4, #14]
 801143c:	f000 f946 	bl	80116cc <uxr_seq_num_add>
 8011440:	8921      	ldrh	r1, [r4, #8]
 8011442:	4605      	mov	r5, r0
 8011444:	8a60      	ldrh	r0, [r4, #18]
 8011446:	f000 f941 	bl	80116cc <uxr_seq_num_add>
 801144a:	4601      	mov	r1, r0
 801144c:	4628      	mov	r0, r5
 801144e:	f000 f945 	bl	80116dc <uxr_seq_num_cmp>
 8011452:	2800      	cmp	r0, #0
 8011454:	dd42      	ble.n	80114dc <uxr_prepare_reliable_buffer_to_write+0x29c>
 8011456:	2000      	movs	r0, #0
 8011458:	b011      	add	sp, #68	@ 0x44
 801145a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801145e:	8921      	ldrh	r1, [r4, #8]
 8011460:	8a60      	ldrh	r0, [r4, #18]
 8011462:	9205      	str	r2, [sp, #20]
 8011464:	f000 f932 	bl	80116cc <uxr_seq_num_add>
 8011468:	4601      	mov	r1, r0
 801146a:	4630      	mov	r0, r6
 801146c:	f000 f936 	bl	80116dc <uxr_seq_num_cmp>
 8011470:	2800      	cmp	r0, #0
 8011472:	9a05      	ldr	r2, [sp, #20]
 8011474:	dcef      	bgt.n	8011456 <uxr_prepare_reliable_buffer_to_write+0x216>
 8011476:	8927      	ldrh	r7, [r4, #8]
 8011478:	fbb6 f3f7 	udiv	r3, r6, r7
 801147c:	fb07 6313 	mls	r3, r7, r3, r6
 8011480:	b29d      	uxth	r5, r3
 8011482:	6863      	ldr	r3, [r4, #4]
 8011484:	6824      	ldr	r4, [r4, #0]
 8011486:	fbb3 f3f7 	udiv	r3, r3, r7
 801148a:	fb05 f303 	mul.w	r3, r5, r3
 801148e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8011492:	50e2      	str	r2, [r4, r3]
 8011494:	2300      	movs	r3, #0
 8011496:	f8cd 8000 	str.w	r8, [sp]
 801149a:	f7f8 faef 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 801149e:	2001      	movs	r0, #1
 80114a0:	e7da      	b.n	8011458 <uxr_prepare_reliable_buffer_to_write+0x218>
 80114a2:	b293      	uxth	r3, r2
 80114a4:	461a      	mov	r2, r3
 80114a6:	e737      	b.n	8011318 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80114a8:	4630      	mov	r0, r6
 80114aa:	2101      	movs	r1, #1
 80114ac:	9207      	str	r2, [sp, #28]
 80114ae:	f000 f90d 	bl	80116cc <uxr_seq_num_add>
 80114b2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80114b6:	fbb0 f1fc 	udiv	r1, r0, ip
 80114ba:	fb0c 0111 	mls	r1, ip, r1, r0
 80114be:	4606      	mov	r6, r0
 80114c0:	b288      	uxth	r0, r1
 80114c2:	6863      	ldr	r3, [r4, #4]
 80114c4:	fbb3 f1fc 	udiv	r1, r3, ip
 80114c8:	6823      	ldr	r3, [r4, #0]
 80114ca:	9a07      	ldr	r2, [sp, #28]
 80114cc:	fb00 f101 	mul.w	r1, r0, r1
 80114d0:	3104      	adds	r1, #4
 80114d2:	440b      	add	r3, r1
 80114d4:	9303      	str	r3, [sp, #12]
 80114d6:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80114da:	e70a      	b.n	80112f2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80114dc:	8921      	ldrh	r1, [r4, #8]
 80114de:	fbb5 f3f1 	udiv	r3, r5, r1
 80114e2:	fb01 5313 	mls	r3, r1, r3, r5
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	6863      	ldr	r3, [r4, #4]
 80114ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80114ee:	6821      	ldr	r1, [r4, #0]
 80114f0:	9804      	ldr	r0, [sp, #16]
 80114f2:	fb02 f303 	mul.w	r3, r2, r3
 80114f6:	3304      	adds	r3, #4
 80114f8:	7b22      	ldrb	r2, [r4, #12]
 80114fa:	4419      	add	r1, r3
 80114fc:	445a      	add	r2, fp
 80114fe:	f841 2c04 	str.w	r2, [r1, #-4]
 8011502:	7b23      	ldrb	r3, [r4, #12]
 8011504:	9300      	str	r3, [sp, #0]
 8011506:	2300      	movs	r3, #0
 8011508:	f7f8 fab8 	bl	8009a7c <ucdr_init_buffer_origin_offset>
 801150c:	81e5      	strh	r5, [r4, #14]
 801150e:	2001      	movs	r0, #1
 8011510:	e7a2      	b.n	8011458 <uxr_prepare_reliable_buffer_to_write+0x218>
 8011512:	4682      	mov	sl, r0
 8011514:	e6ca      	b.n	80112ac <uxr_prepare_reliable_buffer_to_write+0x6c>
 8011516:	bf00      	nop
 8011518:	08011121 	.word	0x08011121

0801151c <uxr_prepare_next_reliable_buffer_to_send>:
 801151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151e:	4604      	mov	r4, r0
 8011520:	460f      	mov	r7, r1
 8011522:	8a00      	ldrh	r0, [r0, #16]
 8011524:	2101      	movs	r1, #1
 8011526:	4616      	mov	r6, r2
 8011528:	461d      	mov	r5, r3
 801152a:	f000 f8cf 	bl	80116cc <uxr_seq_num_add>
 801152e:	8028      	strh	r0, [r5, #0]
 8011530:	8922      	ldrh	r2, [r4, #8]
 8011532:	fbb0 f3f2 	udiv	r3, r0, r2
 8011536:	fb02 0c13 	mls	ip, r2, r3, r0
 801153a:	fa1f fc8c 	uxth.w	ip, ip
 801153e:	6863      	ldr	r3, [r4, #4]
 8011540:	fbb3 f3f2 	udiv	r3, r3, r2
 8011544:	fb0c fc03 	mul.w	ip, ip, r3
 8011548:	6823      	ldr	r3, [r4, #0]
 801154a:	89e1      	ldrh	r1, [r4, #14]
 801154c:	f10c 0c04 	add.w	ip, ip, #4
 8011550:	4463      	add	r3, ip
 8011552:	603b      	str	r3, [r7, #0]
 8011554:	6823      	ldr	r3, [r4, #0]
 8011556:	449c      	add	ip, r3
 8011558:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801155c:	6033      	str	r3, [r6, #0]
 801155e:	f000 f8bd 	bl	80116dc <uxr_seq_num_cmp>
 8011562:	2800      	cmp	r0, #0
 8011564:	dd01      	ble.n	801156a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8011566:	2000      	movs	r0, #0
 8011568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801156a:	7b23      	ldrb	r3, [r4, #12]
 801156c:	6832      	ldr	r2, [r6, #0]
 801156e:	429a      	cmp	r2, r3
 8011570:	d9f9      	bls.n	8011566 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011572:	8a61      	ldrh	r1, [r4, #18]
 8011574:	8a20      	ldrh	r0, [r4, #16]
 8011576:	f000 f8ad 	bl	80116d4 <uxr_seq_num_sub>
 801157a:	8923      	ldrh	r3, [r4, #8]
 801157c:	4283      	cmp	r3, r0
 801157e:	d0f2      	beq.n	8011566 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011580:	8828      	ldrh	r0, [r5, #0]
 8011582:	89e3      	ldrh	r3, [r4, #14]
 8011584:	8220      	strh	r0, [r4, #16]
 8011586:	4298      	cmp	r0, r3
 8011588:	d001      	beq.n	801158e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801158a:	2001      	movs	r0, #1
 801158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801158e:	2101      	movs	r1, #1
 8011590:	f000 f89c 	bl	80116cc <uxr_seq_num_add>
 8011594:	81e0      	strh	r0, [r4, #14]
 8011596:	2001      	movs	r0, #1
 8011598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801159a:	bf00      	nop

0801159c <uxr_update_output_stream_heartbeat_timestamp>:
 801159c:	b570      	push	{r4, r5, r6, lr}
 801159e:	8a01      	ldrh	r1, [r0, #16]
 80115a0:	4604      	mov	r4, r0
 80115a2:	8a40      	ldrh	r0, [r0, #18]
 80115a4:	4615      	mov	r5, r2
 80115a6:	461e      	mov	r6, r3
 80115a8:	f000 f898 	bl	80116dc <uxr_seq_num_cmp>
 80115ac:	2800      	cmp	r0, #0
 80115ae:	db07      	blt.n	80115c0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80115b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80115b4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80115b8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80115bc:	2000      	movs	r0, #0
 80115be:	bd70      	pop	{r4, r5, r6, pc}
 80115c0:	f894 0020 	ldrb.w	r0, [r4, #32]
 80115c4:	b940      	cbnz	r0, 80115d8 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80115c6:	2301      	movs	r3, #1
 80115c8:	f884 3020 	strb.w	r3, [r4, #32]
 80115cc:	3564      	adds	r5, #100	@ 0x64
 80115ce:	f146 0600 	adc.w	r6, r6, #0
 80115d2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80115d6:	bd70      	pop	{r4, r5, r6, pc}
 80115d8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80115dc:	4295      	cmp	r5, r2
 80115de:	eb76 0303 	sbcs.w	r3, r6, r3
 80115e2:	bfa5      	ittet	ge
 80115e4:	3001      	addge	r0, #1
 80115e6:	f884 0020 	strbge.w	r0, [r4, #32]
 80115ea:	2000      	movlt	r0, #0
 80115ec:	2001      	movge	r0, #1
 80115ee:	e7ed      	b.n	80115cc <uxr_update_output_stream_heartbeat_timestamp+0x30>

080115f0 <uxr_begin_output_nack_buffer_it>:
 80115f0:	8a40      	ldrh	r0, [r0, #18]
 80115f2:	4770      	bx	lr

080115f4 <uxr_next_reliable_nack_buffer_to_send>:
 80115f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115f8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80115fc:	b082      	sub	sp, #8
 80115fe:	f1b8 0f00 	cmp.w	r8, #0
 8011602:	d011      	beq.n	8011628 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8011604:	4604      	mov	r4, r0
 8011606:	8818      	ldrh	r0, [r3, #0]
 8011608:	460e      	mov	r6, r1
 801160a:	4617      	mov	r7, r2
 801160c:	461d      	mov	r5, r3
 801160e:	2101      	movs	r1, #1
 8011610:	f000 f85c 	bl	80116cc <uxr_seq_num_add>
 8011614:	8028      	strh	r0, [r5, #0]
 8011616:	8a21      	ldrh	r1, [r4, #16]
 8011618:	f000 f860 	bl	80116dc <uxr_seq_num_cmp>
 801161c:	2800      	cmp	r0, #0
 801161e:	dd07      	ble.n	8011630 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8011620:	f04f 0800 	mov.w	r8, #0
 8011624:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8011628:	4640      	mov	r0, r8
 801162a:	b002      	add	sp, #8
 801162c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011630:	8921      	ldrh	r1, [r4, #8]
 8011632:	8828      	ldrh	r0, [r5, #0]
 8011634:	6823      	ldr	r3, [r4, #0]
 8011636:	fbb0 f2f1 	udiv	r2, r0, r1
 801163a:	fb01 0c12 	mls	ip, r1, r2, r0
 801163e:	fa1f f28c 	uxth.w	r2, ip
 8011642:	9301      	str	r3, [sp, #4]
 8011644:	6863      	ldr	r3, [r4, #4]
 8011646:	fbb3 fcf1 	udiv	ip, r3, r1
 801164a:	9b01      	ldr	r3, [sp, #4]
 801164c:	fb02 fc0c 	mul.w	ip, r2, ip
 8011650:	f10c 0c04 	add.w	ip, ip, #4
 8011654:	4463      	add	r3, ip
 8011656:	6033      	str	r3, [r6, #0]
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	4463      	add	r3, ip
 801165c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011660:	603b      	str	r3, [r7, #0]
 8011662:	7b22      	ldrb	r2, [r4, #12]
 8011664:	429a      	cmp	r2, r3
 8011666:	d0d2      	beq.n	801160e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8011668:	4640      	mov	r0, r8
 801166a:	b002      	add	sp, #8
 801166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011670 <uxr_process_acknack>:
 8011670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011672:	4604      	mov	r4, r0
 8011674:	460e      	mov	r6, r1
 8011676:	4610      	mov	r0, r2
 8011678:	2101      	movs	r1, #1
 801167a:	f000 f82b 	bl	80116d4 <uxr_seq_num_sub>
 801167e:	8a61      	ldrh	r1, [r4, #18]
 8011680:	f000 f828 	bl	80116d4 <uxr_seq_num_sub>
 8011684:	b1c0      	cbz	r0, 80116b8 <uxr_process_acknack+0x48>
 8011686:	4605      	mov	r5, r0
 8011688:	2700      	movs	r7, #0
 801168a:	2101      	movs	r1, #1
 801168c:	8a60      	ldrh	r0, [r4, #18]
 801168e:	f000 f81d 	bl	80116cc <uxr_seq_num_add>
 8011692:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011696:	fbb0 f1fc 	udiv	r1, r0, ip
 801169a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801169e:	fb0c 0111 	mls	r1, ip, r1, r0
 80116a2:	b289      	uxth	r1, r1
 80116a4:	3701      	adds	r7, #1
 80116a6:	fbb3 f3fc 	udiv	r3, r3, ip
 80116aa:	fb01 f303 	mul.w	r3, r1, r3
 80116ae:	42bd      	cmp	r5, r7
 80116b0:	7b21      	ldrb	r1, [r4, #12]
 80116b2:	8260      	strh	r0, [r4, #18]
 80116b4:	50d1      	str	r1, [r2, r3]
 80116b6:	d1e8      	bne.n	801168a <uxr_process_acknack+0x1a>
 80116b8:	3e00      	subs	r6, #0
 80116ba:	f04f 0300 	mov.w	r3, #0
 80116be:	bf18      	it	ne
 80116c0:	2601      	movne	r6, #1
 80116c2:	f884 3020 	strb.w	r3, [r4, #32]
 80116c6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80116ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080116cc <uxr_seq_num_add>:
 80116cc:	4408      	add	r0, r1
 80116ce:	b280      	uxth	r0, r0
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop

080116d4 <uxr_seq_num_sub>:
 80116d4:	1a40      	subs	r0, r0, r1
 80116d6:	b280      	uxth	r0, r0
 80116d8:	4770      	bx	lr
 80116da:	bf00      	nop

080116dc <uxr_seq_num_cmp>:
 80116dc:	4288      	cmp	r0, r1
 80116de:	d011      	beq.n	8011704 <uxr_seq_num_cmp+0x28>
 80116e0:	d309      	bcc.n	80116f6 <uxr_seq_num_cmp+0x1a>
 80116e2:	4288      	cmp	r0, r1
 80116e4:	d910      	bls.n	8011708 <uxr_seq_num_cmp+0x2c>
 80116e6:	1a40      	subs	r0, r0, r1
 80116e8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80116ec:	bfd4      	ite	le
 80116ee:	2001      	movle	r0, #1
 80116f0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80116f4:	4770      	bx	lr
 80116f6:	1a0b      	subs	r3, r1, r0
 80116f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80116fc:	daf1      	bge.n	80116e2 <uxr_seq_num_cmp+0x6>
 80116fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011702:	4770      	bx	lr
 8011704:	2000      	movs	r0, #0
 8011706:	4770      	bx	lr
 8011708:	2001      	movs	r0, #1
 801170a:	4770      	bx	lr

0801170c <calloc>:
 801170c:	4b02      	ldr	r3, [pc, #8]	@ (8011718 <calloc+0xc>)
 801170e:	460a      	mov	r2, r1
 8011710:	4601      	mov	r1, r0
 8011712:	6818      	ldr	r0, [r3, #0]
 8011714:	f000 b802 	b.w	801171c <_calloc_r>
 8011718:	200001e4 	.word	0x200001e4

0801171c <_calloc_r>:
 801171c:	b570      	push	{r4, r5, r6, lr}
 801171e:	fba1 5402 	umull	r5, r4, r1, r2
 8011722:	b93c      	cbnz	r4, 8011734 <_calloc_r+0x18>
 8011724:	4629      	mov	r1, r5
 8011726:	f000 f887 	bl	8011838 <_malloc_r>
 801172a:	4606      	mov	r6, r0
 801172c:	b928      	cbnz	r0, 801173a <_calloc_r+0x1e>
 801172e:	2600      	movs	r6, #0
 8011730:	4630      	mov	r0, r6
 8011732:	bd70      	pop	{r4, r5, r6, pc}
 8011734:	220c      	movs	r2, #12
 8011736:	6002      	str	r2, [r0, #0]
 8011738:	e7f9      	b.n	801172e <_calloc_r+0x12>
 801173a:	462a      	mov	r2, r5
 801173c:	4621      	mov	r1, r4
 801173e:	f000 fbbf 	bl	8011ec0 <memset>
 8011742:	e7f5      	b.n	8011730 <_calloc_r+0x14>

08011744 <getenv>:
 8011744:	b507      	push	{r0, r1, r2, lr}
 8011746:	4b04      	ldr	r3, [pc, #16]	@ (8011758 <getenv+0x14>)
 8011748:	4601      	mov	r1, r0
 801174a:	aa01      	add	r2, sp, #4
 801174c:	6818      	ldr	r0, [r3, #0]
 801174e:	f000 f805 	bl	801175c <_findenv_r>
 8011752:	b003      	add	sp, #12
 8011754:	f85d fb04 	ldr.w	pc, [sp], #4
 8011758:	200001e4 	.word	0x200001e4

0801175c <_findenv_r>:
 801175c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011760:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80117d0 <_findenv_r+0x74>
 8011764:	4606      	mov	r6, r0
 8011766:	4689      	mov	r9, r1
 8011768:	4617      	mov	r7, r2
 801176a:	f000 fc9f 	bl	80120ac <__env_lock>
 801176e:	f8da 4000 	ldr.w	r4, [sl]
 8011772:	b134      	cbz	r4, 8011782 <_findenv_r+0x26>
 8011774:	464b      	mov	r3, r9
 8011776:	4698      	mov	r8, r3
 8011778:	f813 2b01 	ldrb.w	r2, [r3], #1
 801177c:	b13a      	cbz	r2, 801178e <_findenv_r+0x32>
 801177e:	2a3d      	cmp	r2, #61	@ 0x3d
 8011780:	d1f9      	bne.n	8011776 <_findenv_r+0x1a>
 8011782:	4630      	mov	r0, r6
 8011784:	f000 fc98 	bl	80120b8 <__env_unlock>
 8011788:	2000      	movs	r0, #0
 801178a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178e:	eba8 0809 	sub.w	r8, r8, r9
 8011792:	46a3      	mov	fp, r4
 8011794:	f854 0b04 	ldr.w	r0, [r4], #4
 8011798:	2800      	cmp	r0, #0
 801179a:	d0f2      	beq.n	8011782 <_findenv_r+0x26>
 801179c:	4642      	mov	r2, r8
 801179e:	4649      	mov	r1, r9
 80117a0:	f000 fba3 	bl	8011eea <strncmp>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	d1f4      	bne.n	8011792 <_findenv_r+0x36>
 80117a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80117ac:	eb03 0508 	add.w	r5, r3, r8
 80117b0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80117b4:	2b3d      	cmp	r3, #61	@ 0x3d
 80117b6:	d1ec      	bne.n	8011792 <_findenv_r+0x36>
 80117b8:	f8da 3000 	ldr.w	r3, [sl]
 80117bc:	ebab 0303 	sub.w	r3, fp, r3
 80117c0:	109b      	asrs	r3, r3, #2
 80117c2:	4630      	mov	r0, r6
 80117c4:	603b      	str	r3, [r7, #0]
 80117c6:	f000 fc77 	bl	80120b8 <__env_unlock>
 80117ca:	1c68      	adds	r0, r5, #1
 80117cc:	e7dd      	b.n	801178a <_findenv_r+0x2e>
 80117ce:	bf00      	nop
 80117d0:	20000000 	.word	0x20000000

080117d4 <malloc>:
 80117d4:	4b02      	ldr	r3, [pc, #8]	@ (80117e0 <malloc+0xc>)
 80117d6:	4601      	mov	r1, r0
 80117d8:	6818      	ldr	r0, [r3, #0]
 80117da:	f000 b82d 	b.w	8011838 <_malloc_r>
 80117de:	bf00      	nop
 80117e0:	200001e4 	.word	0x200001e4

080117e4 <free>:
 80117e4:	4b02      	ldr	r3, [pc, #8]	@ (80117f0 <free+0xc>)
 80117e6:	4601      	mov	r1, r0
 80117e8:	6818      	ldr	r0, [r3, #0]
 80117ea:	f000 bc6b 	b.w	80120c4 <_free_r>
 80117ee:	bf00      	nop
 80117f0:	200001e4 	.word	0x200001e4

080117f4 <sbrk_aligned>:
 80117f4:	b570      	push	{r4, r5, r6, lr}
 80117f6:	4e0f      	ldr	r6, [pc, #60]	@ (8011834 <sbrk_aligned+0x40>)
 80117f8:	460c      	mov	r4, r1
 80117fa:	6831      	ldr	r1, [r6, #0]
 80117fc:	4605      	mov	r5, r0
 80117fe:	b911      	cbnz	r1, 8011806 <sbrk_aligned+0x12>
 8011800:	f000 fbd0 	bl	8011fa4 <_sbrk_r>
 8011804:	6030      	str	r0, [r6, #0]
 8011806:	4621      	mov	r1, r4
 8011808:	4628      	mov	r0, r5
 801180a:	f000 fbcb 	bl	8011fa4 <_sbrk_r>
 801180e:	1c43      	adds	r3, r0, #1
 8011810:	d103      	bne.n	801181a <sbrk_aligned+0x26>
 8011812:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011816:	4620      	mov	r0, r4
 8011818:	bd70      	pop	{r4, r5, r6, pc}
 801181a:	1cc4      	adds	r4, r0, #3
 801181c:	f024 0403 	bic.w	r4, r4, #3
 8011820:	42a0      	cmp	r0, r4
 8011822:	d0f8      	beq.n	8011816 <sbrk_aligned+0x22>
 8011824:	1a21      	subs	r1, r4, r0
 8011826:	4628      	mov	r0, r5
 8011828:	f000 fbbc 	bl	8011fa4 <_sbrk_r>
 801182c:	3001      	adds	r0, #1
 801182e:	d1f2      	bne.n	8011816 <sbrk_aligned+0x22>
 8011830:	e7ef      	b.n	8011812 <sbrk_aligned+0x1e>
 8011832:	bf00      	nop
 8011834:	2000dc54 	.word	0x2000dc54

08011838 <_malloc_r>:
 8011838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801183c:	1ccd      	adds	r5, r1, #3
 801183e:	f025 0503 	bic.w	r5, r5, #3
 8011842:	3508      	adds	r5, #8
 8011844:	2d0c      	cmp	r5, #12
 8011846:	bf38      	it	cc
 8011848:	250c      	movcc	r5, #12
 801184a:	2d00      	cmp	r5, #0
 801184c:	4606      	mov	r6, r0
 801184e:	db01      	blt.n	8011854 <_malloc_r+0x1c>
 8011850:	42a9      	cmp	r1, r5
 8011852:	d904      	bls.n	801185e <_malloc_r+0x26>
 8011854:	230c      	movs	r3, #12
 8011856:	6033      	str	r3, [r6, #0]
 8011858:	2000      	movs	r0, #0
 801185a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801185e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011934 <_malloc_r+0xfc>
 8011862:	f000 f869 	bl	8011938 <__malloc_lock>
 8011866:	f8d8 3000 	ldr.w	r3, [r8]
 801186a:	461c      	mov	r4, r3
 801186c:	bb44      	cbnz	r4, 80118c0 <_malloc_r+0x88>
 801186e:	4629      	mov	r1, r5
 8011870:	4630      	mov	r0, r6
 8011872:	f7ff ffbf 	bl	80117f4 <sbrk_aligned>
 8011876:	1c43      	adds	r3, r0, #1
 8011878:	4604      	mov	r4, r0
 801187a:	d158      	bne.n	801192e <_malloc_r+0xf6>
 801187c:	f8d8 4000 	ldr.w	r4, [r8]
 8011880:	4627      	mov	r7, r4
 8011882:	2f00      	cmp	r7, #0
 8011884:	d143      	bne.n	801190e <_malloc_r+0xd6>
 8011886:	2c00      	cmp	r4, #0
 8011888:	d04b      	beq.n	8011922 <_malloc_r+0xea>
 801188a:	6823      	ldr	r3, [r4, #0]
 801188c:	4639      	mov	r1, r7
 801188e:	4630      	mov	r0, r6
 8011890:	eb04 0903 	add.w	r9, r4, r3
 8011894:	f000 fb86 	bl	8011fa4 <_sbrk_r>
 8011898:	4581      	cmp	r9, r0
 801189a:	d142      	bne.n	8011922 <_malloc_r+0xea>
 801189c:	6821      	ldr	r1, [r4, #0]
 801189e:	1a6d      	subs	r5, r5, r1
 80118a0:	4629      	mov	r1, r5
 80118a2:	4630      	mov	r0, r6
 80118a4:	f7ff ffa6 	bl	80117f4 <sbrk_aligned>
 80118a8:	3001      	adds	r0, #1
 80118aa:	d03a      	beq.n	8011922 <_malloc_r+0xea>
 80118ac:	6823      	ldr	r3, [r4, #0]
 80118ae:	442b      	add	r3, r5
 80118b0:	6023      	str	r3, [r4, #0]
 80118b2:	f8d8 3000 	ldr.w	r3, [r8]
 80118b6:	685a      	ldr	r2, [r3, #4]
 80118b8:	bb62      	cbnz	r2, 8011914 <_malloc_r+0xdc>
 80118ba:	f8c8 7000 	str.w	r7, [r8]
 80118be:	e00f      	b.n	80118e0 <_malloc_r+0xa8>
 80118c0:	6822      	ldr	r2, [r4, #0]
 80118c2:	1b52      	subs	r2, r2, r5
 80118c4:	d420      	bmi.n	8011908 <_malloc_r+0xd0>
 80118c6:	2a0b      	cmp	r2, #11
 80118c8:	d917      	bls.n	80118fa <_malloc_r+0xc2>
 80118ca:	1961      	adds	r1, r4, r5
 80118cc:	42a3      	cmp	r3, r4
 80118ce:	6025      	str	r5, [r4, #0]
 80118d0:	bf18      	it	ne
 80118d2:	6059      	strne	r1, [r3, #4]
 80118d4:	6863      	ldr	r3, [r4, #4]
 80118d6:	bf08      	it	eq
 80118d8:	f8c8 1000 	streq.w	r1, [r8]
 80118dc:	5162      	str	r2, [r4, r5]
 80118de:	604b      	str	r3, [r1, #4]
 80118e0:	4630      	mov	r0, r6
 80118e2:	f000 f82f 	bl	8011944 <__malloc_unlock>
 80118e6:	f104 000b 	add.w	r0, r4, #11
 80118ea:	1d23      	adds	r3, r4, #4
 80118ec:	f020 0007 	bic.w	r0, r0, #7
 80118f0:	1ac2      	subs	r2, r0, r3
 80118f2:	bf1c      	itt	ne
 80118f4:	1a1b      	subne	r3, r3, r0
 80118f6:	50a3      	strne	r3, [r4, r2]
 80118f8:	e7af      	b.n	801185a <_malloc_r+0x22>
 80118fa:	6862      	ldr	r2, [r4, #4]
 80118fc:	42a3      	cmp	r3, r4
 80118fe:	bf0c      	ite	eq
 8011900:	f8c8 2000 	streq.w	r2, [r8]
 8011904:	605a      	strne	r2, [r3, #4]
 8011906:	e7eb      	b.n	80118e0 <_malloc_r+0xa8>
 8011908:	4623      	mov	r3, r4
 801190a:	6864      	ldr	r4, [r4, #4]
 801190c:	e7ae      	b.n	801186c <_malloc_r+0x34>
 801190e:	463c      	mov	r4, r7
 8011910:	687f      	ldr	r7, [r7, #4]
 8011912:	e7b6      	b.n	8011882 <_malloc_r+0x4a>
 8011914:	461a      	mov	r2, r3
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	42a3      	cmp	r3, r4
 801191a:	d1fb      	bne.n	8011914 <_malloc_r+0xdc>
 801191c:	2300      	movs	r3, #0
 801191e:	6053      	str	r3, [r2, #4]
 8011920:	e7de      	b.n	80118e0 <_malloc_r+0xa8>
 8011922:	230c      	movs	r3, #12
 8011924:	6033      	str	r3, [r6, #0]
 8011926:	4630      	mov	r0, r6
 8011928:	f000 f80c 	bl	8011944 <__malloc_unlock>
 801192c:	e794      	b.n	8011858 <_malloc_r+0x20>
 801192e:	6005      	str	r5, [r0, #0]
 8011930:	e7d6      	b.n	80118e0 <_malloc_r+0xa8>
 8011932:	bf00      	nop
 8011934:	2000dc58 	.word	0x2000dc58

08011938 <__malloc_lock>:
 8011938:	4801      	ldr	r0, [pc, #4]	@ (8011940 <__malloc_lock+0x8>)
 801193a:	f000 bb80 	b.w	801203e <__retarget_lock_acquire_recursive>
 801193e:	bf00      	nop
 8011940:	2000dd9d 	.word	0x2000dd9d

08011944 <__malloc_unlock>:
 8011944:	4801      	ldr	r0, [pc, #4]	@ (801194c <__malloc_unlock+0x8>)
 8011946:	f000 bb7b 	b.w	8012040 <__retarget_lock_release_recursive>
 801194a:	bf00      	nop
 801194c:	2000dd9d 	.word	0x2000dd9d

08011950 <srand>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4b10      	ldr	r3, [pc, #64]	@ (8011994 <srand+0x44>)
 8011954:	681d      	ldr	r5, [r3, #0]
 8011956:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011958:	4604      	mov	r4, r0
 801195a:	b9b3      	cbnz	r3, 801198a <srand+0x3a>
 801195c:	2018      	movs	r0, #24
 801195e:	f7ff ff39 	bl	80117d4 <malloc>
 8011962:	4602      	mov	r2, r0
 8011964:	6328      	str	r0, [r5, #48]	@ 0x30
 8011966:	b920      	cbnz	r0, 8011972 <srand+0x22>
 8011968:	4b0b      	ldr	r3, [pc, #44]	@ (8011998 <srand+0x48>)
 801196a:	480c      	ldr	r0, [pc, #48]	@ (801199c <srand+0x4c>)
 801196c:	2146      	movs	r1, #70	@ 0x46
 801196e:	f000 fb7f 	bl	8012070 <__assert_func>
 8011972:	490b      	ldr	r1, [pc, #44]	@ (80119a0 <srand+0x50>)
 8011974:	4b0b      	ldr	r3, [pc, #44]	@ (80119a4 <srand+0x54>)
 8011976:	e9c0 1300 	strd	r1, r3, [r0]
 801197a:	4b0b      	ldr	r3, [pc, #44]	@ (80119a8 <srand+0x58>)
 801197c:	6083      	str	r3, [r0, #8]
 801197e:	230b      	movs	r3, #11
 8011980:	8183      	strh	r3, [r0, #12]
 8011982:	2100      	movs	r1, #0
 8011984:	2001      	movs	r0, #1
 8011986:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801198a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801198c:	2200      	movs	r2, #0
 801198e:	611c      	str	r4, [r3, #16]
 8011990:	615a      	str	r2, [r3, #20]
 8011992:	bd38      	pop	{r3, r4, r5, pc}
 8011994:	200001e4 	.word	0x200001e4
 8011998:	0801390c 	.word	0x0801390c
 801199c:	08013923 	.word	0x08013923
 80119a0:	abcd330e 	.word	0xabcd330e
 80119a4:	e66d1234 	.word	0xe66d1234
 80119a8:	0005deec 	.word	0x0005deec

080119ac <rand>:
 80119ac:	4b16      	ldr	r3, [pc, #88]	@ (8011a08 <rand+0x5c>)
 80119ae:	b510      	push	{r4, lr}
 80119b0:	681c      	ldr	r4, [r3, #0]
 80119b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119b4:	b9b3      	cbnz	r3, 80119e4 <rand+0x38>
 80119b6:	2018      	movs	r0, #24
 80119b8:	f7ff ff0c 	bl	80117d4 <malloc>
 80119bc:	4602      	mov	r2, r0
 80119be:	6320      	str	r0, [r4, #48]	@ 0x30
 80119c0:	b920      	cbnz	r0, 80119cc <rand+0x20>
 80119c2:	4b12      	ldr	r3, [pc, #72]	@ (8011a0c <rand+0x60>)
 80119c4:	4812      	ldr	r0, [pc, #72]	@ (8011a10 <rand+0x64>)
 80119c6:	2152      	movs	r1, #82	@ 0x52
 80119c8:	f000 fb52 	bl	8012070 <__assert_func>
 80119cc:	4911      	ldr	r1, [pc, #68]	@ (8011a14 <rand+0x68>)
 80119ce:	4b12      	ldr	r3, [pc, #72]	@ (8011a18 <rand+0x6c>)
 80119d0:	e9c0 1300 	strd	r1, r3, [r0]
 80119d4:	4b11      	ldr	r3, [pc, #68]	@ (8011a1c <rand+0x70>)
 80119d6:	6083      	str	r3, [r0, #8]
 80119d8:	230b      	movs	r3, #11
 80119da:	8183      	strh	r3, [r0, #12]
 80119dc:	2100      	movs	r1, #0
 80119de:	2001      	movs	r0, #1
 80119e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80119e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80119e6:	480e      	ldr	r0, [pc, #56]	@ (8011a20 <rand+0x74>)
 80119e8:	690b      	ldr	r3, [r1, #16]
 80119ea:	694c      	ldr	r4, [r1, #20]
 80119ec:	4a0d      	ldr	r2, [pc, #52]	@ (8011a24 <rand+0x78>)
 80119ee:	4358      	muls	r0, r3
 80119f0:	fb02 0004 	mla	r0, r2, r4, r0
 80119f4:	fba3 3202 	umull	r3, r2, r3, r2
 80119f8:	3301      	adds	r3, #1
 80119fa:	eb40 0002 	adc.w	r0, r0, r2
 80119fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011a02:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011a06:	bd10      	pop	{r4, pc}
 8011a08:	200001e4 	.word	0x200001e4
 8011a0c:	0801390c 	.word	0x0801390c
 8011a10:	08013923 	.word	0x08013923
 8011a14:	abcd330e 	.word	0xabcd330e
 8011a18:	e66d1234 	.word	0xe66d1234
 8011a1c:	0005deec 	.word	0x0005deec
 8011a20:	5851f42d 	.word	0x5851f42d
 8011a24:	4c957f2d 	.word	0x4c957f2d

08011a28 <realloc>:
 8011a28:	4b02      	ldr	r3, [pc, #8]	@ (8011a34 <realloc+0xc>)
 8011a2a:	460a      	mov	r2, r1
 8011a2c:	4601      	mov	r1, r0
 8011a2e:	6818      	ldr	r0, [r3, #0]
 8011a30:	f000 b802 	b.w	8011a38 <_realloc_r>
 8011a34:	200001e4 	.word	0x200001e4

08011a38 <_realloc_r>:
 8011a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a3c:	4680      	mov	r8, r0
 8011a3e:	4615      	mov	r5, r2
 8011a40:	460c      	mov	r4, r1
 8011a42:	b921      	cbnz	r1, 8011a4e <_realloc_r+0x16>
 8011a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a48:	4611      	mov	r1, r2
 8011a4a:	f7ff bef5 	b.w	8011838 <_malloc_r>
 8011a4e:	b92a      	cbnz	r2, 8011a5c <_realloc_r+0x24>
 8011a50:	f000 fb38 	bl	80120c4 <_free_r>
 8011a54:	2400      	movs	r4, #0
 8011a56:	4620      	mov	r0, r4
 8011a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a5c:	f000 fb7c 	bl	8012158 <_malloc_usable_size_r>
 8011a60:	4285      	cmp	r5, r0
 8011a62:	4606      	mov	r6, r0
 8011a64:	d802      	bhi.n	8011a6c <_realloc_r+0x34>
 8011a66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011a6a:	d8f4      	bhi.n	8011a56 <_realloc_r+0x1e>
 8011a6c:	4629      	mov	r1, r5
 8011a6e:	4640      	mov	r0, r8
 8011a70:	f7ff fee2 	bl	8011838 <_malloc_r>
 8011a74:	4607      	mov	r7, r0
 8011a76:	2800      	cmp	r0, #0
 8011a78:	d0ec      	beq.n	8011a54 <_realloc_r+0x1c>
 8011a7a:	42b5      	cmp	r5, r6
 8011a7c:	462a      	mov	r2, r5
 8011a7e:	4621      	mov	r1, r4
 8011a80:	bf28      	it	cs
 8011a82:	4632      	movcs	r2, r6
 8011a84:	f000 fae5 	bl	8012052 <memcpy>
 8011a88:	4621      	mov	r1, r4
 8011a8a:	4640      	mov	r0, r8
 8011a8c:	f000 fb1a 	bl	80120c4 <_free_r>
 8011a90:	463c      	mov	r4, r7
 8011a92:	e7e0      	b.n	8011a56 <_realloc_r+0x1e>

08011a94 <_strtoul_l.constprop.0>:
 8011a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a98:	4e34      	ldr	r6, [pc, #208]	@ (8011b6c <_strtoul_l.constprop.0+0xd8>)
 8011a9a:	4686      	mov	lr, r0
 8011a9c:	460d      	mov	r5, r1
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011aa4:	5d37      	ldrb	r7, [r6, r4]
 8011aa6:	f017 0708 	ands.w	r7, r7, #8
 8011aaa:	d1f8      	bne.n	8011a9e <_strtoul_l.constprop.0+0xa>
 8011aac:	2c2d      	cmp	r4, #45	@ 0x2d
 8011aae:	d12f      	bne.n	8011b10 <_strtoul_l.constprop.0+0x7c>
 8011ab0:	782c      	ldrb	r4, [r5, #0]
 8011ab2:	2701      	movs	r7, #1
 8011ab4:	1c85      	adds	r5, r0, #2
 8011ab6:	f033 0010 	bics.w	r0, r3, #16
 8011aba:	d109      	bne.n	8011ad0 <_strtoul_l.constprop.0+0x3c>
 8011abc:	2c30      	cmp	r4, #48	@ 0x30
 8011abe:	d12c      	bne.n	8011b1a <_strtoul_l.constprop.0+0x86>
 8011ac0:	7828      	ldrb	r0, [r5, #0]
 8011ac2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011ac6:	2858      	cmp	r0, #88	@ 0x58
 8011ac8:	d127      	bne.n	8011b1a <_strtoul_l.constprop.0+0x86>
 8011aca:	786c      	ldrb	r4, [r5, #1]
 8011acc:	2310      	movs	r3, #16
 8011ace:	3502      	adds	r5, #2
 8011ad0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011ad4:	2600      	movs	r6, #0
 8011ad6:	fbb8 f8f3 	udiv	r8, r8, r3
 8011ada:	fb03 f908 	mul.w	r9, r3, r8
 8011ade:	ea6f 0909 	mvn.w	r9, r9
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011ae8:	f1bc 0f09 	cmp.w	ip, #9
 8011aec:	d81c      	bhi.n	8011b28 <_strtoul_l.constprop.0+0x94>
 8011aee:	4664      	mov	r4, ip
 8011af0:	42a3      	cmp	r3, r4
 8011af2:	dd2a      	ble.n	8011b4a <_strtoul_l.constprop.0+0xb6>
 8011af4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8011af8:	d007      	beq.n	8011b0a <_strtoul_l.constprop.0+0x76>
 8011afa:	4580      	cmp	r8, r0
 8011afc:	d322      	bcc.n	8011b44 <_strtoul_l.constprop.0+0xb0>
 8011afe:	d101      	bne.n	8011b04 <_strtoul_l.constprop.0+0x70>
 8011b00:	45a1      	cmp	r9, r4
 8011b02:	db1f      	blt.n	8011b44 <_strtoul_l.constprop.0+0xb0>
 8011b04:	fb00 4003 	mla	r0, r0, r3, r4
 8011b08:	2601      	movs	r6, #1
 8011b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b0e:	e7e9      	b.n	8011ae4 <_strtoul_l.constprop.0+0x50>
 8011b10:	2c2b      	cmp	r4, #43	@ 0x2b
 8011b12:	bf04      	itt	eq
 8011b14:	782c      	ldrbeq	r4, [r5, #0]
 8011b16:	1c85      	addeq	r5, r0, #2
 8011b18:	e7cd      	b.n	8011ab6 <_strtoul_l.constprop.0+0x22>
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d1d8      	bne.n	8011ad0 <_strtoul_l.constprop.0+0x3c>
 8011b1e:	2c30      	cmp	r4, #48	@ 0x30
 8011b20:	bf0c      	ite	eq
 8011b22:	2308      	moveq	r3, #8
 8011b24:	230a      	movne	r3, #10
 8011b26:	e7d3      	b.n	8011ad0 <_strtoul_l.constprop.0+0x3c>
 8011b28:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011b2c:	f1bc 0f19 	cmp.w	ip, #25
 8011b30:	d801      	bhi.n	8011b36 <_strtoul_l.constprop.0+0xa2>
 8011b32:	3c37      	subs	r4, #55	@ 0x37
 8011b34:	e7dc      	b.n	8011af0 <_strtoul_l.constprop.0+0x5c>
 8011b36:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011b3a:	f1bc 0f19 	cmp.w	ip, #25
 8011b3e:	d804      	bhi.n	8011b4a <_strtoul_l.constprop.0+0xb6>
 8011b40:	3c57      	subs	r4, #87	@ 0x57
 8011b42:	e7d5      	b.n	8011af0 <_strtoul_l.constprop.0+0x5c>
 8011b44:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8011b48:	e7df      	b.n	8011b0a <_strtoul_l.constprop.0+0x76>
 8011b4a:	1c73      	adds	r3, r6, #1
 8011b4c:	d106      	bne.n	8011b5c <_strtoul_l.constprop.0+0xc8>
 8011b4e:	2322      	movs	r3, #34	@ 0x22
 8011b50:	f8ce 3000 	str.w	r3, [lr]
 8011b54:	4630      	mov	r0, r6
 8011b56:	b932      	cbnz	r2, 8011b66 <_strtoul_l.constprop.0+0xd2>
 8011b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b5c:	b107      	cbz	r7, 8011b60 <_strtoul_l.constprop.0+0xcc>
 8011b5e:	4240      	negs	r0, r0
 8011b60:	2a00      	cmp	r2, #0
 8011b62:	d0f9      	beq.n	8011b58 <_strtoul_l.constprop.0+0xc4>
 8011b64:	b106      	cbz	r6, 8011b68 <_strtoul_l.constprop.0+0xd4>
 8011b66:	1e69      	subs	r1, r5, #1
 8011b68:	6011      	str	r1, [r2, #0]
 8011b6a:	e7f5      	b.n	8011b58 <_strtoul_l.constprop.0+0xc4>
 8011b6c:	0801397c 	.word	0x0801397c

08011b70 <strtoul>:
 8011b70:	4613      	mov	r3, r2
 8011b72:	460a      	mov	r2, r1
 8011b74:	4601      	mov	r1, r0
 8011b76:	4802      	ldr	r0, [pc, #8]	@ (8011b80 <strtoul+0x10>)
 8011b78:	6800      	ldr	r0, [r0, #0]
 8011b7a:	f7ff bf8b 	b.w	8011a94 <_strtoul_l.constprop.0>
 8011b7e:	bf00      	nop
 8011b80:	200001e4 	.word	0x200001e4

08011b84 <std>:
 8011b84:	2300      	movs	r3, #0
 8011b86:	b510      	push	{r4, lr}
 8011b88:	4604      	mov	r4, r0
 8011b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8011b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b92:	6083      	str	r3, [r0, #8]
 8011b94:	8181      	strh	r1, [r0, #12]
 8011b96:	6643      	str	r3, [r0, #100]	@ 0x64
 8011b98:	81c2      	strh	r2, [r0, #14]
 8011b9a:	6183      	str	r3, [r0, #24]
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	2208      	movs	r2, #8
 8011ba0:	305c      	adds	r0, #92	@ 0x5c
 8011ba2:	f000 f98d 	bl	8011ec0 <memset>
 8011ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8011bdc <std+0x58>)
 8011ba8:	6263      	str	r3, [r4, #36]	@ 0x24
 8011baa:	4b0d      	ldr	r3, [pc, #52]	@ (8011be0 <std+0x5c>)
 8011bac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011bae:	4b0d      	ldr	r3, [pc, #52]	@ (8011be4 <std+0x60>)
 8011bb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011be8 <std+0x64>)
 8011bb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8011bec <std+0x68>)
 8011bb8:	6224      	str	r4, [r4, #32]
 8011bba:	429c      	cmp	r4, r3
 8011bbc:	d006      	beq.n	8011bcc <std+0x48>
 8011bbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011bc2:	4294      	cmp	r4, r2
 8011bc4:	d002      	beq.n	8011bcc <std+0x48>
 8011bc6:	33d0      	adds	r3, #208	@ 0xd0
 8011bc8:	429c      	cmp	r4, r3
 8011bca:	d105      	bne.n	8011bd8 <std+0x54>
 8011bcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bd4:	f000 ba32 	b.w	801203c <__retarget_lock_init_recursive>
 8011bd8:	bd10      	pop	{r4, pc}
 8011bda:	bf00      	nop
 8011bdc:	08011d95 	.word	0x08011d95
 8011be0:	08011db7 	.word	0x08011db7
 8011be4:	08011def 	.word	0x08011def
 8011be8:	08011e13 	.word	0x08011e13
 8011bec:	2000dc5c 	.word	0x2000dc5c

08011bf0 <stdio_exit_handler>:
 8011bf0:	4a02      	ldr	r2, [pc, #8]	@ (8011bfc <stdio_exit_handler+0xc>)
 8011bf2:	4903      	ldr	r1, [pc, #12]	@ (8011c00 <stdio_exit_handler+0x10>)
 8011bf4:	4803      	ldr	r0, [pc, #12]	@ (8011c04 <stdio_exit_handler+0x14>)
 8011bf6:	f000 b869 	b.w	8011ccc <_fwalk_sglue>
 8011bfa:	bf00      	nop
 8011bfc:	200001d8 	.word	0x200001d8
 8011c00:	08012ac1 	.word	0x08012ac1
 8011c04:	200001e8 	.word	0x200001e8

08011c08 <cleanup_stdio>:
 8011c08:	6841      	ldr	r1, [r0, #4]
 8011c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8011c3c <cleanup_stdio+0x34>)
 8011c0c:	4299      	cmp	r1, r3
 8011c0e:	b510      	push	{r4, lr}
 8011c10:	4604      	mov	r4, r0
 8011c12:	d001      	beq.n	8011c18 <cleanup_stdio+0x10>
 8011c14:	f000 ff54 	bl	8012ac0 <_fflush_r>
 8011c18:	68a1      	ldr	r1, [r4, #8]
 8011c1a:	4b09      	ldr	r3, [pc, #36]	@ (8011c40 <cleanup_stdio+0x38>)
 8011c1c:	4299      	cmp	r1, r3
 8011c1e:	d002      	beq.n	8011c26 <cleanup_stdio+0x1e>
 8011c20:	4620      	mov	r0, r4
 8011c22:	f000 ff4d 	bl	8012ac0 <_fflush_r>
 8011c26:	68e1      	ldr	r1, [r4, #12]
 8011c28:	4b06      	ldr	r3, [pc, #24]	@ (8011c44 <cleanup_stdio+0x3c>)
 8011c2a:	4299      	cmp	r1, r3
 8011c2c:	d004      	beq.n	8011c38 <cleanup_stdio+0x30>
 8011c2e:	4620      	mov	r0, r4
 8011c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c34:	f000 bf44 	b.w	8012ac0 <_fflush_r>
 8011c38:	bd10      	pop	{r4, pc}
 8011c3a:	bf00      	nop
 8011c3c:	2000dc5c 	.word	0x2000dc5c
 8011c40:	2000dcc4 	.word	0x2000dcc4
 8011c44:	2000dd2c 	.word	0x2000dd2c

08011c48 <global_stdio_init.part.0>:
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8011c78 <global_stdio_init.part.0+0x30>)
 8011c4c:	4c0b      	ldr	r4, [pc, #44]	@ (8011c7c <global_stdio_init.part.0+0x34>)
 8011c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8011c80 <global_stdio_init.part.0+0x38>)
 8011c50:	601a      	str	r2, [r3, #0]
 8011c52:	4620      	mov	r0, r4
 8011c54:	2200      	movs	r2, #0
 8011c56:	2104      	movs	r1, #4
 8011c58:	f7ff ff94 	bl	8011b84 <std>
 8011c5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011c60:	2201      	movs	r2, #1
 8011c62:	2109      	movs	r1, #9
 8011c64:	f7ff ff8e 	bl	8011b84 <std>
 8011c68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011c6c:	2202      	movs	r2, #2
 8011c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c72:	2112      	movs	r1, #18
 8011c74:	f7ff bf86 	b.w	8011b84 <std>
 8011c78:	2000dd94 	.word	0x2000dd94
 8011c7c:	2000dc5c 	.word	0x2000dc5c
 8011c80:	08011bf1 	.word	0x08011bf1

08011c84 <__sfp_lock_acquire>:
 8011c84:	4801      	ldr	r0, [pc, #4]	@ (8011c8c <__sfp_lock_acquire+0x8>)
 8011c86:	f000 b9da 	b.w	801203e <__retarget_lock_acquire_recursive>
 8011c8a:	bf00      	nop
 8011c8c:	2000dd9e 	.word	0x2000dd9e

08011c90 <__sfp_lock_release>:
 8011c90:	4801      	ldr	r0, [pc, #4]	@ (8011c98 <__sfp_lock_release+0x8>)
 8011c92:	f000 b9d5 	b.w	8012040 <__retarget_lock_release_recursive>
 8011c96:	bf00      	nop
 8011c98:	2000dd9e 	.word	0x2000dd9e

08011c9c <__sinit>:
 8011c9c:	b510      	push	{r4, lr}
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	f7ff fff0 	bl	8011c84 <__sfp_lock_acquire>
 8011ca4:	6a23      	ldr	r3, [r4, #32]
 8011ca6:	b11b      	cbz	r3, 8011cb0 <__sinit+0x14>
 8011ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cac:	f7ff bff0 	b.w	8011c90 <__sfp_lock_release>
 8011cb0:	4b04      	ldr	r3, [pc, #16]	@ (8011cc4 <__sinit+0x28>)
 8011cb2:	6223      	str	r3, [r4, #32]
 8011cb4:	4b04      	ldr	r3, [pc, #16]	@ (8011cc8 <__sinit+0x2c>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d1f5      	bne.n	8011ca8 <__sinit+0xc>
 8011cbc:	f7ff ffc4 	bl	8011c48 <global_stdio_init.part.0>
 8011cc0:	e7f2      	b.n	8011ca8 <__sinit+0xc>
 8011cc2:	bf00      	nop
 8011cc4:	08011c09 	.word	0x08011c09
 8011cc8:	2000dd94 	.word	0x2000dd94

08011ccc <_fwalk_sglue>:
 8011ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cd0:	4607      	mov	r7, r0
 8011cd2:	4688      	mov	r8, r1
 8011cd4:	4614      	mov	r4, r2
 8011cd6:	2600      	movs	r6, #0
 8011cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8011ce0:	d505      	bpl.n	8011cee <_fwalk_sglue+0x22>
 8011ce2:	6824      	ldr	r4, [r4, #0]
 8011ce4:	2c00      	cmp	r4, #0
 8011ce6:	d1f7      	bne.n	8011cd8 <_fwalk_sglue+0xc>
 8011ce8:	4630      	mov	r0, r6
 8011cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cee:	89ab      	ldrh	r3, [r5, #12]
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	d907      	bls.n	8011d04 <_fwalk_sglue+0x38>
 8011cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	d003      	beq.n	8011d04 <_fwalk_sglue+0x38>
 8011cfc:	4629      	mov	r1, r5
 8011cfe:	4638      	mov	r0, r7
 8011d00:	47c0      	blx	r8
 8011d02:	4306      	orrs	r6, r0
 8011d04:	3568      	adds	r5, #104	@ 0x68
 8011d06:	e7e9      	b.n	8011cdc <_fwalk_sglue+0x10>

08011d08 <iprintf>:
 8011d08:	b40f      	push	{r0, r1, r2, r3}
 8011d0a:	b507      	push	{r0, r1, r2, lr}
 8011d0c:	4906      	ldr	r1, [pc, #24]	@ (8011d28 <iprintf+0x20>)
 8011d0e:	ab04      	add	r3, sp, #16
 8011d10:	6808      	ldr	r0, [r1, #0]
 8011d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d16:	6881      	ldr	r1, [r0, #8]
 8011d18:	9301      	str	r3, [sp, #4]
 8011d1a:	f000 fba7 	bl	801246c <_vfiprintf_r>
 8011d1e:	b003      	add	sp, #12
 8011d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d24:	b004      	add	sp, #16
 8011d26:	4770      	bx	lr
 8011d28:	200001e4 	.word	0x200001e4

08011d2c <sniprintf>:
 8011d2c:	b40c      	push	{r2, r3}
 8011d2e:	b530      	push	{r4, r5, lr}
 8011d30:	4b17      	ldr	r3, [pc, #92]	@ (8011d90 <sniprintf+0x64>)
 8011d32:	1e0c      	subs	r4, r1, #0
 8011d34:	681d      	ldr	r5, [r3, #0]
 8011d36:	b09d      	sub	sp, #116	@ 0x74
 8011d38:	da08      	bge.n	8011d4c <sniprintf+0x20>
 8011d3a:	238b      	movs	r3, #139	@ 0x8b
 8011d3c:	602b      	str	r3, [r5, #0]
 8011d3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d42:	b01d      	add	sp, #116	@ 0x74
 8011d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d48:	b002      	add	sp, #8
 8011d4a:	4770      	bx	lr
 8011d4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011d50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011d54:	bf14      	ite	ne
 8011d56:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8011d5a:	4623      	moveq	r3, r4
 8011d5c:	9304      	str	r3, [sp, #16]
 8011d5e:	9307      	str	r3, [sp, #28]
 8011d60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011d64:	9002      	str	r0, [sp, #8]
 8011d66:	9006      	str	r0, [sp, #24]
 8011d68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011d6e:	ab21      	add	r3, sp, #132	@ 0x84
 8011d70:	a902      	add	r1, sp, #8
 8011d72:	4628      	mov	r0, r5
 8011d74:	9301      	str	r3, [sp, #4]
 8011d76:	f000 fa53 	bl	8012220 <_svfiprintf_r>
 8011d7a:	1c43      	adds	r3, r0, #1
 8011d7c:	bfbc      	itt	lt
 8011d7e:	238b      	movlt	r3, #139	@ 0x8b
 8011d80:	602b      	strlt	r3, [r5, #0]
 8011d82:	2c00      	cmp	r4, #0
 8011d84:	d0dd      	beq.n	8011d42 <sniprintf+0x16>
 8011d86:	9b02      	ldr	r3, [sp, #8]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	701a      	strb	r2, [r3, #0]
 8011d8c:	e7d9      	b.n	8011d42 <sniprintf+0x16>
 8011d8e:	bf00      	nop
 8011d90:	200001e4 	.word	0x200001e4

08011d94 <__sread>:
 8011d94:	b510      	push	{r4, lr}
 8011d96:	460c      	mov	r4, r1
 8011d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d9c:	f000 f8f0 	bl	8011f80 <_read_r>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	bfab      	itete	ge
 8011da4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011da6:	89a3      	ldrhlt	r3, [r4, #12]
 8011da8:	181b      	addge	r3, r3, r0
 8011daa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011dae:	bfac      	ite	ge
 8011db0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011db2:	81a3      	strhlt	r3, [r4, #12]
 8011db4:	bd10      	pop	{r4, pc}

08011db6 <__swrite>:
 8011db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dba:	461f      	mov	r7, r3
 8011dbc:	898b      	ldrh	r3, [r1, #12]
 8011dbe:	05db      	lsls	r3, r3, #23
 8011dc0:	4605      	mov	r5, r0
 8011dc2:	460c      	mov	r4, r1
 8011dc4:	4616      	mov	r6, r2
 8011dc6:	d505      	bpl.n	8011dd4 <__swrite+0x1e>
 8011dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dcc:	2302      	movs	r3, #2
 8011dce:	2200      	movs	r2, #0
 8011dd0:	f000 f8c4 	bl	8011f5c <_lseek_r>
 8011dd4:	89a3      	ldrh	r3, [r4, #12]
 8011dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011dde:	81a3      	strh	r3, [r4, #12]
 8011de0:	4632      	mov	r2, r6
 8011de2:	463b      	mov	r3, r7
 8011de4:	4628      	mov	r0, r5
 8011de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dea:	f000 b8eb 	b.w	8011fc4 <_write_r>

08011dee <__sseek>:
 8011dee:	b510      	push	{r4, lr}
 8011df0:	460c      	mov	r4, r1
 8011df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011df6:	f000 f8b1 	bl	8011f5c <_lseek_r>
 8011dfa:	1c43      	adds	r3, r0, #1
 8011dfc:	89a3      	ldrh	r3, [r4, #12]
 8011dfe:	bf15      	itete	ne
 8011e00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011e02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011e0a:	81a3      	strheq	r3, [r4, #12]
 8011e0c:	bf18      	it	ne
 8011e0e:	81a3      	strhne	r3, [r4, #12]
 8011e10:	bd10      	pop	{r4, pc}

08011e12 <__sclose>:
 8011e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e16:	f000 b891 	b.w	8011f3c <_close_r>

08011e1a <_vsniprintf_r>:
 8011e1a:	b530      	push	{r4, r5, lr}
 8011e1c:	4614      	mov	r4, r2
 8011e1e:	2c00      	cmp	r4, #0
 8011e20:	b09b      	sub	sp, #108	@ 0x6c
 8011e22:	4605      	mov	r5, r0
 8011e24:	461a      	mov	r2, r3
 8011e26:	da05      	bge.n	8011e34 <_vsniprintf_r+0x1a>
 8011e28:	238b      	movs	r3, #139	@ 0x8b
 8011e2a:	6003      	str	r3, [r0, #0]
 8011e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e30:	b01b      	add	sp, #108	@ 0x6c
 8011e32:	bd30      	pop	{r4, r5, pc}
 8011e34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011e38:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011e3c:	bf14      	ite	ne
 8011e3e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8011e42:	4623      	moveq	r3, r4
 8011e44:	9302      	str	r3, [sp, #8]
 8011e46:	9305      	str	r3, [sp, #20]
 8011e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011e4c:	9100      	str	r1, [sp, #0]
 8011e4e:	9104      	str	r1, [sp, #16]
 8011e50:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011e54:	4669      	mov	r1, sp
 8011e56:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011e58:	f000 f9e2 	bl	8012220 <_svfiprintf_r>
 8011e5c:	1c43      	adds	r3, r0, #1
 8011e5e:	bfbc      	itt	lt
 8011e60:	238b      	movlt	r3, #139	@ 0x8b
 8011e62:	602b      	strlt	r3, [r5, #0]
 8011e64:	2c00      	cmp	r4, #0
 8011e66:	d0e3      	beq.n	8011e30 <_vsniprintf_r+0x16>
 8011e68:	9b00      	ldr	r3, [sp, #0]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	701a      	strb	r2, [r3, #0]
 8011e6e:	e7df      	b.n	8011e30 <_vsniprintf_r+0x16>

08011e70 <vsniprintf>:
 8011e70:	b507      	push	{r0, r1, r2, lr}
 8011e72:	9300      	str	r3, [sp, #0]
 8011e74:	4613      	mov	r3, r2
 8011e76:	460a      	mov	r2, r1
 8011e78:	4601      	mov	r1, r0
 8011e7a:	4803      	ldr	r0, [pc, #12]	@ (8011e88 <vsniprintf+0x18>)
 8011e7c:	6800      	ldr	r0, [r0, #0]
 8011e7e:	f7ff ffcc 	bl	8011e1a <_vsniprintf_r>
 8011e82:	b003      	add	sp, #12
 8011e84:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e88:	200001e4 	.word	0x200001e4

08011e8c <memmove>:
 8011e8c:	4288      	cmp	r0, r1
 8011e8e:	b510      	push	{r4, lr}
 8011e90:	eb01 0402 	add.w	r4, r1, r2
 8011e94:	d902      	bls.n	8011e9c <memmove+0x10>
 8011e96:	4284      	cmp	r4, r0
 8011e98:	4623      	mov	r3, r4
 8011e9a:	d807      	bhi.n	8011eac <memmove+0x20>
 8011e9c:	1e43      	subs	r3, r0, #1
 8011e9e:	42a1      	cmp	r1, r4
 8011ea0:	d008      	beq.n	8011eb4 <memmove+0x28>
 8011ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011eaa:	e7f8      	b.n	8011e9e <memmove+0x12>
 8011eac:	4402      	add	r2, r0
 8011eae:	4601      	mov	r1, r0
 8011eb0:	428a      	cmp	r2, r1
 8011eb2:	d100      	bne.n	8011eb6 <memmove+0x2a>
 8011eb4:	bd10      	pop	{r4, pc}
 8011eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ebe:	e7f7      	b.n	8011eb0 <memmove+0x24>

08011ec0 <memset>:
 8011ec0:	4402      	add	r2, r0
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d100      	bne.n	8011eca <memset+0xa>
 8011ec8:	4770      	bx	lr
 8011eca:	f803 1b01 	strb.w	r1, [r3], #1
 8011ece:	e7f9      	b.n	8011ec4 <memset+0x4>

08011ed0 <strchr>:
 8011ed0:	b2c9      	uxtb	r1, r1
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eda:	b112      	cbz	r2, 8011ee2 <strchr+0x12>
 8011edc:	428a      	cmp	r2, r1
 8011ede:	d1f9      	bne.n	8011ed4 <strchr+0x4>
 8011ee0:	4770      	bx	lr
 8011ee2:	2900      	cmp	r1, #0
 8011ee4:	bf18      	it	ne
 8011ee6:	2000      	movne	r0, #0
 8011ee8:	4770      	bx	lr

08011eea <strncmp>:
 8011eea:	b510      	push	{r4, lr}
 8011eec:	b16a      	cbz	r2, 8011f0a <strncmp+0x20>
 8011eee:	3901      	subs	r1, #1
 8011ef0:	1884      	adds	r4, r0, r2
 8011ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ef6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d103      	bne.n	8011f06 <strncmp+0x1c>
 8011efe:	42a0      	cmp	r0, r4
 8011f00:	d001      	beq.n	8011f06 <strncmp+0x1c>
 8011f02:	2a00      	cmp	r2, #0
 8011f04:	d1f5      	bne.n	8011ef2 <strncmp+0x8>
 8011f06:	1ad0      	subs	r0, r2, r3
 8011f08:	bd10      	pop	{r4, pc}
 8011f0a:	4610      	mov	r0, r2
 8011f0c:	e7fc      	b.n	8011f08 <strncmp+0x1e>

08011f0e <strstr>:
 8011f0e:	780a      	ldrb	r2, [r1, #0]
 8011f10:	b570      	push	{r4, r5, r6, lr}
 8011f12:	b96a      	cbnz	r2, 8011f30 <strstr+0x22>
 8011f14:	bd70      	pop	{r4, r5, r6, pc}
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d109      	bne.n	8011f2e <strstr+0x20>
 8011f1a:	460c      	mov	r4, r1
 8011f1c:	4605      	mov	r5, r0
 8011f1e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d0f6      	beq.n	8011f14 <strstr+0x6>
 8011f26:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011f2a:	429e      	cmp	r6, r3
 8011f2c:	d0f7      	beq.n	8011f1e <strstr+0x10>
 8011f2e:	3001      	adds	r0, #1
 8011f30:	7803      	ldrb	r3, [r0, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1ef      	bne.n	8011f16 <strstr+0x8>
 8011f36:	4618      	mov	r0, r3
 8011f38:	e7ec      	b.n	8011f14 <strstr+0x6>
	...

08011f3c <_close_r>:
 8011f3c:	b538      	push	{r3, r4, r5, lr}
 8011f3e:	4d06      	ldr	r5, [pc, #24]	@ (8011f58 <_close_r+0x1c>)
 8011f40:	2300      	movs	r3, #0
 8011f42:	4604      	mov	r4, r0
 8011f44:	4608      	mov	r0, r1
 8011f46:	602b      	str	r3, [r5, #0]
 8011f48:	f7f0 f9dc 	bl	8002304 <_close>
 8011f4c:	1c43      	adds	r3, r0, #1
 8011f4e:	d102      	bne.n	8011f56 <_close_r+0x1a>
 8011f50:	682b      	ldr	r3, [r5, #0]
 8011f52:	b103      	cbz	r3, 8011f56 <_close_r+0x1a>
 8011f54:	6023      	str	r3, [r4, #0]
 8011f56:	bd38      	pop	{r3, r4, r5, pc}
 8011f58:	2000dd98 	.word	0x2000dd98

08011f5c <_lseek_r>:
 8011f5c:	b538      	push	{r3, r4, r5, lr}
 8011f5e:	4d07      	ldr	r5, [pc, #28]	@ (8011f7c <_lseek_r+0x20>)
 8011f60:	4604      	mov	r4, r0
 8011f62:	4608      	mov	r0, r1
 8011f64:	4611      	mov	r1, r2
 8011f66:	2200      	movs	r2, #0
 8011f68:	602a      	str	r2, [r5, #0]
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	f7f0 f9f1 	bl	8002352 <_lseek>
 8011f70:	1c43      	adds	r3, r0, #1
 8011f72:	d102      	bne.n	8011f7a <_lseek_r+0x1e>
 8011f74:	682b      	ldr	r3, [r5, #0]
 8011f76:	b103      	cbz	r3, 8011f7a <_lseek_r+0x1e>
 8011f78:	6023      	str	r3, [r4, #0]
 8011f7a:	bd38      	pop	{r3, r4, r5, pc}
 8011f7c:	2000dd98 	.word	0x2000dd98

08011f80 <_read_r>:
 8011f80:	b538      	push	{r3, r4, r5, lr}
 8011f82:	4d07      	ldr	r5, [pc, #28]	@ (8011fa0 <_read_r+0x20>)
 8011f84:	4604      	mov	r4, r0
 8011f86:	4608      	mov	r0, r1
 8011f88:	4611      	mov	r1, r2
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	602a      	str	r2, [r5, #0]
 8011f8e:	461a      	mov	r2, r3
 8011f90:	f7f0 f97f 	bl	8002292 <_read>
 8011f94:	1c43      	adds	r3, r0, #1
 8011f96:	d102      	bne.n	8011f9e <_read_r+0x1e>
 8011f98:	682b      	ldr	r3, [r5, #0]
 8011f9a:	b103      	cbz	r3, 8011f9e <_read_r+0x1e>
 8011f9c:	6023      	str	r3, [r4, #0]
 8011f9e:	bd38      	pop	{r3, r4, r5, pc}
 8011fa0:	2000dd98 	.word	0x2000dd98

08011fa4 <_sbrk_r>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	4d06      	ldr	r5, [pc, #24]	@ (8011fc0 <_sbrk_r+0x1c>)
 8011fa8:	2300      	movs	r3, #0
 8011faa:	4604      	mov	r4, r0
 8011fac:	4608      	mov	r0, r1
 8011fae:	602b      	str	r3, [r5, #0]
 8011fb0:	f7f0 f9dc 	bl	800236c <_sbrk>
 8011fb4:	1c43      	adds	r3, r0, #1
 8011fb6:	d102      	bne.n	8011fbe <_sbrk_r+0x1a>
 8011fb8:	682b      	ldr	r3, [r5, #0]
 8011fba:	b103      	cbz	r3, 8011fbe <_sbrk_r+0x1a>
 8011fbc:	6023      	str	r3, [r4, #0]
 8011fbe:	bd38      	pop	{r3, r4, r5, pc}
 8011fc0:	2000dd98 	.word	0x2000dd98

08011fc4 <_write_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4d07      	ldr	r5, [pc, #28]	@ (8011fe4 <_write_r+0x20>)
 8011fc8:	4604      	mov	r4, r0
 8011fca:	4608      	mov	r0, r1
 8011fcc:	4611      	mov	r1, r2
 8011fce:	2200      	movs	r2, #0
 8011fd0:	602a      	str	r2, [r5, #0]
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	f7f0 f97a 	bl	80022cc <_write>
 8011fd8:	1c43      	adds	r3, r0, #1
 8011fda:	d102      	bne.n	8011fe2 <_write_r+0x1e>
 8011fdc:	682b      	ldr	r3, [r5, #0]
 8011fde:	b103      	cbz	r3, 8011fe2 <_write_r+0x1e>
 8011fe0:	6023      	str	r3, [r4, #0]
 8011fe2:	bd38      	pop	{r3, r4, r5, pc}
 8011fe4:	2000dd98 	.word	0x2000dd98

08011fe8 <__errno>:
 8011fe8:	4b01      	ldr	r3, [pc, #4]	@ (8011ff0 <__errno+0x8>)
 8011fea:	6818      	ldr	r0, [r3, #0]
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop
 8011ff0:	200001e4 	.word	0x200001e4

08011ff4 <__libc_init_array>:
 8011ff4:	b570      	push	{r4, r5, r6, lr}
 8011ff6:	4d0d      	ldr	r5, [pc, #52]	@ (801202c <__libc_init_array+0x38>)
 8011ff8:	4c0d      	ldr	r4, [pc, #52]	@ (8012030 <__libc_init_array+0x3c>)
 8011ffa:	1b64      	subs	r4, r4, r5
 8011ffc:	10a4      	asrs	r4, r4, #2
 8011ffe:	2600      	movs	r6, #0
 8012000:	42a6      	cmp	r6, r4
 8012002:	d109      	bne.n	8012018 <__libc_init_array+0x24>
 8012004:	4d0b      	ldr	r5, [pc, #44]	@ (8012034 <__libc_init_array+0x40>)
 8012006:	4c0c      	ldr	r4, [pc, #48]	@ (8012038 <__libc_init_array+0x44>)
 8012008:	f000 fef8 	bl	8012dfc <_init>
 801200c:	1b64      	subs	r4, r4, r5
 801200e:	10a4      	asrs	r4, r4, #2
 8012010:	2600      	movs	r6, #0
 8012012:	42a6      	cmp	r6, r4
 8012014:	d105      	bne.n	8012022 <__libc_init_array+0x2e>
 8012016:	bd70      	pop	{r4, r5, r6, pc}
 8012018:	f855 3b04 	ldr.w	r3, [r5], #4
 801201c:	4798      	blx	r3
 801201e:	3601      	adds	r6, #1
 8012020:	e7ee      	b.n	8012000 <__libc_init_array+0xc>
 8012022:	f855 3b04 	ldr.w	r3, [r5], #4
 8012026:	4798      	blx	r3
 8012028:	3601      	adds	r6, #1
 801202a:	e7f2      	b.n	8012012 <__libc_init_array+0x1e>
 801202c:	08013af4 	.word	0x08013af4
 8012030:	08013af4 	.word	0x08013af4
 8012034:	08013af4 	.word	0x08013af4
 8012038:	08013afc 	.word	0x08013afc

0801203c <__retarget_lock_init_recursive>:
 801203c:	4770      	bx	lr

0801203e <__retarget_lock_acquire_recursive>:
 801203e:	4770      	bx	lr

08012040 <__retarget_lock_release_recursive>:
 8012040:	4770      	bx	lr

08012042 <strcpy>:
 8012042:	4603      	mov	r3, r0
 8012044:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012048:	f803 2b01 	strb.w	r2, [r3], #1
 801204c:	2a00      	cmp	r2, #0
 801204e:	d1f9      	bne.n	8012044 <strcpy+0x2>
 8012050:	4770      	bx	lr

08012052 <memcpy>:
 8012052:	440a      	add	r2, r1
 8012054:	4291      	cmp	r1, r2
 8012056:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801205a:	d100      	bne.n	801205e <memcpy+0xc>
 801205c:	4770      	bx	lr
 801205e:	b510      	push	{r4, lr}
 8012060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012068:	4291      	cmp	r1, r2
 801206a:	d1f9      	bne.n	8012060 <memcpy+0xe>
 801206c:	bd10      	pop	{r4, pc}
	...

08012070 <__assert_func>:
 8012070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012072:	4614      	mov	r4, r2
 8012074:	461a      	mov	r2, r3
 8012076:	4b09      	ldr	r3, [pc, #36]	@ (801209c <__assert_func+0x2c>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	4605      	mov	r5, r0
 801207c:	68d8      	ldr	r0, [r3, #12]
 801207e:	b954      	cbnz	r4, 8012096 <__assert_func+0x26>
 8012080:	4b07      	ldr	r3, [pc, #28]	@ (80120a0 <__assert_func+0x30>)
 8012082:	461c      	mov	r4, r3
 8012084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012088:	9100      	str	r1, [sp, #0]
 801208a:	462b      	mov	r3, r5
 801208c:	4905      	ldr	r1, [pc, #20]	@ (80120a4 <__assert_func+0x34>)
 801208e:	f000 fd3f 	bl	8012b10 <fiprintf>
 8012092:	f000 fde3 	bl	8012c5c <abort>
 8012096:	4b04      	ldr	r3, [pc, #16]	@ (80120a8 <__assert_func+0x38>)
 8012098:	e7f4      	b.n	8012084 <__assert_func+0x14>
 801209a:	bf00      	nop
 801209c:	200001e4 	.word	0x200001e4
 80120a0:	08013ab7 	.word	0x08013ab7
 80120a4:	08013a89 	.word	0x08013a89
 80120a8:	08013a7c 	.word	0x08013a7c

080120ac <__env_lock>:
 80120ac:	4801      	ldr	r0, [pc, #4]	@ (80120b4 <__env_lock+0x8>)
 80120ae:	f7ff bfc6 	b.w	801203e <__retarget_lock_acquire_recursive>
 80120b2:	bf00      	nop
 80120b4:	2000dd9c 	.word	0x2000dd9c

080120b8 <__env_unlock>:
 80120b8:	4801      	ldr	r0, [pc, #4]	@ (80120c0 <__env_unlock+0x8>)
 80120ba:	f7ff bfc1 	b.w	8012040 <__retarget_lock_release_recursive>
 80120be:	bf00      	nop
 80120c0:	2000dd9c 	.word	0x2000dd9c

080120c4 <_free_r>:
 80120c4:	b538      	push	{r3, r4, r5, lr}
 80120c6:	4605      	mov	r5, r0
 80120c8:	2900      	cmp	r1, #0
 80120ca:	d041      	beq.n	8012150 <_free_r+0x8c>
 80120cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120d0:	1f0c      	subs	r4, r1, #4
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	bfb8      	it	lt
 80120d6:	18e4      	addlt	r4, r4, r3
 80120d8:	f7ff fc2e 	bl	8011938 <__malloc_lock>
 80120dc:	4a1d      	ldr	r2, [pc, #116]	@ (8012154 <_free_r+0x90>)
 80120de:	6813      	ldr	r3, [r2, #0]
 80120e0:	b933      	cbnz	r3, 80120f0 <_free_r+0x2c>
 80120e2:	6063      	str	r3, [r4, #4]
 80120e4:	6014      	str	r4, [r2, #0]
 80120e6:	4628      	mov	r0, r5
 80120e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120ec:	f7ff bc2a 	b.w	8011944 <__malloc_unlock>
 80120f0:	42a3      	cmp	r3, r4
 80120f2:	d908      	bls.n	8012106 <_free_r+0x42>
 80120f4:	6820      	ldr	r0, [r4, #0]
 80120f6:	1821      	adds	r1, r4, r0
 80120f8:	428b      	cmp	r3, r1
 80120fa:	bf01      	itttt	eq
 80120fc:	6819      	ldreq	r1, [r3, #0]
 80120fe:	685b      	ldreq	r3, [r3, #4]
 8012100:	1809      	addeq	r1, r1, r0
 8012102:	6021      	streq	r1, [r4, #0]
 8012104:	e7ed      	b.n	80120e2 <_free_r+0x1e>
 8012106:	461a      	mov	r2, r3
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	b10b      	cbz	r3, 8012110 <_free_r+0x4c>
 801210c:	42a3      	cmp	r3, r4
 801210e:	d9fa      	bls.n	8012106 <_free_r+0x42>
 8012110:	6811      	ldr	r1, [r2, #0]
 8012112:	1850      	adds	r0, r2, r1
 8012114:	42a0      	cmp	r0, r4
 8012116:	d10b      	bne.n	8012130 <_free_r+0x6c>
 8012118:	6820      	ldr	r0, [r4, #0]
 801211a:	4401      	add	r1, r0
 801211c:	1850      	adds	r0, r2, r1
 801211e:	4283      	cmp	r3, r0
 8012120:	6011      	str	r1, [r2, #0]
 8012122:	d1e0      	bne.n	80120e6 <_free_r+0x22>
 8012124:	6818      	ldr	r0, [r3, #0]
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	6053      	str	r3, [r2, #4]
 801212a:	4408      	add	r0, r1
 801212c:	6010      	str	r0, [r2, #0]
 801212e:	e7da      	b.n	80120e6 <_free_r+0x22>
 8012130:	d902      	bls.n	8012138 <_free_r+0x74>
 8012132:	230c      	movs	r3, #12
 8012134:	602b      	str	r3, [r5, #0]
 8012136:	e7d6      	b.n	80120e6 <_free_r+0x22>
 8012138:	6820      	ldr	r0, [r4, #0]
 801213a:	1821      	adds	r1, r4, r0
 801213c:	428b      	cmp	r3, r1
 801213e:	bf04      	itt	eq
 8012140:	6819      	ldreq	r1, [r3, #0]
 8012142:	685b      	ldreq	r3, [r3, #4]
 8012144:	6063      	str	r3, [r4, #4]
 8012146:	bf04      	itt	eq
 8012148:	1809      	addeq	r1, r1, r0
 801214a:	6021      	streq	r1, [r4, #0]
 801214c:	6054      	str	r4, [r2, #4]
 801214e:	e7ca      	b.n	80120e6 <_free_r+0x22>
 8012150:	bd38      	pop	{r3, r4, r5, pc}
 8012152:	bf00      	nop
 8012154:	2000dc58 	.word	0x2000dc58

08012158 <_malloc_usable_size_r>:
 8012158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801215c:	1f18      	subs	r0, r3, #4
 801215e:	2b00      	cmp	r3, #0
 8012160:	bfbc      	itt	lt
 8012162:	580b      	ldrlt	r3, [r1, r0]
 8012164:	18c0      	addlt	r0, r0, r3
 8012166:	4770      	bx	lr

08012168 <__ssputs_r>:
 8012168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801216c:	688e      	ldr	r6, [r1, #8]
 801216e:	461f      	mov	r7, r3
 8012170:	42be      	cmp	r6, r7
 8012172:	680b      	ldr	r3, [r1, #0]
 8012174:	4682      	mov	sl, r0
 8012176:	460c      	mov	r4, r1
 8012178:	4690      	mov	r8, r2
 801217a:	d82d      	bhi.n	80121d8 <__ssputs_r+0x70>
 801217c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012180:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012184:	d026      	beq.n	80121d4 <__ssputs_r+0x6c>
 8012186:	6965      	ldr	r5, [r4, #20]
 8012188:	6909      	ldr	r1, [r1, #16]
 801218a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801218e:	eba3 0901 	sub.w	r9, r3, r1
 8012192:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012196:	1c7b      	adds	r3, r7, #1
 8012198:	444b      	add	r3, r9
 801219a:	106d      	asrs	r5, r5, #1
 801219c:	429d      	cmp	r5, r3
 801219e:	bf38      	it	cc
 80121a0:	461d      	movcc	r5, r3
 80121a2:	0553      	lsls	r3, r2, #21
 80121a4:	d527      	bpl.n	80121f6 <__ssputs_r+0x8e>
 80121a6:	4629      	mov	r1, r5
 80121a8:	f7ff fb46 	bl	8011838 <_malloc_r>
 80121ac:	4606      	mov	r6, r0
 80121ae:	b360      	cbz	r0, 801220a <__ssputs_r+0xa2>
 80121b0:	6921      	ldr	r1, [r4, #16]
 80121b2:	464a      	mov	r2, r9
 80121b4:	f7ff ff4d 	bl	8012052 <memcpy>
 80121b8:	89a3      	ldrh	r3, [r4, #12]
 80121ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80121be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121c2:	81a3      	strh	r3, [r4, #12]
 80121c4:	6126      	str	r6, [r4, #16]
 80121c6:	6165      	str	r5, [r4, #20]
 80121c8:	444e      	add	r6, r9
 80121ca:	eba5 0509 	sub.w	r5, r5, r9
 80121ce:	6026      	str	r6, [r4, #0]
 80121d0:	60a5      	str	r5, [r4, #8]
 80121d2:	463e      	mov	r6, r7
 80121d4:	42be      	cmp	r6, r7
 80121d6:	d900      	bls.n	80121da <__ssputs_r+0x72>
 80121d8:	463e      	mov	r6, r7
 80121da:	6820      	ldr	r0, [r4, #0]
 80121dc:	4632      	mov	r2, r6
 80121de:	4641      	mov	r1, r8
 80121e0:	f7ff fe54 	bl	8011e8c <memmove>
 80121e4:	68a3      	ldr	r3, [r4, #8]
 80121e6:	1b9b      	subs	r3, r3, r6
 80121e8:	60a3      	str	r3, [r4, #8]
 80121ea:	6823      	ldr	r3, [r4, #0]
 80121ec:	4433      	add	r3, r6
 80121ee:	6023      	str	r3, [r4, #0]
 80121f0:	2000      	movs	r0, #0
 80121f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121f6:	462a      	mov	r2, r5
 80121f8:	f7ff fc1e 	bl	8011a38 <_realloc_r>
 80121fc:	4606      	mov	r6, r0
 80121fe:	2800      	cmp	r0, #0
 8012200:	d1e0      	bne.n	80121c4 <__ssputs_r+0x5c>
 8012202:	6921      	ldr	r1, [r4, #16]
 8012204:	4650      	mov	r0, sl
 8012206:	f7ff ff5d 	bl	80120c4 <_free_r>
 801220a:	230c      	movs	r3, #12
 801220c:	f8ca 3000 	str.w	r3, [sl]
 8012210:	89a3      	ldrh	r3, [r4, #12]
 8012212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012216:	81a3      	strh	r3, [r4, #12]
 8012218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801221c:	e7e9      	b.n	80121f2 <__ssputs_r+0x8a>
	...

08012220 <_svfiprintf_r>:
 8012220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012224:	4698      	mov	r8, r3
 8012226:	898b      	ldrh	r3, [r1, #12]
 8012228:	061b      	lsls	r3, r3, #24
 801222a:	b09d      	sub	sp, #116	@ 0x74
 801222c:	4607      	mov	r7, r0
 801222e:	460d      	mov	r5, r1
 8012230:	4614      	mov	r4, r2
 8012232:	d510      	bpl.n	8012256 <_svfiprintf_r+0x36>
 8012234:	690b      	ldr	r3, [r1, #16]
 8012236:	b973      	cbnz	r3, 8012256 <_svfiprintf_r+0x36>
 8012238:	2140      	movs	r1, #64	@ 0x40
 801223a:	f7ff fafd 	bl	8011838 <_malloc_r>
 801223e:	6028      	str	r0, [r5, #0]
 8012240:	6128      	str	r0, [r5, #16]
 8012242:	b930      	cbnz	r0, 8012252 <_svfiprintf_r+0x32>
 8012244:	230c      	movs	r3, #12
 8012246:	603b      	str	r3, [r7, #0]
 8012248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801224c:	b01d      	add	sp, #116	@ 0x74
 801224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012252:	2340      	movs	r3, #64	@ 0x40
 8012254:	616b      	str	r3, [r5, #20]
 8012256:	2300      	movs	r3, #0
 8012258:	9309      	str	r3, [sp, #36]	@ 0x24
 801225a:	2320      	movs	r3, #32
 801225c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012260:	f8cd 800c 	str.w	r8, [sp, #12]
 8012264:	2330      	movs	r3, #48	@ 0x30
 8012266:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012404 <_svfiprintf_r+0x1e4>
 801226a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801226e:	f04f 0901 	mov.w	r9, #1
 8012272:	4623      	mov	r3, r4
 8012274:	469a      	mov	sl, r3
 8012276:	f813 2b01 	ldrb.w	r2, [r3], #1
 801227a:	b10a      	cbz	r2, 8012280 <_svfiprintf_r+0x60>
 801227c:	2a25      	cmp	r2, #37	@ 0x25
 801227e:	d1f9      	bne.n	8012274 <_svfiprintf_r+0x54>
 8012280:	ebba 0b04 	subs.w	fp, sl, r4
 8012284:	d00b      	beq.n	801229e <_svfiprintf_r+0x7e>
 8012286:	465b      	mov	r3, fp
 8012288:	4622      	mov	r2, r4
 801228a:	4629      	mov	r1, r5
 801228c:	4638      	mov	r0, r7
 801228e:	f7ff ff6b 	bl	8012168 <__ssputs_r>
 8012292:	3001      	adds	r0, #1
 8012294:	f000 80a7 	beq.w	80123e6 <_svfiprintf_r+0x1c6>
 8012298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801229a:	445a      	add	r2, fp
 801229c:	9209      	str	r2, [sp, #36]	@ 0x24
 801229e:	f89a 3000 	ldrb.w	r3, [sl]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	f000 809f 	beq.w	80123e6 <_svfiprintf_r+0x1c6>
 80122a8:	2300      	movs	r3, #0
 80122aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80122ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122b2:	f10a 0a01 	add.w	sl, sl, #1
 80122b6:	9304      	str	r3, [sp, #16]
 80122b8:	9307      	str	r3, [sp, #28]
 80122ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80122be:	931a      	str	r3, [sp, #104]	@ 0x68
 80122c0:	4654      	mov	r4, sl
 80122c2:	2205      	movs	r2, #5
 80122c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122c8:	484e      	ldr	r0, [pc, #312]	@ (8012404 <_svfiprintf_r+0x1e4>)
 80122ca:	f7ed ffa1 	bl	8000210 <memchr>
 80122ce:	9a04      	ldr	r2, [sp, #16]
 80122d0:	b9d8      	cbnz	r0, 801230a <_svfiprintf_r+0xea>
 80122d2:	06d0      	lsls	r0, r2, #27
 80122d4:	bf44      	itt	mi
 80122d6:	2320      	movmi	r3, #32
 80122d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122dc:	0711      	lsls	r1, r2, #28
 80122de:	bf44      	itt	mi
 80122e0:	232b      	movmi	r3, #43	@ 0x2b
 80122e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122e6:	f89a 3000 	ldrb.w	r3, [sl]
 80122ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80122ec:	d015      	beq.n	801231a <_svfiprintf_r+0xfa>
 80122ee:	9a07      	ldr	r2, [sp, #28]
 80122f0:	4654      	mov	r4, sl
 80122f2:	2000      	movs	r0, #0
 80122f4:	f04f 0c0a 	mov.w	ip, #10
 80122f8:	4621      	mov	r1, r4
 80122fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122fe:	3b30      	subs	r3, #48	@ 0x30
 8012300:	2b09      	cmp	r3, #9
 8012302:	d94b      	bls.n	801239c <_svfiprintf_r+0x17c>
 8012304:	b1b0      	cbz	r0, 8012334 <_svfiprintf_r+0x114>
 8012306:	9207      	str	r2, [sp, #28]
 8012308:	e014      	b.n	8012334 <_svfiprintf_r+0x114>
 801230a:	eba0 0308 	sub.w	r3, r0, r8
 801230e:	fa09 f303 	lsl.w	r3, r9, r3
 8012312:	4313      	orrs	r3, r2
 8012314:	9304      	str	r3, [sp, #16]
 8012316:	46a2      	mov	sl, r4
 8012318:	e7d2      	b.n	80122c0 <_svfiprintf_r+0xa0>
 801231a:	9b03      	ldr	r3, [sp, #12]
 801231c:	1d19      	adds	r1, r3, #4
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	9103      	str	r1, [sp, #12]
 8012322:	2b00      	cmp	r3, #0
 8012324:	bfbb      	ittet	lt
 8012326:	425b      	neglt	r3, r3
 8012328:	f042 0202 	orrlt.w	r2, r2, #2
 801232c:	9307      	strge	r3, [sp, #28]
 801232e:	9307      	strlt	r3, [sp, #28]
 8012330:	bfb8      	it	lt
 8012332:	9204      	strlt	r2, [sp, #16]
 8012334:	7823      	ldrb	r3, [r4, #0]
 8012336:	2b2e      	cmp	r3, #46	@ 0x2e
 8012338:	d10a      	bne.n	8012350 <_svfiprintf_r+0x130>
 801233a:	7863      	ldrb	r3, [r4, #1]
 801233c:	2b2a      	cmp	r3, #42	@ 0x2a
 801233e:	d132      	bne.n	80123a6 <_svfiprintf_r+0x186>
 8012340:	9b03      	ldr	r3, [sp, #12]
 8012342:	1d1a      	adds	r2, r3, #4
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	9203      	str	r2, [sp, #12]
 8012348:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801234c:	3402      	adds	r4, #2
 801234e:	9305      	str	r3, [sp, #20]
 8012350:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012414 <_svfiprintf_r+0x1f4>
 8012354:	7821      	ldrb	r1, [r4, #0]
 8012356:	2203      	movs	r2, #3
 8012358:	4650      	mov	r0, sl
 801235a:	f7ed ff59 	bl	8000210 <memchr>
 801235e:	b138      	cbz	r0, 8012370 <_svfiprintf_r+0x150>
 8012360:	9b04      	ldr	r3, [sp, #16]
 8012362:	eba0 000a 	sub.w	r0, r0, sl
 8012366:	2240      	movs	r2, #64	@ 0x40
 8012368:	4082      	lsls	r2, r0
 801236a:	4313      	orrs	r3, r2
 801236c:	3401      	adds	r4, #1
 801236e:	9304      	str	r3, [sp, #16]
 8012370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012374:	4824      	ldr	r0, [pc, #144]	@ (8012408 <_svfiprintf_r+0x1e8>)
 8012376:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801237a:	2206      	movs	r2, #6
 801237c:	f7ed ff48 	bl	8000210 <memchr>
 8012380:	2800      	cmp	r0, #0
 8012382:	d036      	beq.n	80123f2 <_svfiprintf_r+0x1d2>
 8012384:	4b21      	ldr	r3, [pc, #132]	@ (801240c <_svfiprintf_r+0x1ec>)
 8012386:	bb1b      	cbnz	r3, 80123d0 <_svfiprintf_r+0x1b0>
 8012388:	9b03      	ldr	r3, [sp, #12]
 801238a:	3307      	adds	r3, #7
 801238c:	f023 0307 	bic.w	r3, r3, #7
 8012390:	3308      	adds	r3, #8
 8012392:	9303      	str	r3, [sp, #12]
 8012394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012396:	4433      	add	r3, r6
 8012398:	9309      	str	r3, [sp, #36]	@ 0x24
 801239a:	e76a      	b.n	8012272 <_svfiprintf_r+0x52>
 801239c:	fb0c 3202 	mla	r2, ip, r2, r3
 80123a0:	460c      	mov	r4, r1
 80123a2:	2001      	movs	r0, #1
 80123a4:	e7a8      	b.n	80122f8 <_svfiprintf_r+0xd8>
 80123a6:	2300      	movs	r3, #0
 80123a8:	3401      	adds	r4, #1
 80123aa:	9305      	str	r3, [sp, #20]
 80123ac:	4619      	mov	r1, r3
 80123ae:	f04f 0c0a 	mov.w	ip, #10
 80123b2:	4620      	mov	r0, r4
 80123b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123b8:	3a30      	subs	r2, #48	@ 0x30
 80123ba:	2a09      	cmp	r2, #9
 80123bc:	d903      	bls.n	80123c6 <_svfiprintf_r+0x1a6>
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d0c6      	beq.n	8012350 <_svfiprintf_r+0x130>
 80123c2:	9105      	str	r1, [sp, #20]
 80123c4:	e7c4      	b.n	8012350 <_svfiprintf_r+0x130>
 80123c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80123ca:	4604      	mov	r4, r0
 80123cc:	2301      	movs	r3, #1
 80123ce:	e7f0      	b.n	80123b2 <_svfiprintf_r+0x192>
 80123d0:	ab03      	add	r3, sp, #12
 80123d2:	9300      	str	r3, [sp, #0]
 80123d4:	462a      	mov	r2, r5
 80123d6:	4b0e      	ldr	r3, [pc, #56]	@ (8012410 <_svfiprintf_r+0x1f0>)
 80123d8:	a904      	add	r1, sp, #16
 80123da:	4638      	mov	r0, r7
 80123dc:	f3af 8000 	nop.w
 80123e0:	1c42      	adds	r2, r0, #1
 80123e2:	4606      	mov	r6, r0
 80123e4:	d1d6      	bne.n	8012394 <_svfiprintf_r+0x174>
 80123e6:	89ab      	ldrh	r3, [r5, #12]
 80123e8:	065b      	lsls	r3, r3, #25
 80123ea:	f53f af2d 	bmi.w	8012248 <_svfiprintf_r+0x28>
 80123ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123f0:	e72c      	b.n	801224c <_svfiprintf_r+0x2c>
 80123f2:	ab03      	add	r3, sp, #12
 80123f4:	9300      	str	r3, [sp, #0]
 80123f6:	462a      	mov	r2, r5
 80123f8:	4b05      	ldr	r3, [pc, #20]	@ (8012410 <_svfiprintf_r+0x1f0>)
 80123fa:	a904      	add	r1, sp, #16
 80123fc:	4638      	mov	r0, r7
 80123fe:	f000 f9bb 	bl	8012778 <_printf_i>
 8012402:	e7ed      	b.n	80123e0 <_svfiprintf_r+0x1c0>
 8012404:	08013ab8 	.word	0x08013ab8
 8012408:	08013ac2 	.word	0x08013ac2
 801240c:	00000000 	.word	0x00000000
 8012410:	08012169 	.word	0x08012169
 8012414:	08013abe 	.word	0x08013abe

08012418 <__sfputc_r>:
 8012418:	6893      	ldr	r3, [r2, #8]
 801241a:	3b01      	subs	r3, #1
 801241c:	2b00      	cmp	r3, #0
 801241e:	b410      	push	{r4}
 8012420:	6093      	str	r3, [r2, #8]
 8012422:	da08      	bge.n	8012436 <__sfputc_r+0x1e>
 8012424:	6994      	ldr	r4, [r2, #24]
 8012426:	42a3      	cmp	r3, r4
 8012428:	db01      	blt.n	801242e <__sfputc_r+0x16>
 801242a:	290a      	cmp	r1, #10
 801242c:	d103      	bne.n	8012436 <__sfputc_r+0x1e>
 801242e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012432:	f000 bb7f 	b.w	8012b34 <__swbuf_r>
 8012436:	6813      	ldr	r3, [r2, #0]
 8012438:	1c58      	adds	r0, r3, #1
 801243a:	6010      	str	r0, [r2, #0]
 801243c:	7019      	strb	r1, [r3, #0]
 801243e:	4608      	mov	r0, r1
 8012440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012444:	4770      	bx	lr

08012446 <__sfputs_r>:
 8012446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012448:	4606      	mov	r6, r0
 801244a:	460f      	mov	r7, r1
 801244c:	4614      	mov	r4, r2
 801244e:	18d5      	adds	r5, r2, r3
 8012450:	42ac      	cmp	r4, r5
 8012452:	d101      	bne.n	8012458 <__sfputs_r+0x12>
 8012454:	2000      	movs	r0, #0
 8012456:	e007      	b.n	8012468 <__sfputs_r+0x22>
 8012458:	f814 1b01 	ldrb.w	r1, [r4], #1
 801245c:	463a      	mov	r2, r7
 801245e:	4630      	mov	r0, r6
 8012460:	f7ff ffda 	bl	8012418 <__sfputc_r>
 8012464:	1c43      	adds	r3, r0, #1
 8012466:	d1f3      	bne.n	8012450 <__sfputs_r+0xa>
 8012468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801246c <_vfiprintf_r>:
 801246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012470:	460d      	mov	r5, r1
 8012472:	b09d      	sub	sp, #116	@ 0x74
 8012474:	4614      	mov	r4, r2
 8012476:	4698      	mov	r8, r3
 8012478:	4606      	mov	r6, r0
 801247a:	b118      	cbz	r0, 8012484 <_vfiprintf_r+0x18>
 801247c:	6a03      	ldr	r3, [r0, #32]
 801247e:	b90b      	cbnz	r3, 8012484 <_vfiprintf_r+0x18>
 8012480:	f7ff fc0c 	bl	8011c9c <__sinit>
 8012484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012486:	07d9      	lsls	r1, r3, #31
 8012488:	d405      	bmi.n	8012496 <_vfiprintf_r+0x2a>
 801248a:	89ab      	ldrh	r3, [r5, #12]
 801248c:	059a      	lsls	r2, r3, #22
 801248e:	d402      	bmi.n	8012496 <_vfiprintf_r+0x2a>
 8012490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012492:	f7ff fdd4 	bl	801203e <__retarget_lock_acquire_recursive>
 8012496:	89ab      	ldrh	r3, [r5, #12]
 8012498:	071b      	lsls	r3, r3, #28
 801249a:	d501      	bpl.n	80124a0 <_vfiprintf_r+0x34>
 801249c:	692b      	ldr	r3, [r5, #16]
 801249e:	b99b      	cbnz	r3, 80124c8 <_vfiprintf_r+0x5c>
 80124a0:	4629      	mov	r1, r5
 80124a2:	4630      	mov	r0, r6
 80124a4:	f000 fb84 	bl	8012bb0 <__swsetup_r>
 80124a8:	b170      	cbz	r0, 80124c8 <_vfiprintf_r+0x5c>
 80124aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124ac:	07dc      	lsls	r4, r3, #31
 80124ae:	d504      	bpl.n	80124ba <_vfiprintf_r+0x4e>
 80124b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124b4:	b01d      	add	sp, #116	@ 0x74
 80124b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ba:	89ab      	ldrh	r3, [r5, #12]
 80124bc:	0598      	lsls	r0, r3, #22
 80124be:	d4f7      	bmi.n	80124b0 <_vfiprintf_r+0x44>
 80124c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124c2:	f7ff fdbd 	bl	8012040 <__retarget_lock_release_recursive>
 80124c6:	e7f3      	b.n	80124b0 <_vfiprintf_r+0x44>
 80124c8:	2300      	movs	r3, #0
 80124ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80124cc:	2320      	movs	r3, #32
 80124ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80124d6:	2330      	movs	r3, #48	@ 0x30
 80124d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012688 <_vfiprintf_r+0x21c>
 80124dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80124e0:	f04f 0901 	mov.w	r9, #1
 80124e4:	4623      	mov	r3, r4
 80124e6:	469a      	mov	sl, r3
 80124e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124ec:	b10a      	cbz	r2, 80124f2 <_vfiprintf_r+0x86>
 80124ee:	2a25      	cmp	r2, #37	@ 0x25
 80124f0:	d1f9      	bne.n	80124e6 <_vfiprintf_r+0x7a>
 80124f2:	ebba 0b04 	subs.w	fp, sl, r4
 80124f6:	d00b      	beq.n	8012510 <_vfiprintf_r+0xa4>
 80124f8:	465b      	mov	r3, fp
 80124fa:	4622      	mov	r2, r4
 80124fc:	4629      	mov	r1, r5
 80124fe:	4630      	mov	r0, r6
 8012500:	f7ff ffa1 	bl	8012446 <__sfputs_r>
 8012504:	3001      	adds	r0, #1
 8012506:	f000 80a7 	beq.w	8012658 <_vfiprintf_r+0x1ec>
 801250a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801250c:	445a      	add	r2, fp
 801250e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012510:	f89a 3000 	ldrb.w	r3, [sl]
 8012514:	2b00      	cmp	r3, #0
 8012516:	f000 809f 	beq.w	8012658 <_vfiprintf_r+0x1ec>
 801251a:	2300      	movs	r3, #0
 801251c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012524:	f10a 0a01 	add.w	sl, sl, #1
 8012528:	9304      	str	r3, [sp, #16]
 801252a:	9307      	str	r3, [sp, #28]
 801252c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012530:	931a      	str	r3, [sp, #104]	@ 0x68
 8012532:	4654      	mov	r4, sl
 8012534:	2205      	movs	r2, #5
 8012536:	f814 1b01 	ldrb.w	r1, [r4], #1
 801253a:	4853      	ldr	r0, [pc, #332]	@ (8012688 <_vfiprintf_r+0x21c>)
 801253c:	f7ed fe68 	bl	8000210 <memchr>
 8012540:	9a04      	ldr	r2, [sp, #16]
 8012542:	b9d8      	cbnz	r0, 801257c <_vfiprintf_r+0x110>
 8012544:	06d1      	lsls	r1, r2, #27
 8012546:	bf44      	itt	mi
 8012548:	2320      	movmi	r3, #32
 801254a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801254e:	0713      	lsls	r3, r2, #28
 8012550:	bf44      	itt	mi
 8012552:	232b      	movmi	r3, #43	@ 0x2b
 8012554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012558:	f89a 3000 	ldrb.w	r3, [sl]
 801255c:	2b2a      	cmp	r3, #42	@ 0x2a
 801255e:	d015      	beq.n	801258c <_vfiprintf_r+0x120>
 8012560:	9a07      	ldr	r2, [sp, #28]
 8012562:	4654      	mov	r4, sl
 8012564:	2000      	movs	r0, #0
 8012566:	f04f 0c0a 	mov.w	ip, #10
 801256a:	4621      	mov	r1, r4
 801256c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012570:	3b30      	subs	r3, #48	@ 0x30
 8012572:	2b09      	cmp	r3, #9
 8012574:	d94b      	bls.n	801260e <_vfiprintf_r+0x1a2>
 8012576:	b1b0      	cbz	r0, 80125a6 <_vfiprintf_r+0x13a>
 8012578:	9207      	str	r2, [sp, #28]
 801257a:	e014      	b.n	80125a6 <_vfiprintf_r+0x13a>
 801257c:	eba0 0308 	sub.w	r3, r0, r8
 8012580:	fa09 f303 	lsl.w	r3, r9, r3
 8012584:	4313      	orrs	r3, r2
 8012586:	9304      	str	r3, [sp, #16]
 8012588:	46a2      	mov	sl, r4
 801258a:	e7d2      	b.n	8012532 <_vfiprintf_r+0xc6>
 801258c:	9b03      	ldr	r3, [sp, #12]
 801258e:	1d19      	adds	r1, r3, #4
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	9103      	str	r1, [sp, #12]
 8012594:	2b00      	cmp	r3, #0
 8012596:	bfbb      	ittet	lt
 8012598:	425b      	neglt	r3, r3
 801259a:	f042 0202 	orrlt.w	r2, r2, #2
 801259e:	9307      	strge	r3, [sp, #28]
 80125a0:	9307      	strlt	r3, [sp, #28]
 80125a2:	bfb8      	it	lt
 80125a4:	9204      	strlt	r2, [sp, #16]
 80125a6:	7823      	ldrb	r3, [r4, #0]
 80125a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80125aa:	d10a      	bne.n	80125c2 <_vfiprintf_r+0x156>
 80125ac:	7863      	ldrb	r3, [r4, #1]
 80125ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80125b0:	d132      	bne.n	8012618 <_vfiprintf_r+0x1ac>
 80125b2:	9b03      	ldr	r3, [sp, #12]
 80125b4:	1d1a      	adds	r2, r3, #4
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	9203      	str	r2, [sp, #12]
 80125ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125be:	3402      	adds	r4, #2
 80125c0:	9305      	str	r3, [sp, #20]
 80125c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012698 <_vfiprintf_r+0x22c>
 80125c6:	7821      	ldrb	r1, [r4, #0]
 80125c8:	2203      	movs	r2, #3
 80125ca:	4650      	mov	r0, sl
 80125cc:	f7ed fe20 	bl	8000210 <memchr>
 80125d0:	b138      	cbz	r0, 80125e2 <_vfiprintf_r+0x176>
 80125d2:	9b04      	ldr	r3, [sp, #16]
 80125d4:	eba0 000a 	sub.w	r0, r0, sl
 80125d8:	2240      	movs	r2, #64	@ 0x40
 80125da:	4082      	lsls	r2, r0
 80125dc:	4313      	orrs	r3, r2
 80125de:	3401      	adds	r4, #1
 80125e0:	9304      	str	r3, [sp, #16]
 80125e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125e6:	4829      	ldr	r0, [pc, #164]	@ (801268c <_vfiprintf_r+0x220>)
 80125e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80125ec:	2206      	movs	r2, #6
 80125ee:	f7ed fe0f 	bl	8000210 <memchr>
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d03f      	beq.n	8012676 <_vfiprintf_r+0x20a>
 80125f6:	4b26      	ldr	r3, [pc, #152]	@ (8012690 <_vfiprintf_r+0x224>)
 80125f8:	bb1b      	cbnz	r3, 8012642 <_vfiprintf_r+0x1d6>
 80125fa:	9b03      	ldr	r3, [sp, #12]
 80125fc:	3307      	adds	r3, #7
 80125fe:	f023 0307 	bic.w	r3, r3, #7
 8012602:	3308      	adds	r3, #8
 8012604:	9303      	str	r3, [sp, #12]
 8012606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012608:	443b      	add	r3, r7
 801260a:	9309      	str	r3, [sp, #36]	@ 0x24
 801260c:	e76a      	b.n	80124e4 <_vfiprintf_r+0x78>
 801260e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012612:	460c      	mov	r4, r1
 8012614:	2001      	movs	r0, #1
 8012616:	e7a8      	b.n	801256a <_vfiprintf_r+0xfe>
 8012618:	2300      	movs	r3, #0
 801261a:	3401      	adds	r4, #1
 801261c:	9305      	str	r3, [sp, #20]
 801261e:	4619      	mov	r1, r3
 8012620:	f04f 0c0a 	mov.w	ip, #10
 8012624:	4620      	mov	r0, r4
 8012626:	f810 2b01 	ldrb.w	r2, [r0], #1
 801262a:	3a30      	subs	r2, #48	@ 0x30
 801262c:	2a09      	cmp	r2, #9
 801262e:	d903      	bls.n	8012638 <_vfiprintf_r+0x1cc>
 8012630:	2b00      	cmp	r3, #0
 8012632:	d0c6      	beq.n	80125c2 <_vfiprintf_r+0x156>
 8012634:	9105      	str	r1, [sp, #20]
 8012636:	e7c4      	b.n	80125c2 <_vfiprintf_r+0x156>
 8012638:	fb0c 2101 	mla	r1, ip, r1, r2
 801263c:	4604      	mov	r4, r0
 801263e:	2301      	movs	r3, #1
 8012640:	e7f0      	b.n	8012624 <_vfiprintf_r+0x1b8>
 8012642:	ab03      	add	r3, sp, #12
 8012644:	9300      	str	r3, [sp, #0]
 8012646:	462a      	mov	r2, r5
 8012648:	4b12      	ldr	r3, [pc, #72]	@ (8012694 <_vfiprintf_r+0x228>)
 801264a:	a904      	add	r1, sp, #16
 801264c:	4630      	mov	r0, r6
 801264e:	f3af 8000 	nop.w
 8012652:	4607      	mov	r7, r0
 8012654:	1c78      	adds	r0, r7, #1
 8012656:	d1d6      	bne.n	8012606 <_vfiprintf_r+0x19a>
 8012658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801265a:	07d9      	lsls	r1, r3, #31
 801265c:	d405      	bmi.n	801266a <_vfiprintf_r+0x1fe>
 801265e:	89ab      	ldrh	r3, [r5, #12]
 8012660:	059a      	lsls	r2, r3, #22
 8012662:	d402      	bmi.n	801266a <_vfiprintf_r+0x1fe>
 8012664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012666:	f7ff fceb 	bl	8012040 <__retarget_lock_release_recursive>
 801266a:	89ab      	ldrh	r3, [r5, #12]
 801266c:	065b      	lsls	r3, r3, #25
 801266e:	f53f af1f 	bmi.w	80124b0 <_vfiprintf_r+0x44>
 8012672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012674:	e71e      	b.n	80124b4 <_vfiprintf_r+0x48>
 8012676:	ab03      	add	r3, sp, #12
 8012678:	9300      	str	r3, [sp, #0]
 801267a:	462a      	mov	r2, r5
 801267c:	4b05      	ldr	r3, [pc, #20]	@ (8012694 <_vfiprintf_r+0x228>)
 801267e:	a904      	add	r1, sp, #16
 8012680:	4630      	mov	r0, r6
 8012682:	f000 f879 	bl	8012778 <_printf_i>
 8012686:	e7e4      	b.n	8012652 <_vfiprintf_r+0x1e6>
 8012688:	08013ab8 	.word	0x08013ab8
 801268c:	08013ac2 	.word	0x08013ac2
 8012690:	00000000 	.word	0x00000000
 8012694:	08012447 	.word	0x08012447
 8012698:	08013abe 	.word	0x08013abe

0801269c <_printf_common>:
 801269c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126a0:	4616      	mov	r6, r2
 80126a2:	4698      	mov	r8, r3
 80126a4:	688a      	ldr	r2, [r1, #8]
 80126a6:	690b      	ldr	r3, [r1, #16]
 80126a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80126ac:	4293      	cmp	r3, r2
 80126ae:	bfb8      	it	lt
 80126b0:	4613      	movlt	r3, r2
 80126b2:	6033      	str	r3, [r6, #0]
 80126b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80126b8:	4607      	mov	r7, r0
 80126ba:	460c      	mov	r4, r1
 80126bc:	b10a      	cbz	r2, 80126c2 <_printf_common+0x26>
 80126be:	3301      	adds	r3, #1
 80126c0:	6033      	str	r3, [r6, #0]
 80126c2:	6823      	ldr	r3, [r4, #0]
 80126c4:	0699      	lsls	r1, r3, #26
 80126c6:	bf42      	ittt	mi
 80126c8:	6833      	ldrmi	r3, [r6, #0]
 80126ca:	3302      	addmi	r3, #2
 80126cc:	6033      	strmi	r3, [r6, #0]
 80126ce:	6825      	ldr	r5, [r4, #0]
 80126d0:	f015 0506 	ands.w	r5, r5, #6
 80126d4:	d106      	bne.n	80126e4 <_printf_common+0x48>
 80126d6:	f104 0a19 	add.w	sl, r4, #25
 80126da:	68e3      	ldr	r3, [r4, #12]
 80126dc:	6832      	ldr	r2, [r6, #0]
 80126de:	1a9b      	subs	r3, r3, r2
 80126e0:	42ab      	cmp	r3, r5
 80126e2:	dc26      	bgt.n	8012732 <_printf_common+0x96>
 80126e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80126e8:	6822      	ldr	r2, [r4, #0]
 80126ea:	3b00      	subs	r3, #0
 80126ec:	bf18      	it	ne
 80126ee:	2301      	movne	r3, #1
 80126f0:	0692      	lsls	r2, r2, #26
 80126f2:	d42b      	bmi.n	801274c <_printf_common+0xb0>
 80126f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80126f8:	4641      	mov	r1, r8
 80126fa:	4638      	mov	r0, r7
 80126fc:	47c8      	blx	r9
 80126fe:	3001      	adds	r0, #1
 8012700:	d01e      	beq.n	8012740 <_printf_common+0xa4>
 8012702:	6823      	ldr	r3, [r4, #0]
 8012704:	6922      	ldr	r2, [r4, #16]
 8012706:	f003 0306 	and.w	r3, r3, #6
 801270a:	2b04      	cmp	r3, #4
 801270c:	bf02      	ittt	eq
 801270e:	68e5      	ldreq	r5, [r4, #12]
 8012710:	6833      	ldreq	r3, [r6, #0]
 8012712:	1aed      	subeq	r5, r5, r3
 8012714:	68a3      	ldr	r3, [r4, #8]
 8012716:	bf0c      	ite	eq
 8012718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801271c:	2500      	movne	r5, #0
 801271e:	4293      	cmp	r3, r2
 8012720:	bfc4      	itt	gt
 8012722:	1a9b      	subgt	r3, r3, r2
 8012724:	18ed      	addgt	r5, r5, r3
 8012726:	2600      	movs	r6, #0
 8012728:	341a      	adds	r4, #26
 801272a:	42b5      	cmp	r5, r6
 801272c:	d11a      	bne.n	8012764 <_printf_common+0xc8>
 801272e:	2000      	movs	r0, #0
 8012730:	e008      	b.n	8012744 <_printf_common+0xa8>
 8012732:	2301      	movs	r3, #1
 8012734:	4652      	mov	r2, sl
 8012736:	4641      	mov	r1, r8
 8012738:	4638      	mov	r0, r7
 801273a:	47c8      	blx	r9
 801273c:	3001      	adds	r0, #1
 801273e:	d103      	bne.n	8012748 <_printf_common+0xac>
 8012740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012748:	3501      	adds	r5, #1
 801274a:	e7c6      	b.n	80126da <_printf_common+0x3e>
 801274c:	18e1      	adds	r1, r4, r3
 801274e:	1c5a      	adds	r2, r3, #1
 8012750:	2030      	movs	r0, #48	@ 0x30
 8012752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012756:	4422      	add	r2, r4
 8012758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801275c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012760:	3302      	adds	r3, #2
 8012762:	e7c7      	b.n	80126f4 <_printf_common+0x58>
 8012764:	2301      	movs	r3, #1
 8012766:	4622      	mov	r2, r4
 8012768:	4641      	mov	r1, r8
 801276a:	4638      	mov	r0, r7
 801276c:	47c8      	blx	r9
 801276e:	3001      	adds	r0, #1
 8012770:	d0e6      	beq.n	8012740 <_printf_common+0xa4>
 8012772:	3601      	adds	r6, #1
 8012774:	e7d9      	b.n	801272a <_printf_common+0x8e>
	...

08012778 <_printf_i>:
 8012778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801277c:	7e0f      	ldrb	r7, [r1, #24]
 801277e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012780:	2f78      	cmp	r7, #120	@ 0x78
 8012782:	4691      	mov	r9, r2
 8012784:	4680      	mov	r8, r0
 8012786:	460c      	mov	r4, r1
 8012788:	469a      	mov	sl, r3
 801278a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801278e:	d807      	bhi.n	80127a0 <_printf_i+0x28>
 8012790:	2f62      	cmp	r7, #98	@ 0x62
 8012792:	d80a      	bhi.n	80127aa <_printf_i+0x32>
 8012794:	2f00      	cmp	r7, #0
 8012796:	f000 80d2 	beq.w	801293e <_printf_i+0x1c6>
 801279a:	2f58      	cmp	r7, #88	@ 0x58
 801279c:	f000 80b9 	beq.w	8012912 <_printf_i+0x19a>
 80127a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80127a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80127a8:	e03a      	b.n	8012820 <_printf_i+0xa8>
 80127aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80127ae:	2b15      	cmp	r3, #21
 80127b0:	d8f6      	bhi.n	80127a0 <_printf_i+0x28>
 80127b2:	a101      	add	r1, pc, #4	@ (adr r1, 80127b8 <_printf_i+0x40>)
 80127b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80127b8:	08012811 	.word	0x08012811
 80127bc:	08012825 	.word	0x08012825
 80127c0:	080127a1 	.word	0x080127a1
 80127c4:	080127a1 	.word	0x080127a1
 80127c8:	080127a1 	.word	0x080127a1
 80127cc:	080127a1 	.word	0x080127a1
 80127d0:	08012825 	.word	0x08012825
 80127d4:	080127a1 	.word	0x080127a1
 80127d8:	080127a1 	.word	0x080127a1
 80127dc:	080127a1 	.word	0x080127a1
 80127e0:	080127a1 	.word	0x080127a1
 80127e4:	08012925 	.word	0x08012925
 80127e8:	0801284f 	.word	0x0801284f
 80127ec:	080128df 	.word	0x080128df
 80127f0:	080127a1 	.word	0x080127a1
 80127f4:	080127a1 	.word	0x080127a1
 80127f8:	08012947 	.word	0x08012947
 80127fc:	080127a1 	.word	0x080127a1
 8012800:	0801284f 	.word	0x0801284f
 8012804:	080127a1 	.word	0x080127a1
 8012808:	080127a1 	.word	0x080127a1
 801280c:	080128e7 	.word	0x080128e7
 8012810:	6833      	ldr	r3, [r6, #0]
 8012812:	1d1a      	adds	r2, r3, #4
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	6032      	str	r2, [r6, #0]
 8012818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801281c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012820:	2301      	movs	r3, #1
 8012822:	e09d      	b.n	8012960 <_printf_i+0x1e8>
 8012824:	6833      	ldr	r3, [r6, #0]
 8012826:	6820      	ldr	r0, [r4, #0]
 8012828:	1d19      	adds	r1, r3, #4
 801282a:	6031      	str	r1, [r6, #0]
 801282c:	0606      	lsls	r6, r0, #24
 801282e:	d501      	bpl.n	8012834 <_printf_i+0xbc>
 8012830:	681d      	ldr	r5, [r3, #0]
 8012832:	e003      	b.n	801283c <_printf_i+0xc4>
 8012834:	0645      	lsls	r5, r0, #25
 8012836:	d5fb      	bpl.n	8012830 <_printf_i+0xb8>
 8012838:	f9b3 5000 	ldrsh.w	r5, [r3]
 801283c:	2d00      	cmp	r5, #0
 801283e:	da03      	bge.n	8012848 <_printf_i+0xd0>
 8012840:	232d      	movs	r3, #45	@ 0x2d
 8012842:	426d      	negs	r5, r5
 8012844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012848:	4859      	ldr	r0, [pc, #356]	@ (80129b0 <_printf_i+0x238>)
 801284a:	230a      	movs	r3, #10
 801284c:	e011      	b.n	8012872 <_printf_i+0xfa>
 801284e:	6821      	ldr	r1, [r4, #0]
 8012850:	6833      	ldr	r3, [r6, #0]
 8012852:	0608      	lsls	r0, r1, #24
 8012854:	f853 5b04 	ldr.w	r5, [r3], #4
 8012858:	d402      	bmi.n	8012860 <_printf_i+0xe8>
 801285a:	0649      	lsls	r1, r1, #25
 801285c:	bf48      	it	mi
 801285e:	b2ad      	uxthmi	r5, r5
 8012860:	2f6f      	cmp	r7, #111	@ 0x6f
 8012862:	4853      	ldr	r0, [pc, #332]	@ (80129b0 <_printf_i+0x238>)
 8012864:	6033      	str	r3, [r6, #0]
 8012866:	bf14      	ite	ne
 8012868:	230a      	movne	r3, #10
 801286a:	2308      	moveq	r3, #8
 801286c:	2100      	movs	r1, #0
 801286e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012872:	6866      	ldr	r6, [r4, #4]
 8012874:	60a6      	str	r6, [r4, #8]
 8012876:	2e00      	cmp	r6, #0
 8012878:	bfa2      	ittt	ge
 801287a:	6821      	ldrge	r1, [r4, #0]
 801287c:	f021 0104 	bicge.w	r1, r1, #4
 8012880:	6021      	strge	r1, [r4, #0]
 8012882:	b90d      	cbnz	r5, 8012888 <_printf_i+0x110>
 8012884:	2e00      	cmp	r6, #0
 8012886:	d04b      	beq.n	8012920 <_printf_i+0x1a8>
 8012888:	4616      	mov	r6, r2
 801288a:	fbb5 f1f3 	udiv	r1, r5, r3
 801288e:	fb03 5711 	mls	r7, r3, r1, r5
 8012892:	5dc7      	ldrb	r7, [r0, r7]
 8012894:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012898:	462f      	mov	r7, r5
 801289a:	42bb      	cmp	r3, r7
 801289c:	460d      	mov	r5, r1
 801289e:	d9f4      	bls.n	801288a <_printf_i+0x112>
 80128a0:	2b08      	cmp	r3, #8
 80128a2:	d10b      	bne.n	80128bc <_printf_i+0x144>
 80128a4:	6823      	ldr	r3, [r4, #0]
 80128a6:	07df      	lsls	r7, r3, #31
 80128a8:	d508      	bpl.n	80128bc <_printf_i+0x144>
 80128aa:	6923      	ldr	r3, [r4, #16]
 80128ac:	6861      	ldr	r1, [r4, #4]
 80128ae:	4299      	cmp	r1, r3
 80128b0:	bfde      	ittt	le
 80128b2:	2330      	movle	r3, #48	@ 0x30
 80128b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80128b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80128bc:	1b92      	subs	r2, r2, r6
 80128be:	6122      	str	r2, [r4, #16]
 80128c0:	f8cd a000 	str.w	sl, [sp]
 80128c4:	464b      	mov	r3, r9
 80128c6:	aa03      	add	r2, sp, #12
 80128c8:	4621      	mov	r1, r4
 80128ca:	4640      	mov	r0, r8
 80128cc:	f7ff fee6 	bl	801269c <_printf_common>
 80128d0:	3001      	adds	r0, #1
 80128d2:	d14a      	bne.n	801296a <_printf_i+0x1f2>
 80128d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80128d8:	b004      	add	sp, #16
 80128da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128de:	6823      	ldr	r3, [r4, #0]
 80128e0:	f043 0320 	orr.w	r3, r3, #32
 80128e4:	6023      	str	r3, [r4, #0]
 80128e6:	4833      	ldr	r0, [pc, #204]	@ (80129b4 <_printf_i+0x23c>)
 80128e8:	2778      	movs	r7, #120	@ 0x78
 80128ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80128ee:	6823      	ldr	r3, [r4, #0]
 80128f0:	6831      	ldr	r1, [r6, #0]
 80128f2:	061f      	lsls	r7, r3, #24
 80128f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80128f8:	d402      	bmi.n	8012900 <_printf_i+0x188>
 80128fa:	065f      	lsls	r7, r3, #25
 80128fc:	bf48      	it	mi
 80128fe:	b2ad      	uxthmi	r5, r5
 8012900:	6031      	str	r1, [r6, #0]
 8012902:	07d9      	lsls	r1, r3, #31
 8012904:	bf44      	itt	mi
 8012906:	f043 0320 	orrmi.w	r3, r3, #32
 801290a:	6023      	strmi	r3, [r4, #0]
 801290c:	b11d      	cbz	r5, 8012916 <_printf_i+0x19e>
 801290e:	2310      	movs	r3, #16
 8012910:	e7ac      	b.n	801286c <_printf_i+0xf4>
 8012912:	4827      	ldr	r0, [pc, #156]	@ (80129b0 <_printf_i+0x238>)
 8012914:	e7e9      	b.n	80128ea <_printf_i+0x172>
 8012916:	6823      	ldr	r3, [r4, #0]
 8012918:	f023 0320 	bic.w	r3, r3, #32
 801291c:	6023      	str	r3, [r4, #0]
 801291e:	e7f6      	b.n	801290e <_printf_i+0x196>
 8012920:	4616      	mov	r6, r2
 8012922:	e7bd      	b.n	80128a0 <_printf_i+0x128>
 8012924:	6833      	ldr	r3, [r6, #0]
 8012926:	6825      	ldr	r5, [r4, #0]
 8012928:	6961      	ldr	r1, [r4, #20]
 801292a:	1d18      	adds	r0, r3, #4
 801292c:	6030      	str	r0, [r6, #0]
 801292e:	062e      	lsls	r6, r5, #24
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	d501      	bpl.n	8012938 <_printf_i+0x1c0>
 8012934:	6019      	str	r1, [r3, #0]
 8012936:	e002      	b.n	801293e <_printf_i+0x1c6>
 8012938:	0668      	lsls	r0, r5, #25
 801293a:	d5fb      	bpl.n	8012934 <_printf_i+0x1bc>
 801293c:	8019      	strh	r1, [r3, #0]
 801293e:	2300      	movs	r3, #0
 8012940:	6123      	str	r3, [r4, #16]
 8012942:	4616      	mov	r6, r2
 8012944:	e7bc      	b.n	80128c0 <_printf_i+0x148>
 8012946:	6833      	ldr	r3, [r6, #0]
 8012948:	1d1a      	adds	r2, r3, #4
 801294a:	6032      	str	r2, [r6, #0]
 801294c:	681e      	ldr	r6, [r3, #0]
 801294e:	6862      	ldr	r2, [r4, #4]
 8012950:	2100      	movs	r1, #0
 8012952:	4630      	mov	r0, r6
 8012954:	f7ed fc5c 	bl	8000210 <memchr>
 8012958:	b108      	cbz	r0, 801295e <_printf_i+0x1e6>
 801295a:	1b80      	subs	r0, r0, r6
 801295c:	6060      	str	r0, [r4, #4]
 801295e:	6863      	ldr	r3, [r4, #4]
 8012960:	6123      	str	r3, [r4, #16]
 8012962:	2300      	movs	r3, #0
 8012964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012968:	e7aa      	b.n	80128c0 <_printf_i+0x148>
 801296a:	6923      	ldr	r3, [r4, #16]
 801296c:	4632      	mov	r2, r6
 801296e:	4649      	mov	r1, r9
 8012970:	4640      	mov	r0, r8
 8012972:	47d0      	blx	sl
 8012974:	3001      	adds	r0, #1
 8012976:	d0ad      	beq.n	80128d4 <_printf_i+0x15c>
 8012978:	6823      	ldr	r3, [r4, #0]
 801297a:	079b      	lsls	r3, r3, #30
 801297c:	d413      	bmi.n	80129a6 <_printf_i+0x22e>
 801297e:	68e0      	ldr	r0, [r4, #12]
 8012980:	9b03      	ldr	r3, [sp, #12]
 8012982:	4298      	cmp	r0, r3
 8012984:	bfb8      	it	lt
 8012986:	4618      	movlt	r0, r3
 8012988:	e7a6      	b.n	80128d8 <_printf_i+0x160>
 801298a:	2301      	movs	r3, #1
 801298c:	4632      	mov	r2, r6
 801298e:	4649      	mov	r1, r9
 8012990:	4640      	mov	r0, r8
 8012992:	47d0      	blx	sl
 8012994:	3001      	adds	r0, #1
 8012996:	d09d      	beq.n	80128d4 <_printf_i+0x15c>
 8012998:	3501      	adds	r5, #1
 801299a:	68e3      	ldr	r3, [r4, #12]
 801299c:	9903      	ldr	r1, [sp, #12]
 801299e:	1a5b      	subs	r3, r3, r1
 80129a0:	42ab      	cmp	r3, r5
 80129a2:	dcf2      	bgt.n	801298a <_printf_i+0x212>
 80129a4:	e7eb      	b.n	801297e <_printf_i+0x206>
 80129a6:	2500      	movs	r5, #0
 80129a8:	f104 0619 	add.w	r6, r4, #25
 80129ac:	e7f5      	b.n	801299a <_printf_i+0x222>
 80129ae:	bf00      	nop
 80129b0:	08013ac9 	.word	0x08013ac9
 80129b4:	08013ada 	.word	0x08013ada

080129b8 <__sflush_r>:
 80129b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80129bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c0:	0716      	lsls	r6, r2, #28
 80129c2:	4605      	mov	r5, r0
 80129c4:	460c      	mov	r4, r1
 80129c6:	d454      	bmi.n	8012a72 <__sflush_r+0xba>
 80129c8:	684b      	ldr	r3, [r1, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	dc02      	bgt.n	80129d4 <__sflush_r+0x1c>
 80129ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	dd48      	ble.n	8012a66 <__sflush_r+0xae>
 80129d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129d6:	2e00      	cmp	r6, #0
 80129d8:	d045      	beq.n	8012a66 <__sflush_r+0xae>
 80129da:	2300      	movs	r3, #0
 80129dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80129e0:	682f      	ldr	r7, [r5, #0]
 80129e2:	6a21      	ldr	r1, [r4, #32]
 80129e4:	602b      	str	r3, [r5, #0]
 80129e6:	d030      	beq.n	8012a4a <__sflush_r+0x92>
 80129e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80129ea:	89a3      	ldrh	r3, [r4, #12]
 80129ec:	0759      	lsls	r1, r3, #29
 80129ee:	d505      	bpl.n	80129fc <__sflush_r+0x44>
 80129f0:	6863      	ldr	r3, [r4, #4]
 80129f2:	1ad2      	subs	r2, r2, r3
 80129f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80129f6:	b10b      	cbz	r3, 80129fc <__sflush_r+0x44>
 80129f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80129fa:	1ad2      	subs	r2, r2, r3
 80129fc:	2300      	movs	r3, #0
 80129fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012a00:	6a21      	ldr	r1, [r4, #32]
 8012a02:	4628      	mov	r0, r5
 8012a04:	47b0      	blx	r6
 8012a06:	1c43      	adds	r3, r0, #1
 8012a08:	89a3      	ldrh	r3, [r4, #12]
 8012a0a:	d106      	bne.n	8012a1a <__sflush_r+0x62>
 8012a0c:	6829      	ldr	r1, [r5, #0]
 8012a0e:	291d      	cmp	r1, #29
 8012a10:	d82b      	bhi.n	8012a6a <__sflush_r+0xb2>
 8012a12:	4a2a      	ldr	r2, [pc, #168]	@ (8012abc <__sflush_r+0x104>)
 8012a14:	410a      	asrs	r2, r1
 8012a16:	07d6      	lsls	r6, r2, #31
 8012a18:	d427      	bmi.n	8012a6a <__sflush_r+0xb2>
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	6062      	str	r2, [r4, #4]
 8012a1e:	04d9      	lsls	r1, r3, #19
 8012a20:	6922      	ldr	r2, [r4, #16]
 8012a22:	6022      	str	r2, [r4, #0]
 8012a24:	d504      	bpl.n	8012a30 <__sflush_r+0x78>
 8012a26:	1c42      	adds	r2, r0, #1
 8012a28:	d101      	bne.n	8012a2e <__sflush_r+0x76>
 8012a2a:	682b      	ldr	r3, [r5, #0]
 8012a2c:	b903      	cbnz	r3, 8012a30 <__sflush_r+0x78>
 8012a2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a32:	602f      	str	r7, [r5, #0]
 8012a34:	b1b9      	cbz	r1, 8012a66 <__sflush_r+0xae>
 8012a36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a3a:	4299      	cmp	r1, r3
 8012a3c:	d002      	beq.n	8012a44 <__sflush_r+0x8c>
 8012a3e:	4628      	mov	r0, r5
 8012a40:	f7ff fb40 	bl	80120c4 <_free_r>
 8012a44:	2300      	movs	r3, #0
 8012a46:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a48:	e00d      	b.n	8012a66 <__sflush_r+0xae>
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	4628      	mov	r0, r5
 8012a4e:	47b0      	blx	r6
 8012a50:	4602      	mov	r2, r0
 8012a52:	1c50      	adds	r0, r2, #1
 8012a54:	d1c9      	bne.n	80129ea <__sflush_r+0x32>
 8012a56:	682b      	ldr	r3, [r5, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d0c6      	beq.n	80129ea <__sflush_r+0x32>
 8012a5c:	2b1d      	cmp	r3, #29
 8012a5e:	d001      	beq.n	8012a64 <__sflush_r+0xac>
 8012a60:	2b16      	cmp	r3, #22
 8012a62:	d11e      	bne.n	8012aa2 <__sflush_r+0xea>
 8012a64:	602f      	str	r7, [r5, #0]
 8012a66:	2000      	movs	r0, #0
 8012a68:	e022      	b.n	8012ab0 <__sflush_r+0xf8>
 8012a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a6e:	b21b      	sxth	r3, r3
 8012a70:	e01b      	b.n	8012aaa <__sflush_r+0xf2>
 8012a72:	690f      	ldr	r7, [r1, #16]
 8012a74:	2f00      	cmp	r7, #0
 8012a76:	d0f6      	beq.n	8012a66 <__sflush_r+0xae>
 8012a78:	0793      	lsls	r3, r2, #30
 8012a7a:	680e      	ldr	r6, [r1, #0]
 8012a7c:	bf08      	it	eq
 8012a7e:	694b      	ldreq	r3, [r1, #20]
 8012a80:	600f      	str	r7, [r1, #0]
 8012a82:	bf18      	it	ne
 8012a84:	2300      	movne	r3, #0
 8012a86:	eba6 0807 	sub.w	r8, r6, r7
 8012a8a:	608b      	str	r3, [r1, #8]
 8012a8c:	f1b8 0f00 	cmp.w	r8, #0
 8012a90:	dde9      	ble.n	8012a66 <__sflush_r+0xae>
 8012a92:	6a21      	ldr	r1, [r4, #32]
 8012a94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012a96:	4643      	mov	r3, r8
 8012a98:	463a      	mov	r2, r7
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	47b0      	blx	r6
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	dc08      	bgt.n	8012ab4 <__sflush_r+0xfc>
 8012aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012aaa:	81a3      	strh	r3, [r4, #12]
 8012aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ab4:	4407      	add	r7, r0
 8012ab6:	eba8 0800 	sub.w	r8, r8, r0
 8012aba:	e7e7      	b.n	8012a8c <__sflush_r+0xd4>
 8012abc:	dfbffffe 	.word	0xdfbffffe

08012ac0 <_fflush_r>:
 8012ac0:	b538      	push	{r3, r4, r5, lr}
 8012ac2:	690b      	ldr	r3, [r1, #16]
 8012ac4:	4605      	mov	r5, r0
 8012ac6:	460c      	mov	r4, r1
 8012ac8:	b913      	cbnz	r3, 8012ad0 <_fflush_r+0x10>
 8012aca:	2500      	movs	r5, #0
 8012acc:	4628      	mov	r0, r5
 8012ace:	bd38      	pop	{r3, r4, r5, pc}
 8012ad0:	b118      	cbz	r0, 8012ada <_fflush_r+0x1a>
 8012ad2:	6a03      	ldr	r3, [r0, #32]
 8012ad4:	b90b      	cbnz	r3, 8012ada <_fflush_r+0x1a>
 8012ad6:	f7ff f8e1 	bl	8011c9c <__sinit>
 8012ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d0f3      	beq.n	8012aca <_fflush_r+0xa>
 8012ae2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012ae4:	07d0      	lsls	r0, r2, #31
 8012ae6:	d404      	bmi.n	8012af2 <_fflush_r+0x32>
 8012ae8:	0599      	lsls	r1, r3, #22
 8012aea:	d402      	bmi.n	8012af2 <_fflush_r+0x32>
 8012aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012aee:	f7ff faa6 	bl	801203e <__retarget_lock_acquire_recursive>
 8012af2:	4628      	mov	r0, r5
 8012af4:	4621      	mov	r1, r4
 8012af6:	f7ff ff5f 	bl	80129b8 <__sflush_r>
 8012afa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012afc:	07da      	lsls	r2, r3, #31
 8012afe:	4605      	mov	r5, r0
 8012b00:	d4e4      	bmi.n	8012acc <_fflush_r+0xc>
 8012b02:	89a3      	ldrh	r3, [r4, #12]
 8012b04:	059b      	lsls	r3, r3, #22
 8012b06:	d4e1      	bmi.n	8012acc <_fflush_r+0xc>
 8012b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b0a:	f7ff fa99 	bl	8012040 <__retarget_lock_release_recursive>
 8012b0e:	e7dd      	b.n	8012acc <_fflush_r+0xc>

08012b10 <fiprintf>:
 8012b10:	b40e      	push	{r1, r2, r3}
 8012b12:	b503      	push	{r0, r1, lr}
 8012b14:	4601      	mov	r1, r0
 8012b16:	ab03      	add	r3, sp, #12
 8012b18:	4805      	ldr	r0, [pc, #20]	@ (8012b30 <fiprintf+0x20>)
 8012b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b1e:	6800      	ldr	r0, [r0, #0]
 8012b20:	9301      	str	r3, [sp, #4]
 8012b22:	f7ff fca3 	bl	801246c <_vfiprintf_r>
 8012b26:	b002      	add	sp, #8
 8012b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b2c:	b003      	add	sp, #12
 8012b2e:	4770      	bx	lr
 8012b30:	200001e4 	.word	0x200001e4

08012b34 <__swbuf_r>:
 8012b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b36:	460e      	mov	r6, r1
 8012b38:	4614      	mov	r4, r2
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	b118      	cbz	r0, 8012b46 <__swbuf_r+0x12>
 8012b3e:	6a03      	ldr	r3, [r0, #32]
 8012b40:	b90b      	cbnz	r3, 8012b46 <__swbuf_r+0x12>
 8012b42:	f7ff f8ab 	bl	8011c9c <__sinit>
 8012b46:	69a3      	ldr	r3, [r4, #24]
 8012b48:	60a3      	str	r3, [r4, #8]
 8012b4a:	89a3      	ldrh	r3, [r4, #12]
 8012b4c:	071a      	lsls	r2, r3, #28
 8012b4e:	d501      	bpl.n	8012b54 <__swbuf_r+0x20>
 8012b50:	6923      	ldr	r3, [r4, #16]
 8012b52:	b943      	cbnz	r3, 8012b66 <__swbuf_r+0x32>
 8012b54:	4621      	mov	r1, r4
 8012b56:	4628      	mov	r0, r5
 8012b58:	f000 f82a 	bl	8012bb0 <__swsetup_r>
 8012b5c:	b118      	cbz	r0, 8012b66 <__swbuf_r+0x32>
 8012b5e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012b62:	4638      	mov	r0, r7
 8012b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b66:	6823      	ldr	r3, [r4, #0]
 8012b68:	6922      	ldr	r2, [r4, #16]
 8012b6a:	1a98      	subs	r0, r3, r2
 8012b6c:	6963      	ldr	r3, [r4, #20]
 8012b6e:	b2f6      	uxtb	r6, r6
 8012b70:	4283      	cmp	r3, r0
 8012b72:	4637      	mov	r7, r6
 8012b74:	dc05      	bgt.n	8012b82 <__swbuf_r+0x4e>
 8012b76:	4621      	mov	r1, r4
 8012b78:	4628      	mov	r0, r5
 8012b7a:	f7ff ffa1 	bl	8012ac0 <_fflush_r>
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d1ed      	bne.n	8012b5e <__swbuf_r+0x2a>
 8012b82:	68a3      	ldr	r3, [r4, #8]
 8012b84:	3b01      	subs	r3, #1
 8012b86:	60a3      	str	r3, [r4, #8]
 8012b88:	6823      	ldr	r3, [r4, #0]
 8012b8a:	1c5a      	adds	r2, r3, #1
 8012b8c:	6022      	str	r2, [r4, #0]
 8012b8e:	701e      	strb	r6, [r3, #0]
 8012b90:	6962      	ldr	r2, [r4, #20]
 8012b92:	1c43      	adds	r3, r0, #1
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d004      	beq.n	8012ba2 <__swbuf_r+0x6e>
 8012b98:	89a3      	ldrh	r3, [r4, #12]
 8012b9a:	07db      	lsls	r3, r3, #31
 8012b9c:	d5e1      	bpl.n	8012b62 <__swbuf_r+0x2e>
 8012b9e:	2e0a      	cmp	r6, #10
 8012ba0:	d1df      	bne.n	8012b62 <__swbuf_r+0x2e>
 8012ba2:	4621      	mov	r1, r4
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	f7ff ff8b 	bl	8012ac0 <_fflush_r>
 8012baa:	2800      	cmp	r0, #0
 8012bac:	d0d9      	beq.n	8012b62 <__swbuf_r+0x2e>
 8012bae:	e7d6      	b.n	8012b5e <__swbuf_r+0x2a>

08012bb0 <__swsetup_r>:
 8012bb0:	b538      	push	{r3, r4, r5, lr}
 8012bb2:	4b29      	ldr	r3, [pc, #164]	@ (8012c58 <__swsetup_r+0xa8>)
 8012bb4:	4605      	mov	r5, r0
 8012bb6:	6818      	ldr	r0, [r3, #0]
 8012bb8:	460c      	mov	r4, r1
 8012bba:	b118      	cbz	r0, 8012bc4 <__swsetup_r+0x14>
 8012bbc:	6a03      	ldr	r3, [r0, #32]
 8012bbe:	b90b      	cbnz	r3, 8012bc4 <__swsetup_r+0x14>
 8012bc0:	f7ff f86c 	bl	8011c9c <__sinit>
 8012bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bc8:	0719      	lsls	r1, r3, #28
 8012bca:	d422      	bmi.n	8012c12 <__swsetup_r+0x62>
 8012bcc:	06da      	lsls	r2, r3, #27
 8012bce:	d407      	bmi.n	8012be0 <__swsetup_r+0x30>
 8012bd0:	2209      	movs	r2, #9
 8012bd2:	602a      	str	r2, [r5, #0]
 8012bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bd8:	81a3      	strh	r3, [r4, #12]
 8012bda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012bde:	e033      	b.n	8012c48 <__swsetup_r+0x98>
 8012be0:	0758      	lsls	r0, r3, #29
 8012be2:	d512      	bpl.n	8012c0a <__swsetup_r+0x5a>
 8012be4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012be6:	b141      	cbz	r1, 8012bfa <__swsetup_r+0x4a>
 8012be8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012bec:	4299      	cmp	r1, r3
 8012bee:	d002      	beq.n	8012bf6 <__swsetup_r+0x46>
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	f7ff fa67 	bl	80120c4 <_free_r>
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8012bfa:	89a3      	ldrh	r3, [r4, #12]
 8012bfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012c00:	81a3      	strh	r3, [r4, #12]
 8012c02:	2300      	movs	r3, #0
 8012c04:	6063      	str	r3, [r4, #4]
 8012c06:	6923      	ldr	r3, [r4, #16]
 8012c08:	6023      	str	r3, [r4, #0]
 8012c0a:	89a3      	ldrh	r3, [r4, #12]
 8012c0c:	f043 0308 	orr.w	r3, r3, #8
 8012c10:	81a3      	strh	r3, [r4, #12]
 8012c12:	6923      	ldr	r3, [r4, #16]
 8012c14:	b94b      	cbnz	r3, 8012c2a <__swsetup_r+0x7a>
 8012c16:	89a3      	ldrh	r3, [r4, #12]
 8012c18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c20:	d003      	beq.n	8012c2a <__swsetup_r+0x7a>
 8012c22:	4621      	mov	r1, r4
 8012c24:	4628      	mov	r0, r5
 8012c26:	f000 f846 	bl	8012cb6 <__smakebuf_r>
 8012c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c2e:	f013 0201 	ands.w	r2, r3, #1
 8012c32:	d00a      	beq.n	8012c4a <__swsetup_r+0x9a>
 8012c34:	2200      	movs	r2, #0
 8012c36:	60a2      	str	r2, [r4, #8]
 8012c38:	6962      	ldr	r2, [r4, #20]
 8012c3a:	4252      	negs	r2, r2
 8012c3c:	61a2      	str	r2, [r4, #24]
 8012c3e:	6922      	ldr	r2, [r4, #16]
 8012c40:	b942      	cbnz	r2, 8012c54 <__swsetup_r+0xa4>
 8012c42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012c46:	d1c5      	bne.n	8012bd4 <__swsetup_r+0x24>
 8012c48:	bd38      	pop	{r3, r4, r5, pc}
 8012c4a:	0799      	lsls	r1, r3, #30
 8012c4c:	bf58      	it	pl
 8012c4e:	6962      	ldrpl	r2, [r4, #20]
 8012c50:	60a2      	str	r2, [r4, #8]
 8012c52:	e7f4      	b.n	8012c3e <__swsetup_r+0x8e>
 8012c54:	2000      	movs	r0, #0
 8012c56:	e7f7      	b.n	8012c48 <__swsetup_r+0x98>
 8012c58:	200001e4 	.word	0x200001e4

08012c5c <abort>:
 8012c5c:	b508      	push	{r3, lr}
 8012c5e:	2006      	movs	r0, #6
 8012c60:	f000 f88e 	bl	8012d80 <raise>
 8012c64:	2001      	movs	r0, #1
 8012c66:	f7ef fb09 	bl	800227c <_exit>

08012c6a <__swhatbuf_r>:
 8012c6a:	b570      	push	{r4, r5, r6, lr}
 8012c6c:	460c      	mov	r4, r1
 8012c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c72:	2900      	cmp	r1, #0
 8012c74:	b096      	sub	sp, #88	@ 0x58
 8012c76:	4615      	mov	r5, r2
 8012c78:	461e      	mov	r6, r3
 8012c7a:	da0d      	bge.n	8012c98 <__swhatbuf_r+0x2e>
 8012c7c:	89a3      	ldrh	r3, [r4, #12]
 8012c7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012c82:	f04f 0100 	mov.w	r1, #0
 8012c86:	bf14      	ite	ne
 8012c88:	2340      	movne	r3, #64	@ 0x40
 8012c8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012c8e:	2000      	movs	r0, #0
 8012c90:	6031      	str	r1, [r6, #0]
 8012c92:	602b      	str	r3, [r5, #0]
 8012c94:	b016      	add	sp, #88	@ 0x58
 8012c96:	bd70      	pop	{r4, r5, r6, pc}
 8012c98:	466a      	mov	r2, sp
 8012c9a:	f000 f879 	bl	8012d90 <_fstat_r>
 8012c9e:	2800      	cmp	r0, #0
 8012ca0:	dbec      	blt.n	8012c7c <__swhatbuf_r+0x12>
 8012ca2:	9901      	ldr	r1, [sp, #4]
 8012ca4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012ca8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012cac:	4259      	negs	r1, r3
 8012cae:	4159      	adcs	r1, r3
 8012cb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012cb4:	e7eb      	b.n	8012c8e <__swhatbuf_r+0x24>

08012cb6 <__smakebuf_r>:
 8012cb6:	898b      	ldrh	r3, [r1, #12]
 8012cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cba:	079d      	lsls	r5, r3, #30
 8012cbc:	4606      	mov	r6, r0
 8012cbe:	460c      	mov	r4, r1
 8012cc0:	d507      	bpl.n	8012cd2 <__smakebuf_r+0x1c>
 8012cc2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012cc6:	6023      	str	r3, [r4, #0]
 8012cc8:	6123      	str	r3, [r4, #16]
 8012cca:	2301      	movs	r3, #1
 8012ccc:	6163      	str	r3, [r4, #20]
 8012cce:	b003      	add	sp, #12
 8012cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cd2:	ab01      	add	r3, sp, #4
 8012cd4:	466a      	mov	r2, sp
 8012cd6:	f7ff ffc8 	bl	8012c6a <__swhatbuf_r>
 8012cda:	9f00      	ldr	r7, [sp, #0]
 8012cdc:	4605      	mov	r5, r0
 8012cde:	4639      	mov	r1, r7
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	f7fe fda9 	bl	8011838 <_malloc_r>
 8012ce6:	b948      	cbnz	r0, 8012cfc <__smakebuf_r+0x46>
 8012ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cec:	059a      	lsls	r2, r3, #22
 8012cee:	d4ee      	bmi.n	8012cce <__smakebuf_r+0x18>
 8012cf0:	f023 0303 	bic.w	r3, r3, #3
 8012cf4:	f043 0302 	orr.w	r3, r3, #2
 8012cf8:	81a3      	strh	r3, [r4, #12]
 8012cfa:	e7e2      	b.n	8012cc2 <__smakebuf_r+0xc>
 8012cfc:	89a3      	ldrh	r3, [r4, #12]
 8012cfe:	6020      	str	r0, [r4, #0]
 8012d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d04:	81a3      	strh	r3, [r4, #12]
 8012d06:	9b01      	ldr	r3, [sp, #4]
 8012d08:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012d0c:	b15b      	cbz	r3, 8012d26 <__smakebuf_r+0x70>
 8012d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d12:	4630      	mov	r0, r6
 8012d14:	f000 f84e 	bl	8012db4 <_isatty_r>
 8012d18:	b128      	cbz	r0, 8012d26 <__smakebuf_r+0x70>
 8012d1a:	89a3      	ldrh	r3, [r4, #12]
 8012d1c:	f023 0303 	bic.w	r3, r3, #3
 8012d20:	f043 0301 	orr.w	r3, r3, #1
 8012d24:	81a3      	strh	r3, [r4, #12]
 8012d26:	89a3      	ldrh	r3, [r4, #12]
 8012d28:	431d      	orrs	r5, r3
 8012d2a:	81a5      	strh	r5, [r4, #12]
 8012d2c:	e7cf      	b.n	8012cce <__smakebuf_r+0x18>

08012d2e <_raise_r>:
 8012d2e:	291f      	cmp	r1, #31
 8012d30:	b538      	push	{r3, r4, r5, lr}
 8012d32:	4605      	mov	r5, r0
 8012d34:	460c      	mov	r4, r1
 8012d36:	d904      	bls.n	8012d42 <_raise_r+0x14>
 8012d38:	2316      	movs	r3, #22
 8012d3a:	6003      	str	r3, [r0, #0]
 8012d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d40:	bd38      	pop	{r3, r4, r5, pc}
 8012d42:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012d44:	b112      	cbz	r2, 8012d4c <_raise_r+0x1e>
 8012d46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d4a:	b94b      	cbnz	r3, 8012d60 <_raise_r+0x32>
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	f000 f853 	bl	8012df8 <_getpid_r>
 8012d52:	4622      	mov	r2, r4
 8012d54:	4601      	mov	r1, r0
 8012d56:	4628      	mov	r0, r5
 8012d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d5c:	f000 b83a 	b.w	8012dd4 <_kill_r>
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d00a      	beq.n	8012d7a <_raise_r+0x4c>
 8012d64:	1c59      	adds	r1, r3, #1
 8012d66:	d103      	bne.n	8012d70 <_raise_r+0x42>
 8012d68:	2316      	movs	r3, #22
 8012d6a:	6003      	str	r3, [r0, #0]
 8012d6c:	2001      	movs	r0, #1
 8012d6e:	e7e7      	b.n	8012d40 <_raise_r+0x12>
 8012d70:	2100      	movs	r1, #0
 8012d72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012d76:	4620      	mov	r0, r4
 8012d78:	4798      	blx	r3
 8012d7a:	2000      	movs	r0, #0
 8012d7c:	e7e0      	b.n	8012d40 <_raise_r+0x12>
	...

08012d80 <raise>:
 8012d80:	4b02      	ldr	r3, [pc, #8]	@ (8012d8c <raise+0xc>)
 8012d82:	4601      	mov	r1, r0
 8012d84:	6818      	ldr	r0, [r3, #0]
 8012d86:	f7ff bfd2 	b.w	8012d2e <_raise_r>
 8012d8a:	bf00      	nop
 8012d8c:	200001e4 	.word	0x200001e4

08012d90 <_fstat_r>:
 8012d90:	b538      	push	{r3, r4, r5, lr}
 8012d92:	4d07      	ldr	r5, [pc, #28]	@ (8012db0 <_fstat_r+0x20>)
 8012d94:	2300      	movs	r3, #0
 8012d96:	4604      	mov	r4, r0
 8012d98:	4608      	mov	r0, r1
 8012d9a:	4611      	mov	r1, r2
 8012d9c:	602b      	str	r3, [r5, #0]
 8012d9e:	f7ef fabd 	bl	800231c <_fstat>
 8012da2:	1c43      	adds	r3, r0, #1
 8012da4:	d102      	bne.n	8012dac <_fstat_r+0x1c>
 8012da6:	682b      	ldr	r3, [r5, #0]
 8012da8:	b103      	cbz	r3, 8012dac <_fstat_r+0x1c>
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	bd38      	pop	{r3, r4, r5, pc}
 8012dae:	bf00      	nop
 8012db0:	2000dd98 	.word	0x2000dd98

08012db4 <_isatty_r>:
 8012db4:	b538      	push	{r3, r4, r5, lr}
 8012db6:	4d06      	ldr	r5, [pc, #24]	@ (8012dd0 <_isatty_r+0x1c>)
 8012db8:	2300      	movs	r3, #0
 8012dba:	4604      	mov	r4, r0
 8012dbc:	4608      	mov	r0, r1
 8012dbe:	602b      	str	r3, [r5, #0]
 8012dc0:	f7ef fabc 	bl	800233c <_isatty>
 8012dc4:	1c43      	adds	r3, r0, #1
 8012dc6:	d102      	bne.n	8012dce <_isatty_r+0x1a>
 8012dc8:	682b      	ldr	r3, [r5, #0]
 8012dca:	b103      	cbz	r3, 8012dce <_isatty_r+0x1a>
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	bd38      	pop	{r3, r4, r5, pc}
 8012dd0:	2000dd98 	.word	0x2000dd98

08012dd4 <_kill_r>:
 8012dd4:	b538      	push	{r3, r4, r5, lr}
 8012dd6:	4d07      	ldr	r5, [pc, #28]	@ (8012df4 <_kill_r+0x20>)
 8012dd8:	2300      	movs	r3, #0
 8012dda:	4604      	mov	r4, r0
 8012ddc:	4608      	mov	r0, r1
 8012dde:	4611      	mov	r1, r2
 8012de0:	602b      	str	r3, [r5, #0]
 8012de2:	f7ef fa3b 	bl	800225c <_kill>
 8012de6:	1c43      	adds	r3, r0, #1
 8012de8:	d102      	bne.n	8012df0 <_kill_r+0x1c>
 8012dea:	682b      	ldr	r3, [r5, #0]
 8012dec:	b103      	cbz	r3, 8012df0 <_kill_r+0x1c>
 8012dee:	6023      	str	r3, [r4, #0]
 8012df0:	bd38      	pop	{r3, r4, r5, pc}
 8012df2:	bf00      	nop
 8012df4:	2000dd98 	.word	0x2000dd98

08012df8 <_getpid_r>:
 8012df8:	f7ef ba28 	b.w	800224c <_getpid>

08012dfc <_init>:
 8012dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dfe:	bf00      	nop
 8012e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e02:	bc08      	pop	{r3}
 8012e04:	469e      	mov	lr, r3
 8012e06:	4770      	bx	lr

08012e08 <_fini>:
 8012e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e0a:	bf00      	nop
 8012e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e0e:	bc08      	pop	{r3}
 8012e10:	469e      	mov	lr, r3
 8012e12:	4770      	bx	lr
