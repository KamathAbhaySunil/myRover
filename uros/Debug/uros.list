
uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ffc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bec  080111a0  080111a0  000121a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d8c  08011d8c  00013110  2**0
                  CONTENTS
  4 .ARM          00000008  08011d8c  08011d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d94  08011d94  00013110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011d94  08011d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011d9c  08011d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08011da0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db04  20000110  08011eb0  00013110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dc14  08011eb0  00013c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146f8  00000000  00000000  00013140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c3  00000000  00000000  00027838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0002ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9f  00000000  00000000  0002be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000082e4  00000000  00000000  0002cb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001467f  00000000  00000000  00034e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aabb  00000000  00000000  0004949a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  000e3f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005148  00000000  00000000  000e3fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e9114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011184 	.word	0x08011184

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08011184 	.word	0x08011184

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800064c:	f004 ff6c 	bl	8005528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000650:	4b5a      	ldr	r3, [pc, #360]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000658:	f000 f986 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800065c:	4b58      	ldr	r3, [pc, #352]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4013      	ands	r3, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	f040 8090 	bne.w	800078a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01e      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000670:	2208      	movs	r2, #8
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2b00      	cmp	r3, #0
 8000680:	d015      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f023 0307 	bic.w	r3, r3, #7
 8000688:	3308      	adds	r3, #8
 800068a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00b      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d06a      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
 80006b4:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d865      	bhi.n	800078a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c8:	e004      	b.n	80006d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d903      	bls.n	80006e6 <pvPortMallocMicroROS+0xa6>
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f1      	bne.n	80006ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d04c      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2208      	movs	r2, #8
 80006f6:	4413      	add	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	2308      	movs	r3, #8
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	429a      	cmp	r2, r3
 8000710:	d920      	bls.n	8000754 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	f003 0307 	and.w	r3, r3, #7
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	613b      	str	r3, [r7, #16]
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	f000 f96c 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a19      	ldr	r2, [pc, #100]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d203      	bcs.n	8000776 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800078a:	f004 fedb 	bl	8005544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	60fb      	str	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007b0:	69fb      	ldr	r3, [r7, #28]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20003d34 	.word	0x20003d34
 80007c0:	20003d40 	.word	0x20003d40
 80007c4:	20003d38 	.word	0x20003d38
 80007c8:	20003d2c 	.word	0x20003d2c
 80007cc:	20003d3c 	.word	0x20003d3c

080007d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d04a      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e2:	2308      	movs	r3, #8
 80007e4:	425b      	negs	r3, r3
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4013      	ands	r3, r2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000802:	f383 8811 	msr	BASEPRI, r3
 8000806:	f3bf 8f6f 	isb	sy
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	60fb      	str	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	e7fd      	b.n	8000812 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <vPortFreeMicroROS+0x66>
	__asm volatile
 800081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000822:	f383 8811 	msr	BASEPRI, r3
 8000826:	f3bf 8f6f 	isb	sy
 800082a:	f3bf 8f4f 	dsb	sy
 800082e:	60bb      	str	r3, [r7, #8]
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f004 fe64 	bl	8005528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f004 fe66 	bl	8005544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003d40 	.word	0x20003d40
 8000884:	20003d38 	.word	0x20003d38

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003d40 	.word	0x20003d40

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f004 fe2b 	bl	8005528 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feb4 	bl	8000640 <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f00f fd4e 	bl	80103a6 <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff60 	bl	80007d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f004 fe18 	bl	8005544 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f004 fdfe 	bl	8005528 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe82 	bl	8000640 <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f004 fdf4 	bl	8005544 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	20003d2c 	.word	0x20003d2c
 8000a1c:	20003d34 	.word	0x20003d34
 8000a20:	20003d3c 	.word	0x20003d3c
 8000a24:	20003d38 	.word	0x20003d38
 8000a28:	20003d40 	.word	0x20003d40

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003d2c 	.word	0x20003d2c
 8000adc:	20003d34 	.word	0x20003d34

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 fdca 	bl	800167c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f81a 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 f8d2 	bl	8000c94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f000 f8a8 	bl	8000c44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000af4:	f000 f87c 	bl	8000bf0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000af8:	f003 fbf8 	bl	80042ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000afc:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <main+0x34>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <main+0x38>)
 8000b02:	f003 fc3d 	bl	8004380 <osThreadNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <main+0x3c>)
 8000b0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b0c:	f003 fc12 	bl	8004334 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <main+0x30>
 8000b14:	08011238 	.word	0x08011238
 8000b18:	08000ce5 	.word	0x08000ce5
 8000b1c:	20003e4c 	.word	0x20003e4c

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	@ 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	@ 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f00f fb70 	bl	8010214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <SystemClock_Config+0xc8>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a26      	ldr	r2, [pc, #152]	@ (8000be8 <SystemClock_Config+0xc8>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <SystemClock_Config+0xc8>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <SystemClock_Config+0xcc>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a20      	ldr	r2, [pc, #128]	@ (8000bec <SystemClock_Config+0xcc>)
 8000b6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <SystemClock_Config+0xcc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b94:	23c0      	movs	r3, #192	@ 0xc0
 8000b96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fc73 	bl	8002490 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb0:	f000 f922 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2103      	movs	r1, #3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fed5 	bl	8002980 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bdc:	f000 f90c 	bl	8000df8 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3750      	adds	r7, #80	@ 0x50
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <MX_USART2_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c28:	f002 f8ca 	bl	8002dc0 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f000 f8e1 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20003d44 	.word	0x20003d44
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_DMA_Init+0x4c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a0f      	ldr	r2, [pc, #60]	@ (8000c90 <MX_DMA_Init+0x4c>)
 8000c54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <MX_DMA_Init+0x4c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2105      	movs	r1, #5
 8000c6a:	2010      	movs	r0, #16
 8000c6c:	f000 fe53 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c70:	2010      	movs	r0, #16
 8000c72:	f000 fe6c 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2105      	movs	r1, #5
 8000c7a:	2011      	movs	r0, #17
 8000c7c:	f000 fe4b 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c80:	2011      	movs	r0, #17
 8000c82:	f000 fe64 	bl	800194e <HAL_NVIC_EnableIRQ>

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <MX_GPIO_Init+0x4c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce0 <MX_GPIO_Init+0x4c>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <MX_GPIO_Init+0x4c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_GPIO_Init+0x4c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <MX_GPIO_Init+0x4c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_GPIO_Init+0x4c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b0a6      	sub	sp, #152	@ 0x98
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	 // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8000cec:	4b34      	ldr	r3, [pc, #208]	@ (8000dc0 <StartDefaultTask+0xdc>)
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	4b34      	ldr	r3, [pc, #208]	@ (8000dc4 <StartDefaultTask+0xe0>)
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	4b34      	ldr	r3, [pc, #208]	@ (8000dc8 <StartDefaultTask+0xe4>)
 8000cf6:	4a35      	ldr	r2, [pc, #212]	@ (8000dcc <StartDefaultTask+0xe8>)
 8000cf8:	4935      	ldr	r1, [pc, #212]	@ (8000dd0 <StartDefaultTask+0xec>)
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f006 facc 	bl	8007298 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d00:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 fa47 	bl	8007198 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000d0a:	4b32      	ldr	r3, [pc, #200]	@ (8000dd4 <StartDefaultTask+0xf0>)
 8000d0c:	67bb      	str	r3, [r7, #120]	@ 0x78
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000d0e:	4b32      	ldr	r3, [pc, #200]	@ (8000dd8 <StartDefaultTask+0xf4>)
 8000d10:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000d12:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <StartDefaultTask+0xf8>)
 8000d14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000d18:	4b31      	ldr	r3, [pc, #196]	@ (8000de0 <StartDefaultTask+0xfc>)
 8000d1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000d1e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d22:	4618      	mov	r0, r3
 8000d24:	f006 fa46 	bl	80071b4 <rcutils_set_default_allocator>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f083 0301 	eor.w	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d004      	beq.n	8000d3e <StartDefaultTask+0x5a>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000d34:	f240 113f 	movw	r1, #319	@ 0x13f
 8000d38:	482a      	ldr	r0, [pc, #168]	@ (8000de4 <StartDefaultTask+0x100>)
 8000d3a:	f00f f9a9 	bl	8010090 <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4618      	mov	r0, r3
 8000d42:	f006 fa55 	bl	80071f0 <rcutils_get_default_allocator>
 8000d46:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000d4a:	463d      	mov	r5, r7
 8000d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8000d54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d58:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f006 f958 	bl	8007014 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000d64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d68:	f107 0020 	add.w	r0, r7, #32
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8000de8 <StartDefaultTask+0x104>)
 8000d6e:	491f      	ldr	r1, [pc, #124]	@ (8000dec <StartDefaultTask+0x108>)
 8000d70:	f006 f99a 	bl	80070a8 <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8000d74:	f006 ff16 	bl	8007ba4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f107 0120 	add.w	r1, r7, #32
 8000d7e:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8000d82:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <StartDefaultTask+0x10c>)
 8000d84:	f006 f9cc 	bl	8007120 <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	673b      	str	r3, [r7, #112]	@ 0x70

	  for(;;)
	  {
	    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8000d8c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000d90:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000d94:	2200      	movs	r2, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f006 f918 	bl	8006fcc <rcl_publish>
 8000d9c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	    if (ret != RCL_RET_OK)
 8000da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <StartDefaultTask+0xce>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8000da8:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8000dac:	4811      	ldr	r0, [pc, #68]	@ (8000df4 <StartDefaultTask+0x110>)
 8000dae:	f00f f96f 	bl	8010090 <iprintf>
	    }

	    msg.data++;
 8000db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000db4:	3301      	adds	r3, #1
 8000db6:	673b      	str	r3, [r7, #112]	@ 0x70
	    osDelay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f003 fb73 	bl	80044a4 <osDelay>
	  {
 8000dbe:	e7e5      	b.n	8000d8c <StartDefaultTask+0xa8>
 8000dc0:	08001581 	.word	0x08001581
 8000dc4:	08001519 	.word	0x08001519
 8000dc8:	080014f9 	.word	0x080014f9
 8000dcc:	080014cd 	.word	0x080014cd
 8000dd0:	20003d44 	.word	0x20003d44
 8000dd4:	08000e05 	.word	0x08000e05
 8000dd8:	08000e49 	.word	0x08000e49
 8000ddc:	08000e81 	.word	0x08000e81
 8000de0:	08000eed 	.word	0x08000eed
 8000de4:	080111ac 	.word	0x080111ac
 8000de8:	080111d4 	.word	0x080111d4
 8000dec:	080111d8 	.word	0x080111d8
 8000df0:	080111e4 	.word	0x080111e4
 8000df4:	080111f8 	.word	0x080111f8

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <microros_allocate+0x3c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <microros_allocate+0x3c>)
 8000e1c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <microros_allocate+0x40>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <microros_allocate+0x40>)
 8000e2c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fc06 	bl	8000640 <pvPortMallocMicroROS>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20003e50 	.word	0x20003e50
 8000e44:	20003e54 	.word	0x20003e54

08000e48 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00c      	beq.n	8000e72 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fd15 	bl	8000888 <getBlockSize>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a06      	ldr	r2, [pc, #24]	@ (8000e7c <microros_deallocate+0x34>)
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <microros_deallocate+0x34>)
 8000e6a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff fcaf 	bl	80007d0 <vPortFreeMicroROS>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20003e54 	.word	0x20003e54

08000e80 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <microros_reallocate+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	4413      	add	r3, r2
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <microros_reallocate+0x64>)
 8000e9a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <microros_reallocate+0x68>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <microros_reallocate+0x68>)
 8000eaa:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d104      	bne.n	8000ebc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000eb2:	68b8      	ldr	r0, [r7, #8]
 8000eb4:	f7ff fbc4 	bl	8000640 <pvPortMallocMicroROS>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	e00e      	b.n	8000eda <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff fce3 	bl	8000888 <getBlockSize>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <microros_reallocate+0x68>)
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <microros_reallocate+0x68>)
 8000ece:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff fcf6 	bl	80008c4 <pvPortReallocMicroROS>
 8000ed8:	4603      	mov	r3, r0
  }
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20003e50 	.word	0x20003e50
 8000ee8:	20003e54 	.word	0x20003e54

08000eec <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <microros_zero_allocate+0x48>)
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <microros_zero_allocate+0x48>)
 8000f0a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <microros_zero_allocate+0x4c>)
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <microros_zero_allocate+0x4c>)
 8000f1e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f7ff fcfb 	bl	800091e <pvPortCallocMicroROS>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20003e50 	.word	0x20003e50
 8000f38:	20003e54 	.word	0x20003e54
 8000f3c:	00000000 	.word	0x00000000

08000f40 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8000f40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8000f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f56:	a320      	add	r3, pc, #128	@ (adr r3, 8000fd8 <UTILS_NanosecondsToTimespec+0x98>)
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	f7ff f9a8 	bl	80002b0 <__aeabi_ldivmod>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8000f6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f6e:	a31a      	add	r3, pc, #104	@ (adr r3, 8000fd8 <UTILS_NanosecondsToTimespec+0x98>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff f99c 	bl	80002b0 <__aeabi_ldivmod>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	da20      	bge.n	8000fc6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a11      	ldr	r2, [pc, #68]	@ (8000fd0 <UTILS_NanosecondsToTimespec+0x90>)
 8000f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8e:	1712      	asrs	r2, r2, #28
 8000f90:	17db      	asrs	r3, r3, #31
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	6979      	ldr	r1, [r7, #20]
 8000fa0:	17c8      	asrs	r0, r1, #31
 8000fa2:	460c      	mov	r4, r1
 8000fa4:	4605      	mov	r5, r0
 8000fa6:	ebb2 0804 	subs.w	r8, r2, r4
 8000faa:	eb63 0905 	sbc.w	r9, r3, r5
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	4906      	ldr	r1, [pc, #24]	@ (8000fd4 <UTILS_NanosecondsToTimespec+0x94>)
 8000fbc:	fb01 f303 	mul.w	r3, r1, r3
 8000fc0:	441a      	add	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
    }
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fd0:	44b82fa1 	.word	0x44b82fa1
 8000fd4:	3b9aca00 	.word	0x3b9aca00
 8000fd8:	3b9aca00 	.word	0x3b9aca00
 8000fdc:	00000000 	.word	0x00000000

08000fe0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8000fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fe4:	b08e      	sub	sp, #56	@ 0x38
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6278      	str	r0, [r7, #36]	@ 0x24
 8000fea:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8000fec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001002:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001006:	4618      	mov	r0, r3
 8001008:	f004 fd18 	bl	8005a3c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800100c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800100e:	17da      	asrs	r2, r3, #31
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	61fa      	str	r2, [r7, #28]
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	69b9      	ldr	r1, [r7, #24]
 800101e:	000b      	movs	r3, r1
 8001020:	2200      	movs	r2, #0
 8001022:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001028:	2200      	movs	r2, #0
 800102a:	461c      	mov	r4, r3
 800102c:	4615      	mov	r5, r2
 800102e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001032:	1911      	adds	r1, r2, r4
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	416b      	adcs	r3, r5
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800103e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001042:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	f04f 0400 	mov.w	r4, #0
 800104e:	f04f 0500 	mov.w	r5, #0
 8001052:	015d      	lsls	r5, r3, #5
 8001054:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001058:	0154      	lsls	r4, r2, #5
 800105a:	4622      	mov	r2, r4
 800105c:	462b      	mov	r3, r5
 800105e:	ebb2 0800 	subs.w	r8, r2, r0
 8001062:	eb63 0901 	sbc.w	r9, r3, r1
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001072:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001076:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800107a:	4690      	mov	r8, r2
 800107c:	4699      	mov	r9, r3
 800107e:	eb18 0a00 	adds.w	sl, r8, r0
 8001082:	eb49 0b01 	adc.w	fp, r9, r1
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001092:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001096:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800109a:	ebb2 040a 	subs.w	r4, r2, sl
 800109e:	603c      	str	r4, [r7, #0]
 80010a0:	eb63 030b 	sbc.w	r3, r3, fp
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80010aa:	4623      	mov	r3, r4
 80010ac:	181b      	adds	r3, r3, r0
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	462b      	mov	r3, r5
 80010b2:	eb41 0303 	adc.w	r3, r1, r3
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	6a3a      	ldr	r2, [r7, #32]
 80010ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010be:	f7ff ff3f 	bl	8000f40 <UTILS_NanosecondsToTimespec>

    return 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	3738      	adds	r7, #56	@ 0x38
 80010c8:	46bd      	mov	sp, r7
 80010ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	4a0f      	ldr	r2, [pc, #60]	@ (800111c <HAL_MspInit+0x4c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	4a08      	ldr	r2, [pc, #32]	@ (800111c <HAL_MspInit+0x4c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	@ 0x40
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a4d      	ldr	r2, [pc, #308]	@ (8001274 <HAL_UART_MspInit+0x154>)
 800113e:	4293      	cmp	r3, r2
 8001140:	f040 8093 	bne.w	800126a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	4b4b      	ldr	r3, [pc, #300]	@ (8001278 <HAL_UART_MspInit+0x158>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	4a4a      	ldr	r2, [pc, #296]	@ (8001278 <HAL_UART_MspInit+0x158>)
 800114e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001152:	6413      	str	r3, [r2, #64]	@ 0x40
 8001154:	4b48      	ldr	r3, [pc, #288]	@ (8001278 <HAL_UART_MspInit+0x158>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b44      	ldr	r3, [pc, #272]	@ (8001278 <HAL_UART_MspInit+0x158>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	4a43      	ldr	r2, [pc, #268]	@ (8001278 <HAL_UART_MspInit+0x158>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001170:	4b41      	ldr	r3, [pc, #260]	@ (8001278 <HAL_UART_MspInit+0x158>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800117c:	230c      	movs	r3, #12
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800118c:	2307      	movs	r3, #7
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4839      	ldr	r0, [pc, #228]	@ (800127c <HAL_UART_MspInit+0x15c>)
 8001198:	f000 fff6 	bl	8002188 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <HAL_UART_MspInit+0x160>)
 800119e:	4a39      	ldr	r2, [pc, #228]	@ (8001284 <HAL_UART_MspInit+0x164>)
 80011a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80011a2:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011aa:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b0:	4b33      	ldr	r3, [pc, #204]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011b6:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011be:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80011ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011d8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011da:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011e0:	4827      	ldr	r0, [pc, #156]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011e2:	f000 fbcf 	bl	8001984 <HAL_DMA_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80011ec:	f7ff fe04 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a23      	ldr	r2, [pc, #140]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011f6:	4a22      	ldr	r2, [pc, #136]	@ (8001280 <HAL_UART_MspInit+0x160>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <HAL_UART_MspInit+0x168>)
 80011fe:	4a23      	ldr	r2, [pc, #140]	@ (800128c <HAL_UART_MspInit+0x16c>)
 8001200:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <HAL_UART_MspInit+0x168>)
 8001204:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001208:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120a:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <HAL_UART_MspInit+0x168>)
 800120c:	2240      	movs	r2, #64	@ 0x40
 800120e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001210:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <HAL_UART_MspInit+0x168>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <HAL_UART_MspInit+0x168>)
 8001218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <HAL_UART_MspInit+0x168>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <HAL_UART_MspInit+0x168>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <HAL_UART_MspInit+0x168>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <HAL_UART_MspInit+0x168>)
 8001232:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001236:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <HAL_UART_MspInit+0x168>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800123e:	4812      	ldr	r0, [pc, #72]	@ (8001288 <HAL_UART_MspInit+0x168>)
 8001240:	f000 fba0 	bl	8001984 <HAL_DMA_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800124a:	f7ff fdd5 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <HAL_UART_MspInit+0x168>)
 8001252:	639a      	str	r2, [r3, #56]	@ 0x38
 8001254:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <HAL_UART_MspInit+0x168>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2105      	movs	r1, #5
 800125e:	2026      	movs	r0, #38	@ 0x26
 8001260:	f000 fb59 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001264:	2026      	movs	r0, #38	@ 0x26
 8001266:	f000 fb72 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40004400 	.word	0x40004400
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000
 8001280:	20003d8c 	.word	0x20003d8c
 8001284:	40026088 	.word	0x40026088
 8001288:	20003dec 	.word	0x20003dec
 800128c:	400260a0 	.word	0x400260a0

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <NMI_Handler+0x4>

08001298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <MemManage_Handler+0x4>

080012a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ca:	f000 fa29 	bl	8001720 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012ce:	f004 fd39 	bl	8005d44 <xTaskGetSchedulerState>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d001      	beq.n	80012dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012d8:	f005 fb2e 	bl	8006938 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <DMA1_Stream5_IRQHandler+0x10>)
 80012e6:	f000 fce5 	bl	8001cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20003d8c 	.word	0x20003d8c

080012f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <DMA1_Stream6_IRQHandler+0x10>)
 80012fa:	f000 fcdb 	bl	8001cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20003dec 	.word	0x20003dec

08001308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <USART2_IRQHandler+0x10>)
 800130e:	f001 febb 	bl	8003088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20003d44 	.word	0x20003d44

0800131c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return 1;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_kill>:

int _kill(int pid, int sig)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001336:	f00f f801 	bl	801033c <__errno>
 800133a:	4603      	mov	r3, r0
 800133c:	2216      	movs	r2, #22
 800133e:	601a      	str	r2, [r3, #0]
  return -1;
 8001340:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <_exit>:

void _exit (int status)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001354:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffe7 	bl	800132c <_kill>
  while (1) {}    /* Make sure we hang here */
 800135e:	bf00      	nop
 8001360:	e7fd      	b.n	800135e <_exit+0x12>

08001362 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e00a      	b.n	800138a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001374:	f3af 8000 	nop.w
 8001378:	4601      	mov	r1, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	b2ca      	uxtb	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbf0      	blt.n	8001374 <_read+0x12>
  }

  return len;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e009      	b.n	80013c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	60ba      	str	r2, [r7, #8]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbf1      	blt.n	80013ae <_write+0x12>
  }
  return len;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_close>:

int _close(int file)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013fc:	605a      	str	r2, [r3, #4]
  return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_isatty>:

int _isatty(int file)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f00e ff66 	bl	801033c <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20020000 	.word	0x20020000
 800149c:	00000400 	.word	0x00000400
 80014a0:	20003e5c 	.word	0x20003e5c
 80014a4:	2000dc18 	.word	0x2000dc18

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014da:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014e0:	4904      	ldr	r1, [pc, #16]	@ (80014f4 <cubemx_transport_open+0x28>)
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f001 fd2c 	bl	8002f40 <HAL_UART_Receive_DMA>
    return true;
 80014e8:	2301      	movs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20003e60 	.word	0x20003e60

080014f8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001506:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f001 fd3e 	bl	8002f8a <HAL_UART_DMAStop>
    return true;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800152c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b20      	cmp	r3, #32
 8001538:	d11c      	bne.n	8001574 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	b29b      	uxth	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f001 fc8c 	bl	8002e60 <HAL_UART_Transmit_DMA>
 8001548:	4603      	mov	r3, r0
 800154a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800154c:	e002      	b.n	8001554 <cubemx_transport_write+0x3c>
            osDelay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f002 ffa8 	bl	80044a4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001554:	7cfb      	ldrb	r3, [r7, #19]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d105      	bne.n	8001566 <cubemx_transport_write+0x4e>
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b20      	cmp	r3, #32
 8001564:	d1f3      	bne.n	800154e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001566:	7cfb      	ldrb	r3, [r7, #19]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <cubemx_transport_write+0x58>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	e002      	b.n	8001576 <cubemx_transport_write+0x5e>
 8001570:	2300      	movs	r3, #0
 8001572:	e000      	b.n	8001576 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001574:	2300      	movs	r3, #0
    }
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001594:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800159a:	b672      	cpsid	i
}
 800159c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015aa:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <cubemx_transport_read+0x9c>)
 80015ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ae:	b662      	cpsie	i
}
 80015b0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f002 ff73 	bl	80044a4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <cubemx_transport_read+0xa0>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <cubemx_transport_read+0x9c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d103      	bne.n	80015d2 <cubemx_transport_read+0x52>
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dbe3      	blt.n	800159a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015d6:	e011      	b.n	80015fc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <cubemx_transport_read+0xa0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	440b      	add	r3, r1
 80015e2:	4910      	ldr	r1, [pc, #64]	@ (8001624 <cubemx_transport_read+0xa4>)
 80015e4:	5c8a      	ldrb	r2, [r1, r2]
 80015e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <cubemx_transport_read+0xa0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001620 <cubemx_transport_read+0xa0>)
 80015f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <cubemx_transport_read+0xa0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <cubemx_transport_read+0x9c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d003      	beq.n	8001610 <cubemx_transport_read+0x90>
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d3e3      	bcc.n	80015d8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001610:	69bb      	ldr	r3, [r7, #24]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20004664 	.word	0x20004664
 8001620:	20004660 	.word	0x20004660
 8001624:	20003e60 	.word	0x20003e60

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001660 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800162c:	f7ff ff3c 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001632:	490d      	ldr	r1, [pc, #52]	@ (8001668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001648:	4c0a      	ldr	r4, [pc, #40]	@ (8001674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001656:	f00e fe77 	bl	8010348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff fa41 	bl	8000ae0 <main>
  bx  lr    
 800165e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001668:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800166c:	08011da0 	.word	0x08011da0
  ldr r2, =_sbss
 8001670:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001674:	2000dc14 	.word	0x2000dc14

08001678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001680:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <HAL_Init+0x40>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800168a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <HAL_Init+0x40>)
 8001692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	@ (80016bc <HAL_Init+0x40>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 f92b 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff fd0e 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023c00 	.word	0x40023c00

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f943 	bl	800196a <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016fc:	f000 f90b 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	@ (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000004 	.word	0x20000004
 8001718:	2000000c 	.word	0x2000000c
 800171c:	20000008 	.word	0x20000008

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000000c 	.word	0x2000000c
 8001744:	20004668 	.word	0x20004668

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20004668 	.word	0x20004668

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	@ (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	@ (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	@ (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff feda 	bl	8001748 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e099      	b.n	8001ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c0:	e00f      	b.n	80019e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c2:	f7ff fec1 	bl	8001748 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d908      	bls.n	80019e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e078      	b.n	8001ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1e8      	bne.n	80019c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <HAL_DMA_Init+0x158>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d107      	bne.n	8001a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4313      	orrs	r3, r2
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
 8001a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d117      	bne.n	8001aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00e      	beq.n	8001aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fb01 	bl	8002090 <DMA_CheckFifoParam>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2240      	movs	r2, #64	@ 0x40
 8001a98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e016      	b.n	8001ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fab8 	bl	8002024 <DMA_CalcBaseAndBitshift>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	223f      	movs	r2, #63	@ 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	f010803f 	.word	0xf010803f

08001ae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_DMA_Start_IT+0x26>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e040      	b.n	8001b88 <HAL_DMA_Start_IT+0xa8>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d12f      	bne.n	8001b7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fa4a 	bl	8001fc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b38:	223f      	movs	r2, #63	@ 0x3f
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0216 	orr.w	r2, r2, #22
 8001b4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e005      	b.n	8001b86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b82:	2302      	movs	r3, #2
 8001b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b9e:	f7ff fdd3 	bl	8001748 <HAL_GetTick>
 8001ba2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d008      	beq.n	8001bc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2280      	movs	r2, #128	@ 0x80
 8001bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e052      	b.n	8001c68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0216 	bic.w	r2, r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001be0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d103      	bne.n	8001bf2 <HAL_DMA_Abort+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0208 	bic.w	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c12:	e013      	b.n	8001c3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c14:	f7ff fd98 	bl	8001748 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d90c      	bls.n	8001c3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e015      	b.n	8001c68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1e4      	bne.n	8001c14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4e:	223f      	movs	r2, #63	@ 0x3f
 8001c50:	409a      	lsls	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d004      	beq.n	8001c8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2280      	movs	r2, #128	@ 0x80
 8001c88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00c      	b.n	8001ca8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2205      	movs	r2, #5
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8001efc <HAL_DMA_IRQHandler+0x248>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a8e      	ldr	r2, [pc, #568]	@ (8001f00 <HAL_DMA_IRQHandler+0x24c>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0a9b      	lsrs	r3, r3, #10
 8001ccc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cde:	2208      	movs	r2, #8
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01a      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0204 	bic.w	r2, r2, #4
 8001d06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d24:	2201      	movs	r2, #1
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d012      	beq.n	8001d56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00b      	beq.n	8001d56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d42:	2201      	movs	r2, #1
 8001d44:	409a      	lsls	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4e:	f043 0202 	orr.w	r2, r3, #2
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d012      	beq.n	8001d8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00b      	beq.n	8001d8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d78:	2204      	movs	r2, #4
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d84:	f043 0204 	orr.w	r2, r3, #4
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d90:	2210      	movs	r2, #16
 8001d92:	409a      	lsls	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d043      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03c      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dae:	2210      	movs	r2, #16
 8001db0:	409a      	lsls	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d018      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d108      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d024      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	4798      	blx	r3
 8001de2:	e01f      	b.n	8001e24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01b      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
 8001df4:	e016      	b.n	8001e24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d107      	bne.n	8001e14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0208 	bic.w	r2, r2, #8
 8001e12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	2220      	movs	r2, #32
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 808f 	beq.w	8001f54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8087 	beq.w	8001f54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d136      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0216 	bic.w	r2, r2, #22
 8001e6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <HAL_DMA_IRQHandler+0x1da>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0208 	bic.w	r2, r2, #8
 8001e9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea2:	223f      	movs	r2, #63	@ 0x3f
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d07e      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
        }
        return;
 8001eca:	e079      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d01d      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10d      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d031      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
 8001ef8:	e02c      	b.n	8001f54 <HAL_DMA_IRQHandler+0x2a0>
 8001efa:	bf00      	nop
 8001efc:	20000004 	.word	0x20000004
 8001f00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d023      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	4798      	blx	r3
 8001f14:	e01e      	b.n	8001f54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0210 	bic.w	r2, r2, #16
 8001f32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d032      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d022      	beq.n	8001fae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2205      	movs	r2, #5
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3301      	adds	r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d307      	bcc.n	8001f9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f2      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x2cc>
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	4798      	blx	r3
 8001fbe:	e000      	b.n	8001fc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fc0:	bf00      	nop
    }
  }
}
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b40      	cmp	r3, #64	@ 0x40
 8001ff4:	d108      	bne.n	8002008 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002006:	e007      	b.n	8002018 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3b10      	subs	r3, #16
 8002034:	4a14      	ldr	r2, [pc, #80]	@ (8002088 <DMA_CalcBaseAndBitshift+0x64>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800203e:	4a13      	ldr	r2, [pc, #76]	@ (800208c <DMA_CalcBaseAndBitshift+0x68>)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d909      	bls.n	8002066 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	1d1a      	adds	r2, r3, #4
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	659a      	str	r2, [r3, #88]	@ 0x58
 8002064:	e007      	b.n	8002076 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	aaaaaaab 	.word	0xaaaaaaab
 800208c:	08011274 	.word	0x08011274

08002090 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11f      	bne.n	80020ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d856      	bhi.n	800215e <DMA_CheckFifoParam+0xce>
 80020b0:	a201      	add	r2, pc, #4	@ (adr r2, 80020b8 <DMA_CheckFifoParam+0x28>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020db 	.word	0x080020db
 80020c0:	080020c9 	.word	0x080020c9
 80020c4:	0800215f 	.word	0x0800215f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d046      	beq.n	8002162 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d8:	e043      	b.n	8002162 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020e2:	d140      	bne.n	8002166 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e8:	e03d      	b.n	8002166 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020f2:	d121      	bne.n	8002138 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d837      	bhi.n	800216a <DMA_CheckFifoParam+0xda>
 80020fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002100 <DMA_CheckFifoParam+0x70>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	08002111 	.word	0x08002111
 8002104:	08002117 	.word	0x08002117
 8002108:	08002111 	.word	0x08002111
 800210c:	08002129 	.word	0x08002129
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      break;
 8002114:	e030      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d025      	beq.n	800216e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002126:	e022      	b.n	800216e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002130:	d11f      	bne.n	8002172 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002136:	e01c      	b.n	8002172 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d903      	bls.n	8002146 <DMA_CheckFifoParam+0xb6>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d003      	beq.n	800214c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002144:	e018      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      break;
 800214a:	e015      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      break;
 800215c:	e00b      	b.n	8002176 <DMA_CheckFifoParam+0xe6>
      break;
 800215e:	bf00      	nop
 8002160:	e00a      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 8002162:	bf00      	nop
 8002164:	e008      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 8002166:	bf00      	nop
 8002168:	e006      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 800216a:	bf00      	nop
 800216c:	e004      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 800216e:	bf00      	nop
 8002170:	e002      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;   
 8002172:	bf00      	nop
 8002174:	e000      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
    }
  } 
  
  return status; 
 8002178:	7bfb      	ldrb	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	@ 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e159      	b.n	8002458 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8148 	bne.w	8002452 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d005      	beq.n	80021da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d130      	bne.n	800223c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2203      	movs	r2, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 0201 	and.w	r2, r3, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b03      	cmp	r3, #3
 8002246:	d017      	beq.n	8002278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d123      	bne.n	80022cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a2 	beq.w	8002452 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b57      	ldr	r3, [pc, #348]	@ (8002470 <HAL_GPIO_Init+0x2e8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4a56      	ldr	r2, [pc, #344]	@ (8002470 <HAL_GPIO_Init+0x2e8>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800231c:	6453      	str	r3, [r2, #68]	@ 0x44
 800231e:	4b54      	ldr	r3, [pc, #336]	@ (8002470 <HAL_GPIO_Init+0x2e8>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232a:	4a52      	ldr	r2, [pc, #328]	@ (8002474 <HAL_GPIO_Init+0x2ec>)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a49      	ldr	r2, [pc, #292]	@ (8002478 <HAL_GPIO_Init+0x2f0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_GPIO_Init+0x202>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a48      	ldr	r2, [pc, #288]	@ (800247c <HAL_GPIO_Init+0x2f4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0x1fe>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a47      	ldr	r2, [pc, #284]	@ (8002480 <HAL_GPIO_Init+0x2f8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00d      	beq.n	8002382 <HAL_GPIO_Init+0x1fa>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a46      	ldr	r2, [pc, #280]	@ (8002484 <HAL_GPIO_Init+0x2fc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_Init+0x1f6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a45      	ldr	r2, [pc, #276]	@ (8002488 <HAL_GPIO_Init+0x300>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_GPIO_Init+0x1f2>
 8002376:	2304      	movs	r3, #4
 8002378:	e008      	b.n	800238c <HAL_GPIO_Init+0x204>
 800237a:	2307      	movs	r3, #7
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x204>
 800237e:	2303      	movs	r3, #3
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x204>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x204>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x204>
 800238a:	2300      	movs	r3, #0
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239c:	4935      	ldr	r1, [pc, #212]	@ (8002474 <HAL_GPIO_Init+0x2ec>)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023aa:	4b38      	ldr	r3, [pc, #224]	@ (800248c <HAL_GPIO_Init+0x304>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ce:	4a2f      	ldr	r2, [pc, #188]	@ (800248c <HAL_GPIO_Init+0x304>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d4:	4b2d      	ldr	r3, [pc, #180]	@ (800248c <HAL_GPIO_Init+0x304>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f8:	4a24      	ldr	r2, [pc, #144]	@ (800248c <HAL_GPIO_Init+0x304>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023fe:	4b23      	ldr	r3, [pc, #140]	@ (800248c <HAL_GPIO_Init+0x304>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002422:	4a1a      	ldr	r2, [pc, #104]	@ (800248c <HAL_GPIO_Init+0x304>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002428:	4b18      	ldr	r3, [pc, #96]	@ (800248c <HAL_GPIO_Init+0x304>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800244c:	4a0f      	ldr	r2, [pc, #60]	@ (800248c <HAL_GPIO_Init+0x304>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	f67f aea2 	bls.w	80021a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40013800 	.word	0x40013800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40021000 	.word	0x40021000
 800248c:	40013c00 	.word	0x40013c00

08002490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e267      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d075      	beq.n	800259a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ae:	4b88      	ldr	r3, [pc, #544]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d00c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b85      	ldr	r3, [pc, #532]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d112      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4b82      	ldr	r3, [pc, #520]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024d2:	d10b      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	4b7e      	ldr	r3, [pc, #504]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05b      	beq.n	8002598 <HAL_RCC_OscConfig+0x108>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d157      	bne.n	8002598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e242      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x74>
 80024f6:	4b76      	ldr	r3, [pc, #472]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a75      	ldr	r2, [pc, #468]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x98>
 800250e:	4b70      	ldr	r3, [pc, #448]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6f      	ldr	r2, [pc, #444]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b6d      	ldr	r3, [pc, #436]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6c      	ldr	r2, [pc, #432]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002528:	4b69      	ldr	r3, [pc, #420]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a68      	ldr	r2, [pc, #416]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b66      	ldr	r3, [pc, #408]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a65      	ldr	r2, [pc, #404]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800253e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff f8fe 	bl	8001748 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff f8fa 	bl	8001748 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e207      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b5b      	ldr	r3, [pc, #364]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0xc0>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff f8ea 	bl	8001748 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7ff f8e6 	bl	8001748 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	@ 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1f3      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	4b51      	ldr	r3, [pc, #324]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0xe8>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d063      	beq.n	800266e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025a6:	4b4a      	ldr	r3, [pc, #296]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b47      	ldr	r3, [pc, #284]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d11c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b44      	ldr	r3, [pc, #272]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e1c7      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b3b      	ldr	r3, [pc, #236]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4937      	ldr	r1, [pc, #220]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	e03a      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b34      	ldr	r3, [pc, #208]	@ (80026d4 <HAL_RCC_OscConfig+0x244>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7ff f89f 	bl	8001748 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7ff f89b 	bl	8001748 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1a8      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b28      	ldr	r3, [pc, #160]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4925      	ldr	r1, [pc, #148]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
 8002640:	e015      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b24      	ldr	r3, [pc, #144]	@ (80026d4 <HAL_RCC_OscConfig+0x244>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff f87e 	bl	8001748 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff f87a 	bl	8001748 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e187      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d036      	beq.n	80026e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <HAL_RCC_OscConfig+0x248>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7ff f85e 	bl	8001748 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002690:	f7ff f85a 	bl	8001748 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e167      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x200>
 80026ae:	e01b      	b.n	80026e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HAL_RCC_OscConfig+0x248>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7ff f847 	bl	8001748 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	e00e      	b.n	80026dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026be:	f7ff f843 	bl	8001748 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d907      	bls.n	80026dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e150      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	42470000 	.word	0x42470000
 80026d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ea      	bne.n	80026be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8097 	beq.w	8002824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b81      	ldr	r3, [pc, #516]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b7d      	ldr	r3, [pc, #500]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	4a7c      	ldr	r2, [pc, #496]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	@ 0x40
 8002716:	4b7a      	ldr	r3, [pc, #488]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b77      	ldr	r3, [pc, #476]	@ (8002904 <HAL_RCC_OscConfig+0x474>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b74      	ldr	r3, [pc, #464]	@ (8002904 <HAL_RCC_OscConfig+0x474>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a73      	ldr	r2, [pc, #460]	@ (8002904 <HAL_RCC_OscConfig+0x474>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7ff f803 	bl	8001748 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002746:	f7fe ffff 	bl	8001748 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e10c      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_OscConfig+0x474>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x2ea>
 800276c:	4b64      	ldr	r3, [pc, #400]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002770:	4a63      	ldr	r2, [pc, #396]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	@ 0x70
 8002778:	e01c      	b.n	80027b4 <HAL_RCC_OscConfig+0x324>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b05      	cmp	r3, #5
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x30c>
 8002782:	4b5f      	ldr	r3, [pc, #380]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002786:	4a5e      	ldr	r2, [pc, #376]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6713      	str	r3, [r2, #112]	@ 0x70
 800278e:	4b5c      	ldr	r3, [pc, #368]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	4a5b      	ldr	r2, [pc, #364]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	@ 0x70
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0x324>
 800279c:	4b58      	ldr	r3, [pc, #352]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	4a57      	ldr	r2, [pc, #348]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a8:	4b55      	ldr	r3, [pc, #340]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	4a54      	ldr	r2, [pc, #336]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe ffc4 	bl	8001748 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe ffc0 	bl	8001748 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0cb      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	4b49      	ldr	r3, [pc, #292]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ee      	beq.n	80027c4 <HAL_RCC_OscConfig+0x334>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7fe ffae 	bl	8001748 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7fe ffaa 	bl	8001748 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0b5      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	4b3e      	ldr	r3, [pc, #248]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ee      	bne.n	80027f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d105      	bne.n	8002824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002818:	4b39      	ldr	r3, [pc, #228]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	4a38      	ldr	r2, [pc, #224]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002822:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a1 	beq.w	8002970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800282e:	4b34      	ldr	r3, [pc, #208]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b08      	cmp	r3, #8
 8002838:	d05c      	beq.n	80028f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d141      	bne.n	80028c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b31      	ldr	r3, [pc, #196]	@ (8002908 <HAL_RCC_OscConfig+0x478>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe ff7e 	bl	8001748 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe ff7a 	bl	8001748 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e087      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	491b      	ldr	r1, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002898:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <HAL_RCC_OscConfig+0x478>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fe ff53 	bl	8001748 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe ff4f 	bl	8001748 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e05c      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x416>
 80028c4:	e054      	b.n	8002970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <HAL_RCC_OscConfig+0x478>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe ff3c 	bl	8001748 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe ff38 	bl	8001748 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e045      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x444>
 80028f2:	e03d      	b.n	8002970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e038      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000
 8002908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x4ec>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d028      	beq.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d121      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d11a      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	3b01      	subs	r3, #1
 8002956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0cc      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b68      	ldr	r3, [pc, #416]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d90c      	bls.n	80029bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b65      	ldr	r3, [pc, #404]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b63      	ldr	r3, [pc, #396]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0b8      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b59      	ldr	r3, [pc, #356]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a58      	ldr	r2, [pc, #352]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ec:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a52      	ldr	r2, [pc, #328]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	494d      	ldr	r1, [pc, #308]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d044      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d119      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e067      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b37      	ldr	r3, [pc, #220]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4934      	ldr	r1, [pc, #208]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a70:	f7fe fe6a 	bl	8001748 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7fe fe66 	bl	8001748 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e04f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b25      	ldr	r3, [pc, #148]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d20c      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e032      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4916      	ldr	r1, [pc, #88]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af2:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	490e      	ldr	r1, [pc, #56]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b06:	f000 f821 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	490a      	ldr	r1, [pc, #40]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	5ccb      	ldrb	r3, [r1, r3]
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	4a09      	ldr	r2, [pc, #36]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fdca 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023c00 	.word	0x40023c00
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	0801125c 	.word	0x0801125c
 8002b44:	20000004 	.word	0x20000004
 8002b48:	20000008 	.word	0x20000008

08002b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b50:	b094      	sub	sp, #80	@ 0x50
 8002b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b58:	2300      	movs	r3, #0
 8002b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b64:	4b79      	ldr	r3, [pc, #484]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d00d      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x40>
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	f200 80e1 	bhi.w	8002d38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b7e:	e0db      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b73      	ldr	r3, [pc, #460]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b84:	e0db      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b86:	4b73      	ldr	r3, [pc, #460]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b8a:	e0d8      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b94:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b96:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d063      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	2200      	movs	r2, #0
 8002baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	0159      	lsls	r1, r3, #5
 8002bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd0:	0150      	lsls	r0, r2, #5
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	1a51      	subs	r1, r2, r1
 8002bda:	6139      	str	r1, [r7, #16]
 8002bdc:	4629      	mov	r1, r5
 8002bde:	eb63 0301 	sbc.w	r3, r3, r1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf0:	4659      	mov	r1, fp
 8002bf2:	018b      	lsls	r3, r1, #6
 8002bf4:	4651      	mov	r1, sl
 8002bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfa:	4651      	mov	r1, sl
 8002bfc:	018a      	lsls	r2, r1, #6
 8002bfe:	4651      	mov	r1, sl
 8002c00:	ebb2 0801 	subs.w	r8, r2, r1
 8002c04:	4659      	mov	r1, fp
 8002c06:	eb63 0901 	sbc.w	r9, r3, r1
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c1e:	4690      	mov	r8, r2
 8002c20:	4699      	mov	r9, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	eb18 0303 	adds.w	r3, r8, r3
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	eb49 0303 	adc.w	r3, r9, r3
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c3e:	4629      	mov	r1, r5
 8002c40:	024b      	lsls	r3, r1, #9
 8002c42:	4621      	mov	r1, r4
 8002c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c48:	4621      	mov	r1, r4
 8002c4a:	024a      	lsls	r2, r1, #9
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c52:	2200      	movs	r2, #0
 8002c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c5c:	f7fd fb78 	bl	8000350 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4613      	mov	r3, r2
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c68:	e058      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6a:	4b38      	ldr	r3, [pc, #224]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	2200      	movs	r2, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	4611      	mov	r1, r2
 8002c76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	f04f 0000 	mov.w	r0, #0
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	0159      	lsls	r1, r3, #5
 8002c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c96:	0150      	lsls	r0, r2, #5
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	00eb      	lsls	r3, r5, #3
 8002cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd2:	00e2      	lsls	r2, r4, #3
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4643      	mov	r3, r8
 8002cda:	18e3      	adds	r3, r4, r3
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	464b      	mov	r3, r9
 8002ce0:	eb45 0303 	adc.w	r3, r5, r3
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	028b      	lsls	r3, r1, #10
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	028a      	lsls	r2, r1, #10
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d06:	2200      	movs	r2, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	61fa      	str	r2, [r7, #28]
 8002d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d10:	f7fd fb1e 	bl	8000350 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	3301      	adds	r3, #1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002d2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d36:	e002      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3750      	adds	r7, #80	@ 0x50
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	007a1200 	.word	0x007a1200

08002d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d74:	f7ff fff0 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0a9b      	lsrs	r3, r3, #10
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	0801126c 	.word	0x0801126c

08002d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d9c:	f7ff ffdc 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	0b5b      	lsrs	r3, r3, #13
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	4903      	ldr	r1, [pc, #12]	@ (8002dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	0801126c 	.word	0x0801126c

08002dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e042      	b.n	8002e58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe f99a 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	@ 0x24
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 ffc9 	bl	8003d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08c      	sub	sp, #48	@ 0x30
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d156      	bne.n	8002f28 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_UART_Transmit_DMA+0x26>
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e04f      	b.n	8002f2a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	@ 0x21
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eae:	4a21      	ldr	r2, [pc, #132]	@ (8002f34 <HAL_UART_Transmit_DMA+0xd4>)
 8002eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb6:	4a20      	ldr	r2, [pc, #128]	@ (8002f38 <HAL_UART_Transmit_DMA+0xd8>)
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8002f3c <HAL_UART_Transmit_DMA+0xdc>)
 8002ec0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002eca:	f107 0308 	add.w	r3, r7, #8
 8002ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3304      	adds	r3, #4
 8002ede:	461a      	mov	r2, r3
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	f7fe fdfd 	bl	8001ae0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002eee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3314      	adds	r3, #20
 8002ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	617b      	str	r3, [r7, #20]
   return(result);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3314      	adds	r3, #20
 8002f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f10:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e5      	bne.n	8002ef0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3730      	adds	r7, #48	@ 0x30
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	08003629 	.word	0x08003629
 8002f38:	080036c3 	.word	0x080036c3
 8002f3c:	08003847 	.word	0x08003847

08002f40 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d112      	bne.n	8002f80 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_UART_Receive_DMA+0x26>
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00b      	b.n	8002f82 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fcb0 	bl	80038dc <UART_Start_Receive_DMA>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	e000      	b.n	8002f82 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b090      	sub	sp, #64	@ 0x40
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa0:	2b80      	cmp	r3, #128	@ 0x80
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b21      	cmp	r3, #33	@ 0x21
 8002fb6:	d128      	bne.n	800300a <HAL_UART_DMAStop+0x80>
 8002fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d025      	beq.n	800300a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fde:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e5      	bne.n	8002fbe <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fdc6 	bl	8001b90 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fd03 	bl	8003a10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003014:	2b40      	cmp	r3, #64	@ 0x40
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b22      	cmp	r3, #34	@ 0x22
 800302a:	d128      	bne.n	800307e <HAL_UART_DMAStop+0xf4>
 800302c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d025      	beq.n	800307e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3314      	adds	r3, #20
 8003038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	60fb      	str	r3, [r7, #12]
   return(result);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003048:	637b      	str	r3, [r7, #52]	@ 0x34
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3314      	adds	r3, #20
 8003050:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003052:	61fa      	str	r2, [r7, #28]
 8003054:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	69b9      	ldr	r1, [r7, #24]
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	617b      	str	r3, [r7, #20]
   return(result);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e5      	bne.n	8003032 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fd8c 	bl	8001b90 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fcf1 	bl	8003a60 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3740      	adds	r7, #64	@ 0x40
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b0ba      	sub	sp, #232	@ 0xe8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_UART_IRQHandler+0x66>
 80030da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fd99 	bl	8003c1e <UART_Receive_IT>
      return;
 80030ec:	e25b      	b.n	80035a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80de 	beq.w	80032b4 <HAL_UART_IRQHandler+0x22c>
 80030f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003108:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80d1 	beq.w	80032b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <HAL_UART_IRQHandler+0xae>
 800311e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_UART_IRQHandler+0xd2>
 8003142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_UART_IRQHandler+0xf6>
 8003166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f043 0204 	orr.w	r2, r3, #4
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800317e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d011      	beq.n	80031ae <HAL_UART_IRQHandler+0x126>
 800318a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d105      	bne.n	80031a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f043 0208 	orr.w	r2, r3, #8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 81f2 	beq.w	800359c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_UART_IRQHandler+0x14e>
 80031c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fd24 	bl	8003c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e0:	2b40      	cmp	r3, #64	@ 0x40
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <HAL_UART_IRQHandler+0x17a>
 80031fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d04f      	beq.n	80032a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fc2c 	bl	8003a60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003212:	2b40      	cmp	r3, #64	@ 0x40
 8003214:	d141      	bne.n	800329a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3314      	adds	r3, #20
 800321c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800322c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3314      	adds	r3, #20
 800323e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003242:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800324e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800325a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1d9      	bne.n	8003216 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d013      	beq.n	8003292 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326e:	4a7e      	ldr	r2, [pc, #504]	@ (8003468 <HAL_UART_IRQHandler+0x3e0>)
 8003270:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fcfa 	bl	8001c70 <HAL_DMA_Abort_IT>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800328c:	4610      	mov	r0, r2
 800328e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	e00e      	b.n	80032b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f9b2 	bl	80035fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e00a      	b.n	80032b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f9ae 	bl	80035fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a0:	e006      	b.n	80032b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f9aa 	bl	80035fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032ae:	e175      	b.n	800359c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	bf00      	nop
    return;
 80032b2:	e173      	b.n	800359c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	f040 814f 	bne.w	800355c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8148 	beq.w	800355c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8141 	beq.w	800355c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fa:	2b40      	cmp	r3, #64	@ 0x40
 80032fc:	f040 80b6 	bne.w	800346c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800330c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8145 	beq.w	80035a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800331a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800331e:	429a      	cmp	r2, r3
 8003320:	f080 813e 	bcs.w	80035a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800332a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003336:	f000 8088 	beq.w	800344a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003348:	e853 3f00 	ldrex	r3, [r3]
 800334c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003350:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003358:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003366:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800336a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003372:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800337e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1d9      	bne.n	800333a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3314      	adds	r3, #20
 800338c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3314      	adds	r3, #20
 80033a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e1      	bne.n	8003386 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3314      	adds	r3, #20
 80033c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3314      	adds	r3, #20
 80033e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e3      	bne.n	80033c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003412:	e853 3f00 	ldrex	r3, [r3]
 8003416:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800341a:	f023 0310 	bic.w	r3, r3, #16
 800341e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800342c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800342e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003430:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003432:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003434:	e841 2300 	strex	r3, r2, [r1]
 8003438:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800343a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e3      	bne.n	8003408 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fba3 	bl	8001b90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2202      	movs	r2, #2
 800344e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003458:	b29b      	uxth	r3, r3
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	b29b      	uxth	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f8d5 	bl	8003610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003466:	e09b      	b.n	80035a0 <HAL_UART_IRQHandler+0x518>
 8003468:	08003b27 	.word	0x08003b27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003474:	b29b      	uxth	r3, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 808e 	beq.w	80035a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8089 	beq.w	80035a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80034b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e3      	bne.n	8003492 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3314      	adds	r3, #20
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	623b      	str	r3, [r7, #32]
   return(result);
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3314      	adds	r3, #20
 80034ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80034f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e3      	bne.n	80034ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0310 	bic.w	r3, r3, #16
 8003526:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	330c      	adds	r3, #12
 8003530:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003534:	61fa      	str	r2, [r7, #28]
 8003536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	69b9      	ldr	r1, [r7, #24]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	617b      	str	r3, [r7, #20]
   return(result);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e3      	bne.n	8003510 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800354e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f85b 	bl	8003610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800355a:	e023      	b.n	80035a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <HAL_UART_IRQHandler+0x4f4>
 8003568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800356c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 faea 	bl	8003b4e <UART_Transmit_IT>
    return;
 800357a:	e014      	b.n	80035a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <HAL_UART_IRQHandler+0x51e>
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800358c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb2a 	bl	8003bee <UART_EndTransmit_IT>
    return;
 800359a:	e004      	b.n	80035a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800359c:	bf00      	nop
 800359e:	e002      	b.n	80035a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035a0:	bf00      	nop
 80035a2:	e000      	b.n	80035a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035a4:	bf00      	nop
  }
}
 80035a6:	37e8      	adds	r7, #232	@ 0xe8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b090      	sub	sp, #64	@ 0x40
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d137      	bne.n	80036b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003646:	2200      	movs	r2, #0
 8003648:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800364a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3314      	adds	r3, #20
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	623b      	str	r3, [r7, #32]
   return(result);
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3314      	adds	r3, #20
 8003668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800366a:	633a      	str	r2, [r7, #48]	@ 0x30
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e5      	bne.n	800364a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800367e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	60fb      	str	r3, [r7, #12]
   return(result);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003694:	637b      	str	r3, [r7, #52]	@ 0x34
 8003696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	330c      	adds	r3, #12
 800369c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800369e:	61fa      	str	r2, [r7, #28]
 80036a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	69b9      	ldr	r1, [r7, #24]
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	617b      	str	r3, [r7, #20]
   return(result);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e5      	bne.n	800367e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036b2:	e002      	b.n	80036ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80036b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80036b6:	f7ff ff79 	bl	80035ac <HAL_UART_TxCpltCallback>
}
 80036ba:	bf00      	nop
 80036bc:	3740      	adds	r7, #64	@ 0x40
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff ff75 	bl	80035c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b09c      	sub	sp, #112	@ 0x70
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d172      	bne.n	80037e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80036fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036fc:	2200      	movs	r2, #0
 80036fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003712:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003716:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003720:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003722:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800372e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3314      	adds	r3, #20
 800373a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	667b      	str	r3, [r7, #100]	@ 0x64
 800374c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3314      	adds	r3, #20
 8003752:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003754:	647a      	str	r2, [r7, #68]	@ 0x44
 8003756:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800375a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e5      	bne.n	8003734 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3314      	adds	r3, #20
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	623b      	str	r3, [r7, #32]
   return(result);
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800377e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3314      	adds	r3, #20
 8003786:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003788:	633a      	str	r2, [r7, #48]	@ 0x30
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800378e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800379c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d119      	bne.n	80037e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0310 	bic.w	r3, r3, #16
 80037c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80037cc:	61fa      	str	r2, [r7, #28]
 80037ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	69b9      	ldr	r1, [r7, #24]
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	617b      	str	r3, [r7, #20]
   return(result);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e5      	bne.n	80037ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e2:	2200      	movs	r2, #0
 80037e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d106      	bne.n	80037fc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037f2:	4619      	mov	r1, r3
 80037f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80037f6:	f7ff ff0b 	bl	8003610 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037fa:	e002      	b.n	8003802 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80037fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80037fe:	f7ff fee9 	bl	80035d4 <HAL_UART_RxCpltCallback>
}
 8003802:	bf00      	nop
 8003804:	3770      	adds	r7, #112	@ 0x70
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003822:	2b01      	cmp	r3, #1
 8003824:	d108      	bne.n	8003838 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	b29b      	uxth	r3, r3
 800382e:	4619      	mov	r1, r3
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f7ff feed 	bl	8003610 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003836:	e002      	b.n	800383e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff fed5 	bl	80035e8 <HAL_UART_RxHalfCpltCallback>
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003856:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	2b80      	cmp	r3, #128	@ 0x80
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b21      	cmp	r3, #33	@ 0x21
 8003878:	d108      	bne.n	800388c <UART_DMAError+0x46>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2200      	movs	r2, #0
 8003884:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003886:	68b8      	ldr	r0, [r7, #8]
 8003888:	f000 f8c2 	bl	8003a10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003896:	2b40      	cmp	r3, #64	@ 0x40
 8003898:	bf0c      	ite	eq
 800389a:	2301      	moveq	r3, #1
 800389c:	2300      	movne	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b22      	cmp	r3, #34	@ 0x22
 80038ac:	d108      	bne.n	80038c0 <UART_DMAError+0x7a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2200      	movs	r2, #0
 80038b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80038ba:	68b8      	ldr	r0, [r7, #8]
 80038bc:	f000 f8d0 	bl	8003a60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	f043 0210 	orr.w	r2, r3, #16
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038cc:	68b8      	ldr	r0, [r7, #8]
 80038ce:	f7ff fe95 	bl	80035fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b098      	sub	sp, #96	@ 0x60
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2222      	movs	r2, #34	@ 0x22
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	4a3e      	ldr	r2, [pc, #248]	@ (8003a04 <UART_Start_Receive_DMA+0x128>)
 800390a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	4a3d      	ldr	r2, [pc, #244]	@ (8003a08 <UART_Start_Receive_DMA+0x12c>)
 8003912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	4a3c      	ldr	r2, [pc, #240]	@ (8003a0c <UART_Start_Receive_DMA+0x130>)
 800391a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	2200      	movs	r2, #0
 8003922:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003924:	f107 0308 	add.w	r3, r7, #8
 8003928:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	f7fe f8d0 	bl	8001ae0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d019      	beq.n	8003992 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800396e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800397e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003980:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003984:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800398c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e5      	bne.n	800395e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039b2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80039b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e5      	bne.n	8003992 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	617b      	str	r3, [r7, #20]
   return(result);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80039e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80039e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6a39      	ldr	r1, [r7, #32]
 80039ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e5      	bne.n	80039c6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3760      	adds	r7, #96	@ 0x60
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	080036df 	.word	0x080036df
 8003a08:	0800380b 	.word	0x0800380b
 8003a0c:	08003847 	.word	0x08003847

08003a10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	@ 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	61ba      	str	r2, [r7, #24]
 8003a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6979      	ldr	r1, [r7, #20]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	613b      	str	r3, [r7, #16]
   return(result);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e5      	bne.n	8003a18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003a54:	bf00      	nop
 8003a56:	3724      	adds	r7, #36	@ 0x24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b095      	sub	sp, #84	@ 0x54
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a88:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3314      	adds	r3, #20
 8003aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003abc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e5      	bne.n	8003a9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d119      	bne.n	8003b0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f023 0310 	bic.w	r3, r3, #16
 8003aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003af8:	61ba      	str	r2, [r7, #24]
 8003afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6979      	ldr	r1, [r7, #20]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	613b      	str	r3, [r7, #16]
   return(result);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b1a:	bf00      	nop
 8003b1c:	3754      	adds	r7, #84	@ 0x54
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fd5b 	bl	80035fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b21      	cmp	r3, #33	@ 0x21
 8003b60:	d13e      	bne.n	8003be0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6a:	d114      	bne.n	8003b96 <UART_Transmit_IT+0x48>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d110      	bne.n	8003b96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	1c9a      	adds	r2, r3, #2
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	621a      	str	r2, [r3, #32]
 8003b94:	e008      	b.n	8003ba8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6211      	str	r1, [r2, #32]
 8003ba0:	781a      	ldrb	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fccc 	bl	80035ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b08c      	sub	sp, #48	@ 0x30
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b22      	cmp	r3, #34	@ 0x22
 8003c30:	f040 80ae 	bne.w	8003d90 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3c:	d117      	bne.n	8003c6e <UART_Receive_IT+0x50>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	1c9a      	adds	r2, r3, #2
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c6c:	e026      	b.n	8003cbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c80:	d007      	beq.n	8003c92 <UART_Receive_IT+0x74>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <UART_Receive_IT+0x82>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e008      	b.n	8003cb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d15d      	bne.n	8003d8c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0220 	bic.w	r2, r2, #32
 8003cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d135      	bne.n	8003d82 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3c:	623a      	str	r2, [r7, #32]
 8003d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	69f9      	ldr	r1, [r7, #28]
 8003d42:	6a3a      	ldr	r2, [r7, #32]
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d10a      	bne.n	8003d74 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fc48 	bl	8003610 <HAL_UARTEx_RxEventCallback>
 8003d80:	e002      	b.n	8003d88 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fc26 	bl	80035d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e002      	b.n	8003d92 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3730      	adds	r7, #48	@ 0x30
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da0:	b0c0      	sub	sp, #256	@ 0x100
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db8:	68d9      	ldr	r1, [r3, #12]
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	ea40 0301 	orr.w	r3, r0, r1
 8003dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003df4:	f021 010c 	bic.w	r1, r1, #12
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e02:	430b      	orrs	r3, r1
 8003e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	6999      	ldr	r1, [r3, #24]
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	ea40 0301 	orr.w	r3, r0, r1
 8003e22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b8f      	ldr	r3, [pc, #572]	@ (8004068 <UART_SetConfig+0x2cc>)
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d005      	beq.n	8003e3c <UART_SetConfig+0xa0>
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b8d      	ldr	r3, [pc, #564]	@ (800406c <UART_SetConfig+0x2d0>)
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d104      	bne.n	8003e46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e3c:	f7fe ffac 	bl	8002d98 <HAL_RCC_GetPCLK2Freq>
 8003e40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e44:	e003      	b.n	8003e4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e46:	f7fe ff93 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8003e4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e58:	f040 810c 	bne.w	8004074 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e6e:	4622      	mov	r2, r4
 8003e70:	462b      	mov	r3, r5
 8003e72:	1891      	adds	r1, r2, r2
 8003e74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e76:	415b      	adcs	r3, r3
 8003e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e7e:	4621      	mov	r1, r4
 8003e80:	eb12 0801 	adds.w	r8, r2, r1
 8003e84:	4629      	mov	r1, r5
 8003e86:	eb43 0901 	adc.w	r9, r3, r1
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e9e:	4690      	mov	r8, r2
 8003ea0:	4699      	mov	r9, r3
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	eb18 0303 	adds.w	r3, r8, r3
 8003ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003eac:	462b      	mov	r3, r5
 8003eae:	eb49 0303 	adc.w	r3, r9, r3
 8003eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ec2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ec6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eca:	460b      	mov	r3, r1
 8003ecc:	18db      	adds	r3, r3, r3
 8003ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	eb42 0303 	adc.w	r3, r2, r3
 8003ed6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ed8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003edc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ee0:	f7fc fa36 	bl	8000350 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4b61      	ldr	r3, [pc, #388]	@ (8004070 <UART_SetConfig+0x2d4>)
 8003eea:	fba3 2302 	umull	r2, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	011c      	lsls	r4, r3, #4
 8003ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003efc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f14:	4641      	mov	r1, r8
 8003f16:	eb12 0a01 	adds.w	sl, r2, r1
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f34:	4692      	mov	sl, r2
 8003f36:	469b      	mov	fp, r3
 8003f38:	4643      	mov	r3, r8
 8003f3a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f42:	464b      	mov	r3, r9
 8003f44:	eb4b 0303 	adc.w	r3, fp, r3
 8003f48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f60:	460b      	mov	r3, r1
 8003f62:	18db      	adds	r3, r3, r3
 8003f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f66:	4613      	mov	r3, r2
 8003f68:	eb42 0303 	adc.w	r3, r2, r3
 8003f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f76:	f7fc f9eb 	bl	8000350 <__aeabi_uldivmod>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4b3b      	ldr	r3, [pc, #236]	@ (8004070 <UART_SetConfig+0x2d4>)
 8003f82:	fba3 2301 	umull	r2, r3, r3, r1
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2264      	movs	r2, #100	@ 0x64
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	1acb      	subs	r3, r1, r3
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f96:	4b36      	ldr	r3, [pc, #216]	@ (8004070 <UART_SetConfig+0x2d4>)
 8003f98:	fba3 2302 	umull	r2, r3, r3, r2
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fa4:	441c      	add	r4, r3
 8003fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fb8:	4642      	mov	r2, r8
 8003fba:	464b      	mov	r3, r9
 8003fbc:	1891      	adds	r1, r2, r2
 8003fbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fc0:	415b      	adcs	r3, r3
 8003fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fc8:	4641      	mov	r1, r8
 8003fca:	1851      	adds	r1, r2, r1
 8003fcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fce:	4649      	mov	r1, r9
 8003fd0:	414b      	adcs	r3, r1
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fe0:	4659      	mov	r1, fp
 8003fe2:	00cb      	lsls	r3, r1, #3
 8003fe4:	4651      	mov	r1, sl
 8003fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fea:	4651      	mov	r1, sl
 8003fec:	00ca      	lsls	r2, r1, #3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	460a      	mov	r2, r1
 8004000:	eb42 0303 	adc.w	r3, r2, r3
 8004004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004014:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800401c:	460b      	mov	r3, r1
 800401e:	18db      	adds	r3, r3, r3
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004022:	4613      	mov	r3, r2
 8004024:	eb42 0303 	adc.w	r3, r2, r3
 8004028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800402a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800402e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004032:	f7fc f98d 	bl	8000350 <__aeabi_uldivmod>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <UART_SetConfig+0x2d4>)
 800403c:	fba3 1302 	umull	r1, r3, r3, r2
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	2164      	movs	r1, #100	@ 0x64
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	3332      	adds	r3, #50	@ 0x32
 800404e:	4a08      	ldr	r2, [pc, #32]	@ (8004070 <UART_SetConfig+0x2d4>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	f003 0207 	and.w	r2, r3, #7
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4422      	add	r2, r4
 8004062:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004064:	e106      	b.n	8004274 <UART_SetConfig+0x4d8>
 8004066:	bf00      	nop
 8004068:	40011000 	.word	0x40011000
 800406c:	40011400 	.word	0x40011400
 8004070:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004078:	2200      	movs	r2, #0
 800407a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800407e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004082:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004086:	4642      	mov	r2, r8
 8004088:	464b      	mov	r3, r9
 800408a:	1891      	adds	r1, r2, r2
 800408c:	6239      	str	r1, [r7, #32]
 800408e:	415b      	adcs	r3, r3
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
 8004092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004096:	4641      	mov	r1, r8
 8004098:	1854      	adds	r4, r2, r1
 800409a:	4649      	mov	r1, r9
 800409c:	eb43 0501 	adc.w	r5, r3, r1
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	00eb      	lsls	r3, r5, #3
 80040aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ae:	00e2      	lsls	r2, r4, #3
 80040b0:	4614      	mov	r4, r2
 80040b2:	461d      	mov	r5, r3
 80040b4:	4643      	mov	r3, r8
 80040b6:	18e3      	adds	r3, r4, r3
 80040b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040bc:	464b      	mov	r3, r9
 80040be:	eb45 0303 	adc.w	r3, r5, r3
 80040c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040e2:	4629      	mov	r1, r5
 80040e4:	008b      	lsls	r3, r1, #2
 80040e6:	4621      	mov	r1, r4
 80040e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ec:	4621      	mov	r1, r4
 80040ee:	008a      	lsls	r2, r1, #2
 80040f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040f4:	f7fc f92c 	bl	8000350 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4b60      	ldr	r3, [pc, #384]	@ (8004280 <UART_SetConfig+0x4e4>)
 80040fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	011c      	lsls	r4, r3, #4
 8004106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004110:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004114:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	1891      	adds	r1, r2, r2
 800411e:	61b9      	str	r1, [r7, #24]
 8004120:	415b      	adcs	r3, r3
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004128:	4641      	mov	r1, r8
 800412a:	1851      	adds	r1, r2, r1
 800412c:	6139      	str	r1, [r7, #16]
 800412e:	4649      	mov	r1, r9
 8004130:	414b      	adcs	r3, r1
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004140:	4659      	mov	r1, fp
 8004142:	00cb      	lsls	r3, r1, #3
 8004144:	4651      	mov	r1, sl
 8004146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800414a:	4651      	mov	r1, sl
 800414c:	00ca      	lsls	r2, r1, #3
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	4603      	mov	r3, r0
 8004154:	4642      	mov	r2, r8
 8004156:	189b      	adds	r3, r3, r2
 8004158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800415c:	464b      	mov	r3, r9
 800415e:	460a      	mov	r2, r1
 8004160:	eb42 0303 	adc.w	r3, r2, r3
 8004164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004172:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004180:	4649      	mov	r1, r9
 8004182:	008b      	lsls	r3, r1, #2
 8004184:	4641      	mov	r1, r8
 8004186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800418a:	4641      	mov	r1, r8
 800418c:	008a      	lsls	r2, r1, #2
 800418e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004192:	f7fc f8dd 	bl	8000350 <__aeabi_uldivmod>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4611      	mov	r1, r2
 800419c:	4b38      	ldr	r3, [pc, #224]	@ (8004280 <UART_SetConfig+0x4e4>)
 800419e:	fba3 2301 	umull	r2, r3, r3, r1
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2264      	movs	r2, #100	@ 0x64
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	1acb      	subs	r3, r1, r3
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	3332      	adds	r3, #50	@ 0x32
 80041b0:	4a33      	ldr	r2, [pc, #204]	@ (8004280 <UART_SetConfig+0x4e4>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041bc:	441c      	add	r4, r3
 80041be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041c2:	2200      	movs	r2, #0
 80041c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80041c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80041c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041cc:	4642      	mov	r2, r8
 80041ce:	464b      	mov	r3, r9
 80041d0:	1891      	adds	r1, r2, r2
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	415b      	adcs	r3, r3
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041dc:	4641      	mov	r1, r8
 80041de:	1851      	adds	r1, r2, r1
 80041e0:	6039      	str	r1, [r7, #0]
 80041e2:	4649      	mov	r1, r9
 80041e4:	414b      	adcs	r3, r1
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041f4:	4659      	mov	r1, fp
 80041f6:	00cb      	lsls	r3, r1, #3
 80041f8:	4651      	mov	r1, sl
 80041fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fe:	4651      	mov	r1, sl
 8004200:	00ca      	lsls	r2, r1, #3
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	4603      	mov	r3, r0
 8004208:	4642      	mov	r2, r8
 800420a:	189b      	adds	r3, r3, r2
 800420c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800420e:	464b      	mov	r3, r9
 8004210:	460a      	mov	r2, r1
 8004212:	eb42 0303 	adc.w	r3, r2, r3
 8004216:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	663b      	str	r3, [r7, #96]	@ 0x60
 8004222:	667a      	str	r2, [r7, #100]	@ 0x64
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004230:	4649      	mov	r1, r9
 8004232:	008b      	lsls	r3, r1, #2
 8004234:	4641      	mov	r1, r8
 8004236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800423a:	4641      	mov	r1, r8
 800423c:	008a      	lsls	r2, r1, #2
 800423e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004242:	f7fc f885 	bl	8000350 <__aeabi_uldivmod>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <UART_SetConfig+0x4e4>)
 800424c:	fba3 1302 	umull	r1, r3, r3, r2
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	2164      	movs	r1, #100	@ 0x64
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	3332      	adds	r3, #50	@ 0x32
 800425e:	4a08      	ldr	r2, [pc, #32]	@ (8004280 <UART_SetConfig+0x4e4>)
 8004260:	fba2 2303 	umull	r2, r3, r2, r3
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	f003 020f 	and.w	r2, r3, #15
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4422      	add	r2, r4
 8004272:	609a      	str	r2, [r3, #8]
}
 8004274:	bf00      	nop
 8004276:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800427a:	46bd      	mov	sp, r7
 800427c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004280:	51eb851f 	.word	0x51eb851f

08004284 <__NVIC_SetPriority>:
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004294:	2b00      	cmp	r3, #0
 8004296:	db0a      	blt.n	80042ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	490c      	ldr	r1, [pc, #48]	@ (80042d0 <__NVIC_SetPriority+0x4c>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	0112      	lsls	r2, r2, #4
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	440b      	add	r3, r1
 80042a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042ac:	e00a      	b.n	80042c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4908      	ldr	r1, [pc, #32]	@ (80042d4 <__NVIC_SetPriority+0x50>)
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	3b04      	subs	r3, #4
 80042bc:	0112      	lsls	r2, r2, #4
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	440b      	add	r3, r1
 80042c2:	761a      	strb	r2, [r3, #24]
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	e000e100 	.word	0xe000e100
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042dc:	2100      	movs	r1, #0
 80042de:	f06f 0004 	mvn.w	r0, #4
 80042e2:	f7ff ffcf 	bl	8004284 <__NVIC_SetPriority>
#endif
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042f2:	f3ef 8305 	mrs	r3, IPSR
 80042f6:	603b      	str	r3, [r7, #0]
  return(result);
 80042f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042fe:	f06f 0305 	mvn.w	r3, #5
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	e00c      	b.n	8004320 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004306:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <osKernelInitialize+0x44>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800430e:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <osKernelInitialize+0x44>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004314:	2300      	movs	r3, #0
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	e002      	b.n	8004320 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800431e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004320:	687b      	ldr	r3, [r7, #4]
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	2000466c 	.word	0x2000466c

08004334 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800433a:	f3ef 8305 	mrs	r3, IPSR
 800433e:	603b      	str	r3, [r7, #0]
  return(result);
 8004340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004346:	f06f 0305 	mvn.w	r3, #5
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e010      	b.n	8004370 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <osKernelStart+0x48>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d109      	bne.n	800436a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004356:	f7ff ffbf 	bl	80042d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800435a:	4b08      	ldr	r3, [pc, #32]	@ (800437c <osKernelStart+0x48>)
 800435c:	2202      	movs	r2, #2
 800435e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004360:	f001 f87a 	bl	8005458 <vTaskStartScheduler>
      stat = osOK;
 8004364:	2300      	movs	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	e002      	b.n	8004370 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800436e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004370:	687b      	ldr	r3, [r7, #4]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	2000466c 	.word	0x2000466c

08004380 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b08e      	sub	sp, #56	@ 0x38
 8004384:	af04      	add	r7, sp, #16
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004390:	f3ef 8305 	mrs	r3, IPSR
 8004394:	617b      	str	r3, [r7, #20]
  return(result);
 8004396:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004398:	2b00      	cmp	r3, #0
 800439a:	d17e      	bne.n	800449a <osThreadNew+0x11a>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07b      	beq.n	800449a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043a2:	2380      	movs	r3, #128	@ 0x80
 80043a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043a6:	2318      	movs	r3, #24
 80043a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d045      	beq.n	8004446 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <osThreadNew+0x48>
        name = attr->name;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <osThreadNew+0x6e>
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b38      	cmp	r3, #56	@ 0x38
 80043e0:	d805      	bhi.n	80043ee <osThreadNew+0x6e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <osThreadNew+0x72>
        return (NULL);
 80043ee:	2300      	movs	r3, #0
 80043f0:	e054      	b.n	800449c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	089b      	lsrs	r3, r3, #2
 8004400:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00e      	beq.n	8004428 <osThreadNew+0xa8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004410:	d90a      	bls.n	8004428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <osThreadNew+0xa8>
        mem = 1;
 8004422:	2301      	movs	r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e010      	b.n	800444a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10c      	bne.n	800444a <osThreadNew+0xca>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d108      	bne.n	800444a <osThreadNew+0xca>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <osThreadNew+0xca>
          mem = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e001      	b.n	800444a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d110      	bne.n	8004472 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004458:	9202      	str	r2, [sp, #8]
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6a3a      	ldr	r2, [r7, #32]
 8004464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fe1a 	bl	80050a0 <xTaskCreateStatic>
 800446c:	4603      	mov	r3, r0
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e013      	b.n	800449a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d110      	bne.n	800449a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	b29a      	uxth	r2, r3
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fe68 	bl	8005160 <xTaskCreate>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <osThreadNew+0x11a>
            hTask = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800449a:	693b      	ldr	r3, [r7, #16]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3728      	adds	r7, #40	@ 0x28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ac:	f3ef 8305 	mrs	r3, IPSR
 80044b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80044b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <osDelay+0x1c>
    stat = osErrorISR;
 80044b8:	f06f 0305 	mvn.w	r3, #5
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e007      	b.n	80044d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 ff8e 	bl	80053ec <vTaskDelay>
    }
  }

  return (stat);
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a07      	ldr	r2, [pc, #28]	@ (8004508 <vApplicationGetIdleTaskMemory+0x2c>)
 80044ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4a06      	ldr	r2, [pc, #24]	@ (800450c <vApplicationGetIdleTaskMemory+0x30>)
 80044f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2280      	movs	r2, #128	@ 0x80
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20004670 	.word	0x20004670
 800450c:	200046cc 	.word	0x200046cc

08004510 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4a07      	ldr	r2, [pc, #28]	@ (800453c <vApplicationGetTimerTaskMemory+0x2c>)
 8004520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4a06      	ldr	r2, [pc, #24]	@ (8004540 <vApplicationGetTimerTaskMemory+0x30>)
 8004526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800452e:	601a      	str	r2, [r3, #0]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	200048cc 	.word	0x200048cc
 8004540:	20004928 	.word	0x20004928

08004544 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f103 0208 	add.w	r2, r3, #8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800455c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f103 0208 	add.w	r2, r3, #8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f103 0208 	add.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045fc:	d103      	bne.n	8004606 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e00c      	b.n	8004620 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3308      	adds	r3, #8
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e002      	b.n	8004614 <vListInsert+0x2e>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	429a      	cmp	r2, r3
 800461e:	d2f6      	bcs.n	800460e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	601a      	str	r2, [r3, #0]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6892      	ldr	r2, [r2, #8]
 800466e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6852      	ldr	r2, [r2, #4]
 8004678:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d103      	bne.n	800468c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	1e5a      	subs	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10b      	bne.n	80046d8 <xQueueGenericReset+0x2c>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	60bb      	str	r3, [r7, #8]
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046d8:	f002 f89e 	bl	8006818 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	441a      	add	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004708:	3b01      	subs	r3, #1
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	441a      	add	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	22ff      	movs	r2, #255	@ 0xff
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	22ff      	movs	r2, #255	@ 0xff
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d114      	bne.n	8004758 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01a      	beq.n	800476c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3310      	adds	r3, #16
 800473a:	4618      	mov	r0, r3
 800473c:	f001 f91a 	bl	8005974 <xTaskRemoveFromEventList>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d012      	beq.n	800476c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <xQueueGenericReset+0xd0>)
 8004748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	e009      	b.n	800476c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3310      	adds	r3, #16
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fef1 	bl	8004544 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3324      	adds	r3, #36	@ 0x24
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff feec 	bl	8004544 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800476c:	f002 f886 	bl	800687c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004770:	2301      	movs	r3, #1
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08e      	sub	sp, #56	@ 0x38
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <xQueueGenericCreateStatic+0x56>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <xQueueGenericCreateStatic+0x5a>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <xQueueGenericCreateStatic+0x5c>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10b      	bne.n	80047f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	623b      	str	r3, [r7, #32]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <xQueueGenericCreateStatic+0x84>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <xQueueGenericCreateStatic+0x88>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <xQueueGenericCreateStatic+0x8a>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	61fb      	str	r3, [r7, #28]
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004826:	2350      	movs	r3, #80	@ 0x50
 8004828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b50      	cmp	r3, #80	@ 0x50
 800482e:	d00b      	beq.n	8004848 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	61bb      	str	r3, [r7, #24]
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	e7fd      	b.n	8004844 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004848:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800484e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00d      	beq.n	8004870 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800485c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f805 	bl	800487a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004872:	4618      	mov	r0, r3
 8004874:	3730      	adds	r7, #48	@ 0x30
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e002      	b.n	800489c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048a8:	2101      	movs	r1, #1
 80048aa:	69b8      	ldr	r0, [r7, #24]
 80048ac:	f7ff fefe 	bl	80046ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08e      	sub	sp, #56	@ 0x38
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048ce:	2300      	movs	r3, #0
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <xQueueGenericSend+0x34>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	e7fd      	b.n	80048f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d103      	bne.n	8004902 <xQueueGenericSend+0x42>
 80048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <xQueueGenericSend+0x46>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <xQueueGenericSend+0x48>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <xQueueGenericSend+0x64>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d103      	bne.n	8004932 <xQueueGenericSend+0x72>
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <xQueueGenericSend+0x76>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <xQueueGenericSend+0x78>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <xQueueGenericSend+0x94>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	623b      	str	r3, [r7, #32]
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	e7fd      	b.n	8004950 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004954:	f001 f9f6 	bl	8005d44 <xTaskGetSchedulerState>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <xQueueGenericSend+0xa4>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <xQueueGenericSend+0xa8>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <xQueueGenericSend+0xaa>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <xQueueGenericSend+0xc6>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	61fb      	str	r3, [r7, #28]
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	e7fd      	b.n	8004982 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004986:	f001 ff47 	bl	8006818 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <xQueueGenericSend+0xdc>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d129      	bne.n	80049f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049a2:	f000 fa0f 	bl	8004dc4 <prvCopyDataToQueue>
 80049a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	3324      	adds	r3, #36	@ 0x24
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 ffdd 	bl	8005974 <xTaskRemoveFromEventList>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049c0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac0 <xQueueGenericSend+0x200>)
 80049c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	e00a      	b.n	80049e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049d8:	4b39      	ldr	r3, [pc, #228]	@ (8004ac0 <xQueueGenericSend+0x200>)
 80049da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049e8:	f001 ff48 	bl	800687c <vPortExitCritical>
				return pdPASS;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e063      	b.n	8004ab8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049f6:	f001 ff41 	bl	800687c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e05c      	b.n	8004ab8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a04:	f107 0314 	add.w	r3, r7, #20
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 f83f 	bl	8005a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a12:	f001 ff33 	bl	800687c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a16:	f000 fd87 	bl	8005528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a1a:	f001 fefd 	bl	8006818 <vPortEnterCritical>
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a24:	b25b      	sxtb	r3, r3
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a2a:	d103      	bne.n	8004a34 <xQueueGenericSend+0x174>
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a3a:	b25b      	sxtb	r3, r3
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a40:	d103      	bne.n	8004a4a <xQueueGenericSend+0x18a>
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a4a:	f001 ff17 	bl	800687c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a4e:	1d3a      	adds	r2, r7, #4
 8004a50:	f107 0314 	add.w	r3, r7, #20
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 f82e 	bl	8005ab8 <xTaskCheckForTimeOut>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d124      	bne.n	8004aac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a64:	f000 faa6 	bl	8004fb4 <prvIsQueueFull>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d018      	beq.n	8004aa0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	3310      	adds	r3, #16
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 ff2a 	bl	80058d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7e:	f000 fa31 	bl	8004ee4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a82:	f000 fd5f 	bl	8005544 <xTaskResumeAll>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f47f af7c 	bne.w	8004986 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac0 <xQueueGenericSend+0x200>)
 8004a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	e772      	b.n	8004986 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aa2:	f000 fa1f 	bl	8004ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aa6:	f000 fd4d 	bl	8005544 <xTaskResumeAll>
 8004aaa:	e76c      	b.n	8004986 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aae:	f000 fa19 	bl	8004ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ab2:	f000 fd47 	bl	8005544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ab6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3738      	adds	r7, #56	@ 0x38
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b090      	sub	sp, #64	@ 0x40
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSendFromISR+0x3e>
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <xQueueGenericSendFromISR+0x42>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <xQueueGenericSendFromISR+0x44>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d103      	bne.n	8004b32 <xQueueGenericSendFromISR+0x6e>
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <xQueueGenericSendFromISR+0x72>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueGenericSendFromISR+0x74>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	623b      	str	r3, [r7, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b54:	f001 ff40 	bl	80069d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b58:	f3ef 8211 	mrs	r2, BASEPRI
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	61fa      	str	r2, [r7, #28]
 8004b6e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b70:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b72:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d302      	bcc.n	8004b86 <xQueueGenericSendFromISR+0xc2>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d12f      	bne.n	8004be6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b9c:	f000 f912 	bl	8004dc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ba0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ba8:	d112      	bne.n	8004bd0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d016      	beq.n	8004be0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	3324      	adds	r3, #36	@ 0x24
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fedc 	bl	8005974 <xTaskRemoveFromEventList>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00e      	beq.n	8004be0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00b      	beq.n	8004be0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e007      	b.n	8004be0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	b25a      	sxtb	r2, r3
 8004bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004be0:	2301      	movs	r3, #1
 8004be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004be4:	e001      	b.n	8004bea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bf4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3740      	adds	r7, #64	@ 0x40
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08c      	sub	sp, #48	@ 0x30
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <xQueueReceive+0x32>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	623b      	str	r3, [r7, #32]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <xQueueReceive+0x40>
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <xQueueReceive+0x44>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <xQueueReceive+0x46>
 8004c44:	2300      	movs	r3, #0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <xQueueReceive+0x62>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	61fb      	str	r3, [r7, #28]
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c62:	f001 f86f 	bl	8005d44 <xTaskGetSchedulerState>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <xQueueReceive+0x72>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <xQueueReceive+0x76>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <xQueueReceive+0x78>
 8004c76:	2300      	movs	r3, #0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <xQueueReceive+0x94>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	61bb      	str	r3, [r7, #24]
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	e7fd      	b.n	8004c90 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c94:	f001 fdc0 	bl	8006818 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01f      	beq.n	8004ce4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca8:	f000 f8f6 	bl	8004e98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	1e5a      	subs	r2, r3, #1
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00f      	beq.n	8004cdc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	3310      	adds	r3, #16
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fe57 	bl	8005974 <xTaskRemoveFromEventList>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8004dc0 <xQueueReceive+0x1c0>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cdc:	f001 fdce 	bl	800687c <vPortExitCritical>
				return pdPASS;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e069      	b.n	8004db8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cea:	f001 fdc7 	bl	800687c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e062      	b.n	8004db8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cf8:	f107 0310 	add.w	r3, r7, #16
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fec5 	bl	8005a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d02:	2301      	movs	r3, #1
 8004d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d06:	f001 fdb9 	bl	800687c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d0a:	f000 fc0d 	bl	8005528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d0e:	f001 fd83 	bl	8006818 <vPortEnterCritical>
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d18:	b25b      	sxtb	r3, r3
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d1e:	d103      	bne.n	8004d28 <xQueueReceive+0x128>
 8004d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d2e:	b25b      	sxtb	r3, r3
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d34:	d103      	bne.n	8004d3e <xQueueReceive+0x13e>
 8004d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d3e:	f001 fd9d 	bl	800687c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d42:	1d3a      	adds	r2, r7, #4
 8004d44:	f107 0310 	add.w	r3, r7, #16
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 feb4 	bl	8005ab8 <xTaskCheckForTimeOut>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d123      	bne.n	8004d9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d58:	f000 f916 	bl	8004f88 <prvIsQueueEmpty>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d017      	beq.n	8004d92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	3324      	adds	r3, #36	@ 0x24
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fdb0 	bl	80058d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d72:	f000 f8b7 	bl	8004ee4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d76:	f000 fbe5 	bl	8005544 <xTaskResumeAll>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d189      	bne.n	8004c94 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d80:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <xQueueReceive+0x1c0>)
 8004d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	e780      	b.n	8004c94 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d94:	f000 f8a6 	bl	8004ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d98:	f000 fbd4 	bl	8005544 <xTaskResumeAll>
 8004d9c:	e77a      	b.n	8004c94 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004da0:	f000 f8a0 	bl	8004ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004da4:	f000 fbce 	bl	8005544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004daa:	f000 f8ed 	bl	8004f88 <prvIsQueueEmpty>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f43f af6f 	beq.w	8004c94 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004db6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3730      	adds	r7, #48	@ 0x30
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10d      	bne.n	8004dfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d14d      	bne.n	8004e86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 ffc6 	bl	8005d80 <xTaskPriorityDisinherit>
 8004df4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	e043      	b.n	8004e86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d119      	bne.n	8004e38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6858      	ldr	r0, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	f00b fac9 	bl	80103a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1c:	441a      	add	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d32b      	bcc.n	8004e86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]
 8004e36:	e026      	b.n	8004e86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68d8      	ldr	r0, [r3, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e40:	461a      	mov	r2, r3
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	f00b faaf 	bl	80103a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	425b      	negs	r3, r3
 8004e52:	441a      	add	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d207      	bcs.n	8004e74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	425b      	negs	r3, r3
 8004e6e:	441a      	add	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d105      	bne.n	8004e86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e8e:	697b      	ldr	r3, [r7, #20]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d018      	beq.n	8004edc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	441a      	add	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d303      	bcc.n	8004ecc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68d9      	ldr	r1, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6838      	ldr	r0, [r7, #0]
 8004ed8:	f00b fa65 	bl	80103a6 <memcpy>
	}
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004eec:	f001 fc94 	bl	8006818 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ef6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ef8:	e011      	b.n	8004f1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d012      	beq.n	8004f28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3324      	adds	r3, #36	@ 0x24
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fd34 	bl	8005974 <xTaskRemoveFromEventList>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f12:	f000 fe35 	bl	8005b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	dce9      	bgt.n	8004efa <prvUnlockQueue+0x16>
 8004f26:	e000      	b.n	8004f2a <prvUnlockQueue+0x46>
					break;
 8004f28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	22ff      	movs	r2, #255	@ 0xff
 8004f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f32:	f001 fca3 	bl	800687c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f36:	f001 fc6f 	bl	8006818 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f42:	e011      	b.n	8004f68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d012      	beq.n	8004f72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3310      	adds	r3, #16
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fd0f 	bl	8005974 <xTaskRemoveFromEventList>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f5c:	f000 fe10 	bl	8005b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f60:	7bbb      	ldrb	r3, [r7, #14]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dce9      	bgt.n	8004f44 <prvUnlockQueue+0x60>
 8004f70:	e000      	b.n	8004f74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	22ff      	movs	r2, #255	@ 0xff
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f7c:	f001 fc7e 	bl	800687c <vPortExitCritical>
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f90:	f001 fc42 	bl	8006818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e001      	b.n	8004fa6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fa6:	f001 fc69 	bl	800687c <vPortExitCritical>

	return xReturn;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fbc:	f001 fc2c 	bl	8006818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d102      	bne.n	8004fd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e001      	b.n	8004fd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fd6:	f001 fc51 	bl	800687c <vPortExitCritical>

	return xReturn;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e014      	b.n	800501e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8005034 <vQueueAddToRegistry+0x50>)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005000:	490c      	ldr	r1, [pc, #48]	@ (8005034 <vQueueAddToRegistry+0x50>)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800500a:	4a0a      	ldr	r2, [pc, #40]	@ (8005034 <vQueueAddToRegistry+0x50>)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4413      	add	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005016:	e006      	b.n	8005026 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b07      	cmp	r3, #7
 8005022:	d9e7      	bls.n	8004ff4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20004d28 	.word	0x20004d28

08005038 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005048:	f001 fbe6 	bl	8006818 <vPortEnterCritical>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005052:	b25b      	sxtb	r3, r3
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005058:	d103      	bne.n	8005062 <vQueueWaitForMessageRestricted+0x2a>
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005068:	b25b      	sxtb	r3, r3
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800506e:	d103      	bne.n	8005078 <vQueueWaitForMessageRestricted+0x40>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005078:	f001 fc00 	bl	800687c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	3324      	adds	r3, #36	@ 0x24
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fc45 	bl	800591c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f7ff ff26 	bl	8004ee4 <prvUnlockQueue>
	}
 8005098:	bf00      	nop
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08e      	sub	sp, #56	@ 0x38
 80050a4:	af04      	add	r7, sp, #16
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	623b      	str	r3, [r7, #32]
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	61fb      	str	r3, [r7, #28]
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050ea:	235c      	movs	r3, #92	@ 0x5c
 80050ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80050f2:	d00b      	beq.n	800510c <xTaskCreateStatic+0x6c>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	61bb      	str	r3, [r7, #24]
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	e7fd      	b.n	8005108 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800510c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01e      	beq.n	8005152 <xTaskCreateStatic+0xb2>
 8005114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01b      	beq.n	8005152 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800512c:	2300      	movs	r3, #0
 800512e:	9303      	str	r3, [sp, #12]
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	9302      	str	r3, [sp, #8]
 8005134:	f107 0314 	add.w	r3, r7, #20
 8005138:	9301      	str	r3, [sp, #4]
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f850 	bl	80051ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800514a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800514c:	f000 f8de 	bl	800530c <prvAddNewTaskToReadyList>
 8005150:	e001      	b.n	8005156 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005156:	697b      	ldr	r3, [r7, #20]
	}
 8005158:	4618      	mov	r0, r3
 800515a:	3728      	adds	r7, #40	@ 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	@ 0x30
 8005164:	af04      	add	r7, sp, #16
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4618      	mov	r0, r3
 8005176:	f001 fc71 	bl	8006a5c <pvPortMalloc>
 800517a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00e      	beq.n	80051a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005182:	205c      	movs	r0, #92	@ 0x5c
 8005184:	f001 fc6a 	bl	8006a5c <pvPortMalloc>
 8005188:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	631a      	str	r2, [r3, #48]	@ 0x30
 8005196:	e005      	b.n	80051a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005198:	6978      	ldr	r0, [r7, #20]
 800519a:	f001 fd2d 	bl	8006bf8 <vPortFree>
 800519e:	e001      	b.n	80051a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d017      	beq.n	80051da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	2300      	movs	r3, #0
 80051b6:	9303      	str	r3, [sp, #12]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	9302      	str	r3, [sp, #8]
 80051bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f80e 	bl	80051ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ce:	69f8      	ldr	r0, [r7, #28]
 80051d0:	f000 f89c 	bl	800530c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051d4:	2301      	movs	r3, #1
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	e002      	b.n	80051e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051e0:	69bb      	ldr	r3, [r7, #24]
	}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b088      	sub	sp, #32
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	461a      	mov	r2, r3
 8005202:	21a5      	movs	r1, #165	@ 0xa5
 8005204:	f00b f806 	bl	8010214 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005212:	3b01      	subs	r3, #1
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f023 0307 	bic.w	r3, r3, #7
 8005220:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	617b      	str	r3, [r7, #20]
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01f      	beq.n	800528a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	e012      	b.n	8005276 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	7819      	ldrb	r1, [r3, #0]
 8005258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	3334      	adds	r3, #52	@ 0x34
 8005260:	460a      	mov	r2, r1
 8005262:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d006      	beq.n	800527e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	3301      	adds	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	2b0f      	cmp	r3, #15
 800527a:	d9e9      	bls.n	8005250 <prvInitialiseNewTask+0x66>
 800527c:	e000      	b.n	8005280 <prvInitialiseNewTask+0x96>
			{
				break;
 800527e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005288:	e003      	b.n	8005292 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005294:	2b37      	cmp	r3, #55	@ 0x37
 8005296:	d901      	bls.n	800529c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005298:	2337      	movs	r3, #55	@ 0x37
 800529a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	2200      	movs	r2, #0
 80052ac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	3304      	adds	r3, #4
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff f966 	bl	8004584 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	3318      	adds	r3, #24
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff f961 	bl	8004584 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052da:	2200      	movs	r2, #0
 80052dc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	69b8      	ldr	r0, [r7, #24]
 80052ec:	f001 f966 	bl	80065bc <pxPortInitialiseStack>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005302:	bf00      	nop
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005314:	f001 fa80 	bl	8006818 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005318:	4b2d      	ldr	r3, [pc, #180]	@ (80053d0 <prvAddNewTaskToReadyList+0xc4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	4a2c      	ldr	r2, [pc, #176]	@ (80053d0 <prvAddNewTaskToReadyList+0xc4>)
 8005320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005322:	4b2c      	ldr	r3, [pc, #176]	@ (80053d4 <prvAddNewTaskToReadyList+0xc8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800532a:	4a2a      	ldr	r2, [pc, #168]	@ (80053d4 <prvAddNewTaskToReadyList+0xc8>)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005330:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <prvAddNewTaskToReadyList+0xc4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d110      	bne.n	800535a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005338:	f000 fc46 	bl	8005bc8 <prvInitialiseTaskLists>
 800533c:	e00d      	b.n	800535a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800533e:	4b26      	ldr	r3, [pc, #152]	@ (80053d8 <prvAddNewTaskToReadyList+0xcc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005346:	4b23      	ldr	r3, [pc, #140]	@ (80053d4 <prvAddNewTaskToReadyList+0xc8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	429a      	cmp	r2, r3
 8005352:	d802      	bhi.n	800535a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005354:	4a1f      	ldr	r2, [pc, #124]	@ (80053d4 <prvAddNewTaskToReadyList+0xc8>)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800535a:	4b20      	ldr	r3, [pc, #128]	@ (80053dc <prvAddNewTaskToReadyList+0xd0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	4a1e      	ldr	r2, [pc, #120]	@ (80053dc <prvAddNewTaskToReadyList+0xd0>)
 8005362:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005364:	4b1d      	ldr	r3, [pc, #116]	@ (80053dc <prvAddNewTaskToReadyList+0xd0>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005370:	4b1b      	ldr	r3, [pc, #108]	@ (80053e0 <prvAddNewTaskToReadyList+0xd4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d903      	bls.n	8005380 <prvAddNewTaskToReadyList+0x74>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <prvAddNewTaskToReadyList+0xd4>)
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4a15      	ldr	r2, [pc, #84]	@ (80053e4 <prvAddNewTaskToReadyList+0xd8>)
 800538e:	441a      	add	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3304      	adds	r3, #4
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f7ff f901 	bl	800459e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800539c:	f001 fa6e 	bl	800687c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053a0:	4b0d      	ldr	r3, [pc, #52]	@ (80053d8 <prvAddNewTaskToReadyList+0xcc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00e      	beq.n	80053c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053a8:	4b0a      	ldr	r3, [pc, #40]	@ (80053d4 <prvAddNewTaskToReadyList+0xc8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d207      	bcs.n	80053c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053b6:	4b0c      	ldr	r3, [pc, #48]	@ (80053e8 <prvAddNewTaskToReadyList+0xdc>)
 80053b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	2000523c 	.word	0x2000523c
 80053d4:	20004d68 	.word	0x20004d68
 80053d8:	20005248 	.word	0x20005248
 80053dc:	20005258 	.word	0x20005258
 80053e0:	20005244 	.word	0x20005244
 80053e4:	20004d6c 	.word	0x20004d6c
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d018      	beq.n	8005430 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053fe:	4b14      	ldr	r3, [pc, #80]	@ (8005450 <vTaskDelay+0x64>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <vTaskDelay+0x32>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60bb      	str	r3, [r7, #8]
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	e7fd      	b.n	800541a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800541e:	f000 f883 	bl	8005528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005422:	2100      	movs	r1, #0
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fd1b 	bl	8005e60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800542a:	f000 f88b 	bl	8005544 <xTaskResumeAll>
 800542e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d107      	bne.n	8005446 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005436:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <vTaskDelay+0x68>)
 8005438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20005264 	.word	0x20005264
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	@ 0x28
 800545c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005466:	463a      	mov	r2, r7
 8005468:	1d39      	adds	r1, r7, #4
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff f834 	bl	80044dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	9202      	str	r2, [sp, #8]
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	2300      	movs	r3, #0
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	2300      	movs	r3, #0
 8005484:	460a      	mov	r2, r1
 8005486:	4922      	ldr	r1, [pc, #136]	@ (8005510 <vTaskStartScheduler+0xb8>)
 8005488:	4822      	ldr	r0, [pc, #136]	@ (8005514 <vTaskStartScheduler+0xbc>)
 800548a:	f7ff fe09 	bl	80050a0 <xTaskCreateStatic>
 800548e:	4603      	mov	r3, r0
 8005490:	4a21      	ldr	r2, [pc, #132]	@ (8005518 <vTaskStartScheduler+0xc0>)
 8005492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005494:	4b20      	ldr	r3, [pc, #128]	@ (8005518 <vTaskStartScheduler+0xc0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e001      	b.n	80054a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d102      	bne.n	80054b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054ac:	f000 fd2c 	bl	8005f08 <xTimerCreateTimerTask>
 80054b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d116      	bne.n	80054e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	613b      	str	r3, [r7, #16]
}
 80054ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054cc:	4b13      	ldr	r3, [pc, #76]	@ (800551c <vTaskStartScheduler+0xc4>)
 80054ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054d4:	4b12      	ldr	r3, [pc, #72]	@ (8005520 <vTaskStartScheduler+0xc8>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054da:	4b12      	ldr	r3, [pc, #72]	@ (8005524 <vTaskStartScheduler+0xcc>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054e0:	f001 f8f6 	bl	80066d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054e4:	e00f      	b.n	8005506 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ec:	d10b      	bne.n	8005506 <vTaskStartScheduler+0xae>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60fb      	str	r3, [r7, #12]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <vTaskStartScheduler+0xaa>
}
 8005506:	bf00      	nop
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	08011214 	.word	0x08011214
 8005514:	08005b99 	.word	0x08005b99
 8005518:	20005260 	.word	0x20005260
 800551c:	2000525c 	.word	0x2000525c
 8005520:	20005248 	.word	0x20005248
 8005524:	20005240 	.word	0x20005240

08005528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800552c:	4b04      	ldr	r3, [pc, #16]	@ (8005540 <vTaskSuspendAll+0x18>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	4a03      	ldr	r2, [pc, #12]	@ (8005540 <vTaskSuspendAll+0x18>)
 8005534:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20005264 	.word	0x20005264

08005544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005552:	4b42      	ldr	r3, [pc, #264]	@ (800565c <xTaskResumeAll+0x118>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <xTaskResumeAll+0x2e>
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	603b      	str	r3, [r7, #0]
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	e7fd      	b.n	800556e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005572:	f001 f951 	bl	8006818 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005576:	4b39      	ldr	r3, [pc, #228]	@ (800565c <xTaskResumeAll+0x118>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3b01      	subs	r3, #1
 800557c:	4a37      	ldr	r2, [pc, #220]	@ (800565c <xTaskResumeAll+0x118>)
 800557e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005580:	4b36      	ldr	r3, [pc, #216]	@ (800565c <xTaskResumeAll+0x118>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d162      	bne.n	800564e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005588:	4b35      	ldr	r3, [pc, #212]	@ (8005660 <xTaskResumeAll+0x11c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d05e      	beq.n	800564e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005590:	e02f      	b.n	80055f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005592:	4b34      	ldr	r3, [pc, #208]	@ (8005664 <xTaskResumeAll+0x120>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3318      	adds	r3, #24
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff f85a 	bl	8004658 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3304      	adds	r3, #4
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff f855 	bl	8004658 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005668 <xTaskResumeAll+0x124>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d903      	bls.n	80055c2 <xTaskResumeAll+0x7e>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055be:	4a2a      	ldr	r2, [pc, #168]	@ (8005668 <xTaskResumeAll+0x124>)
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4a27      	ldr	r2, [pc, #156]	@ (800566c <xTaskResumeAll+0x128>)
 80055d0:	441a      	add	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4619      	mov	r1, r3
 80055d8:	4610      	mov	r0, r2
 80055da:	f7fe ffe0 	bl	800459e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e2:	4b23      	ldr	r3, [pc, #140]	@ (8005670 <xTaskResumeAll+0x12c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d302      	bcc.n	80055f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055ec:	4b21      	ldr	r3, [pc, #132]	@ (8005674 <xTaskResumeAll+0x130>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005664 <xTaskResumeAll+0x120>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1cb      	bne.n	8005592 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005600:	f000 fb80 	bl	8005d04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005604:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <xTaskResumeAll+0x134>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005610:	f000 f846 	bl	80056a0 <xTaskIncrementTick>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800561a:	4b16      	ldr	r3, [pc, #88]	@ (8005674 <xTaskResumeAll+0x130>)
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3b01      	subs	r3, #1
 8005624:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f1      	bne.n	8005610 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800562c:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <xTaskResumeAll+0x134>)
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005632:	4b10      	ldr	r3, [pc, #64]	@ (8005674 <xTaskResumeAll+0x130>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800563a:	2301      	movs	r3, #1
 800563c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800563e:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <xTaskResumeAll+0x138>)
 8005640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800564e:	f001 f915 	bl	800687c <vPortExitCritical>

	return xAlreadyYielded;
 8005652:	68bb      	ldr	r3, [r7, #8]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20005264 	.word	0x20005264
 8005660:	2000523c 	.word	0x2000523c
 8005664:	200051fc 	.word	0x200051fc
 8005668:	20005244 	.word	0x20005244
 800566c:	20004d6c 	.word	0x20004d6c
 8005670:	20004d68 	.word	0x20004d68
 8005674:	20005250 	.word	0x20005250
 8005678:	2000524c 	.word	0x2000524c
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005686:	4b05      	ldr	r3, [pc, #20]	@ (800569c <xTaskGetTickCount+0x1c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800568c:	687b      	ldr	r3, [r7, #4]
}
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20005240 	.word	0x20005240

080056a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056aa:	4b4f      	ldr	r3, [pc, #316]	@ (80057e8 <xTaskIncrementTick+0x148>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 8090 	bne.w	80057d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056b4:	4b4d      	ldr	r3, [pc, #308]	@ (80057ec <xTaskIncrementTick+0x14c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3301      	adds	r3, #1
 80056ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056bc:	4a4b      	ldr	r2, [pc, #300]	@ (80057ec <xTaskIncrementTick+0x14c>)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d121      	bne.n	800570c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056c8:	4b49      	ldr	r3, [pc, #292]	@ (80057f0 <xTaskIncrementTick+0x150>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00b      	beq.n	80056ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	603b      	str	r3, [r7, #0]
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	e7fd      	b.n	80056e6 <xTaskIncrementTick+0x46>
 80056ea:	4b41      	ldr	r3, [pc, #260]	@ (80057f0 <xTaskIncrementTick+0x150>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	4b40      	ldr	r3, [pc, #256]	@ (80057f4 <xTaskIncrementTick+0x154>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a3e      	ldr	r2, [pc, #248]	@ (80057f0 <xTaskIncrementTick+0x150>)
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	4a3e      	ldr	r2, [pc, #248]	@ (80057f4 <xTaskIncrementTick+0x154>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	4b3e      	ldr	r3, [pc, #248]	@ (80057f8 <xTaskIncrementTick+0x158>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	4a3c      	ldr	r2, [pc, #240]	@ (80057f8 <xTaskIncrementTick+0x158>)
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	f000 fafc 	bl	8005d04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800570c:	4b3b      	ldr	r3, [pc, #236]	@ (80057fc <xTaskIncrementTick+0x15c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d349      	bcc.n	80057aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005716:	4b36      	ldr	r3, [pc, #216]	@ (80057f0 <xTaskIncrementTick+0x150>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005720:	4b36      	ldr	r3, [pc, #216]	@ (80057fc <xTaskIncrementTick+0x15c>)
 8005722:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005726:	601a      	str	r2, [r3, #0]
					break;
 8005728:	e03f      	b.n	80057aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572a:	4b31      	ldr	r3, [pc, #196]	@ (80057f0 <xTaskIncrementTick+0x150>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d203      	bcs.n	800574a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005742:	4a2e      	ldr	r2, [pc, #184]	@ (80057fc <xTaskIncrementTick+0x15c>)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005748:	e02f      	b.n	80057aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	3304      	adds	r3, #4
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe ff82 	bl	8004658 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	3318      	adds	r3, #24
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe ff79 	bl	8004658 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576a:	4b25      	ldr	r3, [pc, #148]	@ (8005800 <xTaskIncrementTick+0x160>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d903      	bls.n	800577a <xTaskIncrementTick+0xda>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	4a22      	ldr	r2, [pc, #136]	@ (8005800 <xTaskIncrementTick+0x160>)
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4a1f      	ldr	r2, [pc, #124]	@ (8005804 <xTaskIncrementTick+0x164>)
 8005788:	441a      	add	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f7fe ff04 	bl	800459e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579a:	4b1b      	ldr	r3, [pc, #108]	@ (8005808 <xTaskIncrementTick+0x168>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3b8      	bcc.n	8005716 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a8:	e7b5      	b.n	8005716 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057aa:	4b17      	ldr	r3, [pc, #92]	@ (8005808 <xTaskIncrementTick+0x168>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b0:	4914      	ldr	r1, [pc, #80]	@ (8005804 <xTaskIncrementTick+0x164>)
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d901      	bls.n	80057c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80057c2:	2301      	movs	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057c6:	4b11      	ldr	r3, [pc, #68]	@ (800580c <xTaskIncrementTick+0x16c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e004      	b.n	80057de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005810 <xTaskIncrementTick+0x170>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3301      	adds	r3, #1
 80057da:	4a0d      	ldr	r2, [pc, #52]	@ (8005810 <xTaskIncrementTick+0x170>)
 80057dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057de:	697b      	ldr	r3, [r7, #20]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20005264 	.word	0x20005264
 80057ec:	20005240 	.word	0x20005240
 80057f0:	200051f4 	.word	0x200051f4
 80057f4:	200051f8 	.word	0x200051f8
 80057f8:	20005254 	.word	0x20005254
 80057fc:	2000525c 	.word	0x2000525c
 8005800:	20005244 	.word	0x20005244
 8005804:	20004d6c 	.word	0x20004d6c
 8005808:	20004d68 	.word	0x20004d68
 800580c:	20005250 	.word	0x20005250
 8005810:	2000524c 	.word	0x2000524c

08005814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800581a:	4b28      	ldr	r3, [pc, #160]	@ (80058bc <vTaskSwitchContext+0xa8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005822:	4b27      	ldr	r3, [pc, #156]	@ (80058c0 <vTaskSwitchContext+0xac>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005828:	e042      	b.n	80058b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800582a:	4b25      	ldr	r3, [pc, #148]	@ (80058c0 <vTaskSwitchContext+0xac>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005830:	4b24      	ldr	r3, [pc, #144]	@ (80058c4 <vTaskSwitchContext+0xb0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e011      	b.n	800585c <vTaskSwitchContext+0x48>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <vTaskSwitchContext+0x42>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	607b      	str	r3, [r7, #4]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <vTaskSwitchContext+0x3e>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3b01      	subs	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	491a      	ldr	r1, [pc, #104]	@ (80058c8 <vTaskSwitchContext+0xb4>)
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0e3      	beq.n	8005838 <vTaskSwitchContext+0x24>
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4a13      	ldr	r2, [pc, #76]	@ (80058c8 <vTaskSwitchContext+0xb4>)
 800587c:	4413      	add	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	3308      	adds	r3, #8
 8005892:	429a      	cmp	r2, r3
 8005894:	d104      	bne.n	80058a0 <vTaskSwitchContext+0x8c>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	4a09      	ldr	r2, [pc, #36]	@ (80058cc <vTaskSwitchContext+0xb8>)
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	4a06      	ldr	r2, [pc, #24]	@ (80058c4 <vTaskSwitchContext+0xb0>)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6013      	str	r3, [r2, #0]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	20005264 	.word	0x20005264
 80058c0:	20005250 	.word	0x20005250
 80058c4:	20005244 	.word	0x20005244
 80058c8:	20004d6c 	.word	0x20004d6c
 80058cc:	20004d68 	.word	0x20004d68

080058d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10b      	bne.n	80058f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058f8:	4b07      	ldr	r3, [pc, #28]	@ (8005918 <vTaskPlaceOnEventList+0x48>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3318      	adds	r3, #24
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fe fe70 	bl	80045e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005906:	2101      	movs	r1, #1
 8005908:	6838      	ldr	r0, [r7, #0]
 800590a:	f000 faa9 	bl	8005e60 <prvAddCurrentTaskToDelayedList>
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20004d68 	.word	0x20004d68

0800591c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	617b      	str	r3, [r7, #20]
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	e7fd      	b.n	8005942 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005946:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <vTaskPlaceOnEventListRestricted+0x54>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3318      	adds	r3, #24
 800594c:	4619      	mov	r1, r3
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7fe fe25 	bl	800459e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800595a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800595e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	68b8      	ldr	r0, [r7, #8]
 8005964:	f000 fa7c 	bl	8005e60 <prvAddCurrentTaskToDelayedList>
	}
 8005968:	bf00      	nop
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20004d68 	.word	0x20004d68

08005974 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60fb      	str	r3, [r7, #12]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	3318      	adds	r3, #24
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe fe56 	bl	8004658 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005a24 <xTaskRemoveFromEventList+0xb0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11d      	bne.n	80059f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe fe4d 	bl	8004658 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c2:	4b19      	ldr	r3, [pc, #100]	@ (8005a28 <xTaskRemoveFromEventList+0xb4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d903      	bls.n	80059d2 <xTaskRemoveFromEventList+0x5e>
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ce:	4a16      	ldr	r2, [pc, #88]	@ (8005a28 <xTaskRemoveFromEventList+0xb4>)
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4a13      	ldr	r2, [pc, #76]	@ (8005a2c <xTaskRemoveFromEventList+0xb8>)
 80059e0:	441a      	add	r2, r3
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7fe fdd8 	bl	800459e <vListInsertEnd>
 80059ee:	e005      	b.n	80059fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	3318      	adds	r3, #24
 80059f4:	4619      	mov	r1, r3
 80059f6:	480e      	ldr	r0, [pc, #56]	@ (8005a30 <xTaskRemoveFromEventList+0xbc>)
 80059f8:	f7fe fdd1 	bl	800459e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a00:	4b0c      	ldr	r3, [pc, #48]	@ (8005a34 <xTaskRemoveFromEventList+0xc0>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d905      	bls.n	8005a16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a38 <xTaskRemoveFromEventList+0xc4>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e001      	b.n	8005a1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a1a:	697b      	ldr	r3, [r7, #20]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20005264 	.word	0x20005264
 8005a28:	20005244 	.word	0x20005244
 8005a2c:	20004d6c 	.word	0x20004d6c
 8005a30:	200051fc 	.word	0x200051fc
 8005a34:	20004d68 	.word	0x20004d68
 8005a38:	20005250 	.word	0x20005250

08005a3c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	60fb      	str	r3, [r7, #12]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005a62:	f000 fed9 	bl	8006818 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a66:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <vTaskSetTimeOutState+0x48>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005a6e:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <vTaskSetTimeOutState+0x4c>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005a76:	f000 ff01 	bl	800687c <vPortExitCritical>
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20005254 	.word	0x20005254
 8005a88:	20005240 	.word	0x20005240

08005a8c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a94:	4b06      	ldr	r3, [pc, #24]	@ (8005ab0 <vTaskInternalSetTimeOutState+0x24>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a9c:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <vTaskInternalSetTimeOutState+0x28>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	605a      	str	r2, [r3, #4]
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20005254 	.word	0x20005254
 8005ab4:	20005240 	.word	0x20005240

08005ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10b      	bne.n	8005ae0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	613b      	str	r3, [r7, #16]
}
 8005ada:	bf00      	nop
 8005adc:	bf00      	nop
 8005ade:	e7fd      	b.n	8005adc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	60fb      	str	r3, [r7, #12]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005afe:	f000 fe8b 	bl	8006818 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b02:	4b1d      	ldr	r3, [pc, #116]	@ (8005b78 <xTaskCheckForTimeOut+0xc0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b1a:	d102      	bne.n	8005b22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e023      	b.n	8005b6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b15      	ldr	r3, [pc, #84]	@ (8005b7c <xTaskCheckForTimeOut+0xc4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d007      	beq.n	8005b3e <xTaskCheckForTimeOut+0x86>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e015      	b.n	8005b6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d20b      	bcs.n	8005b60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ff99 	bl	8005a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	e004      	b.n	8005b6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b6a:	f000 fe87 	bl	800687c <vPortExitCritical>

	return xReturn;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20005240 	.word	0x20005240
 8005b7c:	20005254 	.word	0x20005254

08005b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b84:	4b03      	ldr	r3, [pc, #12]	@ (8005b94 <vTaskMissedYield+0x14>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	20005250 	.word	0x20005250

08005b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ba0:	f000 f852 	bl	8005c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ba4:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <prvIdleTask+0x28>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d9f9      	bls.n	8005ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <prvIdleTask+0x2c>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bbc:	e7f0      	b.n	8005ba0 <prvIdleTask+0x8>
 8005bbe:	bf00      	nop
 8005bc0:	20004d6c 	.word	0x20004d6c
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	e00c      	b.n	8005bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a12      	ldr	r2, [pc, #72]	@ (8005c28 <prvInitialiseTaskLists+0x60>)
 8005be0:	4413      	add	r3, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fcae 	bl	8004544 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3301      	adds	r3, #1
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b37      	cmp	r3, #55	@ 0x37
 8005bf2:	d9ef      	bls.n	8005bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bf4:	480d      	ldr	r0, [pc, #52]	@ (8005c2c <prvInitialiseTaskLists+0x64>)
 8005bf6:	f7fe fca5 	bl	8004544 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bfa:	480d      	ldr	r0, [pc, #52]	@ (8005c30 <prvInitialiseTaskLists+0x68>)
 8005bfc:	f7fe fca2 	bl	8004544 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c00:	480c      	ldr	r0, [pc, #48]	@ (8005c34 <prvInitialiseTaskLists+0x6c>)
 8005c02:	f7fe fc9f 	bl	8004544 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c06:	480c      	ldr	r0, [pc, #48]	@ (8005c38 <prvInitialiseTaskLists+0x70>)
 8005c08:	f7fe fc9c 	bl	8004544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c0c:	480b      	ldr	r0, [pc, #44]	@ (8005c3c <prvInitialiseTaskLists+0x74>)
 8005c0e:	f7fe fc99 	bl	8004544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <prvInitialiseTaskLists+0x78>)
 8005c14:	4a05      	ldr	r2, [pc, #20]	@ (8005c2c <prvInitialiseTaskLists+0x64>)
 8005c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c18:	4b0a      	ldr	r3, [pc, #40]	@ (8005c44 <prvInitialiseTaskLists+0x7c>)
 8005c1a:	4a05      	ldr	r2, [pc, #20]	@ (8005c30 <prvInitialiseTaskLists+0x68>)
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20004d6c 	.word	0x20004d6c
 8005c2c:	200051cc 	.word	0x200051cc
 8005c30:	200051e0 	.word	0x200051e0
 8005c34:	200051fc 	.word	0x200051fc
 8005c38:	20005210 	.word	0x20005210
 8005c3c:	20005228 	.word	0x20005228
 8005c40:	200051f4 	.word	0x200051f4
 8005c44:	200051f8 	.word	0x200051f8

08005c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c4e:	e019      	b.n	8005c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c50:	f000 fde2 	bl	8006818 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c54:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <prvCheckTasksWaitingTermination+0x50>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fcf9 	bl	8004658 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c66:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <prvCheckTasksWaitingTermination+0x54>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8005c9c <prvCheckTasksWaitingTermination+0x54>)
 8005c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c7a:	f000 fdff 	bl	800687c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f810 	bl	8005ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c84:	4b06      	ldr	r3, [pc, #24]	@ (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e1      	bne.n	8005c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20005210 	.word	0x20005210
 8005c9c:	2000523c 	.word	0x2000523c
 8005ca0:	20005224 	.word	0x20005224

08005ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d108      	bne.n	8005cc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 ff9c 	bl	8006bf8 <vPortFree>
				vPortFree( pxTCB );
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 ff99 	bl	8006bf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cc6:	e019      	b.n	8005cfc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d103      	bne.n	8005cda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 ff90 	bl	8006bf8 <vPortFree>
	}
 8005cd8:	e010      	b.n	8005cfc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d00b      	beq.n	8005cfc <prvDeleteTCB+0x58>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <prvDeleteTCB+0x54>
	}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d3c <prvResetNextTaskUnblockTime+0x38>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d14:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <prvResetNextTaskUnblockTime+0x3c>)
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d1c:	e008      	b.n	8005d30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1e:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <prvResetNextTaskUnblockTime+0x38>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4a04      	ldr	r2, [pc, #16]	@ (8005d40 <prvResetNextTaskUnblockTime+0x3c>)
 8005d2e:	6013      	str	r3, [r2, #0]
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	200051f4 	.word	0x200051f4
 8005d40:	2000525c 	.word	0x2000525c

08005d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d78 <xTaskGetSchedulerState+0x34>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d102      	bne.n	8005d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d52:	2301      	movs	r3, #1
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	e008      	b.n	8005d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d58:	4b08      	ldr	r3, [pc, #32]	@ (8005d7c <xTaskGetSchedulerState+0x38>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d60:	2302      	movs	r3, #2
 8005d62:	607b      	str	r3, [r7, #4]
 8005d64:	e001      	b.n	8005d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d66:	2300      	movs	r3, #0
 8005d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d6a:	687b      	ldr	r3, [r7, #4]
	}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	20005248 	.word	0x20005248
 8005d7c:	20005264 	.word	0x20005264

08005d80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d058      	beq.n	8005e48 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d96:	4b2f      	ldr	r3, [pc, #188]	@ (8005e54 <xTaskPriorityDisinherit+0xd4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d00b      	beq.n	8005db8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	60bb      	str	r3, [r7, #8]
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ddc:	1e5a      	subs	r2, r3, #1
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d02c      	beq.n	8005e48 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d128      	bne.n	8005e48 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fe fc2c 	bl	8004658 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e18:	4b0f      	ldr	r3, [pc, #60]	@ (8005e58 <xTaskPriorityDisinherit+0xd8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d903      	bls.n	8005e28 <xTaskPriorityDisinherit+0xa8>
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	4a0c      	ldr	r2, [pc, #48]	@ (8005e58 <xTaskPriorityDisinherit+0xd8>)
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4a09      	ldr	r2, [pc, #36]	@ (8005e5c <xTaskPriorityDisinherit+0xdc>)
 8005e36:	441a      	add	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7fe fbad 	bl	800459e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e44:	2301      	movs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e48:	697b      	ldr	r3, [r7, #20]
	}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20004d68 	.word	0x20004d68
 8005e58:	20005244 	.word	0x20005244
 8005e5c:	20004d6c 	.word	0x20004d6c

08005e60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e6a:	4b21      	ldr	r3, [pc, #132]	@ (8005ef0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e70:	4b20      	ldr	r3, [pc, #128]	@ (8005ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fbee 	bl	8004658 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e82:	d10a      	bne.n	8005e9a <prvAddCurrentTaskToDelayedList+0x3a>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	4619      	mov	r1, r3
 8005e92:	4819      	ldr	r0, [pc, #100]	@ (8005ef8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e94:	f7fe fb83 	bl	800459e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e98:	e026      	b.n	8005ee8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ea2:	4b14      	ldr	r3, [pc, #80]	@ (8005ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d209      	bcs.n	8005ec6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb2:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f7fe fb91 	bl	80045e6 <vListInsert>
}
 8005ec4:	e010      	b.n	8005ee8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	f7fe fb87 	bl	80045e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d202      	bcs.n	8005ee8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ee2:	4a08      	ldr	r2, [pc, #32]	@ (8005f04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6013      	str	r3, [r2, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20005240 	.word	0x20005240
 8005ef4:	20004d68 	.word	0x20004d68
 8005ef8:	20005228 	.word	0x20005228
 8005efc:	200051f8 	.word	0x200051f8
 8005f00:	200051f4 	.word	0x200051f4
 8005f04:	2000525c 	.word	0x2000525c

08005f08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	@ 0x28
 8005f0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f12:	f000 fb13 	bl	800653c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f16:	4b1d      	ldr	r3, [pc, #116]	@ (8005f8c <xTimerCreateTimerTask+0x84>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d021      	beq.n	8005f62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f26:	1d3a      	adds	r2, r7, #4
 8005f28:	f107 0108 	add.w	r1, r7, #8
 8005f2c:	f107 030c 	add.w	r3, r7, #12
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe faed 	bl	8004510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	9202      	str	r2, [sp, #8]
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	2302      	movs	r3, #2
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	460a      	mov	r2, r1
 8005f48:	4911      	ldr	r1, [pc, #68]	@ (8005f90 <xTimerCreateTimerTask+0x88>)
 8005f4a:	4812      	ldr	r0, [pc, #72]	@ (8005f94 <xTimerCreateTimerTask+0x8c>)
 8005f4c:	f7ff f8a8 	bl	80050a0 <xTaskCreateStatic>
 8005f50:	4603      	mov	r3, r0
 8005f52:	4a11      	ldr	r2, [pc, #68]	@ (8005f98 <xTimerCreateTimerTask+0x90>)
 8005f54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f56:	4b10      	ldr	r3, [pc, #64]	@ (8005f98 <xTimerCreateTimerTask+0x90>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	613b      	str	r3, [r7, #16]
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	e7fd      	b.n	8005f7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f80:	697b      	ldr	r3, [r7, #20]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20005298 	.word	0x20005298
 8005f90:	0801121c 	.word	0x0801121c
 8005f94:	080060d5 	.word	0x080060d5
 8005f98:	2000529c 	.word	0x2000529c

08005f9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	@ 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <xTimerGenericCommand+0x30>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	623b      	str	r3, [r7, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	e7fd      	b.n	8005fc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fcc:	4b19      	ldr	r3, [pc, #100]	@ (8006034 <xTimerGenericCommand+0x98>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d02a      	beq.n	800602a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	dc18      	bgt.n	8006018 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fe6:	f7ff fead 	bl	8005d44 <xTaskGetSchedulerState>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d109      	bne.n	8006004 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ff0:	4b10      	ldr	r3, [pc, #64]	@ (8006034 <xTimerGenericCommand+0x98>)
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	f107 0110 	add.w	r1, r7, #16
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffc:	f7fe fc60 	bl	80048c0 <xQueueGenericSend>
 8006000:	6278      	str	r0, [r7, #36]	@ 0x24
 8006002:	e012      	b.n	800602a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006004:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <xTimerGenericCommand+0x98>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	f107 0110 	add.w	r1, r7, #16
 800600c:	2300      	movs	r3, #0
 800600e:	2200      	movs	r2, #0
 8006010:	f7fe fc56 	bl	80048c0 <xQueueGenericSend>
 8006014:	6278      	str	r0, [r7, #36]	@ 0x24
 8006016:	e008      	b.n	800602a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006018:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <xTimerGenericCommand+0x98>)
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	f107 0110 	add.w	r1, r7, #16
 8006020:	2300      	movs	r3, #0
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	f7fe fd4e 	bl	8004ac4 <xQueueGenericSendFromISR>
 8006028:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800602c:	4618      	mov	r0, r3
 800602e:	3728      	adds	r7, #40	@ 0x28
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20005298 	.word	0x20005298

08006038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af02      	add	r7, sp, #8
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006042:	4b23      	ldr	r3, [pc, #140]	@ (80060d0 <prvProcessExpiredTimer+0x98>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3304      	adds	r3, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe fb01 	bl	8004658 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d023      	beq.n	80060ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	699a      	ldr	r2, [r3, #24]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	18d1      	adds	r1, r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	6978      	ldr	r0, [r7, #20]
 8006072:	f000 f8d5 	bl	8006220 <prvInsertTimerInActiveList>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d020      	beq.n	80060be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800607c:	2300      	movs	r3, #0
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	2300      	movs	r3, #0
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	2100      	movs	r1, #0
 8006086:	6978      	ldr	r0, [r7, #20]
 8006088:	f7ff ff88 	bl	8005f9c <xTimerGenericCommand>
 800608c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d114      	bne.n	80060be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60fb      	str	r3, [r7, #12]
}
 80060a6:	bf00      	nop
 80060a8:	bf00      	nop
 80060aa:	e7fd      	b.n	80060a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	6978      	ldr	r0, [r7, #20]
 80060c4:	4798      	blx	r3
}
 80060c6:	bf00      	nop
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20005290 	.word	0x20005290

080060d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060dc:	f107 0308 	add.w	r3, r7, #8
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 f859 	bl	8006198 <prvGetNextExpireTime>
 80060e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4619      	mov	r1, r3
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f805 	bl	80060fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060f2:	f000 f8d7 	bl	80062a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060f6:	bf00      	nop
 80060f8:	e7f0      	b.n	80060dc <prvTimerTask+0x8>
	...

080060fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006106:	f7ff fa0f 	bl	8005528 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800610a:	f107 0308 	add.w	r3, r7, #8
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f866 	bl	80061e0 <prvSampleTimeNow>
 8006114:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d130      	bne.n	800617e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <prvProcessTimerOrBlockTask+0x3c>
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	429a      	cmp	r2, r3
 8006128:	d806      	bhi.n	8006138 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800612a:	f7ff fa0b 	bl	8005544 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff ff81 	bl	8006038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006136:	e024      	b.n	8006182 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800613e:	4b13      	ldr	r3, [pc, #76]	@ (800618c <prvProcessTimerOrBlockTask+0x90>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <prvProcessTimerOrBlockTask+0x50>
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <prvProcessTimerOrBlockTask+0x52>
 800614c:	2300      	movs	r3, #0
 800614e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006150:	4b0f      	ldr	r3, [pc, #60]	@ (8006190 <prvProcessTimerOrBlockTask+0x94>)
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	4619      	mov	r1, r3
 800615e:	f7fe ff6b 	bl	8005038 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006162:	f7ff f9ef 	bl	8005544 <xTaskResumeAll>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800616c:	4b09      	ldr	r3, [pc, #36]	@ (8006194 <prvProcessTimerOrBlockTask+0x98>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
}
 800617c:	e001      	b.n	8006182 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800617e:	f7ff f9e1 	bl	8005544 <xTaskResumeAll>
}
 8006182:	bf00      	nop
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20005294 	.word	0x20005294
 8006190:	20005298 	.word	0x20005298
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061a0:	4b0e      	ldr	r3, [pc, #56]	@ (80061dc <prvGetNextExpireTime+0x44>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <prvGetNextExpireTime+0x16>
 80061aa:	2201      	movs	r2, #1
 80061ac:	e000      	b.n	80061b0 <prvGetNextExpireTime+0x18>
 80061ae:	2200      	movs	r2, #0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d105      	bne.n	80061c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061bc:	4b07      	ldr	r3, [pc, #28]	@ (80061dc <prvGetNextExpireTime+0x44>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	e001      	b.n	80061cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061cc:	68fb      	ldr	r3, [r7, #12]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20005290 	.word	0x20005290

080061e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061e8:	f7ff fa4a 	bl	8005680 <xTaskGetTickCount>
 80061ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061ee:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <prvSampleTimeNow+0x3c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d205      	bcs.n	8006204 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061f8:	f000 f93a 	bl	8006470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e002      	b.n	800620a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800620a:	4a04      	ldr	r2, [pc, #16]	@ (800621c <prvSampleTimeNow+0x3c>)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006210:	68fb      	ldr	r3, [r7, #12]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200052a0 	.word	0x200052a0

08006220 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	429a      	cmp	r2, r3
 8006244:	d812      	bhi.n	800626c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	1ad2      	subs	r2, r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	429a      	cmp	r2, r3
 8006252:	d302      	bcc.n	800625a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006254:	2301      	movs	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e01b      	b.n	8006292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800625a:	4b10      	ldr	r3, [pc, #64]	@ (800629c <prvInsertTimerInActiveList+0x7c>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3304      	adds	r3, #4
 8006262:	4619      	mov	r1, r3
 8006264:	4610      	mov	r0, r2
 8006266:	f7fe f9be 	bl	80045e6 <vListInsert>
 800626a:	e012      	b.n	8006292 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d206      	bcs.n	8006282 <prvInsertTimerInActiveList+0x62>
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d302      	bcc.n	8006282 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800627c:	2301      	movs	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	e007      	b.n	8006292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006282:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <prvInsertTimerInActiveList+0x80>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3304      	adds	r3, #4
 800628a:	4619      	mov	r1, r3
 800628c:	4610      	mov	r0, r2
 800628e:	f7fe f9aa 	bl	80045e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006292:	697b      	ldr	r3, [r7, #20]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	20005294 	.word	0x20005294
 80062a0:	20005290 	.word	0x20005290

080062a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08e      	sub	sp, #56	@ 0x38
 80062a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062aa:	e0ce      	b.n	800644a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	da19      	bge.n	80062e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062b2:	1d3b      	adds	r3, r7, #4
 80062b4:	3304      	adds	r3, #4
 80062b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10b      	bne.n	80062d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	61fb      	str	r3, [r7, #28]
}
 80062d0:	bf00      	nop
 80062d2:	bf00      	nop
 80062d4:	e7fd      	b.n	80062d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062dc:	6850      	ldr	r0, [r2, #4]
 80062de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062e0:	6892      	ldr	r2, [r2, #8]
 80062e2:	4611      	mov	r1, r2
 80062e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f2c0 80ae 	blt.w	800644a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d004      	beq.n	8006304 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fc:	3304      	adds	r3, #4
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe f9aa 	bl	8004658 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006304:	463b      	mov	r3, r7
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff ff6a 	bl	80061e0 <prvSampleTimeNow>
 800630c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b09      	cmp	r3, #9
 8006312:	f200 8097 	bhi.w	8006444 <prvProcessReceivedCommands+0x1a0>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <prvProcessReceivedCommands+0x78>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006345 	.word	0x08006345
 8006320:	08006345 	.word	0x08006345
 8006324:	08006345 	.word	0x08006345
 8006328:	080063bb 	.word	0x080063bb
 800632c:	080063cf 	.word	0x080063cf
 8006330:	0800641b 	.word	0x0800641b
 8006334:	08006345 	.word	0x08006345
 8006338:	08006345 	.word	0x08006345
 800633c:	080063bb 	.word	0x080063bb
 8006340:	080063cf 	.word	0x080063cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	b2da      	uxtb	r2, r3
 8006350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006352:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	18d1      	adds	r1, r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006364:	f7ff ff5c 	bl	8006220 <prvInsertTimerInActiveList>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d06c      	beq.n	8006448 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006374:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d061      	beq.n	8006448 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	441a      	add	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	2300      	movs	r3, #0
 8006392:	2100      	movs	r1, #0
 8006394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006396:	f7ff fe01 	bl	8005f9c <xTimerGenericCommand>
 800639a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d152      	bne.n	8006448 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	61bb      	str	r3, [r7, #24]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063cc:	e03d      	b.n	800644a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	617b      	str	r3, [r7, #20]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	18d1      	adds	r1, r2, r3
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006414:	f7ff ff04 	bl	8006220 <prvInsertTimerInActiveList>
					break;
 8006418:	e017      	b.n	800644a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800641a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800642a:	f000 fbe5 	bl	8006bf8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800642e:	e00c      	b.n	800644a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006436:	f023 0301 	bic.w	r3, r3, #1
 800643a:	b2da      	uxtb	r2, r3
 800643c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006442:	e002      	b.n	800644a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006444:	bf00      	nop
 8006446:	e000      	b.n	800644a <prvProcessReceivedCommands+0x1a6>
					break;
 8006448:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800644a:	4b08      	ldr	r3, [pc, #32]	@ (800646c <prvProcessReceivedCommands+0x1c8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	1d39      	adds	r1, r7, #4
 8006450:	2200      	movs	r2, #0
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fbd4 	bl	8004c00 <xQueueReceive>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	f47f af26 	bne.w	80062ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	3730      	adds	r7, #48	@ 0x30
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20005298 	.word	0x20005298

08006470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006476:	e049      	b.n	800650c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006478:	4b2e      	ldr	r3, [pc, #184]	@ (8006534 <prvSwitchTimerLists+0xc4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006482:	4b2c      	ldr	r3, [pc, #176]	@ (8006534 <prvSwitchTimerLists+0xc4>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3304      	adds	r3, #4
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe f8e1 	bl	8004658 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d02f      	beq.n	800650c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4413      	add	r3, r2
 80064b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d90e      	bls.n	80064dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006534 <prvSwitchTimerLists+0xc4>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f7fe f886 	bl	80045e6 <vListInsert>
 80064da:	e017      	b.n	800650c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064dc:	2300      	movs	r3, #0
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	2300      	movs	r3, #0
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	2100      	movs	r1, #0
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff fd58 	bl	8005f9c <xTimerGenericCommand>
 80064ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	603b      	str	r3, [r7, #0]
}
 8006506:	bf00      	nop
 8006508:	bf00      	nop
 800650a:	e7fd      	b.n	8006508 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800650c:	4b09      	ldr	r3, [pc, #36]	@ (8006534 <prvSwitchTimerLists+0xc4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1b0      	bne.n	8006478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006516:	4b07      	ldr	r3, [pc, #28]	@ (8006534 <prvSwitchTimerLists+0xc4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800651c:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <prvSwitchTimerLists+0xc8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a04      	ldr	r2, [pc, #16]	@ (8006534 <prvSwitchTimerLists+0xc4>)
 8006522:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006524:	4a04      	ldr	r2, [pc, #16]	@ (8006538 <prvSwitchTimerLists+0xc8>)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	6013      	str	r3, [r2, #0]
}
 800652a:	bf00      	nop
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20005290 	.word	0x20005290
 8006538:	20005294 	.word	0x20005294

0800653c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006542:	f000 f969 	bl	8006818 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006546:	4b15      	ldr	r3, [pc, #84]	@ (800659c <prvCheckForValidListAndQueue+0x60>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d120      	bne.n	8006590 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800654e:	4814      	ldr	r0, [pc, #80]	@ (80065a0 <prvCheckForValidListAndQueue+0x64>)
 8006550:	f7fd fff8 	bl	8004544 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006554:	4813      	ldr	r0, [pc, #76]	@ (80065a4 <prvCheckForValidListAndQueue+0x68>)
 8006556:	f7fd fff5 	bl	8004544 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800655a:	4b13      	ldr	r3, [pc, #76]	@ (80065a8 <prvCheckForValidListAndQueue+0x6c>)
 800655c:	4a10      	ldr	r2, [pc, #64]	@ (80065a0 <prvCheckForValidListAndQueue+0x64>)
 800655e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006560:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <prvCheckForValidListAndQueue+0x70>)
 8006562:	4a10      	ldr	r2, [pc, #64]	@ (80065a4 <prvCheckForValidListAndQueue+0x68>)
 8006564:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006566:	2300      	movs	r3, #0
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <prvCheckForValidListAndQueue+0x74>)
 800656c:	4a11      	ldr	r2, [pc, #68]	@ (80065b4 <prvCheckForValidListAndQueue+0x78>)
 800656e:	2110      	movs	r1, #16
 8006570:	200a      	movs	r0, #10
 8006572:	f7fe f905 	bl	8004780 <xQueueGenericCreateStatic>
 8006576:	4603      	mov	r3, r0
 8006578:	4a08      	ldr	r2, [pc, #32]	@ (800659c <prvCheckForValidListAndQueue+0x60>)
 800657a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800657c:	4b07      	ldr	r3, [pc, #28]	@ (800659c <prvCheckForValidListAndQueue+0x60>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006584:	4b05      	ldr	r3, [pc, #20]	@ (800659c <prvCheckForValidListAndQueue+0x60>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	490b      	ldr	r1, [pc, #44]	@ (80065b8 <prvCheckForValidListAndQueue+0x7c>)
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fd2a 	bl	8004fe4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006590:	f000 f974 	bl	800687c <vPortExitCritical>
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20005298 	.word	0x20005298
 80065a0:	20005268 	.word	0x20005268
 80065a4:	2000527c 	.word	0x2000527c
 80065a8:	20005290 	.word	0x20005290
 80065ac:	20005294 	.word	0x20005294
 80065b0:	20005344 	.word	0x20005344
 80065b4:	200052a4 	.word	0x200052a4
 80065b8:	08011224 	.word	0x08011224

080065bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3b04      	subs	r3, #4
 80065cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3b04      	subs	r3, #4
 80065da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b04      	subs	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006620 <pxPortInitialiseStack+0x64>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b14      	subs	r3, #20
 80065f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3b04      	subs	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f06f 0202 	mvn.w	r2, #2
 800660a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3b20      	subs	r3, #32
 8006610:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	08006625 	.word	0x08006625

08006624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800662e:	4b13      	ldr	r3, [pc, #76]	@ (800667c <prvTaskExitError+0x58>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006636:	d00b      	beq.n	8006650 <prvTaskExitError+0x2c>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	60fb      	str	r3, [r7, #12]
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	e7fd      	b.n	800664c <prvTaskExitError+0x28>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	60bb      	str	r3, [r7, #8]
}
 8006662:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006664:	bf00      	nop
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0fc      	beq.n	8006666 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20000010 	.word	0x20000010

08006680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006680:	4b07      	ldr	r3, [pc, #28]	@ (80066a0 <pxCurrentTCBConst2>)
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	6808      	ldr	r0, [r1, #0]
 8006686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	f380 8809 	msr	PSP, r0
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8811 	msr	BASEPRI, r0
 800669a:	4770      	bx	lr
 800669c:	f3af 8000 	nop.w

080066a0 <pxCurrentTCBConst2>:
 80066a0:	20004d68 	.word	0x20004d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066a8:	4808      	ldr	r0, [pc, #32]	@ (80066cc <prvPortStartFirstTask+0x24>)
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	6800      	ldr	r0, [r0, #0]
 80066ae:	f380 8808 	msr	MSP, r0
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8814 	msr	CONTROL, r0
 80066ba:	b662      	cpsie	i
 80066bc:	b661      	cpsie	f
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	df00      	svc	0
 80066c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ca:	bf00      	nop
 80066cc:	e000ed08 	.word	0xe000ed08

080066d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066d6:	4b47      	ldr	r3, [pc, #284]	@ (80067f4 <xPortStartScheduler+0x124>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a47      	ldr	r2, [pc, #284]	@ (80067f8 <xPortStartScheduler+0x128>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10b      	bne.n	80066f8 <xPortStartScheduler+0x28>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	613b      	str	r3, [r7, #16]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066f8:	4b3e      	ldr	r3, [pc, #248]	@ (80067f4 <xPortStartScheduler+0x124>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a3f      	ldr	r2, [pc, #252]	@ (80067fc <xPortStartScheduler+0x12c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d10b      	bne.n	800671a <xPortStartScheduler+0x4a>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	60fb      	str	r3, [r7, #12]
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop
 8006718:	e7fd      	b.n	8006716 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800671a:	4b39      	ldr	r3, [pc, #228]	@ (8006800 <xPortStartScheduler+0x130>)
 800671c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	22ff      	movs	r2, #255	@ 0xff
 800672a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800673c:	b2da      	uxtb	r2, r3
 800673e:	4b31      	ldr	r3, [pc, #196]	@ (8006804 <xPortStartScheduler+0x134>)
 8006740:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006742:	4b31      	ldr	r3, [pc, #196]	@ (8006808 <xPortStartScheduler+0x138>)
 8006744:	2207      	movs	r2, #7
 8006746:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006748:	e009      	b.n	800675e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800674a:	4b2f      	ldr	r3, [pc, #188]	@ (8006808 <xPortStartScheduler+0x138>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3b01      	subs	r3, #1
 8006750:	4a2d      	ldr	r2, [pc, #180]	@ (8006808 <xPortStartScheduler+0x138>)
 8006752:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	b2db      	uxtb	r3, r3
 800675c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006766:	2b80      	cmp	r3, #128	@ 0x80
 8006768:	d0ef      	beq.n	800674a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800676a:	4b27      	ldr	r3, [pc, #156]	@ (8006808 <xPortStartScheduler+0x138>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f1c3 0307 	rsb	r3, r3, #7
 8006772:	2b04      	cmp	r3, #4
 8006774:	d00b      	beq.n	800678e <xPortStartScheduler+0xbe>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	60bb      	str	r3, [r7, #8]
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	e7fd      	b.n	800678a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800678e:	4b1e      	ldr	r3, [pc, #120]	@ (8006808 <xPortStartScheduler+0x138>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	4a1c      	ldr	r2, [pc, #112]	@ (8006808 <xPortStartScheduler+0x138>)
 8006796:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006798:	4b1b      	ldr	r3, [pc, #108]	@ (8006808 <xPortStartScheduler+0x138>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067a0:	4a19      	ldr	r2, [pc, #100]	@ (8006808 <xPortStartScheduler+0x138>)
 80067a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067ac:	4b17      	ldr	r3, [pc, #92]	@ (800680c <xPortStartScheduler+0x13c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a16      	ldr	r2, [pc, #88]	@ (800680c <xPortStartScheduler+0x13c>)
 80067b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067b8:	4b14      	ldr	r3, [pc, #80]	@ (800680c <xPortStartScheduler+0x13c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a13      	ldr	r2, [pc, #76]	@ (800680c <xPortStartScheduler+0x13c>)
 80067be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067c4:	f000 f8da 	bl	800697c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067c8:	4b11      	ldr	r3, [pc, #68]	@ (8006810 <xPortStartScheduler+0x140>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067ce:	f000 f8f9 	bl	80069c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067d2:	4b10      	ldr	r3, [pc, #64]	@ (8006814 <xPortStartScheduler+0x144>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006814 <xPortStartScheduler+0x144>)
 80067d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067de:	f7ff ff63 	bl	80066a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067e2:	f7ff f817 	bl	8005814 <vTaskSwitchContext>
	prvTaskExitError();
 80067e6:	f7ff ff1d 	bl	8006624 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	e000ed00 	.word	0xe000ed00
 80067f8:	410fc271 	.word	0x410fc271
 80067fc:	410fc270 	.word	0x410fc270
 8006800:	e000e400 	.word	0xe000e400
 8006804:	20005394 	.word	0x20005394
 8006808:	20005398 	.word	0x20005398
 800680c:	e000ed20 	.word	0xe000ed20
 8006810:	20000010 	.word	0x20000010
 8006814:	e000ef34 	.word	0xe000ef34

08006818 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006832:	4b10      	ldr	r3, [pc, #64]	@ (8006874 <vPortEnterCritical+0x5c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3301      	adds	r3, #1
 8006838:	4a0e      	ldr	r2, [pc, #56]	@ (8006874 <vPortEnterCritical+0x5c>)
 800683a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800683c:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <vPortEnterCritical+0x5c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d110      	bne.n	8006866 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006844:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <vPortEnterCritical+0x60>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <vPortEnterCritical+0x4e>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	603b      	str	r3, [r7, #0]
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	e7fd      	b.n	8006862 <vPortEnterCritical+0x4a>
	}
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20000010 	.word	0x20000010
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006882:	4b12      	ldr	r3, [pc, #72]	@ (80068cc <vPortExitCritical+0x50>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <vPortExitCritical+0x26>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	607b      	str	r3, [r7, #4]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068a2:	4b0a      	ldr	r3, [pc, #40]	@ (80068cc <vPortExitCritical+0x50>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4a08      	ldr	r2, [pc, #32]	@ (80068cc <vPortExitCritical+0x50>)
 80068aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068ac:	4b07      	ldr	r3, [pc, #28]	@ (80068cc <vPortExitCritical+0x50>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d105      	bne.n	80068c0 <vPortExitCritical+0x44>
 80068b4:	2300      	movs	r3, #0
 80068b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f383 8811 	msr	BASEPRI, r3
}
 80068be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20000010 	.word	0x20000010

080068d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068d0:	f3ef 8009 	mrs	r0, PSP
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	4b15      	ldr	r3, [pc, #84]	@ (8006930 <pxCurrentTCBConst>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f01e 0f10 	tst.w	lr, #16
 80068e0:	bf08      	it	eq
 80068e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	6010      	str	r0, [r2, #0]
 80068ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068f4:	f380 8811 	msr	BASEPRI, r0
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f7fe ff88 	bl	8005814 <vTaskSwitchContext>
 8006904:	f04f 0000 	mov.w	r0, #0
 8006908:	f380 8811 	msr	BASEPRI, r0
 800690c:	bc09      	pop	{r0, r3}
 800690e:	6819      	ldr	r1, [r3, #0]
 8006910:	6808      	ldr	r0, [r1, #0]
 8006912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006916:	f01e 0f10 	tst.w	lr, #16
 800691a:	bf08      	it	eq
 800691c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006920:	f380 8809 	msr	PSP, r0
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst>:
 8006930:	20004d68 	.word	0x20004d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006952:	f7fe fea5 	bl	80056a0 <xTaskIncrementTick>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800695c:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <xPortSysTickHandler+0x40>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f383 8811 	msr	BASEPRI, r3
}
 800696e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006980:	4b0b      	ldr	r3, [pc, #44]	@ (80069b0 <vPortSetupTimerInterrupt+0x34>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <vPortSetupTimerInterrupt+0x38>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800698c:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <vPortSetupTimerInterrupt+0x3c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0a      	ldr	r2, [pc, #40]	@ (80069bc <vPortSetupTimerInterrupt+0x40>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	099b      	lsrs	r3, r3, #6
 8006998:	4a09      	ldr	r2, [pc, #36]	@ (80069c0 <vPortSetupTimerInterrupt+0x44>)
 800699a:	3b01      	subs	r3, #1
 800699c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800699e:	4b04      	ldr	r3, [pc, #16]	@ (80069b0 <vPortSetupTimerInterrupt+0x34>)
 80069a0:	2207      	movs	r2, #7
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000e010 	.word	0xe000e010
 80069b4:	e000e018 	.word	0xe000e018
 80069b8:	20000004 	.word	0x20000004
 80069bc:	10624dd3 	.word	0x10624dd3
 80069c0:	e000e014 	.word	0xe000e014

080069c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069d4 <vPortEnableVFP+0x10>
 80069c8:	6801      	ldr	r1, [r0, #0]
 80069ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069ce:	6001      	str	r1, [r0, #0]
 80069d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069d2:	bf00      	nop
 80069d4:	e000ed88 	.word	0xe000ed88

080069d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069de:	f3ef 8305 	mrs	r3, IPSR
 80069e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	d915      	bls.n	8006a16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ea:	4a18      	ldr	r2, [pc, #96]	@ (8006a4c <vPortValidateInterruptPriority+0x74>)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069f4:	4b16      	ldr	r3, [pc, #88]	@ (8006a50 <vPortValidateInterruptPriority+0x78>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	7afa      	ldrb	r2, [r7, #11]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d20b      	bcs.n	8006a16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	e7fd      	b.n	8006a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a16:	4b0f      	ldr	r3, [pc, #60]	@ (8006a54 <vPortValidateInterruptPriority+0x7c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a58 <vPortValidateInterruptPriority+0x80>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d90b      	bls.n	8006a3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	603b      	str	r3, [r7, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <vPortValidateInterruptPriority+0x62>
	}
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	e000e3f0 	.word	0xe000e3f0
 8006a50:	20005394 	.word	0x20005394
 8006a54:	e000ed0c 	.word	0xe000ed0c
 8006a58:	20005398 	.word	0x20005398

08006a5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	@ 0x28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a68:	f7fe fd5e 	bl	8005528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a6c:	4b5c      	ldr	r3, [pc, #368]	@ (8006be0 <pvPortMalloc+0x184>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a74:	f000 f924 	bl	8006cc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a78:	4b5a      	ldr	r3, [pc, #360]	@ (8006be4 <pvPortMalloc+0x188>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f040 8095 	bne.w	8006bb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01e      	beq.n	8006aca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d015      	beq.n	8006aca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f023 0307 	bic.w	r3, r3, #7
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <pvPortMalloc+0x6e>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	617b      	str	r3, [r7, #20]
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	e7fd      	b.n	8006ac6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d06f      	beq.n	8006bb0 <pvPortMalloc+0x154>
 8006ad0:	4b45      	ldr	r3, [pc, #276]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d86a      	bhi.n	8006bb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ada:	4b44      	ldr	r3, [pc, #272]	@ (8006bec <pvPortMalloc+0x190>)
 8006adc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ade:	4b43      	ldr	r3, [pc, #268]	@ (8006bec <pvPortMalloc+0x190>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ae4:	e004      	b.n	8006af0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d903      	bls.n	8006b02 <pvPortMalloc+0xa6>
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f1      	bne.n	8006ae6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b02:	4b37      	ldr	r3, [pc, #220]	@ (8006be0 <pvPortMalloc+0x184>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d051      	beq.n	8006bb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2208      	movs	r2, #8
 8006b12:	4413      	add	r3, r2
 8006b14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	2308      	movs	r3, #8
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d920      	bls.n	8006b70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4413      	add	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <pvPortMalloc+0xfc>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	613b      	str	r3, [r7, #16]
}
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
 8006b56:	e7fd      	b.n	8006b54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	1ad2      	subs	r2, r2, r3
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b6a:	69b8      	ldr	r0, [r7, #24]
 8006b6c:	f000 f90a 	bl	8006d84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b70:	4b1d      	ldr	r3, [pc, #116]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006b7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf0 <pvPortMalloc+0x194>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d203      	bcs.n	8006b92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b8a:	4b17      	ldr	r3, [pc, #92]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a18      	ldr	r2, [pc, #96]	@ (8006bf0 <pvPortMalloc+0x194>)
 8006b90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b13      	ldr	r3, [pc, #76]	@ (8006be4 <pvPortMalloc+0x188>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ba6:	4b13      	ldr	r3, [pc, #76]	@ (8006bf4 <pvPortMalloc+0x198>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3301      	adds	r3, #1
 8006bac:	4a11      	ldr	r2, [pc, #68]	@ (8006bf4 <pvPortMalloc+0x198>)
 8006bae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bb0:	f7fe fcc8 	bl	8005544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <pvPortMalloc+0x17a>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	60fb      	str	r3, [r7, #12]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <pvPortMalloc+0x176>
	return pvReturn;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3728      	adds	r7, #40	@ 0x28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20008fa4 	.word	0x20008fa4
 8006be4:	20008fb8 	.word	0x20008fb8
 8006be8:	20008fa8 	.word	0x20008fa8
 8006bec:	20008f9c 	.word	0x20008f9c
 8006bf0:	20008fac 	.word	0x20008fac
 8006bf4:	20008fb0 	.word	0x20008fb0

08006bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d04f      	beq.n	8006caa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c0a:	2308      	movs	r3, #8
 8006c0c:	425b      	negs	r3, r3
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4413      	add	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	4b25      	ldr	r3, [pc, #148]	@ (8006cb4 <vPortFree+0xbc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4013      	ands	r3, r2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10b      	bne.n	8006c3e <vPortFree+0x46>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	60fb      	str	r3, [r7, #12]
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	e7fd      	b.n	8006c3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <vPortFree+0x66>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60bb      	str	r3, [r7, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	e7fd      	b.n	8006c5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <vPortFree+0xbc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4013      	ands	r3, r2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01e      	beq.n	8006caa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11a      	bne.n	8006caa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb4 <vPortFree+0xbc>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	401a      	ands	r2, r3
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c84:	f7fe fc50 	bl	8005528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <vPortFree+0xc0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4413      	add	r3, r2
 8006c92:	4a09      	ldr	r2, [pc, #36]	@ (8006cb8 <vPortFree+0xc0>)
 8006c94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c96:	6938      	ldr	r0, [r7, #16]
 8006c98:	f000 f874 	bl	8006d84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c9c:	4b07      	ldr	r3, [pc, #28]	@ (8006cbc <vPortFree+0xc4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	4a06      	ldr	r2, [pc, #24]	@ (8006cbc <vPortFree+0xc4>)
 8006ca4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ca6:	f7fe fc4d 	bl	8005544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006caa:	bf00      	nop
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20008fb8 	.word	0x20008fb8
 8006cb8:	20008fa8 	.word	0x20008fa8
 8006cbc:	20008fb4 	.word	0x20008fb4

08006cc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006cca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ccc:	4b27      	ldr	r3, [pc, #156]	@ (8006d6c <prvHeapInit+0xac>)
 8006cce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3307      	adds	r3, #7
 8006cde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0307 	bic.w	r3, r3, #7
 8006ce6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	4a1f      	ldr	r2, [pc, #124]	@ (8006d6c <prvHeapInit+0xac>)
 8006cf0:	4413      	add	r3, r2
 8006cf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d70 <prvHeapInit+0xb0>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8006d70 <prvHeapInit+0xb0>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	4413      	add	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0307 	bic.w	r3, r3, #7
 8006d1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	@ (8006d74 <prvHeapInit+0xb4>)
 8006d20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d22:	4b14      	ldr	r3, [pc, #80]	@ (8006d74 <prvHeapInit+0xb4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2200      	movs	r2, #0
 8006d28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d2a:	4b12      	ldr	r3, [pc, #72]	@ (8006d74 <prvHeapInit+0xb4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d40:	4b0c      	ldr	r3, [pc, #48]	@ (8006d74 <prvHeapInit+0xb4>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d78 <prvHeapInit+0xb8>)
 8006d4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4a09      	ldr	r2, [pc, #36]	@ (8006d7c <prvHeapInit+0xbc>)
 8006d56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d58:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <prvHeapInit+0xc0>)
 8006d5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d5e:	601a      	str	r2, [r3, #0]
}
 8006d60:	bf00      	nop
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	2000539c 	.word	0x2000539c
 8006d70:	20008f9c 	.word	0x20008f9c
 8006d74:	20008fa4 	.word	0x20008fa4
 8006d78:	20008fac 	.word	0x20008fac
 8006d7c:	20008fa8 	.word	0x20008fa8
 8006d80:	20008fb8 	.word	0x20008fb8

08006d84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d8c:	4b28      	ldr	r3, [pc, #160]	@ (8006e30 <prvInsertBlockIntoFreeList+0xac>)
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e002      	b.n	8006d98 <prvInsertBlockIntoFreeList+0x14>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d8f7      	bhi.n	8006d92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	4413      	add	r3, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d108      	bne.n	8006dc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	441a      	add	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	441a      	add	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d118      	bne.n	8006e0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b15      	ldr	r3, [pc, #84]	@ (8006e34 <prvInsertBlockIntoFreeList+0xb0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d00d      	beq.n	8006e02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	441a      	add	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e008      	b.n	8006e14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e02:	4b0c      	ldr	r3, [pc, #48]	@ (8006e34 <prvInsertBlockIntoFreeList+0xb0>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	e003      	b.n	8006e14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d002      	beq.n	8006e22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20008f9c 	.word	0x20008f9c
 8006e34:	20008fa4 	.word	0x20008fa4

08006e38 <rcl_get_zero_initialized_publisher>:
 8006e38:	4b01      	ldr	r3, [pc, #4]	@ (8006e40 <rcl_get_zero_initialized_publisher+0x8>)
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	0801127c 	.word	0x0801127c

08006e44 <rcl_publisher_init>:
 8006e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8006e4c:	2d00      	cmp	r5, #0
 8006e4e:	d069      	beq.n	8006f24 <rcl_publisher_init+0xe0>
 8006e50:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8006e54:	4604      	mov	r4, r0
 8006e56:	4648      	mov	r0, r9
 8006e58:	460e      	mov	r6, r1
 8006e5a:	4690      	mov	r8, r2
 8006e5c:	461f      	mov	r7, r3
 8006e5e:	f000 f9d5 	bl	800720c <rcutils_allocator_is_valid>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d05e      	beq.n	8006f24 <rcl_publisher_init+0xe0>
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	d05c      	beq.n	8006f24 <rcl_publisher_init+0xe0>
 8006e6a:	f8d4 a000 	ldr.w	sl, [r4]
 8006e6e:	f1ba 0f00 	cmp.w	sl, #0
 8006e72:	d004      	beq.n	8006e7e <rcl_publisher_init+0x3a>
 8006e74:	2764      	movs	r7, #100	@ 0x64
 8006e76:	4638      	mov	r0, r7
 8006e78:	b008      	add	sp, #32
 8006e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f004 ffba 	bl	800bdf8 <rcl_node_is_valid>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d052      	beq.n	8006f2e <rcl_publisher_init+0xea>
 8006e88:	f1b8 0f00 	cmp.w	r8, #0
 8006e8c:	d04a      	beq.n	8006f24 <rcl_publisher_init+0xe0>
 8006e8e:	2f00      	cmp	r7, #0
 8006e90:	d048      	beq.n	8006f24 <rcl_publisher_init+0xe0>
 8006e92:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8006e96:	aa07      	add	r2, sp, #28
 8006e98:	9205      	str	r2, [sp, #20]
 8006e9a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8006e9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ea2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006ea6:	f8cd a01c 	str.w	sl, [sp, #28]
 8006eaa:	4639      	mov	r1, r7
 8006eac:	e899 000c 	ldmia.w	r9, {r2, r3}
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f004 fff5 	bl	800bea0 <rcl_node_resolve_name>
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d14f      	bne.n	8006f5c <rcl_publisher_init+0x118>
 8006ebc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8006ebe:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8006ec0:	20c8      	movs	r0, #200	@ 0xc8
 8006ec2:	4798      	blx	r3
 8006ec4:	6020      	str	r0, [r4, #0]
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d04e      	beq.n	8006f68 <rcl_publisher_init+0x124>
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f004 ffb6 	bl	800be3c <rcl_node_get_rmw_handle>
 8006ed0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	9a07      	ldr	r2, [sp, #28]
 8006ed8:	6827      	ldr	r7, [r4, #0]
 8006eda:	462b      	mov	r3, r5
 8006edc:	4641      	mov	r1, r8
 8006ede:	f000 fa55 	bl	800738c <rmw_create_publisher>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8006ee8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006eec:	b370      	cbz	r0, 8006f4c <rcl_publisher_init+0x108>
 8006eee:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8006ef2:	f000 fb29 	bl	8007548 <rmw_publisher_get_actual_qos>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	4607      	mov	r7, r0
 8006efa:	b9d0      	cbnz	r0, 8006f32 <rcl_publisher_init+0xee>
 8006efc:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8006f00:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8006f04:	4629      	mov	r1, r5
 8006f06:	2270      	movs	r2, #112	@ 0x70
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f009 fa4c 	bl	80103a6 <memcpy>
 8006f0e:	6832      	ldr	r2, [r6, #0]
 8006f10:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8006f14:	9807      	ldr	r0, [sp, #28]
 8006f16:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8006f18:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8006f1a:	4798      	blx	r3
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	b008      	add	sp, #32
 8006f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f24:	270b      	movs	r7, #11
 8006f26:	4638      	mov	r0, r7
 8006f28:	b008      	add	sp, #32
 8006f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2e:	27c8      	movs	r7, #200	@ 0xc8
 8006f30:	e7a1      	b.n	8006e76 <rcl_publisher_init+0x32>
 8006f32:	b18b      	cbz	r3, 8006f58 <rcl_publisher_init+0x114>
 8006f34:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006f38:	b142      	cbz	r2, 8006f4c <rcl_publisher_init+0x108>
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f004 ff7e 	bl	800be3c <rcl_node_get_rmw_handle>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8006f46:	f000 fb0f 	bl	8007568 <rmw_destroy_publisher>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8006f4e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8006f50:	4618      	mov	r0, r3
 8006f52:	4790      	blx	r2
 8006f54:	2300      	movs	r3, #0
 8006f56:	6023      	str	r3, [r4, #0]
 8006f58:	2701      	movs	r7, #1
 8006f5a:	e7db      	b.n	8006f14 <rcl_publisher_init+0xd0>
 8006f5c:	2867      	cmp	r0, #103	@ 0x67
 8006f5e:	d0d9      	beq.n	8006f14 <rcl_publisher_init+0xd0>
 8006f60:	2869      	cmp	r0, #105	@ 0x69
 8006f62:	d003      	beq.n	8006f6c <rcl_publisher_init+0x128>
 8006f64:	280a      	cmp	r0, #10
 8006f66:	d1f7      	bne.n	8006f58 <rcl_publisher_init+0x114>
 8006f68:	270a      	movs	r7, #10
 8006f6a:	e7d3      	b.n	8006f14 <rcl_publisher_init+0xd0>
 8006f6c:	2767      	movs	r7, #103	@ 0x67
 8006f6e:	e7d1      	b.n	8006f14 <rcl_publisher_init+0xd0>

08006f70 <rcl_publisher_get_default_options>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	4d14      	ldr	r5, [pc, #80]	@ (8006fc4 <rcl_publisher_get_default_options+0x54>)
 8006f74:	4914      	ldr	r1, [pc, #80]	@ (8006fc8 <rcl_publisher_get_default_options+0x58>)
 8006f76:	b088      	sub	sp, #32
 8006f78:	4604      	mov	r4, r0
 8006f7a:	2250      	movs	r2, #80	@ 0x50
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f009 fa12 	bl	80103a6 <memcpy>
 8006f82:	a802      	add	r0, sp, #8
 8006f84:	f000 f934 	bl	80071f0 <rcutils_get_default_allocator>
 8006f88:	f10d 0c08 	add.w	ip, sp, #8
 8006f8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006f90:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8006f94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006f98:	466e      	mov	r6, sp
 8006f9a:	f8dc 3000 	ldr.w	r3, [ip]
 8006f9e:	f8ce 3000 	str.w	r3, [lr]
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f000 f974 	bl	8007290 <rmw_get_default_publisher_options>
 8006fa8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006fac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8006fb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8006fb4:	2270      	movs	r2, #112	@ 0x70
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f009 f9f4 	bl	80103a6 <memcpy>
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	b008      	add	sp, #32
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	20008fc0 	.word	0x20008fc0
 8006fc8:	08011280 	.word	0x08011280

08006fcc <rcl_publish>:
 8006fcc:	b1f8      	cbz	r0, 800700e <rcl_publish+0x42>
 8006fce:	6803      	ldr	r3, [r0, #0]
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	b1b3      	cbz	r3, 8007004 <rcl_publish+0x38>
 8006fd6:	4616      	mov	r6, r2
 8006fd8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006fdc:	b192      	cbz	r2, 8007004 <rcl_publish+0x38>
 8006fde:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8006fe2:	460d      	mov	r5, r1
 8006fe4:	f004 fb2e 	bl	800b644 <rcl_context_is_valid>
 8006fe8:	b160      	cbz	r0, 8007004 <rcl_publish+0x38>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006ff0:	b140      	cbz	r0, 8007004 <rcl_publish+0x38>
 8006ff2:	b155      	cbz	r5, 800700a <rcl_publish+0x3e>
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f000 f968 	bl	80072cc <rmw_publish>
 8006ffc:	3800      	subs	r0, #0
 8006ffe:	bf18      	it	ne
 8007000:	2001      	movne	r0, #1
 8007002:	bd70      	pop	{r4, r5, r6, pc}
 8007004:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8007008:	bd70      	pop	{r4, r5, r6, pc}
 800700a:	200b      	movs	r0, #11
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8007012:	4770      	bx	lr

08007014 <rclc_support_init>:
 8007014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007018:	b086      	sub	sp, #24
 800701a:	b3b8      	cbz	r0, 800708c <rclc_support_init+0x78>
 800701c:	461c      	mov	r4, r3
 800701e:	b3ab      	cbz	r3, 800708c <rclc_support_init+0x78>
 8007020:	460f      	mov	r7, r1
 8007022:	4690      	mov	r8, r2
 8007024:	4606      	mov	r6, r0
 8007026:	f004 fc77 	bl	800b918 <rcl_get_zero_initialized_init_options>
 800702a:	f104 030c 	add.w	r3, r4, #12
 800702e:	9005      	str	r0, [sp, #20]
 8007030:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007034:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007038:	a805      	add	r0, sp, #20
 800703a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800703e:	f004 fc6d 	bl	800b91c <rcl_init_options_init>
 8007042:	4605      	mov	r5, r0
 8007044:	b9e0      	cbnz	r0, 8007080 <rclc_support_init+0x6c>
 8007046:	ad02      	add	r5, sp, #8
 8007048:	4628      	mov	r0, r5
 800704a:	f004 faf1 	bl	800b630 <rcl_get_zero_initialized_context>
 800704e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007052:	4633      	mov	r3, r6
 8007054:	e886 0003 	stmia.w	r6, {r0, r1}
 8007058:	aa05      	add	r2, sp, #20
 800705a:	4641      	mov	r1, r8
 800705c:	4638      	mov	r0, r7
 800705e:	f004 fb57 	bl	800b710 <rcl_init>
 8007062:	4605      	mov	r5, r0
 8007064:	b9b8      	cbnz	r0, 8007096 <rclc_support_init+0x82>
 8007066:	60b4      	str	r4, [r6, #8]
 8007068:	4622      	mov	r2, r4
 800706a:	f106 010c 	add.w	r1, r6, #12
 800706e:	2003      	movs	r0, #3
 8007070:	f005 f8d2 	bl	800c218 <rcl_clock_init>
 8007074:	4605      	mov	r5, r0
 8007076:	b970      	cbnz	r0, 8007096 <rclc_support_init+0x82>
 8007078:	a805      	add	r0, sp, #20
 800707a:	f004 fcb5 	bl	800b9e8 <rcl_init_options_fini>
 800707e:	b108      	cbz	r0, 8007084 <rclc_support_init+0x70>
 8007080:	f000 f8ea 	bl	8007258 <rcutils_reset_error>
 8007084:	4628      	mov	r0, r5
 8007086:	b006      	add	sp, #24
 8007088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800708c:	250b      	movs	r5, #11
 800708e:	4628      	mov	r0, r5
 8007090:	b006      	add	sp, #24
 8007092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007096:	f000 f8df 	bl	8007258 <rcutils_reset_error>
 800709a:	a805      	add	r0, sp, #20
 800709c:	f004 fca4 	bl	800b9e8 <rcl_init_options_fini>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d0ef      	beq.n	8007084 <rclc_support_init+0x70>
 80070a4:	e7ec      	b.n	8007080 <rclc_support_init+0x6c>
 80070a6:	bf00      	nop

080070a8 <rclc_node_init_default>:
 80070a8:	b3b8      	cbz	r0, 800711a <rclc_node_init_default+0x72>
 80070aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070ae:	460d      	mov	r5, r1
 80070b0:	b0a1      	sub	sp, #132	@ 0x84
 80070b2:	b329      	cbz	r1, 8007100 <rclc_node_init_default+0x58>
 80070b4:	4616      	mov	r6, r2
 80070b6:	b31a      	cbz	r2, 8007100 <rclc_node_init_default+0x58>
 80070b8:	461f      	mov	r7, r3
 80070ba:	b30b      	cbz	r3, 8007100 <rclc_node_init_default+0x58>
 80070bc:	f10d 0810 	add.w	r8, sp, #16
 80070c0:	4604      	mov	r4, r0
 80070c2:	4640      	mov	r0, r8
 80070c4:	f004 fd48 	bl	800bb58 <rcl_get_zero_initialized_node>
 80070c8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80070cc:	f10d 0918 	add.w	r9, sp, #24
 80070d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80070d4:	4648      	mov	r0, r9
 80070d6:	f004 feb7 	bl	800be48 <rcl_node_get_default_options>
 80070da:	4640      	mov	r0, r8
 80070dc:	f004 fd3c 	bl	800bb58 <rcl_get_zero_initialized_node>
 80070e0:	f8cd 9000 	str.w	r9, [sp]
 80070e4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80070e8:	463b      	mov	r3, r7
 80070ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80070ee:	4632      	mov	r2, r6
 80070f0:	4629      	mov	r1, r5
 80070f2:	4620      	mov	r0, r4
 80070f4:	f004 fd3a 	bl	800bb6c <rcl_node_init>
 80070f8:	b930      	cbnz	r0, 8007108 <rclc_node_init_default+0x60>
 80070fa:	b021      	add	sp, #132	@ 0x84
 80070fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007100:	200b      	movs	r0, #11
 8007102:	b021      	add	sp, #132	@ 0x84
 8007104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007108:	9003      	str	r0, [sp, #12]
 800710a:	f000 f8a5 	bl	8007258 <rcutils_reset_error>
 800710e:	f000 f8a3 	bl	8007258 <rcutils_reset_error>
 8007112:	9803      	ldr	r0, [sp, #12]
 8007114:	b021      	add	sp, #132	@ 0x84
 8007116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800711a:	200b      	movs	r0, #11
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop

08007120 <rclc_publisher_init_default>:
 8007120:	b368      	cbz	r0, 800717e <rclc_publisher_init_default+0x5e>
 8007122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007126:	460d      	mov	r5, r1
 8007128:	b0a0      	sub	sp, #128	@ 0x80
 800712a:	b321      	cbz	r1, 8007176 <rclc_publisher_init_default+0x56>
 800712c:	4616      	mov	r6, r2
 800712e:	b312      	cbz	r2, 8007176 <rclc_publisher_init_default+0x56>
 8007130:	461f      	mov	r7, r3
 8007132:	b303      	cbz	r3, 8007176 <rclc_publisher_init_default+0x56>
 8007134:	4604      	mov	r4, r0
 8007136:	f7ff fe7f 	bl	8006e38 <rcl_get_zero_initialized_publisher>
 800713a:	f10d 0810 	add.w	r8, sp, #16
 800713e:	6020      	str	r0, [r4, #0]
 8007140:	4640      	mov	r0, r8
 8007142:	f7ff ff15 	bl	8006f70 <rcl_publisher_get_default_options>
 8007146:	490f      	ldr	r1, [pc, #60]	@ (8007184 <rclc_publisher_init_default+0x64>)
 8007148:	2250      	movs	r2, #80	@ 0x50
 800714a:	4640      	mov	r0, r8
 800714c:	f009 f92b 	bl	80103a6 <memcpy>
 8007150:	f8cd 8000 	str.w	r8, [sp]
 8007154:	463b      	mov	r3, r7
 8007156:	4632      	mov	r2, r6
 8007158:	4629      	mov	r1, r5
 800715a:	4620      	mov	r0, r4
 800715c:	f7ff fe72 	bl	8006e44 <rcl_publisher_init>
 8007160:	b910      	cbnz	r0, 8007168 <rclc_publisher_init_default+0x48>
 8007162:	b020      	add	sp, #128	@ 0x80
 8007164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007168:	9003      	str	r0, [sp, #12]
 800716a:	f000 f875 	bl	8007258 <rcutils_reset_error>
 800716e:	9803      	ldr	r0, [sp, #12]
 8007170:	b020      	add	sp, #128	@ 0x80
 8007172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007176:	200b      	movs	r0, #11
 8007178:	b020      	add	sp, #128	@ 0x80
 800717a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800717e:	200b      	movs	r0, #11
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	080112d0 	.word	0x080112d0

08007188 <__default_zero_allocate>:
 8007188:	f008 bc84 	b.w	800fa94 <calloc>

0800718c <__default_reallocate>:
 800718c:	f008 be10 	b.w	800fdb0 <realloc>

08007190 <__default_deallocate>:
 8007190:	f008 bcec 	b.w	800fb6c <free>

08007194 <__default_allocate>:
 8007194:	f008 bce2 	b.w	800fb5c <malloc>

08007198 <rcutils_get_zero_initialized_allocator>:
 8007198:	b510      	push	{r4, lr}
 800719a:	4c05      	ldr	r4, [pc, #20]	@ (80071b0 <rcutils_get_zero_initialized_allocator+0x18>)
 800719c:	4686      	mov	lr, r0
 800719e:	4684      	mov	ip, r0
 80071a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	f8cc 3000 	str.w	r3, [ip]
 80071ac:	4670      	mov	r0, lr
 80071ae:	bd10      	pop	{r4, pc}
 80071b0:	08011320 	.word	0x08011320

080071b4 <rcutils_set_default_allocator>:
 80071b4:	b1a8      	cbz	r0, 80071e2 <rcutils_set_default_allocator+0x2e>
 80071b6:	6802      	ldr	r2, [r0, #0]
 80071b8:	b1a2      	cbz	r2, 80071e4 <rcutils_set_default_allocator+0x30>
 80071ba:	6841      	ldr	r1, [r0, #4]
 80071bc:	b1a1      	cbz	r1, 80071e8 <rcutils_set_default_allocator+0x34>
 80071be:	b410      	push	{r4}
 80071c0:	68c4      	ldr	r4, [r0, #12]
 80071c2:	b164      	cbz	r4, 80071de <rcutils_set_default_allocator+0x2a>
 80071c4:	6880      	ldr	r0, [r0, #8]
 80071c6:	b138      	cbz	r0, 80071d8 <rcutils_set_default_allocator+0x24>
 80071c8:	4b08      	ldr	r3, [pc, #32]	@ (80071ec <rcutils_set_default_allocator+0x38>)
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	2200      	movs	r2, #0
 80071ce:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80071d2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80071d6:	2001      	movs	r0, #1
 80071d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	4620      	mov	r0, r4
 80071e0:	e7fa      	b.n	80071d8 <rcutils_set_default_allocator+0x24>
 80071e2:	4770      	bx	lr
 80071e4:	4610      	mov	r0, r2
 80071e6:	4770      	bx	lr
 80071e8:	4608      	mov	r0, r1
 80071ea:	4770      	bx	lr
 80071ec:	20000014 	.word	0x20000014

080071f0 <rcutils_get_default_allocator>:
 80071f0:	b510      	push	{r4, lr}
 80071f2:	4c05      	ldr	r4, [pc, #20]	@ (8007208 <rcutils_get_default_allocator+0x18>)
 80071f4:	4686      	mov	lr, r0
 80071f6:	4684      	mov	ip, r0
 80071f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	f8cc 3000 	str.w	r3, [ip]
 8007204:	4670      	mov	r0, lr
 8007206:	bd10      	pop	{r4, pc}
 8007208:	20000014 	.word	0x20000014

0800720c <rcutils_allocator_is_valid>:
 800720c:	b158      	cbz	r0, 8007226 <rcutils_allocator_is_valid+0x1a>
 800720e:	6803      	ldr	r3, [r0, #0]
 8007210:	b143      	cbz	r3, 8007224 <rcutils_allocator_is_valid+0x18>
 8007212:	6843      	ldr	r3, [r0, #4]
 8007214:	b133      	cbz	r3, 8007224 <rcutils_allocator_is_valid+0x18>
 8007216:	68c3      	ldr	r3, [r0, #12]
 8007218:	b123      	cbz	r3, 8007224 <rcutils_allocator_is_valid+0x18>
 800721a:	6880      	ldr	r0, [r0, #8]
 800721c:	3800      	subs	r0, #0
 800721e:	bf18      	it	ne
 8007220:	2001      	movne	r0, #1
 8007222:	4770      	bx	lr
 8007224:	4618      	mov	r0, r3
 8007226:	4770      	bx	lr

08007228 <rcutils_get_error_string>:
 8007228:	4b06      	ldr	r3, [pc, #24]	@ (8007244 <rcutils_get_error_string+0x1c>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	b13b      	cbz	r3, 800723e <rcutils_get_error_string+0x16>
 800722e:	4b06      	ldr	r3, [pc, #24]	@ (8007248 <rcutils_get_error_string+0x20>)
 8007230:	781a      	ldrb	r2, [r3, #0]
 8007232:	b90a      	cbnz	r2, 8007238 <rcutils_get_error_string+0x10>
 8007234:	2201      	movs	r2, #1
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	4b04      	ldr	r3, [pc, #16]	@ (800724c <rcutils_get_error_string+0x24>)
 800723a:	7818      	ldrb	r0, [r3, #0]
 800723c:	4770      	bx	lr
 800723e:	4b04      	ldr	r3, [pc, #16]	@ (8007250 <rcutils_get_error_string+0x28>)
 8007240:	7818      	ldrb	r0, [r3, #0]
 8007242:	4770      	bx	lr
 8007244:	20009030 	.word	0x20009030
 8007248:	20009049 	.word	0x20009049
 800724c:	20009048 	.word	0x20009048
 8007250:	08011334 	.word	0x08011334
 8007254:	00000000 	.word	0x00000000

08007258 <rcutils_reset_error>:
 8007258:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8007278 <rcutils_reset_error+0x20>
 800725c:	4a08      	ldr	r2, [pc, #32]	@ (8007280 <rcutils_reset_error+0x28>)
 800725e:	4809      	ldr	r0, [pc, #36]	@ (8007284 <rcutils_reset_error+0x2c>)
 8007260:	4909      	ldr	r1, [pc, #36]	@ (8007288 <rcutils_reset_error+0x30>)
 8007262:	2300      	movs	r3, #0
 8007264:	8013      	strh	r3, [r2, #0]
 8007266:	ed82 7b02 	vstr	d7, [r2, #8]
 800726a:	4a08      	ldr	r2, [pc, #32]	@ (800728c <rcutils_reset_error+0x34>)
 800726c:	7003      	strb	r3, [r0, #0]
 800726e:	700b      	strb	r3, [r1, #0]
 8007270:	7013      	strb	r3, [r2, #0]
 8007272:	4770      	bx	lr
 8007274:	f3af 8000 	nop.w
	...
 8007280:	20009038 	.word	0x20009038
 8007284:	20009049 	.word	0x20009049
 8007288:	20009048 	.word	0x20009048
 800728c:	20009030 	.word	0x20009030

08007290 <rmw_get_default_publisher_options>:
 8007290:	2200      	movs	r2, #0
 8007292:	6002      	str	r2, [r0, #0]
 8007294:	7102      	strb	r2, [r0, #4]
 8007296:	4770      	bx	lr

08007298 <rmw_uros_set_custom_transport>:
 8007298:	b470      	push	{r4, r5, r6}
 800729a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800729e:	b162      	cbz	r2, 80072ba <rmw_uros_set_custom_transport+0x22>
 80072a0:	b15b      	cbz	r3, 80072ba <rmw_uros_set_custom_transport+0x22>
 80072a2:	b155      	cbz	r5, 80072ba <rmw_uros_set_custom_transport+0x22>
 80072a4:	b14e      	cbz	r6, 80072ba <rmw_uros_set_custom_transport+0x22>
 80072a6:	4c06      	ldr	r4, [pc, #24]	@ (80072c0 <rmw_uros_set_custom_transport+0x28>)
 80072a8:	7020      	strb	r0, [r4, #0]
 80072aa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80072ae:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80072b2:	6166      	str	r6, [r4, #20]
 80072b4:	2000      	movs	r0, #0
 80072b6:	bc70      	pop	{r4, r5, r6}
 80072b8:	4770      	bx	lr
 80072ba:	200b      	movs	r0, #11
 80072bc:	bc70      	pop	{r4, r5, r6}
 80072be:	4770      	bx	lr
 80072c0:	2000904c 	.word	0x2000904c

080072c4 <flush_session>:
 80072c4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80072c6:	f002 bb3d 	b.w	8009944 <uxr_run_session_until_confirm_delivery>
 80072ca:	bf00      	nop

080072cc <rmw_publish>:
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d053      	beq.n	8007378 <rmw_publish+0xac>
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	460d      	mov	r5, r1
 80072d4:	b08e      	sub	sp, #56	@ 0x38
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d04b      	beq.n	8007372 <rmw_publish+0xa6>
 80072da:	4604      	mov	r4, r0
 80072dc:	6800      	ldr	r0, [r0, #0]
 80072de:	f000 fc47 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d045      	beq.n	8007372 <rmw_publish+0xa6>
 80072e6:	6866      	ldr	r6, [r4, #4]
 80072e8:	2e00      	cmp	r6, #0
 80072ea:	d042      	beq.n	8007372 <rmw_publish+0xa6>
 80072ec:	69b4      	ldr	r4, [r6, #24]
 80072ee:	4628      	mov	r0, r5
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	4798      	blx	r3
 80072f4:	69f3      	ldr	r3, [r6, #28]
 80072f6:	9005      	str	r0, [sp, #20]
 80072f8:	b113      	cbz	r3, 8007300 <rmw_publish+0x34>
 80072fa:	a805      	add	r0, sp, #20
 80072fc:	4798      	blx	r3
 80072fe:	9805      	ldr	r0, [sp, #20]
 8007300:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	9000      	str	r0, [sp, #0]
 8007308:	6972      	ldr	r2, [r6, #20]
 800730a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800730c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8007310:	ab06      	add	r3, sp, #24
 8007312:	f003 f903 	bl	800a51c <uxr_prepare_output_stream>
 8007316:	b1d8      	cbz	r0, 8007350 <rmw_publish+0x84>
 8007318:	68a3      	ldr	r3, [r4, #8]
 800731a:	a906      	add	r1, sp, #24
 800731c:	4628      	mov	r0, r5
 800731e:	4798      	blx	r3
 8007320:	6a33      	ldr	r3, [r6, #32]
 8007322:	4604      	mov	r4, r0
 8007324:	b10b      	cbz	r3, 800732a <rmw_publish+0x5e>
 8007326:	a806      	add	r0, sp, #24
 8007328:	4798      	blx	r3
 800732a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800732e:	2b01      	cmp	r3, #1
 8007330:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8007334:	d022      	beq.n	800737c <rmw_publish+0xb0>
 8007336:	6918      	ldr	r0, [r3, #16]
 8007338:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800733a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800733e:	f002 fb01 	bl	8009944 <uxr_run_session_until_confirm_delivery>
 8007342:	4020      	ands	r0, r4
 8007344:	b2c4      	uxtb	r4, r0
 8007346:	f084 0001 	eor.w	r0, r4, #1
 800734a:	b2c0      	uxtb	r0, r0
 800734c:	b00e      	add	sp, #56	@ 0x38
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8007354:	6918      	ldr	r0, [r3, #16]
 8007356:	9b05      	ldr	r3, [sp, #20]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <rmw_publish+0xbc>)
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	9602      	str	r6, [sp, #8]
 8007360:	6972      	ldr	r2, [r6, #20]
 8007362:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8007364:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007368:	ab06      	add	r3, sp, #24
 800736a:	f003 f907 	bl	800a57c <uxr_prepare_output_stream_fragmented>
 800736e:	2800      	cmp	r0, #0
 8007370:	d1d2      	bne.n	8007318 <rmw_publish+0x4c>
 8007372:	2001      	movs	r0, #1
 8007374:	b00e      	add	sp, #56	@ 0x38
 8007376:	bd70      	pop	{r4, r5, r6, pc}
 8007378:	2001      	movs	r0, #1
 800737a:	4770      	bx	lr
 800737c:	6918      	ldr	r0, [r3, #16]
 800737e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007382:	f001 ff59 	bl	8009238 <uxr_flash_output_streams>
 8007386:	e7de      	b.n	8007346 <rmw_publish+0x7a>
 8007388:	080072c5 	.word	0x080072c5

0800738c <rmw_create_publisher>:
 800738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	b087      	sub	sp, #28
 8007392:	2800      	cmp	r0, #0
 8007394:	f000 80cc 	beq.w	8007530 <rmw_create_publisher+0x1a4>
 8007398:	460e      	mov	r6, r1
 800739a:	2900      	cmp	r1, #0
 800739c:	f000 80c8 	beq.w	8007530 <rmw_create_publisher+0x1a4>
 80073a0:	4604      	mov	r4, r0
 80073a2:	6800      	ldr	r0, [r0, #0]
 80073a4:	4615      	mov	r5, r2
 80073a6:	4698      	mov	r8, r3
 80073a8:	f000 fbe2 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	f000 80bf 	beq.w	8007530 <rmw_create_publisher+0x1a4>
 80073b2:	2d00      	cmp	r5, #0
 80073b4:	f000 80bc 	beq.w	8007530 <rmw_create_publisher+0x1a4>
 80073b8:	782b      	ldrb	r3, [r5, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 80b8 	beq.w	8007530 <rmw_create_publisher+0x1a4>
 80073c0:	f1b8 0f00 	cmp.w	r8, #0
 80073c4:	f000 80b4 	beq.w	8007530 <rmw_create_publisher+0x1a4>
 80073c8:	485c      	ldr	r0, [pc, #368]	@ (800753c <rmw_create_publisher+0x1b0>)
 80073ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80073ce:	f005 fc9b 	bl	800cd08 <get_memory>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f000 80ac 	beq.w	8007530 <rmw_create_publisher+0x1a4>
 80073d8:	6884      	ldr	r4, [r0, #8]
 80073da:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80073de:	f005 fcb7 	bl	800cd50 <rmw_get_implementation_identifier>
 80073e2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80073e6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80073ea:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80073ee:	4628      	mov	r0, r5
 80073f0:	f7f8 ff00 	bl	80001f4 <strlen>
 80073f4:	3001      	adds	r0, #1
 80073f6:	283c      	cmp	r0, #60	@ 0x3c
 80073f8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80073fc:	f200 8091 	bhi.w	8007522 <rmw_create_publisher+0x196>
 8007400:	4a4f      	ldr	r2, [pc, #316]	@ (8007540 <rmw_create_publisher+0x1b4>)
 8007402:	462b      	mov	r3, r5
 8007404:	213c      	movs	r1, #60	@ 0x3c
 8007406:	4650      	mov	r0, sl
 8007408:	f008 fe54 	bl	80100b4 <sniprintf>
 800740c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007410:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8007412:	4641      	mov	r1, r8
 8007414:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8007418:	2250      	movs	r2, #80	@ 0x50
 800741a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800741e:	f008 ffc2 	bl	80103a6 <memcpy>
 8007422:	f898 3008 	ldrb.w	r3, [r8, #8]
 8007426:	4947      	ldr	r1, [pc, #284]	@ (8007544 <rmw_create_publisher+0x1b8>)
 8007428:	2b02      	cmp	r3, #2
 800742a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800742e:	bf0c      	ite	eq
 8007430:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8007434:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8007438:	67a3      	str	r3, [r4, #120]	@ 0x78
 800743a:	2300      	movs	r3, #0
 800743c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8007440:	4630      	mov	r0, r6
 8007442:	f000 fba3 	bl	8007b8c <get_message_typesupport_handle>
 8007446:	2800      	cmp	r0, #0
 8007448:	d06b      	beq.n	8007522 <rmw_create_publisher+0x196>
 800744a:	6842      	ldr	r2, [r0, #4]
 800744c:	61a2      	str	r2, [r4, #24]
 800744e:	2a00      	cmp	r2, #0
 8007450:	d067      	beq.n	8007522 <rmw_create_publisher+0x196>
 8007452:	4629      	mov	r1, r5
 8007454:	4643      	mov	r3, r8
 8007456:	4648      	mov	r0, r9
 8007458:	f005 fee0 	bl	800d21c <create_topic>
 800745c:	6260      	str	r0, [r4, #36]	@ 0x24
 800745e:	2800      	cmp	r0, #0
 8007460:	d063      	beq.n	800752a <rmw_create_publisher+0x19e>
 8007462:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800746a:	2103      	movs	r1, #3
 800746c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8007470:	1c42      	adds	r2, r0, #1
 8007472:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8007476:	f001 fd91 	bl	8008f9c <uxr_object_id>
 800747a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800747e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007482:	6120      	str	r0, [r4, #16]
 8007484:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8007488:	6910      	ldr	r0, [r2, #16]
 800748a:	2506      	movs	r5, #6
 800748c:	9500      	str	r5, [sp, #0]
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	6922      	ldr	r2, [r4, #16]
 8007492:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007496:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800749a:	f001 fcd9 	bl	8008e50 <uxr_buffer_create_publisher_bin>
 800749e:	4602      	mov	r2, r0
 80074a0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80074a4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80074a8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80074ac:	f000 fae0 	bl	8007a70 <run_xrce_session>
 80074b0:	b3b8      	cbz	r0, 8007522 <rmw_create_publisher+0x196>
 80074b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074ba:	2105      	movs	r1, #5
 80074bc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 80074c0:	1c42      	adds	r2, r0, #1
 80074c2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80074c6:	f001 fd69 	bl	8008f9c <uxr_object_id>
 80074ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80074ce:	6160      	str	r0, [r4, #20]
 80074d0:	691e      	ldr	r6, [r3, #16]
 80074d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074d6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80074da:	f10d 0a10 	add.w	sl, sp, #16
 80074de:	4641      	mov	r1, r8
 80074e0:	4650      	mov	r0, sl
 80074e2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 80074e6:	f000 fadf 	bl	8007aa8 <convert_qos_profile>
 80074ea:	9503      	str	r5, [sp, #12]
 80074ec:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80074f0:	9001      	str	r0, [sp, #4]
 80074f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80074f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8007500:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8007504:	f8d8 1000 	ldr.w	r1, [r8]
 8007508:	4630      	mov	r0, r6
 800750a:	f001 fcd1 	bl	8008eb0 <uxr_buffer_create_datawriter_bin>
 800750e:	4602      	mov	r2, r0
 8007510:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007514:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8007518:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800751c:	f000 faa8 	bl	8007a70 <run_xrce_session>
 8007520:	b938      	cbnz	r0, 8007532 <rmw_create_publisher+0x1a6>
 8007522:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007524:	b108      	cbz	r0, 800752a <rmw_create_publisher+0x19e>
 8007526:	f000 fa47 	bl	80079b8 <rmw_uxrce_fini_topic_memory>
 800752a:	4638      	mov	r0, r7
 800752c:	f000 f9ec 	bl	8007908 <rmw_uxrce_fini_publisher_memory>
 8007530:	2700      	movs	r7, #0
 8007532:	4638      	mov	r0, r7
 8007534:	b007      	add	sp, #28
 8007536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753a:	bf00      	nop
 800753c:	2000d944 	.word	0x2000d944
 8007540:	0801136c 	.word	0x0801136c
 8007544:	08011338 	.word	0x08011338

08007548 <rmw_publisher_get_actual_qos>:
 8007548:	b150      	cbz	r0, 8007560 <rmw_publisher_get_actual_qos+0x18>
 800754a:	b508      	push	{r3, lr}
 800754c:	460b      	mov	r3, r1
 800754e:	b149      	cbz	r1, 8007564 <rmw_publisher_get_actual_qos+0x1c>
 8007550:	6841      	ldr	r1, [r0, #4]
 8007552:	2250      	movs	r2, #80	@ 0x50
 8007554:	3128      	adds	r1, #40	@ 0x28
 8007556:	4618      	mov	r0, r3
 8007558:	f008 ff25 	bl	80103a6 <memcpy>
 800755c:	2000      	movs	r0, #0
 800755e:	bd08      	pop	{r3, pc}
 8007560:	200b      	movs	r0, #11
 8007562:	4770      	bx	lr
 8007564:	200b      	movs	r0, #11
 8007566:	bd08      	pop	{r3, pc}

08007568 <rmw_destroy_publisher>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	b128      	cbz	r0, 8007578 <rmw_destroy_publisher+0x10>
 800756c:	4604      	mov	r4, r0
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	460d      	mov	r5, r1
 8007572:	f000 fafd 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 8007576:	b910      	cbnz	r0, 800757e <rmw_destroy_publisher+0x16>
 8007578:	2401      	movs	r4, #1
 800757a:	4620      	mov	r0, r4
 800757c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800757e:	6863      	ldr	r3, [r4, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0f9      	beq.n	8007578 <rmw_destroy_publisher+0x10>
 8007584:	2d00      	cmp	r5, #0
 8007586:	d0f7      	beq.n	8007578 <rmw_destroy_publisher+0x10>
 8007588:	6828      	ldr	r0, [r5, #0]
 800758a:	f000 faf1 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 800758e:	2800      	cmp	r0, #0
 8007590:	d0f2      	beq.n	8007578 <rmw_destroy_publisher+0x10>
 8007592:	686c      	ldr	r4, [r5, #4]
 8007594:	2c00      	cmp	r4, #0
 8007596:	d0ef      	beq.n	8007578 <rmw_destroy_publisher+0x10>
 8007598:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800759a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800759e:	f005 fe8d 	bl	800d2bc <destroy_topic>
 80075a2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80075a6:	6962      	ldr	r2, [r4, #20]
 80075a8:	6918      	ldr	r0, [r3, #16]
 80075aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80075ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	f001 fb98 	bl	8008ce8 <uxr_buffer_delete_entity>
 80075b8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80075bc:	6922      	ldr	r2, [r4, #16]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80075c4:	4604      	mov	r4, r0
 80075c6:	6809      	ldr	r1, [r1, #0]
 80075c8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80075cc:	f001 fb8c 	bl	8008ce8 <uxr_buffer_delete_entity>
 80075d0:	693e      	ldr	r6, [r7, #16]
 80075d2:	4622      	mov	r2, r4
 80075d4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80075d8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80075dc:	4604      	mov	r4, r0
 80075de:	4630      	mov	r0, r6
 80075e0:	f000 fa46 	bl	8007a70 <run_xrce_session>
 80075e4:	693e      	ldr	r6, [r7, #16]
 80075e6:	4622      	mov	r2, r4
 80075e8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80075ec:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80075f0:	4604      	mov	r4, r0
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 fa3c 	bl	8007a70 <run_xrce_session>
 80075f8:	b12c      	cbz	r4, 8007606 <rmw_destroy_publisher+0x9e>
 80075fa:	b120      	cbz	r0, 8007606 <rmw_destroy_publisher+0x9e>
 80075fc:	2400      	movs	r4, #0
 80075fe:	4628      	mov	r0, r5
 8007600:	f000 f982 	bl	8007908 <rmw_uxrce_fini_publisher_memory>
 8007604:	e7b9      	b.n	800757a <rmw_destroy_publisher+0x12>
 8007606:	2402      	movs	r4, #2
 8007608:	e7f9      	b.n	80075fe <rmw_destroy_publisher+0x96>
 800760a:	bf00      	nop

0800760c <rmw_uxrce_init_service_memory>:
 800760c:	b1e2      	cbz	r2, 8007648 <rmw_uxrce_init_service_memory+0x3c>
 800760e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007612:	7b05      	ldrb	r5, [r0, #12]
 8007614:	4606      	mov	r6, r0
 8007616:	b9ad      	cbnz	r5, 8007644 <rmw_uxrce_init_service_memory+0x38>
 8007618:	23c8      	movs	r3, #200	@ 0xc8
 800761a:	e9c0 5500 	strd	r5, r5, [r0]
 800761e:	6083      	str	r3, [r0, #8]
 8007620:	f240 1301 	movw	r3, #257	@ 0x101
 8007624:	4617      	mov	r7, r2
 8007626:	8183      	strh	r3, [r0, #12]
 8007628:	460c      	mov	r4, r1
 800762a:	46a8      	mov	r8, r5
 800762c:	4621      	mov	r1, r4
 800762e:	4630      	mov	r0, r6
 8007630:	3501      	adds	r5, #1
 8007632:	f005 fb79 	bl	800cd28 <put_memory>
 8007636:	42af      	cmp	r7, r5
 8007638:	60a4      	str	r4, [r4, #8]
 800763a:	f884 800c 	strb.w	r8, [r4, #12]
 800763e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8007642:	d1f3      	bne.n	800762c <rmw_uxrce_init_service_memory+0x20>
 8007644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop

0800764c <rmw_uxrce_init_client_memory>:
 800764c:	b1e2      	cbz	r2, 8007688 <rmw_uxrce_init_client_memory+0x3c>
 800764e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	7b05      	ldrb	r5, [r0, #12]
 8007654:	4606      	mov	r6, r0
 8007656:	b9ad      	cbnz	r5, 8007684 <rmw_uxrce_init_client_memory+0x38>
 8007658:	23c8      	movs	r3, #200	@ 0xc8
 800765a:	e9c0 5500 	strd	r5, r5, [r0]
 800765e:	6083      	str	r3, [r0, #8]
 8007660:	f240 1301 	movw	r3, #257	@ 0x101
 8007664:	4617      	mov	r7, r2
 8007666:	8183      	strh	r3, [r0, #12]
 8007668:	460c      	mov	r4, r1
 800766a:	46a8      	mov	r8, r5
 800766c:	4621      	mov	r1, r4
 800766e:	4630      	mov	r0, r6
 8007670:	3501      	adds	r5, #1
 8007672:	f005 fb59 	bl	800cd28 <put_memory>
 8007676:	42af      	cmp	r7, r5
 8007678:	60a4      	str	r4, [r4, #8]
 800767a:	f884 800c 	strb.w	r8, [r4, #12]
 800767e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8007682:	d1f3      	bne.n	800766c <rmw_uxrce_init_client_memory+0x20>
 8007684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop

0800768c <rmw_uxrce_init_publisher_memory>:
 800768c:	b1e2      	cbz	r2, 80076c8 <rmw_uxrce_init_publisher_memory+0x3c>
 800768e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007692:	7b05      	ldrb	r5, [r0, #12]
 8007694:	4606      	mov	r6, r0
 8007696:	b9ad      	cbnz	r5, 80076c4 <rmw_uxrce_init_publisher_memory+0x38>
 8007698:	23d8      	movs	r3, #216	@ 0xd8
 800769a:	e9c0 5500 	strd	r5, r5, [r0]
 800769e:	6083      	str	r3, [r0, #8]
 80076a0:	f240 1301 	movw	r3, #257	@ 0x101
 80076a4:	4617      	mov	r7, r2
 80076a6:	8183      	strh	r3, [r0, #12]
 80076a8:	460c      	mov	r4, r1
 80076aa:	46a8      	mov	r8, r5
 80076ac:	4621      	mov	r1, r4
 80076ae:	4630      	mov	r0, r6
 80076b0:	3501      	adds	r5, #1
 80076b2:	f005 fb39 	bl	800cd28 <put_memory>
 80076b6:	42af      	cmp	r7, r5
 80076b8:	60a4      	str	r4, [r4, #8]
 80076ba:	f884 800c 	strb.w	r8, [r4, #12]
 80076be:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80076c2:	d1f3      	bne.n	80076ac <rmw_uxrce_init_publisher_memory+0x20>
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop

080076cc <rmw_uxrce_init_subscription_memory>:
 80076cc:	b1e2      	cbz	r2, 8007708 <rmw_uxrce_init_subscription_memory+0x3c>
 80076ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d2:	7b05      	ldrb	r5, [r0, #12]
 80076d4:	4606      	mov	r6, r0
 80076d6:	b9ad      	cbnz	r5, 8007704 <rmw_uxrce_init_subscription_memory+0x38>
 80076d8:	23d8      	movs	r3, #216	@ 0xd8
 80076da:	e9c0 5500 	strd	r5, r5, [r0]
 80076de:	6083      	str	r3, [r0, #8]
 80076e0:	f240 1301 	movw	r3, #257	@ 0x101
 80076e4:	4617      	mov	r7, r2
 80076e6:	8183      	strh	r3, [r0, #12]
 80076e8:	460c      	mov	r4, r1
 80076ea:	46a8      	mov	r8, r5
 80076ec:	4621      	mov	r1, r4
 80076ee:	4630      	mov	r0, r6
 80076f0:	3501      	adds	r5, #1
 80076f2:	f005 fb19 	bl	800cd28 <put_memory>
 80076f6:	42af      	cmp	r7, r5
 80076f8:	60a4      	str	r4, [r4, #8]
 80076fa:	f884 800c 	strb.w	r8, [r4, #12]
 80076fe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8007702:	d1f3      	bne.n	80076ec <rmw_uxrce_init_subscription_memory+0x20>
 8007704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop

0800770c <rmw_uxrce_init_node_memory>:
 800770c:	b1e2      	cbz	r2, 8007748 <rmw_uxrce_init_node_memory+0x3c>
 800770e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007712:	7b05      	ldrb	r5, [r0, #12]
 8007714:	4606      	mov	r6, r0
 8007716:	b9ad      	cbnz	r5, 8007744 <rmw_uxrce_init_node_memory+0x38>
 8007718:	23a4      	movs	r3, #164	@ 0xa4
 800771a:	e9c0 5500 	strd	r5, r5, [r0]
 800771e:	6083      	str	r3, [r0, #8]
 8007720:	f240 1301 	movw	r3, #257	@ 0x101
 8007724:	4617      	mov	r7, r2
 8007726:	8183      	strh	r3, [r0, #12]
 8007728:	460c      	mov	r4, r1
 800772a:	46a8      	mov	r8, r5
 800772c:	4621      	mov	r1, r4
 800772e:	4630      	mov	r0, r6
 8007730:	3501      	adds	r5, #1
 8007732:	f005 faf9 	bl	800cd28 <put_memory>
 8007736:	42af      	cmp	r7, r5
 8007738:	60a4      	str	r4, [r4, #8]
 800773a:	f884 800c 	strb.w	r8, [r4, #12]
 800773e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8007742:	d1f3      	bne.n	800772c <rmw_uxrce_init_node_memory+0x20>
 8007744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop

0800774c <rmw_uxrce_init_session_memory>:
 800774c:	b1ea      	cbz	r2, 800778a <rmw_uxrce_init_session_memory+0x3e>
 800774e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007752:	7b05      	ldrb	r5, [r0, #12]
 8007754:	4606      	mov	r6, r0
 8007756:	b9b5      	cbnz	r5, 8007786 <rmw_uxrce_init_session_memory+0x3a>
 8007758:	e9c0 5500 	strd	r5, r5, [r0]
 800775c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8007760:	f240 1301 	movw	r3, #257	@ 0x101
 8007764:	4617      	mov	r7, r2
 8007766:	f8c0 8008 	str.w	r8, [r0, #8]
 800776a:	460c      	mov	r4, r1
 800776c:	8183      	strh	r3, [r0, #12]
 800776e:	46a9      	mov	r9, r5
 8007770:	4621      	mov	r1, r4
 8007772:	4630      	mov	r0, r6
 8007774:	3501      	adds	r5, #1
 8007776:	f005 fad7 	bl	800cd28 <put_memory>
 800777a:	42af      	cmp	r7, r5
 800777c:	60a4      	str	r4, [r4, #8]
 800777e:	f884 900c 	strb.w	r9, [r4, #12]
 8007782:	4444      	add	r4, r8
 8007784:	d1f4      	bne.n	8007770 <rmw_uxrce_init_session_memory+0x24>
 8007786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800778a:	4770      	bx	lr

0800778c <rmw_uxrce_init_topic_memory>:
 800778c:	b1e2      	cbz	r2, 80077c8 <rmw_uxrce_init_topic_memory+0x3c>
 800778e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007792:	7b05      	ldrb	r5, [r0, #12]
 8007794:	4606      	mov	r6, r0
 8007796:	b9ad      	cbnz	r5, 80077c4 <rmw_uxrce_init_topic_memory+0x38>
 8007798:	231c      	movs	r3, #28
 800779a:	e9c0 5500 	strd	r5, r5, [r0]
 800779e:	6083      	str	r3, [r0, #8]
 80077a0:	f240 1301 	movw	r3, #257	@ 0x101
 80077a4:	4617      	mov	r7, r2
 80077a6:	8183      	strh	r3, [r0, #12]
 80077a8:	460c      	mov	r4, r1
 80077aa:	46a8      	mov	r8, r5
 80077ac:	4621      	mov	r1, r4
 80077ae:	4630      	mov	r0, r6
 80077b0:	3501      	adds	r5, #1
 80077b2:	f005 fab9 	bl	800cd28 <put_memory>
 80077b6:	42af      	cmp	r7, r5
 80077b8:	60a4      	str	r4, [r4, #8]
 80077ba:	f884 800c 	strb.w	r8, [r4, #12]
 80077be:	f104 041c 	add.w	r4, r4, #28
 80077c2:	d1f3      	bne.n	80077ac <rmw_uxrce_init_topic_memory+0x20>
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop

080077cc <rmw_uxrce_init_static_input_buffer_memory>:
 80077cc:	b1ea      	cbz	r2, 800780a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80077ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d2:	7b05      	ldrb	r5, [r0, #12]
 80077d4:	4606      	mov	r6, r0
 80077d6:	b9b5      	cbnz	r5, 8007806 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80077d8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80077dc:	e9c0 5500 	strd	r5, r5, [r0]
 80077e0:	6083      	str	r3, [r0, #8]
 80077e2:	f240 1301 	movw	r3, #257	@ 0x101
 80077e6:	4617      	mov	r7, r2
 80077e8:	8183      	strh	r3, [r0, #12]
 80077ea:	460c      	mov	r4, r1
 80077ec:	46a8      	mov	r8, r5
 80077ee:	4621      	mov	r1, r4
 80077f0:	4630      	mov	r0, r6
 80077f2:	3501      	adds	r5, #1
 80077f4:	f005 fa98 	bl	800cd28 <put_memory>
 80077f8:	42af      	cmp	r7, r5
 80077fa:	60a4      	str	r4, [r4, #8]
 80077fc:	f884 800c 	strb.w	r8, [r4, #12]
 8007800:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8007804:	d1f3      	bne.n	80077ee <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8007806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800780a:	4770      	bx	lr

0800780c <rmw_uxrce_init_init_options_impl_memory>:
 800780c:	b1e2      	cbz	r2, 8007848 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800780e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007812:	7b05      	ldrb	r5, [r0, #12]
 8007814:	4606      	mov	r6, r0
 8007816:	b9ad      	cbnz	r5, 8007844 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8007818:	232c      	movs	r3, #44	@ 0x2c
 800781a:	e9c0 5500 	strd	r5, r5, [r0]
 800781e:	6083      	str	r3, [r0, #8]
 8007820:	f240 1301 	movw	r3, #257	@ 0x101
 8007824:	4617      	mov	r7, r2
 8007826:	8183      	strh	r3, [r0, #12]
 8007828:	460c      	mov	r4, r1
 800782a:	46a8      	mov	r8, r5
 800782c:	4621      	mov	r1, r4
 800782e:	4630      	mov	r0, r6
 8007830:	3501      	adds	r5, #1
 8007832:	f005 fa79 	bl	800cd28 <put_memory>
 8007836:	42af      	cmp	r7, r5
 8007838:	60a4      	str	r4, [r4, #8]
 800783a:	f884 800c 	strb.w	r8, [r4, #12]
 800783e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8007842:	d1f3      	bne.n	800782c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop

0800784c <rmw_uxrce_init_wait_set_memory>:
 800784c:	b1e2      	cbz	r2, 8007888 <rmw_uxrce_init_wait_set_memory+0x3c>
 800784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007852:	7b05      	ldrb	r5, [r0, #12]
 8007854:	4606      	mov	r6, r0
 8007856:	b9ad      	cbnz	r5, 8007884 <rmw_uxrce_init_wait_set_memory+0x38>
 8007858:	231c      	movs	r3, #28
 800785a:	e9c0 5500 	strd	r5, r5, [r0]
 800785e:	6083      	str	r3, [r0, #8]
 8007860:	f240 1301 	movw	r3, #257	@ 0x101
 8007864:	4617      	mov	r7, r2
 8007866:	8183      	strh	r3, [r0, #12]
 8007868:	460c      	mov	r4, r1
 800786a:	46a8      	mov	r8, r5
 800786c:	4621      	mov	r1, r4
 800786e:	4630      	mov	r0, r6
 8007870:	3501      	adds	r5, #1
 8007872:	f005 fa59 	bl	800cd28 <put_memory>
 8007876:	42af      	cmp	r7, r5
 8007878:	60a4      	str	r4, [r4, #8]
 800787a:	f884 800c 	strb.w	r8, [r4, #12]
 800787e:	f104 041c 	add.w	r4, r4, #28
 8007882:	d1f3      	bne.n	800786c <rmw_uxrce_init_wait_set_memory+0x20>
 8007884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop

0800788c <rmw_uxrce_init_guard_condition_memory>:
 800788c:	b1e2      	cbz	r2, 80078c8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800788e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007892:	7b05      	ldrb	r5, [r0, #12]
 8007894:	4606      	mov	r6, r0
 8007896:	b9ad      	cbnz	r5, 80078c4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8007898:	2320      	movs	r3, #32
 800789a:	e9c0 5500 	strd	r5, r5, [r0]
 800789e:	6083      	str	r3, [r0, #8]
 80078a0:	f240 1301 	movw	r3, #257	@ 0x101
 80078a4:	4617      	mov	r7, r2
 80078a6:	8183      	strh	r3, [r0, #12]
 80078a8:	460c      	mov	r4, r1
 80078aa:	46a8      	mov	r8, r5
 80078ac:	4621      	mov	r1, r4
 80078ae:	4630      	mov	r0, r6
 80078b0:	3501      	adds	r5, #1
 80078b2:	f005 fa39 	bl	800cd28 <put_memory>
 80078b6:	42af      	cmp	r7, r5
 80078b8:	60a4      	str	r4, [r4, #8]
 80078ba:	f884 800c 	strb.w	r8, [r4, #12]
 80078be:	f104 0420 	add.w	r4, r4, #32
 80078c2:	d1f3      	bne.n	80078ac <rmw_uxrce_init_guard_condition_memory+0x20>
 80078c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop

080078cc <rmw_uxrce_fini_session_memory>:
 80078cc:	4601      	mov	r1, r0
 80078ce:	4801      	ldr	r0, [pc, #4]	@ (80078d4 <rmw_uxrce_fini_session_memory+0x8>)
 80078d0:	f005 ba2a 	b.w	800cd28 <put_memory>
 80078d4:	2000d964 	.word	0x2000d964

080078d8 <rmw_uxrce_fini_node_memory>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4604      	mov	r4, r0
 80078dc:	6800      	ldr	r0, [r0, #0]
 80078de:	b128      	cbz	r0, 80078ec <rmw_uxrce_fini_node_memory+0x14>
 80078e0:	4b07      	ldr	r3, [pc, #28]	@ (8007900 <rmw_uxrce_fini_node_memory+0x28>)
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	f7f8 fc7c 	bl	80001e0 <strcmp>
 80078e8:	b940      	cbnz	r0, 80078fc <rmw_uxrce_fini_node_memory+0x24>
 80078ea:	6020      	str	r0, [r4, #0]
 80078ec:	6861      	ldr	r1, [r4, #4]
 80078ee:	b129      	cbz	r1, 80078fc <rmw_uxrce_fini_node_memory+0x24>
 80078f0:	2500      	movs	r5, #0
 80078f2:	4804      	ldr	r0, [pc, #16]	@ (8007904 <rmw_uxrce_fini_node_memory+0x2c>)
 80078f4:	610d      	str	r5, [r1, #16]
 80078f6:	f005 fa17 	bl	800cd28 <put_memory>
 80078fa:	6065      	str	r5, [r4, #4]
 80078fc:	bd38      	pop	{r3, r4, r5, pc}
 80078fe:	bf00      	nop
 8007900:	08011954 	.word	0x08011954
 8007904:	2000d934 	.word	0x2000d934

08007908 <rmw_uxrce_fini_publisher_memory>:
 8007908:	b510      	push	{r4, lr}
 800790a:	4604      	mov	r4, r0
 800790c:	6800      	ldr	r0, [r0, #0]
 800790e:	b128      	cbz	r0, 800791c <rmw_uxrce_fini_publisher_memory+0x14>
 8007910:	4b06      	ldr	r3, [pc, #24]	@ (800792c <rmw_uxrce_fini_publisher_memory+0x24>)
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	f7f8 fc64 	bl	80001e0 <strcmp>
 8007918:	b938      	cbnz	r0, 800792a <rmw_uxrce_fini_publisher_memory+0x22>
 800791a:	6020      	str	r0, [r4, #0]
 800791c:	6861      	ldr	r1, [r4, #4]
 800791e:	b121      	cbz	r1, 800792a <rmw_uxrce_fini_publisher_memory+0x22>
 8007920:	4803      	ldr	r0, [pc, #12]	@ (8007930 <rmw_uxrce_fini_publisher_memory+0x28>)
 8007922:	f005 fa01 	bl	800cd28 <put_memory>
 8007926:	2300      	movs	r3, #0
 8007928:	6063      	str	r3, [r4, #4]
 800792a:	bd10      	pop	{r4, pc}
 800792c:	08011954 	.word	0x08011954
 8007930:	2000d944 	.word	0x2000d944

08007934 <rmw_uxrce_fini_subscription_memory>:
 8007934:	b510      	push	{r4, lr}
 8007936:	4604      	mov	r4, r0
 8007938:	6800      	ldr	r0, [r0, #0]
 800793a:	b128      	cbz	r0, 8007948 <rmw_uxrce_fini_subscription_memory+0x14>
 800793c:	4b06      	ldr	r3, [pc, #24]	@ (8007958 <rmw_uxrce_fini_subscription_memory+0x24>)
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	f7f8 fc4e 	bl	80001e0 <strcmp>
 8007944:	b938      	cbnz	r0, 8007956 <rmw_uxrce_fini_subscription_memory+0x22>
 8007946:	6020      	str	r0, [r4, #0]
 8007948:	6861      	ldr	r1, [r4, #4]
 800794a:	b121      	cbz	r1, 8007956 <rmw_uxrce_fini_subscription_memory+0x22>
 800794c:	4803      	ldr	r0, [pc, #12]	@ (800795c <rmw_uxrce_fini_subscription_memory+0x28>)
 800794e:	f005 f9eb 	bl	800cd28 <put_memory>
 8007952:	2300      	movs	r3, #0
 8007954:	6063      	str	r3, [r4, #4]
 8007956:	bd10      	pop	{r4, pc}
 8007958:	08011954 	.word	0x08011954
 800795c:	2000d984 	.word	0x2000d984

08007960 <rmw_uxrce_fini_service_memory>:
 8007960:	b510      	push	{r4, lr}
 8007962:	4604      	mov	r4, r0
 8007964:	6800      	ldr	r0, [r0, #0]
 8007966:	b128      	cbz	r0, 8007974 <rmw_uxrce_fini_service_memory+0x14>
 8007968:	4b06      	ldr	r3, [pc, #24]	@ (8007984 <rmw_uxrce_fini_service_memory+0x24>)
 800796a:	6819      	ldr	r1, [r3, #0]
 800796c:	f7f8 fc38 	bl	80001e0 <strcmp>
 8007970:	b938      	cbnz	r0, 8007982 <rmw_uxrce_fini_service_memory+0x22>
 8007972:	6020      	str	r0, [r4, #0]
 8007974:	6861      	ldr	r1, [r4, #4]
 8007976:	b121      	cbz	r1, 8007982 <rmw_uxrce_fini_service_memory+0x22>
 8007978:	4803      	ldr	r0, [pc, #12]	@ (8007988 <rmw_uxrce_fini_service_memory+0x28>)
 800797a:	f005 f9d5 	bl	800cd28 <put_memory>
 800797e:	2300      	movs	r3, #0
 8007980:	6063      	str	r3, [r4, #4]
 8007982:	bd10      	pop	{r4, pc}
 8007984:	08011954 	.word	0x08011954
 8007988:	2000d954 	.word	0x2000d954

0800798c <rmw_uxrce_fini_client_memory>:
 800798c:	b510      	push	{r4, lr}
 800798e:	4604      	mov	r4, r0
 8007990:	6800      	ldr	r0, [r0, #0]
 8007992:	b128      	cbz	r0, 80079a0 <rmw_uxrce_fini_client_memory+0x14>
 8007994:	4b06      	ldr	r3, [pc, #24]	@ (80079b0 <rmw_uxrce_fini_client_memory+0x24>)
 8007996:	6819      	ldr	r1, [r3, #0]
 8007998:	f7f8 fc22 	bl	80001e0 <strcmp>
 800799c:	b938      	cbnz	r0, 80079ae <rmw_uxrce_fini_client_memory+0x22>
 800799e:	6020      	str	r0, [r4, #0]
 80079a0:	6861      	ldr	r1, [r4, #4]
 80079a2:	b121      	cbz	r1, 80079ae <rmw_uxrce_fini_client_memory+0x22>
 80079a4:	4803      	ldr	r0, [pc, #12]	@ (80079b4 <rmw_uxrce_fini_client_memory+0x28>)
 80079a6:	f005 f9bf 	bl	800cd28 <put_memory>
 80079aa:	2300      	movs	r3, #0
 80079ac:	6063      	str	r3, [r4, #4]
 80079ae:	bd10      	pop	{r4, pc}
 80079b0:	08011954 	.word	0x08011954
 80079b4:	20009068 	.word	0x20009068

080079b8 <rmw_uxrce_fini_topic_memory>:
 80079b8:	b510      	push	{r4, lr}
 80079ba:	4604      	mov	r4, r0
 80079bc:	4621      	mov	r1, r4
 80079be:	4803      	ldr	r0, [pc, #12]	@ (80079cc <rmw_uxrce_fini_topic_memory+0x14>)
 80079c0:	f005 f9b2 	bl	800cd28 <put_memory>
 80079c4:	2300      	movs	r3, #0
 80079c6:	61a3      	str	r3, [r4, #24]
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	bf00      	nop
 80079cc:	2000d994 	.word	0x2000d994

080079d0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80079d0:	b082      	sub	sp, #8
 80079d2:	b530      	push	{r4, r5, lr}
 80079d4:	4925      	ldr	r1, [pc, #148]	@ (8007a6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80079d6:	680d      	ldr	r5, [r1, #0]
 80079d8:	ac03      	add	r4, sp, #12
 80079da:	e884 000c 	stmia.w	r4, {r2, r3}
 80079de:	461c      	mov	r4, r3
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	d041      	beq.n	8007a68 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80079e4:	462b      	mov	r3, r5
 80079e6:	2100      	movs	r1, #0
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80079f0:	4290      	cmp	r0, r2
 80079f2:	bf08      	it	eq
 80079f4:	3101      	addeq	r1, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1f6      	bne.n	80079e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80079fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d029      	beq.n	8007a56 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8007a02:	d907      	bls.n	8007a14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d005      	beq.n	8007a14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8007a08:	2100      	movs	r1, #0
 8007a0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a0e:	4608      	mov	r0, r1
 8007a10:	b002      	add	sp, #8
 8007a12:	4770      	bx	lr
 8007a14:	b314      	cbz	r4, 8007a5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8007a16:	428c      	cmp	r4, r1
 8007a18:	d820      	bhi.n	8007a5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8007a1a:	2d00      	cmp	r5, #0
 8007a1c:	d0f4      	beq.n	8007a08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8007a1e:	2100      	movs	r1, #0
 8007a20:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8007a24:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8007a28:	e002      	b.n	8007a30 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8007a2a:	686d      	ldr	r5, [r5, #4]
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	d0ec      	beq.n	8007a0a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8007a30:	68ab      	ldr	r3, [r5, #8]
 8007a32:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8007a36:	4290      	cmp	r0, r2
 8007a38:	d1f7      	bne.n	8007a2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8007a3a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8007a3e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8007a42:	4562      	cmp	r2, ip
 8007a44:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8007a48:	eb73 0e04 	sbcs.w	lr, r3, r4
 8007a4c:	daed      	bge.n	8007a2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8007a4e:	4694      	mov	ip, r2
 8007a50:	461c      	mov	r4, r3
 8007a52:	4629      	mov	r1, r5
 8007a54:	e7e9      	b.n	8007a2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8007a56:	b10c      	cbz	r4, 8007a5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8007a58:	428c      	cmp	r4, r1
 8007a5a:	d9d5      	bls.n	8007a08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8007a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a60:	4802      	ldr	r0, [pc, #8]	@ (8007a6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8007a62:	b002      	add	sp, #8
 8007a64:	f005 b950 	b.w	800cd08 <get_memory>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	e7c6      	b.n	80079fa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8007a6c:	2000d974 	.word	0x2000d974

08007a70 <run_xrce_session>:
 8007a70:	b510      	push	{r4, lr}
 8007a72:	788c      	ldrb	r4, [r1, #2]
 8007a74:	b086      	sub	sp, #24
 8007a76:	2c01      	cmp	r4, #1
 8007a78:	f8ad 200e 	strh.w	r2, [sp, #14]
 8007a7c:	d00c      	beq.n	8007a98 <run_xrce_session+0x28>
 8007a7e:	4619      	mov	r1, r3
 8007a80:	2301      	movs	r3, #1
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	f10d 020e 	add.w	r2, sp, #14
 8007a88:	f10d 0317 	add.w	r3, sp, #23
 8007a8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007a90:	f001 ff7e 	bl	8009990 <uxr_run_session_until_all_status>
 8007a94:	b006      	add	sp, #24
 8007a96:	bd10      	pop	{r4, pc}
 8007a98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007a9c:	f001 fbcc 	bl	8009238 <uxr_flash_output_streams>
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	b006      	add	sp, #24
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	bf00      	nop

08007aa8 <convert_qos_profile>:
 8007aa8:	7a4a      	ldrb	r2, [r1, #9]
 8007aaa:	f891 c008 	ldrb.w	ip, [r1, #8]
 8007aae:	2a02      	cmp	r2, #2
 8007ab0:	bf18      	it	ne
 8007ab2:	2200      	movne	r2, #0
 8007ab4:	7002      	strb	r2, [r0, #0]
 8007ab6:	780a      	ldrb	r2, [r1, #0]
 8007ab8:	8889      	ldrh	r1, [r1, #4]
 8007aba:	8081      	strh	r1, [r0, #4]
 8007abc:	f1ac 0c02 	sub.w	ip, ip, #2
 8007ac0:	f1a2 0202 	sub.w	r2, r2, #2
 8007ac4:	fabc fc8c 	clz	ip, ip
 8007ac8:	fab2 f282 	clz	r2, r2
 8007acc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8007ad0:	0952      	lsrs	r2, r2, #5
 8007ad2:	f880 c001 	strb.w	ip, [r0, #1]
 8007ad6:	7082      	strb	r2, [r0, #2]
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop

08007adc <generate_type_name>:
 8007adc:	b530      	push	{r4, r5, lr}
 8007ade:	2300      	movs	r3, #0
 8007ae0:	700b      	strb	r3, [r1, #0]
 8007ae2:	6803      	ldr	r3, [r0, #0]
 8007ae4:	b087      	sub	sp, #28
 8007ae6:	4614      	mov	r4, r2
 8007ae8:	b1d3      	cbz	r3, 8007b20 <generate_type_name+0x44>
 8007aea:	4a0f      	ldr	r2, [pc, #60]	@ (8007b28 <generate_type_name+0x4c>)
 8007aec:	4615      	mov	r5, r2
 8007aee:	9203      	str	r2, [sp, #12]
 8007af0:	9500      	str	r5, [sp, #0]
 8007af2:	6842      	ldr	r2, [r0, #4]
 8007af4:	480d      	ldr	r0, [pc, #52]	@ (8007b2c <generate_type_name+0x50>)
 8007af6:	9001      	str	r0, [sp, #4]
 8007af8:	4608      	mov	r0, r1
 8007afa:	490d      	ldr	r1, [pc, #52]	@ (8007b30 <generate_type_name+0x54>)
 8007afc:	9204      	str	r2, [sp, #16]
 8007afe:	9105      	str	r1, [sp, #20]
 8007b00:	9102      	str	r1, [sp, #8]
 8007b02:	4a0c      	ldr	r2, [pc, #48]	@ (8007b34 <generate_type_name+0x58>)
 8007b04:	4621      	mov	r1, r4
 8007b06:	f008 fad5 	bl	80100b4 <sniprintf>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	db05      	blt.n	8007b1a <generate_type_name+0x3e>
 8007b0e:	4284      	cmp	r4, r0
 8007b10:	bfd4      	ite	le
 8007b12:	2000      	movle	r0, #0
 8007b14:	2001      	movgt	r0, #1
 8007b16:	b007      	add	sp, #28
 8007b18:	bd30      	pop	{r4, r5, pc}
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	b007      	add	sp, #28
 8007b1e:	bd30      	pop	{r4, r5, pc}
 8007b20:	4b05      	ldr	r3, [pc, #20]	@ (8007b38 <generate_type_name+0x5c>)
 8007b22:	4a01      	ldr	r2, [pc, #4]	@ (8007b28 <generate_type_name+0x4c>)
 8007b24:	461d      	mov	r5, r3
 8007b26:	e7e2      	b.n	8007aee <generate_type_name+0x12>
 8007b28:	0801135c 	.word	0x0801135c
 8007b2c:	08011374 	.word	0x08011374
 8007b30:	08011370 	.word	0x08011370
 8007b34:	08011360 	.word	0x08011360
 8007b38:	0801172c 	.word	0x0801172c

08007b3c <generate_topic_name>:
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	4614      	mov	r4, r2
 8007b42:	9000      	str	r0, [sp, #0]
 8007b44:	4b08      	ldr	r3, [pc, #32]	@ (8007b68 <generate_topic_name+0x2c>)
 8007b46:	4a09      	ldr	r2, [pc, #36]	@ (8007b6c <generate_topic_name+0x30>)
 8007b48:	4608      	mov	r0, r1
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	f008 fab2 	bl	80100b4 <sniprintf>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	db05      	blt.n	8007b60 <generate_topic_name+0x24>
 8007b54:	4284      	cmp	r4, r0
 8007b56:	bfd4      	ite	le
 8007b58:	2000      	movle	r0, #0
 8007b5a:	2001      	movgt	r0, #1
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd10      	pop	{r4, pc}
 8007b60:	2000      	movs	r0, #0
 8007b62:	b002      	add	sp, #8
 8007b64:	bd10      	pop	{r4, pc}
 8007b66:	bf00      	nop
 8007b68:	08011380 	.word	0x08011380
 8007b6c:	08011378 	.word	0x08011378

08007b70 <is_uxrce_rmw_identifier_valid>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	4604      	mov	r4, r0
 8007b74:	b140      	cbz	r0, 8007b88 <is_uxrce_rmw_identifier_valid+0x18>
 8007b76:	f005 f8eb 	bl	800cd50 <rmw_get_implementation_identifier>
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f7f8 fb2f 	bl	80001e0 <strcmp>
 8007b82:	fab0 f080 	clz	r0, r0
 8007b86:	0940      	lsrs	r0, r0, #5
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop

08007b8c <get_message_typesupport_handle>:
 8007b8c:	6883      	ldr	r3, [r0, #8]
 8007b8e:	4718      	bx	r3

08007b90 <get_message_typesupport_handle_function>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	4604      	mov	r4, r0
 8007b94:	6800      	ldr	r0, [r0, #0]
 8007b96:	f7f8 fb23 	bl	80001e0 <strcmp>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	bf0c      	ite	eq
 8007b9e:	4620      	moveq	r0, r4
 8007ba0:	2000      	movne	r0, #0
 8007ba2:	bd10      	pop	{r4, pc}

08007ba4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007ba4:	4b04      	ldr	r3, [pc, #16]	@ (8007bb8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	b10a      	cbz	r2, 8007bae <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8007baa:	4803      	ldr	r0, [pc, #12]	@ (8007bb8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007bac:	4770      	bx	lr
 8007bae:	4a03      	ldr	r2, [pc, #12]	@ (8007bbc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8007bb0:	4801      	ldr	r0, [pc, #4]	@ (8007bb8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	4770      	bx	lr
 8007bb8:	20000030 	.word	0x20000030
 8007bbc:	200000ac 	.word	0x200000ac

08007bc0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007bc0:	4a02      	ldr	r2, [pc, #8]	@ (8007bcc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8007bc2:	4b03      	ldr	r3, [pc, #12]	@ (8007bd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	200000ac 	.word	0x200000ac
 8007bd0:	20000030 	.word	0x20000030

08007bd4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8007bd4:	f005 bda0 	b.w	800d718 <std_msgs__msg__Int32__init>

08007bd8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8007bd8:	f005 bda2 	b.w	800d720 <std_msgs__msg__Int32__fini>

08007bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007bdc:	4b04      	ldr	r3, [pc, #16]	@ (8007bf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	b10a      	cbz	r2, 8007be6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8007be2:	4803      	ldr	r0, [pc, #12]	@ (8007bf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007be4:	4770      	bx	lr
 8007be6:	4a03      	ldr	r2, [pc, #12]	@ (8007bf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8007be8:	4801      	ldr	r0, [pc, #4]	@ (8007bf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007bea:	6812      	ldr	r2, [r2, #0]
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	4770      	bx	lr
 8007bf0:	20000078 	.word	0x20000078
 8007bf4:	200000b0 	.word	0x200000b0

08007bf8 <_Int32__max_serialized_size>:
 8007bf8:	b508      	push	{r3, lr}
 8007bfa:	2104      	movs	r1, #4
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	f001 f807 	bl	8008c10 <ucdr_alignment>
 8007c02:	3004      	adds	r0, #4
 8007c04:	bd08      	pop	{r3, pc}
 8007c06:	bf00      	nop

08007c08 <_Int32__cdr_deserialize>:
 8007c08:	b109      	cbz	r1, 8007c0e <_Int32__cdr_deserialize+0x6>
 8007c0a:	f000 bf19 	b.w	8008a40 <ucdr_deserialize_int32_t>
 8007c0e:	4608      	mov	r0, r1
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop

08007c14 <get_serialized_size_std_msgs__msg__Int32>:
 8007c14:	b138      	cbz	r0, 8007c26 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8007c16:	b508      	push	{r3, lr}
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	2104      	movs	r1, #4
 8007c1e:	f000 fff7 	bl	8008c10 <ucdr_alignment>
 8007c22:	3004      	adds	r0, #4
 8007c24:	bd08      	pop	{r3, pc}
 8007c26:	4770      	bx	lr

08007c28 <_Int32__cdr_serialize>:
 8007c28:	460a      	mov	r2, r1
 8007c2a:	b118      	cbz	r0, 8007c34 <_Int32__cdr_serialize+0xc>
 8007c2c:	6801      	ldr	r1, [r0, #0]
 8007c2e:	4610      	mov	r0, r2
 8007c30:	f000 be6e 	b.w	8008910 <ucdr_serialize_int32_t>
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop

08007c38 <_Int32__get_serialized_size>:
 8007c38:	b130      	cbz	r0, 8007c48 <_Int32__get_serialized_size+0x10>
 8007c3a:	b508      	push	{r3, lr}
 8007c3c:	2104      	movs	r1, #4
 8007c3e:	2000      	movs	r0, #0
 8007c40:	f000 ffe6 	bl	8008c10 <ucdr_alignment>
 8007c44:	3004      	adds	r0, #4
 8007c46:	bd08      	pop	{r3, pc}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop

08007c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007c4c:	4800      	ldr	r0, [pc, #0]	@ (8007c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8007c4e:	4770      	bx	lr
 8007c50:	20000084 	.word	0x20000084

08007c54 <ucdr_serialize_bool>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	460d      	mov	r5, r1
 8007c58:	2101      	movs	r1, #1
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	f000 ff8c 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007c60:	b148      	cbz	r0, 8007c76 <ucdr_serialize_bool+0x22>
 8007c62:	68a3      	ldr	r3, [r4, #8]
 8007c64:	701d      	strb	r5, [r3, #0]
 8007c66:	68a2      	ldr	r2, [r4, #8]
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	440a      	add	r2, r1
 8007c6e:	440b      	add	r3, r1
 8007c70:	60a2      	str	r2, [r4, #8]
 8007c72:	6123      	str	r3, [r4, #16]
 8007c74:	7561      	strb	r1, [r4, #21]
 8007c76:	7da0      	ldrb	r0, [r4, #22]
 8007c78:	f080 0001 	eor.w	r0, r0, #1
 8007c7c:	bd38      	pop	{r3, r4, r5, pc}
 8007c7e:	bf00      	nop

08007c80 <ucdr_deserialize_bool>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	460d      	mov	r5, r1
 8007c84:	2101      	movs	r1, #1
 8007c86:	4604      	mov	r4, r0
 8007c88:	f000 ff76 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007c8c:	b160      	cbz	r0, 8007ca8 <ucdr_deserialize_bool+0x28>
 8007c8e:	68a2      	ldr	r2, [r4, #8]
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007c96:	3900      	subs	r1, #0
 8007c98:	bf18      	it	ne
 8007c9a:	2101      	movne	r1, #1
 8007c9c:	7029      	strb	r1, [r5, #0]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	60a2      	str	r2, [r4, #8]
 8007ca4:	6123      	str	r3, [r4, #16]
 8007ca6:	7561      	strb	r1, [r4, #21]
 8007ca8:	7da0      	ldrb	r0, [r4, #22]
 8007caa:	f080 0001 	eor.w	r0, r0, #1
 8007cae:	bd38      	pop	{r3, r4, r5, pc}

08007cb0 <ucdr_serialize_uint8_t>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	f000 ff5e 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007cbc:	b148      	cbz	r0, 8007cd2 <ucdr_serialize_uint8_t+0x22>
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	701d      	strb	r5, [r3, #0]
 8007cc2:	68a2      	ldr	r2, [r4, #8]
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	440a      	add	r2, r1
 8007cca:	440b      	add	r3, r1
 8007ccc:	60a2      	str	r2, [r4, #8]
 8007cce:	6123      	str	r3, [r4, #16]
 8007cd0:	7561      	strb	r1, [r4, #21]
 8007cd2:	7da0      	ldrb	r0, [r4, #22]
 8007cd4:	f080 0001 	eor.w	r0, r0, #1
 8007cd8:	bd38      	pop	{r3, r4, r5, pc}
 8007cda:	bf00      	nop

08007cdc <ucdr_deserialize_uint8_t>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	460d      	mov	r5, r1
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	f000 ff48 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007ce8:	b150      	cbz	r0, 8007d00 <ucdr_deserialize_uint8_t+0x24>
 8007cea:	68a3      	ldr	r3, [r4, #8]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	702b      	strb	r3, [r5, #0]
 8007cf0:	68a2      	ldr	r2, [r4, #8]
 8007cf2:	6923      	ldr	r3, [r4, #16]
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	440a      	add	r2, r1
 8007cf8:	440b      	add	r3, r1
 8007cfa:	60a2      	str	r2, [r4, #8]
 8007cfc:	6123      	str	r3, [r4, #16]
 8007cfe:	7561      	strb	r1, [r4, #21]
 8007d00:	7da0      	ldrb	r0, [r4, #22]
 8007d02:	f080 0001 	eor.w	r0, r0, #1
 8007d06:	bd38      	pop	{r3, r4, r5, pc}

08007d08 <ucdr_serialize_uint16_t>:
 8007d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	460b      	mov	r3, r1
 8007d10:	2102      	movs	r1, #2
 8007d12:	4604      	mov	r4, r0
 8007d14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007d18:	f000 ff82 	bl	8008c20 <ucdr_buffer_alignment>
 8007d1c:	4601      	mov	r1, r0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	7d67      	ldrb	r7, [r4, #21]
 8007d22:	f000 ffc1 	bl	8008ca8 <ucdr_advance_buffer>
 8007d26:	2102      	movs	r1, #2
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 ff19 	bl	8008b60 <ucdr_check_buffer_available_for>
 8007d2e:	bb78      	cbnz	r0, 8007d90 <ucdr_serialize_uint16_t+0x88>
 8007d30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007d34:	42ab      	cmp	r3, r5
 8007d36:	d926      	bls.n	8007d86 <ucdr_serialize_uint16_t+0x7e>
 8007d38:	1b5e      	subs	r6, r3, r5
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	f1c6 0802 	rsb	r8, r6, #2
 8007d42:	4433      	add	r3, r6
 8007d44:	6123      	str	r3, [r4, #16]
 8007d46:	4641      	mov	r1, r8
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 ff15 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d03b      	beq.n	8007dca <ucdr_serialize_uint16_t+0xc2>
 8007d52:	7d23      	ldrb	r3, [r4, #20]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d04a      	beq.n	8007dee <ucdr_serialize_uint16_t+0xe6>
 8007d58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007d5c:	702b      	strb	r3, [r5, #0]
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d040      	beq.n	8007de4 <ucdr_serialize_uint16_t+0xdc>
 8007d62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007d66:	706b      	strb	r3, [r5, #1]
 8007d68:	6923      	ldr	r3, [r4, #16]
 8007d6a:	68a2      	ldr	r2, [r4, #8]
 8007d6c:	7da0      	ldrb	r0, [r4, #22]
 8007d6e:	3302      	adds	r3, #2
 8007d70:	1b9e      	subs	r6, r3, r6
 8007d72:	4442      	add	r2, r8
 8007d74:	2302      	movs	r3, #2
 8007d76:	f080 0001 	eor.w	r0, r0, #1
 8007d7a:	60a2      	str	r2, [r4, #8]
 8007d7c:	6126      	str	r6, [r4, #16]
 8007d7e:	7563      	strb	r3, [r4, #21]
 8007d80:	b002      	add	sp, #8
 8007d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d86:	2102      	movs	r1, #2
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fef5 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007d8e:	b190      	cbz	r0, 8007db6 <ucdr_serialize_uint16_t+0xae>
 8007d90:	7d23      	ldrb	r3, [r4, #20]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	68a3      	ldr	r3, [r4, #8]
 8007d96:	d014      	beq.n	8007dc2 <ucdr_serialize_uint16_t+0xba>
 8007d98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	68a3      	ldr	r3, [r4, #8]
 8007da0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007da4:	705a      	strb	r2, [r3, #1]
 8007da6:	68a2      	ldr	r2, [r4, #8]
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	3202      	adds	r2, #2
 8007dac:	3302      	adds	r3, #2
 8007dae:	2102      	movs	r1, #2
 8007db0:	60a2      	str	r2, [r4, #8]
 8007db2:	6123      	str	r3, [r4, #16]
 8007db4:	7561      	strb	r1, [r4, #21]
 8007db6:	7da0      	ldrb	r0, [r4, #22]
 8007db8:	f080 0001 	eor.w	r0, r0, #1
 8007dbc:	b002      	add	sp, #8
 8007dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	e7ed      	b.n	8007da6 <ucdr_serialize_uint16_t+0x9e>
 8007dca:	68a2      	ldr	r2, [r4, #8]
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	7da0      	ldrb	r0, [r4, #22]
 8007dd0:	7567      	strb	r7, [r4, #21]
 8007dd2:	1b92      	subs	r2, r2, r6
 8007dd4:	1b9b      	subs	r3, r3, r6
 8007dd6:	f080 0001 	eor.w	r0, r0, #1
 8007dda:	60a2      	str	r2, [r4, #8]
 8007ddc:	6123      	str	r3, [r4, #16]
 8007dde:	b002      	add	sp, #8
 8007de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de4:	68a3      	ldr	r3, [r4, #8]
 8007de6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007dea:	701a      	strb	r2, [r3, #0]
 8007dec:	e7bc      	b.n	8007d68 <ucdr_serialize_uint16_t+0x60>
 8007dee:	4628      	mov	r0, r5
 8007df0:	f10d 0506 	add.w	r5, sp, #6
 8007df4:	4629      	mov	r1, r5
 8007df6:	4632      	mov	r2, r6
 8007df8:	f008 fad5 	bl	80103a6 <memcpy>
 8007dfc:	68a0      	ldr	r0, [r4, #8]
 8007dfe:	4642      	mov	r2, r8
 8007e00:	19a9      	adds	r1, r5, r6
 8007e02:	f008 fad0 	bl	80103a6 <memcpy>
 8007e06:	e7af      	b.n	8007d68 <ucdr_serialize_uint16_t+0x60>

08007e08 <ucdr_serialize_endian_uint16_t>:
 8007e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	460d      	mov	r5, r1
 8007e10:	2102      	movs	r1, #2
 8007e12:	4604      	mov	r4, r0
 8007e14:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007e18:	f000 ff02 	bl	8008c20 <ucdr_buffer_alignment>
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007e24:	f000 ff40 	bl	8008ca8 <ucdr_advance_buffer>
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 fe98 	bl	8008b60 <ucdr_check_buffer_available_for>
 8007e30:	bb70      	cbnz	r0, 8007e90 <ucdr_serialize_endian_uint16_t+0x88>
 8007e32:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007e36:	42be      	cmp	r6, r7
 8007e38:	d925      	bls.n	8007e86 <ucdr_serialize_endian_uint16_t+0x7e>
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	60a6      	str	r6, [r4, #8]
 8007e3e:	1bf6      	subs	r6, r6, r7
 8007e40:	4433      	add	r3, r6
 8007e42:	f1c6 0902 	rsb	r9, r6, #2
 8007e46:	6123      	str	r3, [r4, #16]
 8007e48:	4649      	mov	r1, r9
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 fe94 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d039      	beq.n	8007ec8 <ucdr_serialize_endian_uint16_t+0xc0>
 8007e54:	2d01      	cmp	r5, #1
 8007e56:	d04a      	beq.n	8007eee <ucdr_serialize_endian_uint16_t+0xe6>
 8007e58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e5c:	703b      	strb	r3, [r7, #0]
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	d040      	beq.n	8007ee4 <ucdr_serialize_endian_uint16_t+0xdc>
 8007e62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e66:	707b      	strb	r3, [r7, #1]
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	68a2      	ldr	r2, [r4, #8]
 8007e6c:	7da0      	ldrb	r0, [r4, #22]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	444a      	add	r2, r9
 8007e72:	1b9b      	subs	r3, r3, r6
 8007e74:	2102      	movs	r1, #2
 8007e76:	f080 0001 	eor.w	r0, r0, #1
 8007e7a:	60a2      	str	r2, [r4, #8]
 8007e7c:	6123      	str	r3, [r4, #16]
 8007e7e:	7561      	strb	r1, [r4, #21]
 8007e80:	b003      	add	sp, #12
 8007e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e86:	2102      	movs	r1, #2
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 fe75 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007e8e:	b188      	cbz	r0, 8007eb4 <ucdr_serialize_endian_uint16_t+0xac>
 8007e90:	2d01      	cmp	r5, #1
 8007e92:	68a3      	ldr	r3, [r4, #8]
 8007e94:	d014      	beq.n	8007ec0 <ucdr_serialize_endian_uint16_t+0xb8>
 8007e96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	68a3      	ldr	r3, [r4, #8]
 8007e9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007ea2:	705a      	strb	r2, [r3, #1]
 8007ea4:	68a2      	ldr	r2, [r4, #8]
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	3202      	adds	r2, #2
 8007eaa:	3302      	adds	r3, #2
 8007eac:	2102      	movs	r1, #2
 8007eae:	60a2      	str	r2, [r4, #8]
 8007eb0:	6123      	str	r3, [r4, #16]
 8007eb2:	7561      	strb	r1, [r4, #21]
 8007eb4:	7da0      	ldrb	r0, [r4, #22]
 8007eb6:	f080 0001 	eor.w	r0, r0, #1
 8007eba:	b003      	add	sp, #12
 8007ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ec0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	e7ed      	b.n	8007ea4 <ucdr_serialize_endian_uint16_t+0x9c>
 8007ec8:	68a2      	ldr	r2, [r4, #8]
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	7da0      	ldrb	r0, [r4, #22]
 8007ece:	f884 8015 	strb.w	r8, [r4, #21]
 8007ed2:	1b92      	subs	r2, r2, r6
 8007ed4:	1b9b      	subs	r3, r3, r6
 8007ed6:	f080 0001 	eor.w	r0, r0, #1
 8007eda:	60a2      	str	r2, [r4, #8]
 8007edc:	6123      	str	r3, [r4, #16]
 8007ede:	b003      	add	sp, #12
 8007ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ee4:	68a3      	ldr	r3, [r4, #8]
 8007ee6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	e7bc      	b.n	8007e68 <ucdr_serialize_endian_uint16_t+0x60>
 8007eee:	f10d 0506 	add.w	r5, sp, #6
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	f008 fa55 	bl	80103a6 <memcpy>
 8007efc:	68a0      	ldr	r0, [r4, #8]
 8007efe:	464a      	mov	r2, r9
 8007f00:	19a9      	adds	r1, r5, r6
 8007f02:	f008 fa50 	bl	80103a6 <memcpy>
 8007f06:	e7af      	b.n	8007e68 <ucdr_serialize_endian_uint16_t+0x60>

08007f08 <ucdr_deserialize_uint16_t>:
 8007f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	2102      	movs	r1, #2
 8007f10:	4604      	mov	r4, r0
 8007f12:	f000 fe85 	bl	8008c20 <ucdr_buffer_alignment>
 8007f16:	4601      	mov	r1, r0
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007f1e:	f000 fec3 	bl	8008ca8 <ucdr_advance_buffer>
 8007f22:	2102      	movs	r1, #2
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fe1b 	bl	8008b60 <ucdr_check_buffer_available_for>
 8007f2a:	bb60      	cbnz	r0, 8007f86 <ucdr_deserialize_uint16_t+0x7e>
 8007f2c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007f30:	42be      	cmp	r6, r7
 8007f32:	d923      	bls.n	8007f7c <ucdr_deserialize_uint16_t+0x74>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	60a6      	str	r6, [r4, #8]
 8007f38:	1bf6      	subs	r6, r6, r7
 8007f3a:	4433      	add	r3, r6
 8007f3c:	f1c6 0902 	rsb	r9, r6, #2
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	4649      	mov	r1, r9
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 fe17 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d034      	beq.n	8007fb8 <ucdr_deserialize_uint16_t+0xb0>
 8007f4e:	7d23      	ldrb	r3, [r4, #20]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d042      	beq.n	8007fda <ucdr_deserialize_uint16_t+0xd2>
 8007f54:	787b      	ldrb	r3, [r7, #1]
 8007f56:	702b      	strb	r3, [r5, #0]
 8007f58:	2e00      	cmp	r6, #0
 8007f5a:	d03a      	beq.n	8007fd2 <ucdr_deserialize_uint16_t+0xca>
 8007f5c:	783b      	ldrb	r3, [r7, #0]
 8007f5e:	706b      	strb	r3, [r5, #1]
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	68a2      	ldr	r2, [r4, #8]
 8007f64:	7da0      	ldrb	r0, [r4, #22]
 8007f66:	2102      	movs	r1, #2
 8007f68:	3302      	adds	r3, #2
 8007f6a:	444a      	add	r2, r9
 8007f6c:	1b9b      	subs	r3, r3, r6
 8007f6e:	7561      	strb	r1, [r4, #21]
 8007f70:	60a2      	str	r2, [r4, #8]
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	f080 0001 	eor.w	r0, r0, #1
 8007f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 fdfa 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8007f84:	b180      	cbz	r0, 8007fa8 <ucdr_deserialize_uint16_t+0xa0>
 8007f86:	7d23      	ldrb	r3, [r4, #20]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	68a3      	ldr	r3, [r4, #8]
 8007f8c:	d011      	beq.n	8007fb2 <ucdr_deserialize_uint16_t+0xaa>
 8007f8e:	785b      	ldrb	r3, [r3, #1]
 8007f90:	702b      	strb	r3, [r5, #0]
 8007f92:	68a3      	ldr	r3, [r4, #8]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	706b      	strb	r3, [r5, #1]
 8007f98:	68a2      	ldr	r2, [r4, #8]
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	3202      	adds	r2, #2
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	2102      	movs	r1, #2
 8007fa2:	60a2      	str	r2, [r4, #8]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	7561      	strb	r1, [r4, #21]
 8007fa8:	7da0      	ldrb	r0, [r4, #22]
 8007faa:	f080 0001 	eor.w	r0, r0, #1
 8007fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	802b      	strh	r3, [r5, #0]
 8007fb6:	e7ef      	b.n	8007f98 <ucdr_deserialize_uint16_t+0x90>
 8007fb8:	68a2      	ldr	r2, [r4, #8]
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	7da0      	ldrb	r0, [r4, #22]
 8007fbe:	f884 8015 	strb.w	r8, [r4, #21]
 8007fc2:	1b92      	subs	r2, r2, r6
 8007fc4:	1b9b      	subs	r3, r3, r6
 8007fc6:	60a2      	str	r2, [r4, #8]
 8007fc8:	6123      	str	r3, [r4, #16]
 8007fca:	f080 0001 	eor.w	r0, r0, #1
 8007fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	706b      	strb	r3, [r5, #1]
 8007fd8:	e7c2      	b.n	8007f60 <ucdr_deserialize_uint16_t+0x58>
 8007fda:	4639      	mov	r1, r7
 8007fdc:	4632      	mov	r2, r6
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f008 f9e1 	bl	80103a6 <memcpy>
 8007fe4:	68a1      	ldr	r1, [r4, #8]
 8007fe6:	464a      	mov	r2, r9
 8007fe8:	19a8      	adds	r0, r5, r6
 8007fea:	f008 f9dc 	bl	80103a6 <memcpy>
 8007fee:	e7b7      	b.n	8007f60 <ucdr_deserialize_uint16_t+0x58>

08007ff0 <ucdr_deserialize_endian_uint16_t>:
 8007ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	460e      	mov	r6, r1
 8007ff6:	2102      	movs	r1, #2
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4615      	mov	r5, r2
 8007ffc:	f000 fe10 	bl	8008c20 <ucdr_buffer_alignment>
 8008000:	4601      	mov	r1, r0
 8008002:	4620      	mov	r0, r4
 8008004:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008008:	f000 fe4e 	bl	8008ca8 <ucdr_advance_buffer>
 800800c:	2102      	movs	r1, #2
 800800e:	4620      	mov	r0, r4
 8008010:	f000 fda6 	bl	8008b60 <ucdr_check_buffer_available_for>
 8008014:	bb70      	cbnz	r0, 8008074 <ucdr_deserialize_endian_uint16_t+0x84>
 8008016:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800801a:	4547      	cmp	r7, r8
 800801c:	d925      	bls.n	800806a <ucdr_deserialize_endian_uint16_t+0x7a>
 800801e:	6923      	ldr	r3, [r4, #16]
 8008020:	60a7      	str	r7, [r4, #8]
 8008022:	eba7 0708 	sub.w	r7, r7, r8
 8008026:	443b      	add	r3, r7
 8008028:	f1c7 0a02 	rsb	sl, r7, #2
 800802c:	6123      	str	r3, [r4, #16]
 800802e:	4651      	mov	r1, sl
 8008030:	4620      	mov	r0, r4
 8008032:	f000 fda1 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8008036:	2800      	cmp	r0, #0
 8008038:	d034      	beq.n	80080a4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800803a:	2e01      	cmp	r6, #1
 800803c:	d043      	beq.n	80080c6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800803e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008042:	702b      	strb	r3, [r5, #0]
 8008044:	2f00      	cmp	r7, #0
 8008046:	d03a      	beq.n	80080be <ucdr_deserialize_endian_uint16_t+0xce>
 8008048:	f898 3000 	ldrb.w	r3, [r8]
 800804c:	706b      	strb	r3, [r5, #1]
 800804e:	6923      	ldr	r3, [r4, #16]
 8008050:	68a2      	ldr	r2, [r4, #8]
 8008052:	7da0      	ldrb	r0, [r4, #22]
 8008054:	2102      	movs	r1, #2
 8008056:	3302      	adds	r3, #2
 8008058:	4452      	add	r2, sl
 800805a:	1bdb      	subs	r3, r3, r7
 800805c:	7561      	strb	r1, [r4, #21]
 800805e:	60a2      	str	r2, [r4, #8]
 8008060:	6123      	str	r3, [r4, #16]
 8008062:	f080 0001 	eor.w	r0, r0, #1
 8008066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806a:	2102      	movs	r1, #2
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fd83 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8008072:	b178      	cbz	r0, 8008094 <ucdr_deserialize_endian_uint16_t+0xa4>
 8008074:	2e01      	cmp	r6, #1
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	d011      	beq.n	800809e <ucdr_deserialize_endian_uint16_t+0xae>
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	702b      	strb	r3, [r5, #0]
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	706b      	strb	r3, [r5, #1]
 8008084:	68a2      	ldr	r2, [r4, #8]
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	3202      	adds	r2, #2
 800808a:	3302      	adds	r3, #2
 800808c:	2102      	movs	r1, #2
 800808e:	60a2      	str	r2, [r4, #8]
 8008090:	6123      	str	r3, [r4, #16]
 8008092:	7561      	strb	r1, [r4, #21]
 8008094:	7da0      	ldrb	r0, [r4, #22]
 8008096:	f080 0001 	eor.w	r0, r0, #1
 800809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	802b      	strh	r3, [r5, #0]
 80080a2:	e7ef      	b.n	8008084 <ucdr_deserialize_endian_uint16_t+0x94>
 80080a4:	68a2      	ldr	r2, [r4, #8]
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	7da0      	ldrb	r0, [r4, #22]
 80080aa:	f884 9015 	strb.w	r9, [r4, #21]
 80080ae:	1bd2      	subs	r2, r2, r7
 80080b0:	1bdb      	subs	r3, r3, r7
 80080b2:	60a2      	str	r2, [r4, #8]
 80080b4:	6123      	str	r3, [r4, #16]
 80080b6:	f080 0001 	eor.w	r0, r0, #1
 80080ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080be:	68a3      	ldr	r3, [r4, #8]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	706b      	strb	r3, [r5, #1]
 80080c4:	e7c3      	b.n	800804e <ucdr_deserialize_endian_uint16_t+0x5e>
 80080c6:	4641      	mov	r1, r8
 80080c8:	463a      	mov	r2, r7
 80080ca:	4628      	mov	r0, r5
 80080cc:	f008 f96b 	bl	80103a6 <memcpy>
 80080d0:	68a1      	ldr	r1, [r4, #8]
 80080d2:	4652      	mov	r2, sl
 80080d4:	19e8      	adds	r0, r5, r7
 80080d6:	f008 f966 	bl	80103a6 <memcpy>
 80080da:	e7b8      	b.n	800804e <ucdr_deserialize_endian_uint16_t+0x5e>

080080dc <ucdr_serialize_uint32_t>:
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	4604      	mov	r4, r0
 80080e4:	9101      	str	r1, [sp, #4]
 80080e6:	2104      	movs	r1, #4
 80080e8:	f000 fd9a 	bl	8008c20 <ucdr_buffer_alignment>
 80080ec:	4601      	mov	r1, r0
 80080ee:	4620      	mov	r0, r4
 80080f0:	7d67      	ldrb	r7, [r4, #21]
 80080f2:	f000 fdd9 	bl	8008ca8 <ucdr_advance_buffer>
 80080f6:	2104      	movs	r1, #4
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fd31 	bl	8008b60 <ucdr_check_buffer_available_for>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d139      	bne.n	8008176 <ucdr_serialize_uint32_t+0x9a>
 8008102:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008106:	42ab      	cmp	r3, r5
 8008108:	d930      	bls.n	800816c <ucdr_serialize_uint32_t+0x90>
 800810a:	1b5e      	subs	r6, r3, r5
 800810c:	60a3      	str	r3, [r4, #8]
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	f1c6 0804 	rsb	r8, r6, #4
 8008114:	4433      	add	r3, r6
 8008116:	6123      	str	r3, [r4, #16]
 8008118:	4641      	mov	r1, r8
 800811a:	4620      	mov	r0, r4
 800811c:	f000 fd2c 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8008120:	2800      	cmp	r0, #0
 8008122:	d04c      	beq.n	80081be <ucdr_serialize_uint32_t+0xe2>
 8008124:	7d23      	ldrb	r3, [r4, #20]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d063      	beq.n	80081f2 <ucdr_serialize_uint32_t+0x116>
 800812a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800812e:	702b      	strb	r3, [r5, #0]
 8008130:	2e00      	cmp	r6, #0
 8008132:	d051      	beq.n	80081d8 <ucdr_serialize_uint32_t+0xfc>
 8008134:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008138:	706b      	strb	r3, [r5, #1]
 800813a:	2e01      	cmp	r6, #1
 800813c:	d050      	beq.n	80081e0 <ucdr_serialize_uint32_t+0x104>
 800813e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008142:	70ab      	strb	r3, [r5, #2]
 8008144:	2e02      	cmp	r6, #2
 8008146:	d04f      	beq.n	80081e8 <ucdr_serialize_uint32_t+0x10c>
 8008148:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800814c:	70eb      	strb	r3, [r5, #3]
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	68a2      	ldr	r2, [r4, #8]
 8008152:	7da0      	ldrb	r0, [r4, #22]
 8008154:	3304      	adds	r3, #4
 8008156:	1b9e      	subs	r6, r3, r6
 8008158:	4442      	add	r2, r8
 800815a:	2304      	movs	r3, #4
 800815c:	f080 0001 	eor.w	r0, r0, #1
 8008160:	60a2      	str	r2, [r4, #8]
 8008162:	6126      	str	r6, [r4, #16]
 8008164:	7563      	strb	r3, [r4, #21]
 8008166:	b002      	add	sp, #8
 8008168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800816c:	2104      	movs	r1, #4
 800816e:	4620      	mov	r0, r4
 8008170:	f000 fd02 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8008174:	b1d0      	cbz	r0, 80081ac <ucdr_serialize_uint32_t+0xd0>
 8008176:	7d23      	ldrb	r3, [r4, #20]
 8008178:	2b01      	cmp	r3, #1
 800817a:	68a3      	ldr	r3, [r4, #8]
 800817c:	d01c      	beq.n	80081b8 <ucdr_serialize_uint32_t+0xdc>
 800817e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008182:	701a      	strb	r2, [r3, #0]
 8008184:	68a3      	ldr	r3, [r4, #8]
 8008186:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800818a:	705a      	strb	r2, [r3, #1]
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008192:	709a      	strb	r2, [r3, #2]
 8008194:	68a3      	ldr	r3, [r4, #8]
 8008196:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800819a:	70da      	strb	r2, [r3, #3]
 800819c:	68a2      	ldr	r2, [r4, #8]
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	3204      	adds	r2, #4
 80081a2:	3304      	adds	r3, #4
 80081a4:	2104      	movs	r1, #4
 80081a6:	60a2      	str	r2, [r4, #8]
 80081a8:	6123      	str	r3, [r4, #16]
 80081aa:	7561      	strb	r1, [r4, #21]
 80081ac:	7da0      	ldrb	r0, [r4, #22]
 80081ae:	f080 0001 	eor.w	r0, r0, #1
 80081b2:	b002      	add	sp, #8
 80081b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b8:	9a01      	ldr	r2, [sp, #4]
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	e7ee      	b.n	800819c <ucdr_serialize_uint32_t+0xc0>
 80081be:	68a2      	ldr	r2, [r4, #8]
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	7da0      	ldrb	r0, [r4, #22]
 80081c4:	7567      	strb	r7, [r4, #21]
 80081c6:	1b92      	subs	r2, r2, r6
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	f080 0001 	eor.w	r0, r0, #1
 80081ce:	60a2      	str	r2, [r4, #8]
 80081d0:	6123      	str	r3, [r4, #16]
 80081d2:	b002      	add	sp, #8
 80081d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d8:	68a3      	ldr	r3, [r4, #8]
 80081da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80081de:	701a      	strb	r2, [r3, #0]
 80081e0:	68a3      	ldr	r3, [r4, #8]
 80081e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80081ee:	701a      	strb	r2, [r3, #0]
 80081f0:	e7ad      	b.n	800814e <ucdr_serialize_uint32_t+0x72>
 80081f2:	4628      	mov	r0, r5
 80081f4:	ad01      	add	r5, sp, #4
 80081f6:	4629      	mov	r1, r5
 80081f8:	4632      	mov	r2, r6
 80081fa:	f008 f8d4 	bl	80103a6 <memcpy>
 80081fe:	68a0      	ldr	r0, [r4, #8]
 8008200:	4642      	mov	r2, r8
 8008202:	19a9      	adds	r1, r5, r6
 8008204:	f008 f8cf 	bl	80103a6 <memcpy>
 8008208:	e7a1      	b.n	800814e <ucdr_serialize_uint32_t+0x72>
 800820a:	bf00      	nop

0800820c <ucdr_serialize_endian_uint32_t>:
 800820c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008210:	b083      	sub	sp, #12
 8008212:	460d      	mov	r5, r1
 8008214:	2104      	movs	r1, #4
 8008216:	4604      	mov	r4, r0
 8008218:	9201      	str	r2, [sp, #4]
 800821a:	f000 fd01 	bl	8008c20 <ucdr_buffer_alignment>
 800821e:	4601      	mov	r1, r0
 8008220:	4620      	mov	r0, r4
 8008222:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008226:	f000 fd3f 	bl	8008ca8 <ucdr_advance_buffer>
 800822a:	2104      	movs	r1, #4
 800822c:	4620      	mov	r0, r4
 800822e:	f000 fc97 	bl	8008b60 <ucdr_check_buffer_available_for>
 8008232:	2800      	cmp	r0, #0
 8008234:	d138      	bne.n	80082a8 <ucdr_serialize_endian_uint32_t+0x9c>
 8008236:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800823a:	42b7      	cmp	r7, r6
 800823c:	d92f      	bls.n	800829e <ucdr_serialize_endian_uint32_t+0x92>
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	60a7      	str	r7, [r4, #8]
 8008242:	1bbf      	subs	r7, r7, r6
 8008244:	443b      	add	r3, r7
 8008246:	f1c7 0904 	rsb	r9, r7, #4
 800824a:	6123      	str	r3, [r4, #16]
 800824c:	4649      	mov	r1, r9
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fc92 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8008254:	2800      	cmp	r0, #0
 8008256:	d04a      	beq.n	80082ee <ucdr_serialize_endian_uint32_t+0xe2>
 8008258:	2d01      	cmp	r5, #1
 800825a:	d063      	beq.n	8008324 <ucdr_serialize_endian_uint32_t+0x118>
 800825c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008260:	7033      	strb	r3, [r6, #0]
 8008262:	2f00      	cmp	r7, #0
 8008264:	d051      	beq.n	800830a <ucdr_serialize_endian_uint32_t+0xfe>
 8008266:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800826a:	7073      	strb	r3, [r6, #1]
 800826c:	2f01      	cmp	r7, #1
 800826e:	d050      	beq.n	8008312 <ucdr_serialize_endian_uint32_t+0x106>
 8008270:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008274:	70b3      	strb	r3, [r6, #2]
 8008276:	2f02      	cmp	r7, #2
 8008278:	d04f      	beq.n	800831a <ucdr_serialize_endian_uint32_t+0x10e>
 800827a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800827e:	70f3      	strb	r3, [r6, #3]
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	68a2      	ldr	r2, [r4, #8]
 8008284:	7da0      	ldrb	r0, [r4, #22]
 8008286:	3304      	adds	r3, #4
 8008288:	444a      	add	r2, r9
 800828a:	1bdb      	subs	r3, r3, r7
 800828c:	2104      	movs	r1, #4
 800828e:	f080 0001 	eor.w	r0, r0, #1
 8008292:	60a2      	str	r2, [r4, #8]
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	7561      	strb	r1, [r4, #21]
 8008298:	b003      	add	sp, #12
 800829a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800829e:	2104      	movs	r1, #4
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 fc69 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 80082a6:	b1c8      	cbz	r0, 80082dc <ucdr_serialize_endian_uint32_t+0xd0>
 80082a8:	2d01      	cmp	r5, #1
 80082aa:	68a3      	ldr	r3, [r4, #8]
 80082ac:	d01c      	beq.n	80082e8 <ucdr_serialize_endian_uint32_t+0xdc>
 80082ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	68a3      	ldr	r3, [r4, #8]
 80082b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80082ba:	705a      	strb	r2, [r3, #1]
 80082bc:	68a3      	ldr	r3, [r4, #8]
 80082be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80082c2:	709a      	strb	r2, [r3, #2]
 80082c4:	68a3      	ldr	r3, [r4, #8]
 80082c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80082ca:	70da      	strb	r2, [r3, #3]
 80082cc:	68a2      	ldr	r2, [r4, #8]
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	3204      	adds	r2, #4
 80082d2:	3304      	adds	r3, #4
 80082d4:	2104      	movs	r1, #4
 80082d6:	60a2      	str	r2, [r4, #8]
 80082d8:	6123      	str	r3, [r4, #16]
 80082da:	7561      	strb	r1, [r4, #21]
 80082dc:	7da0      	ldrb	r0, [r4, #22]
 80082de:	f080 0001 	eor.w	r0, r0, #1
 80082e2:	b003      	add	sp, #12
 80082e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e8:	9a01      	ldr	r2, [sp, #4]
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	e7ee      	b.n	80082cc <ucdr_serialize_endian_uint32_t+0xc0>
 80082ee:	68a2      	ldr	r2, [r4, #8]
 80082f0:	6923      	ldr	r3, [r4, #16]
 80082f2:	7da0      	ldrb	r0, [r4, #22]
 80082f4:	f884 8015 	strb.w	r8, [r4, #21]
 80082f8:	1bd2      	subs	r2, r2, r7
 80082fa:	1bdb      	subs	r3, r3, r7
 80082fc:	f080 0001 	eor.w	r0, r0, #1
 8008300:	60a2      	str	r2, [r4, #8]
 8008302:	6123      	str	r3, [r4, #16]
 8008304:	b003      	add	sp, #12
 8008306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008310:	701a      	strb	r2, [r3, #0]
 8008312:	68a3      	ldr	r3, [r4, #8]
 8008314:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	e7ad      	b.n	8008280 <ucdr_serialize_endian_uint32_t+0x74>
 8008324:	ad01      	add	r5, sp, #4
 8008326:	4629      	mov	r1, r5
 8008328:	463a      	mov	r2, r7
 800832a:	4630      	mov	r0, r6
 800832c:	f008 f83b 	bl	80103a6 <memcpy>
 8008330:	68a0      	ldr	r0, [r4, #8]
 8008332:	464a      	mov	r2, r9
 8008334:	19e9      	adds	r1, r5, r7
 8008336:	f008 f836 	bl	80103a6 <memcpy>
 800833a:	e7a1      	b.n	8008280 <ucdr_serialize_endian_uint32_t+0x74>

0800833c <ucdr_deserialize_uint32_t>:
 800833c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008340:	460d      	mov	r5, r1
 8008342:	2104      	movs	r1, #4
 8008344:	4604      	mov	r4, r0
 8008346:	f000 fc6b 	bl	8008c20 <ucdr_buffer_alignment>
 800834a:	4601      	mov	r1, r0
 800834c:	4620      	mov	r0, r4
 800834e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008352:	f000 fca9 	bl	8008ca8 <ucdr_advance_buffer>
 8008356:	2104      	movs	r1, #4
 8008358:	4620      	mov	r0, r4
 800835a:	f000 fc01 	bl	8008b60 <ucdr_check_buffer_available_for>
 800835e:	2800      	cmp	r0, #0
 8008360:	d138      	bne.n	80083d4 <ucdr_deserialize_uint32_t+0x98>
 8008362:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008366:	42b7      	cmp	r7, r6
 8008368:	d92f      	bls.n	80083ca <ucdr_deserialize_uint32_t+0x8e>
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	60a7      	str	r7, [r4, #8]
 800836e:	1bbf      	subs	r7, r7, r6
 8008370:	443b      	add	r3, r7
 8008372:	f1c7 0904 	rsb	r9, r7, #4
 8008376:	6123      	str	r3, [r4, #16]
 8008378:	4649      	mov	r1, r9
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fbfc 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8008380:	2800      	cmp	r0, #0
 8008382:	d046      	beq.n	8008412 <ucdr_deserialize_uint32_t+0xd6>
 8008384:	7d23      	ldrb	r3, [r4, #20]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d05c      	beq.n	8008444 <ucdr_deserialize_uint32_t+0x108>
 800838a:	78f3      	ldrb	r3, [r6, #3]
 800838c:	702b      	strb	r3, [r5, #0]
 800838e:	2f00      	cmp	r7, #0
 8008390:	d04c      	beq.n	800842c <ucdr_deserialize_uint32_t+0xf0>
 8008392:	78b3      	ldrb	r3, [r6, #2]
 8008394:	706b      	strb	r3, [r5, #1]
 8008396:	2f01      	cmp	r7, #1
 8008398:	f105 0302 	add.w	r3, r5, #2
 800839c:	d04a      	beq.n	8008434 <ucdr_deserialize_uint32_t+0xf8>
 800839e:	7873      	ldrb	r3, [r6, #1]
 80083a0:	70ab      	strb	r3, [r5, #2]
 80083a2:	2f02      	cmp	r7, #2
 80083a4:	f105 0303 	add.w	r3, r5, #3
 80083a8:	d048      	beq.n	800843c <ucdr_deserialize_uint32_t+0x100>
 80083aa:	7833      	ldrb	r3, [r6, #0]
 80083ac:	70eb      	strb	r3, [r5, #3]
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	68a2      	ldr	r2, [r4, #8]
 80083b2:	7da0      	ldrb	r0, [r4, #22]
 80083b4:	2104      	movs	r1, #4
 80083b6:	3304      	adds	r3, #4
 80083b8:	444a      	add	r2, r9
 80083ba:	1bdb      	subs	r3, r3, r7
 80083bc:	7561      	strb	r1, [r4, #21]
 80083be:	60a2      	str	r2, [r4, #8]
 80083c0:	6123      	str	r3, [r4, #16]
 80083c2:	f080 0001 	eor.w	r0, r0, #1
 80083c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ca:	2104      	movs	r1, #4
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 fbd3 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 80083d2:	b1b0      	cbz	r0, 8008402 <ucdr_deserialize_uint32_t+0xc6>
 80083d4:	7d23      	ldrb	r3, [r4, #20]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	68a3      	ldr	r3, [r4, #8]
 80083da:	d017      	beq.n	800840c <ucdr_deserialize_uint32_t+0xd0>
 80083dc:	78db      	ldrb	r3, [r3, #3]
 80083de:	702b      	strb	r3, [r5, #0]
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	789b      	ldrb	r3, [r3, #2]
 80083e4:	706b      	strb	r3, [r5, #1]
 80083e6:	68a3      	ldr	r3, [r4, #8]
 80083e8:	785b      	ldrb	r3, [r3, #1]
 80083ea:	70ab      	strb	r3, [r5, #2]
 80083ec:	68a3      	ldr	r3, [r4, #8]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	70eb      	strb	r3, [r5, #3]
 80083f2:	68a2      	ldr	r2, [r4, #8]
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	3204      	adds	r2, #4
 80083f8:	3304      	adds	r3, #4
 80083fa:	2104      	movs	r1, #4
 80083fc:	60a2      	str	r2, [r4, #8]
 80083fe:	6123      	str	r3, [r4, #16]
 8008400:	7561      	strb	r1, [r4, #21]
 8008402:	7da0      	ldrb	r0, [r4, #22]
 8008404:	f080 0001 	eor.w	r0, r0, #1
 8008408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	602b      	str	r3, [r5, #0]
 8008410:	e7ef      	b.n	80083f2 <ucdr_deserialize_uint32_t+0xb6>
 8008412:	68a2      	ldr	r2, [r4, #8]
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	7da0      	ldrb	r0, [r4, #22]
 8008418:	f884 8015 	strb.w	r8, [r4, #21]
 800841c:	1bd2      	subs	r2, r2, r7
 800841e:	1bdb      	subs	r3, r3, r7
 8008420:	60a2      	str	r2, [r4, #8]
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	f080 0001 	eor.w	r0, r0, #1
 8008428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842c:	68a3      	ldr	r3, [r4, #8]
 800842e:	789b      	ldrb	r3, [r3, #2]
 8008430:	706b      	strb	r3, [r5, #1]
 8008432:	1cab      	adds	r3, r5, #2
 8008434:	68a2      	ldr	r2, [r4, #8]
 8008436:	7852      	ldrb	r2, [r2, #1]
 8008438:	f803 2b01 	strb.w	r2, [r3], #1
 800843c:	68a2      	ldr	r2, [r4, #8]
 800843e:	7812      	ldrb	r2, [r2, #0]
 8008440:	701a      	strb	r2, [r3, #0]
 8008442:	e7b4      	b.n	80083ae <ucdr_deserialize_uint32_t+0x72>
 8008444:	4631      	mov	r1, r6
 8008446:	463a      	mov	r2, r7
 8008448:	4628      	mov	r0, r5
 800844a:	f007 ffac 	bl	80103a6 <memcpy>
 800844e:	68a1      	ldr	r1, [r4, #8]
 8008450:	464a      	mov	r2, r9
 8008452:	19e8      	adds	r0, r5, r7
 8008454:	f007 ffa7 	bl	80103a6 <memcpy>
 8008458:	e7a9      	b.n	80083ae <ucdr_deserialize_uint32_t+0x72>
 800845a:	bf00      	nop

0800845c <ucdr_deserialize_endian_uint32_t>:
 800845c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	460e      	mov	r6, r1
 8008462:	2104      	movs	r1, #4
 8008464:	4604      	mov	r4, r0
 8008466:	4615      	mov	r5, r2
 8008468:	f000 fbda 	bl	8008c20 <ucdr_buffer_alignment>
 800846c:	4601      	mov	r1, r0
 800846e:	4620      	mov	r0, r4
 8008470:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008474:	f000 fc18 	bl	8008ca8 <ucdr_advance_buffer>
 8008478:	2104      	movs	r1, #4
 800847a:	4620      	mov	r0, r4
 800847c:	f000 fb70 	bl	8008b60 <ucdr_check_buffer_available_for>
 8008480:	2800      	cmp	r0, #0
 8008482:	d13c      	bne.n	80084fe <ucdr_deserialize_endian_uint32_t+0xa2>
 8008484:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8008488:	42bb      	cmp	r3, r7
 800848a:	d933      	bls.n	80084f4 <ucdr_deserialize_endian_uint32_t+0x98>
 800848c:	eba3 0807 	sub.w	r8, r3, r7
 8008490:	60a3      	str	r3, [r4, #8]
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	f1c8 0a04 	rsb	sl, r8, #4
 8008498:	4443      	add	r3, r8
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	4651      	mov	r1, sl
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 fb6a 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d048      	beq.n	800853a <ucdr_deserialize_endian_uint32_t+0xde>
 80084a8:	2e01      	cmp	r6, #1
 80084aa:	d061      	beq.n	8008570 <ucdr_deserialize_endian_uint32_t+0x114>
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	702b      	strb	r3, [r5, #0]
 80084b0:	f1b8 0f00 	cmp.w	r8, #0
 80084b4:	d050      	beq.n	8008558 <ucdr_deserialize_endian_uint32_t+0xfc>
 80084b6:	78bb      	ldrb	r3, [r7, #2]
 80084b8:	706b      	strb	r3, [r5, #1]
 80084ba:	f1b8 0f01 	cmp.w	r8, #1
 80084be:	f105 0302 	add.w	r3, r5, #2
 80084c2:	d04d      	beq.n	8008560 <ucdr_deserialize_endian_uint32_t+0x104>
 80084c4:	787b      	ldrb	r3, [r7, #1]
 80084c6:	70ab      	strb	r3, [r5, #2]
 80084c8:	f1b8 0f02 	cmp.w	r8, #2
 80084cc:	f105 0303 	add.w	r3, r5, #3
 80084d0:	d04a      	beq.n	8008568 <ucdr_deserialize_endian_uint32_t+0x10c>
 80084d2:	783b      	ldrb	r3, [r7, #0]
 80084d4:	70eb      	strb	r3, [r5, #3]
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	68a2      	ldr	r2, [r4, #8]
 80084da:	7da0      	ldrb	r0, [r4, #22]
 80084dc:	2104      	movs	r1, #4
 80084de:	3304      	adds	r3, #4
 80084e0:	4452      	add	r2, sl
 80084e2:	eba3 0308 	sub.w	r3, r3, r8
 80084e6:	7561      	strb	r1, [r4, #21]
 80084e8:	60a2      	str	r2, [r4, #8]
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	f080 0001 	eor.w	r0, r0, #1
 80084f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f4:	2104      	movs	r1, #4
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fb3e 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 80084fc:	b1a8      	cbz	r0, 800852a <ucdr_deserialize_endian_uint32_t+0xce>
 80084fe:	2e01      	cmp	r6, #1
 8008500:	68a3      	ldr	r3, [r4, #8]
 8008502:	d017      	beq.n	8008534 <ucdr_deserialize_endian_uint32_t+0xd8>
 8008504:	78db      	ldrb	r3, [r3, #3]
 8008506:	702b      	strb	r3, [r5, #0]
 8008508:	68a3      	ldr	r3, [r4, #8]
 800850a:	789b      	ldrb	r3, [r3, #2]
 800850c:	706b      	strb	r3, [r5, #1]
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	70ab      	strb	r3, [r5, #2]
 8008514:	68a3      	ldr	r3, [r4, #8]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	70eb      	strb	r3, [r5, #3]
 800851a:	68a2      	ldr	r2, [r4, #8]
 800851c:	6923      	ldr	r3, [r4, #16]
 800851e:	3204      	adds	r2, #4
 8008520:	3304      	adds	r3, #4
 8008522:	2104      	movs	r1, #4
 8008524:	60a2      	str	r2, [r4, #8]
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	7561      	strb	r1, [r4, #21]
 800852a:	7da0      	ldrb	r0, [r4, #22]
 800852c:	f080 0001 	eor.w	r0, r0, #1
 8008530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	e7ef      	b.n	800851a <ucdr_deserialize_endian_uint32_t+0xbe>
 800853a:	68a2      	ldr	r2, [r4, #8]
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	7da0      	ldrb	r0, [r4, #22]
 8008540:	f884 9015 	strb.w	r9, [r4, #21]
 8008544:	eba2 0208 	sub.w	r2, r2, r8
 8008548:	eba3 0308 	sub.w	r3, r3, r8
 800854c:	60a2      	str	r2, [r4, #8]
 800854e:	6123      	str	r3, [r4, #16]
 8008550:	f080 0001 	eor.w	r0, r0, #1
 8008554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	789b      	ldrb	r3, [r3, #2]
 800855c:	706b      	strb	r3, [r5, #1]
 800855e:	1cab      	adds	r3, r5, #2
 8008560:	68a2      	ldr	r2, [r4, #8]
 8008562:	7852      	ldrb	r2, [r2, #1]
 8008564:	f803 2b01 	strb.w	r2, [r3], #1
 8008568:	68a2      	ldr	r2, [r4, #8]
 800856a:	7812      	ldrb	r2, [r2, #0]
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	e7b2      	b.n	80084d6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8008570:	4639      	mov	r1, r7
 8008572:	4642      	mov	r2, r8
 8008574:	4628      	mov	r0, r5
 8008576:	f007 ff16 	bl	80103a6 <memcpy>
 800857a:	68a1      	ldr	r1, [r4, #8]
 800857c:	4652      	mov	r2, sl
 800857e:	eb05 0008 	add.w	r0, r5, r8
 8008582:	f007 ff10 	bl	80103a6 <memcpy>
 8008586:	e7a6      	b.n	80084d6 <ucdr_deserialize_endian_uint32_t+0x7a>

08008588 <ucdr_serialize_uint64_t>:
 8008588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	2108      	movs	r1, #8
 800858e:	b082      	sub	sp, #8
 8008590:	4604      	mov	r4, r0
 8008592:	e9cd 2300 	strd	r2, r3, [sp]
 8008596:	f000 fb43 	bl	8008c20 <ucdr_buffer_alignment>
 800859a:	4601      	mov	r1, r0
 800859c:	4620      	mov	r0, r4
 800859e:	7d67      	ldrb	r7, [r4, #21]
 80085a0:	f000 fb82 	bl	8008ca8 <ucdr_advance_buffer>
 80085a4:	2108      	movs	r1, #8
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 fada 	bl	8008b60 <ucdr_check_buffer_available_for>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d14e      	bne.n	800864e <ucdr_serialize_uint64_t+0xc6>
 80085b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80085b4:	42ab      	cmp	r3, r5
 80085b6:	d945      	bls.n	8008644 <ucdr_serialize_uint64_t+0xbc>
 80085b8:	1b5e      	subs	r6, r3, r5
 80085ba:	60a3      	str	r3, [r4, #8]
 80085bc:	6923      	ldr	r3, [r4, #16]
 80085be:	f1c6 0808 	rsb	r8, r6, #8
 80085c2:	4433      	add	r3, r6
 80085c4:	6123      	str	r3, [r4, #16]
 80085c6:	4641      	mov	r1, r8
 80085c8:	4620      	mov	r0, r4
 80085ca:	f000 fad5 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d074      	beq.n	80086bc <ucdr_serialize_uint64_t+0x134>
 80085d2:	7d23      	ldrb	r3, [r4, #20]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	f000 809b 	beq.w	8008710 <ucdr_serialize_uint64_t+0x188>
 80085da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80085de:	702b      	strb	r3, [r5, #0]
 80085e0:	2e00      	cmp	r6, #0
 80085e2:	d078      	beq.n	80086d6 <ucdr_serialize_uint64_t+0x14e>
 80085e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80085e8:	706b      	strb	r3, [r5, #1]
 80085ea:	2e01      	cmp	r6, #1
 80085ec:	d077      	beq.n	80086de <ucdr_serialize_uint64_t+0x156>
 80085ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80085f2:	70ab      	strb	r3, [r5, #2]
 80085f4:	2e02      	cmp	r6, #2
 80085f6:	d076      	beq.n	80086e6 <ucdr_serialize_uint64_t+0x15e>
 80085f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80085fc:	70eb      	strb	r3, [r5, #3]
 80085fe:	2e03      	cmp	r6, #3
 8008600:	d075      	beq.n	80086ee <ucdr_serialize_uint64_t+0x166>
 8008602:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008606:	712b      	strb	r3, [r5, #4]
 8008608:	2e04      	cmp	r6, #4
 800860a:	d074      	beq.n	80086f6 <ucdr_serialize_uint64_t+0x16e>
 800860c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008610:	716b      	strb	r3, [r5, #5]
 8008612:	2e05      	cmp	r6, #5
 8008614:	d073      	beq.n	80086fe <ucdr_serialize_uint64_t+0x176>
 8008616:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800861a:	71ab      	strb	r3, [r5, #6]
 800861c:	2e06      	cmp	r6, #6
 800861e:	d072      	beq.n	8008706 <ucdr_serialize_uint64_t+0x17e>
 8008620:	f89d 3000 	ldrb.w	r3, [sp]
 8008624:	71eb      	strb	r3, [r5, #7]
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	68a2      	ldr	r2, [r4, #8]
 800862a:	7da0      	ldrb	r0, [r4, #22]
 800862c:	3308      	adds	r3, #8
 800862e:	1b9e      	subs	r6, r3, r6
 8008630:	4442      	add	r2, r8
 8008632:	2308      	movs	r3, #8
 8008634:	f080 0001 	eor.w	r0, r0, #1
 8008638:	60a2      	str	r2, [r4, #8]
 800863a:	6126      	str	r6, [r4, #16]
 800863c:	7563      	strb	r3, [r4, #21]
 800863e:	b002      	add	sp, #8
 8008640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008644:	2108      	movs	r1, #8
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fa96 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 800864c:	b350      	cbz	r0, 80086a4 <ucdr_serialize_uint64_t+0x11c>
 800864e:	7d23      	ldrb	r3, [r4, #20]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d02d      	beq.n	80086b0 <ucdr_serialize_uint64_t+0x128>
 8008654:	68a3      	ldr	r3, [r4, #8]
 8008656:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	68a3      	ldr	r3, [r4, #8]
 800865e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008662:	705a      	strb	r2, [r3, #1]
 8008664:	68a3      	ldr	r3, [r4, #8]
 8008666:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800866a:	709a      	strb	r2, [r3, #2]
 800866c:	68a3      	ldr	r3, [r4, #8]
 800866e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008672:	70da      	strb	r2, [r3, #3]
 8008674:	68a3      	ldr	r3, [r4, #8]
 8008676:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800867a:	711a      	strb	r2, [r3, #4]
 800867c:	68a3      	ldr	r3, [r4, #8]
 800867e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008682:	715a      	strb	r2, [r3, #5]
 8008684:	68a3      	ldr	r3, [r4, #8]
 8008686:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800868a:	719a      	strb	r2, [r3, #6]
 800868c:	68a3      	ldr	r3, [r4, #8]
 800868e:	f89d 2000 	ldrb.w	r2, [sp]
 8008692:	71da      	strb	r2, [r3, #7]
 8008694:	68a2      	ldr	r2, [r4, #8]
 8008696:	6923      	ldr	r3, [r4, #16]
 8008698:	3208      	adds	r2, #8
 800869a:	3308      	adds	r3, #8
 800869c:	2108      	movs	r1, #8
 800869e:	60a2      	str	r2, [r4, #8]
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	7561      	strb	r1, [r4, #21]
 80086a4:	7da0      	ldrb	r0, [r4, #22]
 80086a6:	f080 0001 	eor.w	r0, r0, #1
 80086aa:	b002      	add	sp, #8
 80086ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b0:	466b      	mov	r3, sp
 80086b2:	cb03      	ldmia	r3!, {r0, r1}
 80086b4:	68a3      	ldr	r3, [r4, #8]
 80086b6:	6018      	str	r0, [r3, #0]
 80086b8:	6059      	str	r1, [r3, #4]
 80086ba:	e7eb      	b.n	8008694 <ucdr_serialize_uint64_t+0x10c>
 80086bc:	68a2      	ldr	r2, [r4, #8]
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	7da0      	ldrb	r0, [r4, #22]
 80086c2:	7567      	strb	r7, [r4, #21]
 80086c4:	1b92      	subs	r2, r2, r6
 80086c6:	1b9b      	subs	r3, r3, r6
 80086c8:	f080 0001 	eor.w	r0, r0, #1
 80086cc:	60a2      	str	r2, [r4, #8]
 80086ce:	6123      	str	r3, [r4, #16]
 80086d0:	b002      	add	sp, #8
 80086d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80086e4:	701a      	strb	r2, [r3, #0]
 80086e6:	68a3      	ldr	r3, [r4, #8]
 80086e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	68a3      	ldr	r3, [r4, #8]
 80086f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	68a3      	ldr	r3, [r4, #8]
 80086f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	68a3      	ldr	r3, [r4, #8]
 8008700:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008704:	701a      	strb	r2, [r3, #0]
 8008706:	68a3      	ldr	r3, [r4, #8]
 8008708:	f89d 2000 	ldrb.w	r2, [sp]
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	e78a      	b.n	8008626 <ucdr_serialize_uint64_t+0x9e>
 8008710:	4628      	mov	r0, r5
 8008712:	466d      	mov	r5, sp
 8008714:	4629      	mov	r1, r5
 8008716:	4632      	mov	r2, r6
 8008718:	f007 fe45 	bl	80103a6 <memcpy>
 800871c:	68a0      	ldr	r0, [r4, #8]
 800871e:	4642      	mov	r2, r8
 8008720:	19a9      	adds	r1, r5, r6
 8008722:	f007 fe40 	bl	80103a6 <memcpy>
 8008726:	e77e      	b.n	8008626 <ucdr_serialize_uint64_t+0x9e>

08008728 <ucdr_serialize_int16_t>:
 8008728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	460b      	mov	r3, r1
 8008730:	2102      	movs	r1, #2
 8008732:	4604      	mov	r4, r0
 8008734:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008738:	f000 fa72 	bl	8008c20 <ucdr_buffer_alignment>
 800873c:	4601      	mov	r1, r0
 800873e:	4620      	mov	r0, r4
 8008740:	7d67      	ldrb	r7, [r4, #21]
 8008742:	f000 fab1 	bl	8008ca8 <ucdr_advance_buffer>
 8008746:	2102      	movs	r1, #2
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fa09 	bl	8008b60 <ucdr_check_buffer_available_for>
 800874e:	bb78      	cbnz	r0, 80087b0 <ucdr_serialize_int16_t+0x88>
 8008750:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008754:	42ab      	cmp	r3, r5
 8008756:	d926      	bls.n	80087a6 <ucdr_serialize_int16_t+0x7e>
 8008758:	1b5e      	subs	r6, r3, r5
 800875a:	60a3      	str	r3, [r4, #8]
 800875c:	6923      	ldr	r3, [r4, #16]
 800875e:	f1c6 0802 	rsb	r8, r6, #2
 8008762:	4433      	add	r3, r6
 8008764:	6123      	str	r3, [r4, #16]
 8008766:	4641      	mov	r1, r8
 8008768:	4620      	mov	r0, r4
 800876a:	f000 fa05 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 800876e:	2800      	cmp	r0, #0
 8008770:	d03b      	beq.n	80087ea <ucdr_serialize_int16_t+0xc2>
 8008772:	7d23      	ldrb	r3, [r4, #20]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d04a      	beq.n	800880e <ucdr_serialize_int16_t+0xe6>
 8008778:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800877c:	702b      	strb	r3, [r5, #0]
 800877e:	2e00      	cmp	r6, #0
 8008780:	d040      	beq.n	8008804 <ucdr_serialize_int16_t+0xdc>
 8008782:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008786:	706b      	strb	r3, [r5, #1]
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	68a2      	ldr	r2, [r4, #8]
 800878c:	7da0      	ldrb	r0, [r4, #22]
 800878e:	3302      	adds	r3, #2
 8008790:	1b9e      	subs	r6, r3, r6
 8008792:	4442      	add	r2, r8
 8008794:	2302      	movs	r3, #2
 8008796:	f080 0001 	eor.w	r0, r0, #1
 800879a:	60a2      	str	r2, [r4, #8]
 800879c:	6126      	str	r6, [r4, #16]
 800879e:	7563      	strb	r3, [r4, #21]
 80087a0:	b002      	add	sp, #8
 80087a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a6:	2102      	movs	r1, #2
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 f9e5 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 80087ae:	b190      	cbz	r0, 80087d6 <ucdr_serialize_int16_t+0xae>
 80087b0:	7d23      	ldrb	r3, [r4, #20]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	68a3      	ldr	r3, [r4, #8]
 80087b6:	d014      	beq.n	80087e2 <ucdr_serialize_int16_t+0xba>
 80087b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	68a3      	ldr	r3, [r4, #8]
 80087c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80087c4:	705a      	strb	r2, [r3, #1]
 80087c6:	68a2      	ldr	r2, [r4, #8]
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	3202      	adds	r2, #2
 80087cc:	3302      	adds	r3, #2
 80087ce:	2102      	movs	r1, #2
 80087d0:	60a2      	str	r2, [r4, #8]
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	7561      	strb	r1, [r4, #21]
 80087d6:	7da0      	ldrb	r0, [r4, #22]
 80087d8:	f080 0001 	eor.w	r0, r0, #1
 80087dc:	b002      	add	sp, #8
 80087de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	e7ed      	b.n	80087c6 <ucdr_serialize_int16_t+0x9e>
 80087ea:	68a2      	ldr	r2, [r4, #8]
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	7da0      	ldrb	r0, [r4, #22]
 80087f0:	7567      	strb	r7, [r4, #21]
 80087f2:	1b92      	subs	r2, r2, r6
 80087f4:	1b9b      	subs	r3, r3, r6
 80087f6:	f080 0001 	eor.w	r0, r0, #1
 80087fa:	60a2      	str	r2, [r4, #8]
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	b002      	add	sp, #8
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	68a3      	ldr	r3, [r4, #8]
 8008806:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	e7bc      	b.n	8008788 <ucdr_serialize_int16_t+0x60>
 800880e:	4628      	mov	r0, r5
 8008810:	f10d 0506 	add.w	r5, sp, #6
 8008814:	4629      	mov	r1, r5
 8008816:	4632      	mov	r2, r6
 8008818:	f007 fdc5 	bl	80103a6 <memcpy>
 800881c:	68a0      	ldr	r0, [r4, #8]
 800881e:	4642      	mov	r2, r8
 8008820:	19a9      	adds	r1, r5, r6
 8008822:	f007 fdc0 	bl	80103a6 <memcpy>
 8008826:	e7af      	b.n	8008788 <ucdr_serialize_int16_t+0x60>

08008828 <ucdr_deserialize_int16_t>:
 8008828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800882c:	460d      	mov	r5, r1
 800882e:	2102      	movs	r1, #2
 8008830:	4604      	mov	r4, r0
 8008832:	f000 f9f5 	bl	8008c20 <ucdr_buffer_alignment>
 8008836:	4601      	mov	r1, r0
 8008838:	4620      	mov	r0, r4
 800883a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800883e:	f000 fa33 	bl	8008ca8 <ucdr_advance_buffer>
 8008842:	2102      	movs	r1, #2
 8008844:	4620      	mov	r0, r4
 8008846:	f000 f98b 	bl	8008b60 <ucdr_check_buffer_available_for>
 800884a:	bb60      	cbnz	r0, 80088a6 <ucdr_deserialize_int16_t+0x7e>
 800884c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008850:	42be      	cmp	r6, r7
 8008852:	d923      	bls.n	800889c <ucdr_deserialize_int16_t+0x74>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	60a6      	str	r6, [r4, #8]
 8008858:	1bf6      	subs	r6, r6, r7
 800885a:	4433      	add	r3, r6
 800885c:	f1c6 0902 	rsb	r9, r6, #2
 8008860:	6123      	str	r3, [r4, #16]
 8008862:	4649      	mov	r1, r9
 8008864:	4620      	mov	r0, r4
 8008866:	f000 f987 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 800886a:	2800      	cmp	r0, #0
 800886c:	d034      	beq.n	80088d8 <ucdr_deserialize_int16_t+0xb0>
 800886e:	7d23      	ldrb	r3, [r4, #20]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d042      	beq.n	80088fa <ucdr_deserialize_int16_t+0xd2>
 8008874:	787b      	ldrb	r3, [r7, #1]
 8008876:	702b      	strb	r3, [r5, #0]
 8008878:	2e00      	cmp	r6, #0
 800887a:	d03a      	beq.n	80088f2 <ucdr_deserialize_int16_t+0xca>
 800887c:	783b      	ldrb	r3, [r7, #0]
 800887e:	706b      	strb	r3, [r5, #1]
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	68a2      	ldr	r2, [r4, #8]
 8008884:	7da0      	ldrb	r0, [r4, #22]
 8008886:	2102      	movs	r1, #2
 8008888:	3302      	adds	r3, #2
 800888a:	444a      	add	r2, r9
 800888c:	1b9b      	subs	r3, r3, r6
 800888e:	7561      	strb	r1, [r4, #21]
 8008890:	60a2      	str	r2, [r4, #8]
 8008892:	6123      	str	r3, [r4, #16]
 8008894:	f080 0001 	eor.w	r0, r0, #1
 8008898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800889c:	2102      	movs	r1, #2
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f96a 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 80088a4:	b180      	cbz	r0, 80088c8 <ucdr_deserialize_int16_t+0xa0>
 80088a6:	7d23      	ldrb	r3, [r4, #20]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	68a3      	ldr	r3, [r4, #8]
 80088ac:	d011      	beq.n	80088d2 <ucdr_deserialize_int16_t+0xaa>
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	702b      	strb	r3, [r5, #0]
 80088b2:	68a3      	ldr	r3, [r4, #8]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	706b      	strb	r3, [r5, #1]
 80088b8:	68a2      	ldr	r2, [r4, #8]
 80088ba:	6923      	ldr	r3, [r4, #16]
 80088bc:	3202      	adds	r2, #2
 80088be:	3302      	adds	r3, #2
 80088c0:	2102      	movs	r1, #2
 80088c2:	60a2      	str	r2, [r4, #8]
 80088c4:	6123      	str	r3, [r4, #16]
 80088c6:	7561      	strb	r1, [r4, #21]
 80088c8:	7da0      	ldrb	r0, [r4, #22]
 80088ca:	f080 0001 	eor.w	r0, r0, #1
 80088ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	802b      	strh	r3, [r5, #0]
 80088d6:	e7ef      	b.n	80088b8 <ucdr_deserialize_int16_t+0x90>
 80088d8:	68a2      	ldr	r2, [r4, #8]
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	7da0      	ldrb	r0, [r4, #22]
 80088de:	f884 8015 	strb.w	r8, [r4, #21]
 80088e2:	1b92      	subs	r2, r2, r6
 80088e4:	1b9b      	subs	r3, r3, r6
 80088e6:	60a2      	str	r2, [r4, #8]
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	f080 0001 	eor.w	r0, r0, #1
 80088ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f2:	68a3      	ldr	r3, [r4, #8]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	706b      	strb	r3, [r5, #1]
 80088f8:	e7c2      	b.n	8008880 <ucdr_deserialize_int16_t+0x58>
 80088fa:	4639      	mov	r1, r7
 80088fc:	4632      	mov	r2, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	f007 fd51 	bl	80103a6 <memcpy>
 8008904:	68a1      	ldr	r1, [r4, #8]
 8008906:	464a      	mov	r2, r9
 8008908:	19a8      	adds	r0, r5, r6
 800890a:	f007 fd4c 	bl	80103a6 <memcpy>
 800890e:	e7b7      	b.n	8008880 <ucdr_deserialize_int16_t+0x58>

08008910 <ucdr_serialize_int32_t>:
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	4604      	mov	r4, r0
 8008918:	9101      	str	r1, [sp, #4]
 800891a:	2104      	movs	r1, #4
 800891c:	f000 f980 	bl	8008c20 <ucdr_buffer_alignment>
 8008920:	4601      	mov	r1, r0
 8008922:	4620      	mov	r0, r4
 8008924:	7d67      	ldrb	r7, [r4, #21]
 8008926:	f000 f9bf 	bl	8008ca8 <ucdr_advance_buffer>
 800892a:	2104      	movs	r1, #4
 800892c:	4620      	mov	r0, r4
 800892e:	f000 f917 	bl	8008b60 <ucdr_check_buffer_available_for>
 8008932:	2800      	cmp	r0, #0
 8008934:	d139      	bne.n	80089aa <ucdr_serialize_int32_t+0x9a>
 8008936:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800893a:	42ab      	cmp	r3, r5
 800893c:	d930      	bls.n	80089a0 <ucdr_serialize_int32_t+0x90>
 800893e:	1b5e      	subs	r6, r3, r5
 8008940:	60a3      	str	r3, [r4, #8]
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	f1c6 0804 	rsb	r8, r6, #4
 8008948:	4433      	add	r3, r6
 800894a:	6123      	str	r3, [r4, #16]
 800894c:	4641      	mov	r1, r8
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f912 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8008954:	2800      	cmp	r0, #0
 8008956:	d04c      	beq.n	80089f2 <ucdr_serialize_int32_t+0xe2>
 8008958:	7d23      	ldrb	r3, [r4, #20]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d063      	beq.n	8008a26 <ucdr_serialize_int32_t+0x116>
 800895e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008962:	702b      	strb	r3, [r5, #0]
 8008964:	2e00      	cmp	r6, #0
 8008966:	d051      	beq.n	8008a0c <ucdr_serialize_int32_t+0xfc>
 8008968:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800896c:	706b      	strb	r3, [r5, #1]
 800896e:	2e01      	cmp	r6, #1
 8008970:	d050      	beq.n	8008a14 <ucdr_serialize_int32_t+0x104>
 8008972:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008976:	70ab      	strb	r3, [r5, #2]
 8008978:	2e02      	cmp	r6, #2
 800897a:	d04f      	beq.n	8008a1c <ucdr_serialize_int32_t+0x10c>
 800897c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008980:	70eb      	strb	r3, [r5, #3]
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	68a2      	ldr	r2, [r4, #8]
 8008986:	7da0      	ldrb	r0, [r4, #22]
 8008988:	3304      	adds	r3, #4
 800898a:	1b9e      	subs	r6, r3, r6
 800898c:	4442      	add	r2, r8
 800898e:	2304      	movs	r3, #4
 8008990:	f080 0001 	eor.w	r0, r0, #1
 8008994:	60a2      	str	r2, [r4, #8]
 8008996:	6126      	str	r6, [r4, #16]
 8008998:	7563      	strb	r3, [r4, #21]
 800899a:	b002      	add	sp, #8
 800899c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a0:	2104      	movs	r1, #4
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 f8e8 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 80089a8:	b1d0      	cbz	r0, 80089e0 <ucdr_serialize_int32_t+0xd0>
 80089aa:	7d23      	ldrb	r3, [r4, #20]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	d01c      	beq.n	80089ec <ucdr_serialize_int32_t+0xdc>
 80089b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	68a3      	ldr	r3, [r4, #8]
 80089ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80089be:	705a      	strb	r2, [r3, #1]
 80089c0:	68a3      	ldr	r3, [r4, #8]
 80089c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80089c6:	709a      	strb	r2, [r3, #2]
 80089c8:	68a3      	ldr	r3, [r4, #8]
 80089ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80089ce:	70da      	strb	r2, [r3, #3]
 80089d0:	68a2      	ldr	r2, [r4, #8]
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	3204      	adds	r2, #4
 80089d6:	3304      	adds	r3, #4
 80089d8:	2104      	movs	r1, #4
 80089da:	60a2      	str	r2, [r4, #8]
 80089dc:	6123      	str	r3, [r4, #16]
 80089de:	7561      	strb	r1, [r4, #21]
 80089e0:	7da0      	ldrb	r0, [r4, #22]
 80089e2:	f080 0001 	eor.w	r0, r0, #1
 80089e6:	b002      	add	sp, #8
 80089e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ec:	9a01      	ldr	r2, [sp, #4]
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	e7ee      	b.n	80089d0 <ucdr_serialize_int32_t+0xc0>
 80089f2:	68a2      	ldr	r2, [r4, #8]
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	7da0      	ldrb	r0, [r4, #22]
 80089f8:	7567      	strb	r7, [r4, #21]
 80089fa:	1b92      	subs	r2, r2, r6
 80089fc:	1b9b      	subs	r3, r3, r6
 80089fe:	f080 0001 	eor.w	r0, r0, #1
 8008a02:	60a2      	str	r2, [r4, #8]
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	b002      	add	sp, #8
 8008a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a0c:	68a3      	ldr	r3, [r4, #8]
 8008a0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a12:	701a      	strb	r2, [r3, #0]
 8008a14:	68a3      	ldr	r3, [r4, #8]
 8008a16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	68a3      	ldr	r3, [r4, #8]
 8008a1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008a22:	701a      	strb	r2, [r3, #0]
 8008a24:	e7ad      	b.n	8008982 <ucdr_serialize_int32_t+0x72>
 8008a26:	4628      	mov	r0, r5
 8008a28:	ad01      	add	r5, sp, #4
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	f007 fcba 	bl	80103a6 <memcpy>
 8008a32:	68a0      	ldr	r0, [r4, #8]
 8008a34:	4642      	mov	r2, r8
 8008a36:	19a9      	adds	r1, r5, r6
 8008a38:	f007 fcb5 	bl	80103a6 <memcpy>
 8008a3c:	e7a1      	b.n	8008982 <ucdr_serialize_int32_t+0x72>
 8008a3e:	bf00      	nop

08008a40 <ucdr_deserialize_int32_t>:
 8008a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a44:	460d      	mov	r5, r1
 8008a46:	2104      	movs	r1, #4
 8008a48:	4604      	mov	r4, r0
 8008a4a:	f000 f8e9 	bl	8008c20 <ucdr_buffer_alignment>
 8008a4e:	4601      	mov	r1, r0
 8008a50:	4620      	mov	r0, r4
 8008a52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008a56:	f000 f927 	bl	8008ca8 <ucdr_advance_buffer>
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 f87f 	bl	8008b60 <ucdr_check_buffer_available_for>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d138      	bne.n	8008ad8 <ucdr_deserialize_int32_t+0x98>
 8008a66:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008a6a:	42b7      	cmp	r7, r6
 8008a6c:	d92f      	bls.n	8008ace <ucdr_deserialize_int32_t+0x8e>
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	60a7      	str	r7, [r4, #8]
 8008a72:	1bbf      	subs	r7, r7, r6
 8008a74:	443b      	add	r3, r7
 8008a76:	f1c7 0904 	rsb	r9, r7, #4
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 f87a 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d046      	beq.n	8008b16 <ucdr_deserialize_int32_t+0xd6>
 8008a88:	7d23      	ldrb	r3, [r4, #20]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d05c      	beq.n	8008b48 <ucdr_deserialize_int32_t+0x108>
 8008a8e:	78f3      	ldrb	r3, [r6, #3]
 8008a90:	702b      	strb	r3, [r5, #0]
 8008a92:	2f00      	cmp	r7, #0
 8008a94:	d04c      	beq.n	8008b30 <ucdr_deserialize_int32_t+0xf0>
 8008a96:	78b3      	ldrb	r3, [r6, #2]
 8008a98:	706b      	strb	r3, [r5, #1]
 8008a9a:	2f01      	cmp	r7, #1
 8008a9c:	f105 0302 	add.w	r3, r5, #2
 8008aa0:	d04a      	beq.n	8008b38 <ucdr_deserialize_int32_t+0xf8>
 8008aa2:	7873      	ldrb	r3, [r6, #1]
 8008aa4:	70ab      	strb	r3, [r5, #2]
 8008aa6:	2f02      	cmp	r7, #2
 8008aa8:	f105 0303 	add.w	r3, r5, #3
 8008aac:	d048      	beq.n	8008b40 <ucdr_deserialize_int32_t+0x100>
 8008aae:	7833      	ldrb	r3, [r6, #0]
 8008ab0:	70eb      	strb	r3, [r5, #3]
 8008ab2:	6923      	ldr	r3, [r4, #16]
 8008ab4:	68a2      	ldr	r2, [r4, #8]
 8008ab6:	7da0      	ldrb	r0, [r4, #22]
 8008ab8:	2104      	movs	r1, #4
 8008aba:	3304      	adds	r3, #4
 8008abc:	444a      	add	r2, r9
 8008abe:	1bdb      	subs	r3, r3, r7
 8008ac0:	7561      	strb	r1, [r4, #21]
 8008ac2:	60a2      	str	r2, [r4, #8]
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	f080 0001 	eor.w	r0, r0, #1
 8008aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ace:	2104      	movs	r1, #4
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 f851 	bl	8008b78 <ucdr_check_final_buffer_behavior>
 8008ad6:	b1b0      	cbz	r0, 8008b06 <ucdr_deserialize_int32_t+0xc6>
 8008ad8:	7d23      	ldrb	r3, [r4, #20]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	68a3      	ldr	r3, [r4, #8]
 8008ade:	d017      	beq.n	8008b10 <ucdr_deserialize_int32_t+0xd0>
 8008ae0:	78db      	ldrb	r3, [r3, #3]
 8008ae2:	702b      	strb	r3, [r5, #0]
 8008ae4:	68a3      	ldr	r3, [r4, #8]
 8008ae6:	789b      	ldrb	r3, [r3, #2]
 8008ae8:	706b      	strb	r3, [r5, #1]
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	70ab      	strb	r3, [r5, #2]
 8008af0:	68a3      	ldr	r3, [r4, #8]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	70eb      	strb	r3, [r5, #3]
 8008af6:	68a2      	ldr	r2, [r4, #8]
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	3204      	adds	r2, #4
 8008afc:	3304      	adds	r3, #4
 8008afe:	2104      	movs	r1, #4
 8008b00:	60a2      	str	r2, [r4, #8]
 8008b02:	6123      	str	r3, [r4, #16]
 8008b04:	7561      	strb	r1, [r4, #21]
 8008b06:	7da0      	ldrb	r0, [r4, #22]
 8008b08:	f080 0001 	eor.w	r0, r0, #1
 8008b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	e7ef      	b.n	8008af6 <ucdr_deserialize_int32_t+0xb6>
 8008b16:	68a2      	ldr	r2, [r4, #8]
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	7da0      	ldrb	r0, [r4, #22]
 8008b1c:	f884 8015 	strb.w	r8, [r4, #21]
 8008b20:	1bd2      	subs	r2, r2, r7
 8008b22:	1bdb      	subs	r3, r3, r7
 8008b24:	60a2      	str	r2, [r4, #8]
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	f080 0001 	eor.w	r0, r0, #1
 8008b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b30:	68a3      	ldr	r3, [r4, #8]
 8008b32:	789b      	ldrb	r3, [r3, #2]
 8008b34:	706b      	strb	r3, [r5, #1]
 8008b36:	1cab      	adds	r3, r5, #2
 8008b38:	68a2      	ldr	r2, [r4, #8]
 8008b3a:	7852      	ldrb	r2, [r2, #1]
 8008b3c:	f803 2b01 	strb.w	r2, [r3], #1
 8008b40:	68a2      	ldr	r2, [r4, #8]
 8008b42:	7812      	ldrb	r2, [r2, #0]
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	e7b4      	b.n	8008ab2 <ucdr_deserialize_int32_t+0x72>
 8008b48:	4631      	mov	r1, r6
 8008b4a:	463a      	mov	r2, r7
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f007 fc2a 	bl	80103a6 <memcpy>
 8008b52:	68a1      	ldr	r1, [r4, #8]
 8008b54:	464a      	mov	r2, r9
 8008b56:	19e8      	adds	r0, r5, r7
 8008b58:	f007 fc25 	bl	80103a6 <memcpy>
 8008b5c:	e7a9      	b.n	8008ab2 <ucdr_deserialize_int32_t+0x72>
 8008b5e:	bf00      	nop

08008b60 <ucdr_check_buffer_available_for>:
 8008b60:	7d83      	ldrb	r3, [r0, #22]
 8008b62:	b93b      	cbnz	r3, 8008b74 <ucdr_check_buffer_available_for+0x14>
 8008b64:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008b68:	4419      	add	r1, r3
 8008b6a:	4288      	cmp	r0, r1
 8008b6c:	bf34      	ite	cc
 8008b6e:	2000      	movcc	r0, #0
 8008b70:	2001      	movcs	r0, #1
 8008b72:	4770      	bx	lr
 8008b74:	2000      	movs	r0, #0
 8008b76:	4770      	bx	lr

08008b78 <ucdr_check_final_buffer_behavior>:
 8008b78:	7d83      	ldrb	r3, [r0, #22]
 8008b7a:	b943      	cbnz	r3, 8008b8e <ucdr_check_final_buffer_behavior+0x16>
 8008b7c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008b80:	4291      	cmp	r1, r2
 8008b82:	b510      	push	{r4, lr}
 8008b84:	4604      	mov	r4, r0
 8008b86:	d205      	bcs.n	8008b94 <ucdr_check_final_buffer_behavior+0x1c>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	bd10      	pop	{r4, pc}
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4618      	mov	r0, r3
 8008b92:	4770      	bx	lr
 8008b94:	6982      	ldr	r2, [r0, #24]
 8008b96:	b13a      	cbz	r2, 8008ba8 <ucdr_check_final_buffer_behavior+0x30>
 8008b98:	69c1      	ldr	r1, [r0, #28]
 8008b9a:	4790      	blx	r2
 8008b9c:	f080 0301 	eor.w	r3, r0, #1
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	75a0      	strb	r0, [r4, #22]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	bd10      	pop	{r4, pc}
 8008ba8:	2001      	movs	r0, #1
 8008baa:	75a0      	strb	r0, [r4, #22]
 8008bac:	e7fa      	b.n	8008ba4 <ucdr_check_final_buffer_behavior+0x2c>
 8008bae:	bf00      	nop

08008bb0 <ucdr_set_on_full_buffer_callback>:
 8008bb0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop

08008bb8 <ucdr_init_buffer_origin_offset_endian>:
 8008bb8:	b410      	push	{r4}
 8008bba:	9c01      	ldr	r4, [sp, #4]
 8008bbc:	6001      	str	r1, [r0, #0]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	6042      	str	r2, [r0, #4]
 8008bc2:	190a      	adds	r2, r1, r4
 8008bc4:	441c      	add	r4, r3
 8008bc6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008bca:	6082      	str	r2, [r0, #8]
 8008bcc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008bd0:	7503      	strb	r3, [r0, #20]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bdc:	7542      	strb	r2, [r0, #21]
 8008bde:	7582      	strb	r2, [r0, #22]
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop

08008be4 <ucdr_init_buffer_origin_offset>:
 8008be4:	b510      	push	{r4, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	9c04      	ldr	r4, [sp, #16]
 8008bea:	9400      	str	r4, [sp, #0]
 8008bec:	2401      	movs	r4, #1
 8008bee:	9401      	str	r4, [sp, #4]
 8008bf0:	f7ff ffe2 	bl	8008bb8 <ucdr_init_buffer_origin_offset_endian>
 8008bf4:	b002      	add	sp, #8
 8008bf6:	bd10      	pop	{r4, pc}

08008bf8 <ucdr_init_buffer_origin>:
 8008bf8:	b510      	push	{r4, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	2400      	movs	r4, #0
 8008bfe:	9400      	str	r4, [sp, #0]
 8008c00:	f7ff fff0 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 8008c04:	b002      	add	sp, #8
 8008c06:	bd10      	pop	{r4, pc}

08008c08 <ucdr_init_buffer>:
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f7ff bff5 	b.w	8008bf8 <ucdr_init_buffer_origin>
 8008c0e:	bf00      	nop

08008c10 <ucdr_alignment>:
 8008c10:	fbb0 f3f1 	udiv	r3, r0, r1
 8008c14:	fb03 0011 	mls	r0, r3, r1, r0
 8008c18:	1a08      	subs	r0, r1, r0
 8008c1a:	3901      	subs	r1, #1
 8008c1c:	4008      	ands	r0, r1
 8008c1e:	4770      	bx	lr

08008c20 <ucdr_buffer_alignment>:
 8008c20:	7d43      	ldrb	r3, [r0, #21]
 8008c22:	428b      	cmp	r3, r1
 8008c24:	d208      	bcs.n	8008c38 <ucdr_buffer_alignment+0x18>
 8008c26:	6900      	ldr	r0, [r0, #16]
 8008c28:	fbb0 f3f1 	udiv	r3, r0, r1
 8008c2c:	fb01 0013 	mls	r0, r1, r3, r0
 8008c30:	1a08      	subs	r0, r1, r0
 8008c32:	3901      	subs	r1, #1
 8008c34:	4008      	ands	r0, r1
 8008c36:	4770      	bx	lr
 8008c38:	2000      	movs	r0, #0
 8008c3a:	4770      	bx	lr

08008c3c <ucdr_align_to>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	4604      	mov	r4, r0
 8008c40:	460d      	mov	r5, r1
 8008c42:	f7ff ffed 	bl	8008c20 <ucdr_buffer_alignment>
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	6921      	ldr	r1, [r4, #16]
 8008c4a:	7565      	strb	r5, [r4, #21]
 8008c4c:	181a      	adds	r2, r3, r0
 8008c4e:	6863      	ldr	r3, [r4, #4]
 8008c50:	4293      	cmp	r3, r2
 8008c52:	4408      	add	r0, r1
 8008c54:	bf28      	it	cs
 8008c56:	4613      	movcs	r3, r2
 8008c58:	6120      	str	r0, [r4, #16]
 8008c5a:	60a3      	str	r3, [r4, #8]
 8008c5c:	bd38      	pop	{r3, r4, r5, pc}
 8008c5e:	bf00      	nop

08008c60 <ucdr_buffer_length>:
 8008c60:	6882      	ldr	r2, [r0, #8]
 8008c62:	6800      	ldr	r0, [r0, #0]
 8008c64:	1a10      	subs	r0, r2, r0
 8008c66:	4770      	bx	lr

08008c68 <ucdr_buffer_remaining>:
 8008c68:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008c6c:	1a10      	subs	r0, r2, r0
 8008c6e:	4770      	bx	lr

08008c70 <ucdr_check_final_buffer_behavior_array>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	7d83      	ldrb	r3, [r0, #22]
 8008c74:	b963      	cbnz	r3, 8008c90 <ucdr_check_final_buffer_behavior_array+0x20>
 8008c76:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	460d      	mov	r5, r1
 8008c80:	d308      	bcc.n	8008c94 <ucdr_check_final_buffer_behavior_array+0x24>
 8008c82:	b139      	cbz	r1, 8008c94 <ucdr_check_final_buffer_behavior_array+0x24>
 8008c84:	6983      	ldr	r3, [r0, #24]
 8008c86:	b163      	cbz	r3, 8008ca2 <ucdr_check_final_buffer_behavior_array+0x32>
 8008c88:	69c1      	ldr	r1, [r0, #28]
 8008c8a:	4798      	blx	r3
 8008c8c:	75a0      	strb	r0, [r4, #22]
 8008c8e:	b108      	cbz	r0, 8008c94 <ucdr_check_final_buffer_behavior_array+0x24>
 8008c90:	2000      	movs	r0, #0
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	4620      	mov	r0, r4
 8008c96:	f7ff ffe7 	bl	8008c68 <ucdr_buffer_remaining>
 8008c9a:	42a8      	cmp	r0, r5
 8008c9c:	bf28      	it	cs
 8008c9e:	4628      	movcs	r0, r5
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	7583      	strb	r3, [r0, #22]
 8008ca6:	e7f3      	b.n	8008c90 <ucdr_check_final_buffer_behavior_array+0x20>

08008ca8 <ucdr_advance_buffer>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4604      	mov	r4, r0
 8008cac:	460d      	mov	r5, r1
 8008cae:	f7ff ff57 	bl	8008b60 <ucdr_check_buffer_available_for>
 8008cb2:	b178      	cbz	r0, 8008cd4 <ucdr_advance_buffer+0x2c>
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	68a2      	ldr	r2, [r4, #8]
 8008cb8:	442b      	add	r3, r5
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	442a      	add	r2, r5
 8008cc0:	7563      	strb	r3, [r4, #21]
 8008cc2:	60a2      	str	r2, [r4, #8]
 8008cc4:	bd38      	pop	{r3, r4, r5, pc}
 8008cc6:	68a2      	ldr	r2, [r4, #8]
 8008cc8:	6923      	ldr	r3, [r4, #16]
 8008cca:	4402      	add	r2, r0
 8008ccc:	4403      	add	r3, r0
 8008cce:	1a2d      	subs	r5, r5, r0
 8008cd0:	60a2      	str	r2, [r4, #8]
 8008cd2:	6123      	str	r3, [r4, #16]
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f7ff ffc9 	bl	8008c70 <ucdr_check_final_buffer_behavior_array>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d1f1      	bne.n	8008cc6 <ucdr_advance_buffer+0x1e>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	7563      	strb	r3, [r4, #21]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}

08008ce8 <uxr_buffer_delete_entity>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	2300      	movs	r3, #0
 8008cec:	b08e      	sub	sp, #56	@ 0x38
 8008cee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	ab06      	add	r3, sp, #24
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	9103      	str	r1, [sp, #12]
 8008cfe:	f001 f86f 	bl	8009de0 <uxr_prepare_stream_to_write_submessage>
 8008d02:	b918      	cbnz	r0, 8008d0c <uxr_buffer_delete_entity+0x24>
 8008d04:	4604      	mov	r4, r0
 8008d06:	4620      	mov	r0, r4
 8008d08:	b00e      	add	sp, #56	@ 0x38
 8008d0a:	bd10      	pop	{r4, pc}
 8008d0c:	9902      	ldr	r1, [sp, #8]
 8008d0e:	aa05      	add	r2, sp, #20
 8008d10:	4620      	mov	r0, r4
 8008d12:	f001 f99b 	bl	800a04c <uxr_init_base_object_request>
 8008d16:	a905      	add	r1, sp, #20
 8008d18:	4604      	mov	r4, r0
 8008d1a:	a806      	add	r0, sp, #24
 8008d1c:	f002 fb00 	bl	800b320 <uxr_serialize_DELETE_Payload>
 8008d20:	4620      	mov	r0, r4
 8008d22:	b00e      	add	sp, #56	@ 0x38
 8008d24:	bd10      	pop	{r4, pc}
 8008d26:	bf00      	nop

08008d28 <uxr_common_create_entity>:
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8008d2e:	b08c      	sub	sp, #48	@ 0x30
 8008d30:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008d34:	f1bc 0f01 	cmp.w	ip, #1
 8008d38:	bf0c      	ite	eq
 8008d3a:	f003 0201 	andeq.w	r2, r3, #1
 8008d3e:	2200      	movne	r2, #0
 8008d40:	330e      	adds	r3, #14
 8008d42:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8008d46:	9101      	str	r1, [sp, #4]
 8008d48:	441a      	add	r2, r3
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	9903      	ldr	r1, [sp, #12]
 8008d50:	ab04      	add	r3, sp, #16
 8008d52:	b292      	uxth	r2, r2
 8008d54:	4604      	mov	r4, r0
 8008d56:	f001 f843 	bl	8009de0 <uxr_prepare_stream_to_write_submessage>
 8008d5a:	b918      	cbnz	r0, 8008d64 <uxr_common_create_entity+0x3c>
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	4620      	mov	r0, r4
 8008d60:	b00c      	add	sp, #48	@ 0x30
 8008d62:	bd10      	pop	{r4, pc}
 8008d64:	9902      	ldr	r1, [sp, #8]
 8008d66:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f001 f96f 	bl	800a04c <uxr_init_base_object_request>
 8008d6e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008d70:	4604      	mov	r4, r0
 8008d72:	a804      	add	r0, sp, #16
 8008d74:	f002 fa30 	bl	800b1d8 <uxr_serialize_CREATE_Payload>
 8008d78:	4620      	mov	r0, r4
 8008d7a:	b00c      	add	sp, #48	@ 0x30
 8008d7c:	bd10      	pop	{r4, pc}
 8008d7e:	bf00      	nop

08008d80 <uxr_buffer_create_participant_bin>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8008d86:	ac11      	add	r4, sp, #68	@ 0x44
 8008d88:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008d92:	7223      	strb	r3, [r4, #8]
 8008d94:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8008d96:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4605      	mov	r5, r0
 8008da0:	7122      	strb	r2, [r4, #4]
 8008da2:	f88d 1014 	strb.w	r1, [sp, #20]
 8008da6:	b1cb      	cbz	r3, 8008ddc <uxr_buffer_create_participant_bin+0x5c>
 8008da8:	f88d 201c 	strb.w	r2, [sp, #28]
 8008dac:	9308      	str	r3, [sp, #32]
 8008dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008db2:	a915      	add	r1, sp, #84	@ 0x54
 8008db4:	a809      	add	r0, sp, #36	@ 0x24
 8008db6:	f7ff ff27 	bl	8008c08 <ucdr_init_buffer>
 8008dba:	a905      	add	r1, sp, #20
 8008dbc:	a809      	add	r0, sp, #36	@ 0x24
 8008dbe:	f001 fed9 	bl	800ab74 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8008dc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dc4:	9600      	str	r6, [sp, #0]
 8008dc6:	9401      	str	r4, [sp, #4]
 8008dc8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008dcc:	60e3      	str	r3, [r4, #12]
 8008dce:	4628      	mov	r0, r5
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f7ff ffa9 	bl	8008d28 <uxr_common_create_entity>
 8008dd6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	f88d 301c 	strb.w	r3, [sp, #28]
 8008de0:	e7e5      	b.n	8008dae <uxr_buffer_create_participant_bin+0x2e>
 8008de2:	bf00      	nop

08008de4 <uxr_buffer_create_topic_bin>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8008dea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8008dee:	9105      	str	r1, [sp, #20]
 8008df0:	4605      	mov	r5, r0
 8008df2:	a997      	add	r1, sp, #604	@ 0x25c
 8008df4:	4618      	mov	r0, r3
 8008df6:	2302      	movs	r3, #2
 8008df8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8008dfc:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8008e00:	f000 f8ee 	bl	8008fe0 <uxr_object_id_to_raw>
 8008e04:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8008e06:	9306      	str	r3, [sp, #24]
 8008e08:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8008e0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8008e12:	2301      	movs	r3, #1
 8008e14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e18:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8008e1c:	a917      	add	r1, sp, #92	@ 0x5c
 8008e1e:	2300      	movs	r3, #0
 8008e20:	a80b      	add	r0, sp, #44	@ 0x2c
 8008e22:	f88d 301c 	strb.w	r3, [sp, #28]
 8008e26:	f7ff feef 	bl	8008c08 <ucdr_init_buffer>
 8008e2a:	a906      	add	r1, sp, #24
 8008e2c:	a80b      	add	r0, sp, #44	@ 0x2c
 8008e2e:	f001 fec3 	bl	800abb8 <uxr_serialize_OBJK_Topic_Binary>
 8008e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e34:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e36:	ac13      	add	r4, sp, #76	@ 0x4c
 8008e38:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8008e3c:	9600      	str	r6, [sp, #0]
 8008e3e:	9401      	str	r4, [sp, #4]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	4628      	mov	r0, r5
 8008e44:	f7ff ff70 	bl	8008d28 <uxr_common_create_entity>
 8008e48:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
 8008e4e:	bf00      	nop

08008e50 <uxr_buffer_create_publisher_bin>:
 8008e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e52:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8008e56:	4605      	mov	r5, r0
 8008e58:	9105      	str	r1, [sp, #20]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	2603      	movs	r6, #3
 8008e5e:	a992      	add	r1, sp, #584	@ 0x248
 8008e60:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8008e64:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8008e68:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8008e6c:	f000 f8b8 	bl	8008fe0 <uxr_object_id_to_raw>
 8008e70:	2300      	movs	r3, #0
 8008e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e76:	a912      	add	r1, sp, #72	@ 0x48
 8008e78:	a806      	add	r0, sp, #24
 8008e7a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8008e7e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8008e82:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8008e86:	f7ff febf 	bl	8008c08 <ucdr_init_buffer>
 8008e8a:	a993      	add	r1, sp, #588	@ 0x24c
 8008e8c:	a806      	add	r0, sp, #24
 8008e8e:	f001 ff47 	bl	800ad20 <uxr_serialize_OBJK_Publisher_Binary>
 8008e92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e94:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e96:	ac0e      	add	r4, sp, #56	@ 0x38
 8008e98:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8008e9c:	9700      	str	r7, [sp, #0]
 8008e9e:	9401      	str	r4, [sp, #4]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f7ff ff40 	bl	8008d28 <uxr_common_create_entity>
 8008ea8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8008eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eae:	bf00      	nop

08008eb0 <uxr_buffer_create_datawriter_bin>:
 8008eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008eb8:	ac1d      	add	r4, sp, #116	@ 0x74
 8008eba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8008ebe:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8008ec2:	9105      	str	r1, [sp, #20]
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	a9a1      	add	r1, sp, #644	@ 0x284
 8008ec8:	4618      	mov	r0, r3
 8008eca:	2305      	movs	r3, #5
 8008ecc:	7123      	strb	r3, [r4, #4]
 8008ece:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8008ed2:	2703      	movs	r7, #3
 8008ed4:	f000 f884 	bl	8008fe0 <uxr_object_id_to_raw>
 8008ed8:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8008eda:	7227      	strb	r7, [r4, #8]
 8008edc:	a90e      	add	r1, sp, #56	@ 0x38
 8008ede:	f000 f87f 	bl	8008fe0 <uxr_object_id_to_raw>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8008ee8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8008eec:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8008ef0:	3d00      	subs	r5, #0
 8008ef2:	bf18      	it	ne
 8008ef4:	2501      	movne	r5, #1
 8008ef6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8008efa:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8008efe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8008f02:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008f06:	2301      	movs	r3, #1
 8008f08:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8008f0c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8008f10:	bb8a      	cbnz	r2, 8008f76 <uxr_buffer_create_datawriter_bin+0xc6>
 8008f12:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008f16:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8008f1a:	f04f 0c13 	mov.w	ip, #19
 8008f1e:	250b      	movs	r5, #11
 8008f20:	2221      	movs	r2, #33	@ 0x21
 8008f22:	2111      	movs	r1, #17
 8008f24:	2009      	movs	r0, #9
 8008f26:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8008f2a:	b923      	cbnz	r3, 8008f36 <uxr_buffer_create_datawriter_bin+0x86>
 8008f2c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8008f30:	4672      	mov	r2, lr
 8008f32:	4661      	mov	r1, ip
 8008f34:	4628      	mov	r0, r5
 8008f36:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d025      	beq.n	8008f8a <uxr_buffer_create_datawriter_bin+0xda>
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d029      	beq.n	8008f96 <uxr_buffer_create_datawriter_bin+0xe6>
 8008f42:	b32b      	cbz	r3, 8008f90 <uxr_buffer_create_datawriter_bin+0xe0>
 8008f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f48:	a921      	add	r1, sp, #132	@ 0x84
 8008f4a:	a806      	add	r0, sp, #24
 8008f4c:	f7ff fe5c 	bl	8008c08 <ucdr_init_buffer>
 8008f50:	a90e      	add	r1, sp, #56	@ 0x38
 8008f52:	a806      	add	r0, sp, #24
 8008f54:	f001 ff5a 	bl	800ae0c <uxr_serialize_OBJK_DataWriter_Binary>
 8008f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f5a:	f8cd 8000 	str.w	r8, [sp]
 8008f5e:	9401      	str	r4, [sp, #4]
 8008f60:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8008f64:	60e3      	str	r3, [r4, #12]
 8008f66:	4630      	mov	r0, r6
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	f7ff fedd 	bl	8008d28 <uxr_common_create_entity>
 8008f6e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f76:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8008f7a:	f04f 0c12 	mov.w	ip, #18
 8008f7e:	250a      	movs	r5, #10
 8008f80:	2220      	movs	r2, #32
 8008f82:	2110      	movs	r1, #16
 8008f84:	2008      	movs	r0, #8
 8008f86:	2702      	movs	r7, #2
 8008f88:	e7cd      	b.n	8008f26 <uxr_buffer_create_datawriter_bin+0x76>
 8008f8a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8008f8e:	e7d9      	b.n	8008f44 <uxr_buffer_create_datawriter_bin+0x94>
 8008f90:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8008f94:	e7d6      	b.n	8008f44 <uxr_buffer_create_datawriter_bin+0x94>
 8008f96:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8008f9a:	e7d3      	b.n	8008f44 <uxr_buffer_create_datawriter_bin+0x94>

08008f9c <uxr_object_id>:
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f88d 1006 	strb.w	r1, [sp, #6]
 8008fa4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008fa8:	f360 030f 	bfi	r3, r0, #0, #16
 8008fac:	f362 431f 	bfi	r3, r2, #16, #16
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	b002      	add	sp, #8
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop

08008fb8 <uxr_object_id_from_raw>:
 8008fb8:	7843      	ldrb	r3, [r0, #1]
 8008fba:	7801      	ldrb	r1, [r0, #0]
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	f003 020f 	and.w	r2, r3, #15
 8008fc2:	f88d 2006 	strb.w	r2, [sp, #6]
 8008fc6:	091b      	lsrs	r3, r3, #4
 8008fc8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008fcc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	f363 000f 	bfi	r0, r3, #0, #16
 8008fd6:	f362 401f 	bfi	r0, r2, #16, #16
 8008fda:	b002      	add	sp, #8
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <uxr_object_id_to_raw>:
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8008fec:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8008ff0:	f881 c000 	strb.w	ip, [r1]
 8008ff4:	7048      	strb	r0, [r1, #1]
 8008ff6:	b002      	add	sp, #8
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop

08008ffc <on_get_fragmentation_info>:
 8008ffc:	b500      	push	{lr}
 8008ffe:	b08b      	sub	sp, #44	@ 0x2c
 8009000:	4601      	mov	r1, r0
 8009002:	2204      	movs	r2, #4
 8009004:	a802      	add	r0, sp, #8
 8009006:	f7ff fdff 	bl	8008c08 <ucdr_init_buffer>
 800900a:	f10d 0305 	add.w	r3, sp, #5
 800900e:	f10d 0206 	add.w	r2, sp, #6
 8009012:	a901      	add	r1, sp, #4
 8009014:	a802      	add	r0, sp, #8
 8009016:	f001 f99b 	bl	800a350 <uxr_read_submessage_header>
 800901a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800901e:	2b0d      	cmp	r3, #13
 8009020:	d003      	beq.n	800902a <on_get_fragmentation_info+0x2e>
 8009022:	2000      	movs	r0, #0
 8009024:	b00b      	add	sp, #44	@ 0x2c
 8009026:	f85d fb04 	ldr.w	pc, [sp], #4
 800902a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800902e:	f013 0f02 	tst.w	r3, #2
 8009032:	bf14      	ite	ne
 8009034:	2002      	movne	r0, #2
 8009036:	2001      	moveq	r0, #1
 8009038:	b00b      	add	sp, #44	@ 0x2c
 800903a:	f85d fb04 	ldr.w	pc, [sp], #4
 800903e:	bf00      	nop

08009040 <read_submessage_get_info>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	2500      	movs	r5, #0
 8009044:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8009048:	4604      	mov	r4, r0
 800904a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800904e:	460e      	mov	r6, r1
 8009050:	a810      	add	r0, sp, #64	@ 0x40
 8009052:	4629      	mov	r1, r5
 8009054:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8009058:	f007 f8dc 	bl	8010214 <memset>
 800905c:	a903      	add	r1, sp, #12
 800905e:	4630      	mov	r0, r6
 8009060:	f002 f94a 	bl	800b2f8 <uxr_deserialize_GET_INFO_Payload>
 8009064:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009068:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800906c:	4620      	mov	r0, r4
 800906e:	f000 ffe5 	bl	800a03c <uxr_session_header_offset>
 8009072:	462b      	mov	r3, r5
 8009074:	9000      	str	r0, [sp, #0]
 8009076:	220c      	movs	r2, #12
 8009078:	a905      	add	r1, sp, #20
 800907a:	a808      	add	r0, sp, #32
 800907c:	f7ff fdb2 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 8009080:	a910      	add	r1, sp, #64	@ 0x40
 8009082:	a808      	add	r0, sp, #32
 8009084:	f002 f9aa 	bl	800b3dc <uxr_serialize_INFO_Payload>
 8009088:	9b08      	ldr	r3, [sp, #32]
 800908a:	462a      	mov	r2, r5
 800908c:	4629      	mov	r1, r5
 800908e:	4620      	mov	r0, r4
 8009090:	f000 ff7e 	bl	8009f90 <uxr_stamp_session_header>
 8009094:	a808      	add	r0, sp, #32
 8009096:	f7ff fde3 	bl	8008c60 <ucdr_buffer_length>
 800909a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800909c:	4602      	mov	r2, r0
 800909e:	a905      	add	r1, sp, #20
 80090a0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80090a4:	47a0      	blx	r4
 80090a6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80090aa:	bd70      	pop	{r4, r5, r6, pc}

080090ac <write_submessage_acknack.isra.0>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	b092      	sub	sp, #72	@ 0x48
 80090b0:	4605      	mov	r5, r0
 80090b2:	460e      	mov	r6, r1
 80090b4:	4614      	mov	r4, r2
 80090b6:	f000 ffc1 	bl	800a03c <uxr_session_header_offset>
 80090ba:	a905      	add	r1, sp, #20
 80090bc:	9000      	str	r0, [sp, #0]
 80090be:	2300      	movs	r3, #0
 80090c0:	a80a      	add	r0, sp, #40	@ 0x28
 80090c2:	2211      	movs	r2, #17
 80090c4:	f7ff fd8e 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 80090c8:	2218      	movs	r2, #24
 80090ca:	fb02 5404 	mla	r4, r2, r4, r5
 80090ce:	2300      	movs	r3, #0
 80090d0:	2205      	movs	r2, #5
 80090d2:	3450      	adds	r4, #80	@ 0x50
 80090d4:	210a      	movs	r1, #10
 80090d6:	a80a      	add	r0, sp, #40	@ 0x28
 80090d8:	f001 f920 	bl	800a31c <uxr_buffer_submessage_header>
 80090dc:	a903      	add	r1, sp, #12
 80090de:	4620      	mov	r0, r4
 80090e0:	f004 ff20 	bl	800df24 <uxr_compute_acknack>
 80090e4:	ba40      	rev16	r0, r0
 80090e6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80090ea:	a903      	add	r1, sp, #12
 80090ec:	a80a      	add	r0, sp, #40	@ 0x28
 80090ee:	f88d 6010 	strb.w	r6, [sp, #16]
 80090f2:	f002 f9e3 	bl	800b4bc <uxr_serialize_ACKNACK_Payload>
 80090f6:	2200      	movs	r2, #0
 80090f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090fa:	4611      	mov	r1, r2
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 ff47 	bl	8009f90 <uxr_stamp_session_header>
 8009102:	a80a      	add	r0, sp, #40	@ 0x28
 8009104:	f7ff fdac 	bl	8008c60 <ucdr_buffer_length>
 8009108:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800910a:	4602      	mov	r2, r0
 800910c:	a905      	add	r1, sp, #20
 800910e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009112:	47a0      	blx	r4
 8009114:	b012      	add	sp, #72	@ 0x48
 8009116:	bd70      	pop	{r4, r5, r6, pc}

08009118 <uxr_init_session>:
 8009118:	b510      	push	{r4, lr}
 800911a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8009150 <uxr_init_session+0x38>
 800911e:	2300      	movs	r3, #0
 8009120:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8009124:	4604      	mov	r4, r0
 8009126:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800912a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800912e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8009132:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8009136:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800913a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800913e:	2181      	movs	r1, #129	@ 0x81
 8009140:	f000 fe92 	bl	8009e68 <uxr_init_session_info>
 8009144:	f104 0008 	add.w	r0, r4, #8
 8009148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800914c:	f001 b802 	b.w	800a154 <uxr_init_stream_storage>
	...

08009158 <uxr_set_status_callback>:
 8009158:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop

08009160 <uxr_set_topic_callback>:
 8009160:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop

08009168 <uxr_set_request_callback>:
 8009168:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop

08009170 <uxr_set_reply_callback>:
 8009170:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop

08009178 <uxr_create_output_best_effort_stream>:
 8009178:	b510      	push	{r4, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	e9cd 2100 	strd	r2, r1, [sp]
 8009180:	4604      	mov	r4, r0
 8009182:	f000 ff5b 	bl	800a03c <uxr_session_header_offset>
 8009186:	e9dd 2100 	ldrd	r2, r1, [sp]
 800918a:	4603      	mov	r3, r0
 800918c:	f104 0008 	add.w	r0, r4, #8
 8009190:	b004      	add	sp, #16
 8009192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009196:	f001 b827 	b.w	800a1e8 <uxr_add_output_best_effort_buffer>
 800919a:	bf00      	nop

0800919c <uxr_create_output_reliable_stream>:
 800919c:	b510      	push	{r4, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80091a4:	4604      	mov	r4, r0
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	f000 ff48 	bl	800a03c <uxr_session_header_offset>
 80091ac:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80091b0:	9000      	str	r0, [sp, #0]
 80091b2:	9905      	ldr	r1, [sp, #20]
 80091b4:	f104 0008 	add.w	r0, r4, #8
 80091b8:	f001 f82a 	bl	800a210 <uxr_add_output_reliable_buffer>
 80091bc:	2200      	movs	r2, #0
 80091be:	b2c3      	uxtb	r3, r0
 80091c0:	f363 0207 	bfi	r2, r3, #0, #8
 80091c4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80091c8:	f363 220f 	bfi	r2, r3, #8, #8
 80091cc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80091d0:	f363 4217 	bfi	r2, r3, #16, #8
 80091d4:	0e03      	lsrs	r3, r0, #24
 80091d6:	f363 621f 	bfi	r2, r3, #24, #8
 80091da:	4610      	mov	r0, r2
 80091dc:	b008      	add	sp, #32
 80091de:	bd10      	pop	{r4, pc}

080091e0 <uxr_create_input_best_effort_stream>:
 80091e0:	b082      	sub	sp, #8
 80091e2:	3008      	adds	r0, #8
 80091e4:	b002      	add	sp, #8
 80091e6:	f001 b82d 	b.w	800a244 <uxr_add_input_best_effort_buffer>
 80091ea:	bf00      	nop

080091ec <uxr_create_input_reliable_stream>:
 80091ec:	b510      	push	{r4, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	4c0b      	ldr	r4, [pc, #44]	@ (8009220 <uxr_create_input_reliable_stream+0x34>)
 80091f2:	9400      	str	r4, [sp, #0]
 80091f4:	3008      	adds	r0, #8
 80091f6:	f001 f83b 	bl	800a270 <uxr_add_input_reliable_buffer>
 80091fa:	2200      	movs	r2, #0
 80091fc:	b2c3      	uxtb	r3, r0
 80091fe:	f363 0207 	bfi	r2, r3, #0, #8
 8009202:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009206:	f363 220f 	bfi	r2, r3, #8, #8
 800920a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800920e:	f363 4217 	bfi	r2, r3, #16, #8
 8009212:	0e03      	lsrs	r3, r0, #24
 8009214:	f363 621f 	bfi	r2, r3, #24, #8
 8009218:	4610      	mov	r0, r2
 800921a:	b004      	add	sp, #16
 800921c:	bd10      	pop	{r4, pc}
 800921e:	bf00      	nop
 8009220:	08008ffd 	.word	0x08008ffd

08009224 <uxr_epoch_nanos>:
 8009224:	b510      	push	{r4, lr}
 8009226:	4604      	mov	r4, r0
 8009228:	f001 f8d8 	bl	800a3dc <uxr_nanos>
 800922c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8009230:	1ac0      	subs	r0, r0, r3
 8009232:	eb61 0102 	sbc.w	r1, r1, r2
 8009236:	bd10      	pop	{r4, pc}

08009238 <uxr_flash_output_streams>:
 8009238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800923c:	7e03      	ldrb	r3, [r0, #24]
 800923e:	b084      	sub	sp, #16
 8009240:	4604      	mov	r4, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d035      	beq.n	80092b2 <uxr_flash_output_streams+0x7a>
 8009246:	f04f 0900 	mov.w	r9, #0
 800924a:	4648      	mov	r0, r9
 800924c:	f10d 0802 	add.w	r8, sp, #2
 8009250:	af03      	add	r7, sp, #12
 8009252:	ae02      	add	r6, sp, #8
 8009254:	e006      	b.n	8009264 <uxr_flash_output_streams+0x2c>
 8009256:	7e23      	ldrb	r3, [r4, #24]
 8009258:	f109 0901 	add.w	r9, r9, #1
 800925c:	fa5f f089 	uxtb.w	r0, r9
 8009260:	4283      	cmp	r3, r0
 8009262:	d926      	bls.n	80092b2 <uxr_flash_output_streams+0x7a>
 8009264:	2201      	movs	r2, #1
 8009266:	4611      	mov	r1, r2
 8009268:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800926c:	f000 ff1e 	bl	800a0ac <uxr_stream_id>
 8009270:	3508      	adds	r5, #8
 8009272:	4684      	mov	ip, r0
 8009274:	4643      	mov	r3, r8
 8009276:	463a      	mov	r2, r7
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	f8cd c004 	str.w	ip, [sp, #4]
 8009280:	f004 fed6 	bl	800e030 <uxr_prepare_best_effort_buffer_to_send>
 8009284:	2800      	cmp	r0, #0
 8009286:	d0e6      	beq.n	8009256 <uxr_flash_output_streams+0x1e>
 8009288:	9b02      	ldr	r3, [sp, #8]
 800928a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800928e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009292:	4620      	mov	r0, r4
 8009294:	f000 fe7c 	bl	8009f90 <uxr_stamp_session_header>
 8009298:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800929a:	9a03      	ldr	r2, [sp, #12]
 800929c:	685d      	ldr	r5, [r3, #4]
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	9902      	ldr	r1, [sp, #8]
 80092a2:	47a8      	blx	r5
 80092a4:	f109 0901 	add.w	r9, r9, #1
 80092a8:	7e23      	ldrb	r3, [r4, #24]
 80092aa:	fa5f f089 	uxtb.w	r0, r9
 80092ae:	4283      	cmp	r3, r0
 80092b0:	d8d8      	bhi.n	8009264 <uxr_flash_output_streams+0x2c>
 80092b2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80092b6:	b38b      	cbz	r3, 800931c <uxr_flash_output_streams+0xe4>
 80092b8:	f04f 0900 	mov.w	r9, #0
 80092bc:	f10d 0802 	add.w	r8, sp, #2
 80092c0:	af03      	add	r7, sp, #12
 80092c2:	ae02      	add	r6, sp, #8
 80092c4:	4648      	mov	r0, r9
 80092c6:	2201      	movs	r2, #1
 80092c8:	2102      	movs	r1, #2
 80092ca:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80092ce:	f000 feed 	bl	800a0ac <uxr_stream_id>
 80092d2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80092d6:	3520      	adds	r5, #32
 80092d8:	9001      	str	r0, [sp, #4]
 80092da:	e00d      	b.n	80092f8 <uxr_flash_output_streams+0xc0>
 80092dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80092e0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80092e4:	9b02      	ldr	r3, [sp, #8]
 80092e6:	f000 fe53 	bl	8009f90 <uxr_stamp_session_header>
 80092ea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80092ec:	9a03      	ldr	r2, [sp, #12]
 80092ee:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80092f2:	9902      	ldr	r1, [sp, #8]
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	47d0      	blx	sl
 80092f8:	4643      	mov	r3, r8
 80092fa:	463a      	mov	r2, r7
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	f005 f8b4 	bl	800e46c <uxr_prepare_next_reliable_buffer_to_send>
 8009304:	4603      	mov	r3, r0
 8009306:	4620      	mov	r0, r4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e7      	bne.n	80092dc <uxr_flash_output_streams+0xa4>
 800930c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8009310:	f109 0901 	add.w	r9, r9, #1
 8009314:	fa5f f089 	uxtb.w	r0, r9
 8009318:	4283      	cmp	r3, r0
 800931a:	d8d4      	bhi.n	80092c6 <uxr_flash_output_streams+0x8e>
 800931c:	b004      	add	sp, #16
 800931e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009322:	bf00      	nop

08009324 <read_submessage_info>:
 8009324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009328:	460d      	mov	r5, r1
 800932a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800932e:	4669      	mov	r1, sp
 8009330:	4607      	mov	r7, r0
 8009332:	4628      	mov	r0, r5
 8009334:	f001 feee 	bl	800b114 <uxr_deserialize_BaseObjectReply>
 8009338:	a902      	add	r1, sp, #8
 800933a:	4604      	mov	r4, r0
 800933c:	4628      	mov	r0, r5
 800933e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8009342:	f7fe fc9d 	bl	8007c80 <ucdr_deserialize_bool>
 8009346:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800934a:	4004      	ands	r4, r0
 800934c:	b2e4      	uxtb	r4, r4
 800934e:	b95b      	cbnz	r3, 8009368 <read_submessage_info+0x44>
 8009350:	a987      	add	r1, sp, #540	@ 0x21c
 8009352:	4628      	mov	r0, r5
 8009354:	f7fe fc94 	bl	8007c80 <ucdr_deserialize_bool>
 8009358:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800935c:	4606      	mov	r6, r0
 800935e:	b94b      	cbnz	r3, 8009374 <read_submessage_info+0x50>
 8009360:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8009364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009368:	a903      	add	r1, sp, #12
 800936a:	4628      	mov	r0, r5
 800936c:	f001 fd7a 	bl	800ae64 <uxr_deserialize_ObjectVariant>
 8009370:	4004      	ands	r4, r0
 8009372:	e7ed      	b.n	8009350 <read_submessage_info+0x2c>
 8009374:	a988      	add	r1, sp, #544	@ 0x220
 8009376:	4628      	mov	r0, r5
 8009378:	f7fe fcb0 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800937c:	4234      	tst	r4, r6
 800937e:	d0ef      	beq.n	8009360 <read_submessage_info+0x3c>
 8009380:	2800      	cmp	r0, #0
 8009382:	d0ed      	beq.n	8009360 <read_submessage_info+0x3c>
 8009384:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8009388:	2b0d      	cmp	r3, #13
 800938a:	d1e9      	bne.n	8009360 <read_submessage_info+0x3c>
 800938c:	a98a      	add	r1, sp, #552	@ 0x228
 800938e:	4628      	mov	r0, r5
 8009390:	f7ff fa4a 	bl	8008828 <ucdr_deserialize_int16_t>
 8009394:	b140      	cbz	r0, 80093a8 <read_submessage_info+0x84>
 8009396:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800939a:	2b00      	cmp	r3, #0
 800939c:	dd07      	ble.n	80093ae <read_submessage_info+0x8a>
 800939e:	f1b8 0f00 	cmp.w	r8, #0
 80093a2:	bf14      	ite	ne
 80093a4:	2001      	movne	r0, #1
 80093a6:	2002      	moveq	r0, #2
 80093a8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80093ac:	e7d8      	b.n	8009360 <read_submessage_info+0x3c>
 80093ae:	2000      	movs	r0, #0
 80093b0:	e7fa      	b.n	80093a8 <read_submessage_info+0x84>
 80093b2:	bf00      	nop

080093b4 <read_submessage_list>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	b097      	sub	sp, #92	@ 0x5c
 80093ba:	4ec1      	ldr	r6, [pc, #772]	@ (80096c0 <read_submessage_list+0x30c>)
 80093bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80093be:	4604      	mov	r4, r0
 80093c0:	460d      	mov	r5, r1
 80093c2:	f04f 0801 	mov.w	r8, #1
 80093c6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80093ca:	aa0c      	add	r2, sp, #48	@ 0x30
 80093cc:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80093d0:	4628      	mov	r0, r5
 80093d2:	f000 ffbd 	bl	800a350 <uxr_read_submessage_header>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	f000 813e 	beq.w	8009658 <read_submessage_list+0x2a4>
 80093dc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80093e0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80093e4:	3b02      	subs	r3, #2
 80093e6:	2b0d      	cmp	r3, #13
 80093e8:	d8ed      	bhi.n	80093c6 <read_submessage_list+0x12>
 80093ea:	a101      	add	r1, pc, #4	@ (adr r1, 80093f0 <read_submessage_list+0x3c>)
 80093ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093f0:	0800964f 	.word	0x0800964f
 80093f4:	080093c7 	.word	0x080093c7
 80093f8:	0800963f 	.word	0x0800963f
 80093fc:	080095dd 	.word	0x080095dd
 8009400:	080095d3 	.word	0x080095d3
 8009404:	080093c7 	.word	0x080093c7
 8009408:	080093c7 	.word	0x080093c7
 800940c:	08009533 	.word	0x08009533
 8009410:	080094c3 	.word	0x080094c3
 8009414:	08009483 	.word	0x08009483
 8009418:	080093c7 	.word	0x080093c7
 800941c:	080093c7 	.word	0x080093c7
 8009420:	080093c7 	.word	0x080093c7
 8009424:	08009429 	.word	0x08009429
 8009428:	a910      	add	r1, sp, #64	@ 0x40
 800942a:	4628      	mov	r0, r5
 800942c:	f002 f896 	bl	800b55c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8009430:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8009434:	f1b9 0f00 	cmp.w	r9, #0
 8009438:	f000 8116 	beq.w	8009668 <read_submessage_list+0x2b4>
 800943c:	f000 ffce 	bl	800a3dc <uxr_nanos>
 8009440:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009448:	2100      	movs	r1, #0
 800944a:	468c      	mov	ip, r1
 800944c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8009450:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8009454:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009456:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8009458:	468c      	mov	ip, r1
 800945a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800945e:	46e2      	mov	sl, ip
 8009460:	46bc      	mov	ip, r7
 8009462:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8009466:	fbc0 7106 	smlal	r7, r1, r0, r6
 800946a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800946e:	e9cd 7100 	strd	r7, r1, [sp]
 8009472:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8009476:	9106      	str	r1, [sp, #24]
 8009478:	4620      	mov	r0, r4
 800947a:	47c8      	blx	r9
 800947c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8009480:	e7a1      	b.n	80093c6 <read_submessage_list+0x12>
 8009482:	a910      	add	r1, sp, #64	@ 0x40
 8009484:	4628      	mov	r0, r5
 8009486:	f002 f857 	bl	800b538 <uxr_deserialize_HEARTBEAT_Payload>
 800948a:	2100      	movs	r1, #0
 800948c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8009490:	f000 fe36 	bl	800a100 <uxr_stream_id_from_raw>
 8009494:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8009498:	900f      	str	r0, [sp, #60]	@ 0x3c
 800949a:	4639      	mov	r1, r7
 800949c:	f104 0008 	add.w	r0, r4, #8
 80094a0:	f000 ff1c 	bl	800a2dc <uxr_get_input_reliable_stream>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d08e      	beq.n	80093c6 <read_submessage_list+0x12>
 80094a8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80094ac:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80094b0:	f004 fd2c 	bl	800df0c <uxr_process_heartbeat>
 80094b4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80094b8:	463a      	mov	r2, r7
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff fdf6 	bl	80090ac <write_submessage_acknack.isra.0>
 80094c0:	e781      	b.n	80093c6 <read_submessage_list+0x12>
 80094c2:	a910      	add	r1, sp, #64	@ 0x40
 80094c4:	4628      	mov	r0, r5
 80094c6:	f002 f80f 	bl	800b4e8 <uxr_deserialize_ACKNACK_Payload>
 80094ca:	2100      	movs	r1, #0
 80094cc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80094d0:	f000 fe16 	bl	800a100 <uxr_stream_id_from_raw>
 80094d4:	900d      	str	r0, [sp, #52]	@ 0x34
 80094d6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80094da:	f104 0008 	add.w	r0, r4, #8
 80094de:	f000 fee9 	bl	800a2b4 <uxr_get_output_reliable_stream>
 80094e2:	4607      	mov	r7, r0
 80094e4:	2800      	cmp	r0, #0
 80094e6:	f43f af6e 	beq.w	80093c6 <read_submessage_list+0x12>
 80094ea:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80094ee:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80094f2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80094f6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80094fa:	b289      	uxth	r1, r1
 80094fc:	f005 f860 	bl	800e5c0 <uxr_process_acknack>
 8009500:	4638      	mov	r0, r7
 8009502:	f005 f81d 	bl	800e540 <uxr_begin_output_nack_buffer_it>
 8009506:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800950a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800950e:	e006      	b.n	800951e <read_submessage_list+0x16a>
 8009510:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009512:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009514:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8009518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	47c8      	blx	r9
 800951e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8009522:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009524:	4651      	mov	r1, sl
 8009526:	4638      	mov	r0, r7
 8009528:	f005 f80c 	bl	800e544 <uxr_next_reliable_nack_buffer_to_send>
 800952c:	2800      	cmp	r0, #0
 800952e:	d1ef      	bne.n	8009510 <read_submessage_list+0x15c>
 8009530:	e749      	b.n	80093c6 <read_submessage_list+0x12>
 8009532:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8009536:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800953a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800953e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8009542:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8009546:	4651      	mov	r1, sl
 8009548:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800954c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8009550:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8009554:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8009558:	4628      	mov	r0, r5
 800955a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800955e:	f001 fd23 	bl	800afa8 <uxr_deserialize_BaseObjectRequest>
 8009562:	4650      	mov	r0, sl
 8009564:	a90f      	add	r1, sp, #60	@ 0x3c
 8009566:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800956a:	f000 fd8d 	bl	800a088 <uxr_parse_base_object_request>
 800956e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8009572:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009574:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8009578:	9110      	str	r1, [sp, #64]	@ 0x40
 800957a:	3f04      	subs	r7, #4
 800957c:	f009 090e 	and.w	r9, r9, #14
 8009580:	b2bf      	uxth	r7, r7
 8009582:	f1bb 0f00 	cmp.w	fp, #0
 8009586:	d006      	beq.n	8009596 <read_submessage_list+0x1e2>
 8009588:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	4652      	mov	r2, sl
 8009590:	2300      	movs	r3, #0
 8009592:	4620      	mov	r0, r4
 8009594:	47d8      	blx	fp
 8009596:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8009598:	b16a      	cbz	r2, 80095b6 <read_submessage_list+0x202>
 800959a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800959c:	2100      	movs	r1, #0
 800959e:	3802      	subs	r0, #2
 80095a0:	e002      	b.n	80095a8 <read_submessage_list+0x1f4>
 80095a2:	3101      	adds	r1, #1
 80095a4:	4291      	cmp	r1, r2
 80095a6:	d006      	beq.n	80095b6 <read_submessage_list+0x202>
 80095a8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80095ac:	4553      	cmp	r3, sl
 80095ae:	d1f8      	bne.n	80095a2 <read_submessage_list+0x1ee>
 80095b0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80095b2:	2200      	movs	r2, #0
 80095b4:	545a      	strb	r2, [r3, r1]
 80095b6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80095ba:	9102      	str	r1, [sp, #8]
 80095bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80095be:	9101      	str	r1, [sp, #4]
 80095c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80095c2:	9100      	str	r1, [sp, #0]
 80095c4:	464b      	mov	r3, r9
 80095c6:	463a      	mov	r2, r7
 80095c8:	4629      	mov	r1, r5
 80095ca:	4620      	mov	r0, r4
 80095cc:	f005 f87c 	bl	800e6c8 <read_submessage_format>
 80095d0:	e6f9      	b.n	80093c6 <read_submessage_list+0x12>
 80095d2:	4629      	mov	r1, r5
 80095d4:	4620      	mov	r0, r4
 80095d6:	f7ff fea5 	bl	8009324 <read_submessage_info>
 80095da:	e6f4      	b.n	80093c6 <read_submessage_list+0x12>
 80095dc:	2a00      	cmp	r2, #0
 80095de:	d03e      	beq.n	800965e <read_submessage_list+0x2aa>
 80095e0:	a910      	add	r1, sp, #64	@ 0x40
 80095e2:	4628      	mov	r0, r5
 80095e4:	f001 fedc 	bl	800b3a0 <uxr_deserialize_STATUS_Payload>
 80095e8:	a90e      	add	r1, sp, #56	@ 0x38
 80095ea:	aa0d      	add	r2, sp, #52	@ 0x34
 80095ec:	a810      	add	r0, sp, #64	@ 0x40
 80095ee:	f000 fd4b 	bl	800a088 <uxr_parse_base_object_request>
 80095f2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80095f6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80095f8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80095fc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8009600:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009602:	f1ba 0f00 	cmp.w	sl, #0
 8009606:	d006      	beq.n	8009616 <read_submessage_list+0x262>
 8009608:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	463a      	mov	r2, r7
 8009610:	464b      	mov	r3, r9
 8009612:	4620      	mov	r0, r4
 8009614:	47d0      	blx	sl
 8009616:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8009618:	2a00      	cmp	r2, #0
 800961a:	f43f aed4 	beq.w	80093c6 <read_submessage_list+0x12>
 800961e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009620:	2100      	movs	r1, #0
 8009622:	3802      	subs	r0, #2
 8009624:	e003      	b.n	800962e <read_submessage_list+0x27a>
 8009626:	3101      	adds	r1, #1
 8009628:	4291      	cmp	r1, r2
 800962a:	f43f aecc 	beq.w	80093c6 <read_submessage_list+0x12>
 800962e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8009632:	42bb      	cmp	r3, r7
 8009634:	d1f7      	bne.n	8009626 <read_submessage_list+0x272>
 8009636:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009638:	f803 9001 	strb.w	r9, [r3, r1]
 800963c:	e6c3      	b.n	80093c6 <read_submessage_list+0x12>
 800963e:	2a00      	cmp	r2, #0
 8009640:	f47f aec1 	bne.w	80093c6 <read_submessage_list+0x12>
 8009644:	4629      	mov	r1, r5
 8009646:	4620      	mov	r0, r4
 8009648:	f000 fc64 	bl	8009f14 <uxr_read_create_session_status>
 800964c:	e6bb      	b.n	80093c6 <read_submessage_list+0x12>
 800964e:	4629      	mov	r1, r5
 8009650:	4620      	mov	r0, r4
 8009652:	f7ff fcf5 	bl	8009040 <read_submessage_get_info>
 8009656:	e6b6      	b.n	80093c6 <read_submessage_list+0x12>
 8009658:	b017      	add	sp, #92	@ 0x5c
 800965a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965e:	4629      	mov	r1, r5
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fc63 	bl	8009f2c <uxr_read_delete_session_status>
 8009666:	e6ae      	b.n	80093c6 <read_submessage_list+0x12>
 8009668:	f000 feb8 	bl	800a3dc <uxr_nanos>
 800966c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800966e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009670:	464f      	mov	r7, r9
 8009672:	fbc3 2706 	smlal	r2, r7, r3, r6
 8009676:	1812      	adds	r2, r2, r0
 8009678:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800967a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800967c:	eb47 0101 	adc.w	r1, r7, r1
 8009680:	464f      	mov	r7, r9
 8009682:	fbc3 0706 	smlal	r0, r7, r3, r6
 8009686:	463b      	mov	r3, r7
 8009688:	4684      	mov	ip, r0
 800968a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800968e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8009692:	eb1c 0c00 	adds.w	ip, ip, r0
 8009696:	464f      	mov	r7, r9
 8009698:	eb43 0307 	adc.w	r3, r3, r7
 800969c:	ebb2 0c0c 	subs.w	ip, r2, ip
 80096a0:	eb61 0303 	sbc.w	r3, r1, r3
 80096a4:	0fda      	lsrs	r2, r3, #31
 80096a6:	eb12 020c 	adds.w	r2, r2, ip
 80096aa:	f143 0300 	adc.w	r3, r3, #0
 80096ae:	0852      	lsrs	r2, r2, #1
 80096b0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80096b4:	105b      	asrs	r3, r3, #1
 80096b6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80096ba:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80096be:	e6dd      	b.n	800947c <read_submessage_list+0xc8>
 80096c0:	3b9aca00 	.word	0x3b9aca00

080096c4 <listen_message_reliably>:
 80096c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c8:	1e0b      	subs	r3, r1, #0
 80096ca:	b09d      	sub	sp, #116	@ 0x74
 80096cc:	bfb8      	it	lt
 80096ce:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80096d2:	4680      	mov	r8, r0
 80096d4:	9305      	str	r3, [sp, #20]
 80096d6:	f000 fe67 	bl	800a3a8 <uxr_millis>
 80096da:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80096de:	4681      	mov	r9, r0
 80096e0:	2a00      	cmp	r2, #0
 80096e2:	f000 80a1 	beq.w	8009828 <listen_message_reliably+0x164>
 80096e6:	2600      	movs	r6, #0
 80096e8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80096ec:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	4630      	mov	r0, r6
 80096f4:	460f      	mov	r7, r1
 80096f6:	e00f      	b.n	8009718 <listen_message_reliably+0x54>
 80096f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80096fc:	9903      	ldr	r1, [sp, #12]
 80096fe:	455a      	cmp	r2, fp
 8009700:	f106 0601 	add.w	r6, r6, #1
 8009704:	eb73 0101 	sbcs.w	r1, r3, r1
 8009708:	b2f0      	uxtb	r0, r6
 800970a:	da01      	bge.n	8009710 <listen_message_reliably+0x4c>
 800970c:	4693      	mov	fp, r2
 800970e:	9303      	str	r3, [sp, #12]
 8009710:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8009714:	4283      	cmp	r3, r0
 8009716:	d960      	bls.n	80097da <listen_message_reliably+0x116>
 8009718:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800971c:	2102      	movs	r1, #2
 800971e:	2201      	movs	r2, #1
 8009720:	f000 fcc4 	bl	800a0ac <uxr_stream_id>
 8009724:	00e4      	lsls	r4, r4, #3
 8009726:	f104 0520 	add.w	r5, r4, #32
 800972a:	4445      	add	r5, r8
 800972c:	4601      	mov	r1, r0
 800972e:	463b      	mov	r3, r7
 8009730:	464a      	mov	r2, r9
 8009732:	4628      	mov	r0, r5
 8009734:	9109      	str	r1, [sp, #36]	@ 0x24
 8009736:	f004 fed9 	bl	800e4ec <uxr_update_output_stream_heartbeat_timestamp>
 800973a:	eb08 0304 	add.w	r3, r8, r4
 800973e:	2800      	cmp	r0, #0
 8009740:	d0da      	beq.n	80096f8 <listen_message_reliably+0x34>
 8009742:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8009746:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	4640      	mov	r0, r8
 800974e:	f000 fc75 	bl	800a03c <uxr_session_header_offset>
 8009752:	3501      	adds	r5, #1
 8009754:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8009758:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800975c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8009760:	2300      	movs	r3, #0
 8009762:	2211      	movs	r2, #17
 8009764:	9000      	str	r0, [sp, #0]
 8009766:	a90c      	add	r1, sp, #48	@ 0x30
 8009768:	4650      	mov	r0, sl
 800976a:	f7ff fa3b 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 800976e:	2300      	movs	r3, #0
 8009770:	2205      	movs	r2, #5
 8009772:	210b      	movs	r1, #11
 8009774:	4650      	mov	r0, sl
 8009776:	f000 fdd1 	bl	800a31c <uxr_buffer_submessage_header>
 800977a:	8968      	ldrh	r0, [r5, #10]
 800977c:	2101      	movs	r1, #1
 800977e:	f005 f86d 	bl	800e85c <uxr_seq_num_add>
 8009782:	892b      	ldrh	r3, [r5, #8]
 8009784:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8009788:	4602      	mov	r2, r0
 800978a:	9b04      	ldr	r3, [sp, #16]
 800978c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8009790:	a90a      	add	r1, sp, #40	@ 0x28
 8009792:	4650      	mov	r0, sl
 8009794:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8009798:	f001 feba 	bl	800b510 <uxr_serialize_HEARTBEAT_Payload>
 800979c:	2200      	movs	r2, #0
 800979e:	4611      	mov	r1, r2
 80097a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097a2:	4640      	mov	r0, r8
 80097a4:	f000 fbf4 	bl	8009f90 <uxr_stamp_session_header>
 80097a8:	4650      	mov	r0, sl
 80097aa:	f7ff fa59 	bl	8008c60 <ucdr_buffer_length>
 80097ae:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80097b2:	4602      	mov	r2, r0
 80097b4:	a90c      	add	r1, sp, #48	@ 0x30
 80097b6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80097ba:	4444      	add	r4, r8
 80097bc:	47a8      	blx	r5
 80097be:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80097c2:	9903      	ldr	r1, [sp, #12]
 80097c4:	455a      	cmp	r2, fp
 80097c6:	f106 0601 	add.w	r6, r6, #1
 80097ca:	eb73 0101 	sbcs.w	r1, r3, r1
 80097ce:	b2f0      	uxtb	r0, r6
 80097d0:	db9c      	blt.n	800970c <listen_message_reliably+0x48>
 80097d2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80097d6:	4283      	cmp	r3, r0
 80097d8:	d89e      	bhi.n	8009718 <listen_message_reliably+0x54>
 80097da:	9a03      	ldr	r2, [sp, #12]
 80097dc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80097e0:	429a      	cmp	r2, r3
 80097e2:	bf08      	it	eq
 80097e4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80097e8:	d01e      	beq.n	8009828 <listen_message_reliably+0x164>
 80097ea:	ebab 0309 	sub.w	r3, fp, r9
 80097ee:	9905      	ldr	r1, [sp, #20]
 80097f0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bf08      	it	eq
 80097f8:	2301      	moveq	r3, #1
 80097fa:	4299      	cmp	r1, r3
 80097fc:	bfa8      	it	ge
 80097fe:	4619      	movge	r1, r3
 8009800:	6894      	ldr	r4, [r2, #8]
 8009802:	6810      	ldr	r0, [r2, #0]
 8009804:	4689      	mov	r9, r1
 8009806:	460b      	mov	r3, r1
 8009808:	aa08      	add	r2, sp, #32
 800980a:	a907      	add	r1, sp, #28
 800980c:	47a0      	blx	r4
 800980e:	b968      	cbnz	r0, 800982c <listen_message_reliably+0x168>
 8009810:	9b05      	ldr	r3, [sp, #20]
 8009812:	eba3 0309 	sub.w	r3, r3, r9
 8009816:	2b00      	cmp	r3, #0
 8009818:	9305      	str	r3, [sp, #20]
 800981a:	f73f af5c 	bgt.w	80096d6 <listen_message_reliably+0x12>
 800981e:	4604      	mov	r4, r0
 8009820:	4620      	mov	r0, r4
 8009822:	b01d      	add	sp, #116	@ 0x74
 8009824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009828:	9b05      	ldr	r3, [sp, #20]
 800982a:	e7e0      	b.n	80097ee <listen_message_reliably+0x12a>
 800982c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8009830:	4604      	mov	r4, r0
 8009832:	a80c      	add	r0, sp, #48	@ 0x30
 8009834:	f7ff f9e8 	bl	8008c08 <ucdr_init_buffer>
 8009838:	2500      	movs	r5, #0
 800983a:	f10d 031a 	add.w	r3, sp, #26
 800983e:	aa06      	add	r2, sp, #24
 8009840:	a90c      	add	r1, sp, #48	@ 0x30
 8009842:	4640      	mov	r0, r8
 8009844:	f88d 5018 	strb.w	r5, [sp, #24]
 8009848:	f000 fbb6 	bl	8009fb8 <uxr_read_session_header>
 800984c:	b918      	cbnz	r0, 8009856 <listen_message_reliably+0x192>
 800984e:	4620      	mov	r0, r4
 8009850:	b01d      	add	sp, #116	@ 0x74
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	4629      	mov	r1, r5
 8009858:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800985c:	f000 fc50 	bl	800a100 <uxr_stream_id_from_raw>
 8009860:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8009864:	2d01      	cmp	r5, #1
 8009866:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800986a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800986e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8009872:	d04b      	beq.n	800990c <listen_message_reliably+0x248>
 8009874:	2d02      	cmp	r5, #2
 8009876:	d00f      	beq.n	8009898 <listen_message_reliably+0x1d4>
 8009878:	2d00      	cmp	r5, #0
 800987a:	d1e8      	bne.n	800984e <listen_message_reliably+0x18a>
 800987c:	4629      	mov	r1, r5
 800987e:	4628      	mov	r0, r5
 8009880:	f000 fc3e 	bl	800a100 <uxr_stream_id_from_raw>
 8009884:	a90c      	add	r1, sp, #48	@ 0x30
 8009886:	4602      	mov	r2, r0
 8009888:	4640      	mov	r0, r8
 800988a:	920a      	str	r2, [sp, #40]	@ 0x28
 800988c:	f7ff fd92 	bl	80093b4 <read_submessage_list>
 8009890:	4620      	mov	r0, r4
 8009892:	b01d      	add	sp, #116	@ 0x74
 8009894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009898:	4631      	mov	r1, r6
 800989a:	f108 0008 	add.w	r0, r8, #8
 800989e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80098a2:	f000 fd1b 	bl	800a2dc <uxr_get_input_reliable_stream>
 80098a6:	4607      	mov	r7, r0
 80098a8:	b338      	cbz	r0, 80098fa <listen_message_reliably+0x236>
 80098aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098ac:	9203      	str	r2, [sp, #12]
 80098ae:	a80c      	add	r0, sp, #48	@ 0x30
 80098b0:	f7ff f9da 	bl	8008c68 <ucdr_buffer_remaining>
 80098b4:	4603      	mov	r3, r0
 80098b6:	f10d 0019 	add.w	r0, sp, #25
 80098ba:	9000      	str	r0, [sp, #0]
 80098bc:	9a03      	ldr	r2, [sp, #12]
 80098be:	4651      	mov	r1, sl
 80098c0:	4638      	mov	r0, r7
 80098c2:	f004 fa29 	bl	800dd18 <uxr_receive_reliable_message>
 80098c6:	b1c0      	cbz	r0, 80098fa <listen_message_reliably+0x236>
 80098c8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80098cc:	b393      	cbz	r3, 8009934 <listen_message_reliably+0x270>
 80098ce:	ad14      	add	r5, sp, #80	@ 0x50
 80098d0:	f04f 0a02 	mov.w	sl, #2
 80098d4:	e00a      	b.n	80098ec <listen_message_reliably+0x228>
 80098d6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80098da:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 80098de:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80098e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098e4:	4629      	mov	r1, r5
 80098e6:	4640      	mov	r0, r8
 80098e8:	f7ff fd64 	bl	80093b4 <read_submessage_list>
 80098ec:	2204      	movs	r2, #4
 80098ee:	4629      	mov	r1, r5
 80098f0:	4638      	mov	r0, r7
 80098f2:	f004 fa91 	bl	800de18 <uxr_next_input_reliable_buffer_available>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d1ed      	bne.n	80098d6 <listen_message_reliably+0x212>
 80098fa:	4640      	mov	r0, r8
 80098fc:	4632      	mov	r2, r6
 80098fe:	4649      	mov	r1, r9
 8009900:	f7ff fbd4 	bl	80090ac <write_submessage_acknack.isra.0>
 8009904:	4620      	mov	r0, r4
 8009906:	b01d      	add	sp, #116	@ 0x74
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	4631      	mov	r1, r6
 800990e:	f108 0008 	add.w	r0, r8, #8
 8009912:	f000 fcd9 	bl	800a2c8 <uxr_get_input_best_effort_stream>
 8009916:	2800      	cmp	r0, #0
 8009918:	d099      	beq.n	800984e <listen_message_reliably+0x18a>
 800991a:	4651      	mov	r1, sl
 800991c:	f004 f968 	bl	800dbf0 <uxr_receive_best_effort_message>
 8009920:	2800      	cmp	r0, #0
 8009922:	d094      	beq.n	800984e <listen_message_reliably+0x18a>
 8009924:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8009928:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800992a:	a90c      	add	r1, sp, #48	@ 0x30
 800992c:	4640      	mov	r0, r8
 800992e:	f7ff fd41 	bl	80093b4 <read_submessage_list>
 8009932:	e78c      	b.n	800984e <listen_message_reliably+0x18a>
 8009934:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8009938:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800993a:	a90c      	add	r1, sp, #48	@ 0x30
 800993c:	4640      	mov	r0, r8
 800993e:	f7ff fd39 	bl	80093b4 <read_submessage_list>
 8009942:	e7c4      	b.n	80098ce <listen_message_reliably+0x20a>

08009944 <uxr_run_session_until_confirm_delivery>:
 8009944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009948:	4606      	mov	r6, r0
 800994a:	460d      	mov	r5, r1
 800994c:	f000 fd2c 	bl	800a3a8 <uxr_millis>
 8009950:	4607      	mov	r7, r0
 8009952:	4630      	mov	r0, r6
 8009954:	f7ff fc70 	bl	8009238 <uxr_flash_output_streams>
 8009958:	2d00      	cmp	r5, #0
 800995a:	f106 0808 	add.w	r8, r6, #8
 800995e:	bfa8      	it	ge
 8009960:	462c      	movge	r4, r5
 8009962:	da07      	bge.n	8009974 <uxr_run_session_until_confirm_delivery+0x30>
 8009964:	e00e      	b.n	8009984 <uxr_run_session_until_confirm_delivery+0x40>
 8009966:	f7ff fead 	bl	80096c4 <listen_message_reliably>
 800996a:	f000 fd1d 	bl	800a3a8 <uxr_millis>
 800996e:	1bc3      	subs	r3, r0, r7
 8009970:	1aec      	subs	r4, r5, r3
 8009972:	d407      	bmi.n	8009984 <uxr_run_session_until_confirm_delivery+0x40>
 8009974:	4640      	mov	r0, r8
 8009976:	f000 fcbb 	bl	800a2f0 <uxr_output_streams_confirmed>
 800997a:	4603      	mov	r3, r0
 800997c:	4621      	mov	r1, r4
 800997e:	4630      	mov	r0, r6
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0f0      	beq.n	8009966 <uxr_run_session_until_confirm_delivery+0x22>
 8009984:	4640      	mov	r0, r8
 8009986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800998a:	f000 bcb1 	b.w	800a2f0 <uxr_output_streams_confirmed>
 800998e:	bf00      	nop

08009990 <uxr_run_session_until_all_status>:
 8009990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009994:	9c08      	ldr	r4, [sp, #32]
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	4691      	mov	r9, r2
 800999c:	461d      	mov	r5, r3
 800999e:	f7ff fc4b 	bl	8009238 <uxr_flash_output_streams>
 80099a2:	b124      	cbz	r4, 80099ae <uxr_run_session_until_all_status+0x1e>
 80099a4:	4622      	mov	r2, r4
 80099a6:	21ff      	movs	r1, #255	@ 0xff
 80099a8:	4628      	mov	r0, r5
 80099aa:	f006 fc33 	bl	8010214 <memset>
 80099ae:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80099b2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80099b4:	f000 fcf8 	bl	800a3a8 <uxr_millis>
 80099b8:	3d01      	subs	r5, #1
 80099ba:	f1a9 0902 	sub.w	r9, r9, #2
 80099be:	4680      	mov	r8, r0
 80099c0:	4639      	mov	r1, r7
 80099c2:	4630      	mov	r0, r6
 80099c4:	f7ff fe7e 	bl	80096c4 <listen_message_reliably>
 80099c8:	f000 fcee 	bl	800a3a8 <uxr_millis>
 80099cc:	eba0 0008 	sub.w	r0, r0, r8
 80099d0:	1a39      	subs	r1, r7, r0
 80099d2:	b344      	cbz	r4, 8009a26 <uxr_run_session_until_all_status+0x96>
 80099d4:	4628      	mov	r0, r5
 80099d6:	46ac      	mov	ip, r5
 80099d8:	2301      	movs	r3, #1
 80099da:	e002      	b.n	80099e2 <uxr_run_session_until_all_status+0x52>
 80099dc:	42a3      	cmp	r3, r4
 80099de:	d20d      	bcs.n	80099fc <uxr_run_session_until_all_status+0x6c>
 80099e0:	3301      	adds	r3, #1
 80099e2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80099e6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80099ea:	d1f7      	bne.n	80099dc <uxr_run_session_until_all_status+0x4c>
 80099ec:	42a3      	cmp	r3, r4
 80099ee:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80099f2:	d213      	bcs.n	8009a1c <uxr_run_session_until_all_status+0x8c>
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	d0f3      	beq.n	80099e0 <uxr_run_session_until_all_status+0x50>
 80099f8:	2900      	cmp	r1, #0
 80099fa:	dce2      	bgt.n	80099c2 <uxr_run_session_until_all_status+0x32>
 80099fc:	2300      	movs	r3, #0
 80099fe:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8009a00:	442c      	add	r4, r5
 8009a02:	e001      	b.n	8009a08 <uxr_run_session_until_all_status+0x78>
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d812      	bhi.n	8009a2e <uxr_run_session_until_all_status+0x9e>
 8009a08:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009a0c:	4284      	cmp	r4, r0
 8009a0e:	d1f9      	bne.n	8009a04 <uxr_run_session_until_all_status+0x74>
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	bf8c      	ite	hi
 8009a14:	2000      	movhi	r0, #0
 8009a16:	2001      	movls	r0, #1
 8009a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	dded      	ble.n	80099fc <uxr_run_session_until_all_status+0x6c>
 8009a20:	2a00      	cmp	r2, #0
 8009a22:	d1ce      	bne.n	80099c2 <uxr_run_session_until_all_status+0x32>
 8009a24:	e7ea      	b.n	80099fc <uxr_run_session_until_all_status+0x6c>
 8009a26:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8009a28:	2001      	movs	r0, #1
 8009a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a2e:	2000      	movs	r0, #0
 8009a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009a34 <wait_session_status>:
 8009a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a38:	4604      	mov	r4, r0
 8009a3a:	b09d      	sub	sp, #116	@ 0x74
 8009a3c:	20ff      	movs	r0, #255	@ 0xff
 8009a3e:	7160      	strb	r0, [r4, #5]
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 80b6 	beq.w	8009bb4 <wait_session_status+0x180>
 8009a48:	468a      	mov	sl, r1
 8009a4a:	4691      	mov	r9, r2
 8009a4c:	f04f 0b00 	mov.w	fp, #0
 8009a50:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009a52:	464a      	mov	r2, r9
 8009a54:	e9d3 0500 	ldrd	r0, r5, [r3]
 8009a58:	4651      	mov	r1, sl
 8009a5a:	47a8      	blx	r5
 8009a5c:	f000 fca4 	bl	800a3a8 <uxr_millis>
 8009a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009a64:	4605      	mov	r5, r0
 8009a66:	e009      	b.n	8009a7c <wait_session_status+0x48>
 8009a68:	f000 fc9e 	bl	800a3a8 <uxr_millis>
 8009a6c:	1b40      	subs	r0, r0, r5
 8009a6e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	dd40      	ble.n	8009af8 <wait_session_status+0xc4>
 8009a76:	7960      	ldrb	r0, [r4, #5]
 8009a78:	28ff      	cmp	r0, #255	@ 0xff
 8009a7a:	d145      	bne.n	8009b08 <wait_session_status+0xd4>
 8009a7c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8009a7e:	a908      	add	r1, sp, #32
 8009a80:	6896      	ldr	r6, [r2, #8]
 8009a82:	6810      	ldr	r0, [r2, #0]
 8009a84:	aa09      	add	r2, sp, #36	@ 0x24
 8009a86:	47b0      	blx	r6
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d0ed      	beq.n	8009a68 <wait_session_status+0x34>
 8009a8c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8009a90:	a80c      	add	r0, sp, #48	@ 0x30
 8009a92:	f7ff f8b9 	bl	8008c08 <ucdr_init_buffer>
 8009a96:	2600      	movs	r6, #0
 8009a98:	f10d 031e 	add.w	r3, sp, #30
 8009a9c:	aa07      	add	r2, sp, #28
 8009a9e:	a90c      	add	r1, sp, #48	@ 0x30
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f88d 601c 	strb.w	r6, [sp, #28]
 8009aa6:	f000 fa87 	bl	8009fb8 <uxr_read_session_header>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d0dc      	beq.n	8009a68 <wait_session_status+0x34>
 8009aae:	4631      	mov	r1, r6
 8009ab0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8009ab4:	f000 fb24 	bl	800a100 <uxr_stream_id_from_raw>
 8009ab8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8009abc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009ac0:	9302      	str	r3, [sp, #8]
 8009ac2:	2f01      	cmp	r7, #1
 8009ac4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8009ac8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8009acc:	d05c      	beq.n	8009b88 <wait_session_status+0x154>
 8009ace:	2f02      	cmp	r7, #2
 8009ad0:	d020      	beq.n	8009b14 <wait_session_status+0xe0>
 8009ad2:	2f00      	cmp	r7, #0
 8009ad4:	d1c8      	bne.n	8009a68 <wait_session_status+0x34>
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	4638      	mov	r0, r7
 8009ada:	f000 fb11 	bl	800a100 <uxr_stream_id_from_raw>
 8009ade:	a90c      	add	r1, sp, #48	@ 0x30
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f7ff fc65 	bl	80093b4 <read_submessage_list>
 8009aea:	f000 fc5d 	bl	800a3a8 <uxr_millis>
 8009aee:	1b40      	subs	r0, r0, r5
 8009af0:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dcbe      	bgt.n	8009a76 <wait_session_status+0x42>
 8009af8:	9b03      	ldr	r3, [sp, #12]
 8009afa:	7960      	ldrb	r0, [r4, #5]
 8009afc:	f10b 0b01 	add.w	fp, fp, #1
 8009b00:	455b      	cmp	r3, fp
 8009b02:	d001      	beq.n	8009b08 <wait_session_status+0xd4>
 8009b04:	28ff      	cmp	r0, #255	@ 0xff
 8009b06:	d0a3      	beq.n	8009a50 <wait_session_status+0x1c>
 8009b08:	38ff      	subs	r0, #255	@ 0xff
 8009b0a:	bf18      	it	ne
 8009b0c:	2001      	movne	r0, #1
 8009b0e:	b01d      	add	sp, #116	@ 0x74
 8009b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b14:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	f104 0008 	add.w	r0, r4, #8
 8009b20:	f000 fbdc 	bl	800a2dc <uxr_get_input_reliable_stream>
 8009b24:	4680      	mov	r8, r0
 8009b26:	b348      	cbz	r0, 8009b7c <wait_session_status+0x148>
 8009b28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b2a:	9205      	str	r2, [sp, #20]
 8009b2c:	a80c      	add	r0, sp, #48	@ 0x30
 8009b2e:	f7ff f89b 	bl	8008c68 <ucdr_buffer_remaining>
 8009b32:	4603      	mov	r3, r0
 8009b34:	f10d 001d 	add.w	r0, sp, #29
 8009b38:	9000      	str	r0, [sp, #0]
 8009b3a:	9a05      	ldr	r2, [sp, #20]
 8009b3c:	9902      	ldr	r1, [sp, #8]
 8009b3e:	4640      	mov	r0, r8
 8009b40:	f004 f8ea 	bl	800dd18 <uxr_receive_reliable_message>
 8009b44:	b1d0      	cbz	r0, 8009b7c <wait_session_status+0x148>
 8009b46:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d03a      	beq.n	8009bc4 <wait_session_status+0x190>
 8009b4e:	9f04      	ldr	r7, [sp, #16]
 8009b50:	e00a      	b.n	8009b68 <wait_session_status+0x134>
 8009b52:	f04f 0302 	mov.w	r3, #2
 8009b56:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8009b5a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8009b5e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8009b62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b64:	f7ff fc26 	bl	80093b4 <read_submessage_list>
 8009b68:	a914      	add	r1, sp, #80	@ 0x50
 8009b6a:	2204      	movs	r2, #4
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	f004 f953 	bl	800de18 <uxr_next_input_reliable_buffer_available>
 8009b72:	4603      	mov	r3, r0
 8009b74:	a914      	add	r1, sp, #80	@ 0x50
 8009b76:	4620      	mov	r0, r4
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1ea      	bne.n	8009b52 <wait_session_status+0x11e>
 8009b7c:	9904      	ldr	r1, [sp, #16]
 8009b7e:	4632      	mov	r2, r6
 8009b80:	4620      	mov	r0, r4
 8009b82:	f7ff fa93 	bl	80090ac <write_submessage_acknack.isra.0>
 8009b86:	e76f      	b.n	8009a68 <wait_session_status+0x34>
 8009b88:	4631      	mov	r1, r6
 8009b8a:	f104 0008 	add.w	r0, r4, #8
 8009b8e:	f000 fb9b 	bl	800a2c8 <uxr_get_input_best_effort_stream>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	f43f af68 	beq.w	8009a68 <wait_session_status+0x34>
 8009b98:	9902      	ldr	r1, [sp, #8]
 8009b9a:	f004 f829 	bl	800dbf0 <uxr_receive_best_effort_message>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f43f af62 	beq.w	8009a68 <wait_session_status+0x34>
 8009ba4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8009ba8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009baa:	a90c      	add	r1, sp, #48	@ 0x30
 8009bac:	4620      	mov	r0, r4
 8009bae:	f7ff fc01 	bl	80093b4 <read_submessage_list>
 8009bb2:	e759      	b.n	8009a68 <wait_session_status+0x34>
 8009bb4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009bb6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009bba:	47a0      	blx	r4
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	b01d      	add	sp, #116	@ 0x74
 8009bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8009bc8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009bca:	a90c      	add	r1, sp, #48	@ 0x30
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f7ff fbf1 	bl	80093b4 <read_submessage_list>
 8009bd2:	e7bc      	b.n	8009b4e <wait_session_status+0x11a>

08009bd4 <uxr_delete_session_retries>:
 8009bd4:	b530      	push	{r4, r5, lr}
 8009bd6:	b08f      	sub	sp, #60	@ 0x3c
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	f000 fa2e 	bl	800a03c <uxr_session_header_offset>
 8009be0:	2300      	movs	r3, #0
 8009be2:	2210      	movs	r2, #16
 8009be4:	9000      	str	r0, [sp, #0]
 8009be6:	a902      	add	r1, sp, #8
 8009be8:	a806      	add	r0, sp, #24
 8009bea:	f7fe fffb 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 8009bee:	a906      	add	r1, sp, #24
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 f973 	bl	8009edc <uxr_buffer_delete_session>
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 f9c7 	bl	8009f90 <uxr_stamp_session_header>
 8009c02:	a806      	add	r0, sp, #24
 8009c04:	f7ff f82c 	bl	8008c60 <ucdr_buffer_length>
 8009c08:	462b      	mov	r3, r5
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	a902      	add	r1, sp, #8
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f7ff ff10 	bl	8009a34 <wait_session_status>
 8009c14:	b118      	cbz	r0, 8009c1e <uxr_delete_session_retries+0x4a>
 8009c16:	7960      	ldrb	r0, [r4, #5]
 8009c18:	fab0 f080 	clz	r0, r0
 8009c1c:	0940      	lsrs	r0, r0, #5
 8009c1e:	b00f      	add	sp, #60	@ 0x3c
 8009c20:	bd30      	pop	{r4, r5, pc}
 8009c22:	bf00      	nop

08009c24 <uxr_create_session>:
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	f100 0b08 	add.w	fp, r0, #8
 8009c2c:	b0ab      	sub	sp, #172	@ 0xac
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4658      	mov	r0, fp
 8009c32:	f000 fa99 	bl	800a168 <uxr_reset_stream_storage>
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 fa00 	bl	800a03c <uxr_session_header_offset>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9000      	str	r0, [sp, #0]
 8009c40:	221c      	movs	r2, #28
 8009c42:	a90b      	add	r1, sp, #44	@ 0x2c
 8009c44:	a812      	add	r0, sp, #72	@ 0x48
 8009c46:	f7fe ffcd 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 8009c4a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009c4c:	8a1a      	ldrh	r2, [r3, #16]
 8009c4e:	3a04      	subs	r2, #4
 8009c50:	b292      	uxth	r2, r2
 8009c52:	a912      	add	r1, sp, #72	@ 0x48
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 f917 	bl	8009e88 <uxr_buffer_create_session>
 8009c5a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f000 f983 	bl	8009f68 <uxr_stamp_create_session_header>
 8009c62:	a812      	add	r0, sp, #72	@ 0x48
 8009c64:	f7fe fffc 	bl	8008c60 <ucdr_buffer_length>
 8009c68:	23ff      	movs	r3, #255	@ 0xff
 8009c6a:	7163      	strb	r3, [r4, #5]
 8009c6c:	230a      	movs	r3, #10
 8009c6e:	46da      	mov	sl, fp
 8009c70:	9303      	str	r3, [sp, #12]
 8009c72:	4683      	mov	fp, r0
 8009c74:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009c76:	465a      	mov	r2, fp
 8009c78:	e9d3 0500 	ldrd	r0, r5, [r3]
 8009c7c:	a90b      	add	r1, sp, #44	@ 0x2c
 8009c7e:	47a8      	blx	r5
 8009c80:	f000 fb92 	bl	800a3a8 <uxr_millis>
 8009c84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009c88:	4605      	mov	r5, r0
 8009c8a:	e009      	b.n	8009ca0 <uxr_create_session+0x7c>
 8009c8c:	f000 fb8c 	bl	800a3a8 <uxr_millis>
 8009c90:	1b40      	subs	r0, r0, r5
 8009c92:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	7962      	ldrb	r2, [r4, #5]
 8009c9a:	dd38      	ble.n	8009d0e <uxr_create_session+0xea>
 8009c9c:	2aff      	cmp	r2, #255	@ 0xff
 8009c9e:	d13c      	bne.n	8009d1a <uxr_create_session+0xf6>
 8009ca0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8009ca2:	a907      	add	r1, sp, #28
 8009ca4:	6896      	ldr	r6, [r2, #8]
 8009ca6:	6810      	ldr	r0, [r2, #0]
 8009ca8:	aa08      	add	r2, sp, #32
 8009caa:	47b0      	blx	r6
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d0ed      	beq.n	8009c8c <uxr_create_session+0x68>
 8009cb0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8009cb4:	a81a      	add	r0, sp, #104	@ 0x68
 8009cb6:	f7fe ffa7 	bl	8008c08 <ucdr_init_buffer>
 8009cba:	2600      	movs	r6, #0
 8009cbc:	f10d 031a 	add.w	r3, sp, #26
 8009cc0:	aa06      	add	r2, sp, #24
 8009cc2:	a91a      	add	r1, sp, #104	@ 0x68
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f88d 6018 	strb.w	r6, [sp, #24]
 8009cca:	f000 f975 	bl	8009fb8 <uxr_read_session_header>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d0dc      	beq.n	8009c8c <uxr_create_session+0x68>
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8009cd8:	f000 fa12 	bl	800a100 <uxr_stream_id_from_raw>
 8009cdc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8009ce0:	2e01      	cmp	r6, #1
 8009ce2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8009ce6:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8009cea:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8009cee:	d053      	beq.n	8009d98 <uxr_create_session+0x174>
 8009cf0:	2e02      	cmp	r6, #2
 8009cf2:	d018      	beq.n	8009d26 <uxr_create_session+0x102>
 8009cf4:	2e00      	cmp	r6, #0
 8009cf6:	d1c9      	bne.n	8009c8c <uxr_create_session+0x68>
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f000 fa00 	bl	800a100 <uxr_stream_id_from_raw>
 8009d00:	a91a      	add	r1, sp, #104	@ 0x68
 8009d02:	4602      	mov	r2, r0
 8009d04:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d06:	4620      	mov	r0, r4
 8009d08:	f7ff fb54 	bl	80093b4 <read_submessage_list>
 8009d0c:	e7be      	b.n	8009c8c <uxr_create_session+0x68>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	9303      	str	r3, [sp, #12]
 8009d14:	d001      	beq.n	8009d1a <uxr_create_session+0xf6>
 8009d16:	2aff      	cmp	r2, #255	@ 0xff
 8009d18:	d0ac      	beq.n	8009c74 <uxr_create_session+0x50>
 8009d1a:	2a00      	cmp	r2, #0
 8009d1c:	d051      	beq.n	8009dc2 <uxr_create_session+0x19e>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	b02b      	add	sp, #172	@ 0xac
 8009d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d26:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	4650      	mov	r0, sl
 8009d30:	f000 fad4 	bl	800a2dc <uxr_get_input_reliable_stream>
 8009d34:	4680      	mov	r8, r0
 8009d36:	b348      	cbz	r0, 8009d8c <uxr_create_session+0x168>
 8009d38:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009d3a:	9205      	str	r2, [sp, #20]
 8009d3c:	a81a      	add	r0, sp, #104	@ 0x68
 8009d3e:	f7fe ff93 	bl	8008c68 <ucdr_buffer_remaining>
 8009d42:	4603      	mov	r3, r0
 8009d44:	f10d 0019 	add.w	r0, sp, #25
 8009d48:	9000      	str	r0, [sp, #0]
 8009d4a:	9a05      	ldr	r2, [sp, #20]
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	4640      	mov	r0, r8
 8009d50:	f003 ffe2 	bl	800dd18 <uxr_receive_reliable_message>
 8009d54:	b1d0      	cbz	r0, 8009d8c <uxr_create_session+0x168>
 8009d56:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d038      	beq.n	8009dd0 <uxr_create_session+0x1ac>
 8009d5e:	9e04      	ldr	r6, [sp, #16]
 8009d60:	e00a      	b.n	8009d78 <uxr_create_session+0x154>
 8009d62:	f04f 0302 	mov.w	r3, #2
 8009d66:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8009d6a:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8009d6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d74:	f7ff fb1e 	bl	80093b4 <read_submessage_list>
 8009d78:	a922      	add	r1, sp, #136	@ 0x88
 8009d7a:	2204      	movs	r2, #4
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	f004 f84b 	bl	800de18 <uxr_next_input_reliable_buffer_available>
 8009d82:	4603      	mov	r3, r0
 8009d84:	a922      	add	r1, sp, #136	@ 0x88
 8009d86:	4620      	mov	r0, r4
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1ea      	bne.n	8009d62 <uxr_create_session+0x13e>
 8009d8c:	9904      	ldr	r1, [sp, #16]
 8009d8e:	463a      	mov	r2, r7
 8009d90:	4620      	mov	r0, r4
 8009d92:	f7ff f98b 	bl	80090ac <write_submessage_acknack.isra.0>
 8009d96:	e779      	b.n	8009c8c <uxr_create_session+0x68>
 8009d98:	4639      	mov	r1, r7
 8009d9a:	4650      	mov	r0, sl
 8009d9c:	f000 fa94 	bl	800a2c8 <uxr_get_input_best_effort_stream>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	f43f af73 	beq.w	8009c8c <uxr_create_session+0x68>
 8009da6:	4649      	mov	r1, r9
 8009da8:	f003 ff22 	bl	800dbf0 <uxr_receive_best_effort_message>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f43f af6d 	beq.w	8009c8c <uxr_create_session+0x68>
 8009db2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8009db6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009db8:	a91a      	add	r1, sp, #104	@ 0x68
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7ff fafa 	bl	80093b4 <read_submessage_list>
 8009dc0:	e764      	b.n	8009c8c <uxr_create_session+0x68>
 8009dc2:	4650      	mov	r0, sl
 8009dc4:	f000 f9d0 	bl	800a168 <uxr_reset_stream_storage>
 8009dc8:	2001      	movs	r0, #1
 8009dca:	b02b      	add	sp, #172	@ 0xac
 8009dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd0:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8009dd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dd6:	a91a      	add	r1, sp, #104	@ 0x68
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f7ff faeb 	bl	80093b4 <read_submessage_list>
 8009dde:	e7be      	b.n	8009d5e <uxr_create_session+0x13a>

08009de0 <uxr_prepare_stream_to_write_submessage>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	4682      	mov	sl, r0
 8009de8:	4610      	mov	r0, r2
 8009dea:	4615      	mov	r5, r2
 8009dec:	461e      	mov	r6, r3
 8009dee:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8009df2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8009df6:	9101      	str	r1, [sp, #4]
 8009df8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8009dfc:	f000 face 	bl	800a39c <uxr_submessage_padding>
 8009e00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009e04:	f105 0904 	add.w	r9, r5, #4
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	4481      	add	r9, r0
 8009e0c:	d01d      	beq.n	8009e4a <uxr_prepare_stream_to_write_submessage+0x6a>
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d116      	bne.n	8009e40 <uxr_prepare_stream_to_write_submessage+0x60>
 8009e12:	4621      	mov	r1, r4
 8009e14:	f10a 0008 	add.w	r0, sl, #8
 8009e18:	f000 fa4c 	bl	800a2b4 <uxr_get_output_reliable_stream>
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	b158      	cbz	r0, 8009e38 <uxr_prepare_stream_to_write_submessage+0x58>
 8009e20:	4649      	mov	r1, r9
 8009e22:	4632      	mov	r2, r6
 8009e24:	f004 f9b4 	bl	800e190 <uxr_prepare_reliable_buffer_to_write>
 8009e28:	4604      	mov	r4, r0
 8009e2a:	b12c      	cbz	r4, 8009e38 <uxr_prepare_stream_to_write_submessage+0x58>
 8009e2c:	4643      	mov	r3, r8
 8009e2e:	b2aa      	uxth	r2, r5
 8009e30:	4639      	mov	r1, r7
 8009e32:	4630      	mov	r0, r6
 8009e34:	f000 fa72 	bl	800a31c <uxr_buffer_submessage_header>
 8009e38:	4620      	mov	r0, r4
 8009e3a:	b002      	add	sp, #8
 8009e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e40:	2400      	movs	r4, #0
 8009e42:	4620      	mov	r0, r4
 8009e44:	b002      	add	sp, #8
 8009e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	f10a 0008 	add.w	r0, sl, #8
 8009e50:	f000 fa28 	bl	800a2a4 <uxr_get_output_best_effort_stream>
 8009e54:	4604      	mov	r4, r0
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d0ee      	beq.n	8009e38 <uxr_prepare_stream_to_write_submessage+0x58>
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	4632      	mov	r2, r6
 8009e5e:	f004 f8c7 	bl	800dff0 <uxr_prepare_best_effort_buffer_to_write>
 8009e62:	4604      	mov	r4, r0
 8009e64:	e7e1      	b.n	8009e2a <uxr_prepare_stream_to_write_submessage+0x4a>
 8009e66:	bf00      	nop

08009e68 <uxr_init_session_info>:
 8009e68:	0e13      	lsrs	r3, r2, #24
 8009e6a:	7043      	strb	r3, [r0, #1]
 8009e6c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8009e70:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8009e74:	7001      	strb	r1, [r0, #0]
 8009e76:	70c3      	strb	r3, [r0, #3]
 8009e78:	2109      	movs	r1, #9
 8009e7a:	23ff      	movs	r3, #255	@ 0xff
 8009e7c:	f880 c002 	strb.w	ip, [r0, #2]
 8009e80:	7102      	strb	r2, [r0, #4]
 8009e82:	80c1      	strh	r1, [r0, #6]
 8009e84:	7143      	strb	r3, [r0, #5]
 8009e86:	4770      	bx	lr

08009e88 <uxr_buffer_create_session>:
 8009e88:	b530      	push	{r4, r5, lr}
 8009e8a:	b089      	sub	sp, #36	@ 0x24
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	4d12      	ldr	r5, [pc, #72]	@ (8009ed8 <uxr_buffer_create_session+0x50>)
 8009e90:	9307      	str	r3, [sp, #28]
 8009e92:	f8ad 201c 	strh.w	r2, [sp, #28]
 8009e96:	2201      	movs	r2, #1
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	80c2      	strh	r2, [r0, #6]
 8009e9c:	f88d 2004 	strb.w	r2, [sp, #4]
 8009ea0:	682a      	ldr	r2, [r5, #0]
 8009ea2:	9200      	str	r2, [sp, #0]
 8009ea4:	88aa      	ldrh	r2, [r5, #4]
 8009ea6:	f8ad 2006 	strh.w	r2, [sp, #6]
 8009eaa:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8009eae:	9202      	str	r2, [sp, #8]
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	7802      	ldrb	r2, [r0, #0]
 8009eb4:	9303      	str	r3, [sp, #12]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	f88d 200c 	strb.w	r2, [sp, #12]
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	2210      	movs	r2, #16
 8009ec0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8009ec4:	9306      	str	r3, [sp, #24]
 8009ec6:	f000 fa29 	bl	800a31c <uxr_buffer_submessage_header>
 8009eca:	4669      	mov	r1, sp
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f001 f981 	bl	800b1d4 <uxr_serialize_CREATE_CLIENT_Payload>
 8009ed2:	b009      	add	sp, #36	@ 0x24
 8009ed4:	bd30      	pop	{r4, r5, pc}
 8009ed6:	bf00      	nop
 8009ed8:	0801122c 	.word	0x0801122c

08009edc <uxr_buffer_delete_session>:
 8009edc:	b510      	push	{r4, lr}
 8009ede:	4b0c      	ldr	r3, [pc, #48]	@ (8009f10 <uxr_buffer_delete_session+0x34>)
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8009ee6:	f8ad c006 	strh.w	ip, [sp, #6]
 8009eea:	460c      	mov	r4, r1
 8009eec:	2202      	movs	r2, #2
 8009eee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ef2:	80c2      	strh	r2, [r0, #6]
 8009ef4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009ef8:	2204      	movs	r2, #4
 8009efa:	2300      	movs	r3, #0
 8009efc:	2103      	movs	r1, #3
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 fa0c 	bl	800a31c <uxr_buffer_submessage_header>
 8009f04:	a901      	add	r1, sp, #4
 8009f06:	4620      	mov	r0, r4
 8009f08:	f001 fa0a 	bl	800b320 <uxr_serialize_DELETE_Payload>
 8009f0c:	b002      	add	sp, #8
 8009f0e:	bd10      	pop	{r4, pc}
 8009f10:	0801122c 	.word	0x0801122c

08009f14 <uxr_read_create_session_status>:
 8009f14:	b510      	push	{r4, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	4604      	mov	r4, r0
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	a901      	add	r1, sp, #4
 8009f1e:	f001 fa0f 	bl	800b340 <uxr_deserialize_STATUS_AGENT_Payload>
 8009f22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009f26:	7163      	strb	r3, [r4, #5]
 8009f28:	b008      	add	sp, #32
 8009f2a:	bd10      	pop	{r4, pc}

08009f2c <uxr_read_delete_session_status>:
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	4604      	mov	r4, r0
 8009f30:	b084      	sub	sp, #16
 8009f32:	4608      	mov	r0, r1
 8009f34:	a902      	add	r1, sp, #8
 8009f36:	f001 fa33 	bl	800b3a0 <uxr_deserialize_STATUS_Payload>
 8009f3a:	88e3      	ldrh	r3, [r4, #6]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d001      	beq.n	8009f44 <uxr_read_delete_session_status+0x18>
 8009f40:	b004      	add	sp, #16
 8009f42:	bd10      	pop	{r4, pc}
 8009f44:	f10d 000a 	add.w	r0, sp, #10
 8009f48:	f7ff f836 	bl	8008fb8 <uxr_object_id_from_raw>
 8009f4c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8009f50:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8009f54:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	bf04      	itt	eq
 8009f5e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8009f62:	7163      	strbeq	r3, [r4, #5]
 8009f64:	b004      	add	sp, #16
 8009f66:	bd10      	pop	{r4, pc}

08009f68 <uxr_stamp_create_session_header>:
 8009f68:	b510      	push	{r4, lr}
 8009f6a:	2208      	movs	r2, #8
 8009f6c:	b08a      	sub	sp, #40	@ 0x28
 8009f6e:	4604      	mov	r4, r0
 8009f70:	eb0d 0002 	add.w	r0, sp, r2
 8009f74:	f7fe fe48 	bl	8008c08 <ucdr_init_buffer>
 8009f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f7c:	9400      	str	r4, [sp, #0]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	461a      	mov	r2, r3
 8009f82:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8009f86:	a802      	add	r0, sp, #8
 8009f88:	f000 fbc2 	bl	800a710 <uxr_serialize_message_header>
 8009f8c:	b00a      	add	sp, #40	@ 0x28
 8009f8e:	bd10      	pop	{r4, pc}

08009f90 <uxr_stamp_session_header>:
 8009f90:	b530      	push	{r4, r5, lr}
 8009f92:	b08d      	sub	sp, #52	@ 0x34
 8009f94:	4604      	mov	r4, r0
 8009f96:	460d      	mov	r5, r1
 8009f98:	9203      	str	r2, [sp, #12]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	a804      	add	r0, sp, #16
 8009f9e:	2208      	movs	r2, #8
 8009fa0:	f7fe fe32 	bl	8008c08 <ucdr_init_buffer>
 8009fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa8:	9b03      	ldr	r3, [sp, #12]
 8009faa:	9400      	str	r4, [sp, #0]
 8009fac:	462a      	mov	r2, r5
 8009fae:	a804      	add	r0, sp, #16
 8009fb0:	f000 fbae 	bl	800a710 <uxr_serialize_message_header>
 8009fb4:	b00d      	add	sp, #52	@ 0x34
 8009fb6:	bd30      	pop	{r4, r5, pc}

08009fb8 <uxr_read_session_header>:
 8009fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4615      	mov	r5, r2
 8009fc6:	461e      	mov	r6, r3
 8009fc8:	f7fe fe4e 	bl	8008c68 <ucdr_buffer_remaining>
 8009fcc:	2808      	cmp	r0, #8
 8009fce:	d803      	bhi.n	8009fd8 <uxr_read_session_header+0x20>
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	b004      	add	sp, #16
 8009fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd8:	f10d 080c 	add.w	r8, sp, #12
 8009fdc:	4633      	mov	r3, r6
 8009fde:	462a      	mov	r2, r5
 8009fe0:	f8cd 8000 	str.w	r8, [sp]
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f10d 010b 	add.w	r1, sp, #11
 8009fea:	f000 fbaf 	bl	800a74c <uxr_deserialize_message_header>
 8009fee:	783a      	ldrb	r2, [r7, #0]
 8009ff0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d1eb      	bne.n	8009fd0 <uxr_read_session_header+0x18>
 8009ff8:	061b      	lsls	r3, r3, #24
 8009ffa:	d41c      	bmi.n	800a036 <uxr_read_session_header+0x7e>
 8009ffc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800a000:	787b      	ldrb	r3, [r7, #1]
 800a002:	429a      	cmp	r2, r3
 800a004:	d003      	beq.n	800a00e <uxr_read_session_header+0x56>
 800a006:	2001      	movs	r0, #1
 800a008:	f080 0001 	eor.w	r0, r0, #1
 800a00c:	e7e1      	b.n	8009fd2 <uxr_read_session_header+0x1a>
 800a00e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800a012:	78bb      	ldrb	r3, [r7, #2]
 800a014:	429a      	cmp	r2, r3
 800a016:	f107 0102 	add.w	r1, r7, #2
 800a01a:	d1f4      	bne.n	800a006 <uxr_read_session_header+0x4e>
 800a01c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800a020:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a024:	429a      	cmp	r2, r3
 800a026:	d1ee      	bne.n	800a006 <uxr_read_session_header+0x4e>
 800a028:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800a02c:	784b      	ldrb	r3, [r1, #1]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d1e9      	bne.n	800a006 <uxr_read_session_header+0x4e>
 800a032:	2000      	movs	r0, #0
 800a034:	e7e8      	b.n	800a008 <uxr_read_session_header+0x50>
 800a036:	2001      	movs	r0, #1
 800a038:	e7cb      	b.n	8009fd2 <uxr_read_session_header+0x1a>
 800a03a:	bf00      	nop

0800a03c <uxr_session_header_offset>:
 800a03c:	f990 3000 	ldrsb.w	r3, [r0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	bfac      	ite	ge
 800a044:	2008      	movge	r0, #8
 800a046:	2004      	movlt	r0, #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop

0800a04c <uxr_init_base_object_request>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	88c3      	ldrh	r3, [r0, #6]
 800a050:	b082      	sub	sp, #8
 800a052:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800a056:	9101      	str	r1, [sp, #4]
 800a058:	f1a3 010a 	sub.w	r1, r3, #10
 800a05c:	b289      	uxth	r1, r1
 800a05e:	42a1      	cmp	r1, r4
 800a060:	d80e      	bhi.n	800a080 <uxr_init_base_object_request+0x34>
 800a062:	3301      	adds	r3, #1
 800a064:	b29c      	uxth	r4, r3
 800a066:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	80c4      	strh	r4, [r0, #6]
 800a06e:	9801      	ldr	r0, [sp, #4]
 800a070:	7011      	strb	r1, [r2, #0]
 800a072:	7053      	strb	r3, [r2, #1]
 800a074:	1c91      	adds	r1, r2, #2
 800a076:	f7fe ffb3 	bl	8008fe0 <uxr_object_id_to_raw>
 800a07a:	4620      	mov	r0, r4
 800a07c:	b002      	add	sp, #8
 800a07e:	bd10      	pop	{r4, pc}
 800a080:	230a      	movs	r3, #10
 800a082:	2100      	movs	r1, #0
 800a084:	461c      	mov	r4, r3
 800a086:	e7f1      	b.n	800a06c <uxr_init_base_object_request+0x20>

0800a088 <uxr_parse_base_object_request>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	4604      	mov	r4, r0
 800a08c:	3002      	adds	r0, #2
 800a08e:	460d      	mov	r5, r1
 800a090:	4616      	mov	r6, r2
 800a092:	f7fe ff91 	bl	8008fb8 <uxr_object_id_from_raw>
 800a096:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800a09a:	8028      	strh	r0, [r5, #0]
 800a09c:	806b      	strh	r3, [r5, #2]
 800a09e:	7822      	ldrb	r2, [r4, #0]
 800a0a0:	7863      	ldrb	r3, [r4, #1]
 800a0a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a0a6:	8033      	strh	r3, [r6, #0]
 800a0a8:	bd70      	pop	{r4, r5, r6, pc}
 800a0aa:	bf00      	nop

0800a0ac <uxr_stream_id>:
 800a0ac:	2901      	cmp	r1, #1
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	d01d      	beq.n	800a0ee <uxr_stream_id+0x42>
 800a0b2:	2902      	cmp	r1, #2
 800a0b4:	f04f 0c00 	mov.w	ip, #0
 800a0b8:	d01e      	beq.n	800a0f8 <uxr_stream_id+0x4c>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f36c 0307 	bfi	r3, ip, #0, #8
 800a0c0:	f360 230f 	bfi	r3, r0, #8, #8
 800a0c4:	f361 4317 	bfi	r3, r1, #16, #8
 800a0c8:	f362 631f 	bfi	r3, r2, #24, #8
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	f362 0007 	bfi	r0, r2, #0, #8
 800a0d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a0d8:	f362 200f 	bfi	r0, r2, #8, #8
 800a0dc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a0e0:	f362 4017 	bfi	r0, r2, #16, #8
 800a0e4:	0e1b      	lsrs	r3, r3, #24
 800a0e6:	f363 601f 	bfi	r0, r3, #24, #8
 800a0ea:	b002      	add	sp, #8
 800a0ec:	4770      	bx	lr
 800a0ee:	f100 0c01 	add.w	ip, r0, #1
 800a0f2:	fa5f fc8c 	uxtb.w	ip, ip
 800a0f6:	e7e0      	b.n	800a0ba <uxr_stream_id+0xe>
 800a0f8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800a0fc:	e7dd      	b.n	800a0ba <uxr_stream_id+0xe>
 800a0fe:	bf00      	nop

0800a100 <uxr_stream_id_from_raw>:
 800a100:	b082      	sub	sp, #8
 800a102:	b130      	cbz	r0, 800a112 <uxr_stream_id_from_raw+0x12>
 800a104:	0603      	lsls	r3, r0, #24
 800a106:	d420      	bmi.n	800a14a <uxr_stream_id_from_raw+0x4a>
 800a108:	1e42      	subs	r2, r0, #1
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	f04f 0c01 	mov.w	ip, #1
 800a110:	e001      	b.n	800a116 <uxr_stream_id_from_raw+0x16>
 800a112:	4684      	mov	ip, r0
 800a114:	4602      	mov	r2, r0
 800a116:	2300      	movs	r3, #0
 800a118:	f360 0307 	bfi	r3, r0, #0, #8
 800a11c:	f362 230f 	bfi	r3, r2, #8, #8
 800a120:	f36c 4317 	bfi	r3, ip, #16, #8
 800a124:	f361 631f 	bfi	r3, r1, #24, #8
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	2000      	movs	r0, #0
 800a12c:	f362 0007 	bfi	r0, r2, #0, #8
 800a130:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a134:	f362 200f 	bfi	r0, r2, #8, #8
 800a138:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a13c:	f362 4017 	bfi	r0, r2, #16, #8
 800a140:	0e1b      	lsrs	r3, r3, #24
 800a142:	f363 601f 	bfi	r0, r3, #24, #8
 800a146:	b002      	add	sp, #8
 800a148:	4770      	bx	lr
 800a14a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800a14e:	f04f 0c02 	mov.w	ip, #2
 800a152:	e7e0      	b.n	800a116 <uxr_stream_id_from_raw+0x16>

0800a154 <uxr_init_stream_storage>:
 800a154:	2300      	movs	r3, #0
 800a156:	7403      	strb	r3, [r0, #16]
 800a158:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800a15c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800a160:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop

0800a168 <uxr_reset_stream_storage>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	7c03      	ldrb	r3, [r0, #16]
 800a16c:	4604      	mov	r4, r0
 800a16e:	b153      	cbz	r3, 800a186 <uxr_reset_stream_storage+0x1e>
 800a170:	4606      	mov	r6, r0
 800a172:	2500      	movs	r5, #0
 800a174:	4630      	mov	r0, r6
 800a176:	f003 ff35 	bl	800dfe4 <uxr_reset_output_best_effort_stream>
 800a17a:	7c23      	ldrb	r3, [r4, #16]
 800a17c:	3501      	adds	r5, #1
 800a17e:	42ab      	cmp	r3, r5
 800a180:	f106 0610 	add.w	r6, r6, #16
 800a184:	d8f6      	bhi.n	800a174 <uxr_reset_stream_storage+0xc>
 800a186:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a18a:	b163      	cbz	r3, 800a1a6 <uxr_reset_stream_storage+0x3e>
 800a18c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a190:	2500      	movs	r5, #0
 800a192:	4630      	mov	r0, r6
 800a194:	f003 fd28 	bl	800dbe8 <uxr_reset_input_best_effort_stream>
 800a198:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a19c:	3501      	adds	r5, #1
 800a19e:	42ab      	cmp	r3, r5
 800a1a0:	f106 0602 	add.w	r6, r6, #2
 800a1a4:	d8f5      	bhi.n	800a192 <uxr_reset_stream_storage+0x2a>
 800a1a6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a1aa:	b163      	cbz	r3, 800a1c6 <uxr_reset_stream_storage+0x5e>
 800a1ac:	f104 0618 	add.w	r6, r4, #24
 800a1b0:	2500      	movs	r5, #0
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f003 ffc2 	bl	800e13c <uxr_reset_output_reliable_stream>
 800a1b8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a1bc:	3501      	adds	r5, #1
 800a1be:	42ab      	cmp	r3, r5
 800a1c0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800a1c4:	d8f5      	bhi.n	800a1b2 <uxr_reset_stream_storage+0x4a>
 800a1c6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800a1ca:	b163      	cbz	r3, 800a1e6 <uxr_reset_stream_storage+0x7e>
 800a1cc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800a1d0:	2500      	movs	r5, #0
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f003 fd7c 	bl	800dcd0 <uxr_reset_input_reliable_stream>
 800a1d8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800a1dc:	3501      	adds	r5, #1
 800a1de:	42ab      	cmp	r3, r5
 800a1e0:	f106 0618 	add.w	r6, r6, #24
 800a1e4:	d8f5      	bhi.n	800a1d2 <uxr_reset_stream_storage+0x6a>
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}

0800a1e8 <uxr_add_output_best_effort_buffer>:
 800a1e8:	b510      	push	{r4, lr}
 800a1ea:	7c04      	ldrb	r4, [r0, #16]
 800a1ec:	f104 0c01 	add.w	ip, r4, #1
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	f880 c010 	strb.w	ip, [r0, #16]
 800a1f6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800a1fa:	f003 fee9 	bl	800dfd0 <uxr_init_output_best_effort_stream>
 800a1fe:	2201      	movs	r2, #1
 800a200:	4611      	mov	r1, r2
 800a202:	4620      	mov	r0, r4
 800a204:	b002      	add	sp, #8
 800a206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20a:	f7ff bf4f 	b.w	800a0ac <uxr_stream_id>
 800a20e:	bf00      	nop

0800a210 <uxr_add_output_reliable_buffer>:
 800a210:	b510      	push	{r4, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	4684      	mov	ip, r0
 800a216:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a21a:	9000      	str	r0, [sp, #0]
 800a21c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800a220:	2028      	movs	r0, #40	@ 0x28
 800a222:	fb00 c004 	mla	r0, r0, r4, ip
 800a226:	f104 0e01 	add.w	lr, r4, #1
 800a22a:	3018      	adds	r0, #24
 800a22c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800a230:	f003 ff4c 	bl	800e0cc <uxr_init_output_reliable_stream>
 800a234:	2201      	movs	r2, #1
 800a236:	2102      	movs	r1, #2
 800a238:	4620      	mov	r0, r4
 800a23a:	b004      	add	sp, #16
 800a23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a240:	f7ff bf34 	b.w	800a0ac <uxr_stream_id>

0800a244 <uxr_add_input_best_effort_buffer>:
 800a244:	b510      	push	{r4, lr}
 800a246:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800a24a:	4603      	mov	r3, r0
 800a24c:	1c62      	adds	r2, r4, #1
 800a24e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800a252:	b082      	sub	sp, #8
 800a254:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a25c:	f003 fcc0 	bl	800dbe0 <uxr_init_input_best_effort_stream>
 800a260:	2200      	movs	r2, #0
 800a262:	2101      	movs	r1, #1
 800a264:	4620      	mov	r0, r4
 800a266:	b002      	add	sp, #8
 800a268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a26c:	f7ff bf1e 	b.w	800a0ac <uxr_stream_id>

0800a270 <uxr_add_input_reliable_buffer>:
 800a270:	b510      	push	{r4, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	4684      	mov	ip, r0
 800a276:	9806      	ldr	r0, [sp, #24]
 800a278:	9000      	str	r0, [sp, #0]
 800a27a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800a27e:	2018      	movs	r0, #24
 800a280:	fb00 c004 	mla	r0, r0, r4, ip
 800a284:	f104 0e01 	add.w	lr, r4, #1
 800a288:	3048      	adds	r0, #72	@ 0x48
 800a28a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800a28e:	f003 fcf3 	bl	800dc78 <uxr_init_input_reliable_stream>
 800a292:	2200      	movs	r2, #0
 800a294:	2102      	movs	r1, #2
 800a296:	4620      	mov	r0, r4
 800a298:	b004      	add	sp, #16
 800a29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a29e:	f7ff bf05 	b.w	800a0ac <uxr_stream_id>
 800a2a2:	bf00      	nop

0800a2a4 <uxr_get_output_best_effort_stream>:
 800a2a4:	7c03      	ldrb	r3, [r0, #16]
 800a2a6:	428b      	cmp	r3, r1
 800a2a8:	bf8c      	ite	hi
 800a2aa:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800a2ae:	2000      	movls	r0, #0
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop

0800a2b4 <uxr_get_output_reliable_stream>:
 800a2b4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	bf83      	ittte	hi
 800a2bc:	2328      	movhi	r3, #40	@ 0x28
 800a2be:	fb03 0001 	mlahi	r0, r3, r1, r0
 800a2c2:	3018      	addhi	r0, #24
 800a2c4:	2000      	movls	r0, #0
 800a2c6:	4770      	bx	lr

0800a2c8 <uxr_get_input_best_effort_stream>:
 800a2c8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a2cc:	428b      	cmp	r3, r1
 800a2ce:	bf86      	itte	hi
 800a2d0:	3121      	addhi	r1, #33	@ 0x21
 800a2d2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800a2d6:	2000      	movls	r0, #0
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop

0800a2dc <uxr_get_input_reliable_stream>:
 800a2dc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800a2e0:	428b      	cmp	r3, r1
 800a2e2:	bf83      	ittte	hi
 800a2e4:	2318      	movhi	r3, #24
 800a2e6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800a2ea:	3048      	addhi	r0, #72	@ 0x48
 800a2ec:	2000      	movls	r0, #0
 800a2ee:	4770      	bx	lr

0800a2f0 <uxr_output_streams_confirmed>:
 800a2f0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a2f4:	b183      	cbz	r3, 800a318 <uxr_output_streams_confirmed+0x28>
 800a2f6:	b570      	push	{r4, r5, r6, lr}
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	f100 0518 	add.w	r5, r0, #24
 800a2fe:	2400      	movs	r4, #0
 800a300:	e001      	b.n	800a306 <uxr_output_streams_confirmed+0x16>
 800a302:	3528      	adds	r5, #40	@ 0x28
 800a304:	b138      	cbz	r0, 800a316 <uxr_output_streams_confirmed+0x26>
 800a306:	4628      	mov	r0, r5
 800a308:	f004 f988 	bl	800e61c <uxr_is_output_up_to_date>
 800a30c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800a310:	3401      	adds	r4, #1
 800a312:	42a3      	cmp	r3, r4
 800a314:	d8f5      	bhi.n	800a302 <uxr_output_streams_confirmed+0x12>
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	2001      	movs	r0, #1
 800a31a:	4770      	bx	lr

0800a31c <uxr_buffer_submessage_header>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	4604      	mov	r4, r0
 800a320:	460e      	mov	r6, r1
 800a322:	2104      	movs	r1, #4
 800a324:	4615      	mov	r5, r2
 800a326:	461f      	mov	r7, r3
 800a328:	f7fe fc88 	bl	8008c3c <ucdr_align_to>
 800a32c:	2301      	movs	r3, #1
 800a32e:	ea47 0203 	orr.w	r2, r7, r3
 800a332:	4631      	mov	r1, r6
 800a334:	7523      	strb	r3, [r4, #20]
 800a336:	4620      	mov	r0, r4
 800a338:	462b      	mov	r3, r5
 800a33a:	f000 fa27 	bl	800a78c <uxr_serialize_submessage_header>
 800a33e:	4620      	mov	r0, r4
 800a340:	f7fe fc92 	bl	8008c68 <ucdr_buffer_remaining>
 800a344:	42a8      	cmp	r0, r5
 800a346:	bf34      	ite	cc
 800a348:	2000      	movcc	r0, #0
 800a34a:	2001      	movcs	r0, #1
 800a34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a34e:	bf00      	nop

0800a350 <uxr_read_submessage_header>:
 800a350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a354:	4604      	mov	r4, r0
 800a356:	460d      	mov	r5, r1
 800a358:	2104      	movs	r1, #4
 800a35a:	4616      	mov	r6, r2
 800a35c:	4698      	mov	r8, r3
 800a35e:	f7fe fc6d 	bl	8008c3c <ucdr_align_to>
 800a362:	4620      	mov	r0, r4
 800a364:	f7fe fc80 	bl	8008c68 <ucdr_buffer_remaining>
 800a368:	2803      	cmp	r0, #3
 800a36a:	bf8c      	ite	hi
 800a36c:	2701      	movhi	r7, #1
 800a36e:	2700      	movls	r7, #0
 800a370:	d802      	bhi.n	800a378 <uxr_read_submessage_header+0x28>
 800a372:	4638      	mov	r0, r7
 800a374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a378:	4633      	mov	r3, r6
 800a37a:	4642      	mov	r2, r8
 800a37c:	4620      	mov	r0, r4
 800a37e:	4629      	mov	r1, r5
 800a380:	f000 fa18 	bl	800a7b4 <uxr_deserialize_submessage_header>
 800a384:	f898 3000 	ldrb.w	r3, [r8]
 800a388:	f003 0201 	and.w	r2, r3, #1
 800a38c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a390:	f888 3000 	strb.w	r3, [r8]
 800a394:	7522      	strb	r2, [r4, #20]
 800a396:	4638      	mov	r0, r7
 800a398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a39c <uxr_submessage_padding>:
 800a39c:	f010 0003 	ands.w	r0, r0, #3
 800a3a0:	bf18      	it	ne
 800a3a2:	f1c0 0004 	rsbne	r0, r0, #4
 800a3a6:	4770      	bx	lr

0800a3a8 <uxr_millis>:
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	4669      	mov	r1, sp
 800a3ae:	2001      	movs	r0, #1
 800a3b0:	f7f6 fe16 	bl	8000fe0 <clock_gettime>
 800a3b4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800a3b8:	4906      	ldr	r1, [pc, #24]	@ (800a3d4 <uxr_millis+0x2c>)
 800a3ba:	fba0 0301 	umull	r0, r3, r0, r1
 800a3be:	1900      	adds	r0, r0, r4
 800a3c0:	fb01 3102 	mla	r1, r1, r2, r3
 800a3c4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800a3c8:	4a03      	ldr	r2, [pc, #12]	@ (800a3d8 <uxr_millis+0x30>)
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f7f5 ff70 	bl	80002b0 <__aeabi_ldivmod>
 800a3d0:	b004      	add	sp, #16
 800a3d2:	bd10      	pop	{r4, pc}
 800a3d4:	3b9aca00 	.word	0x3b9aca00
 800a3d8:	000f4240 	.word	0x000f4240

0800a3dc <uxr_nanos>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	4669      	mov	r1, sp
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	f7f6 fdfc 	bl	8000fe0 <clock_gettime>
 800a3e8:	4a06      	ldr	r2, [pc, #24]	@ (800a404 <uxr_nanos+0x28>)
 800a3ea:	9800      	ldr	r0, [sp, #0]
 800a3ec:	9902      	ldr	r1, [sp, #8]
 800a3ee:	9c01      	ldr	r4, [sp, #4]
 800a3f0:	fba0 0302 	umull	r0, r3, r0, r2
 800a3f4:	1840      	adds	r0, r0, r1
 800a3f6:	fb02 3304 	mla	r3, r2, r4, r3
 800a3fa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800a3fe:	b004      	add	sp, #16
 800a400:	bd10      	pop	{r4, pc}
 800a402:	bf00      	nop
 800a404:	3b9aca00 	.word	0x3b9aca00

0800a408 <on_full_output_buffer_fragmented>:
 800a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	460c      	mov	r4, r1
 800a40e:	b08a      	sub	sp, #40	@ 0x28
 800a410:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800a414:	4606      	mov	r6, r0
 800a416:	f104 0008 	add.w	r0, r4, #8
 800a41a:	f7ff ff4b 	bl	800a2b4 <uxr_get_output_reliable_stream>
 800a41e:	4605      	mov	r5, r0
 800a420:	f004 f906 	bl	800e630 <get_available_free_slots>
 800a424:	b968      	cbnz	r0, 800a442 <on_full_output_buffer_fragmented+0x3a>
 800a426:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800a42a:	4620      	mov	r0, r4
 800a42c:	4798      	blx	r3
 800a42e:	b918      	cbnz	r0, 800a438 <on_full_output_buffer_fragmented+0x30>
 800a430:	2001      	movs	r0, #1
 800a432:	b00a      	add	sp, #40	@ 0x28
 800a434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a438:	4628      	mov	r0, r5
 800a43a:	f004 f8f9 	bl	800e630 <get_available_free_slots>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d0f6      	beq.n	800a430 <on_full_output_buffer_fragmented+0x28>
 800a442:	8929      	ldrh	r1, [r5, #8]
 800a444:	89eb      	ldrh	r3, [r5, #14]
 800a446:	7b28      	ldrb	r0, [r5, #12]
 800a448:	686a      	ldr	r2, [r5, #4]
 800a44a:	fbb2 f8f1 	udiv	r8, r2, r1
 800a44e:	fbb3 f2f1 	udiv	r2, r3, r1
 800a452:	fb01 3112 	mls	r1, r1, r2, r3
 800a456:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800a45a:	b289      	uxth	r1, r1
 800a45c:	fb08 f101 	mul.w	r1, r8, r1
 800a460:	30fc      	adds	r0, #252	@ 0xfc
 800a462:	f1a8 0804 	sub.w	r8, r8, #4
 800a466:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800a46a:	4440      	add	r0, r8
 800a46c:	b287      	uxth	r7, r0
 800a46e:	1bdb      	subs	r3, r3, r7
 800a470:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	3104      	adds	r1, #4
 800a478:	4419      	add	r1, r3
 800a47a:	4642      	mov	r2, r8
 800a47c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	a802      	add	r0, sp, #8
 800a484:	2300      	movs	r3, #0
 800a486:	f7fe fbad 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 800a48a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800a48e:	f102 0308 	add.w	r3, r2, #8
 800a492:	4543      	cmp	r3, r8
 800a494:	d928      	bls.n	800a4e8 <on_full_output_buffer_fragmented+0xe0>
 800a496:	463a      	mov	r2, r7
 800a498:	2300      	movs	r3, #0
 800a49a:	210d      	movs	r1, #13
 800a49c:	a802      	add	r0, sp, #8
 800a49e:	f7ff ff3d 	bl	800a31c <uxr_buffer_submessage_header>
 800a4a2:	8929      	ldrh	r1, [r5, #8]
 800a4a4:	89eb      	ldrh	r3, [r5, #14]
 800a4a6:	fbb3 f2f1 	udiv	r2, r3, r1
 800a4aa:	fb01 3312 	mls	r3, r1, r2, r3
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	686a      	ldr	r2, [r5, #4]
 800a4b2:	fbb2 f2f1 	udiv	r2, r2, r1
 800a4b6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ba:	682a      	ldr	r2, [r5, #0]
 800a4bc:	f842 8003 	str.w	r8, [r2, r3]
 800a4c0:	89e8      	ldrh	r0, [r5, #14]
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	f004 f9ca 	bl	800e85c <uxr_seq_num_add>
 800a4c8:	9904      	ldr	r1, [sp, #16]
 800a4ca:	9a03      	ldr	r2, [sp, #12]
 800a4cc:	81e8      	strh	r0, [r5, #14]
 800a4ce:	1a52      	subs	r2, r2, r1
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7fe fb99 	bl	8008c08 <ucdr_init_buffer>
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	490f      	ldr	r1, [pc, #60]	@ (800a518 <on_full_output_buffer_fragmented+0x110>)
 800a4da:	4622      	mov	r2, r4
 800a4dc:	f7fe fb68 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	b00a      	add	sp, #40	@ 0x28
 800a4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e8:	b292      	uxth	r2, r2
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	210d      	movs	r1, #13
 800a4ee:	a802      	add	r0, sp, #8
 800a4f0:	f7ff ff14 	bl	800a31c <uxr_buffer_submessage_header>
 800a4f4:	8928      	ldrh	r0, [r5, #8]
 800a4f6:	89eb      	ldrh	r3, [r5, #14]
 800a4f8:	fbb3 f1f0 	udiv	r1, r3, r0
 800a4fc:	fb00 3311 	mls	r3, r0, r1, r3
 800a500:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800a504:	6869      	ldr	r1, [r5, #4]
 800a506:	fbb1 f1f0 	udiv	r1, r1, r0
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	fb01 f303 	mul.w	r3, r1, r3
 800a510:	6829      	ldr	r1, [r5, #0]
 800a512:	3208      	adds	r2, #8
 800a514:	50ca      	str	r2, [r1, r3]
 800a516:	e7d3      	b.n	800a4c0 <on_full_output_buffer_fragmented+0xb8>
 800a518:	0800a409 	.word	0x0800a409

0800a51c <uxr_prepare_output_stream>:
 800a51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a51e:	b087      	sub	sp, #28
 800a520:	2707      	movs	r7, #7
 800a522:	9202      	str	r2, [sp, #8]
 800a524:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a526:	9103      	str	r1, [sp, #12]
 800a528:	2500      	movs	r5, #0
 800a52a:	3204      	adds	r2, #4
 800a52c:	e9cd 7500 	strd	r7, r5, [sp]
 800a530:	461c      	mov	r4, r3
 800a532:	4606      	mov	r6, r0
 800a534:	f7ff fc54 	bl	8009de0 <uxr_prepare_stream_to_write_submessage>
 800a538:	f080 0201 	eor.w	r2, r0, #1
 800a53c:	b2d2      	uxtb	r2, r2
 800a53e:	75a2      	strb	r2, [r4, #22]
 800a540:	b112      	cbz	r2, 800a548 <uxr_prepare_output_stream+0x2c>
 800a542:	4628      	mov	r0, r5
 800a544:	b007      	add	sp, #28
 800a546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a548:	aa05      	add	r2, sp, #20
 800a54a:	9902      	ldr	r1, [sp, #8]
 800a54c:	4630      	mov	r0, r6
 800a54e:	f7ff fd7d 	bl	800a04c <uxr_init_base_object_request>
 800a552:	a905      	add	r1, sp, #20
 800a554:	4605      	mov	r5, r0
 800a556:	4620      	mov	r0, r4
 800a558:	f000 ffa0 	bl	800b49c <uxr_serialize_WRITE_DATA_Payload_Data>
 800a55c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800a560:	69a6      	ldr	r6, [r4, #24]
 800a562:	69e7      	ldr	r7, [r4, #28]
 800a564:	1a52      	subs	r2, r2, r1
 800a566:	4620      	mov	r0, r4
 800a568:	f7fe fb4e 	bl	8008c08 <ucdr_init_buffer>
 800a56c:	4620      	mov	r0, r4
 800a56e:	463a      	mov	r2, r7
 800a570:	4631      	mov	r1, r6
 800a572:	f7fe fb1d 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800a576:	4628      	mov	r0, r5
 800a578:	b007      	add	sp, #28
 800a57a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a57c <uxr_prepare_output_stream_fragmented>:
 800a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	b091      	sub	sp, #68	@ 0x44
 800a582:	4605      	mov	r5, r0
 800a584:	9105      	str	r1, [sp, #20]
 800a586:	3008      	adds	r0, #8
 800a588:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a58c:	461e      	mov	r6, r3
 800a58e:	9204      	str	r2, [sp, #16]
 800a590:	f7ff fe90 	bl	800a2b4 <uxr_get_output_reliable_stream>
 800a594:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	f000 8091 	beq.w	800a6c0 <uxr_prepare_output_stream_fragmented+0x144>
 800a59e:	4604      	mov	r4, r0
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	f000 808d 	beq.w	800a6c0 <uxr_prepare_output_stream_fragmented+0x144>
 800a5a6:	f004 f843 	bl	800e630 <get_available_free_slots>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f000 8083 	beq.w	800a6b6 <uxr_prepare_output_stream_fragmented+0x13a>
 800a5b0:	8922      	ldrh	r2, [r4, #8]
 800a5b2:	89e7      	ldrh	r7, [r4, #14]
 800a5b4:	fbb7 f9f2 	udiv	r9, r7, r2
 800a5b8:	fb02 7919 	mls	r9, r2, r9, r7
 800a5bc:	fa1f f989 	uxth.w	r9, r9
 800a5c0:	6863      	ldr	r3, [r4, #4]
 800a5c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	9203      	str	r2, [sp, #12]
 800a5ca:	fb02 f909 	mul.w	r9, r2, r9
 800a5ce:	f109 0904 	add.w	r9, r9, #4
 800a5d2:	4499      	add	r9, r3
 800a5d4:	7b23      	ldrb	r3, [r4, #12]
 800a5d6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800a5da:	4543      	cmp	r3, r8
 800a5dc:	f1a2 0b04 	sub.w	fp, r2, #4
 800a5e0:	d37a      	bcc.n	800a6d8 <uxr_prepare_output_stream_fragmented+0x15c>
 800a5e2:	f1ab 0a04 	sub.w	sl, fp, #4
 800a5e6:	ebaa 0a03 	sub.w	sl, sl, r3
 800a5ea:	465a      	mov	r2, fp
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	a808      	add	r0, sp, #32
 800a5f2:	f8cd 8000 	str.w	r8, [sp]
 800a5f6:	f7fe faf5 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 800a5fa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a5fc:	fa1f fa8a 	uxth.w	sl, sl
 800a600:	4652      	mov	r2, sl
 800a602:	f103 0a08 	add.w	sl, r3, #8
 800a606:	45da      	cmp	sl, fp
 800a608:	bf34      	ite	cc
 800a60a:	2302      	movcc	r3, #2
 800a60c:	2300      	movcs	r3, #0
 800a60e:	210d      	movs	r1, #13
 800a610:	a808      	add	r0, sp, #32
 800a612:	f7ff fe83 	bl	800a31c <uxr_buffer_submessage_header>
 800a616:	8921      	ldrh	r1, [r4, #8]
 800a618:	fbb7 f2f1 	udiv	r2, r7, r1
 800a61c:	fb01 7212 	mls	r2, r1, r2, r7
 800a620:	b292      	uxth	r2, r2
 800a622:	6863      	ldr	r3, [r4, #4]
 800a624:	fbb3 f3f1 	udiv	r3, r3, r1
 800a628:	fb02 f303 	mul.w	r3, r2, r3
 800a62c:	6822      	ldr	r2, [r4, #0]
 800a62e:	4638      	mov	r0, r7
 800a630:	f842 b003 	str.w	fp, [r2, r3]
 800a634:	2101      	movs	r1, #1
 800a636:	f004 f911 	bl	800e85c <uxr_seq_num_add>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	f108 0104 	add.w	r1, r8, #4
 800a640:	f1a3 0208 	sub.w	r2, r3, #8
 800a644:	eba2 0208 	sub.w	r2, r2, r8
 800a648:	4449      	add	r1, r9
 800a64a:	4607      	mov	r7, r0
 800a64c:	4630      	mov	r0, r6
 800a64e:	f7fe fadb 	bl	8008c08 <ucdr_init_buffer>
 800a652:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a654:	81e7      	strh	r7, [r4, #14]
 800a656:	1d1a      	adds	r2, r3, #4
 800a658:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800a65c:	bf28      	it	cs
 800a65e:	2200      	movcs	r2, #0
 800a660:	2300      	movs	r3, #0
 800a662:	b292      	uxth	r2, r2
 800a664:	2107      	movs	r1, #7
 800a666:	4630      	mov	r0, r6
 800a668:	f7ff fe58 	bl	800a31c <uxr_buffer_submessage_header>
 800a66c:	9904      	ldr	r1, [sp, #16]
 800a66e:	aa07      	add	r2, sp, #28
 800a670:	4628      	mov	r0, r5
 800a672:	f7ff fceb 	bl	800a04c <uxr_init_base_object_request>
 800a676:	4604      	mov	r4, r0
 800a678:	b318      	cbz	r0, 800a6c2 <uxr_prepare_output_stream_fragmented+0x146>
 800a67a:	a907      	add	r1, sp, #28
 800a67c:	4630      	mov	r0, r6
 800a67e:	f000 ff0d 	bl	800b49c <uxr_serialize_WRITE_DATA_Payload_Data>
 800a682:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800a686:	4630      	mov	r0, r6
 800a688:	1a52      	subs	r2, r2, r1
 800a68a:	f7fe fabd 	bl	8008c08 <ucdr_init_buffer>
 800a68e:	9b05      	ldr	r3, [sp, #20]
 800a690:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800a694:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a696:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800a69a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800a69c:	491b      	ldr	r1, [pc, #108]	@ (800a70c <uxr_prepare_output_stream_fragmented+0x190>)
 800a69e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	f7fe fa81 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	b011      	add	sp, #68	@ 0x44
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800a6b8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	4798      	blx	r3
 800a6be:	b920      	cbnz	r0, 800a6ca <uxr_prepare_output_stream_fragmented+0x14e>
 800a6c0:	2400      	movs	r4, #0
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	b011      	add	sp, #68	@ 0x44
 800a6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f003 ffb0 	bl	800e630 <get_available_free_slots>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	f47f af6d 	bne.w	800a5b0 <uxr_prepare_output_stream_fragmented+0x34>
 800a6d6:	e7f3      	b.n	800a6c0 <uxr_prepare_output_stream_fragmented+0x144>
 800a6d8:	4638      	mov	r0, r7
 800a6da:	2101      	movs	r1, #1
 800a6dc:	f004 f8be 	bl	800e85c <uxr_seq_num_add>
 800a6e0:	8921      	ldrh	r1, [r4, #8]
 800a6e2:	fbb0 f2f1 	udiv	r2, r0, r1
 800a6e6:	fb01 0912 	mls	r9, r1, r2, r0
 800a6ea:	fa1f f289 	uxth.w	r2, r9
 800a6ee:	6863      	ldr	r3, [r4, #4]
 800a6f0:	fbb3 f9f1 	udiv	r9, r3, r1
 800a6f4:	6823      	ldr	r3, [r4, #0]
 800a6f6:	fb02 f909 	mul.w	r9, r2, r9
 800a6fa:	f109 0904 	add.w	r9, r9, #4
 800a6fe:	4499      	add	r9, r3
 800a700:	4607      	mov	r7, r0
 800a702:	7b23      	ldrb	r3, [r4, #12]
 800a704:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800a708:	e76b      	b.n	800a5e2 <uxr_prepare_output_stream_fragmented+0x66>
 800a70a:	bf00      	nop
 800a70c:	0800a409 	.word	0x0800a409

0800a710 <uxr_serialize_message_header>:
 800a710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a712:	b083      	sub	sp, #12
 800a714:	4616      	mov	r6, r2
 800a716:	4604      	mov	r4, r0
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	460d      	mov	r5, r1
 800a71c:	9f08      	ldr	r7, [sp, #32]
 800a71e:	f7fd fac7 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800a722:	4631      	mov	r1, r6
 800a724:	4620      	mov	r0, r4
 800a726:	f7fd fac3 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800a72a:	9a01      	ldr	r2, [sp, #4]
 800a72c:	2101      	movs	r1, #1
 800a72e:	4620      	mov	r0, r4
 800a730:	f7fd fb6a 	bl	8007e08 <ucdr_serialize_endian_uint16_t>
 800a734:	062b      	lsls	r3, r5, #24
 800a736:	d501      	bpl.n	800a73c <uxr_serialize_message_header+0x2c>
 800a738:	b003      	add	sp, #12
 800a73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73c:	2204      	movs	r2, #4
 800a73e:	4639      	mov	r1, r7
 800a740:	4620      	mov	r0, r4
 800a742:	b003      	add	sp, #12
 800a744:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a748:	f003 b850 	b.w	800d7ec <ucdr_serialize_array_uint8_t>

0800a74c <uxr_deserialize_message_header>:
 800a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74e:	b083      	sub	sp, #12
 800a750:	4616      	mov	r6, r2
 800a752:	4604      	mov	r4, r0
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	460d      	mov	r5, r1
 800a758:	9f08      	ldr	r7, [sp, #32]
 800a75a:	f7fd fabf 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800a75e:	4631      	mov	r1, r6
 800a760:	4620      	mov	r0, r4
 800a762:	f7fd fabb 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800a766:	9a01      	ldr	r2, [sp, #4]
 800a768:	2101      	movs	r1, #1
 800a76a:	4620      	mov	r0, r4
 800a76c:	f7fd fc40 	bl	8007ff0 <ucdr_deserialize_endian_uint16_t>
 800a770:	f995 3000 	ldrsb.w	r3, [r5]
 800a774:	2b00      	cmp	r3, #0
 800a776:	da01      	bge.n	800a77c <uxr_deserialize_message_header+0x30>
 800a778:	b003      	add	sp, #12
 800a77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a77c:	2204      	movs	r2, #4
 800a77e:	4639      	mov	r1, r7
 800a780:	4620      	mov	r0, r4
 800a782:	b003      	add	sp, #12
 800a784:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a788:	f003 b894 	b.w	800d8b4 <ucdr_deserialize_array_uint8_t>

0800a78c <uxr_serialize_submessage_header>:
 800a78c:	b530      	push	{r4, r5, lr}
 800a78e:	b083      	sub	sp, #12
 800a790:	4615      	mov	r5, r2
 800a792:	4604      	mov	r4, r0
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	f7fd fa8b 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800a79a:	4629      	mov	r1, r5
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7fd fa87 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800a7a2:	9a01      	ldr	r2, [sp, #4]
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	b003      	add	sp, #12
 800a7aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7ae:	f7fd bb2b 	b.w	8007e08 <ucdr_serialize_endian_uint16_t>
 800a7b2:	bf00      	nop

0800a7b4 <uxr_deserialize_submessage_header>:
 800a7b4:	b530      	push	{r4, r5, lr}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	4615      	mov	r5, r2
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	f7fd fa8d 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f7fd fa89 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800a7ca:	9a01      	ldr	r2, [sp, #4]
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	b003      	add	sp, #12
 800a7d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7d6:	f7fd bc0b 	b.w	8007ff0 <ucdr_deserialize_endian_uint16_t>
 800a7da:	bf00      	nop

0800a7dc <uxr_serialize_CLIENT_Representation>:
 800a7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e0:	2204      	movs	r2, #4
 800a7e2:	460e      	mov	r6, r1
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	f003 f801 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	4607      	mov	r7, r0
 800a7ee:	1d31      	adds	r1, r6, #4
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f002 fffb 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800a7f6:	4038      	ands	r0, r7
 800a7f8:	2202      	movs	r2, #2
 800a7fa:	1db1      	adds	r1, r6, #6
 800a7fc:	b2c7      	uxtb	r7, r0
 800a7fe:	4628      	mov	r0, r5
 800a800:	f002 fff4 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800a804:	2204      	movs	r2, #4
 800a806:	4007      	ands	r7, r0
 800a808:	f106 0108 	add.w	r1, r6, #8
 800a80c:	4628      	mov	r0, r5
 800a80e:	f002 ffed 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800a812:	7b31      	ldrb	r1, [r6, #12]
 800a814:	4007      	ands	r7, r0
 800a816:	4628      	mov	r0, r5
 800a818:	f7fd fa4a 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800a81c:	7b71      	ldrb	r1, [r6, #13]
 800a81e:	4007      	ands	r7, r0
 800a820:	4628      	mov	r0, r5
 800a822:	f7fd fa17 	bl	8007c54 <ucdr_serialize_bool>
 800a826:	7b73      	ldrb	r3, [r6, #13]
 800a828:	ea07 0800 	and.w	r8, r7, r0
 800a82c:	b93b      	cbnz	r3, 800a83e <uxr_serialize_CLIENT_Representation+0x62>
 800a82e:	8bb1      	ldrh	r1, [r6, #28]
 800a830:	4628      	mov	r0, r5
 800a832:	f7fd fa69 	bl	8007d08 <ucdr_serialize_uint16_t>
 800a836:	ea08 0000 	and.w	r0, r8, r0
 800a83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a83e:	6931      	ldr	r1, [r6, #16]
 800a840:	4628      	mov	r0, r5
 800a842:	f7fd fc4b 	bl	80080dc <ucdr_serialize_uint32_t>
 800a846:	6933      	ldr	r3, [r6, #16]
 800a848:	b1e3      	cbz	r3, 800a884 <uxr_serialize_CLIENT_Representation+0xa8>
 800a84a:	b1c0      	cbz	r0, 800a87e <uxr_serialize_CLIENT_Representation+0xa2>
 800a84c:	4637      	mov	r7, r6
 800a84e:	f04f 0900 	mov.w	r9, #0
 800a852:	e001      	b.n	800a858 <uxr_serialize_CLIENT_Representation+0x7c>
 800a854:	3708      	adds	r7, #8
 800a856:	b194      	cbz	r4, 800a87e <uxr_serialize_CLIENT_Representation+0xa2>
 800a858:	6979      	ldr	r1, [r7, #20]
 800a85a:	4628      	mov	r0, r5
 800a85c:	f003 f8e6 	bl	800da2c <ucdr_serialize_string>
 800a860:	69b9      	ldr	r1, [r7, #24]
 800a862:	4604      	mov	r4, r0
 800a864:	4628      	mov	r0, r5
 800a866:	f003 f8e1 	bl	800da2c <ucdr_serialize_string>
 800a86a:	6933      	ldr	r3, [r6, #16]
 800a86c:	f109 0901 	add.w	r9, r9, #1
 800a870:	4004      	ands	r4, r0
 800a872:	4599      	cmp	r9, r3
 800a874:	b2e4      	uxtb	r4, r4
 800a876:	d3ed      	bcc.n	800a854 <uxr_serialize_CLIENT_Representation+0x78>
 800a878:	ea08 0804 	and.w	r8, r8, r4
 800a87c:	e7d7      	b.n	800a82e <uxr_serialize_CLIENT_Representation+0x52>
 800a87e:	f04f 0800 	mov.w	r8, #0
 800a882:	e7d4      	b.n	800a82e <uxr_serialize_CLIENT_Representation+0x52>
 800a884:	ea08 0800 	and.w	r8, r8, r0
 800a888:	e7d1      	b.n	800a82e <uxr_serialize_CLIENT_Representation+0x52>
 800a88a:	bf00      	nop

0800a88c <uxr_deserialize_CLIENT_Representation>:
 800a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a890:	2204      	movs	r2, #4
 800a892:	460c      	mov	r4, r1
 800a894:	4605      	mov	r5, r0
 800a896:	f003 f80d 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800a89a:	2202      	movs	r2, #2
 800a89c:	4607      	mov	r7, r0
 800a89e:	1d21      	adds	r1, r4, #4
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	f003 f807 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800a8a6:	4038      	ands	r0, r7
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	1da1      	adds	r1, r4, #6
 800a8ac:	b2c6      	uxtb	r6, r0
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f003 f800 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800a8b4:	2204      	movs	r2, #4
 800a8b6:	4006      	ands	r6, r0
 800a8b8:	f104 0108 	add.w	r1, r4, #8
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f002 fff9 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800a8c2:	f104 010c 	add.w	r1, r4, #12
 800a8c6:	4006      	ands	r6, r0
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f7fd fa07 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800a8ce:	f104 010d 	add.w	r1, r4, #13
 800a8d2:	ea06 0700 	and.w	r7, r6, r0
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f7fd f9d2 	bl	8007c80 <ucdr_deserialize_bool>
 800a8dc:	7b63      	ldrb	r3, [r4, #13]
 800a8de:	4007      	ands	r7, r0
 800a8e0:	b93b      	cbnz	r3, 800a8f2 <uxr_deserialize_CLIENT_Representation+0x66>
 800a8e2:	f104 011c 	add.w	r1, r4, #28
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f7fd fb0e 	bl	8007f08 <ucdr_deserialize_uint16_t>
 800a8ec:	4038      	ands	r0, r7
 800a8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f2:	f104 0110 	add.w	r1, r4, #16
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f7fd fd20 	bl	800833c <ucdr_deserialize_uint32_t>
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d903      	bls.n	800a90a <uxr_deserialize_CLIENT_Representation+0x7e>
 800a902:	2301      	movs	r3, #1
 800a904:	75ab      	strb	r3, [r5, #22]
 800a906:	2700      	movs	r7, #0
 800a908:	e7eb      	b.n	800a8e2 <uxr_deserialize_CLIENT_Representation+0x56>
 800a90a:	b30b      	cbz	r3, 800a950 <uxr_deserialize_CLIENT_Representation+0xc4>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d0fa      	beq.n	800a906 <uxr_deserialize_CLIENT_Representation+0x7a>
 800a910:	46a0      	mov	r8, r4
 800a912:	f04f 0900 	mov.w	r9, #0
 800a916:	e001      	b.n	800a91c <uxr_deserialize_CLIENT_Representation+0x90>
 800a918:	2e00      	cmp	r6, #0
 800a91a:	d0f4      	beq.n	800a906 <uxr_deserialize_CLIENT_Representation+0x7a>
 800a91c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800a920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a924:	4628      	mov	r0, r5
 800a926:	f003 f891 	bl	800da4c <ucdr_deserialize_string>
 800a92a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a92e:	4606      	mov	r6, r0
 800a930:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800a934:	4628      	mov	r0, r5
 800a936:	f003 f889 	bl	800da4c <ucdr_deserialize_string>
 800a93a:	6923      	ldr	r3, [r4, #16]
 800a93c:	f109 0901 	add.w	r9, r9, #1
 800a940:	4006      	ands	r6, r0
 800a942:	4599      	cmp	r9, r3
 800a944:	f108 0808 	add.w	r8, r8, #8
 800a948:	b2f6      	uxtb	r6, r6
 800a94a:	d3e5      	bcc.n	800a918 <uxr_deserialize_CLIENT_Representation+0x8c>
 800a94c:	4037      	ands	r7, r6
 800a94e:	e7c8      	b.n	800a8e2 <uxr_deserialize_CLIENT_Representation+0x56>
 800a950:	4007      	ands	r7, r0
 800a952:	e7c6      	b.n	800a8e2 <uxr_deserialize_CLIENT_Representation+0x56>

0800a954 <uxr_serialize_AGENT_Representation>:
 800a954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a958:	2204      	movs	r2, #4
 800a95a:	460f      	mov	r7, r1
 800a95c:	4605      	mov	r5, r0
 800a95e:	f002 ff45 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800a962:	2202      	movs	r2, #2
 800a964:	4604      	mov	r4, r0
 800a966:	1d39      	adds	r1, r7, #4
 800a968:	4628      	mov	r0, r5
 800a96a:	f002 ff3f 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800a96e:	4020      	ands	r0, r4
 800a970:	2202      	movs	r2, #2
 800a972:	1db9      	adds	r1, r7, #6
 800a974:	b2c4      	uxtb	r4, r0
 800a976:	4628      	mov	r0, r5
 800a978:	f002 ff38 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800a97c:	7a39      	ldrb	r1, [r7, #8]
 800a97e:	4004      	ands	r4, r0
 800a980:	4628      	mov	r0, r5
 800a982:	f7fd f967 	bl	8007c54 <ucdr_serialize_bool>
 800a986:	7a3b      	ldrb	r3, [r7, #8]
 800a988:	ea00 0804 	and.w	r8, r0, r4
 800a98c:	b913      	cbnz	r3, 800a994 <uxr_serialize_AGENT_Representation+0x40>
 800a98e:	4640      	mov	r0, r8
 800a990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a994:	68f9      	ldr	r1, [r7, #12]
 800a996:	4628      	mov	r0, r5
 800a998:	f7fd fba0 	bl	80080dc <ucdr_serialize_uint32_t>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	b303      	cbz	r3, 800a9e2 <uxr_serialize_AGENT_Representation+0x8e>
 800a9a0:	b1d0      	cbz	r0, 800a9d8 <uxr_serialize_AGENT_Representation+0x84>
 800a9a2:	463e      	mov	r6, r7
 800a9a4:	f04f 0900 	mov.w	r9, #0
 800a9a8:	e001      	b.n	800a9ae <uxr_serialize_AGENT_Representation+0x5a>
 800a9aa:	3608      	adds	r6, #8
 800a9ac:	b1a4      	cbz	r4, 800a9d8 <uxr_serialize_AGENT_Representation+0x84>
 800a9ae:	6931      	ldr	r1, [r6, #16]
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f003 f83b 	bl	800da2c <ucdr_serialize_string>
 800a9b6:	6971      	ldr	r1, [r6, #20]
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f003 f836 	bl	800da2c <ucdr_serialize_string>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f109 0901 	add.w	r9, r9, #1
 800a9c6:	4004      	ands	r4, r0
 800a9c8:	4599      	cmp	r9, r3
 800a9ca:	b2e4      	uxtb	r4, r4
 800a9cc:	d3ed      	bcc.n	800a9aa <uxr_serialize_AGENT_Representation+0x56>
 800a9ce:	ea08 0804 	and.w	r8, r8, r4
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d8:	f04f 0800 	mov.w	r8, #0
 800a9dc:	4640      	mov	r0, r8
 800a9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e2:	ea08 0800 	and.w	r8, r8, r0
 800a9e6:	e7d2      	b.n	800a98e <uxr_serialize_AGENT_Representation+0x3a>

0800a9e8 <uxr_serialize_DATAWRITER_Representation>:
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	7809      	ldrb	r1, [r1, #0]
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	f7fd f95e 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	b130      	cbz	r0, 800aa06 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800a9f8:	782b      	ldrb	r3, [r5, #0]
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d00c      	beq.n	800aa18 <uxr_serialize_DATAWRITER_Representation+0x30>
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d010      	beq.n	800aa24 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d008      	beq.n	800aa18 <uxr_serialize_DATAWRITER_Representation+0x30>
 800aa06:	2202      	movs	r2, #2
 800aa08:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f002 feed 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800aa12:	4020      	ands	r0, r4
 800aa14:	b2c0      	uxtb	r0, r0
 800aa16:	bd70      	pop	{r4, r5, r6, pc}
 800aa18:	6869      	ldr	r1, [r5, #4]
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f003 f806 	bl	800da2c <ucdr_serialize_string>
 800aa20:	4604      	mov	r4, r0
 800aa22:	e7f0      	b.n	800aa06 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800aa24:	4629      	mov	r1, r5
 800aa26:	4630      	mov	r0, r6
 800aa28:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800aa2c:	3104      	adds	r1, #4
 800aa2e:	f002 ffd1 	bl	800d9d4 <ucdr_serialize_sequence_uint8_t>
 800aa32:	4604      	mov	r4, r0
 800aa34:	e7e7      	b.n	800aa06 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800aa36:	bf00      	nop

0800aa38 <uxr_serialize_ObjectVariant.part.0>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	780b      	ldrb	r3, [r1, #0]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	460c      	mov	r4, r1
 800aa40:	4605      	mov	r5, r0
 800aa42:	2b0d      	cmp	r3, #13
 800aa44:	d854      	bhi.n	800aaf0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800aa46:	e8df f003 	tbb	[pc, r3]
 800aa4a:	0730      	.short	0x0730
 800aa4c:	07071b1b 	.word	0x07071b1b
 800aa50:	0c530707 	.word	0x0c530707
 800aa54:	494e0c0c 	.word	0x494e0c0c
 800aa58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa5c:	3104      	adds	r1, #4
 800aa5e:	f7ff bfc3 	b.w	800a9e8 <uxr_serialize_DATAWRITER_Representation>
 800aa62:	7909      	ldrb	r1, [r1, #4]
 800aa64:	f7fd f924 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800aa68:	b1e8      	cbz	r0, 800aaa6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800aa6a:	7923      	ldrb	r3, [r4, #4]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d001      	beq.n	800aa74 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d13d      	bne.n	800aaf0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800aa74:	68a1      	ldr	r1, [r4, #8]
 800aa76:	4628      	mov	r0, r5
 800aa78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa7c:	f002 bfd6 	b.w	800da2c <ucdr_serialize_string>
 800aa80:	7909      	ldrb	r1, [r1, #4]
 800aa82:	f7fd f915 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800aa86:	4606      	mov	r6, r0
 800aa88:	b120      	cbz	r0, 800aa94 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800aa8a:	7923      	ldrb	r3, [r4, #4]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d039      	beq.n	800ab04 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800aa90:	2b03      	cmp	r3, #3
 800aa92:	d02f      	beq.n	800aaf4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800aa94:	2202      	movs	r2, #2
 800aa96:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f002 fea6 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800aaa0:	4030      	ands	r0, r6
 800aaa2:	b2c0      	uxtb	r0, r0
 800aaa4:	bd70      	pop	{r4, r5, r6, pc}
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	bd70      	pop	{r4, r5, r6, pc}
 800aaaa:	7909      	ldrb	r1, [r1, #4]
 800aaac:	f7fd f900 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800aab0:	4606      	mov	r6, r0
 800aab2:	b158      	cbz	r0, 800aacc <uxr_serialize_ObjectVariant.part.0+0x94>
 800aab4:	7923      	ldrb	r3, [r4, #4]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d003      	beq.n	800aac2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d028      	beq.n	800ab10 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d104      	bne.n	800aacc <uxr_serialize_ObjectVariant.part.0+0x94>
 800aac2:	68a1      	ldr	r1, [r4, #8]
 800aac4:	4628      	mov	r0, r5
 800aac6:	f002 ffb1 	bl	800da2c <ucdr_serialize_string>
 800aaca:	4606      	mov	r6, r0
 800aacc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800aad0:	4628      	mov	r0, r5
 800aad2:	f7fd fe29 	bl	8008728 <ucdr_serialize_int16_t>
 800aad6:	4030      	ands	r0, r6
 800aad8:	b2c0      	uxtb	r0, r0
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aae0:	3104      	adds	r1, #4
 800aae2:	f7ff be7b 	b.w	800a7dc <uxr_serialize_CLIENT_Representation>
 800aae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aaea:	3104      	adds	r1, #4
 800aaec:	f7ff bf32 	b.w	800a954 <uxr_serialize_AGENT_Representation>
 800aaf0:	2001      	movs	r0, #1
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	68a2      	ldr	r2, [r4, #8]
 800aaf6:	f104 010c 	add.w	r1, r4, #12
 800aafa:	4628      	mov	r0, r5
 800aafc:	f002 ff6a 	bl	800d9d4 <ucdr_serialize_sequence_uint8_t>
 800ab00:	4606      	mov	r6, r0
 800ab02:	e7c7      	b.n	800aa94 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ab04:	68a1      	ldr	r1, [r4, #8]
 800ab06:	4628      	mov	r0, r5
 800ab08:	f002 ff90 	bl	800da2c <ucdr_serialize_string>
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	e7c1      	b.n	800aa94 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ab10:	68a2      	ldr	r2, [r4, #8]
 800ab12:	f104 010c 	add.w	r1, r4, #12
 800ab16:	4628      	mov	r0, r5
 800ab18:	f002 ff5c 	bl	800d9d4 <ucdr_serialize_sequence_uint8_t>
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	e7d5      	b.n	800aacc <uxr_serialize_ObjectVariant.part.0+0x94>

0800ab20 <uxr_deserialize_DATAWRITER_Representation>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	4606      	mov	r6, r0
 800ab24:	460d      	mov	r5, r1
 800ab26:	f7fd f8d9 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	b130      	cbz	r0, 800ab3c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ab2e:	782b      	ldrb	r3, [r5, #0]
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d00c      	beq.n	800ab4e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d012      	beq.n	800ab5e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d008      	beq.n	800ab4e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ab42:	4630      	mov	r0, r6
 800ab44:	f002 feb6 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800ab48:	4020      	ands	r0, r4
 800ab4a:	b2c0      	uxtb	r0, r0
 800ab4c:	bd70      	pop	{r4, r5, r6, pc}
 800ab4e:	6869      	ldr	r1, [r5, #4]
 800ab50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab54:	4630      	mov	r0, r6
 800ab56:	f002 ff79 	bl	800da4c <ucdr_deserialize_string>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	e7ee      	b.n	800ab3c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ab5e:	1d2b      	adds	r3, r5, #4
 800ab60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab64:	f105 0108 	add.w	r1, r5, #8
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f002 ff45 	bl	800d9f8 <ucdr_deserialize_sequence_uint8_t>
 800ab6e:	4604      	mov	r4, r0
 800ab70:	e7e4      	b.n	800ab3c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ab72:	bf00      	nop

0800ab74 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	460d      	mov	r5, r1
 800ab78:	7809      	ldrb	r1, [r1, #0]
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	f7fd f86a 	bl	8007c54 <ucdr_serialize_bool>
 800ab80:	782b      	ldrb	r3, [r5, #0]
 800ab82:	4604      	mov	r4, r0
 800ab84:	b94b      	cbnz	r3, 800ab9a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ab86:	7a29      	ldrb	r1, [r5, #8]
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f7fd f863 	bl	8007c54 <ucdr_serialize_bool>
 800ab8e:	7a2b      	ldrb	r3, [r5, #8]
 800ab90:	4004      	ands	r4, r0
 800ab92:	b2e4      	uxtb	r4, r4
 800ab94:	b943      	cbnz	r3, 800aba8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ab96:	4620      	mov	r0, r4
 800ab98:	bd70      	pop	{r4, r5, r6, pc}
 800ab9a:	6869      	ldr	r1, [r5, #4]
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f002 ff45 	bl	800da2c <ucdr_serialize_string>
 800aba2:	4004      	ands	r4, r0
 800aba4:	b2e4      	uxtb	r4, r4
 800aba6:	e7ee      	b.n	800ab86 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800aba8:	68e9      	ldr	r1, [r5, #12]
 800abaa:	4630      	mov	r0, r6
 800abac:	f002 ff3e 	bl	800da2c <ucdr_serialize_string>
 800abb0:	4004      	ands	r4, r0
 800abb2:	4620      	mov	r0, r4
 800abb4:	bd70      	pop	{r4, r5, r6, pc}
 800abb6:	bf00      	nop

0800abb8 <uxr_serialize_OBJK_Topic_Binary>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	460d      	mov	r5, r1
 800abbc:	6809      	ldr	r1, [r1, #0]
 800abbe:	4606      	mov	r6, r0
 800abc0:	f002 ff34 	bl	800da2c <ucdr_serialize_string>
 800abc4:	7929      	ldrb	r1, [r5, #4]
 800abc6:	4604      	mov	r4, r0
 800abc8:	4630      	mov	r0, r6
 800abca:	f7fd f843 	bl	8007c54 <ucdr_serialize_bool>
 800abce:	792b      	ldrb	r3, [r5, #4]
 800abd0:	4004      	ands	r4, r0
 800abd2:	b2e4      	uxtb	r4, r4
 800abd4:	b943      	cbnz	r3, 800abe8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800abd6:	7b29      	ldrb	r1, [r5, #12]
 800abd8:	4630      	mov	r0, r6
 800abda:	f7fd f83b 	bl	8007c54 <ucdr_serialize_bool>
 800abde:	7b2b      	ldrb	r3, [r5, #12]
 800abe0:	4004      	ands	r4, r0
 800abe2:	b93b      	cbnz	r3, 800abf4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800abe4:	4620      	mov	r0, r4
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
 800abe8:	68a9      	ldr	r1, [r5, #8]
 800abea:	4630      	mov	r0, r6
 800abec:	f002 ff1e 	bl	800da2c <ucdr_serialize_string>
 800abf0:	4004      	ands	r4, r0
 800abf2:	e7f0      	b.n	800abd6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800abf4:	6929      	ldr	r1, [r5, #16]
 800abf6:	4630      	mov	r0, r6
 800abf8:	f002 ff18 	bl	800da2c <ucdr_serialize_string>
 800abfc:	4004      	ands	r4, r0
 800abfe:	b2e4      	uxtb	r4, r4
 800ac00:	4620      	mov	r0, r4
 800ac02:	bd70      	pop	{r4, r5, r6, pc}

0800ac04 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ac04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac08:	460c      	mov	r4, r1
 800ac0a:	7809      	ldrb	r1, [r1, #0]
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	f7fd f821 	bl	8007c54 <ucdr_serialize_bool>
 800ac12:	7823      	ldrb	r3, [r4, #0]
 800ac14:	4605      	mov	r5, r0
 800ac16:	b96b      	cbnz	r3, 800ac34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ac18:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7fd f819 	bl	8007c54 <ucdr_serialize_bool>
 800ac22:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ac26:	4005      	ands	r5, r0
 800ac28:	b2ed      	uxtb	r5, r5
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d169      	bne.n	800ad02 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800ac2e:	4628      	mov	r0, r5
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	6861      	ldr	r1, [r4, #4]
 800ac36:	4630      	mov	r0, r6
 800ac38:	f7fd fa50 	bl	80080dc <ucdr_serialize_uint32_t>
 800ac3c:	6863      	ldr	r3, [r4, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d06b      	beq.n	800ad1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d067      	beq.n	800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ac46:	68a1      	ldr	r1, [r4, #8]
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f002 feef 	bl	800da2c <ucdr_serialize_string>
 800ac4e:	6863      	ldr	r3, [r4, #4]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d953      	bls.n	800acfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d05e      	beq.n	800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ac58:	68e1      	ldr	r1, [r4, #12]
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f002 fee6 	bl	800da2c <ucdr_serialize_string>
 800ac60:	6863      	ldr	r3, [r4, #4]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d94a      	bls.n	800acfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d055      	beq.n	800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ac6a:	6921      	ldr	r1, [r4, #16]
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f002 fedd 	bl	800da2c <ucdr_serialize_string>
 800ac72:	6863      	ldr	r3, [r4, #4]
 800ac74:	2b03      	cmp	r3, #3
 800ac76:	d941      	bls.n	800acfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d04c      	beq.n	800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ac7c:	6961      	ldr	r1, [r4, #20]
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f002 fed4 	bl	800da2c <ucdr_serialize_string>
 800ac84:	6863      	ldr	r3, [r4, #4]
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d938      	bls.n	800acfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d043      	beq.n	800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ac8e:	69a1      	ldr	r1, [r4, #24]
 800ac90:	4630      	mov	r0, r6
 800ac92:	f002 fecb 	bl	800da2c <ucdr_serialize_string>
 800ac96:	6863      	ldr	r3, [r4, #4]
 800ac98:	2b05      	cmp	r3, #5
 800ac9a:	d92f      	bls.n	800acfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d03a      	beq.n	800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800aca0:	69e1      	ldr	r1, [r4, #28]
 800aca2:	4630      	mov	r0, r6
 800aca4:	f002 fec2 	bl	800da2c <ucdr_serialize_string>
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	2b06      	cmp	r3, #6
 800acac:	d926      	bls.n	800acfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800acae:	b390      	cbz	r0, 800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800acb0:	6a21      	ldr	r1, [r4, #32]
 800acb2:	4630      	mov	r0, r6
 800acb4:	f002 feba 	bl	800da2c <ucdr_serialize_string>
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	2b07      	cmp	r3, #7
 800acbc:	d91e      	bls.n	800acfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800acbe:	b350      	cbz	r0, 800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800acc0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800acc2:	4630      	mov	r0, r6
 800acc4:	f002 feb2 	bl	800da2c <ucdr_serialize_string>
 800acc8:	6863      	ldr	r3, [r4, #4]
 800acca:	2b08      	cmp	r3, #8
 800accc:	d916      	bls.n	800acfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800acce:	b310      	cbz	r0, 800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800acd0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800acd2:	4630      	mov	r0, r6
 800acd4:	f002 feaa 	bl	800da2c <ucdr_serialize_string>
 800acd8:	6863      	ldr	r3, [r4, #4]
 800acda:	2b09      	cmp	r3, #9
 800acdc:	d90e      	bls.n	800acfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800acde:	b1d0      	cbz	r0, 800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ace0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800ace4:	2709      	movs	r7, #9
 800ace6:	e000      	b.n	800acea <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800ace8:	b1a8      	cbz	r0, 800ad16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800acea:	f858 1b04 	ldr.w	r1, [r8], #4
 800acee:	4630      	mov	r0, r6
 800acf0:	f002 fe9c 	bl	800da2c <ucdr_serialize_string>
 800acf4:	6862      	ldr	r2, [r4, #4]
 800acf6:	3701      	adds	r7, #1
 800acf8:	4297      	cmp	r7, r2
 800acfa:	d3f5      	bcc.n	800ace8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800acfc:	4005      	ands	r5, r0
 800acfe:	b2ed      	uxtb	r5, r5
 800ad00:	e78a      	b.n	800ac18 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ad02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ad04:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f002 fe63 	bl	800d9d4 <ucdr_serialize_sequence_uint8_t>
 800ad0e:	4005      	ands	r5, r0
 800ad10:	4628      	mov	r0, r5
 800ad12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad16:	2500      	movs	r5, #0
 800ad18:	e77e      	b.n	800ac18 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ad1a:	4028      	ands	r0, r5
 800ad1c:	b2c5      	uxtb	r5, r0
 800ad1e:	e77b      	b.n	800ac18 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800ad20 <uxr_serialize_OBJK_Publisher_Binary>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	460d      	mov	r5, r1
 800ad24:	7809      	ldrb	r1, [r1, #0]
 800ad26:	4606      	mov	r6, r0
 800ad28:	f7fc ff94 	bl	8007c54 <ucdr_serialize_bool>
 800ad2c:	782b      	ldrb	r3, [r5, #0]
 800ad2e:	4604      	mov	r4, r0
 800ad30:	b94b      	cbnz	r3, 800ad46 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800ad32:	7a29      	ldrb	r1, [r5, #8]
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7fc ff8d 	bl	8007c54 <ucdr_serialize_bool>
 800ad3a:	7a2b      	ldrb	r3, [r5, #8]
 800ad3c:	4004      	ands	r4, r0
 800ad3e:	b2e4      	uxtb	r4, r4
 800ad40:	b943      	cbnz	r3, 800ad54 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800ad42:	4620      	mov	r0, r4
 800ad44:	bd70      	pop	{r4, r5, r6, pc}
 800ad46:	6869      	ldr	r1, [r5, #4]
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f002 fe6f 	bl	800da2c <ucdr_serialize_string>
 800ad4e:	4004      	ands	r4, r0
 800ad50:	b2e4      	uxtb	r4, r4
 800ad52:	e7ee      	b.n	800ad32 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800ad54:	f105 010c 	add.w	r1, r5, #12
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7ff ff53 	bl	800ac04 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800ad5e:	4004      	ands	r4, r0
 800ad60:	4620      	mov	r0, r4
 800ad62:	bd70      	pop	{r4, r5, r6, pc}

0800ad64 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800ad64:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800ad68:	4688      	mov	r8, r1
 800ad6a:	8809      	ldrh	r1, [r1, #0]
 800ad6c:	4681      	mov	r9, r0
 800ad6e:	f7fc ffcb 	bl	8007d08 <ucdr_serialize_uint16_t>
 800ad72:	f898 1002 	ldrb.w	r1, [r8, #2]
 800ad76:	4606      	mov	r6, r0
 800ad78:	4648      	mov	r0, r9
 800ad7a:	f7fc ff6b 	bl	8007c54 <ucdr_serialize_bool>
 800ad7e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ad82:	4006      	ands	r6, r0
 800ad84:	b2f5      	uxtb	r5, r6
 800ad86:	b9eb      	cbnz	r3, 800adc4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800ad88:	f898 1006 	ldrb.w	r1, [r8, #6]
 800ad8c:	4648      	mov	r0, r9
 800ad8e:	f7fc ff61 	bl	8007c54 <ucdr_serialize_bool>
 800ad92:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ad96:	4005      	ands	r5, r0
 800ad98:	bb7b      	cbnz	r3, 800adfa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800ad9a:	f898 100c 	ldrb.w	r1, [r8, #12]
 800ad9e:	4648      	mov	r0, r9
 800ada0:	f7fc ff58 	bl	8007c54 <ucdr_serialize_bool>
 800ada4:	f898 300c 	ldrb.w	r3, [r8, #12]
 800ada8:	4005      	ands	r5, r0
 800adaa:	b9f3      	cbnz	r3, 800adea <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800adac:	f898 1014 	ldrb.w	r1, [r8, #20]
 800adb0:	4648      	mov	r0, r9
 800adb2:	f7fc ff4f 	bl	8007c54 <ucdr_serialize_bool>
 800adb6:	f898 3014 	ldrb.w	r3, [r8, #20]
 800adba:	4005      	ands	r5, r0
 800adbc:	b94b      	cbnz	r3, 800add2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800adbe:	4628      	mov	r0, r5
 800adc0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800adc4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800adc8:	4648      	mov	r0, r9
 800adca:	f7fc ff9d 	bl	8007d08 <ucdr_serialize_uint16_t>
 800adce:	4005      	ands	r5, r0
 800add0:	e7da      	b.n	800ad88 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800add2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800add6:	f108 011c 	add.w	r1, r8, #28
 800adda:	4648      	mov	r0, r9
 800addc:	f002 fdfa 	bl	800d9d4 <ucdr_serialize_sequence_uint8_t>
 800ade0:	4028      	ands	r0, r5
 800ade2:	b2c5      	uxtb	r5, r0
 800ade4:	4628      	mov	r0, r5
 800ade6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800adea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800adee:	4648      	mov	r0, r9
 800adf0:	f7fd f974 	bl	80080dc <ucdr_serialize_uint32_t>
 800adf4:	4028      	ands	r0, r5
 800adf6:	b2c5      	uxtb	r5, r0
 800adf8:	e7d8      	b.n	800adac <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800adfa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800adfe:	4648      	mov	r0, r9
 800ae00:	f7fd f96c 	bl	80080dc <ucdr_serialize_uint32_t>
 800ae04:	4028      	ands	r0, r5
 800ae06:	b2c5      	uxtb	r5, r0
 800ae08:	e7c7      	b.n	800ad9a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800ae0a:	bf00      	nop

0800ae0c <uxr_serialize_OBJK_DataWriter_Binary>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	2202      	movs	r2, #2
 800ae10:	460d      	mov	r5, r1
 800ae12:	4606      	mov	r6, r0
 800ae14:	f002 fcea 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800ae18:	78a9      	ldrb	r1, [r5, #2]
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f7fc ff19 	bl	8007c54 <ucdr_serialize_bool>
 800ae22:	78ab      	ldrb	r3, [r5, #2]
 800ae24:	4004      	ands	r4, r0
 800ae26:	b2e4      	uxtb	r4, r4
 800ae28:	b90b      	cbnz	r3, 800ae2e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae2e:	f105 0108 	add.w	r1, r5, #8
 800ae32:	4630      	mov	r0, r6
 800ae34:	f7ff ff96 	bl	800ad64 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ae38:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f7fc ff08 	bl	8007c54 <ucdr_serialize_bool>
 800ae44:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800ae48:	4038      	ands	r0, r7
 800ae4a:	b2c7      	uxtb	r7, r0
 800ae4c:	b913      	cbnz	r3, 800ae54 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ae4e:	403c      	ands	r4, r7
 800ae50:	4620      	mov	r0, r4
 800ae52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae54:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7fd fb95 	bl	8008588 <ucdr_serialize_uint64_t>
 800ae5e:	4007      	ands	r7, r0
 800ae60:	e7f5      	b.n	800ae4e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ae62:	bf00      	nop

0800ae64 <uxr_deserialize_ObjectVariant>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	4605      	mov	r5, r0
 800ae68:	460e      	mov	r6, r1
 800ae6a:	f7fc ff37 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800ae6e:	b168      	cbz	r0, 800ae8c <uxr_deserialize_ObjectVariant+0x28>
 800ae70:	7833      	ldrb	r3, [r6, #0]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	4604      	mov	r4, r0
 800ae76:	2b0d      	cmp	r3, #13
 800ae78:	d809      	bhi.n	800ae8e <uxr_deserialize_ObjectVariant+0x2a>
 800ae7a:	e8df f003 	tbb	[pc, r3]
 800ae7e:	0a41      	.short	0x0a41
 800ae80:	0a0a2323 	.word	0x0a0a2323
 800ae84:	10080a0a 	.word	0x10080a0a
 800ae88:	565c1010 	.word	0x565c1010
 800ae8c:	2400      	movs	r4, #0
 800ae8e:	4620      	mov	r0, r4
 800ae90:	bd70      	pop	{r4, r5, r6, pc}
 800ae92:	1d31      	adds	r1, r6, #4
 800ae94:	4628      	mov	r0, r5
 800ae96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae9a:	f7ff be41 	b.w	800ab20 <uxr_deserialize_DATAWRITER_Representation>
 800ae9e:	1d31      	adds	r1, r6, #4
 800aea0:	4628      	mov	r0, r5
 800aea2:	f7fc ff1b 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d0f0      	beq.n	800ae8c <uxr_deserialize_ObjectVariant+0x28>
 800aeaa:	7933      	ldrb	r3, [r6, #4]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d001      	beq.n	800aeb4 <uxr_deserialize_ObjectVariant+0x50>
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d1ec      	bne.n	800ae8e <uxr_deserialize_ObjectVariant+0x2a>
 800aeb4:	68b1      	ldr	r1, [r6, #8]
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aec0:	f002 bdc4 	b.w	800da4c <ucdr_deserialize_string>
 800aec4:	1d31      	adds	r1, r6, #4
 800aec6:	4628      	mov	r0, r5
 800aec8:	f7fc ff08 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800aecc:	4604      	mov	r4, r0
 800aece:	b170      	cbz	r0, 800aeee <uxr_deserialize_ObjectVariant+0x8a>
 800aed0:	7933      	ldrb	r3, [r6, #4]
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d04c      	beq.n	800af70 <uxr_deserialize_ObjectVariant+0x10c>
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d109      	bne.n	800aeee <uxr_deserialize_ObjectVariant+0x8a>
 800aeda:	f106 0308 	add.w	r3, r6, #8
 800aede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aee2:	f106 010c 	add.w	r1, r6, #12
 800aee6:	4628      	mov	r0, r5
 800aee8:	f002 fd86 	bl	800d9f8 <ucdr_deserialize_sequence_uint8_t>
 800aeec:	4604      	mov	r4, r0
 800aeee:	2202      	movs	r2, #2
 800aef0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800aef4:	4628      	mov	r0, r5
 800aef6:	f002 fcdd 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800aefa:	4020      	ands	r0, r4
 800aefc:	b2c4      	uxtb	r4, r0
 800aefe:	e7c6      	b.n	800ae8e <uxr_deserialize_ObjectVariant+0x2a>
 800af00:	1d31      	adds	r1, r6, #4
 800af02:	4628      	mov	r0, r5
 800af04:	f7fc feea 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800af08:	4604      	mov	r4, r0
 800af0a:	b130      	cbz	r0, 800af1a <uxr_deserialize_ObjectVariant+0xb6>
 800af0c:	7933      	ldrb	r3, [r6, #4]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d036      	beq.n	800af80 <uxr_deserialize_ObjectVariant+0x11c>
 800af12:	2b03      	cmp	r3, #3
 800af14:	d03c      	beq.n	800af90 <uxr_deserialize_ObjectVariant+0x12c>
 800af16:	2b01      	cmp	r3, #1
 800af18:	d032      	beq.n	800af80 <uxr_deserialize_ObjectVariant+0x11c>
 800af1a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800af1e:	4628      	mov	r0, r5
 800af20:	f7fd fc82 	bl	8008828 <ucdr_deserialize_int16_t>
 800af24:	4020      	ands	r0, r4
 800af26:	b2c4      	uxtb	r4, r0
 800af28:	e7b1      	b.n	800ae8e <uxr_deserialize_ObjectVariant+0x2a>
 800af2a:	1d31      	adds	r1, r6, #4
 800af2c:	4628      	mov	r0, r5
 800af2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af32:	f7ff bcab 	b.w	800a88c <uxr_deserialize_CLIENT_Representation>
 800af36:	2204      	movs	r2, #4
 800af38:	18b1      	adds	r1, r6, r2
 800af3a:	4628      	mov	r0, r5
 800af3c:	f002 fcba 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800af40:	2202      	movs	r2, #2
 800af42:	f106 0108 	add.w	r1, r6, #8
 800af46:	4604      	mov	r4, r0
 800af48:	4628      	mov	r0, r5
 800af4a:	f002 fcb3 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800af4e:	2202      	movs	r2, #2
 800af50:	4004      	ands	r4, r0
 800af52:	f106 010a 	add.w	r1, r6, #10
 800af56:	4628      	mov	r0, r5
 800af58:	f002 fcac 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800af5c:	b2e4      	uxtb	r4, r4
 800af5e:	4603      	mov	r3, r0
 800af60:	f106 010c 	add.w	r1, r6, #12
 800af64:	4628      	mov	r0, r5
 800af66:	401c      	ands	r4, r3
 800af68:	f7fc fe8a 	bl	8007c80 <ucdr_deserialize_bool>
 800af6c:	4004      	ands	r4, r0
 800af6e:	e78e      	b.n	800ae8e <uxr_deserialize_ObjectVariant+0x2a>
 800af70:	68b1      	ldr	r1, [r6, #8]
 800af72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af76:	4628      	mov	r0, r5
 800af78:	f002 fd68 	bl	800da4c <ucdr_deserialize_string>
 800af7c:	4604      	mov	r4, r0
 800af7e:	e7b6      	b.n	800aeee <uxr_deserialize_ObjectVariant+0x8a>
 800af80:	68b1      	ldr	r1, [r6, #8]
 800af82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af86:	4628      	mov	r0, r5
 800af88:	f002 fd60 	bl	800da4c <ucdr_deserialize_string>
 800af8c:	4604      	mov	r4, r0
 800af8e:	e7c4      	b.n	800af1a <uxr_deserialize_ObjectVariant+0xb6>
 800af90:	f106 0308 	add.w	r3, r6, #8
 800af94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af98:	f106 010c 	add.w	r1, r6, #12
 800af9c:	4628      	mov	r0, r5
 800af9e:	f002 fd2b 	bl	800d9f8 <ucdr_deserialize_sequence_uint8_t>
 800afa2:	4604      	mov	r4, r0
 800afa4:	e7b9      	b.n	800af1a <uxr_deserialize_ObjectVariant+0xb6>
 800afa6:	bf00      	nop

0800afa8 <uxr_deserialize_BaseObjectRequest>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	2202      	movs	r2, #2
 800afac:	4605      	mov	r5, r0
 800afae:	460e      	mov	r6, r1
 800afb0:	f002 fc80 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800afb4:	2202      	movs	r2, #2
 800afb6:	4604      	mov	r4, r0
 800afb8:	18b1      	adds	r1, r6, r2
 800afba:	4628      	mov	r0, r5
 800afbc:	f002 fc7a 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800afc0:	4020      	ands	r0, r4
 800afc2:	b2c0      	uxtb	r0, r0
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
 800afc6:	bf00      	nop

0800afc8 <uxr_serialize_ActivityInfoVariant>:
 800afc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afcc:	460d      	mov	r5, r1
 800afce:	7809      	ldrb	r1, [r1, #0]
 800afd0:	4607      	mov	r7, r0
 800afd2:	f7fc fe6d 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800afd6:	4681      	mov	r9, r0
 800afd8:	b138      	cbz	r0, 800afea <uxr_serialize_ActivityInfoVariant+0x22>
 800afda:	782b      	ldrb	r3, [r5, #0]
 800afdc:	2b06      	cmp	r3, #6
 800afde:	f000 8082 	beq.w	800b0e6 <uxr_serialize_ActivityInfoVariant+0x11e>
 800afe2:	2b0d      	cmp	r3, #13
 800afe4:	d016      	beq.n	800b014 <uxr_serialize_ActivityInfoVariant+0x4c>
 800afe6:	2b05      	cmp	r3, #5
 800afe8:	d002      	beq.n	800aff0 <uxr_serialize_ActivityInfoVariant+0x28>
 800afea:	4648      	mov	r0, r9
 800afec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800aff4:	4638      	mov	r0, r7
 800aff6:	f7fd fb97 	bl	8008728 <ucdr_serialize_int16_t>
 800affa:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800affe:	4681      	mov	r9, r0
 800b000:	4638      	mov	r0, r7
 800b002:	f7fd fac1 	bl	8008588 <ucdr_serialize_uint64_t>
 800b006:	ea09 0000 	and.w	r0, r9, r0
 800b00a:	fa5f f980 	uxtb.w	r9, r0
 800b00e:	4648      	mov	r0, r9
 800b010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b014:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800b018:	4638      	mov	r0, r7
 800b01a:	f7fd fb85 	bl	8008728 <ucdr_serialize_int16_t>
 800b01e:	68e9      	ldr	r1, [r5, #12]
 800b020:	4681      	mov	r9, r0
 800b022:	4638      	mov	r0, r7
 800b024:	f7fd f85a 	bl	80080dc <ucdr_serialize_uint32_t>
 800b028:	68eb      	ldr	r3, [r5, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0eb      	beq.n	800b006 <uxr_serialize_ActivityInfoVariant+0x3e>
 800b02e:	b320      	cbz	r0, 800b07a <uxr_serialize_ActivityInfoVariant+0xb2>
 800b030:	f105 080c 	add.w	r8, r5, #12
 800b034:	2600      	movs	r6, #0
 800b036:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800b03a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800b03e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800b042:	4638      	mov	r0, r7
 800b044:	f7fc fe34 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d053      	beq.n	800b0f4 <uxr_serialize_ActivityInfoVariant+0x12c>
 800b04c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800b050:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800b054:	0074      	lsls	r4, r6, #1
 800b056:	00c9      	lsls	r1, r1, #3
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d854      	bhi.n	800b106 <uxr_serialize_ActivityInfoVariant+0x13e>
 800b05c:	e8df f003 	tbb	[pc, r3]
 800b060:	02102132 	.word	0x02102132
 800b064:	4441      	add	r1, r8
 800b066:	4638      	mov	r0, r7
 800b068:	6889      	ldr	r1, [r1, #8]
 800b06a:	f002 fcdf 	bl	800da2c <ucdr_serialize_string>
 800b06e:	68ea      	ldr	r2, [r5, #12]
 800b070:	3601      	adds	r6, #1
 800b072:	4296      	cmp	r6, r2
 800b074:	d242      	bcs.n	800b0fc <uxr_serialize_ActivityInfoVariant+0x134>
 800b076:	2800      	cmp	r0, #0
 800b078:	d1dd      	bne.n	800b036 <uxr_serialize_ActivityInfoVariant+0x6e>
 800b07a:	f04f 0900 	mov.w	r9, #0
 800b07e:	e7b4      	b.n	800afea <uxr_serialize_ActivityInfoVariant+0x22>
 800b080:	3108      	adds	r1, #8
 800b082:	4441      	add	r1, r8
 800b084:	2210      	movs	r2, #16
 800b086:	4638      	mov	r0, r7
 800b088:	f002 fbb0 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b08c:	4434      	add	r4, r6
 800b08e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800b092:	4604      	mov	r4, r0
 800b094:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b096:	4638      	mov	r0, r7
 800b098:	f7fd f820 	bl	80080dc <ucdr_serialize_uint32_t>
 800b09c:	4020      	ands	r0, r4
 800b09e:	b2c0      	uxtb	r0, r0
 800b0a0:	e7e5      	b.n	800b06e <uxr_serialize_ActivityInfoVariant+0xa6>
 800b0a2:	3108      	adds	r1, #8
 800b0a4:	4441      	add	r1, r8
 800b0a6:	2204      	movs	r2, #4
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f002 fb9f 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b0ae:	4434      	add	r4, r6
 800b0b0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	8b19      	ldrh	r1, [r3, #24]
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f7fc fe25 	bl	8007d08 <ucdr_serialize_uint16_t>
 800b0be:	4020      	ands	r0, r4
 800b0c0:	b2c0      	uxtb	r0, r0
 800b0c2:	e7d4      	b.n	800b06e <uxr_serialize_ActivityInfoVariant+0xa6>
 800b0c4:	3108      	adds	r1, #8
 800b0c6:	4441      	add	r1, r8
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	f002 fb8e 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b0d0:	4434      	add	r4, r6
 800b0d2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	7d99      	ldrb	r1, [r3, #22]
 800b0da:	4638      	mov	r0, r7
 800b0dc:	f7fc fde8 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b0e0:	4020      	ands	r0, r4
 800b0e2:	b2c0      	uxtb	r0, r0
 800b0e4:	e7c3      	b.n	800b06e <uxr_serialize_ActivityInfoVariant+0xa6>
 800b0e6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f0:	f7fd bb1a 	b.w	8008728 <ucdr_serialize_int16_t>
 800b0f4:	68ea      	ldr	r2, [r5, #12]
 800b0f6:	3601      	adds	r6, #1
 800b0f8:	42b2      	cmp	r2, r6
 800b0fa:	d8be      	bhi.n	800b07a <uxr_serialize_ActivityInfoVariant+0xb2>
 800b0fc:	ea09 0900 	and.w	r9, r9, r0
 800b100:	fa5f f989 	uxtb.w	r9, r9
 800b104:	e771      	b.n	800afea <uxr_serialize_ActivityInfoVariant+0x22>
 800b106:	68eb      	ldr	r3, [r5, #12]
 800b108:	3601      	adds	r6, #1
 800b10a:	429e      	cmp	r6, r3
 800b10c:	f10a 0a18 	add.w	sl, sl, #24
 800b110:	d395      	bcc.n	800b03e <uxr_serialize_ActivityInfoVariant+0x76>
 800b112:	e76a      	b.n	800afea <uxr_serialize_ActivityInfoVariant+0x22>

0800b114 <uxr_deserialize_BaseObjectReply>:
 800b114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b118:	2202      	movs	r2, #2
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	f002 fbc9 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b122:	2202      	movs	r2, #2
 800b124:	18b9      	adds	r1, r7, r2
 800b126:	4605      	mov	r5, r0
 800b128:	4630      	mov	r0, r6
 800b12a:	f002 fbc3 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b12e:	1d39      	adds	r1, r7, #4
 800b130:	4680      	mov	r8, r0
 800b132:	4630      	mov	r0, r6
 800b134:	f7fc fdd2 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800b138:	1d79      	adds	r1, r7, #5
 800b13a:	4604      	mov	r4, r0
 800b13c:	4630      	mov	r0, r6
 800b13e:	f7fc fdcd 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800b142:	ea05 0508 	and.w	r5, r5, r8
 800b146:	402c      	ands	r4, r5
 800b148:	4020      	ands	r0, r4
 800b14a:	b2c0      	uxtb	r0, r0
 800b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b150 <uxr_serialize_ReadSpecification>:
 800b150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b154:	460e      	mov	r6, r1
 800b156:	7809      	ldrb	r1, [r1, #0]
 800b158:	4607      	mov	r7, r0
 800b15a:	f7fc fda9 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b15e:	7871      	ldrb	r1, [r6, #1]
 800b160:	4604      	mov	r4, r0
 800b162:	4638      	mov	r0, r7
 800b164:	f7fc fda4 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b168:	78b1      	ldrb	r1, [r6, #2]
 800b16a:	4004      	ands	r4, r0
 800b16c:	4638      	mov	r0, r7
 800b16e:	f7fc fd71 	bl	8007c54 <ucdr_serialize_bool>
 800b172:	78b3      	ldrb	r3, [r6, #2]
 800b174:	b2e4      	uxtb	r4, r4
 800b176:	4004      	ands	r4, r0
 800b178:	b94b      	cbnz	r3, 800b18e <uxr_serialize_ReadSpecification+0x3e>
 800b17a:	7a31      	ldrb	r1, [r6, #8]
 800b17c:	4638      	mov	r0, r7
 800b17e:	f7fc fd69 	bl	8007c54 <ucdr_serialize_bool>
 800b182:	7a33      	ldrb	r3, [r6, #8]
 800b184:	4004      	ands	r4, r0
 800b186:	b943      	cbnz	r3, 800b19a <uxr_serialize_ReadSpecification+0x4a>
 800b188:	4620      	mov	r0, r4
 800b18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b18e:	6871      	ldr	r1, [r6, #4]
 800b190:	4638      	mov	r0, r7
 800b192:	f002 fc4b 	bl	800da2c <ucdr_serialize_string>
 800b196:	4004      	ands	r4, r0
 800b198:	e7ef      	b.n	800b17a <uxr_serialize_ReadSpecification+0x2a>
 800b19a:	8971      	ldrh	r1, [r6, #10]
 800b19c:	4638      	mov	r0, r7
 800b19e:	f7fc fdb3 	bl	8007d08 <ucdr_serialize_uint16_t>
 800b1a2:	89b1      	ldrh	r1, [r6, #12]
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	f7fc fdae 	bl	8007d08 <ucdr_serialize_uint16_t>
 800b1ac:	89f1      	ldrh	r1, [r6, #14]
 800b1ae:	4005      	ands	r5, r0
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	f7fc fda9 	bl	8007d08 <ucdr_serialize_uint16_t>
 800b1b6:	8a31      	ldrh	r1, [r6, #16]
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f7fc fda4 	bl	8007d08 <ucdr_serialize_uint16_t>
 800b1c0:	b2ed      	uxtb	r5, r5
 800b1c2:	4025      	ands	r5, r4
 800b1c4:	ea08 0505 	and.w	r5, r8, r5
 800b1c8:	ea00 0405 	and.w	r4, r0, r5
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d2:	bf00      	nop

0800b1d4 <uxr_serialize_CREATE_CLIENT_Payload>:
 800b1d4:	f7ff bb02 	b.w	800a7dc <uxr_serialize_CLIENT_Representation>

0800b1d8 <uxr_serialize_CREATE_Payload>:
 800b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1da:	2202      	movs	r2, #2
 800b1dc:	4607      	mov	r7, r0
 800b1de:	460e      	mov	r6, r1
 800b1e0:	f002 fb04 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	18b1      	adds	r1, r6, r2
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	f002 fafe 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b1f0:	7931      	ldrb	r1, [r6, #4]
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f7fc fd5b 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b1fa:	b170      	cbz	r0, 800b21a <uxr_serialize_CREATE_Payload+0x42>
 800b1fc:	7933      	ldrb	r3, [r6, #4]
 800b1fe:	402c      	ands	r4, r5
 800b200:	3b01      	subs	r3, #1
 800b202:	b2e4      	uxtb	r4, r4
 800b204:	2b0d      	cmp	r3, #13
 800b206:	d809      	bhi.n	800b21c <uxr_serialize_CREATE_Payload+0x44>
 800b208:	e8df f003 	tbb	[pc, r3]
 800b20c:	23230a4c 	.word	0x23230a4c
 800b210:	0a0a0a0a 	.word	0x0a0a0a0a
 800b214:	12121208 	.word	0x12121208
 800b218:	3e45      	.short	0x3e45
 800b21a:	2400      	movs	r4, #0
 800b21c:	4620      	mov	r0, r4
 800b21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b220:	f106 0108 	add.w	r1, r6, #8
 800b224:	4638      	mov	r0, r7
 800b226:	f7ff fbdf 	bl	800a9e8 <uxr_serialize_DATAWRITER_Representation>
 800b22a:	4004      	ands	r4, r0
 800b22c:	4620      	mov	r0, r4
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	7a31      	ldrb	r1, [r6, #8]
 800b232:	4638      	mov	r0, r7
 800b234:	f7fc fd3c 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d0ee      	beq.n	800b21a <uxr_serialize_CREATE_Payload+0x42>
 800b23c:	7a33      	ldrb	r3, [r6, #8]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d001      	beq.n	800b246 <uxr_serialize_CREATE_Payload+0x6e>
 800b242:	2b02      	cmp	r3, #2
 800b244:	d1ea      	bne.n	800b21c <uxr_serialize_CREATE_Payload+0x44>
 800b246:	68f1      	ldr	r1, [r6, #12]
 800b248:	4638      	mov	r0, r7
 800b24a:	f002 fbef 	bl	800da2c <ucdr_serialize_string>
 800b24e:	4004      	ands	r4, r0
 800b250:	e7e4      	b.n	800b21c <uxr_serialize_CREATE_Payload+0x44>
 800b252:	7a31      	ldrb	r1, [r6, #8]
 800b254:	4638      	mov	r0, r7
 800b256:	f7fc fd2b 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b25a:	4605      	mov	r5, r0
 800b25c:	b158      	cbz	r0, 800b276 <uxr_serialize_CREATE_Payload+0x9e>
 800b25e:	7a33      	ldrb	r3, [r6, #8]
 800b260:	2b02      	cmp	r3, #2
 800b262:	d034      	beq.n	800b2ce <uxr_serialize_CREATE_Payload+0xf6>
 800b264:	2b03      	cmp	r3, #3
 800b266:	d106      	bne.n	800b276 <uxr_serialize_CREATE_Payload+0x9e>
 800b268:	68f2      	ldr	r2, [r6, #12]
 800b26a:	f106 0110 	add.w	r1, r6, #16
 800b26e:	4638      	mov	r0, r7
 800b270:	f002 fbb0 	bl	800d9d4 <ucdr_serialize_sequence_uint8_t>
 800b274:	4605      	mov	r5, r0
 800b276:	2202      	movs	r2, #2
 800b278:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800b27c:	4638      	mov	r0, r7
 800b27e:	f002 fab5 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b282:	4028      	ands	r0, r5
 800b284:	4004      	ands	r4, r0
 800b286:	e7c9      	b.n	800b21c <uxr_serialize_CREATE_Payload+0x44>
 800b288:	f106 0108 	add.w	r1, r6, #8
 800b28c:	4638      	mov	r0, r7
 800b28e:	f7ff faa5 	bl	800a7dc <uxr_serialize_CLIENT_Representation>
 800b292:	4004      	ands	r4, r0
 800b294:	e7c2      	b.n	800b21c <uxr_serialize_CREATE_Payload+0x44>
 800b296:	f106 0108 	add.w	r1, r6, #8
 800b29a:	4638      	mov	r0, r7
 800b29c:	f7ff fb5a 	bl	800a954 <uxr_serialize_AGENT_Representation>
 800b2a0:	4004      	ands	r4, r0
 800b2a2:	e7bb      	b.n	800b21c <uxr_serialize_CREATE_Payload+0x44>
 800b2a4:	7a31      	ldrb	r1, [r6, #8]
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	f7fc fd02 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	b130      	cbz	r0, 800b2be <uxr_serialize_CREATE_Payload+0xe6>
 800b2b0:	7a33      	ldrb	r3, [r6, #8]
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	d011      	beq.n	800b2da <uxr_serialize_CREATE_Payload+0x102>
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d015      	beq.n	800b2e6 <uxr_serialize_CREATE_Payload+0x10e>
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d00d      	beq.n	800b2da <uxr_serialize_CREATE_Payload+0x102>
 800b2be:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f7fd fa30 	bl	8008728 <ucdr_serialize_int16_t>
 800b2c8:	4028      	ands	r0, r5
 800b2ca:	4004      	ands	r4, r0
 800b2cc:	e7a6      	b.n	800b21c <uxr_serialize_CREATE_Payload+0x44>
 800b2ce:	68f1      	ldr	r1, [r6, #12]
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f002 fbab 	bl	800da2c <ucdr_serialize_string>
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	e7cd      	b.n	800b276 <uxr_serialize_CREATE_Payload+0x9e>
 800b2da:	68f1      	ldr	r1, [r6, #12]
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f002 fba5 	bl	800da2c <ucdr_serialize_string>
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	e7eb      	b.n	800b2be <uxr_serialize_CREATE_Payload+0xe6>
 800b2e6:	68f2      	ldr	r2, [r6, #12]
 800b2e8:	f106 0110 	add.w	r1, r6, #16
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	f002 fb71 	bl	800d9d4 <ucdr_serialize_sequence_uint8_t>
 800b2f2:	4605      	mov	r5, r0
 800b2f4:	e7e3      	b.n	800b2be <uxr_serialize_CREATE_Payload+0xe6>
 800b2f6:	bf00      	nop

0800b2f8 <uxr_deserialize_GET_INFO_Payload>:
 800b2f8:	b570      	push	{r4, r5, r6, lr}
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	460e      	mov	r6, r1
 800b300:	f002 fad8 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b304:	2202      	movs	r2, #2
 800b306:	18b1      	adds	r1, r6, r2
 800b308:	4604      	mov	r4, r0
 800b30a:	4628      	mov	r0, r5
 800b30c:	f002 fad2 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b310:	1d31      	adds	r1, r6, #4
 800b312:	4004      	ands	r4, r0
 800b314:	4628      	mov	r0, r5
 800b316:	f7fd f811 	bl	800833c <ucdr_deserialize_uint32_t>
 800b31a:	b2e4      	uxtb	r4, r4
 800b31c:	4020      	ands	r0, r4
 800b31e:	bd70      	pop	{r4, r5, r6, pc}

0800b320 <uxr_serialize_DELETE_Payload>:
 800b320:	b570      	push	{r4, r5, r6, lr}
 800b322:	2202      	movs	r2, #2
 800b324:	4605      	mov	r5, r0
 800b326:	460e      	mov	r6, r1
 800b328:	f002 fa60 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b32c:	2202      	movs	r2, #2
 800b32e:	4604      	mov	r4, r0
 800b330:	18b1      	adds	r1, r6, r2
 800b332:	4628      	mov	r0, r5
 800b334:	f002 fa5a 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b338:	4020      	ands	r0, r4
 800b33a:	b2c0      	uxtb	r0, r0
 800b33c:	bd70      	pop	{r4, r5, r6, pc}
 800b33e:	bf00      	nop

0800b340 <uxr_deserialize_STATUS_AGENT_Payload>:
 800b340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b344:	4605      	mov	r5, r0
 800b346:	460e      	mov	r6, r1
 800b348:	f7fc fcc8 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800b34c:	1c71      	adds	r1, r6, #1
 800b34e:	4604      	mov	r4, r0
 800b350:	4628      	mov	r0, r5
 800b352:	f7fc fcc3 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800b356:	2204      	movs	r2, #4
 800b358:	18b1      	adds	r1, r6, r2
 800b35a:	4680      	mov	r8, r0
 800b35c:	4628      	mov	r0, r5
 800b35e:	f002 faa9 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b362:	f106 0108 	add.w	r1, r6, #8
 800b366:	4607      	mov	r7, r0
 800b368:	2202      	movs	r2, #2
 800b36a:	4628      	mov	r0, r5
 800b36c:	f002 faa2 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b370:	ea04 0308 	and.w	r3, r4, r8
 800b374:	b2db      	uxtb	r3, r3
 800b376:	ea03 0407 	and.w	r4, r3, r7
 800b37a:	2202      	movs	r2, #2
 800b37c:	4607      	mov	r7, r0
 800b37e:	f106 010a 	add.w	r1, r6, #10
 800b382:	4628      	mov	r0, r5
 800b384:	f002 fa96 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b388:	f106 010c 	add.w	r1, r6, #12
 800b38c:	4603      	mov	r3, r0
 800b38e:	4628      	mov	r0, r5
 800b390:	461d      	mov	r5, r3
 800b392:	f7fc fc75 	bl	8007c80 <ucdr_deserialize_bool>
 800b396:	403c      	ands	r4, r7
 800b398:	4025      	ands	r5, r4
 800b39a:	4028      	ands	r0, r5
 800b39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3a0 <uxr_deserialize_STATUS_Payload>:
 800b3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	f002 fa83 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	18b9      	adds	r1, r7, r2
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	f002 fa7d 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b3ba:	1d39      	adds	r1, r7, #4
 800b3bc:	4680      	mov	r8, r0
 800b3be:	4630      	mov	r0, r6
 800b3c0:	f7fc fc8c 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800b3c4:	1d79      	adds	r1, r7, #5
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7fc fc87 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800b3ce:	ea05 0508 	and.w	r5, r5, r8
 800b3d2:	402c      	ands	r4, r5
 800b3d4:	4020      	ands	r0, r4
 800b3d6:	b2c0      	uxtb	r0, r0
 800b3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3dc <uxr_serialize_INFO_Payload>:
 800b3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	f002 fa01 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	18a1      	adds	r1, r4, r2
 800b3ee:	4680      	mov	r8, r0
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f002 f9fb 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b3f6:	7921      	ldrb	r1, [r4, #4]
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f7fc fc58 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b400:	7961      	ldrb	r1, [r4, #5]
 800b402:	4606      	mov	r6, r0
 800b404:	4628      	mov	r0, r5
 800b406:	f7fc fc53 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b40a:	ea08 0807 	and.w	r8, r8, r7
 800b40e:	ea06 0608 	and.w	r6, r6, r8
 800b412:	4006      	ands	r6, r0
 800b414:	7a21      	ldrb	r1, [r4, #8]
 800b416:	4628      	mov	r0, r5
 800b418:	f7fc fc1c 	bl	8007c54 <ucdr_serialize_bool>
 800b41c:	7a23      	ldrb	r3, [r4, #8]
 800b41e:	b2f7      	uxtb	r7, r6
 800b420:	4606      	mov	r6, r0
 800b422:	b96b      	cbnz	r3, 800b440 <uxr_serialize_INFO_Payload+0x64>
 800b424:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800b428:	4628      	mov	r0, r5
 800b42a:	f7fc fc13 	bl	8007c54 <ucdr_serialize_bool>
 800b42e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800b432:	4030      	ands	r0, r6
 800b434:	b2c6      	uxtb	r6, r0
 800b436:	b983      	cbnz	r3, 800b45a <uxr_serialize_INFO_Payload+0x7e>
 800b438:	ea06 0007 	and.w	r0, r6, r7
 800b43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b440:	7b21      	ldrb	r1, [r4, #12]
 800b442:	4628      	mov	r0, r5
 800b444:	f7fc fc34 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b448:	b188      	cbz	r0, 800b46e <uxr_serialize_INFO_Payload+0x92>
 800b44a:	f104 010c 	add.w	r1, r4, #12
 800b44e:	4628      	mov	r0, r5
 800b450:	f7ff faf2 	bl	800aa38 <uxr_serialize_ObjectVariant.part.0>
 800b454:	4030      	ands	r0, r6
 800b456:	b2c6      	uxtb	r6, r0
 800b458:	e7e4      	b.n	800b424 <uxr_serialize_INFO_Payload+0x48>
 800b45a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800b45e:	4628      	mov	r0, r5
 800b460:	f7ff fdb2 	bl	800afc8 <uxr_serialize_ActivityInfoVariant>
 800b464:	4006      	ands	r6, r0
 800b466:	ea06 0007 	and.w	r0, r6, r7
 800b46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46e:	4606      	mov	r6, r0
 800b470:	e7d8      	b.n	800b424 <uxr_serialize_INFO_Payload+0x48>
 800b472:	bf00      	nop

0800b474 <uxr_serialize_READ_DATA_Payload>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	2202      	movs	r2, #2
 800b478:	4605      	mov	r5, r0
 800b47a:	460e      	mov	r6, r1
 800b47c:	f002 f9b6 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b480:	2202      	movs	r2, #2
 800b482:	18b1      	adds	r1, r6, r2
 800b484:	4604      	mov	r4, r0
 800b486:	4628      	mov	r0, r5
 800b488:	f002 f9b0 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b48c:	1d31      	adds	r1, r6, #4
 800b48e:	4004      	ands	r4, r0
 800b490:	4628      	mov	r0, r5
 800b492:	f7ff fe5d 	bl	800b150 <uxr_serialize_ReadSpecification>
 800b496:	b2e4      	uxtb	r4, r4
 800b498:	4020      	ands	r0, r4
 800b49a:	bd70      	pop	{r4, r5, r6, pc}

0800b49c <uxr_serialize_WRITE_DATA_Payload_Data>:
 800b49c:	b570      	push	{r4, r5, r6, lr}
 800b49e:	2202      	movs	r2, #2
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	460e      	mov	r6, r1
 800b4a4:	f002 f9a2 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b4a8:	2202      	movs	r2, #2
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	18b1      	adds	r1, r6, r2
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f002 f99c 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b4b4:	4020      	ands	r0, r4
 800b4b6:	b2c0      	uxtb	r0, r0
 800b4b8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ba:	bf00      	nop

0800b4bc <uxr_serialize_ACKNACK_Payload>:
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	460c      	mov	r4, r1
 800b4c0:	460e      	mov	r6, r1
 800b4c2:	f834 1b02 	ldrh.w	r1, [r4], #2
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	f7fc fc1e 	bl	8007d08 <ucdr_serialize_uint16_t>
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f002 f98a 	bl	800d7ec <ucdr_serialize_array_uint8_t>
 800b4d8:	7931      	ldrb	r1, [r6, #4]
 800b4da:	4004      	ands	r4, r0
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f7fc fbe7 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b4e2:	b2e4      	uxtb	r4, r4
 800b4e4:	4020      	ands	r0, r4
 800b4e6:	bd70      	pop	{r4, r5, r6, pc}

0800b4e8 <uxr_deserialize_ACKNACK_Payload>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	460e      	mov	r6, r1
 800b4ee:	f7fc fd0b 	bl	8007f08 <ucdr_deserialize_uint16_t>
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	18b1      	adds	r1, r6, r2
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	f002 f9db 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b4fe:	1d31      	adds	r1, r6, #4
 800b500:	4004      	ands	r4, r0
 800b502:	4628      	mov	r0, r5
 800b504:	f7fc fbea 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800b508:	b2e4      	uxtb	r4, r4
 800b50a:	4020      	ands	r0, r4
 800b50c:	bd70      	pop	{r4, r5, r6, pc}
 800b50e:	bf00      	nop

0800b510 <uxr_serialize_HEARTBEAT_Payload>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	460d      	mov	r5, r1
 800b514:	8809      	ldrh	r1, [r1, #0]
 800b516:	4606      	mov	r6, r0
 800b518:	f7fc fbf6 	bl	8007d08 <ucdr_serialize_uint16_t>
 800b51c:	8869      	ldrh	r1, [r5, #2]
 800b51e:	4604      	mov	r4, r0
 800b520:	4630      	mov	r0, r6
 800b522:	f7fc fbf1 	bl	8007d08 <ucdr_serialize_uint16_t>
 800b526:	7929      	ldrb	r1, [r5, #4]
 800b528:	4004      	ands	r4, r0
 800b52a:	4630      	mov	r0, r6
 800b52c:	f7fc fbc0 	bl	8007cb0 <ucdr_serialize_uint8_t>
 800b530:	b2e4      	uxtb	r4, r4
 800b532:	4020      	ands	r0, r4
 800b534:	bd70      	pop	{r4, r5, r6, pc}
 800b536:	bf00      	nop

0800b538 <uxr_deserialize_HEARTBEAT_Payload>:
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	4605      	mov	r5, r0
 800b53c:	460e      	mov	r6, r1
 800b53e:	f7fc fce3 	bl	8007f08 <ucdr_deserialize_uint16_t>
 800b542:	1cb1      	adds	r1, r6, #2
 800b544:	4604      	mov	r4, r0
 800b546:	4628      	mov	r0, r5
 800b548:	f7fc fcde 	bl	8007f08 <ucdr_deserialize_uint16_t>
 800b54c:	1d31      	adds	r1, r6, #4
 800b54e:	4004      	ands	r4, r0
 800b550:	4628      	mov	r0, r5
 800b552:	f7fc fbc3 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800b556:	b2e4      	uxtb	r4, r4
 800b558:	4020      	ands	r0, r4
 800b55a:	bd70      	pop	{r4, r5, r6, pc}

0800b55c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	4605      	mov	r5, r0
 800b562:	460e      	mov	r6, r1
 800b564:	f7fd fa6c 	bl	8008a40 <ucdr_deserialize_int32_t>
 800b568:	1d31      	adds	r1, r6, #4
 800b56a:	4607      	mov	r7, r0
 800b56c:	4628      	mov	r0, r5
 800b56e:	f7fc fee5 	bl	800833c <ucdr_deserialize_uint32_t>
 800b572:	f106 0108 	add.w	r1, r6, #8
 800b576:	4680      	mov	r8, r0
 800b578:	4628      	mov	r0, r5
 800b57a:	f7fd fa61 	bl	8008a40 <ucdr_deserialize_int32_t>
 800b57e:	f106 010c 	add.w	r1, r6, #12
 800b582:	4604      	mov	r4, r0
 800b584:	4628      	mov	r0, r5
 800b586:	f7fc fed9 	bl	800833c <ucdr_deserialize_uint32_t>
 800b58a:	ea07 0708 	and.w	r7, r7, r8
 800b58e:	403c      	ands	r4, r7
 800b590:	f106 0110 	add.w	r1, r6, #16
 800b594:	4004      	ands	r4, r0
 800b596:	4628      	mov	r0, r5
 800b598:	f7fd fa52 	bl	8008a40 <ucdr_deserialize_int32_t>
 800b59c:	f106 0114 	add.w	r1, r6, #20
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f7fc feca 	bl	800833c <ucdr_deserialize_uint32_t>
 800b5a8:	b2e4      	uxtb	r4, r4
 800b5aa:	403c      	ands	r4, r7
 800b5ac:	4020      	ands	r0, r4
 800b5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b2:	bf00      	nop

0800b5b4 <uxr_deserialize_SampleIdentity>:
 800b5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b8:	220c      	movs	r2, #12
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	460d      	mov	r5, r1
 800b5be:	f002 f979 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	f105 010c 	add.w	r1, r5, #12
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f002 f972 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800b5d0:	f105 010f 	add.w	r1, r5, #15
 800b5d4:	4680      	mov	r8, r0
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f7fc fb80 	bl	8007cdc <ucdr_deserialize_uint8_t>
 800b5dc:	f105 0110 	add.w	r1, r5, #16
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f7fd fa2c 	bl	8008a40 <ucdr_deserialize_int32_t>
 800b5e8:	f105 0114 	add.w	r1, r5, #20
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	ea07 0708 	and.w	r7, r7, r8
 800b5f4:	461c      	mov	r4, r3
 800b5f6:	f7fc fea1 	bl	800833c <ucdr_deserialize_uint32_t>
 800b5fa:	403e      	ands	r6, r7
 800b5fc:	4034      	ands	r4, r6
 800b5fe:	4020      	ands	r0, r4
 800b600:	b2c0      	uxtb	r0, r0
 800b602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b606:	bf00      	nop

0800b608 <rcl_convert_rmw_ret_to_rcl_ret>:
 800b608:	280b      	cmp	r0, #11
 800b60a:	dc0d      	bgt.n	800b628 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	db09      	blt.n	800b624 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800b610:	280b      	cmp	r0, #11
 800b612:	d807      	bhi.n	800b624 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800b614:	e8df f000 	tbb	[pc, r0]
 800b618:	07060607 	.word	0x07060607
 800b61c:	06060606 	.word	0x06060606
 800b620:	07070606 	.word	0x07070606
 800b624:	2001      	movs	r0, #1
 800b626:	4770      	bx	lr
 800b628:	28cb      	cmp	r0, #203	@ 0xcb
 800b62a:	bf18      	it	ne
 800b62c:	2001      	movne	r0, #1
 800b62e:	4770      	bx	lr

0800b630 <rcl_get_zero_initialized_context>:
 800b630:	4a03      	ldr	r2, [pc, #12]	@ (800b640 <rcl_get_zero_initialized_context+0x10>)
 800b632:	4603      	mov	r3, r0
 800b634:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b638:	e883 0003 	stmia.w	r3, {r0, r1}
 800b63c:	4618      	mov	r0, r3
 800b63e:	4770      	bx	lr
 800b640:	080114d4 	.word	0x080114d4

0800b644 <rcl_context_is_valid>:
 800b644:	b118      	cbz	r0, 800b64e <rcl_context_is_valid+0xa>
 800b646:	6840      	ldr	r0, [r0, #4]
 800b648:	3800      	subs	r0, #0
 800b64a:	bf18      	it	ne
 800b64c:	2001      	movne	r0, #1
 800b64e:	4770      	bx	lr

0800b650 <__cleanup_context>:
 800b650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b654:	4606      	mov	r6, r0
 800b656:	6800      	ldr	r0, [r0, #0]
 800b658:	2300      	movs	r3, #0
 800b65a:	6073      	str	r3, [r6, #4]
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d049      	beq.n	800b6f4 <__cleanup_context+0xa4>
 800b660:	6947      	ldr	r7, [r0, #20]
 800b662:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b666:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800b66a:	b137      	cbz	r7, 800b67a <__cleanup_context+0x2a>
 800b66c:	3014      	adds	r0, #20
 800b66e:	f000 f9bb 	bl	800b9e8 <rcl_init_options_fini>
 800b672:	4607      	mov	r7, r0
 800b674:	2800      	cmp	r0, #0
 800b676:	d144      	bne.n	800b702 <__cleanup_context+0xb2>
 800b678:	6830      	ldr	r0, [r6, #0]
 800b67a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b67c:	b143      	cbz	r3, 800b690 <__cleanup_context+0x40>
 800b67e:	3028      	adds	r0, #40	@ 0x28
 800b680:	f001 fd9a 	bl	800d1b8 <rmw_context_fini>
 800b684:	b118      	cbz	r0, 800b68e <__cleanup_context+0x3e>
 800b686:	2f00      	cmp	r7, #0
 800b688:	d03e      	beq.n	800b708 <__cleanup_context+0xb8>
 800b68a:	f7fb fde5 	bl	8007258 <rcutils_reset_error>
 800b68e:	6830      	ldr	r0, [r6, #0]
 800b690:	6a03      	ldr	r3, [r0, #32]
 800b692:	b1db      	cbz	r3, 800b6cc <__cleanup_context+0x7c>
 800b694:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800b698:	2a01      	cmp	r2, #1
 800b69a:	f17c 0100 	sbcs.w	r1, ip, #0
 800b69e:	db11      	blt.n	800b6c4 <__cleanup_context+0x74>
 800b6a0:	2400      	movs	r4, #0
 800b6a2:	4625      	mov	r5, r4
 800b6a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	b1b8      	cbz	r0, 800b6dc <__cleanup_context+0x8c>
 800b6ac:	47c0      	blx	r8
 800b6ae:	6833      	ldr	r3, [r6, #0]
 800b6b0:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800b6b4:	3401      	adds	r4, #1
 800b6b6:	f145 0500 	adc.w	r5, r5, #0
 800b6ba:	4294      	cmp	r4, r2
 800b6bc:	eb75 010c 	sbcs.w	r1, r5, ip
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	dbef      	blt.n	800b6a4 <__cleanup_context+0x54>
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	47c0      	blx	r8
 800b6ca:	6830      	ldr	r0, [r6, #0]
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	47c0      	blx	r8
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e9c6 3300 	strd	r3, r3, [r6]
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6dc:	3401      	adds	r4, #1
 800b6de:	f145 0500 	adc.w	r5, r5, #0
 800b6e2:	4294      	cmp	r4, r2
 800b6e4:	eb75 010c 	sbcs.w	r1, r5, ip
 800b6e8:	dbdc      	blt.n	800b6a4 <__cleanup_context+0x54>
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	47c0      	blx	r8
 800b6f0:	6830      	ldr	r0, [r6, #0]
 800b6f2:	e7eb      	b.n	800b6cc <__cleanup_context+0x7c>
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e9c6 3300 	strd	r3, r3, [r6]
 800b6fc:	4638      	mov	r0, r7
 800b6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b702:	f7fb fda9 	bl	8007258 <rcutils_reset_error>
 800b706:	e7b7      	b.n	800b678 <__cleanup_context+0x28>
 800b708:	f7ff ff7e 	bl	800b608 <rcl_convert_rmw_ret_to_rcl_ret>
 800b70c:	4607      	mov	r7, r0
 800b70e:	e7bc      	b.n	800b68a <__cleanup_context+0x3a>

0800b710 <rcl_init>:
 800b710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	1e05      	subs	r5, r0, #0
 800b716:	b09e      	sub	sp, #120	@ 0x78
 800b718:	460e      	mov	r6, r1
 800b71a:	4690      	mov	r8, r2
 800b71c:	461f      	mov	r7, r3
 800b71e:	f340 809c 	ble.w	800b85a <rcl_init+0x14a>
 800b722:	2900      	cmp	r1, #0
 800b724:	f000 809c 	beq.w	800b860 <rcl_init+0x150>
 800b728:	f1a1 0e04 	sub.w	lr, r1, #4
 800b72c:	f04f 0c00 	mov.w	ip, #0
 800b730:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800b734:	f10c 0c01 	add.w	ip, ip, #1
 800b738:	2c00      	cmp	r4, #0
 800b73a:	f000 8091 	beq.w	800b860 <rcl_init+0x150>
 800b73e:	4565      	cmp	r5, ip
 800b740:	d1f6      	bne.n	800b730 <rcl_init+0x20>
 800b742:	f1b8 0f00 	cmp.w	r8, #0
 800b746:	f000 808b 	beq.w	800b860 <rcl_init+0x150>
 800b74a:	f8d8 4000 	ldr.w	r4, [r8]
 800b74e:	2c00      	cmp	r4, #0
 800b750:	f000 8086 	beq.w	800b860 <rcl_init+0x150>
 800b754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b756:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800b75a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	f8cc 3000 	str.w	r3, [ip]
 800b764:	a819      	add	r0, sp, #100	@ 0x64
 800b766:	f7fb fd51 	bl	800720c <rcutils_allocator_is_valid>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d078      	beq.n	800b860 <rcl_init+0x150>
 800b76e:	2f00      	cmp	r7, #0
 800b770:	d076      	beq.n	800b860 <rcl_init+0x150>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d178      	bne.n	800b86a <rcl_init+0x15a>
 800b778:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800b77c:	2178      	movs	r1, #120	@ 0x78
 800b77e:	2001      	movs	r0, #1
 800b780:	4798      	blx	r3
 800b782:	4604      	mov	r4, r0
 800b784:	6038      	str	r0, [r7, #0]
 800b786:	2800      	cmp	r0, #0
 800b788:	f000 80b6 	beq.w	800b8f8 <rcl_init+0x1e8>
 800b78c:	a802      	add	r0, sp, #8
 800b78e:	f001 f957 	bl	800ca40 <rmw_get_zero_initialized_context>
 800b792:	a902      	add	r1, sp, #8
 800b794:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b798:	2250      	movs	r2, #80	@ 0x50
 800b79a:	ac19      	add	r4, sp, #100	@ 0x64
 800b79c:	f004 fe03 	bl	80103a6 <memcpy>
 800b7a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7a2:	f8d7 e000 	ldr.w	lr, [r7]
 800b7a6:	46f4      	mov	ip, lr
 800b7a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	f8cc 3000 	str.w	r3, [ip]
 800b7b2:	f10e 0114 	add.w	r1, lr, #20
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	f000 f940 	bl	800ba3c <rcl_init_options_copy>
 800b7bc:	4604      	mov	r4, r0
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d144      	bne.n	800b84c <rcl_init+0x13c>
 800b7c2:	f8d7 9000 	ldr.w	r9, [r7]
 800b7c6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800b7ca:	f8c9 0020 	str.w	r0, [r9, #32]
 800b7ce:	f8c9 5018 	str.w	r5, [r9, #24]
 800b7d2:	f8c9 801c 	str.w	r8, [r9, #28]
 800b7d6:	2d00      	cmp	r5, #0
 800b7d8:	d04e      	beq.n	800b878 <rcl_init+0x168>
 800b7da:	2e00      	cmp	r6, #0
 800b7dc:	d04c      	beq.n	800b878 <rcl_init+0x168>
 800b7de:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800b7e2:	2104      	movs	r1, #4
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	4798      	blx	r3
 800b7e8:	f8c9 0020 	str.w	r0, [r9, #32]
 800b7ec:	f8d7 9000 	ldr.w	r9, [r7]
 800b7f0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b7f4:	46ca      	mov	sl, r9
 800b7f6:	b343      	cbz	r3, 800b84a <rcl_init+0x13a>
 800b7f8:	2d01      	cmp	r5, #1
 800b7fa:	f178 0300 	sbcs.w	r3, r8, #0
 800b7fe:	db3b      	blt.n	800b878 <rcl_init+0x168>
 800b800:	2400      	movs	r4, #0
 800b802:	3e04      	subs	r6, #4
 800b804:	46a1      	mov	r9, r4
 800b806:	e00b      	b.n	800b820 <rcl_init+0x110>
 800b808:	6831      	ldr	r1, [r6, #0]
 800b80a:	f004 fdcc 	bl	80103a6 <memcpy>
 800b80e:	3401      	adds	r4, #1
 800b810:	f149 0900 	adc.w	r9, r9, #0
 800b814:	45c8      	cmp	r8, r9
 800b816:	bf08      	it	eq
 800b818:	42a5      	cmpeq	r5, r4
 800b81a:	d02b      	beq.n	800b874 <rcl_init+0x164>
 800b81c:	f8d7 a000 	ldr.w	sl, [r7]
 800b820:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800b824:	f7f4 fce6 	bl	80001f4 <strlen>
 800b828:	1c42      	adds	r2, r0, #1
 800b82a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b82c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800b82e:	f8da a020 	ldr.w	sl, [sl, #32]
 800b832:	9201      	str	r2, [sp, #4]
 800b834:	4610      	mov	r0, r2
 800b836:	4798      	blx	r3
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	9a01      	ldr	r2, [sp, #4]
 800b842:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b846:	2800      	cmp	r0, #0
 800b848:	d1de      	bne.n	800b808 <rcl_init+0xf8>
 800b84a:	240a      	movs	r4, #10
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff feff 	bl	800b650 <__cleanup_context>
 800b852:	4620      	mov	r0, r4
 800b854:	b01e      	add	sp, #120	@ 0x78
 800b856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85a:	2900      	cmp	r1, #0
 800b85c:	f43f af71 	beq.w	800b742 <rcl_init+0x32>
 800b860:	240b      	movs	r4, #11
 800b862:	4620      	mov	r0, r4
 800b864:	b01e      	add	sp, #120	@ 0x78
 800b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86a:	2464      	movs	r4, #100	@ 0x64
 800b86c:	4620      	mov	r0, r4
 800b86e:	b01e      	add	sp, #120	@ 0x78
 800b870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b874:	f8d7 9000 	ldr.w	r9, [r7]
 800b878:	4926      	ldr	r1, [pc, #152]	@ (800b914 <rcl_init+0x204>)
 800b87a:	680b      	ldr	r3, [r1, #0]
 800b87c:	3301      	adds	r3, #1
 800b87e:	d036      	beq.n	800b8ee <rcl_init+0x1de>
 800b880:	600b      	str	r3, [r1, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	2400      	movs	r4, #0
 800b886:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800b88a:	607b      	str	r3, [r7, #4]
 800b88c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b88e:	3301      	adds	r3, #1
 800b890:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800b894:	d034      	beq.n	800b900 <rcl_init+0x1f0>
 800b896:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800b89a:	b93b      	cbnz	r3, 800b8ac <rcl_init+0x19c>
 800b89c:	3030      	adds	r0, #48	@ 0x30
 800b89e:	f000 f939 	bl	800bb14 <rcl_get_localhost_only>
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d1d1      	bne.n	800b84c <rcl_init+0x13c>
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	6958      	ldr	r0, [r3, #20]
 800b8ac:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800b8ae:	aa18      	add	r2, sp, #96	@ 0x60
 800b8b0:	a917      	add	r1, sp, #92	@ 0x5c
 800b8b2:	f000 fd81 	bl	800c3b8 <rcl_validate_enclave_name>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d1c7      	bne.n	800b84c <rcl_init+0x13c>
 800b8bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8be:	b9eb      	cbnz	r3, 800b8fc <rcl_init+0x1ec>
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	694b      	ldr	r3, [r1, #20]
 800b8c4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b8c6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800b8ca:	f000 fc3d 	bl	800c148 <rcl_get_security_options_from_environment>
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d1bb      	bne.n	800b84c <rcl_init+0x13c>
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6948      	ldr	r0, [r1, #20]
 800b8d8:	3128      	adds	r1, #40	@ 0x28
 800b8da:	3018      	adds	r0, #24
 800b8dc:	f001 fb36 	bl	800cf4c <rmw_init>
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d0bd      	beq.n	800b862 <rcl_init+0x152>
 800b8e6:	f7ff fe8f 	bl	800b608 <rcl_convert_rmw_ret_to_rcl_ret>
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	e7ae      	b.n	800b84c <rcl_init+0x13c>
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	461c      	mov	r4, r3
 800b8f2:	600a      	str	r2, [r1, #0]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	e7c6      	b.n	800b886 <rcl_init+0x176>
 800b8f8:	240a      	movs	r4, #10
 800b8fa:	e7b2      	b.n	800b862 <rcl_init+0x152>
 800b8fc:	2401      	movs	r4, #1
 800b8fe:	e7a5      	b.n	800b84c <rcl_init+0x13c>
 800b900:	3024      	adds	r0, #36	@ 0x24
 800b902:	f003 fc5d 	bl	800f1c0 <rcl_get_default_domain_id>
 800b906:	4604      	mov	r4, r0
 800b908:	2800      	cmp	r0, #0
 800b90a:	d19f      	bne.n	800b84c <rcl_init+0x13c>
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	6958      	ldr	r0, [r3, #20]
 800b910:	e7c1      	b.n	800b896 <rcl_init+0x186>
 800b912:	bf00      	nop
 800b914:	2000d9b4 	.word	0x2000d9b4

0800b918 <rcl_get_zero_initialized_init_options>:
 800b918:	2000      	movs	r0, #0
 800b91a:	4770      	bx	lr

0800b91c <rcl_init_options_init>:
 800b91c:	b084      	sub	sp, #16
 800b91e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b920:	b097      	sub	sp, #92	@ 0x5c
 800b922:	ae1d      	add	r6, sp, #116	@ 0x74
 800b924:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800b928:	2800      	cmp	r0, #0
 800b92a:	d058      	beq.n	800b9de <rcl_init_options_init+0xc2>
 800b92c:	6803      	ldr	r3, [r0, #0]
 800b92e:	4605      	mov	r5, r0
 800b930:	b133      	cbz	r3, 800b940 <rcl_init_options_init+0x24>
 800b932:	2464      	movs	r4, #100	@ 0x64
 800b934:	4620      	mov	r0, r4
 800b936:	b017      	add	sp, #92	@ 0x5c
 800b938:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b93c:	b004      	add	sp, #16
 800b93e:	4770      	bx	lr
 800b940:	4630      	mov	r0, r6
 800b942:	f7fb fc63 	bl	800720c <rcutils_allocator_is_valid>
 800b946:	2800      	cmp	r0, #0
 800b948:	d049      	beq.n	800b9de <rcl_init_options_init+0xc2>
 800b94a:	46b4      	mov	ip, r6
 800b94c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b950:	ac11      	add	r4, sp, #68	@ 0x44
 800b952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b954:	f8dc 3000 	ldr.w	r3, [ip]
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b95c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b95e:	2050      	movs	r0, #80	@ 0x50
 800b960:	4798      	blx	r3
 800b962:	4604      	mov	r4, r0
 800b964:	6028      	str	r0, [r5, #0]
 800b966:	2800      	cmp	r0, #0
 800b968:	d03b      	beq.n	800b9e2 <rcl_init_options_init+0xc6>
 800b96a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b96e:	4686      	mov	lr, r0
 800b970:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b974:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b978:	f8dc 3000 	ldr.w	r3, [ip]
 800b97c:	f8ce 3000 	str.w	r3, [lr]
 800b980:	a802      	add	r0, sp, #8
 800b982:	f001 f86d 	bl	800ca60 <rmw_get_zero_initialized_init_options>
 800b986:	f10d 0e08 	add.w	lr, sp, #8
 800b98a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b98e:	f104 0c18 	add.w	ip, r4, #24
 800b992:	682f      	ldr	r7, [r5, #0]
 800b994:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b998:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b99c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b9a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b9a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b9a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b9ac:	ac20      	add	r4, sp, #128	@ 0x80
 800b9ae:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b9b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b9b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b9ba:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800b9be:	f107 0018 	add.w	r0, r7, #24
 800b9c2:	f001 f9cb 	bl	800cd5c <rmw_init_options_init>
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d0b3      	beq.n	800b934 <rcl_init_options_init+0x18>
 800b9cc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b9ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b9d0:	6828      	ldr	r0, [r5, #0]
 800b9d2:	4798      	blx	r3
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f7ff fe17 	bl	800b608 <rcl_convert_rmw_ret_to_rcl_ret>
 800b9da:	4604      	mov	r4, r0
 800b9dc:	e7aa      	b.n	800b934 <rcl_init_options_init+0x18>
 800b9de:	240b      	movs	r4, #11
 800b9e0:	e7a8      	b.n	800b934 <rcl_init_options_init+0x18>
 800b9e2:	240a      	movs	r4, #10
 800b9e4:	e7a6      	b.n	800b934 <rcl_init_options_init+0x18>
 800b9e6:	bf00      	nop

0800b9e8 <rcl_init_options_fini>:
 800b9e8:	b530      	push	{r4, r5, lr}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	b1f0      	cbz	r0, 800ba2c <rcl_init_options_fini+0x44>
 800b9ee:	6803      	ldr	r3, [r0, #0]
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	b1db      	cbz	r3, 800ba2c <rcl_init_options_fini+0x44>
 800b9f4:	469c      	mov	ip, r3
 800b9f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9fa:	f10d 0e04 	add.w	lr, sp, #4
 800b9fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba02:	f8dc 3000 	ldr.w	r3, [ip]
 800ba06:	f8ce 3000 	str.w	r3, [lr]
 800ba0a:	a801      	add	r0, sp, #4
 800ba0c:	f7fb fbfe 	bl	800720c <rcutils_allocator_is_valid>
 800ba10:	b160      	cbz	r0, 800ba2c <rcl_init_options_fini+0x44>
 800ba12:	6820      	ldr	r0, [r4, #0]
 800ba14:	3018      	adds	r0, #24
 800ba16:	f001 fa51 	bl	800cebc <rmw_init_options_fini>
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	b950      	cbnz	r0, 800ba34 <rcl_init_options_fini+0x4c>
 800ba1e:	6820      	ldr	r0, [r4, #0]
 800ba20:	9b02      	ldr	r3, [sp, #8]
 800ba22:	9905      	ldr	r1, [sp, #20]
 800ba24:	4798      	blx	r3
 800ba26:	4628      	mov	r0, r5
 800ba28:	b007      	add	sp, #28
 800ba2a:	bd30      	pop	{r4, r5, pc}
 800ba2c:	250b      	movs	r5, #11
 800ba2e:	4628      	mov	r0, r5
 800ba30:	b007      	add	sp, #28
 800ba32:	bd30      	pop	{r4, r5, pc}
 800ba34:	f7ff fde8 	bl	800b608 <rcl_convert_rmw_ret_to_rcl_ret>
 800ba38:	4605      	mov	r5, r0
 800ba3a:	e7f8      	b.n	800ba2e <rcl_init_options_fini+0x46>

0800ba3c <rcl_init_options_copy>:
 800ba3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba40:	b094      	sub	sp, #80	@ 0x50
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d058      	beq.n	800baf8 <rcl_init_options_copy+0xbc>
 800ba46:	4604      	mov	r4, r0
 800ba48:	6800      	ldr	r0, [r0, #0]
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d054      	beq.n	800baf8 <rcl_init_options_copy+0xbc>
 800ba4e:	460e      	mov	r6, r1
 800ba50:	f7fb fbdc 	bl	800720c <rcutils_allocator_is_valid>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d04f      	beq.n	800baf8 <rcl_init_options_copy+0xbc>
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	d04d      	beq.n	800baf8 <rcl_init_options_copy+0xbc>
 800ba5c:	6833      	ldr	r3, [r6, #0]
 800ba5e:	b123      	cbz	r3, 800ba6a <rcl_init_options_copy+0x2e>
 800ba60:	2464      	movs	r4, #100	@ 0x64
 800ba62:	4620      	mov	r0, r4
 800ba64:	b014      	add	sp, #80	@ 0x50
 800ba66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6a:	6827      	ldr	r7, [r4, #0]
 800ba6c:	46bc      	mov	ip, r7
 800ba6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ba72:	ad0f      	add	r5, sp, #60	@ 0x3c
 800ba74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba76:	f8dc 3000 	ldr.w	r3, [ip]
 800ba7a:	f8d7 8000 	ldr.w	r8, [r7]
 800ba7e:	602b      	str	r3, [r5, #0]
 800ba80:	4619      	mov	r1, r3
 800ba82:	2050      	movs	r0, #80	@ 0x50
 800ba84:	47c0      	blx	r8
 800ba86:	4605      	mov	r5, r0
 800ba88:	6030      	str	r0, [r6, #0]
 800ba8a:	b3d0      	cbz	r0, 800bb02 <rcl_init_options_copy+0xc6>
 800ba8c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800ba90:	4686      	mov	lr, r0
 800ba92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ba96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba9a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba9e:	f8ce 3000 	str.w	r3, [lr]
 800baa2:	4668      	mov	r0, sp
 800baa4:	f000 ffdc 	bl	800ca60 <rmw_get_zero_initialized_init_options>
 800baa8:	46ee      	mov	lr, sp
 800baaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800baae:	f105 0c18 	add.w	ip, r5, #24
 800bab2:	6824      	ldr	r4, [r4, #0]
 800bab4:	6835      	ldr	r5, [r6, #0]
 800bab6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800baba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800babe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bac2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bac6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800baca:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bace:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bad2:	f104 0018 	add.w	r0, r4, #24
 800bad6:	f105 0118 	add.w	r1, r5, #24
 800bada:	f001 f9a7 	bl	800ce2c <rmw_init_options_copy>
 800bade:	4604      	mov	r4, r0
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d0be      	beq.n	800ba62 <rcl_init_options_copy+0x26>
 800bae4:	f7fb fba0 	bl	8007228 <rcutils_get_error_string>
 800bae8:	f7fb fbb6 	bl	8007258 <rcutils_reset_error>
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff ff7b 	bl	800b9e8 <rcl_init_options_fini>
 800baf2:	b140      	cbz	r0, 800bb06 <rcl_init_options_copy+0xca>
 800baf4:	4604      	mov	r4, r0
 800baf6:	e7b4      	b.n	800ba62 <rcl_init_options_copy+0x26>
 800baf8:	240b      	movs	r4, #11
 800bafa:	4620      	mov	r0, r4
 800bafc:	b014      	add	sp, #80	@ 0x50
 800bafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb02:	240a      	movs	r4, #10
 800bb04:	e7ad      	b.n	800ba62 <rcl_init_options_copy+0x26>
 800bb06:	4620      	mov	r0, r4
 800bb08:	b014      	add	sp, #80	@ 0x50
 800bb0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0e:	f7ff bd7b 	b.w	800b608 <rcl_convert_rmw_ret_to_rcl_ret>
 800bb12:	bf00      	nop

0800bb14 <rcl_get_localhost_only>:
 800bb14:	b510      	push	{r4, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	b1b8      	cbz	r0, 800bb4e <rcl_get_localhost_only+0x3a>
 800bb1e:	4604      	mov	r4, r0
 800bb20:	a901      	add	r1, sp, #4
 800bb22:	480c      	ldr	r0, [pc, #48]	@ (800bb54 <rcl_get_localhost_only+0x40>)
 800bb24:	f000 fc90 	bl	800c448 <rcutils_get_env>
 800bb28:	b110      	cbz	r0, 800bb30 <rcl_get_localhost_only+0x1c>
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	b002      	add	sp, #8
 800bb2e:	bd10      	pop	{r4, pc}
 800bb30:	9b01      	ldr	r3, [sp, #4]
 800bb32:	b113      	cbz	r3, 800bb3a <rcl_get_localhost_only+0x26>
 800bb34:	781a      	ldrb	r2, [r3, #0]
 800bb36:	2a31      	cmp	r2, #49	@ 0x31
 800bb38:	d004      	beq.n	800bb44 <rcl_get_localhost_only+0x30>
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	7023      	strb	r3, [r4, #0]
 800bb40:	b002      	add	sp, #8
 800bb42:	bd10      	pop	{r4, pc}
 800bb44:	785b      	ldrb	r3, [r3, #1]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1f7      	bne.n	800bb3a <rcl_get_localhost_only+0x26>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e7f6      	b.n	800bb3c <rcl_get_localhost_only+0x28>
 800bb4e:	200b      	movs	r0, #11
 800bb50:	b002      	add	sp, #8
 800bb52:	bd10      	pop	{r4, pc}
 800bb54:	080114dc 	.word	0x080114dc

0800bb58 <rcl_get_zero_initialized_node>:
 800bb58:	4a03      	ldr	r2, [pc, #12]	@ (800bb68 <rcl_get_zero_initialized_node+0x10>)
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb60:	e883 0003 	stmia.w	r3, {r0, r1}
 800bb64:	4618      	mov	r0, r3
 800bb66:	4770      	bx	lr
 800bb68:	08011504 	.word	0x08011504

0800bb6c <rcl_node_init>:
 800bb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb70:	b0a9      	sub	sp, #164	@ 0xa4
 800bb72:	4604      	mov	r4, r0
 800bb74:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800bb78:	a823      	add	r0, sp, #140	@ 0x8c
 800bb7a:	460e      	mov	r6, r1
 800bb7c:	4615      	mov	r5, r2
 800bb7e:	461f      	mov	r7, r3
 800bb80:	f003 fd46 	bl	800f610 <rcl_guard_condition_get_default_options>
 800bb84:	f1b8 0f00 	cmp.w	r8, #0
 800bb88:	f000 80e6 	beq.w	800bd58 <rcl_node_init+0x1ec>
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	f7fb fb3d 	bl	800720c <rcutils_allocator_is_valid>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f000 80e0 	beq.w	800bd58 <rcl_node_init+0x1ec>
 800bb98:	2e00      	cmp	r6, #0
 800bb9a:	f000 80dd 	beq.w	800bd58 <rcl_node_init+0x1ec>
 800bb9e:	2d00      	cmp	r5, #0
 800bba0:	f000 80da 	beq.w	800bd58 <rcl_node_init+0x1ec>
 800bba4:	2c00      	cmp	r4, #0
 800bba6:	f000 80d7 	beq.w	800bd58 <rcl_node_init+0x1ec>
 800bbaa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bbae:	f1b9 0f00 	cmp.w	r9, #0
 800bbb2:	f040 80fd 	bne.w	800bdb0 <rcl_node_init+0x244>
 800bbb6:	2f00      	cmp	r7, #0
 800bbb8:	f000 80ce 	beq.w	800bd58 <rcl_node_init+0x1ec>
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	f7ff fd41 	bl	800b644 <rcl_context_is_valid>
 800bbc2:	4682      	mov	sl, r0
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	f000 80cd 	beq.w	800bd64 <rcl_node_init+0x1f8>
 800bbca:	464a      	mov	r2, r9
 800bbcc:	a922      	add	r1, sp, #136	@ 0x88
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800bbd4:	f001 f83a 	bl	800cc4c <rmw_validate_node_name>
 800bbd8:	4681      	mov	r9, r0
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	f040 80be 	bne.w	800bd5c <rcl_node_init+0x1f0>
 800bbe0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	f040 80f0 	bne.w	800bdc8 <rcl_node_init+0x25c>
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f7f4 fb03 	bl	80001f4 <strlen>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	f040 80bb 	bne.w	800bd6a <rcl_node_init+0x1fe>
 800bbf4:	4d7c      	ldr	r5, [pc, #496]	@ (800bde8 <rcl_node_init+0x27c>)
 800bbf6:	a922      	add	r1, sp, #136	@ 0x88
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	f001 f808 	bl	800cc10 <rmw_validate_namespace>
 800bc00:	4681      	mov	r9, r0
 800bc02:	2800      	cmp	r0, #0
 800bc04:	f040 80aa 	bne.w	800bd5c <rcl_node_init+0x1f0>
 800bc08:	4682      	mov	sl, r0
 800bc0a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	f040 80e0 	bne.w	800bdd2 <rcl_node_init+0x266>
 800bc12:	f8d8 3000 	ldr.w	r3, [r8]
 800bc16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bc1a:	2078      	movs	r0, #120	@ 0x78
 800bc1c:	4798      	blx	r3
 800bc1e:	4681      	mov	r9, r0
 800bc20:	6060      	str	r0, [r4, #4]
 800bc22:	2800      	cmp	r0, #0
 800bc24:	f000 80ca 	beq.w	800bdbc <rcl_node_init+0x250>
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800bc30:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800bc34:	a808      	add	r0, sp, #32
 800bc36:	f000 f907 	bl	800be48 <rcl_node_get_default_options>
 800bc3a:	a908      	add	r1, sp, #32
 800bc3c:	4648      	mov	r0, r9
 800bc3e:	2268      	movs	r2, #104	@ 0x68
 800bc40:	f004 fbb1 	bl	80103a6 <memcpy>
 800bc44:	6861      	ldr	r1, [r4, #4]
 800bc46:	6027      	str	r7, [r4, #0]
 800bc48:	4640      	mov	r0, r8
 800bc4a:	f000 f90b 	bl	800be64 <rcl_node_options_copy>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d158      	bne.n	800bd04 <rcl_node_init+0x198>
 800bc52:	4628      	mov	r0, r5
 800bc54:	f7f4 face 	bl	80001f4 <strlen>
 800bc58:	4428      	add	r0, r5
 800bc5a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800bc5e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800bc62:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc64:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	bf0c      	ite	eq
 800bc6c:	4b5f      	ldreq	r3, [pc, #380]	@ (800bdec <rcl_node_init+0x280>)
 800bc6e:	4b60      	ldrne	r3, [pc, #384]	@ (800bdf0 <rcl_node_init+0x284>)
 800bc70:	9302      	str	r3, [sp, #8]
 800bc72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800bc7c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bc80:	f000 fc0a 	bl	800c498 <rcutils_format_string_limit>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800bc8a:	6818      	ldr	r0, [r3, #0]
 800bc8c:	4631      	mov	r1, r6
 800bc8e:	3028      	adds	r0, #40	@ 0x28
 800bc90:	462a      	mov	r2, r5
 800bc92:	6866      	ldr	r6, [r4, #4]
 800bc94:	f001 fbae 	bl	800d3f4 <rmw_create_node>
 800bc98:	6863      	ldr	r3, [r4, #4]
 800bc9a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800bc9c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d032      	beq.n	800bd08 <rcl_node_init+0x19c>
 800bca2:	f001 fc3b 	bl	800d51c <rmw_node_get_graph_guard_condition>
 800bca6:	4681      	mov	r9, r0
 800bca8:	b360      	cbz	r0, 800bd04 <rcl_node_init+0x198>
 800bcaa:	f8d8 3000 	ldr.w	r3, [r8]
 800bcae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bcb2:	6866      	ldr	r6, [r4, #4]
 800bcb4:	2008      	movs	r0, #8
 800bcb6:	4798      	blx	r3
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800bcbc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800bcc0:	f1bb 0f00 	cmp.w	fp, #0
 800bcc4:	d020      	beq.n	800bd08 <rcl_node_init+0x19c>
 800bcc6:	a806      	add	r0, sp, #24
 800bcc8:	f003 fc12 	bl	800f4f0 <rcl_get_zero_initialized_guard_condition>
 800bccc:	a806      	add	r0, sp, #24
 800bcce:	c803      	ldmia	r0, {r0, r1}
 800bcd0:	6863      	ldr	r3, [r4, #4]
 800bcd2:	46c4      	mov	ip, r8
 800bcd4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800bcd8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800bcdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bce0:	ae23      	add	r6, sp, #140	@ 0x8c
 800bce2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bce4:	f8dc 3000 	ldr.w	r3, [ip]
 800bce8:	6033      	str	r3, [r6, #0]
 800bcea:	ab28      	add	r3, sp, #160	@ 0xa0
 800bcec:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800bcf0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcf8:	463a      	mov	r2, r7
 800bcfa:	4670      	mov	r0, lr
 800bcfc:	f003 fc02 	bl	800f504 <rcl_guard_condition_init_from_rmw>
 800bd00:	4681      	mov	r9, r0
 800bd02:	b328      	cbz	r0, 800bd50 <rcl_node_init+0x1e4>
 800bd04:	6863      	ldr	r3, [r4, #4]
 800bd06:	b1f3      	cbz	r3, 800bd46 <rcl_node_init+0x1da>
 800bd08:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bd0a:	b128      	cbz	r0, 800bd18 <rcl_node_init+0x1ac>
 800bd0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd10:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bd14:	4798      	blx	r3
 800bd16:	6863      	ldr	r3, [r4, #4]
 800bd18:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bd1a:	b110      	cbz	r0, 800bd22 <rcl_node_init+0x1b6>
 800bd1c:	f001 fb82 	bl	800d424 <rmw_destroy_node>
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bd24:	b148      	cbz	r0, 800bd3a <rcl_node_init+0x1ce>
 800bd26:	f003 fc4d 	bl	800f5c4 <rcl_guard_condition_fini>
 800bd2a:	6863      	ldr	r3, [r4, #4]
 800bd2c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bd30:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bd32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd36:	4798      	blx	r3
 800bd38:	6863      	ldr	r3, [r4, #4]
 800bd3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd44:	4798      	blx	r3
 800bd46:	2300      	movs	r3, #0
 800bd48:	e9c4 3300 	strd	r3, r3, [r4]
 800bd4c:	f04f 0901 	mov.w	r9, #1
 800bd50:	f1ba 0f00 	cmp.w	sl, #0
 800bd54:	d125      	bne.n	800bda2 <rcl_node_init+0x236>
 800bd56:	e001      	b.n	800bd5c <rcl_node_init+0x1f0>
 800bd58:	f04f 090b 	mov.w	r9, #11
 800bd5c:	4648      	mov	r0, r9
 800bd5e:	b029      	add	sp, #164	@ 0xa4
 800bd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd64:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800bd68:	e7f8      	b.n	800bd5c <rcl_node_init+0x1f0>
 800bd6a:	782b      	ldrb	r3, [r5, #0]
 800bd6c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd6e:	f43f af42 	beq.w	800bbf6 <rcl_node_init+0x8a>
 800bd72:	9503      	str	r5, [sp, #12]
 800bd74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	4b1e      	ldr	r3, [pc, #120]	@ (800bdf4 <rcl_node_init+0x288>)
 800bd7c:	9302      	str	r3, [sp, #8]
 800bd7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800bd88:	f000 fb86 	bl	800c498 <rcutils_format_string_limit>
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	b340      	cbz	r0, 800bde2 <rcl_node_init+0x276>
 800bd90:	2200      	movs	r2, #0
 800bd92:	a922      	add	r1, sp, #136	@ 0x88
 800bd94:	9222      	str	r2, [sp, #136]	@ 0x88
 800bd96:	f000 ff3b 	bl	800cc10 <rmw_validate_namespace>
 800bd9a:	4681      	mov	r9, r0
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	f43f af34 	beq.w	800bc0a <rcl_node_init+0x9e>
 800bda2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bda6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bdaa:	4628      	mov	r0, r5
 800bdac:	4798      	blx	r3
 800bdae:	e7d5      	b.n	800bd5c <rcl_node_init+0x1f0>
 800bdb0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800bdb4:	4648      	mov	r0, r9
 800bdb6:	b029      	add	sp, #164	@ 0xa4
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbc:	f04f 090a 	mov.w	r9, #10
 800bdc0:	f1ba 0f00 	cmp.w	sl, #0
 800bdc4:	d1ed      	bne.n	800bda2 <rcl_node_init+0x236>
 800bdc6:	e7c9      	b.n	800bd5c <rcl_node_init+0x1f0>
 800bdc8:	f000 ff92 	bl	800ccf0 <rmw_node_name_validation_result_string>
 800bdcc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800bdd0:	e7c4      	b.n	800bd5c <rcl_node_init+0x1f0>
 800bdd2:	f000 ff2f 	bl	800cc34 <rmw_namespace_validation_result_string>
 800bdd6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800bdda:	f1ba 0f00 	cmp.w	sl, #0
 800bdde:	d1e0      	bne.n	800bda2 <rcl_node_init+0x236>
 800bde0:	e7bc      	b.n	800bd5c <rcl_node_init+0x1f0>
 800bde2:	f04f 090a 	mov.w	r9, #10
 800bde6:	e7b9      	b.n	800bd5c <rcl_node_init+0x1f0>
 800bde8:	080114f4 	.word	0x080114f4
 800bdec:	08011378 	.word	0x08011378
 800bdf0:	080114fc 	.word	0x080114fc
 800bdf4:	080114f8 	.word	0x080114f8

0800bdf8 <rcl_node_is_valid>:
 800bdf8:	b130      	cbz	r0, 800be08 <rcl_node_is_valid+0x10>
 800bdfa:	6843      	ldr	r3, [r0, #4]
 800bdfc:	b123      	cbz	r3, 800be08 <rcl_node_is_valid+0x10>
 800bdfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be00:	b113      	cbz	r3, 800be08 <rcl_node_is_valid+0x10>
 800be02:	6800      	ldr	r0, [r0, #0]
 800be04:	f7ff bc1e 	b.w	800b644 <rcl_context_is_valid>
 800be08:	2000      	movs	r0, #0
 800be0a:	4770      	bx	lr

0800be0c <rcl_node_get_name>:
 800be0c:	b120      	cbz	r0, 800be18 <rcl_node_get_name+0xc>
 800be0e:	6840      	ldr	r0, [r0, #4]
 800be10:	b110      	cbz	r0, 800be18 <rcl_node_get_name+0xc>
 800be12:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800be14:	b100      	cbz	r0, 800be18 <rcl_node_get_name+0xc>
 800be16:	6880      	ldr	r0, [r0, #8]
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop

0800be1c <rcl_node_get_namespace>:
 800be1c:	b120      	cbz	r0, 800be28 <rcl_node_get_namespace+0xc>
 800be1e:	6840      	ldr	r0, [r0, #4]
 800be20:	b110      	cbz	r0, 800be28 <rcl_node_get_namespace+0xc>
 800be22:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800be24:	b100      	cbz	r0, 800be28 <rcl_node_get_namespace+0xc>
 800be26:	68c0      	ldr	r0, [r0, #12]
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop

0800be2c <rcl_node_get_options>:
 800be2c:	b128      	cbz	r0, 800be3a <rcl_node_get_options+0xe>
 800be2e:	6840      	ldr	r0, [r0, #4]
 800be30:	b118      	cbz	r0, 800be3a <rcl_node_get_options+0xe>
 800be32:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800be34:	2b00      	cmp	r3, #0
 800be36:	bf08      	it	eq
 800be38:	2000      	moveq	r0, #0
 800be3a:	4770      	bx	lr

0800be3c <rcl_node_get_rmw_handle>:
 800be3c:	b110      	cbz	r0, 800be44 <rcl_node_get_rmw_handle+0x8>
 800be3e:	6840      	ldr	r0, [r0, #4]
 800be40:	b100      	cbz	r0, 800be44 <rcl_node_get_rmw_handle+0x8>
 800be42:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop

0800be48 <rcl_node_get_default_options>:
 800be48:	b510      	push	{r4, lr}
 800be4a:	2268      	movs	r2, #104	@ 0x68
 800be4c:	4604      	mov	r4, r0
 800be4e:	2100      	movs	r1, #0
 800be50:	f004 f9e0 	bl	8010214 <memset>
 800be54:	4620      	mov	r0, r4
 800be56:	f7fb f9cb 	bl	80071f0 <rcutils_get_default_allocator>
 800be5a:	2301      	movs	r3, #1
 800be5c:	7523      	strb	r3, [r4, #20]
 800be5e:	4620      	mov	r0, r4
 800be60:	bd10      	pop	{r4, pc}
 800be62:	bf00      	nop

0800be64 <rcl_node_options_copy>:
 800be64:	b1d0      	cbz	r0, 800be9c <rcl_node_options_copy+0x38>
 800be66:	b570      	push	{r4, r5, r6, lr}
 800be68:	460c      	mov	r4, r1
 800be6a:	b1a9      	cbz	r1, 800be98 <rcl_node_options_copy+0x34>
 800be6c:	4288      	cmp	r0, r1
 800be6e:	4684      	mov	ip, r0
 800be70:	d012      	beq.n	800be98 <rcl_node_options_copy+0x34>
 800be72:	4605      	mov	r5, r0
 800be74:	8a86      	ldrh	r6, [r0, #20]
 800be76:	468e      	mov	lr, r1
 800be78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be7a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800be7e:	682b      	ldr	r3, [r5, #0]
 800be80:	f8ce 3000 	str.w	r3, [lr]
 800be84:	f10c 0118 	add.w	r1, ip, #24
 800be88:	2250      	movs	r2, #80	@ 0x50
 800be8a:	82a6      	strh	r6, [r4, #20]
 800be8c:	f104 0018 	add.w	r0, r4, #24
 800be90:	f004 fa89 	bl	80103a6 <memcpy>
 800be94:	2000      	movs	r0, #0
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	200b      	movs	r0, #11
 800be9a:	bd70      	pop	{r4, r5, r6, pc}
 800be9c:	200b      	movs	r0, #11
 800be9e:	4770      	bx	lr

0800bea0 <rcl_node_resolve_name>:
 800bea0:	b082      	sub	sp, #8
 800bea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea6:	b091      	sub	sp, #68	@ 0x44
 800bea8:	ac1a      	add	r4, sp, #104	@ 0x68
 800beaa:	e884 000c 	stmia.w	r4, {r2, r3}
 800beae:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d03b      	beq.n	800bf2e <rcl_node_resolve_name+0x8e>
 800beb6:	460c      	mov	r4, r1
 800beb8:	4605      	mov	r5, r0
 800beba:	f7ff ffb7 	bl	800be2c <rcl_node_get_options>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d037      	beq.n	800bf32 <rcl_node_resolve_name+0x92>
 800bec2:	4628      	mov	r0, r5
 800bec4:	f7ff ffa2 	bl	800be0c <rcl_node_get_name>
 800bec8:	4606      	mov	r6, r0
 800beca:	4628      	mov	r0, r5
 800becc:	f7ff ffa6 	bl	800be1c <rcl_node_get_namespace>
 800bed0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800bed4:	4681      	mov	r9, r0
 800bed6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800beda:	ad0b      	add	r5, sp, #44	@ 0x2c
 800bedc:	46ac      	mov	ip, r5
 800bede:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bee2:	f8de 3000 	ldr.w	r3, [lr]
 800bee6:	f8cc 3000 	str.w	r3, [ip]
 800beea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800beec:	b1fb      	cbz	r3, 800bf2e <rcl_node_resolve_name+0x8e>
 800beee:	468a      	mov	sl, r1
 800bef0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800bef4:	f000 fc28 	bl	800c748 <rcutils_get_zero_initialized_string_map>
 800bef8:	ab10      	add	r3, sp, #64	@ 0x40
 800befa:	9008      	str	r0, [sp, #32]
 800befc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800bf00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bf04:	2100      	movs	r1, #0
 800bf06:	e895 000c 	ldmia.w	r5, {r2, r3}
 800bf0a:	a808      	add	r0, sp, #32
 800bf0c:	f000 fc94 	bl	800c838 <rcutils_string_map_init>
 800bf10:	4607      	mov	r7, r0
 800bf12:	b180      	cbz	r0, 800bf36 <rcl_node_resolve_name+0x96>
 800bf14:	f7fb f988 	bl	8007228 <rcutils_get_error_string>
 800bf18:	f7fb f99e 	bl	8007258 <rcutils_reset_error>
 800bf1c:	2f0a      	cmp	r7, #10
 800bf1e:	bf18      	it	ne
 800bf20:	2701      	movne	r7, #1
 800bf22:	4638      	mov	r0, r7
 800bf24:	b011      	add	sp, #68	@ 0x44
 800bf26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2a:	b002      	add	sp, #8
 800bf2c:	4770      	bx	lr
 800bf2e:	270b      	movs	r7, #11
 800bf30:	e7f7      	b.n	800bf22 <rcl_node_resolve_name+0x82>
 800bf32:	2701      	movs	r7, #1
 800bf34:	e7f5      	b.n	800bf22 <rcl_node_resolve_name+0x82>
 800bf36:	9009      	str	r0, [sp, #36]	@ 0x24
 800bf38:	9007      	str	r0, [sp, #28]
 800bf3a:	a808      	add	r0, sp, #32
 800bf3c:	f003 fad2 	bl	800f4e4 <rcl_get_default_topic_name_substitutions>
 800bf40:	4607      	mov	r7, r0
 800bf42:	b1a8      	cbz	r0, 800bf70 <rcl_node_resolve_name+0xd0>
 800bf44:	280a      	cmp	r0, #10
 800bf46:	9c07      	ldr	r4, [sp, #28]
 800bf48:	d000      	beq.n	800bf4c <rcl_node_resolve_name+0xac>
 800bf4a:	2701      	movs	r7, #1
 800bf4c:	a808      	add	r0, sp, #32
 800bf4e:	f000 fcb3 	bl	800c8b8 <rcutils_string_map_fini>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d13d      	bne.n	800bfd2 <rcl_node_resolve_name+0x132>
 800bf56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf58:	4659      	mov	r1, fp
 800bf5a:	47d0      	blx	sl
 800bf5c:	4659      	mov	r1, fp
 800bf5e:	4620      	mov	r0, r4
 800bf60:	47d0      	blx	sl
 800bf62:	f1b8 0f00 	cmp.w	r8, #0
 800bf66:	d0dc      	beq.n	800bf22 <rcl_node_resolve_name+0x82>
 800bf68:	2f67      	cmp	r7, #103	@ 0x67
 800bf6a:	bf08      	it	eq
 800bf6c:	2768      	moveq	r7, #104	@ 0x68
 800bf6e:	e7d8      	b.n	800bf22 <rcl_node_resolve_name+0x82>
 800bf70:	ab09      	add	r3, sp, #36	@ 0x24
 800bf72:	9305      	str	r3, [sp, #20]
 800bf74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf76:	46ec      	mov	ip, sp
 800bf78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	f8cc 3000 	str.w	r3, [ip]
 800bf82:	464a      	mov	r2, r9
 800bf84:	4631      	mov	r1, r6
 800bf86:	4620      	mov	r0, r4
 800bf88:	ab08      	add	r3, sp, #32
 800bf8a:	f003 f94d 	bl	800f228 <rcl_expand_topic_name>
 800bf8e:	4607      	mov	r7, r0
 800bf90:	b9b8      	cbnz	r0, 800bfc2 <rcl_node_resolve_name+0x122>
 800bf92:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800bf94:	9009      	str	r0, [sp, #36]	@ 0x24
 800bf96:	4602      	mov	r2, r0
 800bf98:	a90a      	add	r1, sp, #40	@ 0x28
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 fd74 	bl	800ca88 <rmw_validate_full_topic_name>
 800bfa0:	b988      	cbnz	r0, 800bfc6 <rcl_node_resolve_name+0x126>
 800bfa2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800bfa4:	b9d5      	cbnz	r5, 800bfdc <rcl_node_resolve_name+0x13c>
 800bfa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bfa8:	a808      	add	r0, sp, #32
 800bfaa:	601c      	str	r4, [r3, #0]
 800bfac:	f000 fc84 	bl	800c8b8 <rcutils_string_map_fini>
 800bfb0:	4607      	mov	r7, r0
 800bfb2:	b1a8      	cbz	r0, 800bfe0 <rcl_node_resolve_name+0x140>
 800bfb4:	f7fb f938 	bl	8007228 <rcutils_get_error_string>
 800bfb8:	462c      	mov	r4, r5
 800bfba:	f7fb f94d 	bl	8007258 <rcutils_reset_error>
 800bfbe:	2701      	movs	r7, #1
 800bfc0:	e7c9      	b.n	800bf56 <rcl_node_resolve_name+0xb6>
 800bfc2:	9c07      	ldr	r4, [sp, #28]
 800bfc4:	e7c2      	b.n	800bf4c <rcl_node_resolve_name+0xac>
 800bfc6:	f7fb f92f 	bl	8007228 <rcutils_get_error_string>
 800bfca:	2701      	movs	r7, #1
 800bfcc:	f7fb f944 	bl	8007258 <rcutils_reset_error>
 800bfd0:	e7bc      	b.n	800bf4c <rcl_node_resolve_name+0xac>
 800bfd2:	f7fb f929 	bl	8007228 <rcutils_get_error_string>
 800bfd6:	f7fb f93f 	bl	8007258 <rcutils_reset_error>
 800bfda:	e7bc      	b.n	800bf56 <rcl_node_resolve_name+0xb6>
 800bfdc:	2767      	movs	r7, #103	@ 0x67
 800bfde:	e7b5      	b.n	800bf4c <rcl_node_resolve_name+0xac>
 800bfe0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfe2:	4659      	mov	r1, fp
 800bfe4:	47d0      	blx	sl
 800bfe6:	4659      	mov	r1, fp
 800bfe8:	4638      	mov	r0, r7
 800bfea:	47d0      	blx	sl
 800bfec:	e799      	b.n	800bf22 <rcl_node_resolve_name+0x82>
 800bfee:	bf00      	nop

0800bff0 <exact_match_lookup>:
 800bff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bff2:	f102 0708 	add.w	r7, r2, #8
 800bff6:	460b      	mov	r3, r1
 800bff8:	4614      	mov	r4, r2
 800bffa:	4606      	mov	r6, r0
 800bffc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c000:	b085      	sub	sp, #20
 800c002:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c006:	4618      	mov	r0, r3
 800c008:	4919      	ldr	r1, [pc, #100]	@ (800c070 <exact_match_lookup+0x80>)
 800c00a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c00e:	f000 fa35 	bl	800c47c <rcutils_join_path>
 800c012:	7833      	ldrb	r3, [r6, #0]
 800c014:	2b2f      	cmp	r3, #47	@ 0x2f
 800c016:	4605      	mov	r5, r0
 800c018:	d023      	beq.n	800c062 <exact_match_lookup+0x72>
 800c01a:	f104 030c 	add.w	r3, r4, #12
 800c01e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c022:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c026:	1c70      	adds	r0, r6, #1
 800c028:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c02c:	f000 fa2c 	bl	800c488 <rcutils_to_native_path>
 800c030:	4606      	mov	r6, r0
 800c032:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c036:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c03a:	4631      	mov	r1, r6
 800c03c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c040:	4628      	mov	r0, r5
 800c042:	f000 fa1b 	bl	800c47c <rcutils_join_path>
 800c046:	6862      	ldr	r2, [r4, #4]
 800c048:	6921      	ldr	r1, [r4, #16]
 800c04a:	4603      	mov	r3, r0
 800c04c:	4630      	mov	r0, r6
 800c04e:	461e      	mov	r6, r3
 800c050:	4790      	blx	r2
 800c052:	4628      	mov	r0, r5
 800c054:	6863      	ldr	r3, [r4, #4]
 800c056:	6921      	ldr	r1, [r4, #16]
 800c058:	4798      	blx	r3
 800c05a:	4635      	mov	r5, r6
 800c05c:	4628      	mov	r0, r5
 800c05e:	b005      	add	sp, #20
 800c060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c062:	7873      	ldrb	r3, [r6, #1]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1d8      	bne.n	800c01a <exact_match_lookup+0x2a>
 800c068:	4628      	mov	r0, r5
 800c06a:	b005      	add	sp, #20
 800c06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c06e:	bf00      	nop
 800c070:	08011548 	.word	0x08011548

0800c074 <rcl_get_secure_root>:
 800c074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c078:	b085      	sub	sp, #20
 800c07a:	b168      	cbz	r0, 800c098 <rcl_get_secure_root+0x24>
 800c07c:	4607      	mov	r7, r0
 800c07e:	4608      	mov	r0, r1
 800c080:	460c      	mov	r4, r1
 800c082:	f7fb f8c3 	bl	800720c <rcutils_allocator_is_valid>
 800c086:	b138      	cbz	r0, 800c098 <rcl_get_secure_root+0x24>
 800c088:	2300      	movs	r3, #0
 800c08a:	482d      	ldr	r0, [pc, #180]	@ (800c140 <rcl_get_secure_root+0xcc>)
 800c08c:	9303      	str	r3, [sp, #12]
 800c08e:	a903      	add	r1, sp, #12
 800c090:	f000 f9da 	bl	800c448 <rcutils_get_env>
 800c094:	4605      	mov	r5, r0
 800c096:	b120      	cbz	r0, 800c0a2 <rcl_get_secure_root+0x2e>
 800c098:	2500      	movs	r5, #0
 800c09a:	4628      	mov	r0, r5
 800c09c:	b005      	add	sp, #20
 800c09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0a2:	9b03      	ldr	r3, [sp, #12]
 800c0a4:	781a      	ldrb	r2, [r3, #0]
 800c0a6:	2a00      	cmp	r2, #0
 800c0a8:	d0f6      	beq.n	800c098 <rcl_get_secure_root+0x24>
 800c0aa:	f104 090c 	add.w	r9, r4, #12
 800c0ae:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c0b2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c0bc:	f000 fb06 	bl	800c6cc <rcutils_strdup>
 800c0c0:	4680      	mov	r8, r0
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d0e8      	beq.n	800c098 <rcl_get_secure_root+0x24>
 800c0c6:	481f      	ldr	r0, [pc, #124]	@ (800c144 <rcl_get_secure_root+0xd0>)
 800c0c8:	9503      	str	r5, [sp, #12]
 800c0ca:	a903      	add	r1, sp, #12
 800c0cc:	f000 f9bc 	bl	800c448 <rcutils_get_env>
 800c0d0:	b160      	cbz	r0, 800c0ec <rcl_get_secure_root+0x78>
 800c0d2:	2600      	movs	r6, #0
 800c0d4:	6863      	ldr	r3, [r4, #4]
 800c0d6:	6921      	ldr	r1, [r4, #16]
 800c0d8:	4630      	mov	r0, r6
 800c0da:	4798      	blx	r3
 800c0dc:	4640      	mov	r0, r8
 800c0de:	6863      	ldr	r3, [r4, #4]
 800c0e0:	6921      	ldr	r1, [r4, #16]
 800c0e2:	4798      	blx	r3
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	b005      	add	sp, #20
 800c0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ec:	9b03      	ldr	r3, [sp, #12]
 800c0ee:	781e      	ldrb	r6, [r3, #0]
 800c0f0:	b1f6      	cbz	r6, 800c130 <rcl_get_secure_root+0xbc>
 800c0f2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c0f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c100:	f000 fae4 	bl	800c6cc <rcutils_strdup>
 800c104:	4606      	mov	r6, r0
 800c106:	2800      	cmp	r0, #0
 800c108:	d0e3      	beq.n	800c0d2 <rcl_get_secure_root+0x5e>
 800c10a:	4622      	mov	r2, r4
 800c10c:	4641      	mov	r1, r8
 800c10e:	f7ff ff6f 	bl	800bff0 <exact_match_lookup>
 800c112:	4605      	mov	r5, r0
 800c114:	2d00      	cmp	r5, #0
 800c116:	d0dd      	beq.n	800c0d4 <rcl_get_secure_root+0x60>
 800c118:	4628      	mov	r0, r5
 800c11a:	f000 f9ad 	bl	800c478 <rcutils_is_directory>
 800c11e:	4603      	mov	r3, r0
 800c120:	2800      	cmp	r0, #0
 800c122:	d1d7      	bne.n	800c0d4 <rcl_get_secure_root+0x60>
 800c124:	4628      	mov	r0, r5
 800c126:	6921      	ldr	r1, [r4, #16]
 800c128:	461d      	mov	r5, r3
 800c12a:	6863      	ldr	r3, [r4, #4]
 800c12c:	4798      	blx	r3
 800c12e:	e7d1      	b.n	800c0d4 <rcl_get_secure_root+0x60>
 800c130:	4622      	mov	r2, r4
 800c132:	4638      	mov	r0, r7
 800c134:	4641      	mov	r1, r8
 800c136:	f7ff ff5b 	bl	800bff0 <exact_match_lookup>
 800c13a:	4605      	mov	r5, r0
 800c13c:	e7ea      	b.n	800c114 <rcl_get_secure_root+0xa0>
 800c13e:	bf00      	nop
 800c140:	08011554 	.word	0x08011554
 800c144:	0801156c 	.word	0x0801156c

0800c148 <rcl_get_security_options_from_environment>:
 800c148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	2300      	movs	r3, #0
 800c150:	4606      	mov	r6, r0
 800c152:	460f      	mov	r7, r1
 800c154:	4820      	ldr	r0, [pc, #128]	@ (800c1d8 <rcl_get_security_options_from_environment+0x90>)
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	a901      	add	r1, sp, #4
 800c15a:	4690      	mov	r8, r2
 800c15c:	f000 f974 	bl	800c448 <rcutils_get_env>
 800c160:	b120      	cbz	r0, 800c16c <rcl_get_security_options_from_environment+0x24>
 800c162:	2501      	movs	r5, #1
 800c164:	4628      	mov	r0, r5
 800c166:	b002      	add	sp, #8
 800c168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c16c:	491b      	ldr	r1, [pc, #108]	@ (800c1dc <rcl_get_security_options_from_environment+0x94>)
 800c16e:	4604      	mov	r4, r0
 800c170:	9801      	ldr	r0, [sp, #4]
 800c172:	f7f4 f835 	bl	80001e0 <strcmp>
 800c176:	4605      	mov	r5, r0
 800c178:	b9e8      	cbnz	r0, 800c1b6 <rcl_get_security_options_from_environment+0x6e>
 800c17a:	9001      	str	r0, [sp, #4]
 800c17c:	f1b8 0f00 	cmp.w	r8, #0
 800c180:	d020      	beq.n	800c1c4 <rcl_get_security_options_from_environment+0x7c>
 800c182:	4817      	ldr	r0, [pc, #92]	@ (800c1e0 <rcl_get_security_options_from_environment+0x98>)
 800c184:	a901      	add	r1, sp, #4
 800c186:	f000 f95f 	bl	800c448 <rcutils_get_env>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d1e9      	bne.n	800c162 <rcl_get_security_options_from_environment+0x1a>
 800c18e:	4915      	ldr	r1, [pc, #84]	@ (800c1e4 <rcl_get_security_options_from_environment+0x9c>)
 800c190:	9801      	ldr	r0, [sp, #4]
 800c192:	f7f4 f825 	bl	80001e0 <strcmp>
 800c196:	fab0 f080 	clz	r0, r0
 800c19a:	0940      	lsrs	r0, r0, #5
 800c19c:	f888 0000 	strb.w	r0, [r8]
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f7ff ff66 	bl	800c074 <rcl_get_secure_root>
 800c1a8:	b170      	cbz	r0, 800c1c8 <rcl_get_security_options_from_environment+0x80>
 800c1aa:	f8c8 0004 	str.w	r0, [r8, #4]
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	b002      	add	sp, #8
 800c1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b6:	4625      	mov	r5, r4
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f888 4000 	strb.w	r4, [r8]
 800c1be:	b002      	add	sp, #8
 800c1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c4:	250b      	movs	r5, #11
 800c1c6:	e7cd      	b.n	800c164 <rcl_get_security_options_from_environment+0x1c>
 800c1c8:	f898 5000 	ldrb.w	r5, [r8]
 800c1cc:	f1a5 0501 	sub.w	r5, r5, #1
 800c1d0:	fab5 f585 	clz	r5, r5
 800c1d4:	096d      	lsrs	r5, r5, #5
 800c1d6:	e7c5      	b.n	800c164 <rcl_get_security_options_from_environment+0x1c>
 800c1d8:	0801150c 	.word	0x0801150c
 800c1dc:	08011520 	.word	0x08011520
 800c1e0:	08011528 	.word	0x08011528
 800c1e4:	08011540 	.word	0x08011540

0800c1e8 <rcl_get_system_time>:
 800c1e8:	4608      	mov	r0, r1
 800c1ea:	f000 bbd9 	b.w	800c9a0 <rcutils_system_time_now>
 800c1ee:	bf00      	nop

0800c1f0 <rcl_get_steady_time>:
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	f000 bbfd 	b.w	800c9f0 <rcutils_steady_time_now>
 800c1f6:	bf00      	nop

0800c1f8 <rcl_get_ros_time>:
 800c1f8:	7a03      	ldrb	r3, [r0, #8]
 800c1fa:	b510      	push	{r4, lr}
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	b133      	cbz	r3, 800c20e <rcl_get_ros_time+0x16>
 800c200:	2105      	movs	r1, #5
 800c202:	f000 f8eb 	bl	800c3dc <__atomic_load_8>
 800c206:	e9c4 0100 	strd	r0, r1, [r4]
 800c20a:	2000      	movs	r0, #0
 800c20c:	bd10      	pop	{r4, pc}
 800c20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c212:	4608      	mov	r0, r1
 800c214:	f000 bbc4 	b.w	800c9a0 <rcutils_system_time_now>

0800c218 <rcl_clock_init>:
 800c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21a:	4605      	mov	r5, r0
 800c21c:	4610      	mov	r0, r2
 800c21e:	4614      	mov	r4, r2
 800c220:	460e      	mov	r6, r1
 800c222:	f7fa fff3 	bl	800720c <rcutils_allocator_is_valid>
 800c226:	b128      	cbz	r0, 800c234 <rcl_clock_init+0x1c>
 800c228:	2d03      	cmp	r5, #3
 800c22a:	d803      	bhi.n	800c234 <rcl_clock_init+0x1c>
 800c22c:	e8df f005 	tbb	[pc, r5]
 800c230:	06532e1d 	.word	0x06532e1d
 800c234:	f04f 0c0b 	mov.w	ip, #11
 800c238:	4660      	mov	r0, ip
 800c23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c23c:	2e00      	cmp	r6, #0
 800c23e:	d0f9      	beq.n	800c234 <rcl_clock_init+0x1c>
 800c240:	2c00      	cmp	r4, #0
 800c242:	d0f7      	beq.n	800c234 <rcl_clock_init+0x1c>
 800c244:	2300      	movs	r3, #0
 800c246:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c24a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800c300 <rcl_clock_init+0xe8>
 800c24e:	6133      	str	r3, [r6, #16]
 800c250:	f106 0514 	add.w	r5, r6, #20
 800c254:	469c      	mov	ip, r3
 800c256:	2703      	movs	r7, #3
 800c258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c25a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	602b      	str	r3, [r5, #0]
 800c260:	7037      	strb	r7, [r6, #0]
 800c262:	f8c6 e00c 	str.w	lr, [r6, #12]
 800c266:	4660      	mov	r0, ip
 800c268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c26a:	2e00      	cmp	r6, #0
 800c26c:	d0e2      	beq.n	800c234 <rcl_clock_init+0x1c>
 800c26e:	2300      	movs	r3, #0
 800c270:	7033      	strb	r3, [r6, #0]
 800c272:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c276:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800c27a:	469c      	mov	ip, r3
 800c27c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c27e:	f106 0514 	add.w	r5, r6, #20
 800c282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	602b      	str	r3, [r5, #0]
 800c288:	4660      	mov	r0, ip
 800c28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c28c:	2e00      	cmp	r6, #0
 800c28e:	d0d1      	beq.n	800c234 <rcl_clock_init+0x1c>
 800c290:	2c00      	cmp	r4, #0
 800c292:	d0cf      	beq.n	800c234 <rcl_clock_init+0x1c>
 800c294:	2700      	movs	r7, #0
 800c296:	7037      	strb	r7, [r6, #0]
 800c298:	46a4      	mov	ip, r4
 800c29a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c29e:	f106 0514 	add.w	r5, r6, #20
 800c2a2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800c2a6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800c2aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2ac:	f8dc 3000 	ldr.w	r3, [ip]
 800c2b0:	602b      	str	r3, [r5, #0]
 800c2b2:	6921      	ldr	r1, [r4, #16]
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	2010      	movs	r0, #16
 800c2b8:	4798      	blx	r3
 800c2ba:	6130      	str	r0, [r6, #16]
 800c2bc:	b1d0      	cbz	r0, 800c2f4 <rcl_clock_init+0xdc>
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e9c0 2300 	strd	r2, r3, [r0]
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	7207      	strb	r7, [r0, #8]
 800c2ca:	4a0c      	ldr	r2, [pc, #48]	@ (800c2fc <rcl_clock_init+0xe4>)
 800c2cc:	7033      	strb	r3, [r6, #0]
 800c2ce:	46bc      	mov	ip, r7
 800c2d0:	60f2      	str	r2, [r6, #12]
 800c2d2:	4660      	mov	r0, ip
 800c2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	d0ac      	beq.n	800c234 <rcl_clock_init+0x1c>
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	d0aa      	beq.n	800c234 <rcl_clock_init+0x1c>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c2e4:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800c304 <rcl_clock_init+0xec>
 800c2e8:	6133      	str	r3, [r6, #16]
 800c2ea:	f106 0514 	add.w	r5, r6, #20
 800c2ee:	469c      	mov	ip, r3
 800c2f0:	2702      	movs	r7, #2
 800c2f2:	e7b1      	b.n	800c258 <rcl_clock_init+0x40>
 800c2f4:	f04f 0c0a 	mov.w	ip, #10
 800c2f8:	e79e      	b.n	800c238 <rcl_clock_init+0x20>
 800c2fa:	bf00      	nop
 800c2fc:	0800c1f9 	.word	0x0800c1f9
 800c300:	0800c1f1 	.word	0x0800c1f1
 800c304:	0800c1e9 	.word	0x0800c1e9

0800c308 <rcl_validate_enclave_name_with_size>:
 800c308:	b378      	cbz	r0, 800c36a <rcl_validate_enclave_name_with_size+0x62>
 800c30a:	b570      	push	{r4, r5, r6, lr}
 800c30c:	4615      	mov	r5, r2
 800c30e:	b0c2      	sub	sp, #264	@ 0x108
 800c310:	b302      	cbz	r2, 800c354 <rcl_validate_enclave_name_with_size+0x4c>
 800c312:	461e      	mov	r6, r3
 800c314:	466a      	mov	r2, sp
 800c316:	ab01      	add	r3, sp, #4
 800c318:	460c      	mov	r4, r1
 800c31a:	f000 fc2b 	bl	800cb74 <rmw_validate_namespace_with_size>
 800c31e:	4684      	mov	ip, r0
 800c320:	b9e8      	cbnz	r0, 800c35e <rcl_validate_enclave_name_with_size+0x56>
 800c322:	9b00      	ldr	r3, [sp, #0]
 800c324:	b923      	cbnz	r3, 800c330 <rcl_validate_enclave_name_with_size+0x28>
 800c326:	2300      	movs	r3, #0
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	4660      	mov	r0, ip
 800c32c:	b042      	add	sp, #264	@ 0x108
 800c32e:	bd70      	pop	{r4, r5, r6, pc}
 800c330:	2b07      	cmp	r3, #7
 800c332:	d007      	beq.n	800c344 <rcl_validate_enclave_name_with_size+0x3c>
 800c334:	1e5a      	subs	r2, r3, #1
 800c336:	2a05      	cmp	r2, #5
 800c338:	d833      	bhi.n	800c3a2 <rcl_validate_enclave_name_with_size+0x9a>
 800c33a:	e8df f002 	tbb	[pc, r2]
 800c33e:	2c2f      	.short	0x2c2f
 800c340:	1a232629 	.word	0x1a232629
 800c344:	2cff      	cmp	r4, #255	@ 0xff
 800c346:	d9ee      	bls.n	800c326 <rcl_validate_enclave_name_with_size+0x1e>
 800c348:	602b      	str	r3, [r5, #0]
 800c34a:	2e00      	cmp	r6, #0
 800c34c:	d0ed      	beq.n	800c32a <rcl_validate_enclave_name_with_size+0x22>
 800c34e:	23fe      	movs	r3, #254	@ 0xfe
 800c350:	6033      	str	r3, [r6, #0]
 800c352:	e7ea      	b.n	800c32a <rcl_validate_enclave_name_with_size+0x22>
 800c354:	f04f 0c0b 	mov.w	ip, #11
 800c358:	4660      	mov	r0, ip
 800c35a:	b042      	add	sp, #264	@ 0x108
 800c35c:	bd70      	pop	{r4, r5, r6, pc}
 800c35e:	f7ff f953 	bl	800b608 <rcl_convert_rmw_ret_to_rcl_ret>
 800c362:	4684      	mov	ip, r0
 800c364:	4660      	mov	r0, ip
 800c366:	b042      	add	sp, #264	@ 0x108
 800c368:	bd70      	pop	{r4, r5, r6, pc}
 800c36a:	f04f 0c0b 	mov.w	ip, #11
 800c36e:	4660      	mov	r0, ip
 800c370:	4770      	bx	lr
 800c372:	2306      	movs	r3, #6
 800c374:	602b      	str	r3, [r5, #0]
 800c376:	2e00      	cmp	r6, #0
 800c378:	d0d7      	beq.n	800c32a <rcl_validate_enclave_name_with_size+0x22>
 800c37a:	9b01      	ldr	r3, [sp, #4]
 800c37c:	6033      	str	r3, [r6, #0]
 800c37e:	4660      	mov	r0, ip
 800c380:	b042      	add	sp, #264	@ 0x108
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	2305      	movs	r3, #5
 800c386:	602b      	str	r3, [r5, #0]
 800c388:	e7f5      	b.n	800c376 <rcl_validate_enclave_name_with_size+0x6e>
 800c38a:	2304      	movs	r3, #4
 800c38c:	602b      	str	r3, [r5, #0]
 800c38e:	e7f2      	b.n	800c376 <rcl_validate_enclave_name_with_size+0x6e>
 800c390:	2303      	movs	r3, #3
 800c392:	602b      	str	r3, [r5, #0]
 800c394:	e7ef      	b.n	800c376 <rcl_validate_enclave_name_with_size+0x6e>
 800c396:	2302      	movs	r3, #2
 800c398:	602b      	str	r3, [r5, #0]
 800c39a:	e7ec      	b.n	800c376 <rcl_validate_enclave_name_with_size+0x6e>
 800c39c:	2301      	movs	r3, #1
 800c39e:	602b      	str	r3, [r5, #0]
 800c3a0:	e7e9      	b.n	800c376 <rcl_validate_enclave_name_with_size+0x6e>
 800c3a2:	4a04      	ldr	r2, [pc, #16]	@ (800c3b4 <rcl_validate_enclave_name_with_size+0xac>)
 800c3a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c3a8:	a802      	add	r0, sp, #8
 800c3aa:	f000 f963 	bl	800c674 <rcutils_snprintf>
 800c3ae:	f04f 0c01 	mov.w	ip, #1
 800c3b2:	e7ba      	b.n	800c32a <rcl_validate_enclave_name_with_size+0x22>
 800c3b4:	0801158c 	.word	0x0801158c

0800c3b8 <rcl_validate_enclave_name>:
 800c3b8:	b168      	cbz	r0, 800c3d6 <rcl_validate_enclave_name+0x1e>
 800c3ba:	b570      	push	{r4, r5, r6, lr}
 800c3bc:	460d      	mov	r5, r1
 800c3be:	4616      	mov	r6, r2
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	f7f3 ff17 	bl	80001f4 <strlen>
 800c3c6:	4633      	mov	r3, r6
 800c3c8:	4601      	mov	r1, r0
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3d2:	f7ff bf99 	b.w	800c308 <rcl_validate_enclave_name_with_size>
 800c3d6:	200b      	movs	r0, #11
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop

0800c3dc <__atomic_load_8>:
 800c3dc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800c3e0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800c3e4:	4a15      	ldr	r2, [pc, #84]	@ (800c43c <__atomic_load_8+0x60>)
 800c3e6:	4b16      	ldr	r3, [pc, #88]	@ (800c440 <__atomic_load_8+0x64>)
 800c3e8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800c3ec:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800c3f0:	fb02 f101 	mul.w	r1, r2, r1
 800c3f4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800c3f8:	fba3 2301 	umull	r2, r3, r3, r1
 800c3fc:	091b      	lsrs	r3, r3, #4
 800c3fe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800c402:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800c406:	b4d0      	push	{r4, r6, r7}
 800c408:	4c0e      	ldr	r4, [pc, #56]	@ (800c444 <__atomic_load_8+0x68>)
 800c40a:	1ac9      	subs	r1, r1, r3
 800c40c:	1862      	adds	r2, r4, r1
 800c40e:	f04f 0c01 	mov.w	ip, #1
 800c412:	e8d2 3f4f 	ldrexb	r3, [r2]
 800c416:	e8c2 cf46 	strexb	r6, ip, [r2]
 800c41a:	2e00      	cmp	r6, #0
 800c41c:	d1f9      	bne.n	800c412 <__atomic_load_8+0x36>
 800c41e:	f3bf 8f5b 	dmb	ish
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1f4      	bne.n	800c412 <__atomic_load_8+0x36>
 800c428:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c42c:	f3bf 8f5b 	dmb	ish
 800c430:	5463      	strb	r3, [r4, r1]
 800c432:	4630      	mov	r0, r6
 800c434:	4639      	mov	r1, r7
 800c436:	bcd0      	pop	{r4, r6, r7}
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	27d4eb2d 	.word	0x27d4eb2d
 800c440:	b21642c9 	.word	0xb21642c9
 800c444:	2000d9b8 	.word	0x2000d9b8

0800c448 <rcutils_get_env>:
 800c448:	b168      	cbz	r0, 800c466 <rcutils_get_env+0x1e>
 800c44a:	b510      	push	{r4, lr}
 800c44c:	460c      	mov	r4, r1
 800c44e:	b129      	cbz	r1, 800c45c <rcutils_get_env+0x14>
 800c450:	f003 fb3c 	bl	800facc <getenv>
 800c454:	b120      	cbz	r0, 800c460 <rcutils_get_env+0x18>
 800c456:	6020      	str	r0, [r4, #0]
 800c458:	2000      	movs	r0, #0
 800c45a:	bd10      	pop	{r4, pc}
 800c45c:	4803      	ldr	r0, [pc, #12]	@ (800c46c <rcutils_get_env+0x24>)
 800c45e:	bd10      	pop	{r4, pc}
 800c460:	4b03      	ldr	r3, [pc, #12]	@ (800c470 <rcutils_get_env+0x28>)
 800c462:	6023      	str	r3, [r4, #0]
 800c464:	bd10      	pop	{r4, pc}
 800c466:	4803      	ldr	r0, [pc, #12]	@ (800c474 <rcutils_get_env+0x2c>)
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	08011608 	.word	0x08011608
 800c470:	0801172c 	.word	0x0801172c
 800c474:	080115ec 	.word	0x080115ec

0800c478 <rcutils_is_directory>:
 800c478:	2000      	movs	r0, #0
 800c47a:	4770      	bx	lr

0800c47c <rcutils_join_path>:
 800c47c:	b082      	sub	sp, #8
 800c47e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c482:	2000      	movs	r0, #0
 800c484:	b002      	add	sp, #8
 800c486:	4770      	bx	lr

0800c488 <rcutils_to_native_path>:
 800c488:	b084      	sub	sp, #16
 800c48a:	a801      	add	r0, sp, #4
 800c48c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800c490:	b004      	add	sp, #16
 800c492:	2000      	movs	r0, #0
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop

0800c498 <rcutils_format_string_limit>:
 800c498:	b40f      	push	{r0, r1, r2, r3}
 800c49a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c49c:	b083      	sub	sp, #12
 800c49e:	ac08      	add	r4, sp, #32
 800c4a0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800c4a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c4a6:	b34e      	cbz	r6, 800c4fc <rcutils_format_string_limit+0x64>
 800c4a8:	a808      	add	r0, sp, #32
 800c4aa:	f7fa feaf 	bl	800720c <rcutils_allocator_is_valid>
 800c4ae:	b328      	cbz	r0, 800c4fc <rcutils_format_string_limit+0x64>
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	4608      	mov	r0, r1
 800c4b8:	e9cd 3300 	strd	r3, r3, [sp]
 800c4bc:	f000 f8f4 	bl	800c6a8 <rcutils_vsnprintf>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	d01a      	beq.n	800c4fc <rcutils_format_string_limit+0x64>
 800c4c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c4ca:	1c47      	adds	r7, r0, #1
 800c4cc:	429f      	cmp	r7, r3
 800c4ce:	bf84      	itt	hi
 800c4d0:	461f      	movhi	r7, r3
 800c4d2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	9b08      	ldr	r3, [sp, #32]
 800c4da:	4798      	blx	r3
 800c4dc:	4604      	mov	r4, r0
 800c4de:	b168      	cbz	r0, 800c4fc <rcutils_format_string_limit+0x64>
 800c4e0:	9b01      	ldr	r3, [sp, #4]
 800c4e2:	4632      	mov	r2, r6
 800c4e4:	4639      	mov	r1, r7
 800c4e6:	f000 f8df 	bl	800c6a8 <rcutils_vsnprintf>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	db02      	blt.n	800c4f4 <rcutils_format_string_limit+0x5c>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	5563      	strb	r3, [r4, r5]
 800c4f2:	e004      	b.n	800c4fe <rcutils_format_string_limit+0x66>
 800c4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	4798      	blx	r3
 800c4fc:	2400      	movs	r4, #0
 800c4fe:	4620      	mov	r0, r4
 800c500:	b003      	add	sp, #12
 800c502:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c506:	b004      	add	sp, #16
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop

0800c50c <rcutils_repl_str>:
 800c50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c510:	ed2d 8b02 	vpush	{d8}
 800c514:	b087      	sub	sp, #28
 800c516:	4680      	mov	r8, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	f8cd 8004 	str.w	r8, [sp, #4]
 800c51e:	ee08 2a10 	vmov	s16, r2
 800c522:	468a      	mov	sl, r1
 800c524:	4699      	mov	r9, r3
 800c526:	f7f3 fe65 	bl	80001f4 <strlen>
 800c52a:	2600      	movs	r6, #0
 800c52c:	4647      	mov	r7, r8
 800c52e:	9002      	str	r0, [sp, #8]
 800c530:	46b3      	mov	fp, r6
 800c532:	2510      	movs	r5, #16
 800c534:	46b0      	mov	r8, r6
 800c536:	e01d      	b.n	800c574 <rcutils_repl_str+0x68>
 800c538:	f10b 0b01 	add.w	fp, fp, #1
 800c53c:	455e      	cmp	r6, fp
 800c53e:	d211      	bcs.n	800c564 <rcutils_repl_str+0x58>
 800c540:	442e      	add	r6, r5
 800c542:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c546:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c54a:	00b1      	lsls	r1, r6, #2
 800c54c:	4798      	blx	r3
 800c54e:	2800      	cmp	r0, #0
 800c550:	f000 8088 	beq.w	800c664 <rcutils_repl_str+0x158>
 800c554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c558:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800c55c:	4680      	mov	r8, r0
 800c55e:	bf28      	it	cs
 800c560:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800c564:	9a01      	ldr	r2, [sp, #4]
 800c566:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800c56a:	1aa2      	subs	r2, r4, r2
 800c56c:	f843 2c04 	str.w	r2, [r3, #-4]
 800c570:	9b02      	ldr	r3, [sp, #8]
 800c572:	18e7      	adds	r7, r4, r3
 800c574:	4651      	mov	r1, sl
 800c576:	4638      	mov	r0, r7
 800c578:	f003 fe73 	bl	8010262 <strstr>
 800c57c:	4604      	mov	r4, r0
 800c57e:	4640      	mov	r0, r8
 800c580:	2c00      	cmp	r4, #0
 800c582:	d1d9      	bne.n	800c538 <rcutils_repl_str+0x2c>
 800c584:	46b8      	mov	r8, r7
 800c586:	4607      	mov	r7, r0
 800c588:	4640      	mov	r0, r8
 800c58a:	f7f3 fe33 	bl	80001f4 <strlen>
 800c58e:	9b01      	ldr	r3, [sp, #4]
 800c590:	eba8 0303 	sub.w	r3, r8, r3
 800c594:	181c      	adds	r4, r3, r0
 800c596:	9404      	str	r4, [sp, #16]
 800c598:	f1bb 0f00 	cmp.w	fp, #0
 800c59c:	d04a      	beq.n	800c634 <rcutils_repl_str+0x128>
 800c59e:	ee18 0a10 	vmov	r0, s16
 800c5a2:	f7f3 fe27 	bl	80001f4 <strlen>
 800c5a6:	9b02      	ldr	r3, [sp, #8]
 800c5a8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800c5ac:	1ac3      	subs	r3, r0, r3
 800c5ae:	fb0b 4303 	mla	r3, fp, r3, r4
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	9305      	str	r3, [sp, #20]
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	f8d9 3000 	ldr.w	r3, [r9]
 800c5bc:	1c50      	adds	r0, r2, #1
 800c5be:	4798      	blx	r3
 800c5c0:	9003      	str	r0, [sp, #12]
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d04f      	beq.n	800c666 <rcutils_repl_str+0x15a>
 800c5c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	4641      	mov	r1, r8
 800c5ce:	f003 feea 	bl	80103a6 <memcpy>
 800c5d2:	683d      	ldr	r5, [r7, #0]
 800c5d4:	9b03      	ldr	r3, [sp, #12]
 800c5d6:	9701      	str	r7, [sp, #4]
 800c5d8:	46ba      	mov	sl, r7
 800c5da:	441d      	add	r5, r3
 800c5dc:	9f02      	ldr	r7, [sp, #8]
 800c5de:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5e2:	2401      	movs	r4, #1
 800c5e4:	46d1      	mov	r9, sl
 800c5e6:	ee18 aa10 	vmov	sl, s16
 800c5ea:	e00a      	b.n	800c602 <rcutils_repl_str+0xf6>
 800c5ec:	f8d9 5000 	ldr.w	r5, [r9]
 800c5f0:	1aaa      	subs	r2, r5, r2
 800c5f2:	1885      	adds	r5, r0, r2
 800c5f4:	f003 fed7 	bl	80103a6 <memcpy>
 800c5f8:	45a3      	cmp	fp, r4
 800c5fa:	f104 0201 	add.w	r2, r4, #1
 800c5fe:	d935      	bls.n	800c66c <rcutils_repl_str+0x160>
 800c600:	4614      	mov	r4, r2
 800c602:	4632      	mov	r2, r6
 800c604:	4651      	mov	r1, sl
 800c606:	4628      	mov	r0, r5
 800c608:	f003 fecd 	bl	80103a6 <memcpy>
 800c60c:	f859 2b04 	ldr.w	r2, [r9], #4
 800c610:	45a3      	cmp	fp, r4
 800c612:	443a      	add	r2, r7
 800c614:	eb05 0006 	add.w	r0, r5, r6
 800c618:	eb08 0102 	add.w	r1, r8, r2
 800c61c:	d1e6      	bne.n	800c5ec <rcutils_repl_str+0xe0>
 800c61e:	9b04      	ldr	r3, [sp, #16]
 800c620:	1a9a      	subs	r2, r3, r2
 800c622:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800c626:	f003 febe 	bl	80103a6 <memcpy>
 800c62a:	9a03      	ldr	r2, [sp, #12]
 800c62c:	9905      	ldr	r1, [sp, #20]
 800c62e:	2300      	movs	r3, #0
 800c630:	5453      	strb	r3, [r2, r1]
 800c632:	e00b      	b.n	800c64c <rcutils_repl_str+0x140>
 800c634:	4620      	mov	r0, r4
 800c636:	f8d9 3000 	ldr.w	r3, [r9]
 800c63a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800c63e:	3001      	adds	r0, #1
 800c640:	4798      	blx	r3
 800c642:	9003      	str	r0, [sp, #12]
 800c644:	b110      	cbz	r0, 800c64c <rcutils_repl_str+0x140>
 800c646:	9901      	ldr	r1, [sp, #4]
 800c648:	f003 fea5 	bl	8010396 <strcpy>
 800c64c:	4638      	mov	r0, r7
 800c64e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c652:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800c656:	4798      	blx	r3
 800c658:	9803      	ldr	r0, [sp, #12]
 800c65a:	b007      	add	sp, #28
 800c65c:	ecbd 8b02 	vpop	{d8}
 800c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c664:	4647      	mov	r7, r8
 800c666:	2300      	movs	r3, #0
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	e7ef      	b.n	800c64c <rcutils_repl_str+0x140>
 800c66c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800c670:	e7db      	b.n	800c62a <rcutils_repl_str+0x11e>
 800c672:	bf00      	nop

0800c674 <rcutils_snprintf>:
 800c674:	b40c      	push	{r2, r3}
 800c676:	b530      	push	{r4, r5, lr}
 800c678:	b083      	sub	sp, #12
 800c67a:	ab06      	add	r3, sp, #24
 800c67c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c680:	9301      	str	r3, [sp, #4]
 800c682:	b152      	cbz	r2, 800c69a <rcutils_snprintf+0x26>
 800c684:	b138      	cbz	r0, 800c696 <rcutils_snprintf+0x22>
 800c686:	b141      	cbz	r1, 800c69a <rcutils_snprintf+0x26>
 800c688:	f003 fdb6 	bl	80101f8 <vsniprintf>
 800c68c:	b003      	add	sp, #12
 800c68e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c692:	b002      	add	sp, #8
 800c694:	4770      	bx	lr
 800c696:	2900      	cmp	r1, #0
 800c698:	d0f6      	beq.n	800c688 <rcutils_snprintf+0x14>
 800c69a:	f003 fe4f 	bl	801033c <__errno>
 800c69e:	2316      	movs	r3, #22
 800c6a0:	6003      	str	r3, [r0, #0]
 800c6a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6a6:	e7f1      	b.n	800c68c <rcutils_snprintf+0x18>

0800c6a8 <rcutils_vsnprintf>:
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	b13a      	cbz	r2, 800c6bc <rcutils_vsnprintf+0x14>
 800c6ac:	b120      	cbz	r0, 800c6b8 <rcutils_vsnprintf+0x10>
 800c6ae:	b129      	cbz	r1, 800c6bc <rcutils_vsnprintf+0x14>
 800c6b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6b4:	f003 bda0 	b.w	80101f8 <vsniprintf>
 800c6b8:	2900      	cmp	r1, #0
 800c6ba:	d0f9      	beq.n	800c6b0 <rcutils_vsnprintf+0x8>
 800c6bc:	f003 fe3e 	bl	801033c <__errno>
 800c6c0:	2316      	movs	r3, #22
 800c6c2:	6003      	str	r3, [r0, #0]
 800c6c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ca:	bf00      	nop

0800c6cc <rcutils_strdup>:
 800c6cc:	b084      	sub	sp, #16
 800c6ce:	b570      	push	{r4, r5, r6, lr}
 800c6d0:	b082      	sub	sp, #8
 800c6d2:	ac07      	add	r4, sp, #28
 800c6d4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800c6d8:	4605      	mov	r5, r0
 800c6da:	b1b0      	cbz	r0, 800c70a <rcutils_strdup+0x3e>
 800c6dc:	f7f3 fd8a 	bl	80001f4 <strlen>
 800c6e0:	1c42      	adds	r2, r0, #1
 800c6e2:	9b07      	ldr	r3, [sp, #28]
 800c6e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6e6:	9201      	str	r2, [sp, #4]
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	4798      	blx	r3
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	b128      	cbz	r0, 800c6fe <rcutils_strdup+0x32>
 800c6f2:	9a01      	ldr	r2, [sp, #4]
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	f003 fe56 	bl	80103a6 <memcpy>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	55a3      	strb	r3, [r4, r6]
 800c6fe:	4620      	mov	r0, r4
 800c700:	b002      	add	sp, #8
 800c702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c706:	b004      	add	sp, #16
 800c708:	4770      	bx	lr
 800c70a:	4604      	mov	r4, r0
 800c70c:	e7f7      	b.n	800c6fe <rcutils_strdup+0x32>
 800c70e:	bf00      	nop

0800c710 <rcutils_strndup>:
 800c710:	b082      	sub	sp, #8
 800c712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c714:	ac06      	add	r4, sp, #24
 800c716:	e884 000c 	stmia.w	r4, {r2, r3}
 800c71a:	4605      	mov	r5, r0
 800c71c:	b188      	cbz	r0, 800c742 <rcutils_strndup+0x32>
 800c71e:	1c4f      	adds	r7, r1, #1
 800c720:	460e      	mov	r6, r1
 800c722:	4638      	mov	r0, r7
 800c724:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c726:	4790      	blx	r2
 800c728:	4604      	mov	r4, r0
 800c72a:	b128      	cbz	r0, 800c738 <rcutils_strndup+0x28>
 800c72c:	463a      	mov	r2, r7
 800c72e:	4629      	mov	r1, r5
 800c730:	f003 fe39 	bl	80103a6 <memcpy>
 800c734:	2300      	movs	r3, #0
 800c736:	55a3      	strb	r3, [r4, r6]
 800c738:	4620      	mov	r0, r4
 800c73a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c73e:	b002      	add	sp, #8
 800c740:	4770      	bx	lr
 800c742:	4604      	mov	r4, r0
 800c744:	e7f8      	b.n	800c738 <rcutils_strndup+0x28>
 800c746:	bf00      	nop

0800c748 <rcutils_get_zero_initialized_string_map>:
 800c748:	4b01      	ldr	r3, [pc, #4]	@ (800c750 <rcutils_get_zero_initialized_string_map+0x8>)
 800c74a:	2000      	movs	r0, #0
 800c74c:	6018      	str	r0, [r3, #0]
 800c74e:	4770      	bx	lr
 800c750:	2000d9d0 	.word	0x2000d9d0

0800c754 <rcutils_string_map_reserve>:
 800c754:	2800      	cmp	r0, #0
 800c756:	d05f      	beq.n	800c818 <rcutils_string_map_reserve+0xc4>
 800c758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75c:	460c      	mov	r4, r1
 800c75e:	6801      	ldr	r1, [r0, #0]
 800c760:	b082      	sub	sp, #8
 800c762:	4605      	mov	r5, r0
 800c764:	b129      	cbz	r1, 800c772 <rcutils_string_map_reserve+0x1e>
 800c766:	68cb      	ldr	r3, [r1, #12]
 800c768:	42a3      	cmp	r3, r4
 800c76a:	d906      	bls.n	800c77a <rcutils_string_map_reserve+0x26>
 800c76c:	461c      	mov	r4, r3
 800c76e:	2900      	cmp	r1, #0
 800c770:	d1f9      	bne.n	800c766 <rcutils_string_map_reserve+0x12>
 800c772:	201f      	movs	r0, #31
 800c774:	b002      	add	sp, #8
 800c776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c77a:	688b      	ldr	r3, [r1, #8]
 800c77c:	42a3      	cmp	r3, r4
 800c77e:	d047      	beq.n	800c810 <rcutils_string_map_reserve+0xbc>
 800c780:	6a0e      	ldr	r6, [r1, #32]
 800c782:	2c00      	cmp	r4, #0
 800c784:	d034      	beq.n	800c7f0 <rcutils_string_map_reserve+0x9c>
 800c786:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800c78a:	d243      	bcs.n	800c814 <rcutils_string_map_reserve+0xc0>
 800c78c:	00a7      	lsls	r7, r4, #2
 800c78e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800c792:	6808      	ldr	r0, [r1, #0]
 800c794:	4632      	mov	r2, r6
 800c796:	4639      	mov	r1, r7
 800c798:	47c0      	blx	r8
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d03a      	beq.n	800c814 <rcutils_string_map_reserve+0xc0>
 800c79e:	682b      	ldr	r3, [r5, #0]
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	6018      	str	r0, [r3, #0]
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	6858      	ldr	r0, [r3, #4]
 800c7a8:	47c0      	blx	r8
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d032      	beq.n	800c814 <rcutils_string_map_reserve+0xc0>
 800c7ae:	682d      	ldr	r5, [r5, #0]
 800c7b0:	68ab      	ldr	r3, [r5, #8]
 800c7b2:	6068      	str	r0, [r5, #4]
 800c7b4:	42a3      	cmp	r3, r4
 800c7b6:	d226      	bcs.n	800c806 <rcutils_string_map_reserve+0xb2>
 800c7b8:	682a      	ldr	r2, [r5, #0]
 800c7ba:	eb00 0c07 	add.w	ip, r0, r7
 800c7be:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800c7c2:	45e6      	cmp	lr, ip
 800c7c4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800c7c8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800c7cc:	d203      	bcs.n	800c7d6 <rcutils_string_map_reserve+0x82>
 800c7ce:	eb02 0c07 	add.w	ip, r2, r7
 800c7d2:	4566      	cmp	r6, ip
 800c7d4:	d322      	bcc.n	800c81c <rcutils_string_map_reserve+0xc8>
 800c7d6:	1ae3      	subs	r3, r4, r3
 800c7d8:	009a      	lsls	r2, r3, #2
 800c7da:	4670      	mov	r0, lr
 800c7dc:	2100      	movs	r1, #0
 800c7de:	9201      	str	r2, [sp, #4]
 800c7e0:	f003 fd18 	bl	8010214 <memset>
 800c7e4:	9a01      	ldr	r2, [sp, #4]
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f003 fd13 	bl	8010214 <memset>
 800c7ee:	e00a      	b.n	800c806 <rcutils_string_map_reserve+0xb2>
 800c7f0:	694f      	ldr	r7, [r1, #20]
 800c7f2:	6808      	ldr	r0, [r1, #0]
 800c7f4:	4631      	mov	r1, r6
 800c7f6:	47b8      	blx	r7
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	6858      	ldr	r0, [r3, #4]
 800c7fe:	601c      	str	r4, [r3, #0]
 800c800:	47b8      	blx	r7
 800c802:	682d      	ldr	r5, [r5, #0]
 800c804:	606c      	str	r4, [r5, #4]
 800c806:	2000      	movs	r0, #0
 800c808:	60ac      	str	r4, [r5, #8]
 800c80a:	b002      	add	sp, #8
 800c80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c810:	2000      	movs	r0, #0
 800c812:	e7af      	b.n	800c774 <rcutils_string_map_reserve+0x20>
 800c814:	200a      	movs	r0, #10
 800c816:	e7ad      	b.n	800c774 <rcutils_string_map_reserve+0x20>
 800c818:	200b      	movs	r0, #11
 800c81a:	4770      	bx	lr
 800c81c:	1f0b      	subs	r3, r1, #4
 800c81e:	4418      	add	r0, r3
 800c820:	4413      	add	r3, r2
 800c822:	3a04      	subs	r2, #4
 800c824:	4417      	add	r7, r2
 800c826:	2200      	movs	r2, #0
 800c828:	f843 2f04 	str.w	r2, [r3, #4]!
 800c82c:	42bb      	cmp	r3, r7
 800c82e:	f840 2f04 	str.w	r2, [r0, #4]!
 800c832:	d1f9      	bne.n	800c828 <rcutils_string_map_reserve+0xd4>
 800c834:	e7e7      	b.n	800c806 <rcutils_string_map_reserve+0xb2>
 800c836:	bf00      	nop

0800c838 <rcutils_string_map_init>:
 800c838:	b082      	sub	sp, #8
 800c83a:	b570      	push	{r4, r5, r6, lr}
 800c83c:	ac04      	add	r4, sp, #16
 800c83e:	e884 000c 	stmia.w	r4, {r2, r3}
 800c842:	b380      	cbz	r0, 800c8a6 <rcutils_string_map_init+0x6e>
 800c844:	6806      	ldr	r6, [r0, #0]
 800c846:	4604      	mov	r4, r0
 800c848:	b12e      	cbz	r6, 800c856 <rcutils_string_map_init+0x1e>
 800c84a:	251e      	movs	r5, #30
 800c84c:	4628      	mov	r0, r5
 800c84e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c852:	b002      	add	sp, #8
 800c854:	4770      	bx	lr
 800c856:	a804      	add	r0, sp, #16
 800c858:	460d      	mov	r5, r1
 800c85a:	f7fa fcd7 	bl	800720c <rcutils_allocator_is_valid>
 800c85e:	b310      	cbz	r0, 800c8a6 <rcutils_string_map_init+0x6e>
 800c860:	9b04      	ldr	r3, [sp, #16]
 800c862:	9908      	ldr	r1, [sp, #32]
 800c864:	2024      	movs	r0, #36	@ 0x24
 800c866:	4798      	blx	r3
 800c868:	6020      	str	r0, [r4, #0]
 800c86a:	b310      	cbz	r0, 800c8b2 <rcutils_string_map_init+0x7a>
 800c86c:	f10d 0e10 	add.w	lr, sp, #16
 800c870:	e9c0 6600 	strd	r6, r6, [r0]
 800c874:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800c878:	f100 0c10 	add.w	ip, r0, #16
 800c87c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c880:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c884:	f8de 3000 	ldr.w	r3, [lr]
 800c888:	f8cc 3000 	str.w	r3, [ip]
 800c88c:	4629      	mov	r1, r5
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff ff60 	bl	800c754 <rcutils_string_map_reserve>
 800c894:	4605      	mov	r5, r0
 800c896:	2800      	cmp	r0, #0
 800c898:	d0d8      	beq.n	800c84c <rcutils_string_map_init+0x14>
 800c89a:	9b05      	ldr	r3, [sp, #20]
 800c89c:	9908      	ldr	r1, [sp, #32]
 800c89e:	6820      	ldr	r0, [r4, #0]
 800c8a0:	4798      	blx	r3
 800c8a2:	6026      	str	r6, [r4, #0]
 800c8a4:	e7d2      	b.n	800c84c <rcutils_string_map_init+0x14>
 800c8a6:	250b      	movs	r5, #11
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8ae:	b002      	add	sp, #8
 800c8b0:	4770      	bx	lr
 800c8b2:	250a      	movs	r5, #10
 800c8b4:	e7ca      	b.n	800c84c <rcutils_string_map_init+0x14>
 800c8b6:	bf00      	nop

0800c8b8 <rcutils_string_map_fini>:
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	b082      	sub	sp, #8
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d03a      	beq.n	800c938 <rcutils_string_map_fini+0x80>
 800c8c2:	6804      	ldr	r4, [r0, #0]
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	2c00      	cmp	r4, #0
 800c8c8:	d032      	beq.n	800c930 <rcutils_string_map_fini+0x78>
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	b32b      	cbz	r3, 800c91a <rcutils_string_map_fini+0x62>
 800c8ce:	2500      	movs	r5, #0
 800c8d0:	6822      	ldr	r2, [r4, #0]
 800c8d2:	462f      	mov	r7, r5
 800c8d4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800c8d8:	b1e0      	cbz	r0, 800c914 <rcutils_string_map_fini+0x5c>
 800c8da:	6a21      	ldr	r1, [r4, #32]
 800c8dc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800c8e0:	9101      	str	r1, [sp, #4]
 800c8e2:	47c0      	blx	r8
 800c8e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c8e8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800c8ec:	9901      	ldr	r1, [sp, #4]
 800c8ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8f2:	47c0      	blx	r8
 800c8f4:	68e3      	ldr	r3, [r4, #12]
 800c8f6:	6862      	ldr	r2, [r4, #4]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800c8fe:	60e3      	str	r3, [r4, #12]
 800c900:	6834      	ldr	r4, [r6, #0]
 800c902:	68a3      	ldr	r3, [r4, #8]
 800c904:	3501      	adds	r5, #1
 800c906:	429d      	cmp	r5, r3
 800c908:	d207      	bcs.n	800c91a <rcutils_string_map_fini+0x62>
 800c90a:	6822      	ldr	r2, [r4, #0]
 800c90c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800c910:	2800      	cmp	r0, #0
 800c912:	d1e2      	bne.n	800c8da <rcutils_string_map_fini+0x22>
 800c914:	3501      	adds	r5, #1
 800c916:	429d      	cmp	r5, r3
 800c918:	d3dc      	bcc.n	800c8d4 <rcutils_string_map_fini+0x1c>
 800c91a:	2100      	movs	r1, #0
 800c91c:	4630      	mov	r0, r6
 800c91e:	f7ff ff19 	bl	800c754 <rcutils_string_map_reserve>
 800c922:	4604      	mov	r4, r0
 800c924:	b920      	cbnz	r0, 800c930 <rcutils_string_map_fini+0x78>
 800c926:	6830      	ldr	r0, [r6, #0]
 800c928:	6943      	ldr	r3, [r0, #20]
 800c92a:	6a01      	ldr	r1, [r0, #32]
 800c92c:	4798      	blx	r3
 800c92e:	6034      	str	r4, [r6, #0]
 800c930:	4620      	mov	r0, r4
 800c932:	b002      	add	sp, #8
 800c934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c938:	240b      	movs	r4, #11
 800c93a:	4620      	mov	r0, r4
 800c93c:	b002      	add	sp, #8
 800c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c942:	bf00      	nop

0800c944 <rcutils_string_map_getn>:
 800c944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	b300      	cbz	r0, 800c98c <rcutils_string_map_getn+0x48>
 800c94a:	6807      	ldr	r7, [r0, #0]
 800c94c:	b1ff      	cbz	r7, 800c98e <rcutils_string_map_getn+0x4a>
 800c94e:	4688      	mov	r8, r1
 800c950:	b1e1      	cbz	r1, 800c98c <rcutils_string_map_getn+0x48>
 800c952:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800c956:	683e      	ldr	r6, [r7, #0]
 800c958:	f1ba 0f00 	cmp.w	sl, #0
 800c95c:	d016      	beq.n	800c98c <rcutils_string_map_getn+0x48>
 800c95e:	4691      	mov	r9, r2
 800c960:	3e04      	subs	r6, #4
 800c962:	2400      	movs	r4, #0
 800c964:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800c968:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c96c:	4628      	mov	r0, r5
 800c96e:	3401      	adds	r4, #1
 800c970:	b155      	cbz	r5, 800c988 <rcutils_string_map_getn+0x44>
 800c972:	f7f3 fc3f 	bl	80001f4 <strlen>
 800c976:	4548      	cmp	r0, r9
 800c978:	4602      	mov	r2, r0
 800c97a:	4629      	mov	r1, r5
 800c97c:	bf38      	it	cc
 800c97e:	464a      	movcc	r2, r9
 800c980:	4640      	mov	r0, r8
 800c982:	f003 fc5c 	bl	801023e <strncmp>
 800c986:	b128      	cbz	r0, 800c994 <rcutils_string_map_getn+0x50>
 800c988:	45a2      	cmp	sl, r4
 800c98a:	d1eb      	bne.n	800c964 <rcutils_string_map_getn+0x20>
 800c98c:	2700      	movs	r7, #0
 800c98e:	4638      	mov	r0, r7
 800c990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f853 700b 	ldr.w	r7, [r3, fp]
 800c99a:	4638      	mov	r0, r7
 800c99c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9a0 <rcutils_system_time_now>:
 800c9a0:	b308      	cbz	r0, 800c9e6 <rcutils_system_time_now+0x46>
 800c9a2:	b570      	push	{r4, r5, r6, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	4669      	mov	r1, sp
 800c9aa:	2001      	movs	r0, #1
 800c9ac:	f7f4 fb18 	bl	8000fe0 <clock_gettime>
 800c9b0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800c9b4:	2d00      	cmp	r5, #0
 800c9b6:	db13      	blt.n	800c9e0 <rcutils_system_time_now+0x40>
 800c9b8:	9902      	ldr	r1, [sp, #8]
 800c9ba:	2900      	cmp	r1, #0
 800c9bc:	db0d      	blt.n	800c9da <rcutils_system_time_now+0x3a>
 800c9be:	4e0b      	ldr	r6, [pc, #44]	@ (800c9ec <rcutils_system_time_now+0x4c>)
 800c9c0:	fba3 3206 	umull	r3, r2, r3, r6
 800c9c4:	185b      	adds	r3, r3, r1
 800c9c6:	fb06 2205 	mla	r2, r6, r5, r2
 800c9ca:	f04f 0000 	mov.w	r0, #0
 800c9ce:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800c9d2:	e9c4 3200 	strd	r3, r2, [r4]
 800c9d6:	b004      	add	sp, #16
 800c9d8:	bd70      	pop	{r4, r5, r6, pc}
 800c9da:	ea53 0205 	orrs.w	r2, r3, r5
 800c9de:	d1ee      	bne.n	800c9be <rcutils_system_time_now+0x1e>
 800c9e0:	2002      	movs	r0, #2
 800c9e2:	b004      	add	sp, #16
 800c9e4:	bd70      	pop	{r4, r5, r6, pc}
 800c9e6:	200b      	movs	r0, #11
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	3b9aca00 	.word	0x3b9aca00

0800c9f0 <rcutils_steady_time_now>:
 800c9f0:	b308      	cbz	r0, 800ca36 <rcutils_steady_time_now+0x46>
 800c9f2:	b570      	push	{r4, r5, r6, lr}
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	4669      	mov	r1, sp
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	f7f4 faf0 	bl	8000fe0 <clock_gettime>
 800ca00:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ca04:	2d00      	cmp	r5, #0
 800ca06:	db13      	blt.n	800ca30 <rcutils_steady_time_now+0x40>
 800ca08:	9902      	ldr	r1, [sp, #8]
 800ca0a:	2900      	cmp	r1, #0
 800ca0c:	db0d      	blt.n	800ca2a <rcutils_steady_time_now+0x3a>
 800ca0e:	4e0b      	ldr	r6, [pc, #44]	@ (800ca3c <rcutils_steady_time_now+0x4c>)
 800ca10:	fba3 3206 	umull	r3, r2, r3, r6
 800ca14:	185b      	adds	r3, r3, r1
 800ca16:	fb06 2205 	mla	r2, r6, r5, r2
 800ca1a:	f04f 0000 	mov.w	r0, #0
 800ca1e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ca22:	e9c4 3200 	strd	r3, r2, [r4]
 800ca26:	b004      	add	sp, #16
 800ca28:	bd70      	pop	{r4, r5, r6, pc}
 800ca2a:	ea53 0205 	orrs.w	r2, r3, r5
 800ca2e:	d1ee      	bne.n	800ca0e <rcutils_steady_time_now+0x1e>
 800ca30:	2002      	movs	r0, #2
 800ca32:	b004      	add	sp, #16
 800ca34:	bd70      	pop	{r4, r5, r6, pc}
 800ca36:	200b      	movs	r0, #11
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	3b9aca00 	.word	0x3b9aca00

0800ca40 <rmw_get_zero_initialized_context>:
 800ca40:	b510      	push	{r4, lr}
 800ca42:	4604      	mov	r4, r0
 800ca44:	3010      	adds	r0, #16
 800ca46:	f000 f80b 	bl	800ca60 <rmw_get_zero_initialized_init_options>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	2100      	movs	r1, #0
 800ca50:	e9c4 0100 	strd	r0, r1, [r4]
 800ca54:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800ca58:	60a3      	str	r3, [r4, #8]
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	bd10      	pop	{r4, pc}
 800ca5e:	bf00      	nop

0800ca60 <rmw_get_zero_initialized_init_options>:
 800ca60:	b510      	push	{r4, lr}
 800ca62:	2238      	movs	r2, #56	@ 0x38
 800ca64:	4604      	mov	r4, r0
 800ca66:	2100      	movs	r1, #0
 800ca68:	f003 fbd4 	bl	8010214 <memset>
 800ca6c:	f104 0010 	add.w	r0, r4, #16
 800ca70:	f000 f806 	bl	800ca80 <rmw_get_default_security_options>
 800ca74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca78:	60e3      	str	r3, [r4, #12]
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	bd10      	pop	{r4, pc}
 800ca7e:	bf00      	nop

0800ca80 <rmw_get_default_security_options>:
 800ca80:	2200      	movs	r2, #0
 800ca82:	7002      	strb	r2, [r0, #0]
 800ca84:	6042      	str	r2, [r0, #4]
 800ca86:	4770      	bx	lr

0800ca88 <rmw_validate_full_topic_name>:
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d057      	beq.n	800cb3c <rmw_validate_full_topic_name+0xb4>
 800ca8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca90:	460d      	mov	r5, r1
 800ca92:	2900      	cmp	r1, #0
 800ca94:	d054      	beq.n	800cb40 <rmw_validate_full_topic_name+0xb8>
 800ca96:	4616      	mov	r6, r2
 800ca98:	4604      	mov	r4, r0
 800ca9a:	f7f3 fbab 	bl	80001f4 <strlen>
 800ca9e:	b148      	cbz	r0, 800cab4 <rmw_validate_full_topic_name+0x2c>
 800caa0:	7823      	ldrb	r3, [r4, #0]
 800caa2:	2b2f      	cmp	r3, #47	@ 0x2f
 800caa4:	d00d      	beq.n	800cac2 <rmw_validate_full_topic_name+0x3a>
 800caa6:	2302      	movs	r3, #2
 800caa8:	602b      	str	r3, [r5, #0]
 800caaa:	b13e      	cbz	r6, 800cabc <rmw_validate_full_topic_name+0x34>
 800caac:	2000      	movs	r0, #0
 800caae:	6030      	str	r0, [r6, #0]
 800cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab4:	2301      	movs	r3, #1
 800cab6:	602b      	str	r3, [r5, #0]
 800cab8:	2e00      	cmp	r6, #0
 800caba:	d1f7      	bne.n	800caac <rmw_validate_full_topic_name+0x24>
 800cabc:	2000      	movs	r0, #0
 800cabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac2:	1e43      	subs	r3, r0, #1
 800cac4:	5ce2      	ldrb	r2, [r4, r3]
 800cac6:	2a2f      	cmp	r2, #47	@ 0x2f
 800cac8:	d03c      	beq.n	800cb44 <rmw_validate_full_topic_name+0xbc>
 800caca:	1e63      	subs	r3, r4, #1
 800cacc:	eb03 0800 	add.w	r8, r3, r0
 800cad0:	f1c4 0e01 	rsb	lr, r4, #1
 800cad4:	eb0e 0703 	add.w	r7, lr, r3
 800cad8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800cadc:	f021 0220 	bic.w	r2, r1, #32
 800cae0:	3a41      	subs	r2, #65	@ 0x41
 800cae2:	2a19      	cmp	r2, #25
 800cae4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800cae8:	d90b      	bls.n	800cb02 <rmw_validate_full_topic_name+0x7a>
 800caea:	295f      	cmp	r1, #95	@ 0x5f
 800caec:	d009      	beq.n	800cb02 <rmw_validate_full_topic_name+0x7a>
 800caee:	f1bc 0f0a 	cmp.w	ip, #10
 800caf2:	d906      	bls.n	800cb02 <rmw_validate_full_topic_name+0x7a>
 800caf4:	2304      	movs	r3, #4
 800caf6:	602b      	str	r3, [r5, #0]
 800caf8:	2e00      	cmp	r6, #0
 800cafa:	d0df      	beq.n	800cabc <rmw_validate_full_topic_name+0x34>
 800cafc:	6037      	str	r7, [r6, #0]
 800cafe:	2000      	movs	r0, #0
 800cb00:	e7d6      	b.n	800cab0 <rmw_validate_full_topic_name+0x28>
 800cb02:	4543      	cmp	r3, r8
 800cb04:	d1e6      	bne.n	800cad4 <rmw_validate_full_topic_name+0x4c>
 800cb06:	4f1a      	ldr	r7, [pc, #104]	@ (800cb70 <rmw_validate_full_topic_name+0xe8>)
 800cb08:	2301      	movs	r3, #1
 800cb0a:	e004      	b.n	800cb16 <rmw_validate_full_topic_name+0x8e>
 800cb0c:	4298      	cmp	r0, r3
 800cb0e:	f104 0401 	add.w	r4, r4, #1
 800cb12:	d91c      	bls.n	800cb4e <rmw_validate_full_topic_name+0xc6>
 800cb14:	4613      	mov	r3, r2
 800cb16:	4298      	cmp	r0, r3
 800cb18:	f103 0201 	add.w	r2, r3, #1
 800cb1c:	d0f6      	beq.n	800cb0c <rmw_validate_full_topic_name+0x84>
 800cb1e:	7821      	ldrb	r1, [r4, #0]
 800cb20:	292f      	cmp	r1, #47	@ 0x2f
 800cb22:	d1f3      	bne.n	800cb0c <rmw_validate_full_topic_name+0x84>
 800cb24:	7861      	ldrb	r1, [r4, #1]
 800cb26:	292f      	cmp	r1, #47	@ 0x2f
 800cb28:	d01c      	beq.n	800cb64 <rmw_validate_full_topic_name+0xdc>
 800cb2a:	5dc9      	ldrb	r1, [r1, r7]
 800cb2c:	0749      	lsls	r1, r1, #29
 800cb2e:	d5ed      	bpl.n	800cb0c <rmw_validate_full_topic_name+0x84>
 800cb30:	2206      	movs	r2, #6
 800cb32:	602a      	str	r2, [r5, #0]
 800cb34:	2e00      	cmp	r6, #0
 800cb36:	d0c1      	beq.n	800cabc <rmw_validate_full_topic_name+0x34>
 800cb38:	6033      	str	r3, [r6, #0]
 800cb3a:	e7bf      	b.n	800cabc <rmw_validate_full_topic_name+0x34>
 800cb3c:	200b      	movs	r0, #11
 800cb3e:	4770      	bx	lr
 800cb40:	200b      	movs	r0, #11
 800cb42:	e7b5      	b.n	800cab0 <rmw_validate_full_topic_name+0x28>
 800cb44:	2203      	movs	r2, #3
 800cb46:	602a      	str	r2, [r5, #0]
 800cb48:	2e00      	cmp	r6, #0
 800cb4a:	d1f5      	bne.n	800cb38 <rmw_validate_full_topic_name+0xb0>
 800cb4c:	e7b6      	b.n	800cabc <rmw_validate_full_topic_name+0x34>
 800cb4e:	28f7      	cmp	r0, #247	@ 0xf7
 800cb50:	d802      	bhi.n	800cb58 <rmw_validate_full_topic_name+0xd0>
 800cb52:	2000      	movs	r0, #0
 800cb54:	6028      	str	r0, [r5, #0]
 800cb56:	e7ab      	b.n	800cab0 <rmw_validate_full_topic_name+0x28>
 800cb58:	2307      	movs	r3, #7
 800cb5a:	602b      	str	r3, [r5, #0]
 800cb5c:	2e00      	cmp	r6, #0
 800cb5e:	d0ad      	beq.n	800cabc <rmw_validate_full_topic_name+0x34>
 800cb60:	23f6      	movs	r3, #246	@ 0xf6
 800cb62:	e7e9      	b.n	800cb38 <rmw_validate_full_topic_name+0xb0>
 800cb64:	2205      	movs	r2, #5
 800cb66:	602a      	str	r2, [r5, #0]
 800cb68:	2e00      	cmp	r6, #0
 800cb6a:	d1e5      	bne.n	800cb38 <rmw_validate_full_topic_name+0xb0>
 800cb6c:	e7a6      	b.n	800cabc <rmw_validate_full_topic_name+0x34>
 800cb6e:	bf00      	nop
 800cb70:	08011c1c 	.word	0x08011c1c

0800cb74 <rmw_validate_namespace_with_size>:
 800cb74:	b340      	cbz	r0, 800cbc8 <rmw_validate_namespace_with_size+0x54>
 800cb76:	b570      	push	{r4, r5, r6, lr}
 800cb78:	4614      	mov	r4, r2
 800cb7a:	b0c2      	sub	sp, #264	@ 0x108
 800cb7c:	b332      	cbz	r2, 800cbcc <rmw_validate_namespace_with_size+0x58>
 800cb7e:	2901      	cmp	r1, #1
 800cb80:	460d      	mov	r5, r1
 800cb82:	461e      	mov	r6, r3
 800cb84:	d102      	bne.n	800cb8c <rmw_validate_namespace_with_size+0x18>
 800cb86:	7803      	ldrb	r3, [r0, #0]
 800cb88:	2b2f      	cmp	r3, #47	@ 0x2f
 800cb8a:	d012      	beq.n	800cbb2 <rmw_validate_namespace_with_size+0x3e>
 800cb8c:	aa01      	add	r2, sp, #4
 800cb8e:	4669      	mov	r1, sp
 800cb90:	f7ff ff7a 	bl	800ca88 <rmw_validate_full_topic_name>
 800cb94:	b978      	cbnz	r0, 800cbb6 <rmw_validate_namespace_with_size+0x42>
 800cb96:	9b00      	ldr	r3, [sp, #0]
 800cb98:	b14b      	cbz	r3, 800cbae <rmw_validate_namespace_with_size+0x3a>
 800cb9a:	2b07      	cmp	r3, #7
 800cb9c:	d007      	beq.n	800cbae <rmw_validate_namespace_with_size+0x3a>
 800cb9e:	1e5a      	subs	r2, r3, #1
 800cba0:	2a05      	cmp	r2, #5
 800cba2:	d82b      	bhi.n	800cbfc <rmw_validate_namespace_with_size+0x88>
 800cba4:	e8df f002 	tbb	[pc, r2]
 800cba8:	1e212427 	.word	0x1e212427
 800cbac:	141b      	.short	0x141b
 800cbae:	2df5      	cmp	r5, #245	@ 0xf5
 800cbb0:	d803      	bhi.n	800cbba <rmw_validate_namespace_with_size+0x46>
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	6020      	str	r0, [r4, #0]
 800cbb6:	b042      	add	sp, #264	@ 0x108
 800cbb8:	bd70      	pop	{r4, r5, r6, pc}
 800cbba:	2307      	movs	r3, #7
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	2e00      	cmp	r6, #0
 800cbc0:	d0f9      	beq.n	800cbb6 <rmw_validate_namespace_with_size+0x42>
 800cbc2:	23f4      	movs	r3, #244	@ 0xf4
 800cbc4:	6033      	str	r3, [r6, #0]
 800cbc6:	e7f6      	b.n	800cbb6 <rmw_validate_namespace_with_size+0x42>
 800cbc8:	200b      	movs	r0, #11
 800cbca:	4770      	bx	lr
 800cbcc:	200b      	movs	r0, #11
 800cbce:	e7f2      	b.n	800cbb6 <rmw_validate_namespace_with_size+0x42>
 800cbd0:	2306      	movs	r3, #6
 800cbd2:	6023      	str	r3, [r4, #0]
 800cbd4:	2e00      	cmp	r6, #0
 800cbd6:	d0ee      	beq.n	800cbb6 <rmw_validate_namespace_with_size+0x42>
 800cbd8:	9b01      	ldr	r3, [sp, #4]
 800cbda:	6033      	str	r3, [r6, #0]
 800cbdc:	e7eb      	b.n	800cbb6 <rmw_validate_namespace_with_size+0x42>
 800cbde:	2305      	movs	r3, #5
 800cbe0:	6023      	str	r3, [r4, #0]
 800cbe2:	e7f7      	b.n	800cbd4 <rmw_validate_namespace_with_size+0x60>
 800cbe4:	2304      	movs	r3, #4
 800cbe6:	6023      	str	r3, [r4, #0]
 800cbe8:	e7f4      	b.n	800cbd4 <rmw_validate_namespace_with_size+0x60>
 800cbea:	2303      	movs	r3, #3
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	e7f1      	b.n	800cbd4 <rmw_validate_namespace_with_size+0x60>
 800cbf0:	2302      	movs	r3, #2
 800cbf2:	6023      	str	r3, [r4, #0]
 800cbf4:	e7ee      	b.n	800cbd4 <rmw_validate_namespace_with_size+0x60>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	e7eb      	b.n	800cbd4 <rmw_validate_namespace_with_size+0x60>
 800cbfc:	4a03      	ldr	r2, [pc, #12]	@ (800cc0c <rmw_validate_namespace_with_size+0x98>)
 800cbfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc02:	a802      	add	r0, sp, #8
 800cc04:	f7ff fd36 	bl	800c674 <rcutils_snprintf>
 800cc08:	2001      	movs	r0, #1
 800cc0a:	e7d4      	b.n	800cbb6 <rmw_validate_namespace_with_size+0x42>
 800cc0c:	08011624 	.word	0x08011624

0800cc10 <rmw_validate_namespace>:
 800cc10:	b168      	cbz	r0, 800cc2e <rmw_validate_namespace+0x1e>
 800cc12:	b570      	push	{r4, r5, r6, lr}
 800cc14:	460d      	mov	r5, r1
 800cc16:	4616      	mov	r6, r2
 800cc18:	4604      	mov	r4, r0
 800cc1a:	f7f3 faeb 	bl	80001f4 <strlen>
 800cc1e:	4633      	mov	r3, r6
 800cc20:	4601      	mov	r1, r0
 800cc22:	462a      	mov	r2, r5
 800cc24:	4620      	mov	r0, r4
 800cc26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc2a:	f7ff bfa3 	b.w	800cb74 <rmw_validate_namespace_with_size>
 800cc2e:	200b      	movs	r0, #11
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop

0800cc34 <rmw_namespace_validation_result_string>:
 800cc34:	2807      	cmp	r0, #7
 800cc36:	bf9a      	itte	ls
 800cc38:	4b02      	ldrls	r3, [pc, #8]	@ (800cc44 <rmw_namespace_validation_result_string+0x10>)
 800cc3a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800cc3e:	4802      	ldrhi	r0, [pc, #8]	@ (800cc48 <rmw_namespace_validation_result_string+0x14>)
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	0801181c 	.word	0x0801181c
 800cc48:	08011674 	.word	0x08011674

0800cc4c <rmw_validate_node_name>:
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d03b      	beq.n	800ccc8 <rmw_validate_node_name+0x7c>
 800cc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc54:	460d      	mov	r5, r1
 800cc56:	2900      	cmp	r1, #0
 800cc58:	d038      	beq.n	800cccc <rmw_validate_node_name+0x80>
 800cc5a:	4616      	mov	r6, r2
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	f7f3 fac9 	bl	80001f4 <strlen>
 800cc62:	b1e0      	cbz	r0, 800cc9e <rmw_validate_node_name+0x52>
 800cc64:	1e63      	subs	r3, r4, #1
 800cc66:	eb03 0800 	add.w	r8, r3, r0
 800cc6a:	f1c4 0101 	rsb	r1, r4, #1
 800cc6e:	18cf      	adds	r7, r1, r3
 800cc70:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800cc74:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800cc78:	f02e 0c20 	bic.w	ip, lr, #32
 800cc7c:	2a09      	cmp	r2, #9
 800cc7e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800cc82:	d914      	bls.n	800ccae <rmw_validate_node_name+0x62>
 800cc84:	f1bc 0f19 	cmp.w	ip, #25
 800cc88:	d911      	bls.n	800ccae <rmw_validate_node_name+0x62>
 800cc8a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800cc8e:	d00e      	beq.n	800ccae <rmw_validate_node_name+0x62>
 800cc90:	2302      	movs	r3, #2
 800cc92:	602b      	str	r3, [r5, #0]
 800cc94:	b106      	cbz	r6, 800cc98 <rmw_validate_node_name+0x4c>
 800cc96:	6037      	str	r7, [r6, #0]
 800cc98:	2000      	movs	r0, #0
 800cc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9e:	2301      	movs	r3, #1
 800cca0:	602b      	str	r3, [r5, #0]
 800cca2:	2e00      	cmp	r6, #0
 800cca4:	d0f8      	beq.n	800cc98 <rmw_validate_node_name+0x4c>
 800cca6:	2000      	movs	r0, #0
 800cca8:	6030      	str	r0, [r6, #0]
 800ccaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccae:	4543      	cmp	r3, r8
 800ccb0:	d1dd      	bne.n	800cc6e <rmw_validate_node_name+0x22>
 800ccb2:	7822      	ldrb	r2, [r4, #0]
 800ccb4:	4b0d      	ldr	r3, [pc, #52]	@ (800ccec <rmw_validate_node_name+0xa0>)
 800ccb6:	5cd3      	ldrb	r3, [r2, r3]
 800ccb8:	f013 0304 	ands.w	r3, r3, #4
 800ccbc:	d110      	bne.n	800cce0 <rmw_validate_node_name+0x94>
 800ccbe:	28ff      	cmp	r0, #255	@ 0xff
 800ccc0:	d806      	bhi.n	800ccd0 <rmw_validate_node_name+0x84>
 800ccc2:	602b      	str	r3, [r5, #0]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	e7e8      	b.n	800cc9a <rmw_validate_node_name+0x4e>
 800ccc8:	200b      	movs	r0, #11
 800ccca:	4770      	bx	lr
 800cccc:	200b      	movs	r0, #11
 800ccce:	e7e4      	b.n	800cc9a <rmw_validate_node_name+0x4e>
 800ccd0:	2204      	movs	r2, #4
 800ccd2:	602a      	str	r2, [r5, #0]
 800ccd4:	2e00      	cmp	r6, #0
 800ccd6:	d0df      	beq.n	800cc98 <rmw_validate_node_name+0x4c>
 800ccd8:	22fe      	movs	r2, #254	@ 0xfe
 800ccda:	6032      	str	r2, [r6, #0]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	e7dc      	b.n	800cc9a <rmw_validate_node_name+0x4e>
 800cce0:	2303      	movs	r3, #3
 800cce2:	602b      	str	r3, [r5, #0]
 800cce4:	2e00      	cmp	r6, #0
 800cce6:	d1de      	bne.n	800cca6 <rmw_validate_node_name+0x5a>
 800cce8:	e7d6      	b.n	800cc98 <rmw_validate_node_name+0x4c>
 800ccea:	bf00      	nop
 800ccec:	08011c1c 	.word	0x08011c1c

0800ccf0 <rmw_node_name_validation_result_string>:
 800ccf0:	2804      	cmp	r0, #4
 800ccf2:	bf9a      	itte	ls
 800ccf4:	4b02      	ldrls	r3, [pc, #8]	@ (800cd00 <rmw_node_name_validation_result_string+0x10>)
 800ccf6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ccfa:	4802      	ldrhi	r0, [pc, #8]	@ (800cd04 <rmw_node_name_validation_result_string+0x14>)
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	08011928 	.word	0x08011928
 800cd04:	0801183c 	.word	0x0801183c

0800cd08 <get_memory>:
 800cd08:	4603      	mov	r3, r0
 800cd0a:	6840      	ldr	r0, [r0, #4]
 800cd0c:	b158      	cbz	r0, 800cd26 <get_memory+0x1e>
 800cd0e:	6842      	ldr	r2, [r0, #4]
 800cd10:	605a      	str	r2, [r3, #4]
 800cd12:	b10a      	cbz	r2, 800cd18 <get_memory+0x10>
 800cd14:	2100      	movs	r1, #0
 800cd16:	6011      	str	r1, [r2, #0]
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	6042      	str	r2, [r0, #4]
 800cd1c:	b102      	cbz	r2, 800cd20 <get_memory+0x18>
 800cd1e:	6010      	str	r0, [r2, #0]
 800cd20:	2200      	movs	r2, #0
 800cd22:	6002      	str	r2, [r0, #0]
 800cd24:	6018      	str	r0, [r3, #0]
 800cd26:	4770      	bx	lr

0800cd28 <put_memory>:
 800cd28:	680b      	ldr	r3, [r1, #0]
 800cd2a:	b10b      	cbz	r3, 800cd30 <put_memory+0x8>
 800cd2c:	684a      	ldr	r2, [r1, #4]
 800cd2e:	605a      	str	r2, [r3, #4]
 800cd30:	684a      	ldr	r2, [r1, #4]
 800cd32:	b102      	cbz	r2, 800cd36 <put_memory+0xe>
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	6803      	ldr	r3, [r0, #0]
 800cd38:	428b      	cmp	r3, r1
 800cd3a:	6843      	ldr	r3, [r0, #4]
 800cd3c:	bf08      	it	eq
 800cd3e:	6002      	streq	r2, [r0, #0]
 800cd40:	604b      	str	r3, [r1, #4]
 800cd42:	b103      	cbz	r3, 800cd46 <put_memory+0x1e>
 800cd44:	6019      	str	r1, [r3, #0]
 800cd46:	2300      	movs	r3, #0
 800cd48:	600b      	str	r3, [r1, #0]
 800cd4a:	6041      	str	r1, [r0, #4]
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop

0800cd50 <rmw_get_implementation_identifier>:
 800cd50:	4b01      	ldr	r3, [pc, #4]	@ (800cd58 <rmw_get_implementation_identifier+0x8>)
 800cd52:	6818      	ldr	r0, [r3, #0]
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	08011954 	.word	0x08011954

0800cd5c <rmw_init_options_init>:
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd60:	b083      	sub	sp, #12
 800cd62:	ad09      	add	r5, sp, #36	@ 0x24
 800cd64:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800cd68:	b130      	cbz	r0, 800cd78 <rmw_init_options_init+0x1c>
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	f7fa fa4d 	bl	800720c <rcutils_allocator_is_valid>
 800cd72:	b108      	cbz	r0, 800cd78 <rmw_init_options_init+0x1c>
 800cd74:	68a6      	ldr	r6, [r4, #8]
 800cd76:	b12e      	cbz	r6, 800cd84 <rmw_init_options_init+0x28>
 800cd78:	200b      	movs	r0, #11
 800cd7a:	b003      	add	sp, #12
 800cd7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cd80:	b004      	add	sp, #16
 800cd82:	4770      	bx	lr
 800cd84:	2200      	movs	r2, #0
 800cd86:	2300      	movs	r3, #0
 800cd88:	e9c4 2300 	strd	r2, r3, [r4]
 800cd8c:	4b22      	ldr	r3, [pc, #136]	@ (800ce18 <rmw_init_options_init+0xbc>)
 800cd8e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800ce28 <rmw_init_options_init+0xcc>
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	60a3      	str	r3, [r4, #8]
 800cd96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd98:	f104 0c20 	add.w	ip, r4, #32
 800cd9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cda0:	466f      	mov	r7, sp
 800cda2:	682b      	ldr	r3, [r5, #0]
 800cda4:	f8cc 3000 	str.w	r3, [ip]
 800cda8:	4638      	mov	r0, r7
 800cdaa:	f8c4 e01c 	str.w	lr, [r4, #28]
 800cdae:	60e6      	str	r6, [r4, #12]
 800cdb0:	f7ff fe66 	bl	800ca80 <rmw_get_default_security_options>
 800cdb4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800cdb8:	f104 0310 	add.w	r3, r4, #16
 800cdbc:	e883 0003 	stmia.w	r3, {r0, r1}
 800cdc0:	2203      	movs	r2, #3
 800cdc2:	4816      	ldr	r0, [pc, #88]	@ (800ce1c <rmw_init_options_init+0xc0>)
 800cdc4:	4916      	ldr	r1, [pc, #88]	@ (800ce20 <rmw_init_options_init+0xc4>)
 800cdc6:	7626      	strb	r6, [r4, #24]
 800cdc8:	f7fa fd20 	bl	800780c <rmw_uxrce_init_init_options_impl_memory>
 800cdcc:	4813      	ldr	r0, [pc, #76]	@ (800ce1c <rmw_init_options_init+0xc0>)
 800cdce:	f7ff ff9b 	bl	800cd08 <get_memory>
 800cdd2:	b1f0      	cbz	r0, 800ce12 <rmw_init_options_init+0xb6>
 800cdd4:	4a13      	ldr	r2, [pc, #76]	@ (800ce24 <rmw_init_options_init+0xc8>)
 800cdd6:	6883      	ldr	r3, [r0, #8]
 800cdd8:	6851      	ldr	r1, [r2, #4]
 800cdda:	7810      	ldrb	r0, [r2, #0]
 800cddc:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdde:	7418      	strb	r0, [r3, #16]
 800cde0:	6159      	str	r1, [r3, #20]
 800cde2:	68d1      	ldr	r1, [r2, #12]
 800cde4:	61d9      	str	r1, [r3, #28]
 800cde6:	6911      	ldr	r1, [r2, #16]
 800cde8:	6219      	str	r1, [r3, #32]
 800cdea:	6951      	ldr	r1, [r2, #20]
 800cdec:	6892      	ldr	r2, [r2, #8]
 800cdee:	619a      	str	r2, [r3, #24]
 800cdf0:	6259      	str	r1, [r3, #36]	@ 0x24
 800cdf2:	f7fd faf3 	bl	800a3dc <uxr_nanos>
 800cdf6:	f002 ff6f 	bl	800fcd8 <srand>
 800cdfa:	f002 ff9b 	bl	800fd34 <rand>
 800cdfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce00:	6298      	str	r0, [r3, #40]	@ 0x28
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d0f9      	beq.n	800cdfa <rmw_init_options_init+0x9e>
 800ce06:	2000      	movs	r0, #0
 800ce08:	b003      	add	sp, #12
 800ce0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce0e:	b004      	add	sp, #16
 800ce10:	4770      	bx	lr
 800ce12:	2001      	movs	r0, #1
 800ce14:	e7b1      	b.n	800cd7a <rmw_init_options_init+0x1e>
 800ce16:	bf00      	nop
 800ce18:	08011954 	.word	0x08011954
 800ce1c:	2000d924 	.word	0x2000d924
 800ce20:	200091c0 	.word	0x200091c0
 800ce24:	2000904c 	.word	0x2000904c
 800ce28:	080114f4 	.word	0x080114f4

0800ce2c <rmw_init_options_copy>:
 800ce2c:	b570      	push	{r4, r5, r6, lr}
 800ce2e:	b158      	cbz	r0, 800ce48 <rmw_init_options_copy+0x1c>
 800ce30:	460d      	mov	r5, r1
 800ce32:	b149      	cbz	r1, 800ce48 <rmw_init_options_copy+0x1c>
 800ce34:	4604      	mov	r4, r0
 800ce36:	6880      	ldr	r0, [r0, #8]
 800ce38:	b120      	cbz	r0, 800ce44 <rmw_init_options_copy+0x18>
 800ce3a:	4b1e      	ldr	r3, [pc, #120]	@ (800ceb4 <rmw_init_options_copy+0x88>)
 800ce3c:	6819      	ldr	r1, [r3, #0]
 800ce3e:	f7f3 f9cf 	bl	80001e0 <strcmp>
 800ce42:	bb90      	cbnz	r0, 800ceaa <rmw_init_options_copy+0x7e>
 800ce44:	68ab      	ldr	r3, [r5, #8]
 800ce46:	b113      	cbz	r3, 800ce4e <rmw_init_options_copy+0x22>
 800ce48:	250b      	movs	r5, #11
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	bd70      	pop	{r4, r5, r6, pc}
 800ce4e:	4623      	mov	r3, r4
 800ce50:	462a      	mov	r2, r5
 800ce52:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800ce56:	f8d3 c000 	ldr.w	ip, [r3]
 800ce5a:	6858      	ldr	r0, [r3, #4]
 800ce5c:	6899      	ldr	r1, [r3, #8]
 800ce5e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800ce62:	f8c2 e00c 	str.w	lr, [r2, #12]
 800ce66:	3310      	adds	r3, #16
 800ce68:	42b3      	cmp	r3, r6
 800ce6a:	f8c2 c000 	str.w	ip, [r2]
 800ce6e:	6050      	str	r0, [r2, #4]
 800ce70:	6091      	str	r1, [r2, #8]
 800ce72:	f102 0210 	add.w	r2, r2, #16
 800ce76:	d1ee      	bne.n	800ce56 <rmw_init_options_copy+0x2a>
 800ce78:	6819      	ldr	r1, [r3, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	480e      	ldr	r0, [pc, #56]	@ (800ceb8 <rmw_init_options_copy+0x8c>)
 800ce7e:	6053      	str	r3, [r2, #4]
 800ce80:	6011      	str	r1, [r2, #0]
 800ce82:	f7ff ff41 	bl	800cd08 <get_memory>
 800ce86:	b198      	cbz	r0, 800ceb0 <rmw_init_options_copy+0x84>
 800ce88:	6883      	ldr	r3, [r0, #8]
 800ce8a:	636b      	str	r3, [r5, #52]	@ 0x34
 800ce8c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ce8e:	f102 0c10 	add.w	ip, r2, #16
 800ce92:	f103 0410 	add.w	r4, r3, #16
 800ce96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce9c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800cea0:	2500      	movs	r5, #0
 800cea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cea6:	4628      	mov	r0, r5
 800cea8:	bd70      	pop	{r4, r5, r6, pc}
 800ceaa:	250c      	movs	r5, #12
 800ceac:	4628      	mov	r0, r5
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
 800ceb0:	2501      	movs	r5, #1
 800ceb2:	e7ca      	b.n	800ce4a <rmw_init_options_copy+0x1e>
 800ceb4:	08011954 	.word	0x08011954
 800ceb8:	2000d924 	.word	0x2000d924

0800cebc <rmw_init_options_fini>:
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d03d      	beq.n	800cf3c <rmw_init_options_fini+0x80>
 800cec0:	b510      	push	{r4, lr}
 800cec2:	4604      	mov	r4, r0
 800cec4:	b08e      	sub	sp, #56	@ 0x38
 800cec6:	3020      	adds	r0, #32
 800cec8:	f7fa f9a0 	bl	800720c <rcutils_allocator_is_valid>
 800cecc:	b360      	cbz	r0, 800cf28 <rmw_init_options_fini+0x6c>
 800cece:	68a0      	ldr	r0, [r4, #8]
 800ced0:	b120      	cbz	r0, 800cedc <rmw_init_options_fini+0x20>
 800ced2:	4b1c      	ldr	r3, [pc, #112]	@ (800cf44 <rmw_init_options_fini+0x88>)
 800ced4:	6819      	ldr	r1, [r3, #0]
 800ced6:	f7f3 f983 	bl	80001e0 <strcmp>
 800ceda:	bb68      	cbnz	r0, 800cf38 <rmw_init_options_fini+0x7c>
 800cedc:	4b1a      	ldr	r3, [pc, #104]	@ (800cf48 <rmw_init_options_fini+0x8c>)
 800cede:	6819      	ldr	r1, [r3, #0]
 800cee0:	b331      	cbz	r1, 800cf30 <rmw_init_options_fini+0x74>
 800cee2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800cee4:	e001      	b.n	800ceea <rmw_init_options_fini+0x2e>
 800cee6:	6849      	ldr	r1, [r1, #4]
 800cee8:	b311      	cbz	r1, 800cf30 <rmw_init_options_fini+0x74>
 800ceea:	688b      	ldr	r3, [r1, #8]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d1fa      	bne.n	800cee6 <rmw_init_options_fini+0x2a>
 800cef0:	4815      	ldr	r0, [pc, #84]	@ (800cf48 <rmw_init_options_fini+0x8c>)
 800cef2:	f7ff ff19 	bl	800cd28 <put_memory>
 800cef6:	4668      	mov	r0, sp
 800cef8:	f7ff fdb2 	bl	800ca60 <rmw_get_zero_initialized_init_options>
 800cefc:	46ee      	mov	lr, sp
 800cefe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf02:	46a4      	mov	ip, r4
 800cf04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cf1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cf20:	2300      	movs	r3, #0
 800cf22:	4618      	mov	r0, r3
 800cf24:	b00e      	add	sp, #56	@ 0x38
 800cf26:	bd10      	pop	{r4, pc}
 800cf28:	230b      	movs	r3, #11
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	b00e      	add	sp, #56	@ 0x38
 800cf2e:	bd10      	pop	{r4, pc}
 800cf30:	2301      	movs	r3, #1
 800cf32:	4618      	mov	r0, r3
 800cf34:	b00e      	add	sp, #56	@ 0x38
 800cf36:	bd10      	pop	{r4, pc}
 800cf38:	230c      	movs	r3, #12
 800cf3a:	e7f2      	b.n	800cf22 <rmw_init_options_fini+0x66>
 800cf3c:	230b      	movs	r3, #11
 800cf3e:	4618      	mov	r0, r3
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	08011954 	.word	0x08011954
 800cf48:	2000d924 	.word	0x2000d924

0800cf4c <rmw_init>:
 800cf4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf50:	b083      	sub	sp, #12
 800cf52:	2800      	cmp	r0, #0
 800cf54:	f000 80d3 	beq.w	800d0fe <rmw_init+0x1b2>
 800cf58:	460e      	mov	r6, r1
 800cf5a:	2900      	cmp	r1, #0
 800cf5c:	f000 80cf 	beq.w	800d0fe <rmw_init+0x1b2>
 800cf60:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cf62:	4605      	mov	r5, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f000 80ca 	beq.w	800d0fe <rmw_init+0x1b2>
 800cf6a:	4b78      	ldr	r3, [pc, #480]	@ (800d14c <rmw_init+0x200>)
 800cf6c:	6880      	ldr	r0, [r0, #8]
 800cf6e:	681f      	ldr	r7, [r3, #0]
 800cf70:	b128      	cbz	r0, 800cf7e <rmw_init+0x32>
 800cf72:	4639      	mov	r1, r7
 800cf74:	f7f3 f934 	bl	80001e0 <strcmp>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	f040 80ca 	bne.w	800d112 <rmw_init+0x1c6>
 800cf7e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf82:	4c73      	ldr	r4, [pc, #460]	@ (800d150 <rmw_init+0x204>)
 800cf84:	4973      	ldr	r1, [pc, #460]	@ (800d154 <rmw_init+0x208>)
 800cf86:	4874      	ldr	r0, [pc, #464]	@ (800d158 <rmw_init+0x20c>)
 800cf88:	60b7      	str	r7, [r6, #8]
 800cf8a:	e9c6 2300 	strd	r2, r3, [r6]
 800cf8e:	68eb      	ldr	r3, [r5, #12]
 800cf90:	64b3      	str	r3, [r6, #72]	@ 0x48
 800cf92:	2201      	movs	r2, #1
 800cf94:	f7fa fbda 	bl	800774c <rmw_uxrce_init_session_memory>
 800cf98:	4620      	mov	r0, r4
 800cf9a:	4970      	ldr	r1, [pc, #448]	@ (800d15c <rmw_init+0x210>)
 800cf9c:	2204      	movs	r2, #4
 800cf9e:	f7fa fc15 	bl	80077cc <rmw_uxrce_init_static_input_buffer_memory>
 800cfa2:	f04f 0800 	mov.w	r8, #0
 800cfa6:	486c      	ldr	r0, [pc, #432]	@ (800d158 <rmw_init+0x20c>)
 800cfa8:	f884 800d 	strb.w	r8, [r4, #13]
 800cfac:	f7ff feac 	bl	800cd08 <get_memory>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	f000 80a9 	beq.w	800d108 <rmw_init+0x1bc>
 800cfb6:	6884      	ldr	r4, [r0, #8]
 800cfb8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800cfba:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800cfbc:	f890 c010 	ldrb.w	ip, [r0, #16]
 800cfc0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800cfc4:	9101      	str	r1, [sp, #4]
 800cfc6:	6a00      	ldr	r0, [r0, #32]
 800cfc8:	9000      	str	r0, [sp, #0]
 800cfca:	f104 0910 	add.w	r9, r4, #16
 800cfce:	4661      	mov	r1, ip
 800cfd0:	4648      	mov	r0, r9
 800cfd2:	f000 fdbf 	bl	800db54 <uxr_set_custom_transport_callbacks>
 800cfd6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800cfda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cfde:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800cfe2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800cfe6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800cfea:	495d      	ldr	r1, [pc, #372]	@ (800d160 <rmw_init+0x214>)
 800cfec:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800cff0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800cff4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800cff8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800cffc:	4859      	ldr	r0, [pc, #356]	@ (800d164 <rmw_init+0x218>)
 800cffe:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d002:	2201      	movs	r2, #1
 800d004:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d006:	f7fa fb81 	bl	800770c <rmw_uxrce_init_node_memory>
 800d00a:	4957      	ldr	r1, [pc, #348]	@ (800d168 <rmw_init+0x21c>)
 800d00c:	4857      	ldr	r0, [pc, #348]	@ (800d16c <rmw_init+0x220>)
 800d00e:	2205      	movs	r2, #5
 800d010:	f7fa fb5c 	bl	80076cc <rmw_uxrce_init_subscription_memory>
 800d014:	4956      	ldr	r1, [pc, #344]	@ (800d170 <rmw_init+0x224>)
 800d016:	4857      	ldr	r0, [pc, #348]	@ (800d174 <rmw_init+0x228>)
 800d018:	220a      	movs	r2, #10
 800d01a:	f7fa fb37 	bl	800768c <rmw_uxrce_init_publisher_memory>
 800d01e:	4956      	ldr	r1, [pc, #344]	@ (800d178 <rmw_init+0x22c>)
 800d020:	4856      	ldr	r0, [pc, #344]	@ (800d17c <rmw_init+0x230>)
 800d022:	2201      	movs	r2, #1
 800d024:	f7fa faf2 	bl	800760c <rmw_uxrce_init_service_memory>
 800d028:	4955      	ldr	r1, [pc, #340]	@ (800d180 <rmw_init+0x234>)
 800d02a:	4856      	ldr	r0, [pc, #344]	@ (800d184 <rmw_init+0x238>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	f7fa fb0d 	bl	800764c <rmw_uxrce_init_client_memory>
 800d032:	4955      	ldr	r1, [pc, #340]	@ (800d188 <rmw_init+0x23c>)
 800d034:	4855      	ldr	r0, [pc, #340]	@ (800d18c <rmw_init+0x240>)
 800d036:	220f      	movs	r2, #15
 800d038:	f7fa fba8 	bl	800778c <rmw_uxrce_init_topic_memory>
 800d03c:	4954      	ldr	r1, [pc, #336]	@ (800d190 <rmw_init+0x244>)
 800d03e:	4855      	ldr	r0, [pc, #340]	@ (800d194 <rmw_init+0x248>)
 800d040:	2203      	movs	r2, #3
 800d042:	f7fa fbe3 	bl	800780c <rmw_uxrce_init_init_options_impl_memory>
 800d046:	4954      	ldr	r1, [pc, #336]	@ (800d198 <rmw_init+0x24c>)
 800d048:	4854      	ldr	r0, [pc, #336]	@ (800d19c <rmw_init+0x250>)
 800d04a:	2204      	movs	r2, #4
 800d04c:	f7fa fbfe 	bl	800784c <rmw_uxrce_init_wait_set_memory>
 800d050:	4953      	ldr	r1, [pc, #332]	@ (800d1a0 <rmw_init+0x254>)
 800d052:	4854      	ldr	r0, [pc, #336]	@ (800d1a4 <rmw_init+0x258>)
 800d054:	2204      	movs	r2, #4
 800d056:	f7fa fc19 	bl	800788c <rmw_uxrce_init_guard_condition_memory>
 800d05a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d05c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d05e:	4642      	mov	r2, r8
 800d060:	f000 fb06 	bl	800d670 <rmw_uxrce_transport_init>
 800d064:	4607      	mov	r7, r0
 800d066:	2800      	cmp	r0, #0
 800d068:	d158      	bne.n	800d11c <rmw_init+0x1d0>
 800d06a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d06c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d070:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d072:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d076:	4628      	mov	r0, r5
 800d078:	f7fc f84e 	bl	8009118 <uxr_init_session>
 800d07c:	494a      	ldr	r1, [pc, #296]	@ (800d1a8 <rmw_init+0x25c>)
 800d07e:	4622      	mov	r2, r4
 800d080:	4628      	mov	r0, r5
 800d082:	f7fc f86d 	bl	8009160 <uxr_set_topic_callback>
 800d086:	4949      	ldr	r1, [pc, #292]	@ (800d1ac <rmw_init+0x260>)
 800d088:	463a      	mov	r2, r7
 800d08a:	4628      	mov	r0, r5
 800d08c:	f7fc f864 	bl	8009158 <uxr_set_status_callback>
 800d090:	4947      	ldr	r1, [pc, #284]	@ (800d1b0 <rmw_init+0x264>)
 800d092:	463a      	mov	r2, r7
 800d094:	4628      	mov	r0, r5
 800d096:	f7fc f867 	bl	8009168 <uxr_set_request_callback>
 800d09a:	4946      	ldr	r1, [pc, #280]	@ (800d1b4 <rmw_init+0x268>)
 800d09c:	463a      	mov	r2, r7
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f7fc f866 	bl	8009170 <uxr_set_reply_callback>
 800d0a4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d0a8:	2304      	movs	r3, #4
 800d0aa:	0092      	lsls	r2, r2, #2
 800d0ac:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	f7fc f89b 	bl	80091ec <uxr_create_input_reliable_stream>
 800d0b6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d0ba:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d0be:	0092      	lsls	r2, r2, #2
 800d0c0:	2304      	movs	r3, #4
 800d0c2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	f7fc f868 	bl	800919c <uxr_create_output_reliable_stream>
 800d0cc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	f7fc f885 	bl	80091e0 <uxr_create_input_best_effort_stream>
 800d0d6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d0da:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d0de:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d0e2:	3114      	adds	r1, #20
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f7fc f847 	bl	8009178 <uxr_create_output_best_effort_stream>
 800d0ea:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f7fc fd98 	bl	8009c24 <uxr_create_session>
 800d0f4:	b1f8      	cbz	r0, 800d136 <rmw_init+0x1ea>
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	b003      	add	sp, #12
 800d0fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0fe:	270b      	movs	r7, #11
 800d100:	4638      	mov	r0, r7
 800d102:	b003      	add	sp, #12
 800d104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d108:	2701      	movs	r7, #1
 800d10a:	4638      	mov	r0, r7
 800d10c:	b003      	add	sp, #12
 800d10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d112:	270c      	movs	r7, #12
 800d114:	4638      	mov	r0, r7
 800d116:	b003      	add	sp, #12
 800d118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d11c:	4648      	mov	r0, r9
 800d11e:	f000 fd5b 	bl	800dbd8 <uxr_close_custom_transport>
 800d122:	480d      	ldr	r0, [pc, #52]	@ (800d158 <rmw_init+0x20c>)
 800d124:	4621      	mov	r1, r4
 800d126:	f7ff fdff 	bl	800cd28 <put_memory>
 800d12a:	4638      	mov	r0, r7
 800d12c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d130:	b003      	add	sp, #12
 800d132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d136:	4648      	mov	r0, r9
 800d138:	f000 fd4e 	bl	800dbd8 <uxr_close_custom_transport>
 800d13c:	4806      	ldr	r0, [pc, #24]	@ (800d158 <rmw_init+0x20c>)
 800d13e:	4621      	mov	r1, r4
 800d140:	f7ff fdf2 	bl	800cd28 <put_memory>
 800d144:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d146:	2701      	movs	r7, #1
 800d148:	e7d5      	b.n	800d0f6 <rmw_init+0x1aa>
 800d14a:	bf00      	nop
 800d14c:	08011954 	.word	0x08011954
 800d150:	2000d974 	.word	0x2000d974
 800d154:	20009c20 	.word	0x20009c20
 800d158:	2000d964 	.word	0x2000d964
 800d15c:	2000b1c8 	.word	0x2000b1c8
 800d160:	20009244 	.word	0x20009244
 800d164:	2000d934 	.word	0x2000d934
 800d168:	2000d2c8 	.word	0x2000d2c8
 800d16c:	2000d984 	.word	0x2000d984
 800d170:	200092e8 	.word	0x200092e8
 800d174:	2000d944 	.word	0x2000d944
 800d178:	20009b58 	.word	0x20009b58
 800d17c:	2000d954 	.word	0x2000d954
 800d180:	20009078 	.word	0x20009078
 800d184:	20009068 	.word	0x20009068
 800d188:	2000d700 	.word	0x2000d700
 800d18c:	2000d994 	.word	0x2000d994
 800d190:	200091c0 	.word	0x200091c0
 800d194:	2000d924 	.word	0x2000d924
 800d198:	2000d8a4 	.word	0x2000d8a4
 800d19c:	2000d9a4 	.word	0x2000d9a4
 800d1a0:	20009140 	.word	0x20009140
 800d1a4:	2000d914 	.word	0x2000d914
 800d1a8:	0800f7f5 	.word	0x0800f7f5
 800d1ac:	0800f7ed 	.word	0x0800f7ed
 800d1b0:	0800f88d 	.word	0x0800f88d
 800d1b4:	0800f929 	.word	0x0800f929

0800d1b8 <rmw_context_fini>:
 800d1b8:	4b17      	ldr	r3, [pc, #92]	@ (800d218 <rmw_context_fini+0x60>)
 800d1ba:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	681c      	ldr	r4, [r3, #0]
 800d1c0:	4605      	mov	r5, r0
 800d1c2:	b334      	cbz	r4, 800d212 <rmw_context_fini+0x5a>
 800d1c4:	2600      	movs	r6, #0
 800d1c6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d1ca:	6902      	ldr	r2, [r0, #16]
 800d1cc:	428a      	cmp	r2, r1
 800d1ce:	d018      	beq.n	800d202 <rmw_context_fini+0x4a>
 800d1d0:	2c00      	cmp	r4, #0
 800d1d2:	d1f8      	bne.n	800d1c6 <rmw_context_fini+0xe>
 800d1d4:	b189      	cbz	r1, 800d1fa <rmw_context_fini+0x42>
 800d1d6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d1da:	789b      	ldrb	r3, [r3, #2]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d1e2:	bf14      	ite	ne
 800d1e4:	210a      	movne	r1, #10
 800d1e6:	2100      	moveq	r1, #0
 800d1e8:	f7fc fcf4 	bl	8009bd4 <uxr_delete_session_retries>
 800d1ec:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d1ee:	f7fa fb6d 	bl	80078cc <rmw_uxrce_fini_session_memory>
 800d1f2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d1f4:	3010      	adds	r0, #16
 800d1f6:	f000 fcef 	bl	800dbd8 <uxr_close_custom_transport>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d1fe:	4630      	mov	r0, r6
 800d200:	bd70      	pop	{r4, r5, r6, pc}
 800d202:	3018      	adds	r0, #24
 800d204:	f000 f90e 	bl	800d424 <rmw_destroy_node>
 800d208:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d20a:	4606      	mov	r6, r0
 800d20c:	2c00      	cmp	r4, #0
 800d20e:	d1da      	bne.n	800d1c6 <rmw_context_fini+0xe>
 800d210:	e7e0      	b.n	800d1d4 <rmw_context_fini+0x1c>
 800d212:	4626      	mov	r6, r4
 800d214:	e7de      	b.n	800d1d4 <rmw_context_fini+0x1c>
 800d216:	bf00      	nop
 800d218:	2000d934 	.word	0x2000d934

0800d21c <create_topic>:
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	4605      	mov	r5, r0
 800d222:	b084      	sub	sp, #16
 800d224:	4822      	ldr	r0, [pc, #136]	@ (800d2b0 <create_topic+0x94>)
 800d226:	460f      	mov	r7, r1
 800d228:	4616      	mov	r6, r2
 800d22a:	f7ff fd6d 	bl	800cd08 <get_memory>
 800d22e:	4604      	mov	r4, r0
 800d230:	2800      	cmp	r0, #0
 800d232:	d039      	beq.n	800d2a8 <create_topic+0x8c>
 800d234:	692b      	ldr	r3, [r5, #16]
 800d236:	6884      	ldr	r4, [r0, #8]
 800d238:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 800d2b8 <create_topic+0x9c>
 800d23c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d240:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800d244:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 800d248:	1c42      	adds	r2, r0, #1
 800d24a:	2102      	movs	r1, #2
 800d24c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 800d250:	f7fb fea4 	bl	8008f9c <uxr_object_id>
 800d254:	223c      	movs	r2, #60	@ 0x3c
 800d256:	6120      	str	r0, [r4, #16]
 800d258:	4641      	mov	r1, r8
 800d25a:	4638      	mov	r0, r7
 800d25c:	f7fa fc6e 	bl	8007b3c <generate_topic_name>
 800d260:	b1f0      	cbz	r0, 800d2a0 <create_topic+0x84>
 800d262:	4f14      	ldr	r7, [pc, #80]	@ (800d2b4 <create_topic+0x98>)
 800d264:	4630      	mov	r0, r6
 800d266:	2264      	movs	r2, #100	@ 0x64
 800d268:	4639      	mov	r1, r7
 800d26a:	f7fa fc37 	bl	8007adc <generate_type_name>
 800d26e:	b1b8      	cbz	r0, 800d2a0 <create_topic+0x84>
 800d270:	6928      	ldr	r0, [r5, #16]
 800d272:	2306      	movs	r3, #6
 800d274:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d278:	f8cd 8000 	str.w	r8, [sp]
 800d27c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800d280:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d284:	6811      	ldr	r1, [r2, #0]
 800d286:	696b      	ldr	r3, [r5, #20]
 800d288:	6922      	ldr	r2, [r4, #16]
 800d28a:	f7fb fdab 	bl	8008de4 <uxr_buffer_create_topic_bin>
 800d28e:	4602      	mov	r2, r0
 800d290:	6928      	ldr	r0, [r5, #16]
 800d292:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d296:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d29a:	f7fa fbe9 	bl	8007a70 <run_xrce_session>
 800d29e:	b918      	cbnz	r0, 800d2a8 <create_topic+0x8c>
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f7fa fb89 	bl	80079b8 <rmw_uxrce_fini_topic_memory>
 800d2a6:	2400      	movs	r4, #0
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	b004      	add	sp, #16
 800d2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b0:	2000d994 	.word	0x2000d994
 800d2b4:	2000da10 	.word	0x2000da10
 800d2b8:	2000d9d4 	.word	0x2000d9d4

0800d2bc <destroy_topic>:
 800d2bc:	b538      	push	{r3, r4, r5, lr}
 800d2be:	6985      	ldr	r5, [r0, #24]
 800d2c0:	b1d5      	cbz	r5, 800d2f8 <destroy_topic+0x3c>
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	6928      	ldr	r0, [r5, #16]
 800d2c6:	6922      	ldr	r2, [r4, #16]
 800d2c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d2cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d2d0:	6819      	ldr	r1, [r3, #0]
 800d2d2:	f7fb fd09 	bl	8008ce8 <uxr_buffer_delete_entity>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	6928      	ldr	r0, [r5, #16]
 800d2da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d2de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d2e2:	f7fa fbc5 	bl	8007a70 <run_xrce_session>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	bf14      	ite	ne
 800d2ec:	2400      	movne	r4, #0
 800d2ee:	2402      	moveq	r4, #2
 800d2f0:	f7fa fb62 	bl	80079b8 <rmw_uxrce_fini_topic_memory>
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	2401      	movs	r4, #1
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	bd38      	pop	{r3, r4, r5, pc}
 800d2fe:	bf00      	nop

0800d300 <create_node>:
 800d300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d304:	b083      	sub	sp, #12
 800d306:	2b00      	cmp	r3, #0
 800d308:	d05f      	beq.n	800d3ca <create_node+0xca>
 800d30a:	4606      	mov	r6, r0
 800d30c:	4835      	ldr	r0, [pc, #212]	@ (800d3e4 <create_node+0xe4>)
 800d30e:	460f      	mov	r7, r1
 800d310:	4690      	mov	r8, r2
 800d312:	461d      	mov	r5, r3
 800d314:	f7ff fcf8 	bl	800cd08 <get_memory>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d056      	beq.n	800d3ca <create_node+0xca>
 800d31c:	6884      	ldr	r4, [r0, #8]
 800d31e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d320:	6123      	str	r3, [r4, #16]
 800d322:	f7ff fd15 	bl	800cd50 <rmw_get_implementation_identifier>
 800d326:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d32a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d32e:	f8c4 9020 	str.w	r9, [r4, #32]
 800d332:	4630      	mov	r0, r6
 800d334:	f7f2 ff5e 	bl	80001f4 <strlen>
 800d338:	1c42      	adds	r2, r0, #1
 800d33a:	2a3c      	cmp	r2, #60	@ 0x3c
 800d33c:	f104 0518 	add.w	r5, r4, #24
 800d340:	d840      	bhi.n	800d3c4 <create_node+0xc4>
 800d342:	4648      	mov	r0, r9
 800d344:	4631      	mov	r1, r6
 800d346:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d34a:	f003 f82c 	bl	80103a6 <memcpy>
 800d34e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d352:	4638      	mov	r0, r7
 800d354:	f7f2 ff4e 	bl	80001f4 <strlen>
 800d358:	1c42      	adds	r2, r0, #1
 800d35a:	2a3c      	cmp	r2, #60	@ 0x3c
 800d35c:	d832      	bhi.n	800d3c4 <create_node+0xc4>
 800d35e:	4639      	mov	r1, r7
 800d360:	4648      	mov	r0, r9
 800d362:	f003 f820 	bl	80103a6 <memcpy>
 800d366:	6923      	ldr	r3, [r4, #16]
 800d368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d36c:	2101      	movs	r1, #1
 800d36e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d372:	1842      	adds	r2, r0, r1
 800d374:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d378:	f7fb fe10 	bl	8008f9c <uxr_object_id>
 800d37c:	6160      	str	r0, [r4, #20]
 800d37e:	783b      	ldrb	r3, [r7, #0]
 800d380:	2b2f      	cmp	r3, #47	@ 0x2f
 800d382:	d127      	bne.n	800d3d4 <create_node+0xd4>
 800d384:	787b      	ldrb	r3, [r7, #1]
 800d386:	bb2b      	cbnz	r3, 800d3d4 <create_node+0xd4>
 800d388:	4a17      	ldr	r2, [pc, #92]	@ (800d3e8 <create_node+0xe8>)
 800d38a:	4818      	ldr	r0, [pc, #96]	@ (800d3ec <create_node+0xec>)
 800d38c:	4633      	mov	r3, r6
 800d38e:	213c      	movs	r1, #60	@ 0x3c
 800d390:	f002 fe90 	bl	80100b4 <sniprintf>
 800d394:	6920      	ldr	r0, [r4, #16]
 800d396:	4915      	ldr	r1, [pc, #84]	@ (800d3ec <create_node+0xec>)
 800d398:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d39c:	9100      	str	r1, [sp, #0]
 800d39e:	2106      	movs	r1, #6
 800d3a0:	9101      	str	r1, [sp, #4]
 800d3a2:	6811      	ldr	r1, [r2, #0]
 800d3a4:	6962      	ldr	r2, [r4, #20]
 800d3a6:	fa1f f388 	uxth.w	r3, r8
 800d3aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d3ae:	f7fb fce7 	bl	8008d80 <uxr_buffer_create_participant_bin>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	6920      	ldr	r0, [r4, #16]
 800d3b6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d3ba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d3be:	f7fa fb57 	bl	8007a70 <run_xrce_session>
 800d3c2:	b918      	cbnz	r0, 800d3cc <create_node+0xcc>
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	f7fa fa87 	bl	80078d8 <rmw_uxrce_fini_node_memory>
 800d3ca:	2500      	movs	r5, #0
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	b003      	add	sp, #12
 800d3d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d4:	4a06      	ldr	r2, [pc, #24]	@ (800d3f0 <create_node+0xf0>)
 800d3d6:	9600      	str	r6, [sp, #0]
 800d3d8:	463b      	mov	r3, r7
 800d3da:	213c      	movs	r1, #60	@ 0x3c
 800d3dc:	4803      	ldr	r0, [pc, #12]	@ (800d3ec <create_node+0xec>)
 800d3de:	f002 fe69 	bl	80100b4 <sniprintf>
 800d3e2:	e7d7      	b.n	800d394 <create_node+0x94>
 800d3e4:	2000d934 	.word	0x2000d934
 800d3e8:	0801136c 	.word	0x0801136c
 800d3ec:	2000da74 	.word	0x2000da74
 800d3f0:	080114fc 	.word	0x080114fc

0800d3f4 <rmw_create_node>:
 800d3f4:	b199      	cbz	r1, 800d41e <rmw_create_node+0x2a>
 800d3f6:	780b      	ldrb	r3, [r1, #0]
 800d3f8:	468c      	mov	ip, r1
 800d3fa:	b183      	cbz	r3, 800d41e <rmw_create_node+0x2a>
 800d3fc:	b410      	push	{r4}
 800d3fe:	4614      	mov	r4, r2
 800d400:	b14a      	cbz	r2, 800d416 <rmw_create_node+0x22>
 800d402:	7813      	ldrb	r3, [r2, #0]
 800d404:	b13b      	cbz	r3, 800d416 <rmw_create_node+0x22>
 800d406:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800d408:	4603      	mov	r3, r0
 800d40a:	4621      	mov	r1, r4
 800d40c:	4660      	mov	r0, ip
 800d40e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d412:	f7ff bf75 	b.w	800d300 <create_node>
 800d416:	2000      	movs	r0, #0
 800d418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d41c:	4770      	bx	lr
 800d41e:	2000      	movs	r0, #0
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop

0800d424 <rmw_destroy_node>:
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	b328      	cbz	r0, 800d474 <rmw_destroy_node+0x50>
 800d428:	4607      	mov	r7, r0
 800d42a:	6800      	ldr	r0, [r0, #0]
 800d42c:	b120      	cbz	r0, 800d438 <rmw_destroy_node+0x14>
 800d42e:	4b36      	ldr	r3, [pc, #216]	@ (800d508 <rmw_destroy_node+0xe4>)
 800d430:	6819      	ldr	r1, [r3, #0]
 800d432:	f7f2 fed5 	bl	80001e0 <strcmp>
 800d436:	b9e8      	cbnz	r0, 800d474 <rmw_destroy_node+0x50>
 800d438:	687d      	ldr	r5, [r7, #4]
 800d43a:	b1dd      	cbz	r5, 800d474 <rmw_destroy_node+0x50>
 800d43c:	4b33      	ldr	r3, [pc, #204]	@ (800d50c <rmw_destroy_node+0xe8>)
 800d43e:	681c      	ldr	r4, [r3, #0]
 800d440:	2c00      	cmp	r4, #0
 800d442:	d05f      	beq.n	800d504 <rmw_destroy_node+0xe0>
 800d444:	2600      	movs	r6, #0
 800d446:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d44a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800d44e:	429d      	cmp	r5, r3
 800d450:	d013      	beq.n	800d47a <rmw_destroy_node+0x56>
 800d452:	2c00      	cmp	r4, #0
 800d454:	d1f7      	bne.n	800d446 <rmw_destroy_node+0x22>
 800d456:	4b2e      	ldr	r3, [pc, #184]	@ (800d510 <rmw_destroy_node+0xec>)
 800d458:	681c      	ldr	r4, [r3, #0]
 800d45a:	b1c4      	cbz	r4, 800d48e <rmw_destroy_node+0x6a>
 800d45c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d460:	6a0b      	ldr	r3, [r1, #32]
 800d462:	429d      	cmp	r5, r3
 800d464:	d1f9      	bne.n	800d45a <rmw_destroy_node+0x36>
 800d466:	317c      	adds	r1, #124	@ 0x7c
 800d468:	4638      	mov	r0, r7
 800d46a:	f000 f8a1 	bl	800d5b0 <rmw_destroy_subscription>
 800d46e:	2801      	cmp	r0, #1
 800d470:	4606      	mov	r6, r0
 800d472:	d1f2      	bne.n	800d45a <rmw_destroy_node+0x36>
 800d474:	2601      	movs	r6, #1
 800d476:	4630      	mov	r0, r6
 800d478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d47a:	3184      	adds	r1, #132	@ 0x84
 800d47c:	4638      	mov	r0, r7
 800d47e:	f7fa f873 	bl	8007568 <rmw_destroy_publisher>
 800d482:	2801      	cmp	r0, #1
 800d484:	4606      	mov	r6, r0
 800d486:	d0f5      	beq.n	800d474 <rmw_destroy_node+0x50>
 800d488:	2c00      	cmp	r4, #0
 800d48a:	d1dc      	bne.n	800d446 <rmw_destroy_node+0x22>
 800d48c:	e7e3      	b.n	800d456 <rmw_destroy_node+0x32>
 800d48e:	4b21      	ldr	r3, [pc, #132]	@ (800d514 <rmw_destroy_node+0xf0>)
 800d490:	681c      	ldr	r4, [r3, #0]
 800d492:	b16c      	cbz	r4, 800d4b0 <rmw_destroy_node+0x8c>
 800d494:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d498:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d49a:	429d      	cmp	r5, r3
 800d49c:	d1f9      	bne.n	800d492 <rmw_destroy_node+0x6e>
 800d49e:	317c      	adds	r1, #124	@ 0x7c
 800d4a0:	4638      	mov	r0, r7
 800d4a2:	f000 f841 	bl	800d528 <rmw_destroy_service>
 800d4a6:	2801      	cmp	r0, #1
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	d0e3      	beq.n	800d474 <rmw_destroy_node+0x50>
 800d4ac:	2c00      	cmp	r4, #0
 800d4ae:	d1f1      	bne.n	800d494 <rmw_destroy_node+0x70>
 800d4b0:	4b19      	ldr	r3, [pc, #100]	@ (800d518 <rmw_destroy_node+0xf4>)
 800d4b2:	681c      	ldr	r4, [r3, #0]
 800d4b4:	b16c      	cbz	r4, 800d4d2 <rmw_destroy_node+0xae>
 800d4b6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d4ba:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d4bc:	429d      	cmp	r5, r3
 800d4be:	d1f9      	bne.n	800d4b4 <rmw_destroy_node+0x90>
 800d4c0:	317c      	adds	r1, #124	@ 0x7c
 800d4c2:	4638      	mov	r0, r7
 800d4c4:	f002 fa7a 	bl	800f9bc <rmw_destroy_client>
 800d4c8:	2801      	cmp	r0, #1
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	d0d2      	beq.n	800d474 <rmw_destroy_node+0x50>
 800d4ce:	2c00      	cmp	r4, #0
 800d4d0:	d1f1      	bne.n	800d4b6 <rmw_destroy_node+0x92>
 800d4d2:	6928      	ldr	r0, [r5, #16]
 800d4d4:	696a      	ldr	r2, [r5, #20]
 800d4d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d4da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d4de:	6819      	ldr	r1, [r3, #0]
 800d4e0:	f7fb fc02 	bl	8008ce8 <uxr_buffer_delete_entity>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	6928      	ldr	r0, [r5, #16]
 800d4e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d4ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d4f0:	f7fa fabe 	bl	8007a70 <run_xrce_session>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	bf08      	it	eq
 800d4f8:	2602      	moveq	r6, #2
 800d4fa:	4638      	mov	r0, r7
 800d4fc:	f7fa f9ec 	bl	80078d8 <rmw_uxrce_fini_node_memory>
 800d500:	4630      	mov	r0, r6
 800d502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d504:	4626      	mov	r6, r4
 800d506:	e7a6      	b.n	800d456 <rmw_destroy_node+0x32>
 800d508:	08011954 	.word	0x08011954
 800d50c:	2000d944 	.word	0x2000d944
 800d510:	2000d984 	.word	0x2000d984
 800d514:	2000d954 	.word	0x2000d954
 800d518:	20009068 	.word	0x20009068

0800d51c <rmw_node_get_graph_guard_condition>:
 800d51c:	6843      	ldr	r3, [r0, #4]
 800d51e:	6918      	ldr	r0, [r3, #16]
 800d520:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop

0800d528 <rmw_destroy_service>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	b128      	cbz	r0, 800d538 <rmw_destroy_service+0x10>
 800d52c:	4604      	mov	r4, r0
 800d52e:	6800      	ldr	r0, [r0, #0]
 800d530:	460d      	mov	r5, r1
 800d532:	f7fa fb1d 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 800d536:	b910      	cbnz	r0, 800d53e <rmw_destroy_service+0x16>
 800d538:	2401      	movs	r4, #1
 800d53a:	4620      	mov	r0, r4
 800d53c:	bd70      	pop	{r4, r5, r6, pc}
 800d53e:	6863      	ldr	r3, [r4, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d0f9      	beq.n	800d538 <rmw_destroy_service+0x10>
 800d544:	2d00      	cmp	r5, #0
 800d546:	d0f7      	beq.n	800d538 <rmw_destroy_service+0x10>
 800d548:	6828      	ldr	r0, [r5, #0]
 800d54a:	f7fa fb11 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d0f2      	beq.n	800d538 <rmw_destroy_service+0x10>
 800d552:	686e      	ldr	r6, [r5, #4]
 800d554:	2e00      	cmp	r6, #0
 800d556:	d0ef      	beq.n	800d538 <rmw_destroy_service+0x10>
 800d558:	6864      	ldr	r4, [r4, #4]
 800d55a:	6932      	ldr	r2, [r6, #16]
 800d55c:	6920      	ldr	r0, [r4, #16]
 800d55e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d562:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d566:	6819      	ldr	r1, [r3, #0]
 800d568:	f001 f882 	bl	800e670 <uxr_buffer_cancel_data>
 800d56c:	4602      	mov	r2, r0
 800d56e:	6920      	ldr	r0, [r4, #16]
 800d570:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d574:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d578:	f7fa fa7a 	bl	8007a70 <run_xrce_session>
 800d57c:	6920      	ldr	r0, [r4, #16]
 800d57e:	6932      	ldr	r2, [r6, #16]
 800d580:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d584:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d588:	6819      	ldr	r1, [r3, #0]
 800d58a:	f7fb fbad 	bl	8008ce8 <uxr_buffer_delete_entity>
 800d58e:	4602      	mov	r2, r0
 800d590:	6920      	ldr	r0, [r4, #16]
 800d592:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d596:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d59a:	f7fa fa69 	bl	8007a70 <run_xrce_session>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	bf14      	ite	ne
 800d5a4:	2400      	movne	r4, #0
 800d5a6:	2402      	moveq	r4, #2
 800d5a8:	f7fa f9da 	bl	8007960 <rmw_uxrce_fini_service_memory>
 800d5ac:	e7c5      	b.n	800d53a <rmw_destroy_service+0x12>
 800d5ae:	bf00      	nop

0800d5b0 <rmw_destroy_subscription>:
 800d5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b2:	b128      	cbz	r0, 800d5c0 <rmw_destroy_subscription+0x10>
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	6800      	ldr	r0, [r0, #0]
 800d5b8:	460d      	mov	r5, r1
 800d5ba:	f7fa fad9 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 800d5be:	b910      	cbnz	r0, 800d5c6 <rmw_destroy_subscription+0x16>
 800d5c0:	2401      	movs	r4, #1
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c6:	6863      	ldr	r3, [r4, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d0f9      	beq.n	800d5c0 <rmw_destroy_subscription+0x10>
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	d0f7      	beq.n	800d5c0 <rmw_destroy_subscription+0x10>
 800d5d0:	6828      	ldr	r0, [r5, #0]
 800d5d2:	f7fa facd 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d0f2      	beq.n	800d5c0 <rmw_destroy_subscription+0x10>
 800d5da:	686c      	ldr	r4, [r5, #4]
 800d5dc:	2c00      	cmp	r4, #0
 800d5de:	d0ef      	beq.n	800d5c0 <rmw_destroy_subscription+0x10>
 800d5e0:	6a26      	ldr	r6, [r4, #32]
 800d5e2:	6962      	ldr	r2, [r4, #20]
 800d5e4:	6930      	ldr	r0, [r6, #16]
 800d5e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d5ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d5ee:	6819      	ldr	r1, [r3, #0]
 800d5f0:	f001 f83e 	bl	800e670 <uxr_buffer_cancel_data>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	6930      	ldr	r0, [r6, #16]
 800d5f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d5fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d600:	f7fa fa36 	bl	8007a70 <run_xrce_session>
 800d604:	69e0      	ldr	r0, [r4, #28]
 800d606:	f7ff fe59 	bl	800d2bc <destroy_topic>
 800d60a:	6a23      	ldr	r3, [r4, #32]
 800d60c:	6962      	ldr	r2, [r4, #20]
 800d60e:	6918      	ldr	r0, [r3, #16]
 800d610:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d614:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d618:	6819      	ldr	r1, [r3, #0]
 800d61a:	f7fb fb65 	bl	8008ce8 <uxr_buffer_delete_entity>
 800d61e:	6a23      	ldr	r3, [r4, #32]
 800d620:	6922      	ldr	r2, [r4, #16]
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800d628:	4604      	mov	r4, r0
 800d62a:	6809      	ldr	r1, [r1, #0]
 800d62c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d630:	f7fb fb5a 	bl	8008ce8 <uxr_buffer_delete_entity>
 800d634:	6937      	ldr	r7, [r6, #16]
 800d636:	4622      	mov	r2, r4
 800d638:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800d63c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800d640:	4604      	mov	r4, r0
 800d642:	4638      	mov	r0, r7
 800d644:	f7fa fa14 	bl	8007a70 <run_xrce_session>
 800d648:	6936      	ldr	r6, [r6, #16]
 800d64a:	4622      	mov	r2, r4
 800d64c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d650:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d654:	4604      	mov	r4, r0
 800d656:	4630      	mov	r0, r6
 800d658:	f7fa fa0a 	bl	8007a70 <run_xrce_session>
 800d65c:	b12c      	cbz	r4, 800d66a <rmw_destroy_subscription+0xba>
 800d65e:	b120      	cbz	r0, 800d66a <rmw_destroy_subscription+0xba>
 800d660:	2400      	movs	r4, #0
 800d662:	4628      	mov	r0, r5
 800d664:	f7fa f966 	bl	8007934 <rmw_uxrce_fini_subscription_memory>
 800d668:	e7ab      	b.n	800d5c2 <rmw_destroy_subscription+0x12>
 800d66a:	2402      	movs	r4, #2
 800d66c:	e7f9      	b.n	800d662 <rmw_destroy_subscription+0xb2>
 800d66e:	bf00      	nop

0800d670 <rmw_uxrce_transport_init>:
 800d670:	b508      	push	{r3, lr}
 800d672:	b108      	cbz	r0, 800d678 <rmw_uxrce_transport_init+0x8>
 800d674:	f100 0210 	add.w	r2, r0, #16
 800d678:	b139      	cbz	r1, 800d68a <rmw_uxrce_transport_init+0x1a>
 800d67a:	6949      	ldr	r1, [r1, #20]
 800d67c:	4610      	mov	r0, r2
 800d67e:	f000 fa77 	bl	800db70 <uxr_init_custom_transport>
 800d682:	f080 0001 	eor.w	r0, r0, #1
 800d686:	b2c0      	uxtb	r0, r0
 800d688:	bd08      	pop	{r3, pc}
 800d68a:	4b04      	ldr	r3, [pc, #16]	@ (800d69c <rmw_uxrce_transport_init+0x2c>)
 800d68c:	4610      	mov	r0, r2
 800d68e:	6859      	ldr	r1, [r3, #4]
 800d690:	f000 fa6e 	bl	800db70 <uxr_init_custom_transport>
 800d694:	f080 0001 	eor.w	r0, r0, #1
 800d698:	b2c0      	uxtb	r0, r0
 800d69a:	bd08      	pop	{r3, pc}
 800d69c:	2000904c 	.word	0x2000904c

0800d6a0 <rmw_uros_epoch_nanos>:
 800d6a0:	4b05      	ldr	r3, [pc, #20]	@ (800d6b8 <rmw_uros_epoch_nanos+0x18>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	b123      	cbz	r3, 800d6b0 <rmw_uros_epoch_nanos+0x10>
 800d6a6:	6898      	ldr	r0, [r3, #8]
 800d6a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d6ac:	f7fb bdba 	b.w	8009224 <uxr_epoch_nanos>
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	2000d964 	.word	0x2000d964

0800d6bc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800d6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c0:	6805      	ldr	r5, [r0, #0]
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	460e      	mov	r6, r1
 800d6c8:	f7f2 fd8a 	bl	80001e0 <strcmp>
 800d6cc:	b1c8      	cbz	r0, 800d702 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800d6ce:	4b11      	ldr	r3, [pc, #68]	@ (800d714 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	429d      	cmp	r5, r3
 800d6d4:	d112      	bne.n	800d6fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d6d6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d6da:	f8d8 4000 	ldr.w	r4, [r8]
 800d6de:	b16c      	cbz	r4, 800d6fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d6e0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d6e4:	2700      	movs	r7, #0
 800d6e6:	3d04      	subs	r5, #4
 800d6e8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800d6ec:	4631      	mov	r1, r6
 800d6ee:	f7f2 fd77 	bl	80001e0 <strcmp>
 800d6f2:	00bb      	lsls	r3, r7, #2
 800d6f4:	b140      	cbz	r0, 800d708 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800d6f6:	3701      	adds	r7, #1
 800d6f8:	42bc      	cmp	r4, r7
 800d6fa:	d1f5      	bne.n	800d6e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d702:	4620      	mov	r0, r4
 800d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d708:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d70c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d710:	58d3      	ldr	r3, [r2, r3]
 800d712:	4718      	bx	r3
 800d714:	200000ac 	.word	0x200000ac

0800d718 <std_msgs__msg__Int32__init>:
 800d718:	3800      	subs	r0, #0
 800d71a:	bf18      	it	ne
 800d71c:	2001      	movne	r0, #1
 800d71e:	4770      	bx	lr

0800d720 <std_msgs__msg__Int32__fini>:
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop

0800d724 <ucdr_serialize_endian_array_char>:
 800d724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d728:	4619      	mov	r1, r3
 800d72a:	461f      	mov	r7, r3
 800d72c:	4605      	mov	r5, r0
 800d72e:	4690      	mov	r8, r2
 800d730:	f7fb fa16 	bl	8008b60 <ucdr_check_buffer_available_for>
 800d734:	b9e0      	cbnz	r0, 800d770 <ucdr_serialize_endian_array_char+0x4c>
 800d736:	463e      	mov	r6, r7
 800d738:	e009      	b.n	800d74e <ucdr_serialize_endian_array_char+0x2a>
 800d73a:	68a8      	ldr	r0, [r5, #8]
 800d73c:	f002 fe33 	bl	80103a6 <memcpy>
 800d740:	68ab      	ldr	r3, [r5, #8]
 800d742:	6928      	ldr	r0, [r5, #16]
 800d744:	4423      	add	r3, r4
 800d746:	4420      	add	r0, r4
 800d748:	1b36      	subs	r6, r6, r4
 800d74a:	60ab      	str	r3, [r5, #8]
 800d74c:	6128      	str	r0, [r5, #16]
 800d74e:	4631      	mov	r1, r6
 800d750:	2201      	movs	r2, #1
 800d752:	4628      	mov	r0, r5
 800d754:	f7fb fa8c 	bl	8008c70 <ucdr_check_final_buffer_behavior_array>
 800d758:	1bb9      	subs	r1, r7, r6
 800d75a:	4441      	add	r1, r8
 800d75c:	4604      	mov	r4, r0
 800d75e:	4602      	mov	r2, r0
 800d760:	2800      	cmp	r0, #0
 800d762:	d1ea      	bne.n	800d73a <ucdr_serialize_endian_array_char+0x16>
 800d764:	2301      	movs	r3, #1
 800d766:	7da8      	ldrb	r0, [r5, #22]
 800d768:	756b      	strb	r3, [r5, #21]
 800d76a:	4058      	eors	r0, r3
 800d76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d770:	463a      	mov	r2, r7
 800d772:	68a8      	ldr	r0, [r5, #8]
 800d774:	4641      	mov	r1, r8
 800d776:	f002 fe16 	bl	80103a6 <memcpy>
 800d77a:	68aa      	ldr	r2, [r5, #8]
 800d77c:	692b      	ldr	r3, [r5, #16]
 800d77e:	443a      	add	r2, r7
 800d780:	443b      	add	r3, r7
 800d782:	60aa      	str	r2, [r5, #8]
 800d784:	612b      	str	r3, [r5, #16]
 800d786:	e7ed      	b.n	800d764 <ucdr_serialize_endian_array_char+0x40>

0800d788 <ucdr_deserialize_endian_array_char>:
 800d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d78c:	4619      	mov	r1, r3
 800d78e:	461f      	mov	r7, r3
 800d790:	4605      	mov	r5, r0
 800d792:	4690      	mov	r8, r2
 800d794:	f7fb f9e4 	bl	8008b60 <ucdr_check_buffer_available_for>
 800d798:	b9e0      	cbnz	r0, 800d7d4 <ucdr_deserialize_endian_array_char+0x4c>
 800d79a:	463e      	mov	r6, r7
 800d79c:	e009      	b.n	800d7b2 <ucdr_deserialize_endian_array_char+0x2a>
 800d79e:	68a9      	ldr	r1, [r5, #8]
 800d7a0:	f002 fe01 	bl	80103a6 <memcpy>
 800d7a4:	68ab      	ldr	r3, [r5, #8]
 800d7a6:	6928      	ldr	r0, [r5, #16]
 800d7a8:	4423      	add	r3, r4
 800d7aa:	4420      	add	r0, r4
 800d7ac:	1b36      	subs	r6, r6, r4
 800d7ae:	60ab      	str	r3, [r5, #8]
 800d7b0:	6128      	str	r0, [r5, #16]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	f7fb fa5a 	bl	8008c70 <ucdr_check_final_buffer_behavior_array>
 800d7bc:	4604      	mov	r4, r0
 800d7be:	1bb8      	subs	r0, r7, r6
 800d7c0:	4440      	add	r0, r8
 800d7c2:	4622      	mov	r2, r4
 800d7c4:	2c00      	cmp	r4, #0
 800d7c6:	d1ea      	bne.n	800d79e <ucdr_deserialize_endian_array_char+0x16>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	7da8      	ldrb	r0, [r5, #22]
 800d7cc:	756b      	strb	r3, [r5, #21]
 800d7ce:	4058      	eors	r0, r3
 800d7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d4:	463a      	mov	r2, r7
 800d7d6:	68a9      	ldr	r1, [r5, #8]
 800d7d8:	4640      	mov	r0, r8
 800d7da:	f002 fde4 	bl	80103a6 <memcpy>
 800d7de:	68aa      	ldr	r2, [r5, #8]
 800d7e0:	692b      	ldr	r3, [r5, #16]
 800d7e2:	443a      	add	r2, r7
 800d7e4:	443b      	add	r3, r7
 800d7e6:	60aa      	str	r2, [r5, #8]
 800d7e8:	612b      	str	r3, [r5, #16]
 800d7ea:	e7ed      	b.n	800d7c8 <ucdr_deserialize_endian_array_char+0x40>

0800d7ec <ucdr_serialize_array_uint8_t>:
 800d7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f0:	4688      	mov	r8, r1
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	4617      	mov	r7, r2
 800d7f6:	4605      	mov	r5, r0
 800d7f8:	f7fb f9b2 	bl	8008b60 <ucdr_check_buffer_available_for>
 800d7fc:	b9e0      	cbnz	r0, 800d838 <ucdr_serialize_array_uint8_t+0x4c>
 800d7fe:	463e      	mov	r6, r7
 800d800:	e009      	b.n	800d816 <ucdr_serialize_array_uint8_t+0x2a>
 800d802:	68a8      	ldr	r0, [r5, #8]
 800d804:	f002 fdcf 	bl	80103a6 <memcpy>
 800d808:	68aa      	ldr	r2, [r5, #8]
 800d80a:	692b      	ldr	r3, [r5, #16]
 800d80c:	4422      	add	r2, r4
 800d80e:	4423      	add	r3, r4
 800d810:	1b36      	subs	r6, r6, r4
 800d812:	60aa      	str	r2, [r5, #8]
 800d814:	612b      	str	r3, [r5, #16]
 800d816:	4631      	mov	r1, r6
 800d818:	2201      	movs	r2, #1
 800d81a:	4628      	mov	r0, r5
 800d81c:	f7fb fa28 	bl	8008c70 <ucdr_check_final_buffer_behavior_array>
 800d820:	1bb9      	subs	r1, r7, r6
 800d822:	4441      	add	r1, r8
 800d824:	4604      	mov	r4, r0
 800d826:	4602      	mov	r2, r0
 800d828:	2800      	cmp	r0, #0
 800d82a:	d1ea      	bne.n	800d802 <ucdr_serialize_array_uint8_t+0x16>
 800d82c:	2301      	movs	r3, #1
 800d82e:	7da8      	ldrb	r0, [r5, #22]
 800d830:	756b      	strb	r3, [r5, #21]
 800d832:	4058      	eors	r0, r3
 800d834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d838:	463a      	mov	r2, r7
 800d83a:	68a8      	ldr	r0, [r5, #8]
 800d83c:	4641      	mov	r1, r8
 800d83e:	f002 fdb2 	bl	80103a6 <memcpy>
 800d842:	68aa      	ldr	r2, [r5, #8]
 800d844:	692b      	ldr	r3, [r5, #16]
 800d846:	443a      	add	r2, r7
 800d848:	443b      	add	r3, r7
 800d84a:	60aa      	str	r2, [r5, #8]
 800d84c:	612b      	str	r3, [r5, #16]
 800d84e:	e7ed      	b.n	800d82c <ucdr_serialize_array_uint8_t+0x40>

0800d850 <ucdr_serialize_endian_array_uint8_t>:
 800d850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d854:	4619      	mov	r1, r3
 800d856:	461f      	mov	r7, r3
 800d858:	4605      	mov	r5, r0
 800d85a:	4690      	mov	r8, r2
 800d85c:	f7fb f980 	bl	8008b60 <ucdr_check_buffer_available_for>
 800d860:	b9e0      	cbnz	r0, 800d89c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800d862:	463e      	mov	r6, r7
 800d864:	e009      	b.n	800d87a <ucdr_serialize_endian_array_uint8_t+0x2a>
 800d866:	68a8      	ldr	r0, [r5, #8]
 800d868:	f002 fd9d 	bl	80103a6 <memcpy>
 800d86c:	68ab      	ldr	r3, [r5, #8]
 800d86e:	6928      	ldr	r0, [r5, #16]
 800d870:	4423      	add	r3, r4
 800d872:	4420      	add	r0, r4
 800d874:	1b36      	subs	r6, r6, r4
 800d876:	60ab      	str	r3, [r5, #8]
 800d878:	6128      	str	r0, [r5, #16]
 800d87a:	4631      	mov	r1, r6
 800d87c:	2201      	movs	r2, #1
 800d87e:	4628      	mov	r0, r5
 800d880:	f7fb f9f6 	bl	8008c70 <ucdr_check_final_buffer_behavior_array>
 800d884:	1bb9      	subs	r1, r7, r6
 800d886:	4441      	add	r1, r8
 800d888:	4604      	mov	r4, r0
 800d88a:	4602      	mov	r2, r0
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d1ea      	bne.n	800d866 <ucdr_serialize_endian_array_uint8_t+0x16>
 800d890:	2301      	movs	r3, #1
 800d892:	7da8      	ldrb	r0, [r5, #22]
 800d894:	756b      	strb	r3, [r5, #21]
 800d896:	4058      	eors	r0, r3
 800d898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89c:	463a      	mov	r2, r7
 800d89e:	68a8      	ldr	r0, [r5, #8]
 800d8a0:	4641      	mov	r1, r8
 800d8a2:	f002 fd80 	bl	80103a6 <memcpy>
 800d8a6:	68aa      	ldr	r2, [r5, #8]
 800d8a8:	692b      	ldr	r3, [r5, #16]
 800d8aa:	443a      	add	r2, r7
 800d8ac:	443b      	add	r3, r7
 800d8ae:	60aa      	str	r2, [r5, #8]
 800d8b0:	612b      	str	r3, [r5, #16]
 800d8b2:	e7ed      	b.n	800d890 <ucdr_serialize_endian_array_uint8_t+0x40>

0800d8b4 <ucdr_deserialize_array_uint8_t>:
 800d8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b8:	4688      	mov	r8, r1
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	4617      	mov	r7, r2
 800d8be:	4605      	mov	r5, r0
 800d8c0:	f7fb f94e 	bl	8008b60 <ucdr_check_buffer_available_for>
 800d8c4:	b9e0      	cbnz	r0, 800d900 <ucdr_deserialize_array_uint8_t+0x4c>
 800d8c6:	463e      	mov	r6, r7
 800d8c8:	e009      	b.n	800d8de <ucdr_deserialize_array_uint8_t+0x2a>
 800d8ca:	68a9      	ldr	r1, [r5, #8]
 800d8cc:	f002 fd6b 	bl	80103a6 <memcpy>
 800d8d0:	68aa      	ldr	r2, [r5, #8]
 800d8d2:	692b      	ldr	r3, [r5, #16]
 800d8d4:	4422      	add	r2, r4
 800d8d6:	4423      	add	r3, r4
 800d8d8:	1b36      	subs	r6, r6, r4
 800d8da:	60aa      	str	r2, [r5, #8]
 800d8dc:	612b      	str	r3, [r5, #16]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	4631      	mov	r1, r6
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f7fb f9c4 	bl	8008c70 <ucdr_check_final_buffer_behavior_array>
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	1bb8      	subs	r0, r7, r6
 800d8ec:	4440      	add	r0, r8
 800d8ee:	4622      	mov	r2, r4
 800d8f0:	2c00      	cmp	r4, #0
 800d8f2:	d1ea      	bne.n	800d8ca <ucdr_deserialize_array_uint8_t+0x16>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	7da8      	ldrb	r0, [r5, #22]
 800d8f8:	756b      	strb	r3, [r5, #21]
 800d8fa:	4058      	eors	r0, r3
 800d8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d900:	463a      	mov	r2, r7
 800d902:	68a9      	ldr	r1, [r5, #8]
 800d904:	4640      	mov	r0, r8
 800d906:	f002 fd4e 	bl	80103a6 <memcpy>
 800d90a:	68aa      	ldr	r2, [r5, #8]
 800d90c:	692b      	ldr	r3, [r5, #16]
 800d90e:	443a      	add	r2, r7
 800d910:	443b      	add	r3, r7
 800d912:	60aa      	str	r2, [r5, #8]
 800d914:	612b      	str	r3, [r5, #16]
 800d916:	e7ed      	b.n	800d8f4 <ucdr_deserialize_array_uint8_t+0x40>

0800d918 <ucdr_deserialize_endian_array_uint8_t>:
 800d918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d91c:	4619      	mov	r1, r3
 800d91e:	461f      	mov	r7, r3
 800d920:	4605      	mov	r5, r0
 800d922:	4690      	mov	r8, r2
 800d924:	f7fb f91c 	bl	8008b60 <ucdr_check_buffer_available_for>
 800d928:	b9e0      	cbnz	r0, 800d964 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800d92a:	463e      	mov	r6, r7
 800d92c:	e009      	b.n	800d942 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800d92e:	68a9      	ldr	r1, [r5, #8]
 800d930:	f002 fd39 	bl	80103a6 <memcpy>
 800d934:	68ab      	ldr	r3, [r5, #8]
 800d936:	6928      	ldr	r0, [r5, #16]
 800d938:	4423      	add	r3, r4
 800d93a:	4420      	add	r0, r4
 800d93c:	1b36      	subs	r6, r6, r4
 800d93e:	60ab      	str	r3, [r5, #8]
 800d940:	6128      	str	r0, [r5, #16]
 800d942:	2201      	movs	r2, #1
 800d944:	4631      	mov	r1, r6
 800d946:	4628      	mov	r0, r5
 800d948:	f7fb f992 	bl	8008c70 <ucdr_check_final_buffer_behavior_array>
 800d94c:	4604      	mov	r4, r0
 800d94e:	1bb8      	subs	r0, r7, r6
 800d950:	4440      	add	r0, r8
 800d952:	4622      	mov	r2, r4
 800d954:	2c00      	cmp	r4, #0
 800d956:	d1ea      	bne.n	800d92e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800d958:	2301      	movs	r3, #1
 800d95a:	7da8      	ldrb	r0, [r5, #22]
 800d95c:	756b      	strb	r3, [r5, #21]
 800d95e:	4058      	eors	r0, r3
 800d960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d964:	463a      	mov	r2, r7
 800d966:	68a9      	ldr	r1, [r5, #8]
 800d968:	4640      	mov	r0, r8
 800d96a:	f002 fd1c 	bl	80103a6 <memcpy>
 800d96e:	68aa      	ldr	r2, [r5, #8]
 800d970:	692b      	ldr	r3, [r5, #16]
 800d972:	443a      	add	r2, r7
 800d974:	443b      	add	r3, r7
 800d976:	60aa      	str	r2, [r5, #8]
 800d978:	612b      	str	r3, [r5, #16]
 800d97a:	e7ed      	b.n	800d958 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800d97c <ucdr_serialize_sequence_char>:
 800d97c:	b570      	push	{r4, r5, r6, lr}
 800d97e:	4615      	mov	r5, r2
 800d980:	460e      	mov	r6, r1
 800d982:	7d01      	ldrb	r1, [r0, #20]
 800d984:	4604      	mov	r4, r0
 800d986:	f7fa fc41 	bl	800820c <ucdr_serialize_endian_uint32_t>
 800d98a:	b90d      	cbnz	r5, 800d990 <ucdr_serialize_sequence_char+0x14>
 800d98c:	2001      	movs	r0, #1
 800d98e:	bd70      	pop	{r4, r5, r6, pc}
 800d990:	7d21      	ldrb	r1, [r4, #20]
 800d992:	462b      	mov	r3, r5
 800d994:	4632      	mov	r2, r6
 800d996:	4620      	mov	r0, r4
 800d998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d99c:	f7ff bec2 	b.w	800d724 <ucdr_serialize_endian_array_char>

0800d9a0 <ucdr_deserialize_sequence_char>:
 800d9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a4:	461d      	mov	r5, r3
 800d9a6:	4616      	mov	r6, r2
 800d9a8:	460f      	mov	r7, r1
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	7d01      	ldrb	r1, [r0, #20]
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	f7fa fd54 	bl	800845c <ucdr_deserialize_endian_uint32_t>
 800d9b4:	682b      	ldr	r3, [r5, #0]
 800d9b6:	429e      	cmp	r6, r3
 800d9b8:	bf3c      	itt	cc
 800d9ba:	2201      	movcc	r2, #1
 800d9bc:	75a2      	strbcc	r2, [r4, #22]
 800d9be:	b913      	cbnz	r3, 800d9c6 <ucdr_deserialize_sequence_char+0x26>
 800d9c0:	2001      	movs	r0, #1
 800d9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c6:	7d21      	ldrb	r1, [r4, #20]
 800d9c8:	463a      	mov	r2, r7
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d0:	f7ff beda 	b.w	800d788 <ucdr_deserialize_endian_array_char>

0800d9d4 <ucdr_serialize_sequence_uint8_t>:
 800d9d4:	b570      	push	{r4, r5, r6, lr}
 800d9d6:	4615      	mov	r5, r2
 800d9d8:	460e      	mov	r6, r1
 800d9da:	7d01      	ldrb	r1, [r0, #20]
 800d9dc:	4604      	mov	r4, r0
 800d9de:	f7fa fc15 	bl	800820c <ucdr_serialize_endian_uint32_t>
 800d9e2:	b90d      	cbnz	r5, 800d9e8 <ucdr_serialize_sequence_uint8_t+0x14>
 800d9e4:	2001      	movs	r0, #1
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}
 800d9e8:	7d21      	ldrb	r1, [r4, #20]
 800d9ea:	462b      	mov	r3, r5
 800d9ec:	4632      	mov	r2, r6
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d9f4:	f7ff bf2c 	b.w	800d850 <ucdr_serialize_endian_array_uint8_t>

0800d9f8 <ucdr_deserialize_sequence_uint8_t>:
 800d9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fc:	461d      	mov	r5, r3
 800d9fe:	4616      	mov	r6, r2
 800da00:	460f      	mov	r7, r1
 800da02:	461a      	mov	r2, r3
 800da04:	7d01      	ldrb	r1, [r0, #20]
 800da06:	4604      	mov	r4, r0
 800da08:	f7fa fd28 	bl	800845c <ucdr_deserialize_endian_uint32_t>
 800da0c:	682b      	ldr	r3, [r5, #0]
 800da0e:	429e      	cmp	r6, r3
 800da10:	bf3c      	itt	cc
 800da12:	2201      	movcc	r2, #1
 800da14:	75a2      	strbcc	r2, [r4, #22]
 800da16:	b913      	cbnz	r3, 800da1e <ucdr_deserialize_sequence_uint8_t+0x26>
 800da18:	2001      	movs	r0, #1
 800da1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da1e:	7d21      	ldrb	r1, [r4, #20]
 800da20:	463a      	mov	r2, r7
 800da22:	4620      	mov	r0, r4
 800da24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da28:	f7ff bf76 	b.w	800d918 <ucdr_deserialize_endian_array_uint8_t>

0800da2c <ucdr_serialize_string>:
 800da2c:	b510      	push	{r4, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	4604      	mov	r4, r0
 800da32:	4608      	mov	r0, r1
 800da34:	9101      	str	r1, [sp, #4]
 800da36:	f7f2 fbdd 	bl	80001f4 <strlen>
 800da3a:	9901      	ldr	r1, [sp, #4]
 800da3c:	1c42      	adds	r2, r0, #1
 800da3e:	4620      	mov	r0, r4
 800da40:	b002      	add	sp, #8
 800da42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da46:	f7ff bf99 	b.w	800d97c <ucdr_serialize_sequence_char>
 800da4a:	bf00      	nop

0800da4c <ucdr_deserialize_string>:
 800da4c:	b500      	push	{lr}
 800da4e:	b083      	sub	sp, #12
 800da50:	ab01      	add	r3, sp, #4
 800da52:	f7ff ffa5 	bl	800d9a0 <ucdr_deserialize_sequence_char>
 800da56:	b003      	add	sp, #12
 800da58:	f85d fb04 	ldr.w	pc, [sp], #4

0800da5c <get_custom_error>:
 800da5c:	4b01      	ldr	r3, [pc, #4]	@ (800da64 <get_custom_error+0x8>)
 800da5e:	7818      	ldrb	r0, [r3, #0]
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	2000dab0 	.word	0x2000dab0

0800da68 <recv_custom_msg>:
 800da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6c:	4693      	mov	fp, r2
 800da6e:	b089      	sub	sp, #36	@ 0x24
 800da70:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800da74:	9305      	str	r3, [sp, #20]
 800da76:	468a      	mov	sl, r1
 800da78:	2100      	movs	r1, #0
 800da7a:	4604      	mov	r4, r0
 800da7c:	f88d 101e 	strb.w	r1, [sp, #30]
 800da80:	b322      	cbz	r2, 800dacc <recv_custom_msg+0x64>
 800da82:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800da86:	f10d 081f 	add.w	r8, sp, #31
 800da8a:	af05      	add	r7, sp, #20
 800da8c:	f10d 061e 	add.w	r6, sp, #30
 800da90:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800da94:	e002      	b.n	800da9c <recv_custom_msg+0x34>
 800da96:	9b05      	ldr	r3, [sp, #20]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	dd0f      	ble.n	800dabc <recv_custom_msg+0x54>
 800da9c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800daa0:	4623      	mov	r3, r4
 800daa2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800daa6:	e9cd 5600 	strd	r5, r6, [sp]
 800daaa:	4622      	mov	r2, r4
 800daac:	4648      	mov	r0, r9
 800daae:	f001 f8f3 	bl	800ec98 <uxr_read_framed_msg>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0ef      	beq.n	800da96 <recv_custom_msg+0x2e>
 800dab6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800daba:	b1b3      	cbz	r3, 800daea <recv_custom_msg+0x82>
 800dabc:	4b0f      	ldr	r3, [pc, #60]	@ (800dafc <recv_custom_msg+0x94>)
 800dabe:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800dac2:	701a      	strb	r2, [r3, #0]
 800dac4:	2000      	movs	r0, #0
 800dac6:	b009      	add	sp, #36	@ 0x24
 800dac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dacc:	f10d 021f 	add.w	r2, sp, #31
 800dad0:	9200      	str	r2, [sp, #0]
 800dad2:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800dad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dada:	4601      	mov	r1, r0
 800dadc:	47a8      	blx	r5
 800dade:	2800      	cmp	r0, #0
 800dae0:	d0ec      	beq.n	800dabc <recv_custom_msg+0x54>
 800dae2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1e8      	bne.n	800dabc <recv_custom_msg+0x54>
 800daea:	f8cb 0000 	str.w	r0, [fp]
 800daee:	2001      	movs	r0, #1
 800daf0:	f8ca 4000 	str.w	r4, [sl]
 800daf4:	b009      	add	sp, #36	@ 0x24
 800daf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafa:	bf00      	nop
 800dafc:	2000dab0 	.word	0x2000dab0

0800db00 <send_custom_msg>:
 800db00:	b530      	push	{r4, r5, lr}
 800db02:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800db06:	b087      	sub	sp, #28
 800db08:	4615      	mov	r5, r2
 800db0a:	b974      	cbnz	r4, 800db2a <send_custom_msg+0x2a>
 800db0c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800db10:	f10d 0317 	add.w	r3, sp, #23
 800db14:	47a0      	blx	r4
 800db16:	b108      	cbz	r0, 800db1c <send_custom_msg+0x1c>
 800db18:	42a8      	cmp	r0, r5
 800db1a:	d015      	beq.n	800db48 <send_custom_msg+0x48>
 800db1c:	4b0c      	ldr	r3, [pc, #48]	@ (800db50 <send_custom_msg+0x50>)
 800db1e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	2000      	movs	r0, #0
 800db26:	b007      	add	sp, #28
 800db28:	bd30      	pop	{r4, r5, pc}
 800db2a:	460b      	mov	r3, r1
 800db2c:	2200      	movs	r2, #0
 800db2e:	f10d 0117 	add.w	r1, sp, #23
 800db32:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800db36:	4602      	mov	r2, r0
 800db38:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800db3c:	9500      	str	r5, [sp, #0]
 800db3e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800db42:	f000 feb1 	bl	800e8a8 <uxr_write_framed_msg>
 800db46:	e7e6      	b.n	800db16 <send_custom_msg+0x16>
 800db48:	2001      	movs	r0, #1
 800db4a:	b007      	add	sp, #28
 800db4c:	bd30      	pop	{r4, r5, pc}
 800db4e:	bf00      	nop
 800db50:	2000dab0 	.word	0x2000dab0

0800db54 <uxr_set_custom_transport_callbacks>:
 800db54:	b410      	push	{r4}
 800db56:	9c01      	ldr	r4, [sp, #4]
 800db58:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800db5c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800db60:	9b02      	ldr	r3, [sp, #8]
 800db62:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800db66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db6a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800db6e:	4770      	bx	lr

0800db70 <uxr_init_custom_transport>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800db76:	b303      	cbz	r3, 800dbba <uxr_init_custom_transport+0x4a>
 800db78:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800db7c:	4604      	mov	r4, r0
 800db7e:	b1e2      	cbz	r2, 800dbba <uxr_init_custom_transport+0x4a>
 800db80:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800db84:	b1ca      	cbz	r2, 800dbba <uxr_init_custom_transport+0x4a>
 800db86:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800db8a:	b1b2      	cbz	r2, 800dbba <uxr_init_custom_transport+0x4a>
 800db8c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800db90:	4798      	blx	r3
 800db92:	4605      	mov	r5, r0
 800db94:	b188      	cbz	r0, 800dbba <uxr_init_custom_transport+0x4a>
 800db96:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800db9a:	b98b      	cbnz	r3, 800dbc0 <uxr_init_custom_transport+0x50>
 800db9c:	490b      	ldr	r1, [pc, #44]	@ (800dbcc <uxr_init_custom_transport+0x5c>)
 800db9e:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd0 <uxr_init_custom_transport+0x60>)
 800dba0:	4a0c      	ldr	r2, [pc, #48]	@ (800dbd4 <uxr_init_custom_transport+0x64>)
 800dba2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800dba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dbaa:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800dbae:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800dbb2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	bd38      	pop	{r3, r4, r5, pc}
 800dbba:	2500      	movs	r5, #0
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	bd38      	pop	{r3, r4, r5, pc}
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800dbc6:	f000 fe69 	bl	800e89c <uxr_init_framing_io>
 800dbca:	e7e7      	b.n	800db9c <uxr_init_custom_transport+0x2c>
 800dbcc:	0800db01 	.word	0x0800db01
 800dbd0:	0800da69 	.word	0x0800da69
 800dbd4:	0800da5d 	.word	0x0800da5d

0800dbd8 <uxr_close_custom_transport>:
 800dbd8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800dbdc:	4718      	bx	r3
 800dbde:	bf00      	nop

0800dbe0 <uxr_init_input_best_effort_stream>:
 800dbe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbe4:	8003      	strh	r3, [r0, #0]
 800dbe6:	4770      	bx	lr

0800dbe8 <uxr_reset_input_best_effort_stream>:
 800dbe8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbec:	8003      	strh	r3, [r0, #0]
 800dbee:	4770      	bx	lr

0800dbf0 <uxr_receive_best_effort_message>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	8800      	ldrh	r0, [r0, #0]
 800dbf6:	460d      	mov	r5, r1
 800dbf8:	f000 fe38 	bl	800e86c <uxr_seq_num_cmp>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800dc04:	bfb8      	it	lt
 800dc06:	8025      	strhlt	r5, [r4, #0]
 800dc08:	bd38      	pop	{r3, r4, r5, pc}
 800dc0a:	bf00      	nop

0800dc0c <on_full_input_buffer>:
 800dc0c:	b570      	push	{r4, r5, r6, lr}
 800dc0e:	4605      	mov	r5, r0
 800dc10:	460c      	mov	r4, r1
 800dc12:	682b      	ldr	r3, [r5, #0]
 800dc14:	6809      	ldr	r1, [r1, #0]
 800dc16:	8920      	ldrh	r0, [r4, #8]
 800dc18:	6862      	ldr	r2, [r4, #4]
 800dc1a:	fbb2 f2f0 	udiv	r2, r2, r0
 800dc1e:	eba3 0c01 	sub.w	ip, r3, r1
 800dc22:	fbbc fcf2 	udiv	ip, ip, r2
 800dc26:	f10c 0c01 	add.w	ip, ip, #1
 800dc2a:	fa1f f38c 	uxth.w	r3, ip
 800dc2e:	fbb3 f6f0 	udiv	r6, r3, r0
 800dc32:	fb00 3316 	mls	r3, r0, r6, r3
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	fb02 f303 	mul.w	r3, r2, r3
 800dc3c:	1d18      	adds	r0, r3, #4
 800dc3e:	4408      	add	r0, r1
 800dc40:	7d26      	ldrb	r6, [r4, #20]
 800dc42:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800dc46:	b116      	cbz	r6, 800dc4e <on_full_input_buffer+0x42>
 800dc48:	2600      	movs	r6, #0
 800dc4a:	f840 6c04 	str.w	r6, [r0, #-4]
 800dc4e:	2a03      	cmp	r2, #3
 800dc50:	d801      	bhi.n	800dc56 <on_full_input_buffer+0x4a>
 800dc52:	2001      	movs	r0, #1
 800dc54:	bd70      	pop	{r4, r5, r6, pc}
 800dc56:	3308      	adds	r3, #8
 800dc58:	4419      	add	r1, r3
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	692b      	ldr	r3, [r5, #16]
 800dc5e:	3a04      	subs	r2, #4
 800dc60:	f7fa ffca 	bl	8008bf8 <ucdr_init_buffer_origin>
 800dc64:	4628      	mov	r0, r5
 800dc66:	4903      	ldr	r1, [pc, #12]	@ (800dc74 <on_full_input_buffer+0x68>)
 800dc68:	4622      	mov	r2, r4
 800dc6a:	f7fa ffa1 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800dc6e:	2000      	movs	r0, #0
 800dc70:	bd70      	pop	{r4, r5, r6, pc}
 800dc72:	bf00      	nop
 800dc74:	0800dc0d 	.word	0x0800dc0d

0800dc78 <uxr_init_input_reliable_stream>:
 800dc78:	b500      	push	{lr}
 800dc7a:	e9c0 1200 	strd	r1, r2, [r0]
 800dc7e:	f04f 0e00 	mov.w	lr, #0
 800dc82:	9a01      	ldr	r2, [sp, #4]
 800dc84:	8103      	strh	r3, [r0, #8]
 800dc86:	6102      	str	r2, [r0, #16]
 800dc88:	f880 e014 	strb.w	lr, [r0, #20]
 800dc8c:	b1d3      	cbz	r3, 800dcc4 <uxr_init_input_reliable_stream+0x4c>
 800dc8e:	f8c1 e000 	str.w	lr, [r1]
 800dc92:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800dc96:	f1bc 0f01 	cmp.w	ip, #1
 800dc9a:	d913      	bls.n	800dcc4 <uxr_init_input_reliable_stream+0x4c>
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	fbb3 f1fc 	udiv	r1, r3, ip
 800dca2:	fb0c 3111 	mls	r1, ip, r1, r3
 800dca6:	b289      	uxth	r1, r1
 800dca8:	6842      	ldr	r2, [r0, #4]
 800dcaa:	fbb2 f2fc 	udiv	r2, r2, ip
 800dcae:	fb01 f202 	mul.w	r2, r1, r2
 800dcb2:	6801      	ldr	r1, [r0, #0]
 800dcb4:	f841 e002 	str.w	lr, [r1, r2]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	459c      	cmp	ip, r3
 800dcc2:	d8ec      	bhi.n	800dc9e <uxr_init_input_reliable_stream+0x26>
 800dcc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dcc8:	60c3      	str	r3, [r0, #12]
 800dcca:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcce:	bf00      	nop

0800dcd0 <uxr_reset_input_reliable_stream>:
 800dcd0:	8901      	ldrh	r1, [r0, #8]
 800dcd2:	b1e9      	cbz	r1, 800dd10 <uxr_reset_input_reliable_stream+0x40>
 800dcd4:	f04f 0c00 	mov.w	ip, #0
 800dcd8:	b500      	push	{lr}
 800dcda:	4663      	mov	r3, ip
 800dcdc:	46e6      	mov	lr, ip
 800dcde:	fbb3 f2f1 	udiv	r2, r3, r1
 800dce2:	fb01 3312 	mls	r3, r1, r2, r3
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	6842      	ldr	r2, [r0, #4]
 800dcea:	fbb2 f2f1 	udiv	r2, r2, r1
 800dcee:	fb02 f303 	mul.w	r3, r2, r3
 800dcf2:	6802      	ldr	r2, [r0, #0]
 800dcf4:	f842 e003 	str.w	lr, [r2, r3]
 800dcf8:	f10c 0c01 	add.w	ip, ip, #1
 800dcfc:	8901      	ldrh	r1, [r0, #8]
 800dcfe:	fa1f f38c 	uxth.w	r3, ip
 800dd02:	4299      	cmp	r1, r3
 800dd04:	d8eb      	bhi.n	800dcde <uxr_reset_input_reliable_stream+0xe>
 800dd06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd0a:	60c3      	str	r3, [r0, #12]
 800dd0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd14:	60c3      	str	r3, [r0, #12]
 800dd16:	4770      	bx	lr

0800dd18 <uxr_receive_reliable_message>:
 800dd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	460d      	mov	r5, r1
 800dd20:	8901      	ldrh	r1, [r0, #8]
 800dd22:	8980      	ldrh	r0, [r0, #12]
 800dd24:	4690      	mov	r8, r2
 800dd26:	461f      	mov	r7, r3
 800dd28:	f000 fd98 	bl	800e85c <uxr_seq_num_add>
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	4606      	mov	r6, r0
 800dd30:	89a0      	ldrh	r0, [r4, #12]
 800dd32:	f000 fd9b 	bl	800e86c <uxr_seq_num_cmp>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	db0a      	blt.n	800dd50 <uxr_receive_reliable_message+0x38>
 800dd3a:	2600      	movs	r6, #0
 800dd3c:	89e0      	ldrh	r0, [r4, #14]
 800dd3e:	4629      	mov	r1, r5
 800dd40:	f000 fd94 	bl	800e86c <uxr_seq_num_cmp>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	da00      	bge.n	800dd4a <uxr_receive_reliable_message+0x32>
 800dd48:	81e5      	strh	r5, [r4, #14]
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd50:	4630      	mov	r0, r6
 800dd52:	4629      	mov	r1, r5
 800dd54:	f000 fd8a 	bl	800e86c <uxr_seq_num_cmp>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	dbee      	blt.n	800dd3a <uxr_receive_reliable_message+0x22>
 800dd5c:	6923      	ldr	r3, [r4, #16]
 800dd5e:	4640      	mov	r0, r8
 800dd60:	4798      	blx	r3
 800dd62:	2101      	movs	r1, #1
 800dd64:	4681      	mov	r9, r0
 800dd66:	89a0      	ldrh	r0, [r4, #12]
 800dd68:	f000 fd78 	bl	800e85c <uxr_seq_num_add>
 800dd6c:	f1b9 0f00 	cmp.w	r9, #0
 800dd70:	d101      	bne.n	800dd76 <uxr_receive_reliable_message+0x5e>
 800dd72:	4285      	cmp	r5, r0
 800dd74:	d047      	beq.n	800de06 <uxr_receive_reliable_message+0xee>
 800dd76:	8922      	ldrh	r2, [r4, #8]
 800dd78:	fbb5 f0f2 	udiv	r0, r5, r2
 800dd7c:	fb02 5010 	mls	r0, r2, r0, r5
 800dd80:	b280      	uxth	r0, r0
 800dd82:	6863      	ldr	r3, [r4, #4]
 800dd84:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd88:	fb00 f303 	mul.w	r3, r0, r3
 800dd8c:	6820      	ldr	r0, [r4, #0]
 800dd8e:	3304      	adds	r3, #4
 800dd90:	4418      	add	r0, r3
 800dd92:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1cf      	bne.n	800dd3a <uxr_receive_reliable_message+0x22>
 800dd9a:	4641      	mov	r1, r8
 800dd9c:	463a      	mov	r2, r7
 800dd9e:	f002 fb02 	bl	80103a6 <memcpy>
 800dda2:	8921      	ldrh	r1, [r4, #8]
 800dda4:	fbb5 f2f1 	udiv	r2, r5, r1
 800dda8:	fb01 5212 	mls	r2, r1, r2, r5
 800ddac:	b292      	uxth	r2, r2
 800ddae:	6863      	ldr	r3, [r4, #4]
 800ddb0:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddb4:	fb02 f303 	mul.w	r3, r2, r3
 800ddb8:	6822      	ldr	r2, [r4, #0]
 800ddba:	50d7      	str	r7, [r2, r3]
 800ddbc:	9a08      	ldr	r2, [sp, #32]
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	7013      	strb	r3, [r2, #0]
 800ddc2:	f1b9 0f00 	cmp.w	r9, #0
 800ddc6:	d0b8      	beq.n	800dd3a <uxr_receive_reliable_message+0x22>
 800ddc8:	89a6      	ldrh	r6, [r4, #12]
 800ddca:	4630      	mov	r0, r6
 800ddcc:	2101      	movs	r1, #1
 800ddce:	f000 fd45 	bl	800e85c <uxr_seq_num_add>
 800ddd2:	8922      	ldrh	r2, [r4, #8]
 800ddd4:	6863      	ldr	r3, [r4, #4]
 800ddd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddda:	4606      	mov	r6, r0
 800dddc:	fbb0 f0f2 	udiv	r0, r0, r2
 800dde0:	fb02 6010 	mls	r0, r2, r0, r6
 800dde4:	b280      	uxth	r0, r0
 800dde6:	fb00 f303 	mul.w	r3, r0, r3
 800ddea:	6820      	ldr	r0, [r4, #0]
 800ddec:	3304      	adds	r3, #4
 800ddee:	4418      	add	r0, r3
 800ddf0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d0a0      	beq.n	800dd3a <uxr_receive_reliable_message+0x22>
 800ddf8:	6923      	ldr	r3, [r4, #16]
 800ddfa:	4798      	blx	r3
 800ddfc:	2802      	cmp	r0, #2
 800ddfe:	d008      	beq.n	800de12 <uxr_receive_reliable_message+0xfa>
 800de00:	2801      	cmp	r0, #1
 800de02:	d0e2      	beq.n	800ddca <uxr_receive_reliable_message+0xb2>
 800de04:	e799      	b.n	800dd3a <uxr_receive_reliable_message+0x22>
 800de06:	9b08      	ldr	r3, [sp, #32]
 800de08:	81a5      	strh	r5, [r4, #12]
 800de0a:	2601      	movs	r6, #1
 800de0c:	f883 9000 	strb.w	r9, [r3]
 800de10:	e794      	b.n	800dd3c <uxr_receive_reliable_message+0x24>
 800de12:	2601      	movs	r6, #1
 800de14:	e792      	b.n	800dd3c <uxr_receive_reliable_message+0x24>
 800de16:	bf00      	nop

0800de18 <uxr_next_input_reliable_buffer_available>:
 800de18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de1c:	4604      	mov	r4, r0
 800de1e:	460f      	mov	r7, r1
 800de20:	8980      	ldrh	r0, [r0, #12]
 800de22:	2101      	movs	r1, #1
 800de24:	4690      	mov	r8, r2
 800de26:	f000 fd19 	bl	800e85c <uxr_seq_num_add>
 800de2a:	8922      	ldrh	r2, [r4, #8]
 800de2c:	fbb0 f6f2 	udiv	r6, r0, r2
 800de30:	fb02 0616 	mls	r6, r2, r6, r0
 800de34:	b2b6      	uxth	r6, r6
 800de36:	6863      	ldr	r3, [r4, #4]
 800de38:	fbb3 f3f2 	udiv	r3, r3, r2
 800de3c:	fb06 f303 	mul.w	r3, r6, r3
 800de40:	6826      	ldr	r6, [r4, #0]
 800de42:	3304      	adds	r3, #4
 800de44:	441e      	add	r6, r3
 800de46:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800de4a:	f1b9 0f00 	cmp.w	r9, #0
 800de4e:	d023      	beq.n	800de98 <uxr_next_input_reliable_buffer_available+0x80>
 800de50:	6923      	ldr	r3, [r4, #16]
 800de52:	4605      	mov	r5, r0
 800de54:	4630      	mov	r0, r6
 800de56:	4798      	blx	r3
 800de58:	4682      	mov	sl, r0
 800de5a:	b300      	cbz	r0, 800de9e <uxr_next_input_reliable_buffer_available+0x86>
 800de5c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800de60:	2101      	movs	r1, #1
 800de62:	4650      	mov	r0, sl
 800de64:	f000 fcfa 	bl	800e85c <uxr_seq_num_add>
 800de68:	8921      	ldrh	r1, [r4, #8]
 800de6a:	fbb0 f2f1 	udiv	r2, r0, r1
 800de6e:	4682      	mov	sl, r0
 800de70:	fb01 0212 	mls	r2, r1, r2, r0
 800de74:	e9d4 0300 	ldrd	r0, r3, [r4]
 800de78:	b292      	uxth	r2, r2
 800de7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800de7e:	fb02 f303 	mul.w	r3, r2, r3
 800de82:	3304      	adds	r3, #4
 800de84:	4418      	add	r0, r3
 800de86:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800de8a:	b12b      	cbz	r3, 800de98 <uxr_next_input_reliable_buffer_available+0x80>
 800de8c:	6923      	ldr	r3, [r4, #16]
 800de8e:	4798      	blx	r3
 800de90:	2802      	cmp	r0, #2
 800de92:	d01b      	beq.n	800decc <uxr_next_input_reliable_buffer_available+0xb4>
 800de94:	2801      	cmp	r0, #1
 800de96:	d0e3      	beq.n	800de60 <uxr_next_input_reliable_buffer_available+0x48>
 800de98:	2000      	movs	r0, #0
 800de9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de9e:	464a      	mov	r2, r9
 800dea0:	4631      	mov	r1, r6
 800dea2:	4638      	mov	r0, r7
 800dea4:	f7fa feb0 	bl	8008c08 <ucdr_init_buffer>
 800dea8:	8921      	ldrh	r1, [r4, #8]
 800deaa:	fbb5 f2f1 	udiv	r2, r5, r1
 800deae:	fb01 5212 	mls	r2, r1, r2, r5
 800deb2:	b292      	uxth	r2, r2
 800deb4:	6863      	ldr	r3, [r4, #4]
 800deb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800deba:	fb02 f303 	mul.w	r3, r2, r3
 800debe:	6822      	ldr	r2, [r4, #0]
 800dec0:	f842 a003 	str.w	sl, [r2, r3]
 800dec4:	2001      	movs	r0, #1
 800dec6:	81a5      	strh	r5, [r4, #12]
 800dec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800decc:	8920      	ldrh	r0, [r4, #8]
 800dece:	fbb5 f3f0 	udiv	r3, r5, r0
 800ded2:	fb00 5513 	mls	r5, r0, r3, r5
 800ded6:	b2ad      	uxth	r5, r5
 800ded8:	6863      	ldr	r3, [r4, #4]
 800deda:	fbb3 f3f0 	udiv	r3, r3, r0
 800dede:	fb03 f505 	mul.w	r5, r3, r5
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	2000      	movs	r0, #0
 800dee6:	5158      	str	r0, [r3, r5]
 800dee8:	eb06 0108 	add.w	r1, r6, r8
 800deec:	eba9 0208 	sub.w	r2, r9, r8
 800def0:	4638      	mov	r0, r7
 800def2:	f7fa fe89 	bl	8008c08 <ucdr_init_buffer>
 800def6:	4638      	mov	r0, r7
 800def8:	4903      	ldr	r1, [pc, #12]	@ (800df08 <uxr_next_input_reliable_buffer_available+0xf0>)
 800defa:	4622      	mov	r2, r4
 800defc:	f7fa fe58 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800df00:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800df04:	2001      	movs	r0, #1
 800df06:	e7c8      	b.n	800de9a <uxr_next_input_reliable_buffer_available+0x82>
 800df08:	0800dc0d 	.word	0x0800dc0d

0800df0c <uxr_process_heartbeat>:
 800df0c:	b538      	push	{r3, r4, r5, lr}
 800df0e:	4611      	mov	r1, r2
 800df10:	4604      	mov	r4, r0
 800df12:	89c0      	ldrh	r0, [r0, #14]
 800df14:	4615      	mov	r5, r2
 800df16:	f000 fca9 	bl	800e86c <uxr_seq_num_cmp>
 800df1a:	2800      	cmp	r0, #0
 800df1c:	bfb8      	it	lt
 800df1e:	81e5      	strhlt	r5, [r4, #14]
 800df20:	bd38      	pop	{r3, r4, r5, pc}
 800df22:	bf00      	nop

0800df24 <uxr_compute_acknack>:
 800df24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df28:	8903      	ldrh	r3, [r0, #8]
 800df2a:	8985      	ldrh	r5, [r0, #12]
 800df2c:	4604      	mov	r4, r0
 800df2e:	460e      	mov	r6, r1
 800df30:	b1d3      	cbz	r3, 800df68 <uxr_compute_acknack+0x44>
 800df32:	4628      	mov	r0, r5
 800df34:	2701      	movs	r7, #1
 800df36:	e003      	b.n	800df40 <uxr_compute_acknack+0x1c>
 800df38:	4567      	cmp	r7, ip
 800df3a:	d215      	bcs.n	800df68 <uxr_compute_acknack+0x44>
 800df3c:	89a0      	ldrh	r0, [r4, #12]
 800df3e:	3701      	adds	r7, #1
 800df40:	b2b9      	uxth	r1, r7
 800df42:	f000 fc8b 	bl	800e85c <uxr_seq_num_add>
 800df46:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800df4a:	fbb0 f3fc 	udiv	r3, r0, ip
 800df4e:	fb0c 0313 	mls	r3, ip, r3, r0
 800df52:	b29a      	uxth	r2, r3
 800df54:	e9d4 1300 	ldrd	r1, r3, [r4]
 800df58:	fbb3 f3fc 	udiv	r3, r3, ip
 800df5c:	fb02 f303 	mul.w	r3, r2, r3
 800df60:	58cb      	ldr	r3, [r1, r3]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1e8      	bne.n	800df38 <uxr_compute_acknack+0x14>
 800df66:	4605      	mov	r5, r0
 800df68:	8035      	strh	r5, [r6, #0]
 800df6a:	2101      	movs	r1, #1
 800df6c:	4628      	mov	r0, r5
 800df6e:	89e7      	ldrh	r7, [r4, #14]
 800df70:	f000 fc78 	bl	800e864 <uxr_seq_num_sub>
 800df74:	4601      	mov	r1, r0
 800df76:	4638      	mov	r0, r7
 800df78:	f000 fc74 	bl	800e864 <uxr_seq_num_sub>
 800df7c:	4605      	mov	r5, r0
 800df7e:	b318      	cbz	r0, 800dfc8 <uxr_compute_acknack+0xa4>
 800df80:	f04f 0900 	mov.w	r9, #0
 800df84:	464f      	mov	r7, r9
 800df86:	f04f 0801 	mov.w	r8, #1
 800df8a:	fa1f f189 	uxth.w	r1, r9
 800df8e:	8830      	ldrh	r0, [r6, #0]
 800df90:	f000 fc64 	bl	800e85c <uxr_seq_num_add>
 800df94:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800df98:	fbb0 f3fc 	udiv	r3, r0, ip
 800df9c:	e9d4 1200 	ldrd	r1, r2, [r4]
 800dfa0:	fb03 001c 	mls	r0, r3, ip, r0
 800dfa4:	b283      	uxth	r3, r0
 800dfa6:	fbb2 f2fc 	udiv	r2, r2, ip
 800dfaa:	fb02 f303 	mul.w	r3, r2, r3
 800dfae:	fa08 f209 	lsl.w	r2, r8, r9
 800dfb2:	58cb      	ldr	r3, [r1, r3]
 800dfb4:	f109 0901 	add.w	r9, r9, #1
 800dfb8:	b90b      	cbnz	r3, 800dfbe <uxr_compute_acknack+0x9a>
 800dfba:	4317      	orrs	r7, r2
 800dfbc:	b2bf      	uxth	r7, r7
 800dfbe:	454d      	cmp	r5, r9
 800dfc0:	d1e3      	bne.n	800df8a <uxr_compute_acknack+0x66>
 800dfc2:	4638      	mov	r0, r7
 800dfc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfc8:	4607      	mov	r7, r0
 800dfca:	4638      	mov	r0, r7
 800dfcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dfd0 <uxr_init_output_best_effort_stream>:
 800dfd0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800dfd4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800dfd8:	6001      	str	r1, [r0, #0]
 800dfda:	7303      	strb	r3, [r0, #12]
 800dfdc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop

0800dfe4 <uxr_reset_output_best_effort_stream>:
 800dfe4:	7b02      	ldrb	r2, [r0, #12]
 800dfe6:	6042      	str	r2, [r0, #4]
 800dfe8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfec:	81c3      	strh	r3, [r0, #14]
 800dfee:	4770      	bx	lr

0800dff0 <uxr_prepare_best_effort_buffer_to_write>:
 800dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dff2:	4604      	mov	r4, r0
 800dff4:	b083      	sub	sp, #12
 800dff6:	6840      	ldr	r0, [r0, #4]
 800dff8:	460d      	mov	r5, r1
 800dffa:	4616      	mov	r6, r2
 800dffc:	f7fc f9ce 	bl	800a39c <uxr_submessage_padding>
 800e000:	6863      	ldr	r3, [r4, #4]
 800e002:	4418      	add	r0, r3
 800e004:	68a3      	ldr	r3, [r4, #8]
 800e006:	1942      	adds	r2, r0, r5
 800e008:	4293      	cmp	r3, r2
 800e00a:	bf2c      	ite	cs
 800e00c:	2701      	movcs	r7, #1
 800e00e:	2700      	movcc	r7, #0
 800e010:	d202      	bcs.n	800e018 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800e012:	4638      	mov	r0, r7
 800e014:	b003      	add	sp, #12
 800e016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e018:	9000      	str	r0, [sp, #0]
 800e01a:	6821      	ldr	r1, [r4, #0]
 800e01c:	4630      	mov	r0, r6
 800e01e:	2300      	movs	r3, #0
 800e020:	f7fa fde0 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 800e024:	6861      	ldr	r1, [r4, #4]
 800e026:	4638      	mov	r0, r7
 800e028:	4429      	add	r1, r5
 800e02a:	6061      	str	r1, [r4, #4]
 800e02c:	b003      	add	sp, #12
 800e02e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e030 <uxr_prepare_best_effort_buffer_to_send>:
 800e030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e034:	4604      	mov	r4, r0
 800e036:	461d      	mov	r5, r3
 800e038:	6840      	ldr	r0, [r0, #4]
 800e03a:	7b23      	ldrb	r3, [r4, #12]
 800e03c:	4298      	cmp	r0, r3
 800e03e:	bf8c      	ite	hi
 800e040:	2601      	movhi	r6, #1
 800e042:	2600      	movls	r6, #0
 800e044:	d802      	bhi.n	800e04c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800e046:	4630      	mov	r0, r6
 800e048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e04c:	4688      	mov	r8, r1
 800e04e:	89e0      	ldrh	r0, [r4, #14]
 800e050:	2101      	movs	r1, #1
 800e052:	4617      	mov	r7, r2
 800e054:	f000 fc02 	bl	800e85c <uxr_seq_num_add>
 800e058:	6823      	ldr	r3, [r4, #0]
 800e05a:	81e0      	strh	r0, [r4, #14]
 800e05c:	8028      	strh	r0, [r5, #0]
 800e05e:	f8c8 3000 	str.w	r3, [r8]
 800e062:	6863      	ldr	r3, [r4, #4]
 800e064:	603b      	str	r3, [r7, #0]
 800e066:	7b23      	ldrb	r3, [r4, #12]
 800e068:	6063      	str	r3, [r4, #4]
 800e06a:	4630      	mov	r0, r6
 800e06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e070 <on_full_output_buffer>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	6802      	ldr	r2, [r0, #0]
 800e074:	460c      	mov	r4, r1
 800e076:	6809      	ldr	r1, [r1, #0]
 800e078:	8923      	ldrh	r3, [r4, #8]
 800e07a:	eba2 0c01 	sub.w	ip, r2, r1
 800e07e:	6862      	ldr	r2, [r4, #4]
 800e080:	fbb2 f2f3 	udiv	r2, r2, r3
 800e084:	fbbc fcf2 	udiv	ip, ip, r2
 800e088:	f10c 0c01 	add.w	ip, ip, #1
 800e08c:	fa1f fc8c 	uxth.w	ip, ip
 800e090:	fbbc fef3 	udiv	lr, ip, r3
 800e094:	fb03 c31e 	mls	r3, r3, lr, ip
 800e098:	b29b      	uxth	r3, r3
 800e09a:	fb02 f303 	mul.w	r3, r2, r3
 800e09e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800e0a2:	58ca      	ldr	r2, [r1, r3]
 800e0a4:	4463      	add	r3, ip
 800e0a6:	eba2 020c 	sub.w	r2, r2, ip
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	4419      	add	r1, r3
 800e0b0:	3a04      	subs	r2, #4
 800e0b2:	6903      	ldr	r3, [r0, #16]
 800e0b4:	f7fa fda0 	bl	8008bf8 <ucdr_init_buffer_origin>
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	4903      	ldr	r1, [pc, #12]	@ (800e0c8 <on_full_output_buffer+0x58>)
 800e0bc:	4622      	mov	r2, r4
 800e0be:	f7fa fd77 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	bd38      	pop	{r3, r4, r5, pc}
 800e0c6:	bf00      	nop
 800e0c8:	0800e071 	.word	0x0800e071

0800e0cc <uxr_init_output_reliable_stream>:
 800e0cc:	b410      	push	{r4}
 800e0ce:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e0d2:	8103      	strh	r3, [r0, #8]
 800e0d4:	e9c0 1200 	strd	r1, r2, [r0]
 800e0d8:	f880 c00c 	strb.w	ip, [r0, #12]
 800e0dc:	b1d3      	cbz	r3, 800e114 <uxr_init_output_reliable_stream+0x48>
 800e0de:	f8c1 c000 	str.w	ip, [r1]
 800e0e2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e0e6:	f1bc 0f01 	cmp.w	ip, #1
 800e0ea:	d913      	bls.n	800e114 <uxr_init_output_reliable_stream+0x48>
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	fbb3 f1fc 	udiv	r1, r3, ip
 800e0f2:	fb0c 3111 	mls	r1, ip, r1, r3
 800e0f6:	b289      	uxth	r1, r1
 800e0f8:	6842      	ldr	r2, [r0, #4]
 800e0fa:	6804      	ldr	r4, [r0, #0]
 800e0fc:	fbb2 f2fc 	udiv	r2, r2, ip
 800e100:	fb01 f202 	mul.w	r2, r1, r2
 800e104:	7b01      	ldrb	r1, [r0, #12]
 800e106:	50a1      	str	r1, [r4, r2]
 800e108:	3301      	adds	r3, #1
 800e10a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e10e:	b29b      	uxth	r3, r3
 800e110:	459c      	cmp	ip, r3
 800e112:	d8ec      	bhi.n	800e0ee <uxr_init_output_reliable_stream+0x22>
 800e114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e118:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e11c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800e120:	4905      	ldr	r1, [pc, #20]	@ (800e138 <uxr_init_output_reliable_stream+0x6c>)
 800e122:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e126:	f8c0 100e 	str.w	r1, [r0, #14]
 800e12a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e12e:	2300      	movs	r3, #0
 800e130:	8242      	strh	r2, [r0, #18]
 800e132:	8403      	strh	r3, [r0, #32]
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	ffff0000 	.word	0xffff0000

0800e13c <uxr_reset_output_reliable_stream>:
 800e13c:	8901      	ldrh	r1, [r0, #8]
 800e13e:	b1b1      	cbz	r1, 800e16e <uxr_reset_output_reliable_stream+0x32>
 800e140:	f04f 0c00 	mov.w	ip, #0
 800e144:	4663      	mov	r3, ip
 800e146:	fbb3 f2f1 	udiv	r2, r3, r1
 800e14a:	fb01 3312 	mls	r3, r1, r2, r3
 800e14e:	b29b      	uxth	r3, r3
 800e150:	6842      	ldr	r2, [r0, #4]
 800e152:	fbb2 f2f1 	udiv	r2, r2, r1
 800e156:	6801      	ldr	r1, [r0, #0]
 800e158:	fb02 f303 	mul.w	r3, r2, r3
 800e15c:	7b02      	ldrb	r2, [r0, #12]
 800e15e:	50ca      	str	r2, [r1, r3]
 800e160:	f10c 0c01 	add.w	ip, ip, #1
 800e164:	8901      	ldrh	r1, [r0, #8]
 800e166:	fa1f f38c 	uxth.w	r3, ip
 800e16a:	4299      	cmp	r1, r3
 800e16c:	d8eb      	bhi.n	800e146 <uxr_reset_output_reliable_stream+0xa>
 800e16e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e172:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e176:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800e17a:	4904      	ldr	r1, [pc, #16]	@ (800e18c <uxr_reset_output_reliable_stream+0x50>)
 800e17c:	f8c0 100e 	str.w	r1, [r0, #14]
 800e180:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e184:	2300      	movs	r3, #0
 800e186:	8242      	strh	r2, [r0, #18]
 800e188:	8403      	strh	r3, [r0, #32]
 800e18a:	4770      	bx	lr
 800e18c:	ffff0000 	.word	0xffff0000

0800e190 <uxr_prepare_reliable_buffer_to_write>:
 800e190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e194:	4604      	mov	r4, r0
 800e196:	b091      	sub	sp, #68	@ 0x44
 800e198:	8900      	ldrh	r0, [r0, #8]
 800e19a:	89e6      	ldrh	r6, [r4, #14]
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	9204      	str	r2, [sp, #16]
 800e1a0:	fbb6 f2f0 	udiv	r2, r6, r0
 800e1a4:	fb00 6212 	mls	r2, r0, r2, r6
 800e1a8:	b292      	uxth	r2, r2
 800e1aa:	6865      	ldr	r5, [r4, #4]
 800e1ac:	fbb5 f5f0 	udiv	r5, r5, r0
 800e1b0:	fb05 3202 	mla	r2, r5, r2, r3
 800e1b4:	3204      	adds	r2, #4
 800e1b6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 800e1ba:	f894 900c 	ldrb.w	r9, [r4, #12]
 800e1be:	9203      	str	r2, [sp, #12]
 800e1c0:	468b      	mov	fp, r1
 800e1c2:	1f2f      	subs	r7, r5, #4
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	f000 814c 	beq.w	800e462 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800e1ca:	f04f 0c00 	mov.w	ip, #0
 800e1ce:	46e2      	mov	sl, ip
 800e1d0:	4661      	mov	r1, ip
 800e1d2:	fbb1 f2f0 	udiv	r2, r1, r0
 800e1d6:	fb00 1212 	mls	r2, r0, r2, r1
 800e1da:	b292      	uxth	r2, r2
 800e1dc:	fb05 f202 	mul.w	r2, r5, r2
 800e1e0:	f10c 0c01 	add.w	ip, ip, #1
 800e1e4:	589a      	ldr	r2, [r3, r2]
 800e1e6:	454a      	cmp	r2, r9
 800e1e8:	bf08      	it	eq
 800e1ea:	f10a 0a01 	addeq.w	sl, sl, #1
 800e1ee:	fa1f f18c 	uxth.w	r1, ip
 800e1f2:	bf08      	it	eq
 800e1f4:	fa1f fa8a 	uxtheq.w	sl, sl
 800e1f8:	4281      	cmp	r1, r0
 800e1fa:	d3ea      	bcc.n	800e1d2 <uxr_prepare_reliable_buffer_to_write+0x42>
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	2104      	movs	r1, #4
 800e200:	f8cd a014 	str.w	sl, [sp, #20]
 800e204:	f7fa fd04 	bl	8008c10 <ucdr_alignment>
 800e208:	4480      	add	r8, r0
 800e20a:	eb08 020b 	add.w	r2, r8, fp
 800e20e:	42ba      	cmp	r2, r7
 800e210:	f240 80cd 	bls.w	800e3ae <uxr_prepare_reliable_buffer_to_write+0x21e>
 800e214:	7b22      	ldrb	r2, [r4, #12]
 800e216:	445a      	add	r2, fp
 800e218:	42ba      	cmp	r2, r7
 800e21a:	f240 80b5 	bls.w	800e388 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 800e21e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 800e222:	33fc      	adds	r3, #252	@ 0xfc
 800e224:	b2ba      	uxth	r2, r7
 800e226:	4413      	add	r3, r2
 800e228:	b29b      	uxth	r3, r3
 800e22a:	fb0a f903 	mul.w	r9, sl, r3
 800e22e:	45d9      	cmp	r9, fp
 800e230:	9305      	str	r3, [sp, #20]
 800e232:	9306      	str	r3, [sp, #24]
 800e234:	f0c0 80b7 	bcc.w	800e3a6 <uxr_prepare_reliable_buffer_to_write+0x216>
 800e238:	f108 0304 	add.w	r3, r8, #4
 800e23c:	42bb      	cmp	r3, r7
 800e23e:	f080 80db 	bcs.w	800e3f8 <uxr_prepare_reliable_buffer_to_write+0x268>
 800e242:	f1a2 0904 	sub.w	r9, r2, #4
 800e246:	eba9 0908 	sub.w	r9, r9, r8
 800e24a:	9b05      	ldr	r3, [sp, #20]
 800e24c:	fa1f f989 	uxth.w	r9, r9
 800e250:	ebab 0b09 	sub.w	fp, fp, r9
 800e254:	fbbb f2f3 	udiv	r2, fp, r3
 800e258:	fb03 b312 	mls	r3, r3, r2, fp
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f000 80c8 	beq.w	800e3f2 <uxr_prepare_reliable_buffer_to_write+0x262>
 800e262:	3201      	adds	r2, #1
 800e264:	b292      	uxth	r2, r2
 800e266:	9306      	str	r3, [sp, #24]
 800e268:	4552      	cmp	r2, sl
 800e26a:	f200 809c 	bhi.w	800e3a6 <uxr_prepare_reliable_buffer_to_write+0x216>
 800e26e:	f10d 0b20 	add.w	fp, sp, #32
 800e272:	2a00      	cmp	r2, #0
 800e274:	d042      	beq.n	800e2fc <uxr_prepare_reliable_buffer_to_write+0x16c>
 800e276:	f8cd 801c 	str.w	r8, [sp, #28]
 800e27a:	f04f 0a00 	mov.w	sl, #0
 800e27e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e282:	9505      	str	r5, [sp, #20]
 800e284:	f10d 0b20 	add.w	fp, sp, #32
 800e288:	4615      	mov	r5, r2
 800e28a:	e000      	b.n	800e28e <uxr_prepare_reliable_buffer_to_write+0xfe>
 800e28c:	46c1      	mov	r9, r8
 800e28e:	8920      	ldrh	r0, [r4, #8]
 800e290:	fbb6 f2f0 	udiv	r2, r6, r0
 800e294:	fb00 6112 	mls	r1, r0, r2, r6
 800e298:	b28a      	uxth	r2, r1
 800e29a:	6863      	ldr	r3, [r4, #4]
 800e29c:	fbb3 f1f0 	udiv	r1, r3, r0
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	fb02 f101 	mul.w	r1, r2, r1
 800e2a6:	3104      	adds	r1, #4
 800e2a8:	4419      	add	r1, r3
 800e2aa:	4658      	mov	r0, fp
 800e2ac:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800e2b0:	9200      	str	r2, [sp, #0]
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	463a      	mov	r2, r7
 800e2b6:	f7fa fc95 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 800e2ba:	464a      	mov	r2, r9
 800e2bc:	2300      	movs	r3, #0
 800e2be:	210d      	movs	r1, #13
 800e2c0:	4658      	mov	r0, fp
 800e2c2:	f7fc f82b 	bl	800a31c <uxr_buffer_submessage_header>
 800e2c6:	8921      	ldrh	r1, [r4, #8]
 800e2c8:	fbb6 f2f1 	udiv	r2, r6, r1
 800e2cc:	fb01 6212 	mls	r2, r1, r2, r6
 800e2d0:	b292      	uxth	r2, r2
 800e2d2:	6863      	ldr	r3, [r4, #4]
 800e2d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2d8:	fb02 f303 	mul.w	r3, r2, r3
 800e2dc:	6822      	ldr	r2, [r4, #0]
 800e2de:	4630      	mov	r0, r6
 800e2e0:	50d7      	str	r7, [r2, r3]
 800e2e2:	2101      	movs	r1, #1
 800e2e4:	f000 faba 	bl	800e85c <uxr_seq_num_add>
 800e2e8:	f10a 0a01 	add.w	sl, sl, #1
 800e2ec:	fa1f f38a 	uxth.w	r3, sl
 800e2f0:	429d      	cmp	r5, r3
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	d8ca      	bhi.n	800e28c <uxr_prepare_reliable_buffer_to_write+0xfc>
 800e2f6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e2fa:	9d05      	ldr	r5, [sp, #20]
 800e2fc:	8920      	ldrh	r0, [r4, #8]
 800e2fe:	fbb6 f3f0 	udiv	r3, r6, r0
 800e302:	fb00 6313 	mls	r3, r0, r3, r6
 800e306:	b299      	uxth	r1, r3
 800e308:	6863      	ldr	r3, [r4, #4]
 800e30a:	fbb3 f3f0 	udiv	r3, r3, r0
 800e30e:	fb01 f303 	mul.w	r3, r1, r3
 800e312:	6821      	ldr	r1, [r4, #0]
 800e314:	3304      	adds	r3, #4
 800e316:	4419      	add	r1, r3
 800e318:	463a      	mov	r2, r7
 800e31a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800e31e:	9000      	str	r0, [sp, #0]
 800e320:	2300      	movs	r3, #0
 800e322:	4658      	mov	r0, fp
 800e324:	f7fa fc5e 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 800e328:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800e32c:	4658      	mov	r0, fp
 800e32e:	fa1f f289 	uxth.w	r2, r9
 800e332:	2302      	movs	r3, #2
 800e334:	210d      	movs	r1, #13
 800e336:	f7fb fff1 	bl	800a31c <uxr_buffer_submessage_header>
 800e33a:	9b03      	ldr	r3, [sp, #12]
 800e33c:	8927      	ldrh	r7, [r4, #8]
 800e33e:	7b20      	ldrb	r0, [r4, #12]
 800e340:	f108 0104 	add.w	r1, r8, #4
 800e344:	440b      	add	r3, r1
 800e346:	4619      	mov	r1, r3
 800e348:	fbb6 f3f7 	udiv	r3, r6, r7
 800e34c:	fb07 6313 	mls	r3, r7, r3, r6
 800e350:	f1a5 0208 	sub.w	r2, r5, #8
 800e354:	b29d      	uxth	r5, r3
 800e356:	3004      	adds	r0, #4
 800e358:	6863      	ldr	r3, [r4, #4]
 800e35a:	fbb3 f3f7 	udiv	r3, r3, r7
 800e35e:	fb05 f303 	mul.w	r3, r5, r3
 800e362:	6825      	ldr	r5, [r4, #0]
 800e364:	4448      	add	r0, r9
 800e366:	50e8      	str	r0, [r5, r3]
 800e368:	9d04      	ldr	r5, [sp, #16]
 800e36a:	eba2 0208 	sub.w	r2, r2, r8
 800e36e:	4628      	mov	r0, r5
 800e370:	f7fa fc4a 	bl	8008c08 <ucdr_init_buffer>
 800e374:	4628      	mov	r0, r5
 800e376:	493c      	ldr	r1, [pc, #240]	@ (800e468 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800e378:	4622      	mov	r2, r4
 800e37a:	f7fa fc19 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800e37e:	2001      	movs	r0, #1
 800e380:	81e6      	strh	r6, [r4, #14]
 800e382:	b011      	add	sp, #68	@ 0x44
 800e384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e388:	2101      	movs	r1, #1
 800e38a:	89e0      	ldrh	r0, [r4, #14]
 800e38c:	f000 fa66 	bl	800e85c <uxr_seq_num_add>
 800e390:	8921      	ldrh	r1, [r4, #8]
 800e392:	4605      	mov	r5, r0
 800e394:	8a60      	ldrh	r0, [r4, #18]
 800e396:	f000 fa61 	bl	800e85c <uxr_seq_num_add>
 800e39a:	4601      	mov	r1, r0
 800e39c:	4628      	mov	r0, r5
 800e39e:	f000 fa65 	bl	800e86c <uxr_seq_num_cmp>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	dd42      	ble.n	800e42c <uxr_prepare_reliable_buffer_to_write+0x29c>
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	b011      	add	sp, #68	@ 0x44
 800e3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ae:	8921      	ldrh	r1, [r4, #8]
 800e3b0:	8a60      	ldrh	r0, [r4, #18]
 800e3b2:	9205      	str	r2, [sp, #20]
 800e3b4:	f000 fa52 	bl	800e85c <uxr_seq_num_add>
 800e3b8:	4601      	mov	r1, r0
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f000 fa56 	bl	800e86c <uxr_seq_num_cmp>
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	9a05      	ldr	r2, [sp, #20]
 800e3c4:	dcef      	bgt.n	800e3a6 <uxr_prepare_reliable_buffer_to_write+0x216>
 800e3c6:	8927      	ldrh	r7, [r4, #8]
 800e3c8:	fbb6 f3f7 	udiv	r3, r6, r7
 800e3cc:	fb07 6313 	mls	r3, r7, r3, r6
 800e3d0:	b29d      	uxth	r5, r3
 800e3d2:	6863      	ldr	r3, [r4, #4]
 800e3d4:	6824      	ldr	r4, [r4, #0]
 800e3d6:	fbb3 f3f7 	udiv	r3, r3, r7
 800e3da:	fb05 f303 	mul.w	r3, r5, r3
 800e3de:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800e3e2:	50e2      	str	r2, [r4, r3]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f8cd 8000 	str.w	r8, [sp]
 800e3ea:	f7fa fbfb 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 800e3ee:	2001      	movs	r0, #1
 800e3f0:	e7da      	b.n	800e3a8 <uxr_prepare_reliable_buffer_to_write+0x218>
 800e3f2:	b293      	uxth	r3, r2
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	e737      	b.n	800e268 <uxr_prepare_reliable_buffer_to_write+0xd8>
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	2101      	movs	r1, #1
 800e3fc:	9207      	str	r2, [sp, #28]
 800e3fe:	f000 fa2d 	bl	800e85c <uxr_seq_num_add>
 800e402:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e406:	fbb0 f1fc 	udiv	r1, r0, ip
 800e40a:	fb0c 0111 	mls	r1, ip, r1, r0
 800e40e:	4606      	mov	r6, r0
 800e410:	b288      	uxth	r0, r1
 800e412:	6863      	ldr	r3, [r4, #4]
 800e414:	fbb3 f1fc 	udiv	r1, r3, ip
 800e418:	6823      	ldr	r3, [r4, #0]
 800e41a:	9a07      	ldr	r2, [sp, #28]
 800e41c:	fb00 f101 	mul.w	r1, r0, r1
 800e420:	3104      	adds	r1, #4
 800e422:	440b      	add	r3, r1
 800e424:	9303      	str	r3, [sp, #12]
 800e426:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800e42a:	e70a      	b.n	800e242 <uxr_prepare_reliable_buffer_to_write+0xb2>
 800e42c:	8921      	ldrh	r1, [r4, #8]
 800e42e:	fbb5 f3f1 	udiv	r3, r5, r1
 800e432:	fb01 5313 	mls	r3, r1, r3, r5
 800e436:	b29a      	uxth	r2, r3
 800e438:	6863      	ldr	r3, [r4, #4]
 800e43a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e43e:	6821      	ldr	r1, [r4, #0]
 800e440:	9804      	ldr	r0, [sp, #16]
 800e442:	fb02 f303 	mul.w	r3, r2, r3
 800e446:	3304      	adds	r3, #4
 800e448:	7b22      	ldrb	r2, [r4, #12]
 800e44a:	4419      	add	r1, r3
 800e44c:	445a      	add	r2, fp
 800e44e:	f841 2c04 	str.w	r2, [r1, #-4]
 800e452:	7b23      	ldrb	r3, [r4, #12]
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	2300      	movs	r3, #0
 800e458:	f7fa fbc4 	bl	8008be4 <ucdr_init_buffer_origin_offset>
 800e45c:	81e5      	strh	r5, [r4, #14]
 800e45e:	2001      	movs	r0, #1
 800e460:	e7a2      	b.n	800e3a8 <uxr_prepare_reliable_buffer_to_write+0x218>
 800e462:	4682      	mov	sl, r0
 800e464:	e6ca      	b.n	800e1fc <uxr_prepare_reliable_buffer_to_write+0x6c>
 800e466:	bf00      	nop
 800e468:	0800e071 	.word	0x0800e071

0800e46c <uxr_prepare_next_reliable_buffer_to_send>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	4604      	mov	r4, r0
 800e470:	460f      	mov	r7, r1
 800e472:	8a00      	ldrh	r0, [r0, #16]
 800e474:	2101      	movs	r1, #1
 800e476:	4616      	mov	r6, r2
 800e478:	461d      	mov	r5, r3
 800e47a:	f000 f9ef 	bl	800e85c <uxr_seq_num_add>
 800e47e:	8028      	strh	r0, [r5, #0]
 800e480:	8922      	ldrh	r2, [r4, #8]
 800e482:	fbb0 f3f2 	udiv	r3, r0, r2
 800e486:	fb02 0c13 	mls	ip, r2, r3, r0
 800e48a:	fa1f fc8c 	uxth.w	ip, ip
 800e48e:	6863      	ldr	r3, [r4, #4]
 800e490:	fbb3 f3f2 	udiv	r3, r3, r2
 800e494:	fb0c fc03 	mul.w	ip, ip, r3
 800e498:	6823      	ldr	r3, [r4, #0]
 800e49a:	89e1      	ldrh	r1, [r4, #14]
 800e49c:	f10c 0c04 	add.w	ip, ip, #4
 800e4a0:	4463      	add	r3, ip
 800e4a2:	603b      	str	r3, [r7, #0]
 800e4a4:	6823      	ldr	r3, [r4, #0]
 800e4a6:	449c      	add	ip, r3
 800e4a8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800e4ac:	6033      	str	r3, [r6, #0]
 800e4ae:	f000 f9dd 	bl	800e86c <uxr_seq_num_cmp>
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	dd01      	ble.n	800e4ba <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ba:	7b23      	ldrb	r3, [r4, #12]
 800e4bc:	6832      	ldr	r2, [r6, #0]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d9f9      	bls.n	800e4b6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800e4c2:	8a61      	ldrh	r1, [r4, #18]
 800e4c4:	8a20      	ldrh	r0, [r4, #16]
 800e4c6:	f000 f9cd 	bl	800e864 <uxr_seq_num_sub>
 800e4ca:	8923      	ldrh	r3, [r4, #8]
 800e4cc:	4283      	cmp	r3, r0
 800e4ce:	d0f2      	beq.n	800e4b6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800e4d0:	8828      	ldrh	r0, [r5, #0]
 800e4d2:	89e3      	ldrh	r3, [r4, #14]
 800e4d4:	8220      	strh	r0, [r4, #16]
 800e4d6:	4298      	cmp	r0, r3
 800e4d8:	d001      	beq.n	800e4de <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800e4da:	2001      	movs	r0, #1
 800e4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4de:	2101      	movs	r1, #1
 800e4e0:	f000 f9bc 	bl	800e85c <uxr_seq_num_add>
 800e4e4:	81e0      	strh	r0, [r4, #14]
 800e4e6:	2001      	movs	r0, #1
 800e4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ea:	bf00      	nop

0800e4ec <uxr_update_output_stream_heartbeat_timestamp>:
 800e4ec:	b570      	push	{r4, r5, r6, lr}
 800e4ee:	8a01      	ldrh	r1, [r0, #16]
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	8a40      	ldrh	r0, [r0, #18]
 800e4f4:	4615      	mov	r5, r2
 800e4f6:	461e      	mov	r6, r3
 800e4f8:	f000 f9b8 	bl	800e86c <uxr_seq_num_cmp>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	db07      	blt.n	800e510 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800e500:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e504:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e508:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800e50c:	2000      	movs	r0, #0
 800e50e:	bd70      	pop	{r4, r5, r6, pc}
 800e510:	f894 0020 	ldrb.w	r0, [r4, #32]
 800e514:	b940      	cbnz	r0, 800e528 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800e516:	2301      	movs	r3, #1
 800e518:	f884 3020 	strb.w	r3, [r4, #32]
 800e51c:	3564      	adds	r5, #100	@ 0x64
 800e51e:	f146 0600 	adc.w	r6, r6, #0
 800e522:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800e526:	bd70      	pop	{r4, r5, r6, pc}
 800e528:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800e52c:	4295      	cmp	r5, r2
 800e52e:	eb76 0303 	sbcs.w	r3, r6, r3
 800e532:	bfa5      	ittet	ge
 800e534:	3001      	addge	r0, #1
 800e536:	f884 0020 	strbge.w	r0, [r4, #32]
 800e53a:	2000      	movlt	r0, #0
 800e53c:	2001      	movge	r0, #1
 800e53e:	e7ed      	b.n	800e51c <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800e540 <uxr_begin_output_nack_buffer_it>:
 800e540:	8a40      	ldrh	r0, [r0, #18]
 800e542:	4770      	bx	lr

0800e544 <uxr_next_reliable_nack_buffer_to_send>:
 800e544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e548:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 800e54c:	b082      	sub	sp, #8
 800e54e:	f1b8 0f00 	cmp.w	r8, #0
 800e552:	d011      	beq.n	800e578 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800e554:	4604      	mov	r4, r0
 800e556:	8818      	ldrh	r0, [r3, #0]
 800e558:	460e      	mov	r6, r1
 800e55a:	4617      	mov	r7, r2
 800e55c:	461d      	mov	r5, r3
 800e55e:	2101      	movs	r1, #1
 800e560:	f000 f97c 	bl	800e85c <uxr_seq_num_add>
 800e564:	8028      	strh	r0, [r5, #0]
 800e566:	8a21      	ldrh	r1, [r4, #16]
 800e568:	f000 f980 	bl	800e86c <uxr_seq_num_cmp>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	dd07      	ble.n	800e580 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 800e570:	f04f 0800 	mov.w	r8, #0
 800e574:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 800e578:	4640      	mov	r0, r8
 800e57a:	b002      	add	sp, #8
 800e57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e580:	8921      	ldrh	r1, [r4, #8]
 800e582:	8828      	ldrh	r0, [r5, #0]
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	fbb0 f2f1 	udiv	r2, r0, r1
 800e58a:	fb01 0c12 	mls	ip, r1, r2, r0
 800e58e:	fa1f f28c 	uxth.w	r2, ip
 800e592:	9301      	str	r3, [sp, #4]
 800e594:	6863      	ldr	r3, [r4, #4]
 800e596:	fbb3 fcf1 	udiv	ip, r3, r1
 800e59a:	9b01      	ldr	r3, [sp, #4]
 800e59c:	fb02 fc0c 	mul.w	ip, r2, ip
 800e5a0:	f10c 0c04 	add.w	ip, ip, #4
 800e5a4:	4463      	add	r3, ip
 800e5a6:	6033      	str	r3, [r6, #0]
 800e5a8:	6823      	ldr	r3, [r4, #0]
 800e5aa:	4463      	add	r3, ip
 800e5ac:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e5b0:	603b      	str	r3, [r7, #0]
 800e5b2:	7b22      	ldrb	r2, [r4, #12]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d0d2      	beq.n	800e55e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 800e5b8:	4640      	mov	r0, r8
 800e5ba:	b002      	add	sp, #8
 800e5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5c0 <uxr_process_acknack>:
 800e5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	460e      	mov	r6, r1
 800e5c6:	4610      	mov	r0, r2
 800e5c8:	2101      	movs	r1, #1
 800e5ca:	f000 f94b 	bl	800e864 <uxr_seq_num_sub>
 800e5ce:	8a61      	ldrh	r1, [r4, #18]
 800e5d0:	f000 f948 	bl	800e864 <uxr_seq_num_sub>
 800e5d4:	b1c0      	cbz	r0, 800e608 <uxr_process_acknack+0x48>
 800e5d6:	4605      	mov	r5, r0
 800e5d8:	2700      	movs	r7, #0
 800e5da:	2101      	movs	r1, #1
 800e5dc:	8a60      	ldrh	r0, [r4, #18]
 800e5de:	f000 f93d 	bl	800e85c <uxr_seq_num_add>
 800e5e2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e5e6:	fbb0 f1fc 	udiv	r1, r0, ip
 800e5ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e5ee:	fb0c 0111 	mls	r1, ip, r1, r0
 800e5f2:	b289      	uxth	r1, r1
 800e5f4:	3701      	adds	r7, #1
 800e5f6:	fbb3 f3fc 	udiv	r3, r3, ip
 800e5fa:	fb01 f303 	mul.w	r3, r1, r3
 800e5fe:	42bd      	cmp	r5, r7
 800e600:	7b21      	ldrb	r1, [r4, #12]
 800e602:	8260      	strh	r0, [r4, #18]
 800e604:	50d1      	str	r1, [r2, r3]
 800e606:	d1e8      	bne.n	800e5da <uxr_process_acknack+0x1a>
 800e608:	3e00      	subs	r6, #0
 800e60a:	f04f 0300 	mov.w	r3, #0
 800e60e:	bf18      	it	ne
 800e610:	2601      	movne	r6, #1
 800e612:	f884 3020 	strb.w	r3, [r4, #32]
 800e616:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 800e61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e61c <uxr_is_output_up_to_date>:
 800e61c:	8a01      	ldrh	r1, [r0, #16]
 800e61e:	8a40      	ldrh	r0, [r0, #18]
 800e620:	b508      	push	{r3, lr}
 800e622:	f000 f923 	bl	800e86c <uxr_seq_num_cmp>
 800e626:	fab0 f080 	clz	r0, r0
 800e62a:	0940      	lsrs	r0, r0, #5
 800e62c:	bd08      	pop	{r3, pc}
 800e62e:	bf00      	nop

0800e630 <get_available_free_slots>:
 800e630:	8902      	ldrh	r2, [r0, #8]
 800e632:	b1da      	cbz	r2, 800e66c <get_available_free_slots+0x3c>
 800e634:	b530      	push	{r4, r5, lr}
 800e636:	2100      	movs	r1, #0
 800e638:	6843      	ldr	r3, [r0, #4]
 800e63a:	6805      	ldr	r5, [r0, #0]
 800e63c:	7b04      	ldrb	r4, [r0, #12]
 800e63e:	fbb3 fef2 	udiv	lr, r3, r2
 800e642:	4608      	mov	r0, r1
 800e644:	460b      	mov	r3, r1
 800e646:	fbb3 fcf2 	udiv	ip, r3, r2
 800e64a:	fb02 331c 	mls	r3, r2, ip, r3
 800e64e:	b29b      	uxth	r3, r3
 800e650:	fb0e f303 	mul.w	r3, lr, r3
 800e654:	3101      	adds	r1, #1
 800e656:	f855 c003 	ldr.w	ip, [r5, r3]
 800e65a:	4564      	cmp	r4, ip
 800e65c:	bf08      	it	eq
 800e65e:	3001      	addeq	r0, #1
 800e660:	b28b      	uxth	r3, r1
 800e662:	bf08      	it	eq
 800e664:	b280      	uxtheq	r0, r0
 800e666:	4293      	cmp	r3, r2
 800e668:	d3ed      	bcc.n	800e646 <get_available_free_slots+0x16>
 800e66a:	bd30      	pop	{r4, r5, pc}
 800e66c:	4610      	mov	r0, r2
 800e66e:	4770      	bx	lr

0800e670 <uxr_buffer_cancel_data>:
 800e670:	b510      	push	{r4, lr}
 800e672:	b094      	sub	sp, #80	@ 0x50
 800e674:	2300      	movs	r3, #0
 800e676:	9202      	str	r2, [sp, #8]
 800e678:	9205      	str	r2, [sp, #20]
 800e67a:	9301      	str	r3, [sp, #4]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e682:	f88d 301e 	strb.w	r3, [sp, #30]
 800e686:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e68a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e68e:	2308      	movs	r3, #8
 800e690:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	2210      	movs	r2, #16
 800e698:	ab0c      	add	r3, sp, #48	@ 0x30
 800e69a:	4604      	mov	r4, r0
 800e69c:	9103      	str	r1, [sp, #12]
 800e69e:	f7fb fb9f 	bl	8009de0 <uxr_prepare_stream_to_write_submessage>
 800e6a2:	b918      	cbnz	r0, 800e6ac <uxr_buffer_cancel_data+0x3c>
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	b014      	add	sp, #80	@ 0x50
 800e6aa:	bd10      	pop	{r4, pc}
 800e6ac:	9905      	ldr	r1, [sp, #20]
 800e6ae:	aa06      	add	r2, sp, #24
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f7fb fccb 	bl	800a04c <uxr_init_base_object_request>
 800e6b6:	a906      	add	r1, sp, #24
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	a80c      	add	r0, sp, #48	@ 0x30
 800e6bc:	f7fc feda 	bl	800b474 <uxr_serialize_READ_DATA_Payload>
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	b014      	add	sp, #80	@ 0x50
 800e6c4:	bd10      	pop	{r4, pc}
 800e6c6:	bf00      	nop

0800e6c8 <read_submessage_format>:
 800e6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6cc:	b095      	sub	sp, #84	@ 0x54
 800e6ce:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800e6d2:	b113      	cbz	r3, 800e6da <read_submessage_format+0x12>
 800e6d4:	b015      	add	sp, #84	@ 0x54
 800e6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6da:	460c      	mov	r4, r1
 800e6dc:	4615      	mov	r5, r2
 800e6de:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e6e2:	4607      	mov	r7, r0
 800e6e4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e6e6:	9004      	str	r0, [sp, #16]
 800e6e8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e6ea:	9005      	str	r0, [sp, #20]
 800e6ec:	1a52      	subs	r2, r2, r1
 800e6ee:	a80c      	add	r0, sp, #48	@ 0x30
 800e6f0:	4699      	mov	r9, r3
 800e6f2:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e6f6:	f7fa fa87 	bl	8008c08 <ucdr_init_buffer>
 800e6fa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e6fe:	a80c      	add	r0, sp, #48	@ 0x30
 800e700:	f7fa fa56 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800e704:	69e2      	ldr	r2, [r4, #28]
 800e706:	b19a      	cbz	r2, 800e730 <read_submessage_format+0x68>
 800e708:	f1b8 0f07 	cmp.w	r8, #7
 800e70c:	f882 9014 	strb.w	r9, [r2, #20]
 800e710:	d040      	beq.n	800e794 <read_submessage_format+0xcc>
 800e712:	f1b8 0f08 	cmp.w	r8, #8
 800e716:	d02e      	beq.n	800e776 <read_submessage_format+0xae>
 800e718:	f1b8 0f06 	cmp.w	r8, #6
 800e71c:	d011      	beq.n	800e742 <read_submessage_format+0x7a>
 800e71e:	2301      	movs	r3, #1
 800e720:	7513      	strb	r3, [r2, #20]
 800e722:	4629      	mov	r1, r5
 800e724:	4620      	mov	r0, r4
 800e726:	f7fa fabf 	bl	8008ca8 <ucdr_advance_buffer>
 800e72a:	b015      	add	sp, #84	@ 0x54
 800e72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e730:	f1b8 0f07 	cmp.w	r8, #7
 800e734:	d02e      	beq.n	800e794 <read_submessage_format+0xcc>
 800e736:	f1b8 0f08 	cmp.w	r8, #8
 800e73a:	d01c      	beq.n	800e776 <read_submessage_format+0xae>
 800e73c:	f1b8 0f06 	cmp.w	r8, #6
 800e740:	d1ef      	bne.n	800e722 <read_submessage_format+0x5a>
 800e742:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e746:	f1b8 0f00 	cmp.w	r8, #0
 800e74a:	d011      	beq.n	800e770 <read_submessage_format+0xa8>
 800e74c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e74e:	e9cd 3500 	strd	r3, r5, [sp]
 800e752:	2306      	movs	r3, #6
 800e754:	f88d 3016 	strb.w	r3, [sp, #22]
 800e758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e75c:	9302      	str	r3, [sp, #8]
 800e75e:	4632      	mov	r2, r6
 800e760:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e764:	4638      	mov	r0, r7
 800e766:	47c0      	blx	r8
 800e768:	2301      	movs	r3, #1
 800e76a:	69e2      	ldr	r2, [r4, #28]
 800e76c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e770:	2a00      	cmp	r2, #0
 800e772:	d1d4      	bne.n	800e71e <read_submessage_format+0x56>
 800e774:	e7d5      	b.n	800e722 <read_submessage_format+0x5a>
 800e776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d0f8      	beq.n	800e770 <read_submessage_format+0xa8>
 800e77e:	a906      	add	r1, sp, #24
 800e780:	a80c      	add	r0, sp, #48	@ 0x30
 800e782:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e786:	f7fc ff15 	bl	800b5b4 <uxr_deserialize_SampleIdentity>
 800e78a:	b9a0      	cbnz	r0, 800e7b6 <read_submessage_format+0xee>
 800e78c:	69e2      	ldr	r2, [r4, #28]
 800e78e:	2a00      	cmp	r2, #0
 800e790:	d1c5      	bne.n	800e71e <read_submessage_format+0x56>
 800e792:	e7c6      	b.n	800e722 <read_submessage_format+0x5a>
 800e794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e798:	b13b      	cbz	r3, 800e7aa <read_submessage_format+0xe2>
 800e79a:	a906      	add	r1, sp, #24
 800e79c:	a80c      	add	r0, sp, #48	@ 0x30
 800e79e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e7a2:	f7fc fc01 	bl	800afa8 <uxr_deserialize_BaseObjectRequest>
 800e7a6:	bb60      	cbnz	r0, 800e802 <read_submessage_format+0x13a>
 800e7a8:	69e2      	ldr	r2, [r4, #28]
 800e7aa:	68a3      	ldr	r3, [r4, #8]
 800e7ac:	442b      	add	r3, r5
 800e7ae:	60a3      	str	r3, [r4, #8]
 800e7b0:	2a00      	cmp	r2, #0
 800e7b2:	d1b4      	bne.n	800e71e <read_submessage_format+0x56>
 800e7b4:	e7b5      	b.n	800e722 <read_submessage_format+0x5a>
 800e7b6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e7ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e7bc:	1a52      	subs	r2, r2, r1
 800e7be:	eba8 0803 	sub.w	r8, r8, r3
 800e7c2:	a80c      	add	r0, sp, #48	@ 0x30
 800e7c4:	f7fa fa20 	bl	8008c08 <ucdr_init_buffer>
 800e7c8:	44a8      	add	r8, r5
 800e7ca:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e7ce:	a80c      	add	r0, sp, #48	@ 0x30
 800e7d0:	f7fa f9ee 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800e7d4:	fa1f f888 	uxth.w	r8, r8
 800e7d8:	ab0c      	add	r3, sp, #48	@ 0x30
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	f8cd 8004 	str.w	r8, [sp, #4]
 800e7e0:	2108      	movs	r1, #8
 800e7e2:	f88d 1016 	strb.w	r1, [sp, #22]
 800e7e6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e7ea:	9102      	str	r1, [sp, #8]
 800e7ec:	ab06      	add	r3, sp, #24
 800e7ee:	4632      	mov	r2, r6
 800e7f0:	9905      	ldr	r1, [sp, #20]
 800e7f2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e7f6:	4638      	mov	r0, r7
 800e7f8:	47b0      	blx	r6
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e800:	e7c4      	b.n	800e78c <read_submessage_format+0xc4>
 800e802:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e806:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e808:	1a52      	subs	r2, r2, r1
 800e80a:	a80c      	add	r0, sp, #48	@ 0x30
 800e80c:	eba8 0803 	sub.w	r8, r8, r3
 800e810:	f7fa f9fa 	bl	8008c08 <ucdr_init_buffer>
 800e814:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e818:	a80c      	add	r0, sp, #48	@ 0x30
 800e81a:	f7fa f9c9 	bl	8008bb0 <ucdr_set_on_full_buffer_callback>
 800e81e:	ab0c      	add	r3, sp, #48	@ 0x30
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e826:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e82a:	44a8      	add	r8, r5
 800e82c:	fa1f f888 	uxth.w	r8, r8
 800e830:	f8cd 8004 	str.w	r8, [sp, #4]
 800e834:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e838:	2107      	movs	r1, #7
 800e83a:	f88d 1016 	strb.w	r1, [sp, #22]
 800e83e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e842:	9102      	str	r1, [sp, #8]
 800e844:	4632      	mov	r2, r6
 800e846:	b29b      	uxth	r3, r3
 800e848:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800e84c:	9905      	ldr	r1, [sp, #20]
 800e84e:	4638      	mov	r0, r7
 800e850:	47b0      	blx	r6
 800e852:	2301      	movs	r3, #1
 800e854:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e858:	e7a6      	b.n	800e7a8 <read_submessage_format+0xe0>
 800e85a:	bf00      	nop

0800e85c <uxr_seq_num_add>:
 800e85c:	4408      	add	r0, r1
 800e85e:	b280      	uxth	r0, r0
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop

0800e864 <uxr_seq_num_sub>:
 800e864:	1a40      	subs	r0, r0, r1
 800e866:	b280      	uxth	r0, r0
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop

0800e86c <uxr_seq_num_cmp>:
 800e86c:	4288      	cmp	r0, r1
 800e86e:	d011      	beq.n	800e894 <uxr_seq_num_cmp+0x28>
 800e870:	d309      	bcc.n	800e886 <uxr_seq_num_cmp+0x1a>
 800e872:	4288      	cmp	r0, r1
 800e874:	d910      	bls.n	800e898 <uxr_seq_num_cmp+0x2c>
 800e876:	1a40      	subs	r0, r0, r1
 800e878:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800e87c:	bfd4      	ite	le
 800e87e:	2001      	movle	r0, #1
 800e880:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 800e884:	4770      	bx	lr
 800e886:	1a0b      	subs	r3, r1, r0
 800e888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e88c:	daf1      	bge.n	800e872 <uxr_seq_num_cmp+0x6>
 800e88e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e892:	4770      	bx	lr
 800e894:	2000      	movs	r0, #0
 800e896:	4770      	bx	lr
 800e898:	2001      	movs	r0, #1
 800e89a:	4770      	bx	lr

0800e89c <uxr_init_framing_io>:
 800e89c:	2300      	movs	r3, #0
 800e89e:	7041      	strb	r1, [r0, #1]
 800e8a0:	7003      	strb	r3, [r0, #0]
 800e8a2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop

0800e8a8 <uxr_write_framed_msg>:
 800e8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ac:	4617      	mov	r7, r2
 800e8ae:	7842      	ldrb	r2, [r0, #1]
 800e8b0:	b083      	sub	sp, #12
 800e8b2:	460e      	mov	r6, r1
 800e8b4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800e8b8:	469a      	mov	sl, r3
 800e8ba:	2901      	cmp	r1, #1
 800e8bc:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800e8c6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800e8ca:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800e8ce:	f240 8137 	bls.w	800eb40 <uxr_write_framed_msg+0x298>
 800e8d2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800e8d6:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800e8da:	2901      	cmp	r1, #1
 800e8dc:	f04f 0202 	mov.w	r2, #2
 800e8e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e8e4:	f240 808f 	bls.w	800ea06 <uxr_write_framed_msg+0x15e>
 800e8e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e8ea:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800e8ee:	b2dd      	uxtb	r5, r3
 800e8f0:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e8f4:	2203      	movs	r2, #3
 800e8f6:	2901      	cmp	r1, #1
 800e8f8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e8fc:	f240 809a 	bls.w	800ea34 <uxr_write_framed_msg+0x18c>
 800e900:	18a1      	adds	r1, r4, r2
 800e902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e904:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800e908:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e90c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800e910:	3201      	adds	r2, #1
 800e912:	2801      	cmp	r0, #1
 800e914:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e918:	f240 80a0 	bls.w	800ea5c <uxr_write_framed_msg+0x1b4>
 800e91c:	18a0      	adds	r0, r4, r2
 800e91e:	3201      	adds	r2, #1
 800e920:	b2d2      	uxtb	r2, r2
 800e922:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e926:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f000 80a9 	beq.w	800ea82 <uxr_write_framed_msg+0x1da>
 800e930:	f04f 0900 	mov.w	r9, #0
 800e934:	46c8      	mov	r8, r9
 800e936:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800e93a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e93e:	2901      	cmp	r1, #1
 800e940:	f240 80c3 	bls.w	800eaca <uxr_write_framed_msg+0x222>
 800e944:	2a29      	cmp	r2, #41	@ 0x29
 800e946:	f200 809f 	bhi.w	800ea88 <uxr_write_framed_msg+0x1e0>
 800e94a:	18a1      	adds	r1, r4, r2
 800e94c:	3201      	adds	r2, #1
 800e94e:	b2d2      	uxtb	r2, r2
 800e950:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800e954:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e958:	ea89 0303 	eor.w	r3, r9, r3
 800e95c:	498c      	ldr	r1, [pc, #560]	@ (800eb90 <uxr_write_framed_msg+0x2e8>)
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	f108 0801 	add.w	r8, r8, #1
 800e964:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e968:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800e96c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e96e:	4543      	cmp	r3, r8
 800e970:	d8e1      	bhi.n	800e936 <uxr_write_framed_msg+0x8e>
 800e972:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e976:	fa5f f889 	uxtb.w	r8, r9
 800e97a:	9301      	str	r3, [sp, #4]
 800e97c:	f04f 0900 	mov.w	r9, #0
 800e980:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800e984:	fa5f f18a 	uxtb.w	r1, sl
 800e988:	2901      	cmp	r1, #1
 800e98a:	d921      	bls.n	800e9d0 <uxr_write_framed_msg+0x128>
 800e98c:	2a29      	cmp	r2, #41	@ 0x29
 800e98e:	f240 80af 	bls.w	800eaf0 <uxr_write_framed_msg+0x248>
 800e992:	2500      	movs	r5, #0
 800e994:	e000      	b.n	800e998 <uxr_write_framed_msg+0xf0>
 800e996:	b160      	cbz	r0, 800e9b2 <uxr_write_framed_msg+0x10a>
 800e998:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e99c:	1b52      	subs	r2, r2, r5
 800e99e:	465b      	mov	r3, fp
 800e9a0:	4421      	add	r1, r4
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	47b0      	blx	r6
 800e9a6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e9aa:	4405      	add	r5, r0
 800e9ac:	4295      	cmp	r5, r2
 800e9ae:	d3f2      	bcc.n	800e996 <uxr_write_framed_msg+0xee>
 800e9b0:	d003      	beq.n	800e9ba <uxr_write_framed_msg+0x112>
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	b003      	add	sp, #12
 800e9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ba:	fa5f f18a 	uxtb.w	r1, sl
 800e9be:	f04f 0300 	mov.w	r3, #0
 800e9c2:	2901      	cmp	r1, #1
 800e9c4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e9c8:	f04f 0200 	mov.w	r2, #0
 800e9cc:	f200 8090 	bhi.w	800eaf0 <uxr_write_framed_msg+0x248>
 800e9d0:	1c51      	adds	r1, r2, #1
 800e9d2:	b2c9      	uxtb	r1, r1
 800e9d4:	2929      	cmp	r1, #41	@ 0x29
 800e9d6:	d8dc      	bhi.n	800e992 <uxr_write_framed_msg+0xea>
 800e9d8:	18a5      	adds	r5, r4, r2
 800e9da:	4421      	add	r1, r4
 800e9dc:	3202      	adds	r2, #2
 800e9de:	f088 0820 	eor.w	r8, r8, #32
 800e9e2:	4648      	mov	r0, r9
 800e9e4:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800e9e8:	b2d2      	uxtb	r2, r2
 800e9ea:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e9ee:	f04f 0901 	mov.w	r9, #1
 800e9f2:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800e9f6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	f040 8085 	bne.w	800eb0a <uxr_write_framed_msg+0x262>
 800ea00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ea04:	e7bc      	b.n	800e980 <uxr_write_framed_msg+0xd8>
 800ea06:	4611      	mov	r1, r2
 800ea08:	f04f 0c03 	mov.w	ip, #3
 800ea0c:	2204      	movs	r2, #4
 800ea0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea10:	4421      	add	r1, r4
 800ea12:	b2dd      	uxtb	r5, r3
 800ea14:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800ea18:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800ea1c:	44a4      	add	ip, r4
 800ea1e:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800ea22:	f080 0020 	eor.w	r0, r0, #32
 800ea26:	2901      	cmp	r1, #1
 800ea28:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800ea2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ea30:	f63f af66 	bhi.w	800e900 <uxr_write_framed_msg+0x58>
 800ea34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea36:	18a0      	adds	r0, r4, r2
 800ea38:	f085 0520 	eor.w	r5, r5, #32
 800ea3c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ea40:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ea44:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800ea48:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800ea4c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800ea50:	3202      	adds	r2, #2
 800ea52:	2801      	cmp	r0, #1
 800ea54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ea58:	f63f af60 	bhi.w	800e91c <uxr_write_framed_msg+0x74>
 800ea5c:	1c50      	adds	r0, r2, #1
 800ea5e:	18a5      	adds	r5, r4, r2
 800ea60:	fa54 f080 	uxtab	r0, r4, r0
 800ea64:	3202      	adds	r2, #2
 800ea66:	f081 0120 	eor.w	r1, r1, #32
 800ea6a:	b2d2      	uxtb	r2, r2
 800ea6c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ea70:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800ea74:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800ea78:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f47f af57 	bne.w	800e930 <uxr_write_framed_msg+0x88>
 800ea82:	9301      	str	r3, [sp, #4]
 800ea84:	4698      	mov	r8, r3
 800ea86:	e779      	b.n	800e97c <uxr_write_framed_msg+0xd4>
 800ea88:	2500      	movs	r5, #0
 800ea8a:	e001      	b.n	800ea90 <uxr_write_framed_msg+0x1e8>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d090      	beq.n	800e9b2 <uxr_write_framed_msg+0x10a>
 800ea90:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ea94:	1b52      	subs	r2, r2, r5
 800ea96:	465b      	mov	r3, fp
 800ea98:	4421      	add	r1, r4
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	47b0      	blx	r6
 800ea9e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800eaa2:	4405      	add	r5, r0
 800eaa4:	4295      	cmp	r5, r2
 800eaa6:	d3f1      	bcc.n	800ea8c <uxr_write_framed_msg+0x1e4>
 800eaa8:	d183      	bne.n	800e9b2 <uxr_write_framed_msg+0x10a>
 800eaaa:	f04f 0300 	mov.w	r3, #0
 800eaae:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800eab2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eab4:	4543      	cmp	r3, r8
 800eab6:	d964      	bls.n	800eb82 <uxr_write_framed_msg+0x2da>
 800eab8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800eabc:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800eac0:	2901      	cmp	r1, #1
 800eac2:	f04f 0200 	mov.w	r2, #0
 800eac6:	f63f af3d 	bhi.w	800e944 <uxr_write_framed_msg+0x9c>
 800eaca:	1c51      	adds	r1, r2, #1
 800eacc:	b2c9      	uxtb	r1, r1
 800eace:	2929      	cmp	r1, #41	@ 0x29
 800ead0:	d8da      	bhi.n	800ea88 <uxr_write_framed_msg+0x1e0>
 800ead2:	18a0      	adds	r0, r4, r2
 800ead4:	4421      	add	r1, r4
 800ead6:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800eada:	3202      	adds	r2, #2
 800eadc:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800eae0:	b2d2      	uxtb	r2, r2
 800eae2:	f083 0020 	eor.w	r0, r3, #32
 800eae6:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800eaea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eaee:	e733      	b.n	800e958 <uxr_write_framed_msg+0xb0>
 800eaf0:	18a1      	adds	r1, r4, r2
 800eaf2:	3201      	adds	r2, #1
 800eaf4:	4648      	mov	r0, r9
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800eafc:	f04f 0901 	mov.w	r9, #1
 800eb00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eb04:	2800      	cmp	r0, #0
 800eb06:	f43f af7b 	beq.w	800ea00 <uxr_write_framed_msg+0x158>
 800eb0a:	2500      	movs	r5, #0
 800eb0c:	e002      	b.n	800eb14 <uxr_write_framed_msg+0x26c>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f43f af4f 	beq.w	800e9b2 <uxr_write_framed_msg+0x10a>
 800eb14:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800eb18:	1b52      	subs	r2, r2, r5
 800eb1a:	465b      	mov	r3, fp
 800eb1c:	4421      	add	r1, r4
 800eb1e:	4638      	mov	r0, r7
 800eb20:	47b0      	blx	r6
 800eb22:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800eb26:	4405      	add	r5, r0
 800eb28:	4295      	cmp	r5, r2
 800eb2a:	d3f0      	bcc.n	800eb0e <uxr_write_framed_msg+0x266>
 800eb2c:	f47f af41 	bne.w	800e9b2 <uxr_write_framed_msg+0x10a>
 800eb30:	2300      	movs	r3, #0
 800eb32:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800eb36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb38:	b298      	uxth	r0, r3
 800eb3a:	b003      	add	sp, #12
 800eb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb40:	217d      	movs	r1, #125	@ 0x7d
 800eb42:	f082 0220 	eor.w	r2, r2, #32
 800eb46:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800eb4a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800eb4e:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800eb52:	2901      	cmp	r1, #1
 800eb54:	f04f 0203 	mov.w	r2, #3
 800eb58:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eb5c:	d804      	bhi.n	800eb68 <uxr_write_framed_msg+0x2c0>
 800eb5e:	4611      	mov	r1, r2
 800eb60:	f04f 0c04 	mov.w	ip, #4
 800eb64:	2205      	movs	r2, #5
 800eb66:	e752      	b.n	800ea0e <uxr_write_framed_msg+0x166>
 800eb68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb6a:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800eb6e:	b2dd      	uxtb	r5, r3
 800eb70:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800eb74:	2204      	movs	r2, #4
 800eb76:	2901      	cmp	r1, #1
 800eb78:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eb7c:	f63f aec0 	bhi.w	800e900 <uxr_write_framed_msg+0x58>
 800eb80:	e758      	b.n	800ea34 <uxr_write_framed_msg+0x18c>
 800eb82:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800eb86:	fa5f f889 	uxtb.w	r8, r9
 800eb8a:	9301      	str	r3, [sp, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	e6f5      	b.n	800e97c <uxr_write_framed_msg+0xd4>
 800eb90:	08011970 	.word	0x08011970

0800eb94 <uxr_framing_read_transport>:
 800eb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb98:	4604      	mov	r4, r0
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	461f      	mov	r7, r3
 800eb9e:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800eba2:	4689      	mov	r9, r1
 800eba4:	4692      	mov	sl, r2
 800eba6:	f7fb fbff 	bl	800a3a8 <uxr_millis>
 800ebaa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ebae:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800ebb2:	42b3      	cmp	r3, r6
 800ebb4:	4680      	mov	r8, r0
 800ebb6:	d061      	beq.n	800ec7c <uxr_framing_read_transport+0xe8>
 800ebb8:	d81c      	bhi.n	800ebf4 <uxr_framing_read_transport+0x60>
 800ebba:	1e75      	subs	r5, r6, #1
 800ebbc:	1aed      	subs	r5, r5, r3
 800ebbe:	b2ed      	uxtb	r5, r5
 800ebc0:	2600      	movs	r6, #0
 800ebc2:	455d      	cmp	r5, fp
 800ebc4:	d81f      	bhi.n	800ec06 <uxr_framing_read_transport+0x72>
 800ebc6:	19ab      	adds	r3, r5, r6
 800ebc8:	455b      	cmp	r3, fp
 800ebca:	bf84      	itt	hi
 800ebcc:	ebab 0605 	subhi.w	r6, fp, r5
 800ebd0:	b2f6      	uxtbhi	r6, r6
 800ebd2:	b9ed      	cbnz	r5, 800ec10 <uxr_framing_read_transport+0x7c>
 800ebd4:	f04f 0b00 	mov.w	fp, #0
 800ebd8:	f7fb fbe6 	bl	800a3a8 <uxr_millis>
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	eba0 0808 	sub.w	r8, r0, r8
 800ebe2:	eba3 0308 	sub.w	r3, r3, r8
 800ebe6:	4658      	mov	r0, fp
 800ebe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ebec:	603b      	str	r3, [r7, #0]
 800ebee:	b003      	add	sp, #12
 800ebf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf4:	2e00      	cmp	r6, #0
 800ebf6:	d049      	beq.n	800ec8c <uxr_framing_read_transport+0xf8>
 800ebf8:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800ebfc:	b2ed      	uxtb	r5, r5
 800ebfe:	3e01      	subs	r6, #1
 800ec00:	455d      	cmp	r5, fp
 800ec02:	b2f6      	uxtb	r6, r6
 800ec04:	d9df      	bls.n	800ebc6 <uxr_framing_read_transport+0x32>
 800ec06:	fa5f f58b 	uxtb.w	r5, fp
 800ec0a:	2600      	movs	r6, #0
 800ec0c:	2d00      	cmp	r5, #0
 800ec0e:	d0e1      	beq.n	800ebd4 <uxr_framing_read_transport+0x40>
 800ec10:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ec14:	3102      	adds	r1, #2
 800ec16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	4421      	add	r1, r4
 800ec1e:	462a      	mov	r2, r5
 800ec20:	4650      	mov	r0, sl
 800ec22:	47c8      	blx	r9
 800ec24:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ec28:	4a1a      	ldr	r2, [pc, #104]	@ (800ec94 <uxr_framing_read_transport+0x100>)
 800ec2a:	4403      	add	r3, r0
 800ec2c:	0859      	lsrs	r1, r3, #1
 800ec2e:	fba2 2101 	umull	r2, r1, r2, r1
 800ec32:	0889      	lsrs	r1, r1, #2
 800ec34:	222a      	movs	r2, #42	@ 0x2a
 800ec36:	fb02 3111 	mls	r1, r2, r1, r3
 800ec3a:	4683      	mov	fp, r0
 800ec3c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d0c7      	beq.n	800ebd4 <uxr_framing_read_transport+0x40>
 800ec44:	42a8      	cmp	r0, r5
 800ec46:	d1c7      	bne.n	800ebd8 <uxr_framing_read_transport+0x44>
 800ec48:	2e00      	cmp	r6, #0
 800ec4a:	d0c5      	beq.n	800ebd8 <uxr_framing_read_transport+0x44>
 800ec4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	3102      	adds	r1, #2
 800ec52:	4632      	mov	r2, r6
 800ec54:	4421      	add	r1, r4
 800ec56:	2300      	movs	r3, #0
 800ec58:	4650      	mov	r0, sl
 800ec5a:	47c8      	blx	r9
 800ec5c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ec60:	4a0c      	ldr	r2, [pc, #48]	@ (800ec94 <uxr_framing_read_transport+0x100>)
 800ec62:	180b      	adds	r3, r1, r0
 800ec64:	0859      	lsrs	r1, r3, #1
 800ec66:	fba2 1201 	umull	r1, r2, r2, r1
 800ec6a:	0892      	lsrs	r2, r2, #2
 800ec6c:	212a      	movs	r1, #42	@ 0x2a
 800ec6e:	fb01 3312 	mls	r3, r1, r2, r3
 800ec72:	eb00 0b05 	add.w	fp, r0, r5
 800ec76:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800ec7a:	e7ad      	b.n	800ebd8 <uxr_framing_read_transport+0x44>
 800ec7c:	2600      	movs	r6, #0
 800ec7e:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800ec82:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800ec84:	d9bf      	bls.n	800ec06 <uxr_framing_read_transport+0x72>
 800ec86:	2102      	movs	r1, #2
 800ec88:	2529      	movs	r5, #41	@ 0x29
 800ec8a:	e7c4      	b.n	800ec16 <uxr_framing_read_transport+0x82>
 800ec8c:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800ec90:	b2ed      	uxtb	r5, r5
 800ec92:	e796      	b.n	800ebc2 <uxr_framing_read_transport+0x2e>
 800ec94:	30c30c31 	.word	0x30c30c31

0800ec98 <uxr_read_framed_msg>:
 800ec98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec9c:	461e      	mov	r6, r3
 800ec9e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800eca2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800eca6:	429d      	cmp	r5, r3
 800eca8:	b083      	sub	sp, #12
 800ecaa:	4604      	mov	r4, r0
 800ecac:	4688      	mov	r8, r1
 800ecae:	4691      	mov	r9, r2
 800ecb0:	f000 8188 	beq.w	800efc4 <uxr_read_framed_msg+0x32c>
 800ecb4:	7823      	ldrb	r3, [r4, #0]
 800ecb6:	4dc1      	ldr	r5, [pc, #772]	@ (800efbc <uxr_read_framed_msg+0x324>)
 800ecb8:	4fc1      	ldr	r7, [pc, #772]	@ (800efc0 <uxr_read_framed_msg+0x328>)
 800ecba:	2b07      	cmp	r3, #7
 800ecbc:	d8fd      	bhi.n	800ecba <uxr_read_framed_msg+0x22>
 800ecbe:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ecc2:	0115      	.short	0x0115
 800ecc4:	00d600f6 	.word	0x00d600f6
 800ecc8:	009000b9 	.word	0x009000b9
 800eccc:	0030004d 	.word	0x0030004d
 800ecd0:	0008      	.short	0x0008
 800ecd2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ecd6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ecda:	4299      	cmp	r1, r3
 800ecdc:	f000 814a 	beq.w	800ef74 <uxr_read_framed_msg+0x2dc>
 800ece0:	18e2      	adds	r2, r4, r3
 800ece2:	7892      	ldrb	r2, [r2, #2]
 800ece4:	2a7d      	cmp	r2, #125	@ 0x7d
 800ece6:	f000 8199 	beq.w	800f01c <uxr_read_framed_msg+0x384>
 800ecea:	3301      	adds	r3, #1
 800ecec:	0858      	lsrs	r0, r3, #1
 800ecee:	fba5 1000 	umull	r1, r0, r5, r0
 800ecf2:	0880      	lsrs	r0, r0, #2
 800ecf4:	212a      	movs	r1, #42	@ 0x2a
 800ecf6:	fb01 3310 	mls	r3, r1, r0, r3
 800ecfa:	2a7e      	cmp	r2, #126	@ 0x7e
 800ecfc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ed00:	f000 8252 	beq.w	800f1a8 <uxr_read_framed_msg+0x510>
 800ed04:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800ed06:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800ed08:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	2200      	movs	r2, #0
 800ed10:	4299      	cmp	r1, r3
 800ed12:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ed14:	7022      	strb	r2, [r4, #0]
 800ed16:	f000 8179 	beq.w	800f00c <uxr_read_framed_msg+0x374>
 800ed1a:	2000      	movs	r0, #0
 800ed1c:	b003      	add	sp, #12
 800ed1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed22:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ed26:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ed2a:	4299      	cmp	r1, r3
 800ed2c:	f000 8131 	beq.w	800ef92 <uxr_read_framed_msg+0x2fa>
 800ed30:	18e2      	adds	r2, r4, r3
 800ed32:	7890      	ldrb	r0, [r2, #2]
 800ed34:	287d      	cmp	r0, #125	@ 0x7d
 800ed36:	f000 8190 	beq.w	800f05a <uxr_read_framed_msg+0x3c2>
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	085a      	lsrs	r2, r3, #1
 800ed3e:	fba5 1202 	umull	r1, r2, r5, r2
 800ed42:	0892      	lsrs	r2, r2, #2
 800ed44:	212a      	movs	r1, #42	@ 0x2a
 800ed46:	fb01 3312 	mls	r3, r1, r2, r3
 800ed4a:	287e      	cmp	r0, #126	@ 0x7e
 800ed4c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ed50:	f000 821a 	beq.w	800f188 <uxr_read_framed_msg+0x4f0>
 800ed54:	2307      	movs	r3, #7
 800ed56:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800ed58:	7023      	strb	r3, [r4, #0]
 800ed5a:	e7ae      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800ed5c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ed5e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800ed62:	459e      	cmp	lr, r3
 800ed64:	d938      	bls.n	800edd8 <uxr_read_framed_msg+0x140>
 800ed66:	ee07 8a90 	vmov	s15, r8
 800ed6a:	212a      	movs	r1, #42	@ 0x2a
 800ed6c:	e020      	b.n	800edb0 <uxr_read_framed_msg+0x118>
 800ed6e:	f89b c002 	ldrb.w	ip, [fp, #2]
 800ed72:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800ed76:	f000 80d4 	beq.w	800ef22 <uxr_read_framed_msg+0x28a>
 800ed7a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800ed7e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ed82:	f000 8219 	beq.w	800f1b8 <uxr_read_framed_msg+0x520>
 800ed86:	f806 c003 	strb.w	ip, [r6, r3]
 800ed8a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800ed8e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ed90:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800ed94:	ea8a 000c 	eor.w	r0, sl, ip
 800ed98:	b2c0      	uxtb	r0, r0
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800eda6:	4573      	cmp	r3, lr
 800eda8:	8663      	strh	r3, [r4, #50]	@ 0x32
 800edaa:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800edac:	f080 8120 	bcs.w	800eff0 <uxr_read_framed_msg+0x358>
 800edb0:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800edb4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800edb8:	f100 0c01 	add.w	ip, r0, #1
 800edbc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800edc0:	fba5 8202 	umull	r8, r2, r5, r2
 800edc4:	0892      	lsrs	r2, r2, #2
 800edc6:	4582      	cmp	sl, r0
 800edc8:	eb04 0b00 	add.w	fp, r4, r0
 800edcc:	fb01 c212 	mls	r2, r1, r2, ip
 800edd0:	d1cd      	bne.n	800ed6e <uxr_read_framed_msg+0xd6>
 800edd2:	ee17 8a90 	vmov	r8, s15
 800edd6:	459e      	cmp	lr, r3
 800edd8:	f040 8111 	bne.w	800effe <uxr_read_framed_msg+0x366>
 800eddc:	2306      	movs	r3, #6
 800edde:	7023      	strb	r3, [r4, #0]
 800ede0:	e76b      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800ede2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ede6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800edea:	4298      	cmp	r0, r3
 800edec:	f000 80c2 	beq.w	800ef74 <uxr_read_framed_msg+0x2dc>
 800edf0:	18e2      	adds	r2, r4, r3
 800edf2:	7891      	ldrb	r1, [r2, #2]
 800edf4:	297d      	cmp	r1, #125	@ 0x7d
 800edf6:	f000 814c 	beq.w	800f092 <uxr_read_framed_msg+0x3fa>
 800edfa:	3301      	adds	r3, #1
 800edfc:	085a      	lsrs	r2, r3, #1
 800edfe:	fba5 0202 	umull	r0, r2, r5, r2
 800ee02:	0892      	lsrs	r2, r2, #2
 800ee04:	202a      	movs	r0, #42	@ 0x2a
 800ee06:	fb00 3312 	mls	r3, r0, r2, r3
 800ee0a:	297e      	cmp	r1, #126	@ 0x7e
 800ee0c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ee10:	f000 81ca 	beq.w	800f1a8 <uxr_read_framed_msg+0x510>
 800ee14:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800ee16:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ee1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	2000      	movs	r0, #0
 800ee20:	428b      	cmp	r3, r1
 800ee22:	8623      	strh	r3, [r4, #48]	@ 0x30
 800ee24:	8660      	strh	r0, [r4, #50]	@ 0x32
 800ee26:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800ee28:	f240 80df 	bls.w	800efea <uxr_read_framed_msg+0x352>
 800ee2c:	7020      	strb	r0, [r4, #0]
 800ee2e:	b003      	add	sp, #12
 800ee30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee34:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ee38:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ee3c:	4299      	cmp	r1, r3
 800ee3e:	f000 80a8 	beq.w	800ef92 <uxr_read_framed_msg+0x2fa>
 800ee42:	18e2      	adds	r2, r4, r3
 800ee44:	7890      	ldrb	r0, [r2, #2]
 800ee46:	287d      	cmp	r0, #125	@ 0x7d
 800ee48:	f000 8164 	beq.w	800f114 <uxr_read_framed_msg+0x47c>
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	085a      	lsrs	r2, r3, #1
 800ee50:	fba5 1202 	umull	r1, r2, r5, r2
 800ee54:	0892      	lsrs	r2, r2, #2
 800ee56:	212a      	movs	r1, #42	@ 0x2a
 800ee58:	fb01 3312 	mls	r3, r1, r2, r3
 800ee5c:	287e      	cmp	r0, #126	@ 0x7e
 800ee5e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ee62:	f000 8191 	beq.w	800f188 <uxr_read_framed_msg+0x4f0>
 800ee66:	2304      	movs	r3, #4
 800ee68:	8620      	strh	r0, [r4, #48]	@ 0x30
 800ee6a:	7023      	strb	r3, [r4, #0]
 800ee6c:	e725      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800ee6e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ee72:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ee76:	4290      	cmp	r0, r2
 800ee78:	f000 80b3 	beq.w	800efe2 <uxr_read_framed_msg+0x34a>
 800ee7c:	18a3      	adds	r3, r4, r2
 800ee7e:	7899      	ldrb	r1, [r3, #2]
 800ee80:	297d      	cmp	r1, #125	@ 0x7d
 800ee82:	f000 8164 	beq.w	800f14e <uxr_read_framed_msg+0x4b6>
 800ee86:	3201      	adds	r2, #1
 800ee88:	0850      	lsrs	r0, r2, #1
 800ee8a:	fba5 3000 	umull	r3, r0, r5, r0
 800ee8e:	0880      	lsrs	r0, r0, #2
 800ee90:	232a      	movs	r3, #42	@ 0x2a
 800ee92:	fb03 2210 	mls	r2, r3, r0, r2
 800ee96:	297e      	cmp	r1, #126	@ 0x7e
 800ee98:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ee9c:	f000 8188 	beq.w	800f1b0 <uxr_read_framed_msg+0x518>
 800eea0:	7863      	ldrb	r3, [r4, #1]
 800eea2:	428b      	cmp	r3, r1
 800eea4:	bf0c      	ite	eq
 800eea6:	2303      	moveq	r3, #3
 800eea8:	2300      	movne	r3, #0
 800eeaa:	7023      	strb	r3, [r4, #0]
 800eeac:	e705      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800eeae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800eeb2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	4299      	cmp	r1, r3
 800eeba:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800eebe:	d06c      	beq.n	800ef9a <uxr_read_framed_msg+0x302>
 800eec0:	18e2      	adds	r2, r4, r3
 800eec2:	7890      	ldrb	r0, [r2, #2]
 800eec4:	287d      	cmp	r0, #125	@ 0x7d
 800eec6:	f000 8101 	beq.w	800f0cc <uxr_read_framed_msg+0x434>
 800eeca:	3301      	adds	r3, #1
 800eecc:	085a      	lsrs	r2, r3, #1
 800eece:	fba5 1202 	umull	r1, r2, r5, r2
 800eed2:	0892      	lsrs	r2, r2, #2
 800eed4:	212a      	movs	r1, #42	@ 0x2a
 800eed6:	fb01 3312 	mls	r3, r1, r2, r3
 800eeda:	287e      	cmp	r0, #126	@ 0x7e
 800eedc:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800eee0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800eee4:	d059      	beq.n	800ef9a <uxr_read_framed_msg+0x302>
 800eee6:	2302      	movs	r3, #2
 800eee8:	7023      	strb	r3, [r4, #0]
 800eeea:	e6e6      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800eeec:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800eef0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eef4:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800eef8:	1c51      	adds	r1, r2, #1
 800eefa:	084b      	lsrs	r3, r1, #1
 800eefc:	fba5 c303 	umull	ip, r3, r5, r3
 800ef00:	089b      	lsrs	r3, r3, #2
 800ef02:	fb0e 1313 	mls	r3, lr, r3, r1
 800ef06:	4592      	cmp	sl, r2
 800ef08:	eb04 0002 	add.w	r0, r4, r2
 800ef0c:	b2da      	uxtb	r2, r3
 800ef0e:	f43f af04 	beq.w	800ed1a <uxr_read_framed_msg+0x82>
 800ef12:	7883      	ldrb	r3, [r0, #2]
 800ef14:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ef18:	2b7e      	cmp	r3, #126	@ 0x7e
 800ef1a:	d1ed      	bne.n	800eef8 <uxr_read_framed_msg+0x260>
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	7023      	strb	r3, [r4, #0]
 800ef20:	e6cb      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800ef22:	f100 0c01 	add.w	ip, r0, #1
 800ef26:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800ef2a:	fba5 8202 	umull	r8, r2, r5, r2
 800ef2e:	0892      	lsrs	r2, r2, #2
 800ef30:	fb01 c212 	mls	r2, r1, r2, ip
 800ef34:	eb04 0c02 	add.w	ip, r4, r2
 800ef38:	b2d2      	uxtb	r2, r2
 800ef3a:	4592      	cmp	sl, r2
 800ef3c:	f100 0002 	add.w	r0, r0, #2
 800ef40:	f43f af47 	beq.w	800edd2 <uxr_read_framed_msg+0x13a>
 800ef44:	0842      	lsrs	r2, r0, #1
 800ef46:	f89c a002 	ldrb.w	sl, [ip, #2]
 800ef4a:	fba5 8202 	umull	r8, r2, r5, r2
 800ef4e:	0892      	lsrs	r2, r2, #2
 800ef50:	fb01 0012 	mls	r0, r1, r2, r0
 800ef54:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800ef58:	f08a 0c20 	eor.w	ip, sl, #32
 800ef5c:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800ef60:	f47f af11 	bne.w	800ed86 <uxr_read_framed_msg+0xee>
 800ef64:	459e      	cmp	lr, r3
 800ef66:	ee17 8a90 	vmov	r8, s15
 800ef6a:	f43f af37 	beq.w	800eddc <uxr_read_framed_msg+0x144>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	7023      	strb	r3, [r4, #0]
 800ef72:	e6a2      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800ef74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	2301      	movs	r3, #1
 800ef7a:	9301      	str	r3, [sp, #4]
 800ef7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef7e:	464a      	mov	r2, r9
 800ef80:	4641      	mov	r1, r8
 800ef82:	4620      	mov	r0, r4
 800ef84:	f7ff fe06 	bl	800eb94 <uxr_framing_read_transport>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	f43f aec6 	beq.w	800ed1a <uxr_read_framed_msg+0x82>
 800ef8e:	7823      	ldrb	r3, [r4, #0]
 800ef90:	e693      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800ef92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef94:	9300      	str	r3, [sp, #0]
 800ef96:	2302      	movs	r3, #2
 800ef98:	e7ef      	b.n	800ef7a <uxr_read_framed_msg+0x2e2>
 800ef9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	2304      	movs	r3, #4
 800efa0:	9301      	str	r3, [sp, #4]
 800efa2:	464a      	mov	r2, r9
 800efa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efa6:	4641      	mov	r1, r8
 800efa8:	4620      	mov	r0, r4
 800efaa:	f7ff fdf3 	bl	800eb94 <uxr_framing_read_transport>
 800efae:	2800      	cmp	r0, #0
 800efb0:	d1ed      	bne.n	800ef8e <uxr_read_framed_msg+0x2f6>
 800efb2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800efb6:	2b7e      	cmp	r3, #126	@ 0x7e
 800efb8:	d0e9      	beq.n	800ef8e <uxr_read_framed_msg+0x2f6>
 800efba:	e6ae      	b.n	800ed1a <uxr_read_framed_msg+0x82>
 800efbc:	30c30c31 	.word	0x30c30c31
 800efc0:	08011970 	.word	0x08011970
 800efc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	2305      	movs	r3, #5
 800efca:	9301      	str	r3, [sp, #4]
 800efcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efce:	f7ff fde1 	bl	800eb94 <uxr_framing_read_transport>
 800efd2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800efd6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800efda:	429a      	cmp	r2, r3
 800efdc:	f43f ae9d 	beq.w	800ed1a <uxr_read_framed_msg+0x82>
 800efe0:	e668      	b.n	800ecb4 <uxr_read_framed_msg+0x1c>
 800efe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	2303      	movs	r3, #3
 800efe8:	e7c7      	b.n	800ef7a <uxr_read_framed_msg+0x2e2>
 800efea:	2305      	movs	r3, #5
 800efec:	7023      	strb	r3, [r4, #0]
 800efee:	e664      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800eff0:	ee17 8a90 	vmov	r8, s15
 800eff4:	f43f aef2 	beq.w	800eddc <uxr_read_framed_msg+0x144>
 800eff8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800effc:	d08e      	beq.n	800ef1c <uxr_read_framed_msg+0x284>
 800effe:	ebae 0303 	sub.w	r3, lr, r3
 800f002:	3302      	adds	r3, #2
 800f004:	9301      	str	r3, [sp, #4]
 800f006:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	e7b7      	b.n	800ef7c <uxr_read_framed_msg+0x2e4>
 800f00c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f00e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f012:	7013      	strb	r3, [r2, #0]
 800f014:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800f016:	b003      	add	sp, #12
 800f018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01c:	f103 0c01 	add.w	ip, r3, #1
 800f020:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f024:	fba5 0202 	umull	r0, r2, r5, r2
 800f028:	0892      	lsrs	r2, r2, #2
 800f02a:	202a      	movs	r0, #42	@ 0x2a
 800f02c:	fb00 c212 	mls	r2, r0, r2, ip
 800f030:	fa5f fc82 	uxtb.w	ip, r2
 800f034:	4561      	cmp	r1, ip
 800f036:	d09d      	beq.n	800ef74 <uxr_read_framed_msg+0x2dc>
 800f038:	3302      	adds	r3, #2
 800f03a:	4422      	add	r2, r4
 800f03c:	0859      	lsrs	r1, r3, #1
 800f03e:	7892      	ldrb	r2, [r2, #2]
 800f040:	fba5 c101 	umull	ip, r1, r5, r1
 800f044:	0889      	lsrs	r1, r1, #2
 800f046:	fb00 3311 	mls	r3, r0, r1, r3
 800f04a:	2a7e      	cmp	r2, #126	@ 0x7e
 800f04c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f050:	f000 80aa 	beq.w	800f1a8 <uxr_read_framed_msg+0x510>
 800f054:	f082 0220 	eor.w	r2, r2, #32
 800f058:	e654      	b.n	800ed04 <uxr_read_framed_msg+0x6c>
 800f05a:	1c58      	adds	r0, r3, #1
 800f05c:	0842      	lsrs	r2, r0, #1
 800f05e:	fba5 c202 	umull	ip, r2, r5, r2
 800f062:	0892      	lsrs	r2, r2, #2
 800f064:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f068:	fb0c 0212 	mls	r2, ip, r2, r0
 800f06c:	b2d0      	uxtb	r0, r2
 800f06e:	4281      	cmp	r1, r0
 800f070:	d08f      	beq.n	800ef92 <uxr_read_framed_msg+0x2fa>
 800f072:	4422      	add	r2, r4
 800f074:	3302      	adds	r3, #2
 800f076:	7890      	ldrb	r0, [r2, #2]
 800f078:	085a      	lsrs	r2, r3, #1
 800f07a:	fba5 1202 	umull	r1, r2, r5, r2
 800f07e:	0892      	lsrs	r2, r2, #2
 800f080:	fb0c 3312 	mls	r3, ip, r2, r3
 800f084:	287e      	cmp	r0, #126	@ 0x7e
 800f086:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f08a:	d07d      	beq.n	800f188 <uxr_read_framed_msg+0x4f0>
 800f08c:	f080 0020 	eor.w	r0, r0, #32
 800f090:	e660      	b.n	800ed54 <uxr_read_framed_msg+0xbc>
 800f092:	1c59      	adds	r1, r3, #1
 800f094:	084a      	lsrs	r2, r1, #1
 800f096:	fba5 c202 	umull	ip, r2, r5, r2
 800f09a:	0892      	lsrs	r2, r2, #2
 800f09c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f0a0:	fb0c 1212 	mls	r2, ip, r2, r1
 800f0a4:	b2d1      	uxtb	r1, r2
 800f0a6:	4288      	cmp	r0, r1
 800f0a8:	f43f af64 	beq.w	800ef74 <uxr_read_framed_msg+0x2dc>
 800f0ac:	4422      	add	r2, r4
 800f0ae:	3302      	adds	r3, #2
 800f0b0:	7891      	ldrb	r1, [r2, #2]
 800f0b2:	085a      	lsrs	r2, r3, #1
 800f0b4:	fba5 0202 	umull	r0, r2, r5, r2
 800f0b8:	0892      	lsrs	r2, r2, #2
 800f0ba:	fb0c 3312 	mls	r3, ip, r2, r3
 800f0be:	297e      	cmp	r1, #126	@ 0x7e
 800f0c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f0c4:	d070      	beq.n	800f1a8 <uxr_read_framed_msg+0x510>
 800f0c6:	f081 0120 	eor.w	r1, r1, #32
 800f0ca:	e6a3      	b.n	800ee14 <uxr_read_framed_msg+0x17c>
 800f0cc:	f103 0c01 	add.w	ip, r3, #1
 800f0d0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f0d4:	fba5 0202 	umull	r0, r2, r5, r2
 800f0d8:	0892      	lsrs	r2, r2, #2
 800f0da:	202a      	movs	r0, #42	@ 0x2a
 800f0dc:	fb00 c212 	mls	r2, r0, r2, ip
 800f0e0:	fa5f fc82 	uxtb.w	ip, r2
 800f0e4:	4561      	cmp	r1, ip
 800f0e6:	f43f af58 	beq.w	800ef9a <uxr_read_framed_msg+0x302>
 800f0ea:	4422      	add	r2, r4
 800f0ec:	3302      	adds	r3, #2
 800f0ee:	7891      	ldrb	r1, [r2, #2]
 800f0f0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f0f4:	085a      	lsrs	r2, r3, #1
 800f0f6:	fba5 c202 	umull	ip, r2, r5, r2
 800f0fa:	0892      	lsrs	r2, r2, #2
 800f0fc:	fb00 3312 	mls	r3, r0, r2, r3
 800f100:	297e      	cmp	r1, #126	@ 0x7e
 800f102:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f106:	f43f af48 	beq.w	800ef9a <uxr_read_framed_msg+0x302>
 800f10a:	f081 0120 	eor.w	r1, r1, #32
 800f10e:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f112:	e6e8      	b.n	800eee6 <uxr_read_framed_msg+0x24e>
 800f114:	1c58      	adds	r0, r3, #1
 800f116:	0842      	lsrs	r2, r0, #1
 800f118:	fba5 c202 	umull	ip, r2, r5, r2
 800f11c:	0892      	lsrs	r2, r2, #2
 800f11e:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f122:	fb0c 0212 	mls	r2, ip, r2, r0
 800f126:	b2d0      	uxtb	r0, r2
 800f128:	4281      	cmp	r1, r0
 800f12a:	f43f af32 	beq.w	800ef92 <uxr_read_framed_msg+0x2fa>
 800f12e:	4422      	add	r2, r4
 800f130:	3302      	adds	r3, #2
 800f132:	7890      	ldrb	r0, [r2, #2]
 800f134:	085a      	lsrs	r2, r3, #1
 800f136:	fba5 1202 	umull	r1, r2, r5, r2
 800f13a:	0892      	lsrs	r2, r2, #2
 800f13c:	fb0c 3312 	mls	r3, ip, r2, r3
 800f140:	287e      	cmp	r0, #126	@ 0x7e
 800f142:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f146:	d01f      	beq.n	800f188 <uxr_read_framed_msg+0x4f0>
 800f148:	f080 0020 	eor.w	r0, r0, #32
 800f14c:	e68b      	b.n	800ee66 <uxr_read_framed_msg+0x1ce>
 800f14e:	1c51      	adds	r1, r2, #1
 800f150:	084b      	lsrs	r3, r1, #1
 800f152:	fba5 c303 	umull	ip, r3, r5, r3
 800f156:	089b      	lsrs	r3, r3, #2
 800f158:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f15c:	fb0c 1313 	mls	r3, ip, r3, r1
 800f160:	b2d9      	uxtb	r1, r3
 800f162:	4288      	cmp	r0, r1
 800f164:	f43f af3d 	beq.w	800efe2 <uxr_read_framed_msg+0x34a>
 800f168:	3202      	adds	r2, #2
 800f16a:	4423      	add	r3, r4
 800f16c:	0850      	lsrs	r0, r2, #1
 800f16e:	789b      	ldrb	r3, [r3, #2]
 800f170:	fba5 1000 	umull	r1, r0, r5, r0
 800f174:	0880      	lsrs	r0, r0, #2
 800f176:	fb0c 2210 	mls	r2, ip, r0, r2
 800f17a:	2b7e      	cmp	r3, #126	@ 0x7e
 800f17c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f180:	d016      	beq.n	800f1b0 <uxr_read_framed_msg+0x518>
 800f182:	f083 0120 	eor.w	r1, r3, #32
 800f186:	e68b      	b.n	800eea0 <uxr_read_framed_msg+0x208>
 800f188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f18a:	9300      	str	r3, [sp, #0]
 800f18c:	2302      	movs	r3, #2
 800f18e:	9301      	str	r3, [sp, #4]
 800f190:	464a      	mov	r2, r9
 800f192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f194:	4641      	mov	r1, r8
 800f196:	4620      	mov	r0, r4
 800f198:	f7ff fcfc 	bl	800eb94 <uxr_framing_read_transport>
 800f19c:	2800      	cmp	r0, #0
 800f19e:	f47f aef6 	bne.w	800ef8e <uxr_read_framed_msg+0x2f6>
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	7023      	strb	r3, [r4, #0]
 800f1a6:	e588      	b.n	800ecba <uxr_read_framed_msg+0x22>
 800f1a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	e7ee      	b.n	800f18e <uxr_read_framed_msg+0x4f6>
 800f1b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	2303      	movs	r3, #3
 800f1b6:	e7ea      	b.n	800f18e <uxr_read_framed_msg+0x4f6>
 800f1b8:	ee17 8a90 	vmov	r8, s15
 800f1bc:	e6ae      	b.n	800ef1c <uxr_read_framed_msg+0x284>
 800f1be:	bf00      	nop

0800f1c0 <rcl_get_default_domain_id>:
 800f1c0:	b530      	push	{r4, r5, lr}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	b1d0      	cbz	r0, 800f200 <rcl_get_default_domain_id+0x40>
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	4669      	mov	r1, sp
 800f1ce:	4815      	ldr	r0, [pc, #84]	@ (800f224 <rcl_get_default_domain_id+0x64>)
 800f1d0:	f7fd f93a 	bl	800c448 <rcutils_get_env>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	b110      	cbz	r0, 800f1de <rcl_get_default_domain_id+0x1e>
 800f1d8:	2001      	movs	r0, #1
 800f1da:	b003      	add	sp, #12
 800f1dc:	bd30      	pop	{r4, r5, pc}
 800f1de:	9b00      	ldr	r3, [sp, #0]
 800f1e0:	b18b      	cbz	r3, 800f206 <rcl_get_default_domain_id+0x46>
 800f1e2:	7818      	ldrb	r0, [r3, #0]
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d0f8      	beq.n	800f1da <rcl_get_default_domain_id+0x1a>
 800f1e8:	a901      	add	r1, sp, #4
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	9201      	str	r2, [sp, #4]
 800f1ee:	f000 fe83 	bl	800fef8 <strtoul>
 800f1f2:	4605      	mov	r5, r0
 800f1f4:	b150      	cbz	r0, 800f20c <rcl_get_default_domain_id+0x4c>
 800f1f6:	1c43      	adds	r3, r0, #1
 800f1f8:	d00d      	beq.n	800f216 <rcl_get_default_domain_id+0x56>
 800f1fa:	6025      	str	r5, [r4, #0]
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	e7ec      	b.n	800f1da <rcl_get_default_domain_id+0x1a>
 800f200:	200b      	movs	r0, #11
 800f202:	b003      	add	sp, #12
 800f204:	bd30      	pop	{r4, r5, pc}
 800f206:	4618      	mov	r0, r3
 800f208:	b003      	add	sp, #12
 800f20a:	bd30      	pop	{r4, r5, pc}
 800f20c:	9b01      	ldr	r3, [sp, #4]
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d0f2      	beq.n	800f1fa <rcl_get_default_domain_id+0x3a>
 800f214:	e7e0      	b.n	800f1d8 <rcl_get_default_domain_id+0x18>
 800f216:	f001 f891 	bl	801033c <__errno>
 800f21a:	6803      	ldr	r3, [r0, #0]
 800f21c:	2b22      	cmp	r3, #34	@ 0x22
 800f21e:	d1ec      	bne.n	800f1fa <rcl_get_default_domain_id+0x3a>
 800f220:	e7da      	b.n	800f1d8 <rcl_get_default_domain_id+0x18>
 800f222:	bf00      	nop
 800f224:	08011b70 	.word	0x08011b70

0800f228 <rcl_expand_topic_name>:
 800f228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22c:	b08b      	sub	sp, #44	@ 0x2c
 800f22e:	9306      	str	r3, [sp, #24]
 800f230:	2800      	cmp	r0, #0
 800f232:	f000 80ad 	beq.w	800f390 <rcl_expand_topic_name+0x168>
 800f236:	460e      	mov	r6, r1
 800f238:	2900      	cmp	r1, #0
 800f23a:	f000 80a9 	beq.w	800f390 <rcl_expand_topic_name+0x168>
 800f23e:	4617      	mov	r7, r2
 800f240:	2a00      	cmp	r2, #0
 800f242:	f000 80a5 	beq.w	800f390 <rcl_expand_topic_name+0x168>
 800f246:	2b00      	cmp	r3, #0
 800f248:	f000 80a2 	beq.w	800f390 <rcl_expand_topic_name+0x168>
 800f24c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f000 809e 	beq.w	800f390 <rcl_expand_topic_name+0x168>
 800f254:	2200      	movs	r2, #0
 800f256:	a909      	add	r1, sp, #36	@ 0x24
 800f258:	4680      	mov	r8, r0
 800f25a:	f000 f9f5 	bl	800f648 <rcl_validate_topic_name>
 800f25e:	4604      	mov	r4, r0
 800f260:	2800      	cmp	r0, #0
 800f262:	f040 8096 	bne.w	800f392 <rcl_expand_topic_name+0x16a>
 800f266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f040 809a 	bne.w	800f3a2 <rcl_expand_topic_name+0x17a>
 800f26e:	4602      	mov	r2, r0
 800f270:	a909      	add	r1, sp, #36	@ 0x24
 800f272:	4630      	mov	r0, r6
 800f274:	f7fd fcea 	bl	800cc4c <rmw_validate_node_name>
 800f278:	2800      	cmp	r0, #0
 800f27a:	f040 808e 	bne.w	800f39a <rcl_expand_topic_name+0x172>
 800f27e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f280:	2a00      	cmp	r2, #0
 800f282:	f040 8093 	bne.w	800f3ac <rcl_expand_topic_name+0x184>
 800f286:	a909      	add	r1, sp, #36	@ 0x24
 800f288:	4638      	mov	r0, r7
 800f28a:	f7fd fcc1 	bl	800cc10 <rmw_validate_namespace>
 800f28e:	2800      	cmp	r0, #0
 800f290:	f040 8083 	bne.w	800f39a <rcl_expand_topic_name+0x172>
 800f294:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800f296:	2c00      	cmp	r4, #0
 800f298:	f040 80ed 	bne.w	800f476 <rcl_expand_topic_name+0x24e>
 800f29c:	217b      	movs	r1, #123	@ 0x7b
 800f29e:	4640      	mov	r0, r8
 800f2a0:	f000 ffc0 	bl	8010224 <strchr>
 800f2a4:	f898 3000 	ldrb.w	r3, [r8]
 800f2a8:	2b2f      	cmp	r3, #47	@ 0x2f
 800f2aa:	4605      	mov	r5, r0
 800f2ac:	f000 809e 	beq.w	800f3ec <rcl_expand_topic_name+0x1c4>
 800f2b0:	2b7e      	cmp	r3, #126	@ 0x7e
 800f2b2:	f040 80a2 	bne.w	800f3fa <rcl_expand_topic_name+0x1d2>
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	f7f0 ff9c 	bl	80001f4 <strlen>
 800f2bc:	4a82      	ldr	r2, [pc, #520]	@ (800f4c8 <rcl_expand_topic_name+0x2a0>)
 800f2be:	4b83      	ldr	r3, [pc, #524]	@ (800f4cc <rcl_expand_topic_name+0x2a4>)
 800f2c0:	2801      	cmp	r0, #1
 800f2c2:	bf18      	it	ne
 800f2c4:	4613      	movne	r3, r2
 800f2c6:	9302      	str	r3, [sp, #8]
 800f2c8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800f2d0:	f108 0301 	add.w	r3, r8, #1
 800f2d4:	9305      	str	r3, [sp, #20]
 800f2d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f2da:	9301      	str	r3, [sp, #4]
 800f2dc:	ab14      	add	r3, sp, #80	@ 0x50
 800f2de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f2e0:	f7fd f8da 	bl	800c498 <rcutils_format_string_limit>
 800f2e4:	4682      	mov	sl, r0
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	f000 80c7 	beq.w	800f47a <rcl_expand_topic_name+0x252>
 800f2ec:	2d00      	cmp	r5, #0
 800f2ee:	f000 80a2 	beq.w	800f436 <rcl_expand_topic_name+0x20e>
 800f2f2:	217b      	movs	r1, #123	@ 0x7b
 800f2f4:	f000 ff96 	bl	8010224 <strchr>
 800f2f8:	46d1      	mov	r9, sl
 800f2fa:	4605      	mov	r5, r0
 800f2fc:	9407      	str	r4, [sp, #28]
 800f2fe:	46d3      	mov	fp, sl
 800f300:	464c      	mov	r4, r9
 800f302:	2d00      	cmp	r5, #0
 800f304:	f000 80be 	beq.w	800f484 <rcl_expand_topic_name+0x25c>
 800f308:	217d      	movs	r1, #125	@ 0x7d
 800f30a:	4620      	mov	r0, r4
 800f30c:	f000 ff8a 	bl	8010224 <strchr>
 800f310:	eba0 0905 	sub.w	r9, r0, r5
 800f314:	f109 0a01 	add.w	sl, r9, #1
 800f318:	486d      	ldr	r0, [pc, #436]	@ (800f4d0 <rcl_expand_topic_name+0x2a8>)
 800f31a:	4652      	mov	r2, sl
 800f31c:	4629      	mov	r1, r5
 800f31e:	f000 ff8e 	bl	801023e <strncmp>
 800f322:	2800      	cmp	r0, #0
 800f324:	d067      	beq.n	800f3f6 <rcl_expand_topic_name+0x1ce>
 800f326:	486b      	ldr	r0, [pc, #428]	@ (800f4d4 <rcl_expand_topic_name+0x2ac>)
 800f328:	4652      	mov	r2, sl
 800f32a:	4629      	mov	r1, r5
 800f32c:	f000 ff87 	bl	801023e <strncmp>
 800f330:	b130      	cbz	r0, 800f340 <rcl_expand_topic_name+0x118>
 800f332:	4869      	ldr	r0, [pc, #420]	@ (800f4d8 <rcl_expand_topic_name+0x2b0>)
 800f334:	4652      	mov	r2, sl
 800f336:	4629      	mov	r1, r5
 800f338:	f000 ff81 	bl	801023e <strncmp>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	d137      	bne.n	800f3b0 <rcl_expand_topic_name+0x188>
 800f340:	46b9      	mov	r9, r7
 800f342:	ab16      	add	r3, sp, #88	@ 0x58
 800f344:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f348:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f34c:	ab14      	add	r3, sp, #80	@ 0x50
 800f34e:	4628      	mov	r0, r5
 800f350:	cb0c      	ldmia	r3, {r2, r3}
 800f352:	4651      	mov	r1, sl
 800f354:	f7fd f9dc 	bl	800c710 <rcutils_strndup>
 800f358:	4605      	mov	r5, r0
 800f35a:	2800      	cmp	r0, #0
 800f35c:	f000 809c 	beq.w	800f498 <rcl_expand_topic_name+0x270>
 800f360:	464a      	mov	r2, r9
 800f362:	4620      	mov	r0, r4
 800f364:	ab14      	add	r3, sp, #80	@ 0x50
 800f366:	4629      	mov	r1, r5
 800f368:	f7fd f8d0 	bl	800c50c <rcutils_repl_str>
 800f36c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f36e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f370:	4604      	mov	r4, r0
 800f372:	4628      	mov	r0, r5
 800f374:	4798      	blx	r3
 800f376:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f378:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f37a:	4658      	mov	r0, fp
 800f37c:	4798      	blx	r3
 800f37e:	2c00      	cmp	r4, #0
 800f380:	d07b      	beq.n	800f47a <rcl_expand_topic_name+0x252>
 800f382:	217b      	movs	r1, #123	@ 0x7b
 800f384:	4620      	mov	r0, r4
 800f386:	f000 ff4d 	bl	8010224 <strchr>
 800f38a:	46a3      	mov	fp, r4
 800f38c:	4605      	mov	r5, r0
 800f38e:	e7b8      	b.n	800f302 <rcl_expand_topic_name+0xda>
 800f390:	240b      	movs	r4, #11
 800f392:	4620      	mov	r0, r4
 800f394:	b00b      	add	sp, #44	@ 0x2c
 800f396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f39a:	f7fc f935 	bl	800b608 <rcl_convert_rmw_ret_to_rcl_ret>
 800f39e:	4604      	mov	r4, r0
 800f3a0:	e7f7      	b.n	800f392 <rcl_expand_topic_name+0x16a>
 800f3a2:	2467      	movs	r4, #103	@ 0x67
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	b00b      	add	sp, #44	@ 0x2c
 800f3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ac:	24c9      	movs	r4, #201	@ 0xc9
 800f3ae:	e7f0      	b.n	800f392 <rcl_expand_topic_name+0x16a>
 800f3b0:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800f3b4:	9806      	ldr	r0, [sp, #24]
 800f3b6:	1c69      	adds	r1, r5, #1
 800f3b8:	f7fd fac4 	bl	800c944 <rcutils_string_map_getn>
 800f3bc:	4681      	mov	r9, r0
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d1bf      	bne.n	800f342 <rcl_expand_topic_name+0x11a>
 800f3c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3c4:	aa16      	add	r2, sp, #88	@ 0x58
 800f3c6:	6018      	str	r0, [r3, #0]
 800f3c8:	ca07      	ldmia	r2, {r0, r1, r2}
 800f3ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f3ce:	ab14      	add	r3, sp, #80	@ 0x50
 800f3d0:	cb0c      	ldmia	r3, {r2, r3}
 800f3d2:	4651      	mov	r1, sl
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	f7fd f99b 	bl	800c710 <rcutils_strndup>
 800f3da:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f3dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f3de:	4798      	blx	r3
 800f3e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f3e2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f3e4:	4658      	mov	r0, fp
 800f3e6:	2469      	movs	r4, #105	@ 0x69
 800f3e8:	4798      	blx	r3
 800f3ea:	e7d2      	b.n	800f392 <rcl_expand_topic_name+0x16a>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d05b      	beq.n	800f4a8 <rcl_expand_topic_name+0x280>
 800f3f0:	46c1      	mov	r9, r8
 800f3f2:	46a2      	mov	sl, r4
 800f3f4:	e782      	b.n	800f2fc <rcl_expand_topic_name+0xd4>
 800f3f6:	46b1      	mov	r9, r6
 800f3f8:	e7a3      	b.n	800f342 <rcl_expand_topic_name+0x11a>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	d1f8      	bne.n	800f3f0 <rcl_expand_topic_name+0x1c8>
 800f3fe:	4638      	mov	r0, r7
 800f400:	f7f0 fef8 	bl	80001f4 <strlen>
 800f404:	4a35      	ldr	r2, [pc, #212]	@ (800f4dc <rcl_expand_topic_name+0x2b4>)
 800f406:	4b36      	ldr	r3, [pc, #216]	@ (800f4e0 <rcl_expand_topic_name+0x2b8>)
 800f408:	f8cd 8010 	str.w	r8, [sp, #16]
 800f40c:	2801      	cmp	r0, #1
 800f40e:	bf18      	it	ne
 800f410:	4613      	movne	r3, r2
 800f412:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f416:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800f41a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f41c:	9703      	str	r7, [sp, #12]
 800f41e:	9200      	str	r2, [sp, #0]
 800f420:	ab14      	add	r3, sp, #80	@ 0x50
 800f422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f424:	f7fd f838 	bl	800c498 <rcutils_format_string_limit>
 800f428:	4682      	mov	sl, r0
 800f42a:	4653      	mov	r3, sl
 800f42c:	b32b      	cbz	r3, 800f47a <rcl_expand_topic_name+0x252>
 800f42e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f430:	f8c3 a000 	str.w	sl, [r3]
 800f434:	e7ad      	b.n	800f392 <rcl_expand_topic_name+0x16a>
 800f436:	f89a 3000 	ldrb.w	r3, [sl]
 800f43a:	2b2f      	cmp	r3, #47	@ 0x2f
 800f43c:	d0f7      	beq.n	800f42e <rcl_expand_topic_name+0x206>
 800f43e:	4638      	mov	r0, r7
 800f440:	f7f0 fed8 	bl	80001f4 <strlen>
 800f444:	4a25      	ldr	r2, [pc, #148]	@ (800f4dc <rcl_expand_topic_name+0x2b4>)
 800f446:	4b26      	ldr	r3, [pc, #152]	@ (800f4e0 <rcl_expand_topic_name+0x2b8>)
 800f448:	f8cd a010 	str.w	sl, [sp, #16]
 800f44c:	2801      	cmp	r0, #1
 800f44e:	bf18      	it	ne
 800f450:	4613      	movne	r3, r2
 800f452:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f456:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800f45a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f45c:	9703      	str	r7, [sp, #12]
 800f45e:	9200      	str	r2, [sp, #0]
 800f460:	ab14      	add	r3, sp, #80	@ 0x50
 800f462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f464:	f7fd f818 	bl	800c498 <rcutils_format_string_limit>
 800f468:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f46a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f46c:	4605      	mov	r5, r0
 800f46e:	4650      	mov	r0, sl
 800f470:	4798      	blx	r3
 800f472:	46aa      	mov	sl, r5
 800f474:	e7d9      	b.n	800f42a <rcl_expand_topic_name+0x202>
 800f476:	24ca      	movs	r4, #202	@ 0xca
 800f478:	e78b      	b.n	800f392 <rcl_expand_topic_name+0x16a>
 800f47a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f47c:	2300      	movs	r3, #0
 800f47e:	6013      	str	r3, [r2, #0]
 800f480:	240a      	movs	r4, #10
 800f482:	e786      	b.n	800f392 <rcl_expand_topic_name+0x16a>
 800f484:	465b      	mov	r3, fp
 800f486:	9c07      	ldr	r4, [sp, #28]
 800f488:	46da      	mov	sl, fp
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1d3      	bne.n	800f436 <rcl_expand_topic_name+0x20e>
 800f48e:	f898 3000 	ldrb.w	r3, [r8]
 800f492:	2b2f      	cmp	r3, #47	@ 0x2f
 800f494:	d0cb      	beq.n	800f42e <rcl_expand_topic_name+0x206>
 800f496:	e7b2      	b.n	800f3fe <rcl_expand_topic_name+0x1d6>
 800f498:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 800f49c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f49e:	6015      	str	r5, [r2, #0]
 800f4a0:	4658      	mov	r0, fp
 800f4a2:	4798      	blx	r3
 800f4a4:	240a      	movs	r4, #10
 800f4a6:	e774      	b.n	800f392 <rcl_expand_topic_name+0x16a>
 800f4a8:	ab17      	add	r3, sp, #92	@ 0x5c
 800f4aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f4ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f4b2:	ab14      	add	r3, sp, #80	@ 0x50
 800f4b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	f7fd f908 	bl	800c6cc <rcutils_strdup>
 800f4bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	6018      	str	r0, [r3, #0]
 800f4c2:	bf08      	it	eq
 800f4c4:	240a      	moveq	r4, #10
 800f4c6:	e764      	b.n	800f392 <rcl_expand_topic_name+0x16a>
 800f4c8:	08011b80 	.word	0x08011b80
 800f4cc:	08011368 	.word	0x08011368
 800f4d0:	08011b88 	.word	0x08011b88
 800f4d4:	08011b90 	.word	0x08011b90
 800f4d8:	08011b98 	.word	0x08011b98
 800f4dc:	080114fc 	.word	0x080114fc
 800f4e0:	08011378 	.word	0x08011378

0800f4e4 <rcl_get_default_topic_name_substitutions>:
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	bf0c      	ite	eq
 800f4e8:	200b      	moveq	r0, #11
 800f4ea:	2000      	movne	r0, #0
 800f4ec:	4770      	bx	lr
 800f4ee:	bf00      	nop

0800f4f0 <rcl_get_zero_initialized_guard_condition>:
 800f4f0:	4a03      	ldr	r2, [pc, #12]	@ (800f500 <rcl_get_zero_initialized_guard_condition+0x10>)
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4f8:	e883 0003 	stmia.w	r3, {r0, r1}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	4770      	bx	lr
 800f500:	08011ba4 	.word	0x08011ba4

0800f504 <rcl_guard_condition_init_from_rmw>:
 800f504:	b082      	sub	sp, #8
 800f506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f510:	4604      	mov	r4, r0
 800f512:	f84c 3f04 	str.w	r3, [ip, #4]!
 800f516:	460e      	mov	r6, r1
 800f518:	4617      	mov	r7, r2
 800f51a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f51e:	f10d 0e04 	add.w	lr, sp, #4
 800f522:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f526:	f8dc 3000 	ldr.w	r3, [ip]
 800f52a:	f8ce 3000 	str.w	r3, [lr]
 800f52e:	a801      	add	r0, sp, #4
 800f530:	f7f7 fe6c 	bl	800720c <rcutils_allocator_is_valid>
 800f534:	b350      	cbz	r0, 800f58c <rcl_guard_condition_init_from_rmw+0x88>
 800f536:	b34c      	cbz	r4, 800f58c <rcl_guard_condition_init_from_rmw+0x88>
 800f538:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f53c:	f1b8 0f00 	cmp.w	r8, #0
 800f540:	d11e      	bne.n	800f580 <rcl_guard_condition_init_from_rmw+0x7c>
 800f542:	b31f      	cbz	r7, 800f58c <rcl_guard_condition_init_from_rmw+0x88>
 800f544:	4638      	mov	r0, r7
 800f546:	f7fc f87d 	bl	800b644 <rcl_context_is_valid>
 800f54a:	b328      	cbz	r0, 800f598 <rcl_guard_condition_init_from_rmw+0x94>
 800f54c:	9b01      	ldr	r3, [sp, #4]
 800f54e:	9905      	ldr	r1, [sp, #20]
 800f550:	201c      	movs	r0, #28
 800f552:	4798      	blx	r3
 800f554:	4605      	mov	r5, r0
 800f556:	6060      	str	r0, [r4, #4]
 800f558:	b358      	cbz	r0, 800f5b2 <rcl_guard_condition_init_from_rmw+0xae>
 800f55a:	b1fe      	cbz	r6, 800f59c <rcl_guard_condition_init_from_rmw+0x98>
 800f55c:	6006      	str	r6, [r0, #0]
 800f55e:	f880 8004 	strb.w	r8, [r0, #4]
 800f562:	ac01      	add	r4, sp, #4
 800f564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f566:	f105 0c08 	add.w	ip, r5, #8
 800f56a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f56e:	6823      	ldr	r3, [r4, #0]
 800f570:	f8cc 3000 	str.w	r3, [ip]
 800f574:	2000      	movs	r0, #0
 800f576:	b006      	add	sp, #24
 800f578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f57c:	b002      	add	sp, #8
 800f57e:	4770      	bx	lr
 800f580:	2064      	movs	r0, #100	@ 0x64
 800f582:	b006      	add	sp, #24
 800f584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f588:	b002      	add	sp, #8
 800f58a:	4770      	bx	lr
 800f58c:	200b      	movs	r0, #11
 800f58e:	b006      	add	sp, #24
 800f590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f594:	b002      	add	sp, #8
 800f596:	4770      	bx	lr
 800f598:	2065      	movs	r0, #101	@ 0x65
 800f59a:	e7f2      	b.n	800f582 <rcl_guard_condition_init_from_rmw+0x7e>
 800f59c:	6838      	ldr	r0, [r7, #0]
 800f59e:	3028      	adds	r0, #40	@ 0x28
 800f5a0:	f000 fa50 	bl	800fa44 <rmw_create_guard_condition>
 800f5a4:	6028      	str	r0, [r5, #0]
 800f5a6:	6865      	ldr	r5, [r4, #4]
 800f5a8:	682e      	ldr	r6, [r5, #0]
 800f5aa:	b126      	cbz	r6, 800f5b6 <rcl_guard_condition_init_from_rmw+0xb2>
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	712b      	strb	r3, [r5, #4]
 800f5b0:	e7d7      	b.n	800f562 <rcl_guard_condition_init_from_rmw+0x5e>
 800f5b2:	200a      	movs	r0, #10
 800f5b4:	e7e5      	b.n	800f582 <rcl_guard_condition_init_from_rmw+0x7e>
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	9b02      	ldr	r3, [sp, #8]
 800f5ba:	9905      	ldr	r1, [sp, #20]
 800f5bc:	4798      	blx	r3
 800f5be:	6066      	str	r6, [r4, #4]
 800f5c0:	2001      	movs	r0, #1
 800f5c2:	e7de      	b.n	800f582 <rcl_guard_condition_init_from_rmw+0x7e>

0800f5c4 <rcl_guard_condition_fini>:
 800f5c4:	b570      	push	{r4, r5, r6, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	b1f0      	cbz	r0, 800f608 <rcl_guard_condition_fini+0x44>
 800f5ca:	6843      	ldr	r3, [r0, #4]
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	b163      	cbz	r3, 800f5ea <rcl_guard_condition_fini+0x26>
 800f5d0:	6818      	ldr	r0, [r3, #0]
 800f5d2:	68de      	ldr	r6, [r3, #12]
 800f5d4:	6999      	ldr	r1, [r3, #24]
 800f5d6:	b160      	cbz	r0, 800f5f2 <rcl_guard_condition_fini+0x2e>
 800f5d8:	791d      	ldrb	r5, [r3, #4]
 800f5da:	b965      	cbnz	r5, 800f5f6 <rcl_guard_condition_fini+0x32>
 800f5dc:	4618      	mov	r0, r3
 800f5de:	47b0      	blx	r6
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	4628      	mov	r0, r5
 800f5e4:	6063      	str	r3, [r4, #4]
 800f5e6:	b002      	add	sp, #8
 800f5e8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ea:	461d      	mov	r5, r3
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	b002      	add	sp, #8
 800f5f0:	bd70      	pop	{r4, r5, r6, pc}
 800f5f2:	4605      	mov	r5, r0
 800f5f4:	e7f2      	b.n	800f5dc <rcl_guard_condition_fini+0x18>
 800f5f6:	9101      	str	r1, [sp, #4]
 800f5f8:	f000 fa38 	bl	800fa6c <rmw_destroy_guard_condition>
 800f5fc:	1e05      	subs	r5, r0, #0
 800f5fe:	6863      	ldr	r3, [r4, #4]
 800f600:	9901      	ldr	r1, [sp, #4]
 800f602:	bf18      	it	ne
 800f604:	2501      	movne	r5, #1
 800f606:	e7e9      	b.n	800f5dc <rcl_guard_condition_fini+0x18>
 800f608:	250b      	movs	r5, #11
 800f60a:	4628      	mov	r0, r5
 800f60c:	b002      	add	sp, #8
 800f60e:	bd70      	pop	{r4, r5, r6, pc}

0800f610 <rcl_guard_condition_get_default_options>:
 800f610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f612:	b087      	sub	sp, #28
 800f614:	4606      	mov	r6, r0
 800f616:	4668      	mov	r0, sp
 800f618:	f7f7 fdea 	bl	80071f0 <rcutils_get_default_allocator>
 800f61c:	4b09      	ldr	r3, [pc, #36]	@ (800f644 <rcl_guard_condition_get_default_options+0x34>)
 800f61e:	46ee      	mov	lr, sp
 800f620:	469c      	mov	ip, r3
 800f622:	461d      	mov	r5, r3
 800f624:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f628:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f62c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f62e:	4634      	mov	r4, r6
 800f630:	f8de 7000 	ldr.w	r7, [lr]
 800f634:	f8cc 7000 	str.w	r7, [ip]
 800f638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f63a:	4630      	mov	r0, r6
 800f63c:	6027      	str	r7, [r4, #0]
 800f63e:	b007      	add	sp, #28
 800f640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f642:	bf00      	nop
 800f644:	2000dab4 	.word	0x2000dab4

0800f648 <rcl_validate_topic_name>:
 800f648:	2800      	cmp	r0, #0
 800f64a:	d07a      	beq.n	800f742 <rcl_validate_topic_name+0xfa>
 800f64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f650:	460e      	mov	r6, r1
 800f652:	2900      	cmp	r1, #0
 800f654:	d07c      	beq.n	800f750 <rcl_validate_topic_name+0x108>
 800f656:	4617      	mov	r7, r2
 800f658:	4605      	mov	r5, r0
 800f65a:	f7f0 fdcb 	bl	80001f4 <strlen>
 800f65e:	b1b0      	cbz	r0, 800f68e <rcl_validate_topic_name+0x46>
 800f660:	f895 9000 	ldrb.w	r9, [r5]
 800f664:	f8df c180 	ldr.w	ip, [pc, #384]	@ 800f7e8 <rcl_validate_topic_name+0x1a0>
 800f668:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800f66c:	f013 0304 	ands.w	r3, r3, #4
 800f670:	d169      	bne.n	800f746 <rcl_validate_topic_name+0xfe>
 800f672:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800f676:	f815 2008 	ldrb.w	r2, [r5, r8]
 800f67a:	2a2f      	cmp	r2, #47	@ 0x2f
 800f67c:	d10e      	bne.n	800f69c <rcl_validate_topic_name+0x54>
 800f67e:	2202      	movs	r2, #2
 800f680:	6032      	str	r2, [r6, #0]
 800f682:	b36f      	cbz	r7, 800f6e0 <rcl_validate_topic_name+0x98>
 800f684:	f8c7 8000 	str.w	r8, [r7]
 800f688:	4618      	mov	r0, r3
 800f68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68e:	2301      	movs	r3, #1
 800f690:	6033      	str	r3, [r6, #0]
 800f692:	b32f      	cbz	r7, 800f6e0 <rcl_validate_topic_name+0x98>
 800f694:	2000      	movs	r0, #0
 800f696:	6038      	str	r0, [r7, #0]
 800f698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f69c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 800f6a0:	461c      	mov	r4, r3
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800f6a8:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f6ac:	f1be 0f09 	cmp.w	lr, #9
 800f6b0:	d919      	bls.n	800f6e6 <rcl_validate_topic_name+0x9e>
 800f6b2:	f022 0e20 	bic.w	lr, r2, #32
 800f6b6:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 800f6ba:	f1be 0f19 	cmp.w	lr, #25
 800f6be:	d912      	bls.n	800f6e6 <rcl_validate_topic_name+0x9e>
 800f6c0:	2a5f      	cmp	r2, #95	@ 0x5f
 800f6c2:	d019      	beq.n	800f6f8 <rcl_validate_topic_name+0xb0>
 800f6c4:	2a2f      	cmp	r2, #47	@ 0x2f
 800f6c6:	d051      	beq.n	800f76c <rcl_validate_topic_name+0x124>
 800f6c8:	2a7e      	cmp	r2, #126	@ 0x7e
 800f6ca:	d048      	beq.n	800f75e <rcl_validate_topic_name+0x116>
 800f6cc:	2a7b      	cmp	r2, #123	@ 0x7b
 800f6ce:	d054      	beq.n	800f77a <rcl_validate_topic_name+0x132>
 800f6d0:	2a7d      	cmp	r2, #125	@ 0x7d
 800f6d2:	d161      	bne.n	800f798 <rcl_validate_topic_name+0x150>
 800f6d4:	2c00      	cmp	r4, #0
 800f6d6:	d155      	bne.n	800f784 <rcl_validate_topic_name+0x13c>
 800f6d8:	2305      	movs	r3, #5
 800f6da:	6033      	str	r3, [r6, #0]
 800f6dc:	b107      	cbz	r7, 800f6e0 <rcl_validate_topic_name+0x98>
 800f6de:	6039      	str	r1, [r7, #0]
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6e6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800f6ea:	0752      	lsls	r2, r2, #29
 800f6ec:	d504      	bpl.n	800f6f8 <rcl_validate_topic_name+0xb0>
 800f6ee:	b11c      	cbz	r4, 800f6f8 <rcl_validate_topic_name+0xb0>
 800f6f0:	b111      	cbz	r1, 800f6f8 <rcl_validate_topic_name+0xb0>
 800f6f2:	1e4a      	subs	r2, r1, #1
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d02d      	beq.n	800f754 <rcl_validate_topic_name+0x10c>
 800f6f8:	3101      	adds	r1, #1
 800f6fa:	4288      	cmp	r0, r1
 800f6fc:	d1d2      	bne.n	800f6a4 <rcl_validate_topic_name+0x5c>
 800f6fe:	2c00      	cmp	r4, #0
 800f700:	d145      	bne.n	800f78e <rcl_validate_topic_name+0x146>
 800f702:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 800f706:	d04f      	beq.n	800f7a8 <rcl_validate_topic_name+0x160>
 800f708:	4620      	mov	r0, r4
 800f70a:	2301      	movs	r3, #1
 800f70c:	e006      	b.n	800f71c <rcl_validate_topic_name+0xd4>
 800f70e:	428b      	cmp	r3, r1
 800f710:	f105 0501 	add.w	r5, r5, #1
 800f714:	f103 0201 	add.w	r2, r3, #1
 800f718:	d236      	bcs.n	800f788 <rcl_validate_topic_name+0x140>
 800f71a:	4613      	mov	r3, r2
 800f71c:	4580      	cmp	r8, r0
 800f71e:	f100 0001 	add.w	r0, r0, #1
 800f722:	d0f4      	beq.n	800f70e <rcl_validate_topic_name+0xc6>
 800f724:	782a      	ldrb	r2, [r5, #0]
 800f726:	2a2f      	cmp	r2, #47	@ 0x2f
 800f728:	d1f1      	bne.n	800f70e <rcl_validate_topic_name+0xc6>
 800f72a:	786a      	ldrb	r2, [r5, #1]
 800f72c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800f730:	0754      	lsls	r4, r2, #29
 800f732:	d5ec      	bpl.n	800f70e <rcl_validate_topic_name+0xc6>
 800f734:	2204      	movs	r2, #4
 800f736:	6032      	str	r2, [r6, #0]
 800f738:	2f00      	cmp	r7, #0
 800f73a:	d0d1      	beq.n	800f6e0 <rcl_validate_topic_name+0x98>
 800f73c:	603b      	str	r3, [r7, #0]
 800f73e:	2000      	movs	r0, #0
 800f740:	e7aa      	b.n	800f698 <rcl_validate_topic_name+0x50>
 800f742:	200b      	movs	r0, #11
 800f744:	4770      	bx	lr
 800f746:	2304      	movs	r3, #4
 800f748:	6033      	str	r3, [r6, #0]
 800f74a:	2f00      	cmp	r7, #0
 800f74c:	d1a2      	bne.n	800f694 <rcl_validate_topic_name+0x4c>
 800f74e:	e7c7      	b.n	800f6e0 <rcl_validate_topic_name+0x98>
 800f750:	200b      	movs	r0, #11
 800f752:	e7a1      	b.n	800f698 <rcl_validate_topic_name+0x50>
 800f754:	2309      	movs	r3, #9
 800f756:	6033      	str	r3, [r6, #0]
 800f758:	2f00      	cmp	r7, #0
 800f75a:	d1c0      	bne.n	800f6de <rcl_validate_topic_name+0x96>
 800f75c:	e7c0      	b.n	800f6e0 <rcl_validate_topic_name+0x98>
 800f75e:	2900      	cmp	r1, #0
 800f760:	d0ca      	beq.n	800f6f8 <rcl_validate_topic_name+0xb0>
 800f762:	2306      	movs	r3, #6
 800f764:	6033      	str	r3, [r6, #0]
 800f766:	2f00      	cmp	r7, #0
 800f768:	d1b9      	bne.n	800f6de <rcl_validate_topic_name+0x96>
 800f76a:	e7b9      	b.n	800f6e0 <rcl_validate_topic_name+0x98>
 800f76c:	2c00      	cmp	r4, #0
 800f76e:	d0c3      	beq.n	800f6f8 <rcl_validate_topic_name+0xb0>
 800f770:	2308      	movs	r3, #8
 800f772:	6033      	str	r3, [r6, #0]
 800f774:	2f00      	cmp	r7, #0
 800f776:	d1b2      	bne.n	800f6de <rcl_validate_topic_name+0x96>
 800f778:	e7b2      	b.n	800f6e0 <rcl_validate_topic_name+0x98>
 800f77a:	2c00      	cmp	r4, #0
 800f77c:	d1f8      	bne.n	800f770 <rcl_validate_topic_name+0x128>
 800f77e:	460b      	mov	r3, r1
 800f780:	2401      	movs	r4, #1
 800f782:	e7b9      	b.n	800f6f8 <rcl_validate_topic_name+0xb0>
 800f784:	2400      	movs	r4, #0
 800f786:	e7b7      	b.n	800f6f8 <rcl_validate_topic_name+0xb0>
 800f788:	2000      	movs	r0, #0
 800f78a:	6030      	str	r0, [r6, #0]
 800f78c:	e784      	b.n	800f698 <rcl_validate_topic_name+0x50>
 800f78e:	2205      	movs	r2, #5
 800f790:	6032      	str	r2, [r6, #0]
 800f792:	2f00      	cmp	r7, #0
 800f794:	d1d2      	bne.n	800f73c <rcl_validate_topic_name+0xf4>
 800f796:	e7a3      	b.n	800f6e0 <rcl_validate_topic_name+0x98>
 800f798:	2c00      	cmp	r4, #0
 800f79a:	bf14      	ite	ne
 800f79c:	2308      	movne	r3, #8
 800f79e:	2303      	moveq	r3, #3
 800f7a0:	6033      	str	r3, [r6, #0]
 800f7a2:	2f00      	cmp	r7, #0
 800f7a4:	d19b      	bne.n	800f6de <rcl_validate_topic_name+0x96>
 800f7a6:	e79b      	b.n	800f6e0 <rcl_validate_topic_name+0x98>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e00a      	b.n	800f7c2 <rcl_validate_topic_name+0x17a>
 800f7ac:	2c01      	cmp	r4, #1
 800f7ae:	d013      	beq.n	800f7d8 <rcl_validate_topic_name+0x190>
 800f7b0:	4299      	cmp	r1, r3
 800f7b2:	f104 0401 	add.w	r4, r4, #1
 800f7b6:	f105 0501 	add.w	r5, r5, #1
 800f7ba:	f103 0201 	add.w	r2, r3, #1
 800f7be:	d9e3      	bls.n	800f788 <rcl_validate_topic_name+0x140>
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	45a0      	cmp	r8, r4
 800f7c4:	d0f4      	beq.n	800f7b0 <rcl_validate_topic_name+0x168>
 800f7c6:	782a      	ldrb	r2, [r5, #0]
 800f7c8:	2a2f      	cmp	r2, #47	@ 0x2f
 800f7ca:	d1ef      	bne.n	800f7ac <rcl_validate_topic_name+0x164>
 800f7cc:	786a      	ldrb	r2, [r5, #1]
 800f7ce:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800f7d2:	0752      	lsls	r2, r2, #29
 800f7d4:	d5ec      	bpl.n	800f7b0 <rcl_validate_topic_name+0x168>
 800f7d6:	e7ad      	b.n	800f734 <rcl_validate_topic_name+0xec>
 800f7d8:	2307      	movs	r3, #7
 800f7da:	6033      	str	r3, [r6, #0]
 800f7dc:	2f00      	cmp	r7, #0
 800f7de:	f43f af7f 	beq.w	800f6e0 <rcl_validate_topic_name+0x98>
 800f7e2:	603c      	str	r4, [r7, #0]
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	e757      	b.n	800f698 <rcl_validate_topic_name+0x50>
 800f7e8:	08011c1c 	.word	0x08011c1c

0800f7ec <on_status>:
 800f7ec:	b082      	sub	sp, #8
 800f7ee:	b002      	add	sp, #8
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop

0800f7f4 <on_topic>:
 800f7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f8:	4a22      	ldr	r2, [pc, #136]	@ (800f884 <on_topic+0x90>)
 800f7fa:	b094      	sub	sp, #80	@ 0x50
 800f7fc:	6812      	ldr	r2, [r2, #0]
 800f7fe:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800f800:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800f804:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 800f808:	b3c2      	cbz	r2, 800f87c <on_topic+0x88>
 800f80a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 800f80e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 800f812:	e001      	b.n	800f818 <on_topic+0x24>
 800f814:	6852      	ldr	r2, [r2, #4]
 800f816:	b38a      	cbz	r2, 800f87c <on_topic+0x88>
 800f818:	6894      	ldr	r4, [r2, #8]
 800f81a:	8aa3      	ldrh	r3, [r4, #20]
 800f81c:	428b      	cmp	r3, r1
 800f81e:	d1f9      	bne.n	800f814 <on_topic+0x20>
 800f820:	7da3      	ldrb	r3, [r4, #22]
 800f822:	4283      	cmp	r3, r0
 800f824:	d1f6      	bne.n	800f814 <on_topic+0x20>
 800f826:	2248      	movs	r2, #72	@ 0x48
 800f828:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f82c:	4668      	mov	r0, sp
 800f82e:	f000 fdba 	bl	80103a6 <memcpy>
 800f832:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800f836:	cb0c      	ldmia	r3, {r2, r3}
 800f838:	4620      	mov	r0, r4
 800f83a:	f7f8 f8c9 	bl	80079d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 800f83e:	4607      	mov	r7, r0
 800f840:	b1e0      	cbz	r0, 800f87c <on_topic+0x88>
 800f842:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800f846:	4632      	mov	r2, r6
 800f848:	4628      	mov	r0, r5
 800f84a:	f108 0110 	add.w	r1, r8, #16
 800f84e:	f7fe f831 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800f852:	b930      	cbnz	r0, 800f862 <on_topic+0x6e>
 800f854:	480c      	ldr	r0, [pc, #48]	@ (800f888 <on_topic+0x94>)
 800f856:	4639      	mov	r1, r7
 800f858:	b014      	add	sp, #80	@ 0x50
 800f85a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f85e:	f7fd ba63 	b.w	800cd28 <put_memory>
 800f862:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 800f866:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 800f86a:	f7fd ff19 	bl	800d6a0 <rmw_uros_epoch_nanos>
 800f86e:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 800f872:	2305      	movs	r3, #5
 800f874:	e942 0102 	strd	r0, r1, [r2, #-8]
 800f878:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 800f87c:	b014      	add	sp, #80	@ 0x50
 800f87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f882:	bf00      	nop
 800f884:	2000d984 	.word	0x2000d984
 800f888:	2000d974 	.word	0x2000d974

0800f88c <on_request>:
 800f88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f890:	4823      	ldr	r0, [pc, #140]	@ (800f920 <on_request+0x94>)
 800f892:	b094      	sub	sp, #80	@ 0x50
 800f894:	6800      	ldr	r0, [r0, #0]
 800f896:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800f898:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800f89c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	d03b      	beq.n	800f91a <on_request+0x8e>
 800f8a2:	461d      	mov	r5, r3
 800f8a4:	e001      	b.n	800f8aa <on_request+0x1e>
 800f8a6:	6840      	ldr	r0, [r0, #4]
 800f8a8:	b3b8      	cbz	r0, 800f91a <on_request+0x8e>
 800f8aa:	6884      	ldr	r4, [r0, #8]
 800f8ac:	8b21      	ldrh	r1, [r4, #24]
 800f8ae:	4291      	cmp	r1, r2
 800f8b0:	d1f9      	bne.n	800f8a6 <on_request+0x1a>
 800f8b2:	2248      	movs	r2, #72	@ 0x48
 800f8b4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800f8b8:	4668      	mov	r0, sp
 800f8ba:	f000 fd74 	bl	80103a6 <memcpy>
 800f8be:	f104 0320 	add.w	r3, r4, #32
 800f8c2:	cb0c      	ldmia	r3, {r2, r3}
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f7f8 f883 	bl	80079d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 800f8ca:	4680      	mov	r8, r0
 800f8cc:	b328      	cbz	r0, 800f91a <on_request+0x8e>
 800f8ce:	4638      	mov	r0, r7
 800f8d0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800f8d4:	4632      	mov	r2, r6
 800f8d6:	f107 0110 	add.w	r1, r7, #16
 800f8da:	f7fd ffeb 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800f8de:	b930      	cbnz	r0, 800f8ee <on_request+0x62>
 800f8e0:	4810      	ldr	r0, [pc, #64]	@ (800f924 <on_request+0x98>)
 800f8e2:	4641      	mov	r1, r8
 800f8e4:	b014      	add	sp, #80	@ 0x50
 800f8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ea:	f7fd ba1d 	b.w	800cd28 <put_memory>
 800f8ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8f0:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 800f8f4:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800f8f8:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800f8fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f900:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f904:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f908:	f7fd feca 	bl	800d6a0 <rmw_uros_epoch_nanos>
 800f90c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800f910:	2303      	movs	r3, #3
 800f912:	e942 0102 	strd	r0, r1, [r2, #-8]
 800f916:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800f91a:	b014      	add	sp, #80	@ 0x50
 800f91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f920:	2000d954 	.word	0x2000d954
 800f924:	2000d974 	.word	0x2000d974

0800f928 <on_reply>:
 800f928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f92c:	4821      	ldr	r0, [pc, #132]	@ (800f9b4 <on_reply+0x8c>)
 800f92e:	b094      	sub	sp, #80	@ 0x50
 800f930:	6800      	ldr	r0, [r0, #0]
 800f932:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800f934:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800f938:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f93a:	b3b8      	cbz	r0, 800f9ac <on_reply+0x84>
 800f93c:	461d      	mov	r5, r3
 800f93e:	e001      	b.n	800f944 <on_reply+0x1c>
 800f940:	6840      	ldr	r0, [r0, #4]
 800f942:	b398      	cbz	r0, 800f9ac <on_reply+0x84>
 800f944:	6884      	ldr	r4, [r0, #8]
 800f946:	8b21      	ldrh	r1, [r4, #24]
 800f948:	4291      	cmp	r1, r2
 800f94a:	d1f9      	bne.n	800f940 <on_reply+0x18>
 800f94c:	2248      	movs	r2, #72	@ 0x48
 800f94e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800f952:	4668      	mov	r0, sp
 800f954:	f000 fd27 	bl	80103a6 <memcpy>
 800f958:	f104 0320 	add.w	r3, r4, #32
 800f95c:	cb0c      	ldmia	r3, {r2, r3}
 800f95e:	4620      	mov	r0, r4
 800f960:	f7f8 f836 	bl	80079d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 800f964:	4680      	mov	r8, r0
 800f966:	b308      	cbz	r0, 800f9ac <on_reply+0x84>
 800f968:	4638      	mov	r0, r7
 800f96a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800f96e:	4632      	mov	r2, r6
 800f970:	f107 0110 	add.w	r1, r7, #16
 800f974:	f7fd ff9e 	bl	800d8b4 <ucdr_deserialize_array_uint8_t>
 800f978:	b930      	cbnz	r0, 800f988 <on_reply+0x60>
 800f97a:	480f      	ldr	r0, [pc, #60]	@ (800f9b8 <on_reply+0x90>)
 800f97c:	4641      	mov	r1, r8
 800f97e:	b014      	add	sp, #80	@ 0x50
 800f980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f984:	f7fd b9d0 	b.w	800cd28 <put_memory>
 800f988:	2200      	movs	r2, #0
 800f98a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 800f98e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800f992:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800f996:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 800f99a:	f7fd fe81 	bl	800d6a0 <rmw_uros_epoch_nanos>
 800f99e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800f9a2:	2304      	movs	r3, #4
 800f9a4:	e942 0102 	strd	r0, r1, [r2, #-8]
 800f9a8:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800f9ac:	b014      	add	sp, #80	@ 0x50
 800f9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b2:	bf00      	nop
 800f9b4:	20009068 	.word	0x20009068
 800f9b8:	2000d974 	.word	0x2000d974

0800f9bc <rmw_destroy_client>:
 800f9bc:	b570      	push	{r4, r5, r6, lr}
 800f9be:	b128      	cbz	r0, 800f9cc <rmw_destroy_client+0x10>
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	6800      	ldr	r0, [r0, #0]
 800f9c4:	460d      	mov	r5, r1
 800f9c6:	f7f8 f8d3 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 800f9ca:	b910      	cbnz	r0, 800f9d2 <rmw_destroy_client+0x16>
 800f9cc:	2401      	movs	r4, #1
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	bd70      	pop	{r4, r5, r6, pc}
 800f9d2:	6863      	ldr	r3, [r4, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d0f9      	beq.n	800f9cc <rmw_destroy_client+0x10>
 800f9d8:	2d00      	cmp	r5, #0
 800f9da:	d0f7      	beq.n	800f9cc <rmw_destroy_client+0x10>
 800f9dc:	6828      	ldr	r0, [r5, #0]
 800f9de:	f7f8 f8c7 	bl	8007b70 <is_uxrce_rmw_identifier_valid>
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	d0f2      	beq.n	800f9cc <rmw_destroy_client+0x10>
 800f9e6:	686e      	ldr	r6, [r5, #4]
 800f9e8:	2e00      	cmp	r6, #0
 800f9ea:	d0ef      	beq.n	800f9cc <rmw_destroy_client+0x10>
 800f9ec:	6864      	ldr	r4, [r4, #4]
 800f9ee:	6932      	ldr	r2, [r6, #16]
 800f9f0:	6920      	ldr	r0, [r4, #16]
 800f9f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f9f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9fa:	6819      	ldr	r1, [r3, #0]
 800f9fc:	f7fe fe38 	bl	800e670 <uxr_buffer_cancel_data>
 800fa00:	4602      	mov	r2, r0
 800fa02:	6920      	ldr	r0, [r4, #16]
 800fa04:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa0c:	f7f8 f830 	bl	8007a70 <run_xrce_session>
 800fa10:	6920      	ldr	r0, [r4, #16]
 800fa12:	6932      	ldr	r2, [r6, #16]
 800fa14:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa1c:	6819      	ldr	r1, [r3, #0]
 800fa1e:	f7f9 f963 	bl	8008ce8 <uxr_buffer_delete_entity>
 800fa22:	4602      	mov	r2, r0
 800fa24:	6920      	ldr	r0, [r4, #16]
 800fa26:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa2a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa2e:	f7f8 f81f 	bl	8007a70 <run_xrce_session>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	4628      	mov	r0, r5
 800fa36:	bf14      	ite	ne
 800fa38:	2400      	movne	r4, #0
 800fa3a:	2402      	moveq	r4, #2
 800fa3c:	f7f7 ffa6 	bl	800798c <rmw_uxrce_fini_client_memory>
 800fa40:	e7c5      	b.n	800f9ce <rmw_destroy_client+0x12>
 800fa42:	bf00      	nop

0800fa44 <rmw_create_guard_condition>:
 800fa44:	b538      	push	{r3, r4, r5, lr}
 800fa46:	4605      	mov	r5, r0
 800fa48:	4807      	ldr	r0, [pc, #28]	@ (800fa68 <rmw_create_guard_condition+0x24>)
 800fa4a:	f7fd f95d 	bl	800cd08 <get_memory>
 800fa4e:	b148      	cbz	r0, 800fa64 <rmw_create_guard_condition+0x20>
 800fa50:	6884      	ldr	r4, [r0, #8]
 800fa52:	2300      	movs	r3, #0
 800fa54:	7423      	strb	r3, [r4, #16]
 800fa56:	61e5      	str	r5, [r4, #28]
 800fa58:	f7fd f97a 	bl	800cd50 <rmw_get_implementation_identifier>
 800fa5c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 800fa60:	f104 0014 	add.w	r0, r4, #20
 800fa64:	bd38      	pop	{r3, r4, r5, pc}
 800fa66:	bf00      	nop
 800fa68:	2000d914 	.word	0x2000d914

0800fa6c <rmw_destroy_guard_condition>:
 800fa6c:	b508      	push	{r3, lr}
 800fa6e:	4b08      	ldr	r3, [pc, #32]	@ (800fa90 <rmw_destroy_guard_condition+0x24>)
 800fa70:	6819      	ldr	r1, [r3, #0]
 800fa72:	b911      	cbnz	r1, 800fa7a <rmw_destroy_guard_condition+0xe>
 800fa74:	e00a      	b.n	800fa8c <rmw_destroy_guard_condition+0x20>
 800fa76:	6849      	ldr	r1, [r1, #4]
 800fa78:	b141      	cbz	r1, 800fa8c <rmw_destroy_guard_condition+0x20>
 800fa7a:	688b      	ldr	r3, [r1, #8]
 800fa7c:	3314      	adds	r3, #20
 800fa7e:	4298      	cmp	r0, r3
 800fa80:	d1f9      	bne.n	800fa76 <rmw_destroy_guard_condition+0xa>
 800fa82:	4803      	ldr	r0, [pc, #12]	@ (800fa90 <rmw_destroy_guard_condition+0x24>)
 800fa84:	f7fd f950 	bl	800cd28 <put_memory>
 800fa88:	2000      	movs	r0, #0
 800fa8a:	bd08      	pop	{r3, pc}
 800fa8c:	2001      	movs	r0, #1
 800fa8e:	bd08      	pop	{r3, pc}
 800fa90:	2000d914 	.word	0x2000d914

0800fa94 <calloc>:
 800fa94:	4b02      	ldr	r3, [pc, #8]	@ (800faa0 <calloc+0xc>)
 800fa96:	460a      	mov	r2, r1
 800fa98:	4601      	mov	r1, r0
 800fa9a:	6818      	ldr	r0, [r3, #0]
 800fa9c:	f000 b802 	b.w	800faa4 <_calloc_r>
 800faa0:	200000c0 	.word	0x200000c0

0800faa4 <_calloc_r>:
 800faa4:	b570      	push	{r4, r5, r6, lr}
 800faa6:	fba1 5402 	umull	r5, r4, r1, r2
 800faaa:	b93c      	cbnz	r4, 800fabc <_calloc_r+0x18>
 800faac:	4629      	mov	r1, r5
 800faae:	f000 f887 	bl	800fbc0 <_malloc_r>
 800fab2:	4606      	mov	r6, r0
 800fab4:	b928      	cbnz	r0, 800fac2 <_calloc_r+0x1e>
 800fab6:	2600      	movs	r6, #0
 800fab8:	4630      	mov	r0, r6
 800faba:	bd70      	pop	{r4, r5, r6, pc}
 800fabc:	220c      	movs	r2, #12
 800fabe:	6002      	str	r2, [r0, #0]
 800fac0:	e7f9      	b.n	800fab6 <_calloc_r+0x12>
 800fac2:	462a      	mov	r2, r5
 800fac4:	4621      	mov	r1, r4
 800fac6:	f000 fba5 	bl	8010214 <memset>
 800faca:	e7f5      	b.n	800fab8 <_calloc_r+0x14>

0800facc <getenv>:
 800facc:	b507      	push	{r0, r1, r2, lr}
 800face:	4b04      	ldr	r3, [pc, #16]	@ (800fae0 <getenv+0x14>)
 800fad0:	4601      	mov	r1, r0
 800fad2:	aa01      	add	r2, sp, #4
 800fad4:	6818      	ldr	r0, [r3, #0]
 800fad6:	f000 f805 	bl	800fae4 <_findenv_r>
 800fada:	b003      	add	sp, #12
 800fadc:	f85d fb04 	ldr.w	pc, [sp], #4
 800fae0:	200000c0 	.word	0x200000c0

0800fae4 <_findenv_r>:
 800fae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800fb58 <_findenv_r+0x74>
 800faec:	4606      	mov	r6, r0
 800faee:	4689      	mov	r9, r1
 800faf0:	4617      	mov	r7, r2
 800faf2:	f000 fc85 	bl	8010400 <__env_lock>
 800faf6:	f8da 4000 	ldr.w	r4, [sl]
 800fafa:	b134      	cbz	r4, 800fb0a <_findenv_r+0x26>
 800fafc:	464b      	mov	r3, r9
 800fafe:	4698      	mov	r8, r3
 800fb00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb04:	b13a      	cbz	r2, 800fb16 <_findenv_r+0x32>
 800fb06:	2a3d      	cmp	r2, #61	@ 0x3d
 800fb08:	d1f9      	bne.n	800fafe <_findenv_r+0x1a>
 800fb0a:	4630      	mov	r0, r6
 800fb0c:	f000 fc7e 	bl	801040c <__env_unlock>
 800fb10:	2000      	movs	r0, #0
 800fb12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb16:	eba8 0809 	sub.w	r8, r8, r9
 800fb1a:	46a3      	mov	fp, r4
 800fb1c:	f854 0b04 	ldr.w	r0, [r4], #4
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d0f2      	beq.n	800fb0a <_findenv_r+0x26>
 800fb24:	4642      	mov	r2, r8
 800fb26:	4649      	mov	r1, r9
 800fb28:	f000 fb89 	bl	801023e <strncmp>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	d1f4      	bne.n	800fb1a <_findenv_r+0x36>
 800fb30:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fb34:	eb03 0508 	add.w	r5, r3, r8
 800fb38:	f813 3008 	ldrb.w	r3, [r3, r8]
 800fb3c:	2b3d      	cmp	r3, #61	@ 0x3d
 800fb3e:	d1ec      	bne.n	800fb1a <_findenv_r+0x36>
 800fb40:	f8da 3000 	ldr.w	r3, [sl]
 800fb44:	ebab 0303 	sub.w	r3, fp, r3
 800fb48:	109b      	asrs	r3, r3, #2
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	603b      	str	r3, [r7, #0]
 800fb4e:	f000 fc5d 	bl	801040c <__env_unlock>
 800fb52:	1c68      	adds	r0, r5, #1
 800fb54:	e7dd      	b.n	800fb12 <_findenv_r+0x2e>
 800fb56:	bf00      	nop
 800fb58:	20000000 	.word	0x20000000

0800fb5c <malloc>:
 800fb5c:	4b02      	ldr	r3, [pc, #8]	@ (800fb68 <malloc+0xc>)
 800fb5e:	4601      	mov	r1, r0
 800fb60:	6818      	ldr	r0, [r3, #0]
 800fb62:	f000 b82d 	b.w	800fbc0 <_malloc_r>
 800fb66:	bf00      	nop
 800fb68:	200000c0 	.word	0x200000c0

0800fb6c <free>:
 800fb6c:	4b02      	ldr	r3, [pc, #8]	@ (800fb78 <free+0xc>)
 800fb6e:	4601      	mov	r1, r0
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	f000 bc51 	b.w	8010418 <_free_r>
 800fb76:	bf00      	nop
 800fb78:	200000c0 	.word	0x200000c0

0800fb7c <sbrk_aligned>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	4e0f      	ldr	r6, [pc, #60]	@ (800fbbc <sbrk_aligned+0x40>)
 800fb80:	460c      	mov	r4, r1
 800fb82:	6831      	ldr	r1, [r6, #0]
 800fb84:	4605      	mov	r5, r0
 800fb86:	b911      	cbnz	r1, 800fb8e <sbrk_aligned+0x12>
 800fb88:	f000 fbb6 	bl	80102f8 <_sbrk_r>
 800fb8c:	6030      	str	r0, [r6, #0]
 800fb8e:	4621      	mov	r1, r4
 800fb90:	4628      	mov	r0, r5
 800fb92:	f000 fbb1 	bl	80102f8 <_sbrk_r>
 800fb96:	1c43      	adds	r3, r0, #1
 800fb98:	d103      	bne.n	800fba2 <sbrk_aligned+0x26>
 800fb9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fb9e:	4620      	mov	r0, r4
 800fba0:	bd70      	pop	{r4, r5, r6, pc}
 800fba2:	1cc4      	adds	r4, r0, #3
 800fba4:	f024 0403 	bic.w	r4, r4, #3
 800fba8:	42a0      	cmp	r0, r4
 800fbaa:	d0f8      	beq.n	800fb9e <sbrk_aligned+0x22>
 800fbac:	1a21      	subs	r1, r4, r0
 800fbae:	4628      	mov	r0, r5
 800fbb0:	f000 fba2 	bl	80102f8 <_sbrk_r>
 800fbb4:	3001      	adds	r0, #1
 800fbb6:	d1f2      	bne.n	800fb9e <sbrk_aligned+0x22>
 800fbb8:	e7ef      	b.n	800fb9a <sbrk_aligned+0x1e>
 800fbba:	bf00      	nop
 800fbbc:	2000dac8 	.word	0x2000dac8

0800fbc0 <_malloc_r>:
 800fbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbc4:	1ccd      	adds	r5, r1, #3
 800fbc6:	f025 0503 	bic.w	r5, r5, #3
 800fbca:	3508      	adds	r5, #8
 800fbcc:	2d0c      	cmp	r5, #12
 800fbce:	bf38      	it	cc
 800fbd0:	250c      	movcc	r5, #12
 800fbd2:	2d00      	cmp	r5, #0
 800fbd4:	4606      	mov	r6, r0
 800fbd6:	db01      	blt.n	800fbdc <_malloc_r+0x1c>
 800fbd8:	42a9      	cmp	r1, r5
 800fbda:	d904      	bls.n	800fbe6 <_malloc_r+0x26>
 800fbdc:	230c      	movs	r3, #12
 800fbde:	6033      	str	r3, [r6, #0]
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fcbc <_malloc_r+0xfc>
 800fbea:	f000 f869 	bl	800fcc0 <__malloc_lock>
 800fbee:	f8d8 3000 	ldr.w	r3, [r8]
 800fbf2:	461c      	mov	r4, r3
 800fbf4:	bb44      	cbnz	r4, 800fc48 <_malloc_r+0x88>
 800fbf6:	4629      	mov	r1, r5
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f7ff ffbf 	bl	800fb7c <sbrk_aligned>
 800fbfe:	1c43      	adds	r3, r0, #1
 800fc00:	4604      	mov	r4, r0
 800fc02:	d158      	bne.n	800fcb6 <_malloc_r+0xf6>
 800fc04:	f8d8 4000 	ldr.w	r4, [r8]
 800fc08:	4627      	mov	r7, r4
 800fc0a:	2f00      	cmp	r7, #0
 800fc0c:	d143      	bne.n	800fc96 <_malloc_r+0xd6>
 800fc0e:	2c00      	cmp	r4, #0
 800fc10:	d04b      	beq.n	800fcaa <_malloc_r+0xea>
 800fc12:	6823      	ldr	r3, [r4, #0]
 800fc14:	4639      	mov	r1, r7
 800fc16:	4630      	mov	r0, r6
 800fc18:	eb04 0903 	add.w	r9, r4, r3
 800fc1c:	f000 fb6c 	bl	80102f8 <_sbrk_r>
 800fc20:	4581      	cmp	r9, r0
 800fc22:	d142      	bne.n	800fcaa <_malloc_r+0xea>
 800fc24:	6821      	ldr	r1, [r4, #0]
 800fc26:	1a6d      	subs	r5, r5, r1
 800fc28:	4629      	mov	r1, r5
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	f7ff ffa6 	bl	800fb7c <sbrk_aligned>
 800fc30:	3001      	adds	r0, #1
 800fc32:	d03a      	beq.n	800fcaa <_malloc_r+0xea>
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	442b      	add	r3, r5
 800fc38:	6023      	str	r3, [r4, #0]
 800fc3a:	f8d8 3000 	ldr.w	r3, [r8]
 800fc3e:	685a      	ldr	r2, [r3, #4]
 800fc40:	bb62      	cbnz	r2, 800fc9c <_malloc_r+0xdc>
 800fc42:	f8c8 7000 	str.w	r7, [r8]
 800fc46:	e00f      	b.n	800fc68 <_malloc_r+0xa8>
 800fc48:	6822      	ldr	r2, [r4, #0]
 800fc4a:	1b52      	subs	r2, r2, r5
 800fc4c:	d420      	bmi.n	800fc90 <_malloc_r+0xd0>
 800fc4e:	2a0b      	cmp	r2, #11
 800fc50:	d917      	bls.n	800fc82 <_malloc_r+0xc2>
 800fc52:	1961      	adds	r1, r4, r5
 800fc54:	42a3      	cmp	r3, r4
 800fc56:	6025      	str	r5, [r4, #0]
 800fc58:	bf18      	it	ne
 800fc5a:	6059      	strne	r1, [r3, #4]
 800fc5c:	6863      	ldr	r3, [r4, #4]
 800fc5e:	bf08      	it	eq
 800fc60:	f8c8 1000 	streq.w	r1, [r8]
 800fc64:	5162      	str	r2, [r4, r5]
 800fc66:	604b      	str	r3, [r1, #4]
 800fc68:	4630      	mov	r0, r6
 800fc6a:	f000 f82f 	bl	800fccc <__malloc_unlock>
 800fc6e:	f104 000b 	add.w	r0, r4, #11
 800fc72:	1d23      	adds	r3, r4, #4
 800fc74:	f020 0007 	bic.w	r0, r0, #7
 800fc78:	1ac2      	subs	r2, r0, r3
 800fc7a:	bf1c      	itt	ne
 800fc7c:	1a1b      	subne	r3, r3, r0
 800fc7e:	50a3      	strne	r3, [r4, r2]
 800fc80:	e7af      	b.n	800fbe2 <_malloc_r+0x22>
 800fc82:	6862      	ldr	r2, [r4, #4]
 800fc84:	42a3      	cmp	r3, r4
 800fc86:	bf0c      	ite	eq
 800fc88:	f8c8 2000 	streq.w	r2, [r8]
 800fc8c:	605a      	strne	r2, [r3, #4]
 800fc8e:	e7eb      	b.n	800fc68 <_malloc_r+0xa8>
 800fc90:	4623      	mov	r3, r4
 800fc92:	6864      	ldr	r4, [r4, #4]
 800fc94:	e7ae      	b.n	800fbf4 <_malloc_r+0x34>
 800fc96:	463c      	mov	r4, r7
 800fc98:	687f      	ldr	r7, [r7, #4]
 800fc9a:	e7b6      	b.n	800fc0a <_malloc_r+0x4a>
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	42a3      	cmp	r3, r4
 800fca2:	d1fb      	bne.n	800fc9c <_malloc_r+0xdc>
 800fca4:	2300      	movs	r3, #0
 800fca6:	6053      	str	r3, [r2, #4]
 800fca8:	e7de      	b.n	800fc68 <_malloc_r+0xa8>
 800fcaa:	230c      	movs	r3, #12
 800fcac:	6033      	str	r3, [r6, #0]
 800fcae:	4630      	mov	r0, r6
 800fcb0:	f000 f80c 	bl	800fccc <__malloc_unlock>
 800fcb4:	e794      	b.n	800fbe0 <_malloc_r+0x20>
 800fcb6:	6005      	str	r5, [r0, #0]
 800fcb8:	e7d6      	b.n	800fc68 <_malloc_r+0xa8>
 800fcba:	bf00      	nop
 800fcbc:	2000dacc 	.word	0x2000dacc

0800fcc0 <__malloc_lock>:
 800fcc0:	4801      	ldr	r0, [pc, #4]	@ (800fcc8 <__malloc_lock+0x8>)
 800fcc2:	f000 bb66 	b.w	8010392 <__retarget_lock_acquire_recursive>
 800fcc6:	bf00      	nop
 800fcc8:	2000dc11 	.word	0x2000dc11

0800fccc <__malloc_unlock>:
 800fccc:	4801      	ldr	r0, [pc, #4]	@ (800fcd4 <__malloc_unlock+0x8>)
 800fcce:	f000 bb61 	b.w	8010394 <__retarget_lock_release_recursive>
 800fcd2:	bf00      	nop
 800fcd4:	2000dc11 	.word	0x2000dc11

0800fcd8 <srand>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4b10      	ldr	r3, [pc, #64]	@ (800fd1c <srand+0x44>)
 800fcdc:	681d      	ldr	r5, [r3, #0]
 800fcde:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fce0:	4604      	mov	r4, r0
 800fce2:	b9b3      	cbnz	r3, 800fd12 <srand+0x3a>
 800fce4:	2018      	movs	r0, #24
 800fce6:	f7ff ff39 	bl	800fb5c <malloc>
 800fcea:	4602      	mov	r2, r0
 800fcec:	6328      	str	r0, [r5, #48]	@ 0x30
 800fcee:	b920      	cbnz	r0, 800fcfa <srand+0x22>
 800fcf0:	4b0b      	ldr	r3, [pc, #44]	@ (800fd20 <srand+0x48>)
 800fcf2:	480c      	ldr	r0, [pc, #48]	@ (800fd24 <srand+0x4c>)
 800fcf4:	2146      	movs	r1, #70	@ 0x46
 800fcf6:	f000 fb65 	bl	80103c4 <__assert_func>
 800fcfa:	490b      	ldr	r1, [pc, #44]	@ (800fd28 <srand+0x50>)
 800fcfc:	4b0b      	ldr	r3, [pc, #44]	@ (800fd2c <srand+0x54>)
 800fcfe:	e9c0 1300 	strd	r1, r3, [r0]
 800fd02:	4b0b      	ldr	r3, [pc, #44]	@ (800fd30 <srand+0x58>)
 800fd04:	6083      	str	r3, [r0, #8]
 800fd06:	230b      	movs	r3, #11
 800fd08:	8183      	strh	r3, [r0, #12]
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	2001      	movs	r0, #1
 800fd0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fd12:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fd14:	2200      	movs	r2, #0
 800fd16:	611c      	str	r4, [r3, #16]
 800fd18:	615a      	str	r2, [r3, #20]
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}
 800fd1c:	200000c0 	.word	0x200000c0
 800fd20:	08011bac 	.word	0x08011bac
 800fd24:	08011bc3 	.word	0x08011bc3
 800fd28:	abcd330e 	.word	0xabcd330e
 800fd2c:	e66d1234 	.word	0xe66d1234
 800fd30:	0005deec 	.word	0x0005deec

0800fd34 <rand>:
 800fd34:	4b16      	ldr	r3, [pc, #88]	@ (800fd90 <rand+0x5c>)
 800fd36:	b510      	push	{r4, lr}
 800fd38:	681c      	ldr	r4, [r3, #0]
 800fd3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fd3c:	b9b3      	cbnz	r3, 800fd6c <rand+0x38>
 800fd3e:	2018      	movs	r0, #24
 800fd40:	f7ff ff0c 	bl	800fb5c <malloc>
 800fd44:	4602      	mov	r2, r0
 800fd46:	6320      	str	r0, [r4, #48]	@ 0x30
 800fd48:	b920      	cbnz	r0, 800fd54 <rand+0x20>
 800fd4a:	4b12      	ldr	r3, [pc, #72]	@ (800fd94 <rand+0x60>)
 800fd4c:	4812      	ldr	r0, [pc, #72]	@ (800fd98 <rand+0x64>)
 800fd4e:	2152      	movs	r1, #82	@ 0x52
 800fd50:	f000 fb38 	bl	80103c4 <__assert_func>
 800fd54:	4911      	ldr	r1, [pc, #68]	@ (800fd9c <rand+0x68>)
 800fd56:	4b12      	ldr	r3, [pc, #72]	@ (800fda0 <rand+0x6c>)
 800fd58:	e9c0 1300 	strd	r1, r3, [r0]
 800fd5c:	4b11      	ldr	r3, [pc, #68]	@ (800fda4 <rand+0x70>)
 800fd5e:	6083      	str	r3, [r0, #8]
 800fd60:	230b      	movs	r3, #11
 800fd62:	8183      	strh	r3, [r0, #12]
 800fd64:	2100      	movs	r1, #0
 800fd66:	2001      	movs	r0, #1
 800fd68:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fd6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fd6e:	480e      	ldr	r0, [pc, #56]	@ (800fda8 <rand+0x74>)
 800fd70:	690b      	ldr	r3, [r1, #16]
 800fd72:	694c      	ldr	r4, [r1, #20]
 800fd74:	4a0d      	ldr	r2, [pc, #52]	@ (800fdac <rand+0x78>)
 800fd76:	4358      	muls	r0, r3
 800fd78:	fb02 0004 	mla	r0, r2, r4, r0
 800fd7c:	fba3 3202 	umull	r3, r2, r3, r2
 800fd80:	3301      	adds	r3, #1
 800fd82:	eb40 0002 	adc.w	r0, r0, r2
 800fd86:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fd8a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fd8e:	bd10      	pop	{r4, pc}
 800fd90:	200000c0 	.word	0x200000c0
 800fd94:	08011bac 	.word	0x08011bac
 800fd98:	08011bc3 	.word	0x08011bc3
 800fd9c:	abcd330e 	.word	0xabcd330e
 800fda0:	e66d1234 	.word	0xe66d1234
 800fda4:	0005deec 	.word	0x0005deec
 800fda8:	5851f42d 	.word	0x5851f42d
 800fdac:	4c957f2d 	.word	0x4c957f2d

0800fdb0 <realloc>:
 800fdb0:	4b02      	ldr	r3, [pc, #8]	@ (800fdbc <realloc+0xc>)
 800fdb2:	460a      	mov	r2, r1
 800fdb4:	4601      	mov	r1, r0
 800fdb6:	6818      	ldr	r0, [r3, #0]
 800fdb8:	f000 b802 	b.w	800fdc0 <_realloc_r>
 800fdbc:	200000c0 	.word	0x200000c0

0800fdc0 <_realloc_r>:
 800fdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc4:	4680      	mov	r8, r0
 800fdc6:	4615      	mov	r5, r2
 800fdc8:	460c      	mov	r4, r1
 800fdca:	b921      	cbnz	r1, 800fdd6 <_realloc_r+0x16>
 800fdcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd0:	4611      	mov	r1, r2
 800fdd2:	f7ff bef5 	b.w	800fbc0 <_malloc_r>
 800fdd6:	b92a      	cbnz	r2, 800fde4 <_realloc_r+0x24>
 800fdd8:	f000 fb1e 	bl	8010418 <_free_r>
 800fddc:	2400      	movs	r4, #0
 800fdde:	4620      	mov	r0, r4
 800fde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fde4:	f000 fb62 	bl	80104ac <_malloc_usable_size_r>
 800fde8:	4285      	cmp	r5, r0
 800fdea:	4606      	mov	r6, r0
 800fdec:	d802      	bhi.n	800fdf4 <_realloc_r+0x34>
 800fdee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fdf2:	d8f4      	bhi.n	800fdde <_realloc_r+0x1e>
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	4640      	mov	r0, r8
 800fdf8:	f7ff fee2 	bl	800fbc0 <_malloc_r>
 800fdfc:	4607      	mov	r7, r0
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d0ec      	beq.n	800fddc <_realloc_r+0x1c>
 800fe02:	42b5      	cmp	r5, r6
 800fe04:	462a      	mov	r2, r5
 800fe06:	4621      	mov	r1, r4
 800fe08:	bf28      	it	cs
 800fe0a:	4632      	movcs	r2, r6
 800fe0c:	f000 facb 	bl	80103a6 <memcpy>
 800fe10:	4621      	mov	r1, r4
 800fe12:	4640      	mov	r0, r8
 800fe14:	f000 fb00 	bl	8010418 <_free_r>
 800fe18:	463c      	mov	r4, r7
 800fe1a:	e7e0      	b.n	800fdde <_realloc_r+0x1e>

0800fe1c <_strtoul_l.constprop.0>:
 800fe1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe20:	4e34      	ldr	r6, [pc, #208]	@ (800fef4 <_strtoul_l.constprop.0+0xd8>)
 800fe22:	4686      	mov	lr, r0
 800fe24:	460d      	mov	r5, r1
 800fe26:	4628      	mov	r0, r5
 800fe28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe2c:	5d37      	ldrb	r7, [r6, r4]
 800fe2e:	f017 0708 	ands.w	r7, r7, #8
 800fe32:	d1f8      	bne.n	800fe26 <_strtoul_l.constprop.0+0xa>
 800fe34:	2c2d      	cmp	r4, #45	@ 0x2d
 800fe36:	d12f      	bne.n	800fe98 <_strtoul_l.constprop.0+0x7c>
 800fe38:	782c      	ldrb	r4, [r5, #0]
 800fe3a:	2701      	movs	r7, #1
 800fe3c:	1c85      	adds	r5, r0, #2
 800fe3e:	f033 0010 	bics.w	r0, r3, #16
 800fe42:	d109      	bne.n	800fe58 <_strtoul_l.constprop.0+0x3c>
 800fe44:	2c30      	cmp	r4, #48	@ 0x30
 800fe46:	d12c      	bne.n	800fea2 <_strtoul_l.constprop.0+0x86>
 800fe48:	7828      	ldrb	r0, [r5, #0]
 800fe4a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800fe4e:	2858      	cmp	r0, #88	@ 0x58
 800fe50:	d127      	bne.n	800fea2 <_strtoul_l.constprop.0+0x86>
 800fe52:	786c      	ldrb	r4, [r5, #1]
 800fe54:	2310      	movs	r3, #16
 800fe56:	3502      	adds	r5, #2
 800fe58:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800fe5c:	2600      	movs	r6, #0
 800fe5e:	fbb8 f8f3 	udiv	r8, r8, r3
 800fe62:	fb03 f908 	mul.w	r9, r3, r8
 800fe66:	ea6f 0909 	mvn.w	r9, r9
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fe70:	f1bc 0f09 	cmp.w	ip, #9
 800fe74:	d81c      	bhi.n	800feb0 <_strtoul_l.constprop.0+0x94>
 800fe76:	4664      	mov	r4, ip
 800fe78:	42a3      	cmp	r3, r4
 800fe7a:	dd2a      	ble.n	800fed2 <_strtoul_l.constprop.0+0xb6>
 800fe7c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800fe80:	d007      	beq.n	800fe92 <_strtoul_l.constprop.0+0x76>
 800fe82:	4580      	cmp	r8, r0
 800fe84:	d322      	bcc.n	800fecc <_strtoul_l.constprop.0+0xb0>
 800fe86:	d101      	bne.n	800fe8c <_strtoul_l.constprop.0+0x70>
 800fe88:	45a1      	cmp	r9, r4
 800fe8a:	db1f      	blt.n	800fecc <_strtoul_l.constprop.0+0xb0>
 800fe8c:	fb00 4003 	mla	r0, r0, r3, r4
 800fe90:	2601      	movs	r6, #1
 800fe92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe96:	e7e9      	b.n	800fe6c <_strtoul_l.constprop.0+0x50>
 800fe98:	2c2b      	cmp	r4, #43	@ 0x2b
 800fe9a:	bf04      	itt	eq
 800fe9c:	782c      	ldrbeq	r4, [r5, #0]
 800fe9e:	1c85      	addeq	r5, r0, #2
 800fea0:	e7cd      	b.n	800fe3e <_strtoul_l.constprop.0+0x22>
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d1d8      	bne.n	800fe58 <_strtoul_l.constprop.0+0x3c>
 800fea6:	2c30      	cmp	r4, #48	@ 0x30
 800fea8:	bf0c      	ite	eq
 800feaa:	2308      	moveq	r3, #8
 800feac:	230a      	movne	r3, #10
 800feae:	e7d3      	b.n	800fe58 <_strtoul_l.constprop.0+0x3c>
 800feb0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800feb4:	f1bc 0f19 	cmp.w	ip, #25
 800feb8:	d801      	bhi.n	800febe <_strtoul_l.constprop.0+0xa2>
 800feba:	3c37      	subs	r4, #55	@ 0x37
 800febc:	e7dc      	b.n	800fe78 <_strtoul_l.constprop.0+0x5c>
 800febe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800fec2:	f1bc 0f19 	cmp.w	ip, #25
 800fec6:	d804      	bhi.n	800fed2 <_strtoul_l.constprop.0+0xb6>
 800fec8:	3c57      	subs	r4, #87	@ 0x57
 800feca:	e7d5      	b.n	800fe78 <_strtoul_l.constprop.0+0x5c>
 800fecc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800fed0:	e7df      	b.n	800fe92 <_strtoul_l.constprop.0+0x76>
 800fed2:	1c73      	adds	r3, r6, #1
 800fed4:	d106      	bne.n	800fee4 <_strtoul_l.constprop.0+0xc8>
 800fed6:	2322      	movs	r3, #34	@ 0x22
 800fed8:	f8ce 3000 	str.w	r3, [lr]
 800fedc:	4630      	mov	r0, r6
 800fede:	b932      	cbnz	r2, 800feee <_strtoul_l.constprop.0+0xd2>
 800fee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fee4:	b107      	cbz	r7, 800fee8 <_strtoul_l.constprop.0+0xcc>
 800fee6:	4240      	negs	r0, r0
 800fee8:	2a00      	cmp	r2, #0
 800feea:	d0f9      	beq.n	800fee0 <_strtoul_l.constprop.0+0xc4>
 800feec:	b106      	cbz	r6, 800fef0 <_strtoul_l.constprop.0+0xd4>
 800feee:	1e69      	subs	r1, r5, #1
 800fef0:	6011      	str	r1, [r2, #0]
 800fef2:	e7f5      	b.n	800fee0 <_strtoul_l.constprop.0+0xc4>
 800fef4:	08011c1c 	.word	0x08011c1c

0800fef8 <strtoul>:
 800fef8:	4613      	mov	r3, r2
 800fefa:	460a      	mov	r2, r1
 800fefc:	4601      	mov	r1, r0
 800fefe:	4802      	ldr	r0, [pc, #8]	@ (800ff08 <strtoul+0x10>)
 800ff00:	6800      	ldr	r0, [r0, #0]
 800ff02:	f7ff bf8b 	b.w	800fe1c <_strtoul_l.constprop.0>
 800ff06:	bf00      	nop
 800ff08:	200000c0 	.word	0x200000c0

0800ff0c <std>:
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	b510      	push	{r4, lr}
 800ff10:	4604      	mov	r4, r0
 800ff12:	e9c0 3300 	strd	r3, r3, [r0]
 800ff16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff1a:	6083      	str	r3, [r0, #8]
 800ff1c:	8181      	strh	r1, [r0, #12]
 800ff1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff20:	81c2      	strh	r2, [r0, #14]
 800ff22:	6183      	str	r3, [r0, #24]
 800ff24:	4619      	mov	r1, r3
 800ff26:	2208      	movs	r2, #8
 800ff28:	305c      	adds	r0, #92	@ 0x5c
 800ff2a:	f000 f973 	bl	8010214 <memset>
 800ff2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff64 <std+0x58>)
 800ff30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff32:	4b0d      	ldr	r3, [pc, #52]	@ (800ff68 <std+0x5c>)
 800ff34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ff36:	4b0d      	ldr	r3, [pc, #52]	@ (800ff6c <std+0x60>)
 800ff38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ff3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff70 <std+0x64>)
 800ff3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff74 <std+0x68>)
 800ff40:	6224      	str	r4, [r4, #32]
 800ff42:	429c      	cmp	r4, r3
 800ff44:	d006      	beq.n	800ff54 <std+0x48>
 800ff46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ff4a:	4294      	cmp	r4, r2
 800ff4c:	d002      	beq.n	800ff54 <std+0x48>
 800ff4e:	33d0      	adds	r3, #208	@ 0xd0
 800ff50:	429c      	cmp	r4, r3
 800ff52:	d105      	bne.n	800ff60 <std+0x54>
 800ff54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ff58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff5c:	f000 ba18 	b.w	8010390 <__retarget_lock_init_recursive>
 800ff60:	bd10      	pop	{r4, pc}
 800ff62:	bf00      	nop
 800ff64:	0801011d 	.word	0x0801011d
 800ff68:	0801013f 	.word	0x0801013f
 800ff6c:	08010177 	.word	0x08010177
 800ff70:	0801019b 	.word	0x0801019b
 800ff74:	2000dad0 	.word	0x2000dad0

0800ff78 <stdio_exit_handler>:
 800ff78:	4a02      	ldr	r2, [pc, #8]	@ (800ff84 <stdio_exit_handler+0xc>)
 800ff7a:	4903      	ldr	r1, [pc, #12]	@ (800ff88 <stdio_exit_handler+0x10>)
 800ff7c:	4803      	ldr	r0, [pc, #12]	@ (800ff8c <stdio_exit_handler+0x14>)
 800ff7e:	f000 b869 	b.w	8010054 <_fwalk_sglue>
 800ff82:	bf00      	nop
 800ff84:	200000b4 	.word	0x200000b4
 800ff88:	08010e15 	.word	0x08010e15
 800ff8c:	200000c4 	.word	0x200000c4

0800ff90 <cleanup_stdio>:
 800ff90:	6841      	ldr	r1, [r0, #4]
 800ff92:	4b0c      	ldr	r3, [pc, #48]	@ (800ffc4 <cleanup_stdio+0x34>)
 800ff94:	4299      	cmp	r1, r3
 800ff96:	b510      	push	{r4, lr}
 800ff98:	4604      	mov	r4, r0
 800ff9a:	d001      	beq.n	800ffa0 <cleanup_stdio+0x10>
 800ff9c:	f000 ff3a 	bl	8010e14 <_fflush_r>
 800ffa0:	68a1      	ldr	r1, [r4, #8]
 800ffa2:	4b09      	ldr	r3, [pc, #36]	@ (800ffc8 <cleanup_stdio+0x38>)
 800ffa4:	4299      	cmp	r1, r3
 800ffa6:	d002      	beq.n	800ffae <cleanup_stdio+0x1e>
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f000 ff33 	bl	8010e14 <_fflush_r>
 800ffae:	68e1      	ldr	r1, [r4, #12]
 800ffb0:	4b06      	ldr	r3, [pc, #24]	@ (800ffcc <cleanup_stdio+0x3c>)
 800ffb2:	4299      	cmp	r1, r3
 800ffb4:	d004      	beq.n	800ffc0 <cleanup_stdio+0x30>
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffbc:	f000 bf2a 	b.w	8010e14 <_fflush_r>
 800ffc0:	bd10      	pop	{r4, pc}
 800ffc2:	bf00      	nop
 800ffc4:	2000dad0 	.word	0x2000dad0
 800ffc8:	2000db38 	.word	0x2000db38
 800ffcc:	2000dba0 	.word	0x2000dba0

0800ffd0 <global_stdio_init.part.0>:
 800ffd0:	b510      	push	{r4, lr}
 800ffd2:	4b0b      	ldr	r3, [pc, #44]	@ (8010000 <global_stdio_init.part.0+0x30>)
 800ffd4:	4c0b      	ldr	r4, [pc, #44]	@ (8010004 <global_stdio_init.part.0+0x34>)
 800ffd6:	4a0c      	ldr	r2, [pc, #48]	@ (8010008 <global_stdio_init.part.0+0x38>)
 800ffd8:	601a      	str	r2, [r3, #0]
 800ffda:	4620      	mov	r0, r4
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2104      	movs	r1, #4
 800ffe0:	f7ff ff94 	bl	800ff0c <std>
 800ffe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ffe8:	2201      	movs	r2, #1
 800ffea:	2109      	movs	r1, #9
 800ffec:	f7ff ff8e 	bl	800ff0c <std>
 800fff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fff4:	2202      	movs	r2, #2
 800fff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fffa:	2112      	movs	r1, #18
 800fffc:	f7ff bf86 	b.w	800ff0c <std>
 8010000:	2000dc08 	.word	0x2000dc08
 8010004:	2000dad0 	.word	0x2000dad0
 8010008:	0800ff79 	.word	0x0800ff79

0801000c <__sfp_lock_acquire>:
 801000c:	4801      	ldr	r0, [pc, #4]	@ (8010014 <__sfp_lock_acquire+0x8>)
 801000e:	f000 b9c0 	b.w	8010392 <__retarget_lock_acquire_recursive>
 8010012:	bf00      	nop
 8010014:	2000dc12 	.word	0x2000dc12

08010018 <__sfp_lock_release>:
 8010018:	4801      	ldr	r0, [pc, #4]	@ (8010020 <__sfp_lock_release+0x8>)
 801001a:	f000 b9bb 	b.w	8010394 <__retarget_lock_release_recursive>
 801001e:	bf00      	nop
 8010020:	2000dc12 	.word	0x2000dc12

08010024 <__sinit>:
 8010024:	b510      	push	{r4, lr}
 8010026:	4604      	mov	r4, r0
 8010028:	f7ff fff0 	bl	801000c <__sfp_lock_acquire>
 801002c:	6a23      	ldr	r3, [r4, #32]
 801002e:	b11b      	cbz	r3, 8010038 <__sinit+0x14>
 8010030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010034:	f7ff bff0 	b.w	8010018 <__sfp_lock_release>
 8010038:	4b04      	ldr	r3, [pc, #16]	@ (801004c <__sinit+0x28>)
 801003a:	6223      	str	r3, [r4, #32]
 801003c:	4b04      	ldr	r3, [pc, #16]	@ (8010050 <__sinit+0x2c>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d1f5      	bne.n	8010030 <__sinit+0xc>
 8010044:	f7ff ffc4 	bl	800ffd0 <global_stdio_init.part.0>
 8010048:	e7f2      	b.n	8010030 <__sinit+0xc>
 801004a:	bf00      	nop
 801004c:	0800ff91 	.word	0x0800ff91
 8010050:	2000dc08 	.word	0x2000dc08

08010054 <_fwalk_sglue>:
 8010054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010058:	4607      	mov	r7, r0
 801005a:	4688      	mov	r8, r1
 801005c:	4614      	mov	r4, r2
 801005e:	2600      	movs	r6, #0
 8010060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010064:	f1b9 0901 	subs.w	r9, r9, #1
 8010068:	d505      	bpl.n	8010076 <_fwalk_sglue+0x22>
 801006a:	6824      	ldr	r4, [r4, #0]
 801006c:	2c00      	cmp	r4, #0
 801006e:	d1f7      	bne.n	8010060 <_fwalk_sglue+0xc>
 8010070:	4630      	mov	r0, r6
 8010072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010076:	89ab      	ldrh	r3, [r5, #12]
 8010078:	2b01      	cmp	r3, #1
 801007a:	d907      	bls.n	801008c <_fwalk_sglue+0x38>
 801007c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010080:	3301      	adds	r3, #1
 8010082:	d003      	beq.n	801008c <_fwalk_sglue+0x38>
 8010084:	4629      	mov	r1, r5
 8010086:	4638      	mov	r0, r7
 8010088:	47c0      	blx	r8
 801008a:	4306      	orrs	r6, r0
 801008c:	3568      	adds	r5, #104	@ 0x68
 801008e:	e7e9      	b.n	8010064 <_fwalk_sglue+0x10>

08010090 <iprintf>:
 8010090:	b40f      	push	{r0, r1, r2, r3}
 8010092:	b507      	push	{r0, r1, r2, lr}
 8010094:	4906      	ldr	r1, [pc, #24]	@ (80100b0 <iprintf+0x20>)
 8010096:	ab04      	add	r3, sp, #16
 8010098:	6808      	ldr	r0, [r1, #0]
 801009a:	f853 2b04 	ldr.w	r2, [r3], #4
 801009e:	6881      	ldr	r1, [r0, #8]
 80100a0:	9301      	str	r3, [sp, #4]
 80100a2:	f000 fb8d 	bl	80107c0 <_vfiprintf_r>
 80100a6:	b003      	add	sp, #12
 80100a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80100ac:	b004      	add	sp, #16
 80100ae:	4770      	bx	lr
 80100b0:	200000c0 	.word	0x200000c0

080100b4 <sniprintf>:
 80100b4:	b40c      	push	{r2, r3}
 80100b6:	b530      	push	{r4, r5, lr}
 80100b8:	4b17      	ldr	r3, [pc, #92]	@ (8010118 <sniprintf+0x64>)
 80100ba:	1e0c      	subs	r4, r1, #0
 80100bc:	681d      	ldr	r5, [r3, #0]
 80100be:	b09d      	sub	sp, #116	@ 0x74
 80100c0:	da08      	bge.n	80100d4 <sniprintf+0x20>
 80100c2:	238b      	movs	r3, #139	@ 0x8b
 80100c4:	602b      	str	r3, [r5, #0]
 80100c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80100ca:	b01d      	add	sp, #116	@ 0x74
 80100cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100d0:	b002      	add	sp, #8
 80100d2:	4770      	bx	lr
 80100d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80100d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80100dc:	bf14      	ite	ne
 80100de:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80100e2:	4623      	moveq	r3, r4
 80100e4:	9304      	str	r3, [sp, #16]
 80100e6:	9307      	str	r3, [sp, #28]
 80100e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80100ec:	9002      	str	r0, [sp, #8]
 80100ee:	9006      	str	r0, [sp, #24]
 80100f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80100f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80100f6:	ab21      	add	r3, sp, #132	@ 0x84
 80100f8:	a902      	add	r1, sp, #8
 80100fa:	4628      	mov	r0, r5
 80100fc:	9301      	str	r3, [sp, #4]
 80100fe:	f000 fa39 	bl	8010574 <_svfiprintf_r>
 8010102:	1c43      	adds	r3, r0, #1
 8010104:	bfbc      	itt	lt
 8010106:	238b      	movlt	r3, #139	@ 0x8b
 8010108:	602b      	strlt	r3, [r5, #0]
 801010a:	2c00      	cmp	r4, #0
 801010c:	d0dd      	beq.n	80100ca <sniprintf+0x16>
 801010e:	9b02      	ldr	r3, [sp, #8]
 8010110:	2200      	movs	r2, #0
 8010112:	701a      	strb	r2, [r3, #0]
 8010114:	e7d9      	b.n	80100ca <sniprintf+0x16>
 8010116:	bf00      	nop
 8010118:	200000c0 	.word	0x200000c0

0801011c <__sread>:
 801011c:	b510      	push	{r4, lr}
 801011e:	460c      	mov	r4, r1
 8010120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010124:	f000 f8d6 	bl	80102d4 <_read_r>
 8010128:	2800      	cmp	r0, #0
 801012a:	bfab      	itete	ge
 801012c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801012e:	89a3      	ldrhlt	r3, [r4, #12]
 8010130:	181b      	addge	r3, r3, r0
 8010132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010136:	bfac      	ite	ge
 8010138:	6563      	strge	r3, [r4, #84]	@ 0x54
 801013a:	81a3      	strhlt	r3, [r4, #12]
 801013c:	bd10      	pop	{r4, pc}

0801013e <__swrite>:
 801013e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010142:	461f      	mov	r7, r3
 8010144:	898b      	ldrh	r3, [r1, #12]
 8010146:	05db      	lsls	r3, r3, #23
 8010148:	4605      	mov	r5, r0
 801014a:	460c      	mov	r4, r1
 801014c:	4616      	mov	r6, r2
 801014e:	d505      	bpl.n	801015c <__swrite+0x1e>
 8010150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010154:	2302      	movs	r3, #2
 8010156:	2200      	movs	r2, #0
 8010158:	f000 f8aa 	bl	80102b0 <_lseek_r>
 801015c:	89a3      	ldrh	r3, [r4, #12]
 801015e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010166:	81a3      	strh	r3, [r4, #12]
 8010168:	4632      	mov	r2, r6
 801016a:	463b      	mov	r3, r7
 801016c:	4628      	mov	r0, r5
 801016e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010172:	f000 b8d1 	b.w	8010318 <_write_r>

08010176 <__sseek>:
 8010176:	b510      	push	{r4, lr}
 8010178:	460c      	mov	r4, r1
 801017a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801017e:	f000 f897 	bl	80102b0 <_lseek_r>
 8010182:	1c43      	adds	r3, r0, #1
 8010184:	89a3      	ldrh	r3, [r4, #12]
 8010186:	bf15      	itete	ne
 8010188:	6560      	strne	r0, [r4, #84]	@ 0x54
 801018a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801018e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010192:	81a3      	strheq	r3, [r4, #12]
 8010194:	bf18      	it	ne
 8010196:	81a3      	strhne	r3, [r4, #12]
 8010198:	bd10      	pop	{r4, pc}

0801019a <__sclose>:
 801019a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801019e:	f000 b877 	b.w	8010290 <_close_r>

080101a2 <_vsniprintf_r>:
 80101a2:	b530      	push	{r4, r5, lr}
 80101a4:	4614      	mov	r4, r2
 80101a6:	2c00      	cmp	r4, #0
 80101a8:	b09b      	sub	sp, #108	@ 0x6c
 80101aa:	4605      	mov	r5, r0
 80101ac:	461a      	mov	r2, r3
 80101ae:	da05      	bge.n	80101bc <_vsniprintf_r+0x1a>
 80101b0:	238b      	movs	r3, #139	@ 0x8b
 80101b2:	6003      	str	r3, [r0, #0]
 80101b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101b8:	b01b      	add	sp, #108	@ 0x6c
 80101ba:	bd30      	pop	{r4, r5, pc}
 80101bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80101c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80101c4:	bf14      	ite	ne
 80101c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80101ca:	4623      	moveq	r3, r4
 80101cc:	9302      	str	r3, [sp, #8]
 80101ce:	9305      	str	r3, [sp, #20]
 80101d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80101d4:	9100      	str	r1, [sp, #0]
 80101d6:	9104      	str	r1, [sp, #16]
 80101d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80101dc:	4669      	mov	r1, sp
 80101de:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80101e0:	f000 f9c8 	bl	8010574 <_svfiprintf_r>
 80101e4:	1c43      	adds	r3, r0, #1
 80101e6:	bfbc      	itt	lt
 80101e8:	238b      	movlt	r3, #139	@ 0x8b
 80101ea:	602b      	strlt	r3, [r5, #0]
 80101ec:	2c00      	cmp	r4, #0
 80101ee:	d0e3      	beq.n	80101b8 <_vsniprintf_r+0x16>
 80101f0:	9b00      	ldr	r3, [sp, #0]
 80101f2:	2200      	movs	r2, #0
 80101f4:	701a      	strb	r2, [r3, #0]
 80101f6:	e7df      	b.n	80101b8 <_vsniprintf_r+0x16>

080101f8 <vsniprintf>:
 80101f8:	b507      	push	{r0, r1, r2, lr}
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	4613      	mov	r3, r2
 80101fe:	460a      	mov	r2, r1
 8010200:	4601      	mov	r1, r0
 8010202:	4803      	ldr	r0, [pc, #12]	@ (8010210 <vsniprintf+0x18>)
 8010204:	6800      	ldr	r0, [r0, #0]
 8010206:	f7ff ffcc 	bl	80101a2 <_vsniprintf_r>
 801020a:	b003      	add	sp, #12
 801020c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010210:	200000c0 	.word	0x200000c0

08010214 <memset>:
 8010214:	4402      	add	r2, r0
 8010216:	4603      	mov	r3, r0
 8010218:	4293      	cmp	r3, r2
 801021a:	d100      	bne.n	801021e <memset+0xa>
 801021c:	4770      	bx	lr
 801021e:	f803 1b01 	strb.w	r1, [r3], #1
 8010222:	e7f9      	b.n	8010218 <memset+0x4>

08010224 <strchr>:
 8010224:	b2c9      	uxtb	r1, r1
 8010226:	4603      	mov	r3, r0
 8010228:	4618      	mov	r0, r3
 801022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801022e:	b112      	cbz	r2, 8010236 <strchr+0x12>
 8010230:	428a      	cmp	r2, r1
 8010232:	d1f9      	bne.n	8010228 <strchr+0x4>
 8010234:	4770      	bx	lr
 8010236:	2900      	cmp	r1, #0
 8010238:	bf18      	it	ne
 801023a:	2000      	movne	r0, #0
 801023c:	4770      	bx	lr

0801023e <strncmp>:
 801023e:	b510      	push	{r4, lr}
 8010240:	b16a      	cbz	r2, 801025e <strncmp+0x20>
 8010242:	3901      	subs	r1, #1
 8010244:	1884      	adds	r4, r0, r2
 8010246:	f810 2b01 	ldrb.w	r2, [r0], #1
 801024a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801024e:	429a      	cmp	r2, r3
 8010250:	d103      	bne.n	801025a <strncmp+0x1c>
 8010252:	42a0      	cmp	r0, r4
 8010254:	d001      	beq.n	801025a <strncmp+0x1c>
 8010256:	2a00      	cmp	r2, #0
 8010258:	d1f5      	bne.n	8010246 <strncmp+0x8>
 801025a:	1ad0      	subs	r0, r2, r3
 801025c:	bd10      	pop	{r4, pc}
 801025e:	4610      	mov	r0, r2
 8010260:	e7fc      	b.n	801025c <strncmp+0x1e>

08010262 <strstr>:
 8010262:	780a      	ldrb	r2, [r1, #0]
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	b96a      	cbnz	r2, 8010284 <strstr+0x22>
 8010268:	bd70      	pop	{r4, r5, r6, pc}
 801026a:	429a      	cmp	r2, r3
 801026c:	d109      	bne.n	8010282 <strstr+0x20>
 801026e:	460c      	mov	r4, r1
 8010270:	4605      	mov	r5, r0
 8010272:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010276:	2b00      	cmp	r3, #0
 8010278:	d0f6      	beq.n	8010268 <strstr+0x6>
 801027a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801027e:	429e      	cmp	r6, r3
 8010280:	d0f7      	beq.n	8010272 <strstr+0x10>
 8010282:	3001      	adds	r0, #1
 8010284:	7803      	ldrb	r3, [r0, #0]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d1ef      	bne.n	801026a <strstr+0x8>
 801028a:	4618      	mov	r0, r3
 801028c:	e7ec      	b.n	8010268 <strstr+0x6>
	...

08010290 <_close_r>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	4d06      	ldr	r5, [pc, #24]	@ (80102ac <_close_r+0x1c>)
 8010294:	2300      	movs	r3, #0
 8010296:	4604      	mov	r4, r0
 8010298:	4608      	mov	r0, r1
 801029a:	602b      	str	r3, [r5, #0]
 801029c:	f7f1 f89a 	bl	80013d4 <_close>
 80102a0:	1c43      	adds	r3, r0, #1
 80102a2:	d102      	bne.n	80102aa <_close_r+0x1a>
 80102a4:	682b      	ldr	r3, [r5, #0]
 80102a6:	b103      	cbz	r3, 80102aa <_close_r+0x1a>
 80102a8:	6023      	str	r3, [r4, #0]
 80102aa:	bd38      	pop	{r3, r4, r5, pc}
 80102ac:	2000dc0c 	.word	0x2000dc0c

080102b0 <_lseek_r>:
 80102b0:	b538      	push	{r3, r4, r5, lr}
 80102b2:	4d07      	ldr	r5, [pc, #28]	@ (80102d0 <_lseek_r+0x20>)
 80102b4:	4604      	mov	r4, r0
 80102b6:	4608      	mov	r0, r1
 80102b8:	4611      	mov	r1, r2
 80102ba:	2200      	movs	r2, #0
 80102bc:	602a      	str	r2, [r5, #0]
 80102be:	461a      	mov	r2, r3
 80102c0:	f7f1 f8af 	bl	8001422 <_lseek>
 80102c4:	1c43      	adds	r3, r0, #1
 80102c6:	d102      	bne.n	80102ce <_lseek_r+0x1e>
 80102c8:	682b      	ldr	r3, [r5, #0]
 80102ca:	b103      	cbz	r3, 80102ce <_lseek_r+0x1e>
 80102cc:	6023      	str	r3, [r4, #0]
 80102ce:	bd38      	pop	{r3, r4, r5, pc}
 80102d0:	2000dc0c 	.word	0x2000dc0c

080102d4 <_read_r>:
 80102d4:	b538      	push	{r3, r4, r5, lr}
 80102d6:	4d07      	ldr	r5, [pc, #28]	@ (80102f4 <_read_r+0x20>)
 80102d8:	4604      	mov	r4, r0
 80102da:	4608      	mov	r0, r1
 80102dc:	4611      	mov	r1, r2
 80102de:	2200      	movs	r2, #0
 80102e0:	602a      	str	r2, [r5, #0]
 80102e2:	461a      	mov	r2, r3
 80102e4:	f7f1 f83d 	bl	8001362 <_read>
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	d102      	bne.n	80102f2 <_read_r+0x1e>
 80102ec:	682b      	ldr	r3, [r5, #0]
 80102ee:	b103      	cbz	r3, 80102f2 <_read_r+0x1e>
 80102f0:	6023      	str	r3, [r4, #0]
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
 80102f4:	2000dc0c 	.word	0x2000dc0c

080102f8 <_sbrk_r>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4d06      	ldr	r5, [pc, #24]	@ (8010314 <_sbrk_r+0x1c>)
 80102fc:	2300      	movs	r3, #0
 80102fe:	4604      	mov	r4, r0
 8010300:	4608      	mov	r0, r1
 8010302:	602b      	str	r3, [r5, #0]
 8010304:	f7f1 f89a 	bl	800143c <_sbrk>
 8010308:	1c43      	adds	r3, r0, #1
 801030a:	d102      	bne.n	8010312 <_sbrk_r+0x1a>
 801030c:	682b      	ldr	r3, [r5, #0]
 801030e:	b103      	cbz	r3, 8010312 <_sbrk_r+0x1a>
 8010310:	6023      	str	r3, [r4, #0]
 8010312:	bd38      	pop	{r3, r4, r5, pc}
 8010314:	2000dc0c 	.word	0x2000dc0c

08010318 <_write_r>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4d07      	ldr	r5, [pc, #28]	@ (8010338 <_write_r+0x20>)
 801031c:	4604      	mov	r4, r0
 801031e:	4608      	mov	r0, r1
 8010320:	4611      	mov	r1, r2
 8010322:	2200      	movs	r2, #0
 8010324:	602a      	str	r2, [r5, #0]
 8010326:	461a      	mov	r2, r3
 8010328:	f7f1 f838 	bl	800139c <_write>
 801032c:	1c43      	adds	r3, r0, #1
 801032e:	d102      	bne.n	8010336 <_write_r+0x1e>
 8010330:	682b      	ldr	r3, [r5, #0]
 8010332:	b103      	cbz	r3, 8010336 <_write_r+0x1e>
 8010334:	6023      	str	r3, [r4, #0]
 8010336:	bd38      	pop	{r3, r4, r5, pc}
 8010338:	2000dc0c 	.word	0x2000dc0c

0801033c <__errno>:
 801033c:	4b01      	ldr	r3, [pc, #4]	@ (8010344 <__errno+0x8>)
 801033e:	6818      	ldr	r0, [r3, #0]
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	200000c0 	.word	0x200000c0

08010348 <__libc_init_array>:
 8010348:	b570      	push	{r4, r5, r6, lr}
 801034a:	4d0d      	ldr	r5, [pc, #52]	@ (8010380 <__libc_init_array+0x38>)
 801034c:	4c0d      	ldr	r4, [pc, #52]	@ (8010384 <__libc_init_array+0x3c>)
 801034e:	1b64      	subs	r4, r4, r5
 8010350:	10a4      	asrs	r4, r4, #2
 8010352:	2600      	movs	r6, #0
 8010354:	42a6      	cmp	r6, r4
 8010356:	d109      	bne.n	801036c <__libc_init_array+0x24>
 8010358:	4d0b      	ldr	r5, [pc, #44]	@ (8010388 <__libc_init_array+0x40>)
 801035a:	4c0c      	ldr	r4, [pc, #48]	@ (801038c <__libc_init_array+0x44>)
 801035c:	f000 ff12 	bl	8011184 <_init>
 8010360:	1b64      	subs	r4, r4, r5
 8010362:	10a4      	asrs	r4, r4, #2
 8010364:	2600      	movs	r6, #0
 8010366:	42a6      	cmp	r6, r4
 8010368:	d105      	bne.n	8010376 <__libc_init_array+0x2e>
 801036a:	bd70      	pop	{r4, r5, r6, pc}
 801036c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010370:	4798      	blx	r3
 8010372:	3601      	adds	r6, #1
 8010374:	e7ee      	b.n	8010354 <__libc_init_array+0xc>
 8010376:	f855 3b04 	ldr.w	r3, [r5], #4
 801037a:	4798      	blx	r3
 801037c:	3601      	adds	r6, #1
 801037e:	e7f2      	b.n	8010366 <__libc_init_array+0x1e>
 8010380:	08011d94 	.word	0x08011d94
 8010384:	08011d94 	.word	0x08011d94
 8010388:	08011d94 	.word	0x08011d94
 801038c:	08011d9c 	.word	0x08011d9c

08010390 <__retarget_lock_init_recursive>:
 8010390:	4770      	bx	lr

08010392 <__retarget_lock_acquire_recursive>:
 8010392:	4770      	bx	lr

08010394 <__retarget_lock_release_recursive>:
 8010394:	4770      	bx	lr

08010396 <strcpy>:
 8010396:	4603      	mov	r3, r0
 8010398:	f811 2b01 	ldrb.w	r2, [r1], #1
 801039c:	f803 2b01 	strb.w	r2, [r3], #1
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	d1f9      	bne.n	8010398 <strcpy+0x2>
 80103a4:	4770      	bx	lr

080103a6 <memcpy>:
 80103a6:	440a      	add	r2, r1
 80103a8:	4291      	cmp	r1, r2
 80103aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80103ae:	d100      	bne.n	80103b2 <memcpy+0xc>
 80103b0:	4770      	bx	lr
 80103b2:	b510      	push	{r4, lr}
 80103b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103bc:	4291      	cmp	r1, r2
 80103be:	d1f9      	bne.n	80103b4 <memcpy+0xe>
 80103c0:	bd10      	pop	{r4, pc}
	...

080103c4 <__assert_func>:
 80103c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103c6:	4614      	mov	r4, r2
 80103c8:	461a      	mov	r2, r3
 80103ca:	4b09      	ldr	r3, [pc, #36]	@ (80103f0 <__assert_func+0x2c>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4605      	mov	r5, r0
 80103d0:	68d8      	ldr	r0, [r3, #12]
 80103d2:	b954      	cbnz	r4, 80103ea <__assert_func+0x26>
 80103d4:	4b07      	ldr	r3, [pc, #28]	@ (80103f4 <__assert_func+0x30>)
 80103d6:	461c      	mov	r4, r3
 80103d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80103dc:	9100      	str	r1, [sp, #0]
 80103de:	462b      	mov	r3, r5
 80103e0:	4905      	ldr	r1, [pc, #20]	@ (80103f8 <__assert_func+0x34>)
 80103e2:	f000 fd3f 	bl	8010e64 <fiprintf>
 80103e6:	f000 fdfd 	bl	8010fe4 <abort>
 80103ea:	4b04      	ldr	r3, [pc, #16]	@ (80103fc <__assert_func+0x38>)
 80103ec:	e7f4      	b.n	80103d8 <__assert_func+0x14>
 80103ee:	bf00      	nop
 80103f0:	200000c0 	.word	0x200000c0
 80103f4:	08011d57 	.word	0x08011d57
 80103f8:	08011d29 	.word	0x08011d29
 80103fc:	08011d1c 	.word	0x08011d1c

08010400 <__env_lock>:
 8010400:	4801      	ldr	r0, [pc, #4]	@ (8010408 <__env_lock+0x8>)
 8010402:	f7ff bfc6 	b.w	8010392 <__retarget_lock_acquire_recursive>
 8010406:	bf00      	nop
 8010408:	2000dc10 	.word	0x2000dc10

0801040c <__env_unlock>:
 801040c:	4801      	ldr	r0, [pc, #4]	@ (8010414 <__env_unlock+0x8>)
 801040e:	f7ff bfc1 	b.w	8010394 <__retarget_lock_release_recursive>
 8010412:	bf00      	nop
 8010414:	2000dc10 	.word	0x2000dc10

08010418 <_free_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	4605      	mov	r5, r0
 801041c:	2900      	cmp	r1, #0
 801041e:	d041      	beq.n	80104a4 <_free_r+0x8c>
 8010420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010424:	1f0c      	subs	r4, r1, #4
 8010426:	2b00      	cmp	r3, #0
 8010428:	bfb8      	it	lt
 801042a:	18e4      	addlt	r4, r4, r3
 801042c:	f7ff fc48 	bl	800fcc0 <__malloc_lock>
 8010430:	4a1d      	ldr	r2, [pc, #116]	@ (80104a8 <_free_r+0x90>)
 8010432:	6813      	ldr	r3, [r2, #0]
 8010434:	b933      	cbnz	r3, 8010444 <_free_r+0x2c>
 8010436:	6063      	str	r3, [r4, #4]
 8010438:	6014      	str	r4, [r2, #0]
 801043a:	4628      	mov	r0, r5
 801043c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010440:	f7ff bc44 	b.w	800fccc <__malloc_unlock>
 8010444:	42a3      	cmp	r3, r4
 8010446:	d908      	bls.n	801045a <_free_r+0x42>
 8010448:	6820      	ldr	r0, [r4, #0]
 801044a:	1821      	adds	r1, r4, r0
 801044c:	428b      	cmp	r3, r1
 801044e:	bf01      	itttt	eq
 8010450:	6819      	ldreq	r1, [r3, #0]
 8010452:	685b      	ldreq	r3, [r3, #4]
 8010454:	1809      	addeq	r1, r1, r0
 8010456:	6021      	streq	r1, [r4, #0]
 8010458:	e7ed      	b.n	8010436 <_free_r+0x1e>
 801045a:	461a      	mov	r2, r3
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	b10b      	cbz	r3, 8010464 <_free_r+0x4c>
 8010460:	42a3      	cmp	r3, r4
 8010462:	d9fa      	bls.n	801045a <_free_r+0x42>
 8010464:	6811      	ldr	r1, [r2, #0]
 8010466:	1850      	adds	r0, r2, r1
 8010468:	42a0      	cmp	r0, r4
 801046a:	d10b      	bne.n	8010484 <_free_r+0x6c>
 801046c:	6820      	ldr	r0, [r4, #0]
 801046e:	4401      	add	r1, r0
 8010470:	1850      	adds	r0, r2, r1
 8010472:	4283      	cmp	r3, r0
 8010474:	6011      	str	r1, [r2, #0]
 8010476:	d1e0      	bne.n	801043a <_free_r+0x22>
 8010478:	6818      	ldr	r0, [r3, #0]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	6053      	str	r3, [r2, #4]
 801047e:	4408      	add	r0, r1
 8010480:	6010      	str	r0, [r2, #0]
 8010482:	e7da      	b.n	801043a <_free_r+0x22>
 8010484:	d902      	bls.n	801048c <_free_r+0x74>
 8010486:	230c      	movs	r3, #12
 8010488:	602b      	str	r3, [r5, #0]
 801048a:	e7d6      	b.n	801043a <_free_r+0x22>
 801048c:	6820      	ldr	r0, [r4, #0]
 801048e:	1821      	adds	r1, r4, r0
 8010490:	428b      	cmp	r3, r1
 8010492:	bf04      	itt	eq
 8010494:	6819      	ldreq	r1, [r3, #0]
 8010496:	685b      	ldreq	r3, [r3, #4]
 8010498:	6063      	str	r3, [r4, #4]
 801049a:	bf04      	itt	eq
 801049c:	1809      	addeq	r1, r1, r0
 801049e:	6021      	streq	r1, [r4, #0]
 80104a0:	6054      	str	r4, [r2, #4]
 80104a2:	e7ca      	b.n	801043a <_free_r+0x22>
 80104a4:	bd38      	pop	{r3, r4, r5, pc}
 80104a6:	bf00      	nop
 80104a8:	2000dacc 	.word	0x2000dacc

080104ac <_malloc_usable_size_r>:
 80104ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104b0:	1f18      	subs	r0, r3, #4
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	bfbc      	itt	lt
 80104b6:	580b      	ldrlt	r3, [r1, r0]
 80104b8:	18c0      	addlt	r0, r0, r3
 80104ba:	4770      	bx	lr

080104bc <__ssputs_r>:
 80104bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104c0:	688e      	ldr	r6, [r1, #8]
 80104c2:	461f      	mov	r7, r3
 80104c4:	42be      	cmp	r6, r7
 80104c6:	680b      	ldr	r3, [r1, #0]
 80104c8:	4682      	mov	sl, r0
 80104ca:	460c      	mov	r4, r1
 80104cc:	4690      	mov	r8, r2
 80104ce:	d82d      	bhi.n	801052c <__ssputs_r+0x70>
 80104d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80104d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80104d8:	d026      	beq.n	8010528 <__ssputs_r+0x6c>
 80104da:	6965      	ldr	r5, [r4, #20]
 80104dc:	6909      	ldr	r1, [r1, #16]
 80104de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104e2:	eba3 0901 	sub.w	r9, r3, r1
 80104e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80104ea:	1c7b      	adds	r3, r7, #1
 80104ec:	444b      	add	r3, r9
 80104ee:	106d      	asrs	r5, r5, #1
 80104f0:	429d      	cmp	r5, r3
 80104f2:	bf38      	it	cc
 80104f4:	461d      	movcc	r5, r3
 80104f6:	0553      	lsls	r3, r2, #21
 80104f8:	d527      	bpl.n	801054a <__ssputs_r+0x8e>
 80104fa:	4629      	mov	r1, r5
 80104fc:	f7ff fb60 	bl	800fbc0 <_malloc_r>
 8010500:	4606      	mov	r6, r0
 8010502:	b360      	cbz	r0, 801055e <__ssputs_r+0xa2>
 8010504:	6921      	ldr	r1, [r4, #16]
 8010506:	464a      	mov	r2, r9
 8010508:	f7ff ff4d 	bl	80103a6 <memcpy>
 801050c:	89a3      	ldrh	r3, [r4, #12]
 801050e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010516:	81a3      	strh	r3, [r4, #12]
 8010518:	6126      	str	r6, [r4, #16]
 801051a:	6165      	str	r5, [r4, #20]
 801051c:	444e      	add	r6, r9
 801051e:	eba5 0509 	sub.w	r5, r5, r9
 8010522:	6026      	str	r6, [r4, #0]
 8010524:	60a5      	str	r5, [r4, #8]
 8010526:	463e      	mov	r6, r7
 8010528:	42be      	cmp	r6, r7
 801052a:	d900      	bls.n	801052e <__ssputs_r+0x72>
 801052c:	463e      	mov	r6, r7
 801052e:	6820      	ldr	r0, [r4, #0]
 8010530:	4632      	mov	r2, r6
 8010532:	4641      	mov	r1, r8
 8010534:	f000 fd3c 	bl	8010fb0 <memmove>
 8010538:	68a3      	ldr	r3, [r4, #8]
 801053a:	1b9b      	subs	r3, r3, r6
 801053c:	60a3      	str	r3, [r4, #8]
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	4433      	add	r3, r6
 8010542:	6023      	str	r3, [r4, #0]
 8010544:	2000      	movs	r0, #0
 8010546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801054a:	462a      	mov	r2, r5
 801054c:	f7ff fc38 	bl	800fdc0 <_realloc_r>
 8010550:	4606      	mov	r6, r0
 8010552:	2800      	cmp	r0, #0
 8010554:	d1e0      	bne.n	8010518 <__ssputs_r+0x5c>
 8010556:	6921      	ldr	r1, [r4, #16]
 8010558:	4650      	mov	r0, sl
 801055a:	f7ff ff5d 	bl	8010418 <_free_r>
 801055e:	230c      	movs	r3, #12
 8010560:	f8ca 3000 	str.w	r3, [sl]
 8010564:	89a3      	ldrh	r3, [r4, #12]
 8010566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801056a:	81a3      	strh	r3, [r4, #12]
 801056c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010570:	e7e9      	b.n	8010546 <__ssputs_r+0x8a>
	...

08010574 <_svfiprintf_r>:
 8010574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010578:	4698      	mov	r8, r3
 801057a:	898b      	ldrh	r3, [r1, #12]
 801057c:	061b      	lsls	r3, r3, #24
 801057e:	b09d      	sub	sp, #116	@ 0x74
 8010580:	4607      	mov	r7, r0
 8010582:	460d      	mov	r5, r1
 8010584:	4614      	mov	r4, r2
 8010586:	d510      	bpl.n	80105aa <_svfiprintf_r+0x36>
 8010588:	690b      	ldr	r3, [r1, #16]
 801058a:	b973      	cbnz	r3, 80105aa <_svfiprintf_r+0x36>
 801058c:	2140      	movs	r1, #64	@ 0x40
 801058e:	f7ff fb17 	bl	800fbc0 <_malloc_r>
 8010592:	6028      	str	r0, [r5, #0]
 8010594:	6128      	str	r0, [r5, #16]
 8010596:	b930      	cbnz	r0, 80105a6 <_svfiprintf_r+0x32>
 8010598:	230c      	movs	r3, #12
 801059a:	603b      	str	r3, [r7, #0]
 801059c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105a0:	b01d      	add	sp, #116	@ 0x74
 80105a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a6:	2340      	movs	r3, #64	@ 0x40
 80105a8:	616b      	str	r3, [r5, #20]
 80105aa:	2300      	movs	r3, #0
 80105ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80105ae:	2320      	movs	r3, #32
 80105b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80105b8:	2330      	movs	r3, #48	@ 0x30
 80105ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010758 <_svfiprintf_r+0x1e4>
 80105be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105c2:	f04f 0901 	mov.w	r9, #1
 80105c6:	4623      	mov	r3, r4
 80105c8:	469a      	mov	sl, r3
 80105ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105ce:	b10a      	cbz	r2, 80105d4 <_svfiprintf_r+0x60>
 80105d0:	2a25      	cmp	r2, #37	@ 0x25
 80105d2:	d1f9      	bne.n	80105c8 <_svfiprintf_r+0x54>
 80105d4:	ebba 0b04 	subs.w	fp, sl, r4
 80105d8:	d00b      	beq.n	80105f2 <_svfiprintf_r+0x7e>
 80105da:	465b      	mov	r3, fp
 80105dc:	4622      	mov	r2, r4
 80105de:	4629      	mov	r1, r5
 80105e0:	4638      	mov	r0, r7
 80105e2:	f7ff ff6b 	bl	80104bc <__ssputs_r>
 80105e6:	3001      	adds	r0, #1
 80105e8:	f000 80a7 	beq.w	801073a <_svfiprintf_r+0x1c6>
 80105ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105ee:	445a      	add	r2, fp
 80105f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80105f2:	f89a 3000 	ldrb.w	r3, [sl]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f000 809f 	beq.w	801073a <_svfiprintf_r+0x1c6>
 80105fc:	2300      	movs	r3, #0
 80105fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010606:	f10a 0a01 	add.w	sl, sl, #1
 801060a:	9304      	str	r3, [sp, #16]
 801060c:	9307      	str	r3, [sp, #28]
 801060e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010612:	931a      	str	r3, [sp, #104]	@ 0x68
 8010614:	4654      	mov	r4, sl
 8010616:	2205      	movs	r2, #5
 8010618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801061c:	484e      	ldr	r0, [pc, #312]	@ (8010758 <_svfiprintf_r+0x1e4>)
 801061e:	f7ef fdf7 	bl	8000210 <memchr>
 8010622:	9a04      	ldr	r2, [sp, #16]
 8010624:	b9d8      	cbnz	r0, 801065e <_svfiprintf_r+0xea>
 8010626:	06d0      	lsls	r0, r2, #27
 8010628:	bf44      	itt	mi
 801062a:	2320      	movmi	r3, #32
 801062c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010630:	0711      	lsls	r1, r2, #28
 8010632:	bf44      	itt	mi
 8010634:	232b      	movmi	r3, #43	@ 0x2b
 8010636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801063a:	f89a 3000 	ldrb.w	r3, [sl]
 801063e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010640:	d015      	beq.n	801066e <_svfiprintf_r+0xfa>
 8010642:	9a07      	ldr	r2, [sp, #28]
 8010644:	4654      	mov	r4, sl
 8010646:	2000      	movs	r0, #0
 8010648:	f04f 0c0a 	mov.w	ip, #10
 801064c:	4621      	mov	r1, r4
 801064e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010652:	3b30      	subs	r3, #48	@ 0x30
 8010654:	2b09      	cmp	r3, #9
 8010656:	d94b      	bls.n	80106f0 <_svfiprintf_r+0x17c>
 8010658:	b1b0      	cbz	r0, 8010688 <_svfiprintf_r+0x114>
 801065a:	9207      	str	r2, [sp, #28]
 801065c:	e014      	b.n	8010688 <_svfiprintf_r+0x114>
 801065e:	eba0 0308 	sub.w	r3, r0, r8
 8010662:	fa09 f303 	lsl.w	r3, r9, r3
 8010666:	4313      	orrs	r3, r2
 8010668:	9304      	str	r3, [sp, #16]
 801066a:	46a2      	mov	sl, r4
 801066c:	e7d2      	b.n	8010614 <_svfiprintf_r+0xa0>
 801066e:	9b03      	ldr	r3, [sp, #12]
 8010670:	1d19      	adds	r1, r3, #4
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	9103      	str	r1, [sp, #12]
 8010676:	2b00      	cmp	r3, #0
 8010678:	bfbb      	ittet	lt
 801067a:	425b      	neglt	r3, r3
 801067c:	f042 0202 	orrlt.w	r2, r2, #2
 8010680:	9307      	strge	r3, [sp, #28]
 8010682:	9307      	strlt	r3, [sp, #28]
 8010684:	bfb8      	it	lt
 8010686:	9204      	strlt	r2, [sp, #16]
 8010688:	7823      	ldrb	r3, [r4, #0]
 801068a:	2b2e      	cmp	r3, #46	@ 0x2e
 801068c:	d10a      	bne.n	80106a4 <_svfiprintf_r+0x130>
 801068e:	7863      	ldrb	r3, [r4, #1]
 8010690:	2b2a      	cmp	r3, #42	@ 0x2a
 8010692:	d132      	bne.n	80106fa <_svfiprintf_r+0x186>
 8010694:	9b03      	ldr	r3, [sp, #12]
 8010696:	1d1a      	adds	r2, r3, #4
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	9203      	str	r2, [sp, #12]
 801069c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80106a0:	3402      	adds	r4, #2
 80106a2:	9305      	str	r3, [sp, #20]
 80106a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010768 <_svfiprintf_r+0x1f4>
 80106a8:	7821      	ldrb	r1, [r4, #0]
 80106aa:	2203      	movs	r2, #3
 80106ac:	4650      	mov	r0, sl
 80106ae:	f7ef fdaf 	bl	8000210 <memchr>
 80106b2:	b138      	cbz	r0, 80106c4 <_svfiprintf_r+0x150>
 80106b4:	9b04      	ldr	r3, [sp, #16]
 80106b6:	eba0 000a 	sub.w	r0, r0, sl
 80106ba:	2240      	movs	r2, #64	@ 0x40
 80106bc:	4082      	lsls	r2, r0
 80106be:	4313      	orrs	r3, r2
 80106c0:	3401      	adds	r4, #1
 80106c2:	9304      	str	r3, [sp, #16]
 80106c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106c8:	4824      	ldr	r0, [pc, #144]	@ (801075c <_svfiprintf_r+0x1e8>)
 80106ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106ce:	2206      	movs	r2, #6
 80106d0:	f7ef fd9e 	bl	8000210 <memchr>
 80106d4:	2800      	cmp	r0, #0
 80106d6:	d036      	beq.n	8010746 <_svfiprintf_r+0x1d2>
 80106d8:	4b21      	ldr	r3, [pc, #132]	@ (8010760 <_svfiprintf_r+0x1ec>)
 80106da:	bb1b      	cbnz	r3, 8010724 <_svfiprintf_r+0x1b0>
 80106dc:	9b03      	ldr	r3, [sp, #12]
 80106de:	3307      	adds	r3, #7
 80106e0:	f023 0307 	bic.w	r3, r3, #7
 80106e4:	3308      	adds	r3, #8
 80106e6:	9303      	str	r3, [sp, #12]
 80106e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106ea:	4433      	add	r3, r6
 80106ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80106ee:	e76a      	b.n	80105c6 <_svfiprintf_r+0x52>
 80106f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80106f4:	460c      	mov	r4, r1
 80106f6:	2001      	movs	r0, #1
 80106f8:	e7a8      	b.n	801064c <_svfiprintf_r+0xd8>
 80106fa:	2300      	movs	r3, #0
 80106fc:	3401      	adds	r4, #1
 80106fe:	9305      	str	r3, [sp, #20]
 8010700:	4619      	mov	r1, r3
 8010702:	f04f 0c0a 	mov.w	ip, #10
 8010706:	4620      	mov	r0, r4
 8010708:	f810 2b01 	ldrb.w	r2, [r0], #1
 801070c:	3a30      	subs	r2, #48	@ 0x30
 801070e:	2a09      	cmp	r2, #9
 8010710:	d903      	bls.n	801071a <_svfiprintf_r+0x1a6>
 8010712:	2b00      	cmp	r3, #0
 8010714:	d0c6      	beq.n	80106a4 <_svfiprintf_r+0x130>
 8010716:	9105      	str	r1, [sp, #20]
 8010718:	e7c4      	b.n	80106a4 <_svfiprintf_r+0x130>
 801071a:	fb0c 2101 	mla	r1, ip, r1, r2
 801071e:	4604      	mov	r4, r0
 8010720:	2301      	movs	r3, #1
 8010722:	e7f0      	b.n	8010706 <_svfiprintf_r+0x192>
 8010724:	ab03      	add	r3, sp, #12
 8010726:	9300      	str	r3, [sp, #0]
 8010728:	462a      	mov	r2, r5
 801072a:	4b0e      	ldr	r3, [pc, #56]	@ (8010764 <_svfiprintf_r+0x1f0>)
 801072c:	a904      	add	r1, sp, #16
 801072e:	4638      	mov	r0, r7
 8010730:	f3af 8000 	nop.w
 8010734:	1c42      	adds	r2, r0, #1
 8010736:	4606      	mov	r6, r0
 8010738:	d1d6      	bne.n	80106e8 <_svfiprintf_r+0x174>
 801073a:	89ab      	ldrh	r3, [r5, #12]
 801073c:	065b      	lsls	r3, r3, #25
 801073e:	f53f af2d 	bmi.w	801059c <_svfiprintf_r+0x28>
 8010742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010744:	e72c      	b.n	80105a0 <_svfiprintf_r+0x2c>
 8010746:	ab03      	add	r3, sp, #12
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	462a      	mov	r2, r5
 801074c:	4b05      	ldr	r3, [pc, #20]	@ (8010764 <_svfiprintf_r+0x1f0>)
 801074e:	a904      	add	r1, sp, #16
 8010750:	4638      	mov	r0, r7
 8010752:	f000 f9bb 	bl	8010acc <_printf_i>
 8010756:	e7ed      	b.n	8010734 <_svfiprintf_r+0x1c0>
 8010758:	08011d58 	.word	0x08011d58
 801075c:	08011d62 	.word	0x08011d62
 8010760:	00000000 	.word	0x00000000
 8010764:	080104bd 	.word	0x080104bd
 8010768:	08011d5e 	.word	0x08011d5e

0801076c <__sfputc_r>:
 801076c:	6893      	ldr	r3, [r2, #8]
 801076e:	3b01      	subs	r3, #1
 8010770:	2b00      	cmp	r3, #0
 8010772:	b410      	push	{r4}
 8010774:	6093      	str	r3, [r2, #8]
 8010776:	da08      	bge.n	801078a <__sfputc_r+0x1e>
 8010778:	6994      	ldr	r4, [r2, #24]
 801077a:	42a3      	cmp	r3, r4
 801077c:	db01      	blt.n	8010782 <__sfputc_r+0x16>
 801077e:	290a      	cmp	r1, #10
 8010780:	d103      	bne.n	801078a <__sfputc_r+0x1e>
 8010782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010786:	f000 bb7f 	b.w	8010e88 <__swbuf_r>
 801078a:	6813      	ldr	r3, [r2, #0]
 801078c:	1c58      	adds	r0, r3, #1
 801078e:	6010      	str	r0, [r2, #0]
 8010790:	7019      	strb	r1, [r3, #0]
 8010792:	4608      	mov	r0, r1
 8010794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010798:	4770      	bx	lr

0801079a <__sfputs_r>:
 801079a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801079c:	4606      	mov	r6, r0
 801079e:	460f      	mov	r7, r1
 80107a0:	4614      	mov	r4, r2
 80107a2:	18d5      	adds	r5, r2, r3
 80107a4:	42ac      	cmp	r4, r5
 80107a6:	d101      	bne.n	80107ac <__sfputs_r+0x12>
 80107a8:	2000      	movs	r0, #0
 80107aa:	e007      	b.n	80107bc <__sfputs_r+0x22>
 80107ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107b0:	463a      	mov	r2, r7
 80107b2:	4630      	mov	r0, r6
 80107b4:	f7ff ffda 	bl	801076c <__sfputc_r>
 80107b8:	1c43      	adds	r3, r0, #1
 80107ba:	d1f3      	bne.n	80107a4 <__sfputs_r+0xa>
 80107bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107c0 <_vfiprintf_r>:
 80107c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c4:	460d      	mov	r5, r1
 80107c6:	b09d      	sub	sp, #116	@ 0x74
 80107c8:	4614      	mov	r4, r2
 80107ca:	4698      	mov	r8, r3
 80107cc:	4606      	mov	r6, r0
 80107ce:	b118      	cbz	r0, 80107d8 <_vfiprintf_r+0x18>
 80107d0:	6a03      	ldr	r3, [r0, #32]
 80107d2:	b90b      	cbnz	r3, 80107d8 <_vfiprintf_r+0x18>
 80107d4:	f7ff fc26 	bl	8010024 <__sinit>
 80107d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107da:	07d9      	lsls	r1, r3, #31
 80107dc:	d405      	bmi.n	80107ea <_vfiprintf_r+0x2a>
 80107de:	89ab      	ldrh	r3, [r5, #12]
 80107e0:	059a      	lsls	r2, r3, #22
 80107e2:	d402      	bmi.n	80107ea <_vfiprintf_r+0x2a>
 80107e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107e6:	f7ff fdd4 	bl	8010392 <__retarget_lock_acquire_recursive>
 80107ea:	89ab      	ldrh	r3, [r5, #12]
 80107ec:	071b      	lsls	r3, r3, #28
 80107ee:	d501      	bpl.n	80107f4 <_vfiprintf_r+0x34>
 80107f0:	692b      	ldr	r3, [r5, #16]
 80107f2:	b99b      	cbnz	r3, 801081c <_vfiprintf_r+0x5c>
 80107f4:	4629      	mov	r1, r5
 80107f6:	4630      	mov	r0, r6
 80107f8:	f000 fb84 	bl	8010f04 <__swsetup_r>
 80107fc:	b170      	cbz	r0, 801081c <_vfiprintf_r+0x5c>
 80107fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010800:	07dc      	lsls	r4, r3, #31
 8010802:	d504      	bpl.n	801080e <_vfiprintf_r+0x4e>
 8010804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010808:	b01d      	add	sp, #116	@ 0x74
 801080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801080e:	89ab      	ldrh	r3, [r5, #12]
 8010810:	0598      	lsls	r0, r3, #22
 8010812:	d4f7      	bmi.n	8010804 <_vfiprintf_r+0x44>
 8010814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010816:	f7ff fdbd 	bl	8010394 <__retarget_lock_release_recursive>
 801081a:	e7f3      	b.n	8010804 <_vfiprintf_r+0x44>
 801081c:	2300      	movs	r3, #0
 801081e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010820:	2320      	movs	r3, #32
 8010822:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010826:	f8cd 800c 	str.w	r8, [sp, #12]
 801082a:	2330      	movs	r3, #48	@ 0x30
 801082c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80109dc <_vfiprintf_r+0x21c>
 8010830:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010834:	f04f 0901 	mov.w	r9, #1
 8010838:	4623      	mov	r3, r4
 801083a:	469a      	mov	sl, r3
 801083c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010840:	b10a      	cbz	r2, 8010846 <_vfiprintf_r+0x86>
 8010842:	2a25      	cmp	r2, #37	@ 0x25
 8010844:	d1f9      	bne.n	801083a <_vfiprintf_r+0x7a>
 8010846:	ebba 0b04 	subs.w	fp, sl, r4
 801084a:	d00b      	beq.n	8010864 <_vfiprintf_r+0xa4>
 801084c:	465b      	mov	r3, fp
 801084e:	4622      	mov	r2, r4
 8010850:	4629      	mov	r1, r5
 8010852:	4630      	mov	r0, r6
 8010854:	f7ff ffa1 	bl	801079a <__sfputs_r>
 8010858:	3001      	adds	r0, #1
 801085a:	f000 80a7 	beq.w	80109ac <_vfiprintf_r+0x1ec>
 801085e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010860:	445a      	add	r2, fp
 8010862:	9209      	str	r2, [sp, #36]	@ 0x24
 8010864:	f89a 3000 	ldrb.w	r3, [sl]
 8010868:	2b00      	cmp	r3, #0
 801086a:	f000 809f 	beq.w	80109ac <_vfiprintf_r+0x1ec>
 801086e:	2300      	movs	r3, #0
 8010870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010878:	f10a 0a01 	add.w	sl, sl, #1
 801087c:	9304      	str	r3, [sp, #16]
 801087e:	9307      	str	r3, [sp, #28]
 8010880:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010884:	931a      	str	r3, [sp, #104]	@ 0x68
 8010886:	4654      	mov	r4, sl
 8010888:	2205      	movs	r2, #5
 801088a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801088e:	4853      	ldr	r0, [pc, #332]	@ (80109dc <_vfiprintf_r+0x21c>)
 8010890:	f7ef fcbe 	bl	8000210 <memchr>
 8010894:	9a04      	ldr	r2, [sp, #16]
 8010896:	b9d8      	cbnz	r0, 80108d0 <_vfiprintf_r+0x110>
 8010898:	06d1      	lsls	r1, r2, #27
 801089a:	bf44      	itt	mi
 801089c:	2320      	movmi	r3, #32
 801089e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108a2:	0713      	lsls	r3, r2, #28
 80108a4:	bf44      	itt	mi
 80108a6:	232b      	movmi	r3, #43	@ 0x2b
 80108a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108ac:	f89a 3000 	ldrb.w	r3, [sl]
 80108b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80108b2:	d015      	beq.n	80108e0 <_vfiprintf_r+0x120>
 80108b4:	9a07      	ldr	r2, [sp, #28]
 80108b6:	4654      	mov	r4, sl
 80108b8:	2000      	movs	r0, #0
 80108ba:	f04f 0c0a 	mov.w	ip, #10
 80108be:	4621      	mov	r1, r4
 80108c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108c4:	3b30      	subs	r3, #48	@ 0x30
 80108c6:	2b09      	cmp	r3, #9
 80108c8:	d94b      	bls.n	8010962 <_vfiprintf_r+0x1a2>
 80108ca:	b1b0      	cbz	r0, 80108fa <_vfiprintf_r+0x13a>
 80108cc:	9207      	str	r2, [sp, #28]
 80108ce:	e014      	b.n	80108fa <_vfiprintf_r+0x13a>
 80108d0:	eba0 0308 	sub.w	r3, r0, r8
 80108d4:	fa09 f303 	lsl.w	r3, r9, r3
 80108d8:	4313      	orrs	r3, r2
 80108da:	9304      	str	r3, [sp, #16]
 80108dc:	46a2      	mov	sl, r4
 80108de:	e7d2      	b.n	8010886 <_vfiprintf_r+0xc6>
 80108e0:	9b03      	ldr	r3, [sp, #12]
 80108e2:	1d19      	adds	r1, r3, #4
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	9103      	str	r1, [sp, #12]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	bfbb      	ittet	lt
 80108ec:	425b      	neglt	r3, r3
 80108ee:	f042 0202 	orrlt.w	r2, r2, #2
 80108f2:	9307      	strge	r3, [sp, #28]
 80108f4:	9307      	strlt	r3, [sp, #28]
 80108f6:	bfb8      	it	lt
 80108f8:	9204      	strlt	r2, [sp, #16]
 80108fa:	7823      	ldrb	r3, [r4, #0]
 80108fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80108fe:	d10a      	bne.n	8010916 <_vfiprintf_r+0x156>
 8010900:	7863      	ldrb	r3, [r4, #1]
 8010902:	2b2a      	cmp	r3, #42	@ 0x2a
 8010904:	d132      	bne.n	801096c <_vfiprintf_r+0x1ac>
 8010906:	9b03      	ldr	r3, [sp, #12]
 8010908:	1d1a      	adds	r2, r3, #4
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	9203      	str	r2, [sp, #12]
 801090e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010912:	3402      	adds	r4, #2
 8010914:	9305      	str	r3, [sp, #20]
 8010916:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80109ec <_vfiprintf_r+0x22c>
 801091a:	7821      	ldrb	r1, [r4, #0]
 801091c:	2203      	movs	r2, #3
 801091e:	4650      	mov	r0, sl
 8010920:	f7ef fc76 	bl	8000210 <memchr>
 8010924:	b138      	cbz	r0, 8010936 <_vfiprintf_r+0x176>
 8010926:	9b04      	ldr	r3, [sp, #16]
 8010928:	eba0 000a 	sub.w	r0, r0, sl
 801092c:	2240      	movs	r2, #64	@ 0x40
 801092e:	4082      	lsls	r2, r0
 8010930:	4313      	orrs	r3, r2
 8010932:	3401      	adds	r4, #1
 8010934:	9304      	str	r3, [sp, #16]
 8010936:	f814 1b01 	ldrb.w	r1, [r4], #1
 801093a:	4829      	ldr	r0, [pc, #164]	@ (80109e0 <_vfiprintf_r+0x220>)
 801093c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010940:	2206      	movs	r2, #6
 8010942:	f7ef fc65 	bl	8000210 <memchr>
 8010946:	2800      	cmp	r0, #0
 8010948:	d03f      	beq.n	80109ca <_vfiprintf_r+0x20a>
 801094a:	4b26      	ldr	r3, [pc, #152]	@ (80109e4 <_vfiprintf_r+0x224>)
 801094c:	bb1b      	cbnz	r3, 8010996 <_vfiprintf_r+0x1d6>
 801094e:	9b03      	ldr	r3, [sp, #12]
 8010950:	3307      	adds	r3, #7
 8010952:	f023 0307 	bic.w	r3, r3, #7
 8010956:	3308      	adds	r3, #8
 8010958:	9303      	str	r3, [sp, #12]
 801095a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801095c:	443b      	add	r3, r7
 801095e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010960:	e76a      	b.n	8010838 <_vfiprintf_r+0x78>
 8010962:	fb0c 3202 	mla	r2, ip, r2, r3
 8010966:	460c      	mov	r4, r1
 8010968:	2001      	movs	r0, #1
 801096a:	e7a8      	b.n	80108be <_vfiprintf_r+0xfe>
 801096c:	2300      	movs	r3, #0
 801096e:	3401      	adds	r4, #1
 8010970:	9305      	str	r3, [sp, #20]
 8010972:	4619      	mov	r1, r3
 8010974:	f04f 0c0a 	mov.w	ip, #10
 8010978:	4620      	mov	r0, r4
 801097a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801097e:	3a30      	subs	r2, #48	@ 0x30
 8010980:	2a09      	cmp	r2, #9
 8010982:	d903      	bls.n	801098c <_vfiprintf_r+0x1cc>
 8010984:	2b00      	cmp	r3, #0
 8010986:	d0c6      	beq.n	8010916 <_vfiprintf_r+0x156>
 8010988:	9105      	str	r1, [sp, #20]
 801098a:	e7c4      	b.n	8010916 <_vfiprintf_r+0x156>
 801098c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010990:	4604      	mov	r4, r0
 8010992:	2301      	movs	r3, #1
 8010994:	e7f0      	b.n	8010978 <_vfiprintf_r+0x1b8>
 8010996:	ab03      	add	r3, sp, #12
 8010998:	9300      	str	r3, [sp, #0]
 801099a:	462a      	mov	r2, r5
 801099c:	4b12      	ldr	r3, [pc, #72]	@ (80109e8 <_vfiprintf_r+0x228>)
 801099e:	a904      	add	r1, sp, #16
 80109a0:	4630      	mov	r0, r6
 80109a2:	f3af 8000 	nop.w
 80109a6:	4607      	mov	r7, r0
 80109a8:	1c78      	adds	r0, r7, #1
 80109aa:	d1d6      	bne.n	801095a <_vfiprintf_r+0x19a>
 80109ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109ae:	07d9      	lsls	r1, r3, #31
 80109b0:	d405      	bmi.n	80109be <_vfiprintf_r+0x1fe>
 80109b2:	89ab      	ldrh	r3, [r5, #12]
 80109b4:	059a      	lsls	r2, r3, #22
 80109b6:	d402      	bmi.n	80109be <_vfiprintf_r+0x1fe>
 80109b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109ba:	f7ff fceb 	bl	8010394 <__retarget_lock_release_recursive>
 80109be:	89ab      	ldrh	r3, [r5, #12]
 80109c0:	065b      	lsls	r3, r3, #25
 80109c2:	f53f af1f 	bmi.w	8010804 <_vfiprintf_r+0x44>
 80109c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109c8:	e71e      	b.n	8010808 <_vfiprintf_r+0x48>
 80109ca:	ab03      	add	r3, sp, #12
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	462a      	mov	r2, r5
 80109d0:	4b05      	ldr	r3, [pc, #20]	@ (80109e8 <_vfiprintf_r+0x228>)
 80109d2:	a904      	add	r1, sp, #16
 80109d4:	4630      	mov	r0, r6
 80109d6:	f000 f879 	bl	8010acc <_printf_i>
 80109da:	e7e4      	b.n	80109a6 <_vfiprintf_r+0x1e6>
 80109dc:	08011d58 	.word	0x08011d58
 80109e0:	08011d62 	.word	0x08011d62
 80109e4:	00000000 	.word	0x00000000
 80109e8:	0801079b 	.word	0x0801079b
 80109ec:	08011d5e 	.word	0x08011d5e

080109f0 <_printf_common>:
 80109f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109f4:	4616      	mov	r6, r2
 80109f6:	4698      	mov	r8, r3
 80109f8:	688a      	ldr	r2, [r1, #8]
 80109fa:	690b      	ldr	r3, [r1, #16]
 80109fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a00:	4293      	cmp	r3, r2
 8010a02:	bfb8      	it	lt
 8010a04:	4613      	movlt	r3, r2
 8010a06:	6033      	str	r3, [r6, #0]
 8010a08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010a0c:	4607      	mov	r7, r0
 8010a0e:	460c      	mov	r4, r1
 8010a10:	b10a      	cbz	r2, 8010a16 <_printf_common+0x26>
 8010a12:	3301      	adds	r3, #1
 8010a14:	6033      	str	r3, [r6, #0]
 8010a16:	6823      	ldr	r3, [r4, #0]
 8010a18:	0699      	lsls	r1, r3, #26
 8010a1a:	bf42      	ittt	mi
 8010a1c:	6833      	ldrmi	r3, [r6, #0]
 8010a1e:	3302      	addmi	r3, #2
 8010a20:	6033      	strmi	r3, [r6, #0]
 8010a22:	6825      	ldr	r5, [r4, #0]
 8010a24:	f015 0506 	ands.w	r5, r5, #6
 8010a28:	d106      	bne.n	8010a38 <_printf_common+0x48>
 8010a2a:	f104 0a19 	add.w	sl, r4, #25
 8010a2e:	68e3      	ldr	r3, [r4, #12]
 8010a30:	6832      	ldr	r2, [r6, #0]
 8010a32:	1a9b      	subs	r3, r3, r2
 8010a34:	42ab      	cmp	r3, r5
 8010a36:	dc26      	bgt.n	8010a86 <_printf_common+0x96>
 8010a38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010a3c:	6822      	ldr	r2, [r4, #0]
 8010a3e:	3b00      	subs	r3, #0
 8010a40:	bf18      	it	ne
 8010a42:	2301      	movne	r3, #1
 8010a44:	0692      	lsls	r2, r2, #26
 8010a46:	d42b      	bmi.n	8010aa0 <_printf_common+0xb0>
 8010a48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010a4c:	4641      	mov	r1, r8
 8010a4e:	4638      	mov	r0, r7
 8010a50:	47c8      	blx	r9
 8010a52:	3001      	adds	r0, #1
 8010a54:	d01e      	beq.n	8010a94 <_printf_common+0xa4>
 8010a56:	6823      	ldr	r3, [r4, #0]
 8010a58:	6922      	ldr	r2, [r4, #16]
 8010a5a:	f003 0306 	and.w	r3, r3, #6
 8010a5e:	2b04      	cmp	r3, #4
 8010a60:	bf02      	ittt	eq
 8010a62:	68e5      	ldreq	r5, [r4, #12]
 8010a64:	6833      	ldreq	r3, [r6, #0]
 8010a66:	1aed      	subeq	r5, r5, r3
 8010a68:	68a3      	ldr	r3, [r4, #8]
 8010a6a:	bf0c      	ite	eq
 8010a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a70:	2500      	movne	r5, #0
 8010a72:	4293      	cmp	r3, r2
 8010a74:	bfc4      	itt	gt
 8010a76:	1a9b      	subgt	r3, r3, r2
 8010a78:	18ed      	addgt	r5, r5, r3
 8010a7a:	2600      	movs	r6, #0
 8010a7c:	341a      	adds	r4, #26
 8010a7e:	42b5      	cmp	r5, r6
 8010a80:	d11a      	bne.n	8010ab8 <_printf_common+0xc8>
 8010a82:	2000      	movs	r0, #0
 8010a84:	e008      	b.n	8010a98 <_printf_common+0xa8>
 8010a86:	2301      	movs	r3, #1
 8010a88:	4652      	mov	r2, sl
 8010a8a:	4641      	mov	r1, r8
 8010a8c:	4638      	mov	r0, r7
 8010a8e:	47c8      	blx	r9
 8010a90:	3001      	adds	r0, #1
 8010a92:	d103      	bne.n	8010a9c <_printf_common+0xac>
 8010a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a9c:	3501      	adds	r5, #1
 8010a9e:	e7c6      	b.n	8010a2e <_printf_common+0x3e>
 8010aa0:	18e1      	adds	r1, r4, r3
 8010aa2:	1c5a      	adds	r2, r3, #1
 8010aa4:	2030      	movs	r0, #48	@ 0x30
 8010aa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010aaa:	4422      	add	r2, r4
 8010aac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010ab0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010ab4:	3302      	adds	r3, #2
 8010ab6:	e7c7      	b.n	8010a48 <_printf_common+0x58>
 8010ab8:	2301      	movs	r3, #1
 8010aba:	4622      	mov	r2, r4
 8010abc:	4641      	mov	r1, r8
 8010abe:	4638      	mov	r0, r7
 8010ac0:	47c8      	blx	r9
 8010ac2:	3001      	adds	r0, #1
 8010ac4:	d0e6      	beq.n	8010a94 <_printf_common+0xa4>
 8010ac6:	3601      	adds	r6, #1
 8010ac8:	e7d9      	b.n	8010a7e <_printf_common+0x8e>
	...

08010acc <_printf_i>:
 8010acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ad0:	7e0f      	ldrb	r7, [r1, #24]
 8010ad2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ad4:	2f78      	cmp	r7, #120	@ 0x78
 8010ad6:	4691      	mov	r9, r2
 8010ad8:	4680      	mov	r8, r0
 8010ada:	460c      	mov	r4, r1
 8010adc:	469a      	mov	sl, r3
 8010ade:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010ae2:	d807      	bhi.n	8010af4 <_printf_i+0x28>
 8010ae4:	2f62      	cmp	r7, #98	@ 0x62
 8010ae6:	d80a      	bhi.n	8010afe <_printf_i+0x32>
 8010ae8:	2f00      	cmp	r7, #0
 8010aea:	f000 80d2 	beq.w	8010c92 <_printf_i+0x1c6>
 8010aee:	2f58      	cmp	r7, #88	@ 0x58
 8010af0:	f000 80b9 	beq.w	8010c66 <_printf_i+0x19a>
 8010af4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010af8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010afc:	e03a      	b.n	8010b74 <_printf_i+0xa8>
 8010afe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010b02:	2b15      	cmp	r3, #21
 8010b04:	d8f6      	bhi.n	8010af4 <_printf_i+0x28>
 8010b06:	a101      	add	r1, pc, #4	@ (adr r1, 8010b0c <_printf_i+0x40>)
 8010b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b0c:	08010b65 	.word	0x08010b65
 8010b10:	08010b79 	.word	0x08010b79
 8010b14:	08010af5 	.word	0x08010af5
 8010b18:	08010af5 	.word	0x08010af5
 8010b1c:	08010af5 	.word	0x08010af5
 8010b20:	08010af5 	.word	0x08010af5
 8010b24:	08010b79 	.word	0x08010b79
 8010b28:	08010af5 	.word	0x08010af5
 8010b2c:	08010af5 	.word	0x08010af5
 8010b30:	08010af5 	.word	0x08010af5
 8010b34:	08010af5 	.word	0x08010af5
 8010b38:	08010c79 	.word	0x08010c79
 8010b3c:	08010ba3 	.word	0x08010ba3
 8010b40:	08010c33 	.word	0x08010c33
 8010b44:	08010af5 	.word	0x08010af5
 8010b48:	08010af5 	.word	0x08010af5
 8010b4c:	08010c9b 	.word	0x08010c9b
 8010b50:	08010af5 	.word	0x08010af5
 8010b54:	08010ba3 	.word	0x08010ba3
 8010b58:	08010af5 	.word	0x08010af5
 8010b5c:	08010af5 	.word	0x08010af5
 8010b60:	08010c3b 	.word	0x08010c3b
 8010b64:	6833      	ldr	r3, [r6, #0]
 8010b66:	1d1a      	adds	r2, r3, #4
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	6032      	str	r2, [r6, #0]
 8010b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010b74:	2301      	movs	r3, #1
 8010b76:	e09d      	b.n	8010cb4 <_printf_i+0x1e8>
 8010b78:	6833      	ldr	r3, [r6, #0]
 8010b7a:	6820      	ldr	r0, [r4, #0]
 8010b7c:	1d19      	adds	r1, r3, #4
 8010b7e:	6031      	str	r1, [r6, #0]
 8010b80:	0606      	lsls	r6, r0, #24
 8010b82:	d501      	bpl.n	8010b88 <_printf_i+0xbc>
 8010b84:	681d      	ldr	r5, [r3, #0]
 8010b86:	e003      	b.n	8010b90 <_printf_i+0xc4>
 8010b88:	0645      	lsls	r5, r0, #25
 8010b8a:	d5fb      	bpl.n	8010b84 <_printf_i+0xb8>
 8010b8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010b90:	2d00      	cmp	r5, #0
 8010b92:	da03      	bge.n	8010b9c <_printf_i+0xd0>
 8010b94:	232d      	movs	r3, #45	@ 0x2d
 8010b96:	426d      	negs	r5, r5
 8010b98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b9c:	4859      	ldr	r0, [pc, #356]	@ (8010d04 <_printf_i+0x238>)
 8010b9e:	230a      	movs	r3, #10
 8010ba0:	e011      	b.n	8010bc6 <_printf_i+0xfa>
 8010ba2:	6821      	ldr	r1, [r4, #0]
 8010ba4:	6833      	ldr	r3, [r6, #0]
 8010ba6:	0608      	lsls	r0, r1, #24
 8010ba8:	f853 5b04 	ldr.w	r5, [r3], #4
 8010bac:	d402      	bmi.n	8010bb4 <_printf_i+0xe8>
 8010bae:	0649      	lsls	r1, r1, #25
 8010bb0:	bf48      	it	mi
 8010bb2:	b2ad      	uxthmi	r5, r5
 8010bb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8010bb6:	4853      	ldr	r0, [pc, #332]	@ (8010d04 <_printf_i+0x238>)
 8010bb8:	6033      	str	r3, [r6, #0]
 8010bba:	bf14      	ite	ne
 8010bbc:	230a      	movne	r3, #10
 8010bbe:	2308      	moveq	r3, #8
 8010bc0:	2100      	movs	r1, #0
 8010bc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010bc6:	6866      	ldr	r6, [r4, #4]
 8010bc8:	60a6      	str	r6, [r4, #8]
 8010bca:	2e00      	cmp	r6, #0
 8010bcc:	bfa2      	ittt	ge
 8010bce:	6821      	ldrge	r1, [r4, #0]
 8010bd0:	f021 0104 	bicge.w	r1, r1, #4
 8010bd4:	6021      	strge	r1, [r4, #0]
 8010bd6:	b90d      	cbnz	r5, 8010bdc <_printf_i+0x110>
 8010bd8:	2e00      	cmp	r6, #0
 8010bda:	d04b      	beq.n	8010c74 <_printf_i+0x1a8>
 8010bdc:	4616      	mov	r6, r2
 8010bde:	fbb5 f1f3 	udiv	r1, r5, r3
 8010be2:	fb03 5711 	mls	r7, r3, r1, r5
 8010be6:	5dc7      	ldrb	r7, [r0, r7]
 8010be8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010bec:	462f      	mov	r7, r5
 8010bee:	42bb      	cmp	r3, r7
 8010bf0:	460d      	mov	r5, r1
 8010bf2:	d9f4      	bls.n	8010bde <_printf_i+0x112>
 8010bf4:	2b08      	cmp	r3, #8
 8010bf6:	d10b      	bne.n	8010c10 <_printf_i+0x144>
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	07df      	lsls	r7, r3, #31
 8010bfc:	d508      	bpl.n	8010c10 <_printf_i+0x144>
 8010bfe:	6923      	ldr	r3, [r4, #16]
 8010c00:	6861      	ldr	r1, [r4, #4]
 8010c02:	4299      	cmp	r1, r3
 8010c04:	bfde      	ittt	le
 8010c06:	2330      	movle	r3, #48	@ 0x30
 8010c08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c0c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010c10:	1b92      	subs	r2, r2, r6
 8010c12:	6122      	str	r2, [r4, #16]
 8010c14:	f8cd a000 	str.w	sl, [sp]
 8010c18:	464b      	mov	r3, r9
 8010c1a:	aa03      	add	r2, sp, #12
 8010c1c:	4621      	mov	r1, r4
 8010c1e:	4640      	mov	r0, r8
 8010c20:	f7ff fee6 	bl	80109f0 <_printf_common>
 8010c24:	3001      	adds	r0, #1
 8010c26:	d14a      	bne.n	8010cbe <_printf_i+0x1f2>
 8010c28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c2c:	b004      	add	sp, #16
 8010c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c32:	6823      	ldr	r3, [r4, #0]
 8010c34:	f043 0320 	orr.w	r3, r3, #32
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	4833      	ldr	r0, [pc, #204]	@ (8010d08 <_printf_i+0x23c>)
 8010c3c:	2778      	movs	r7, #120	@ 0x78
 8010c3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010c42:	6823      	ldr	r3, [r4, #0]
 8010c44:	6831      	ldr	r1, [r6, #0]
 8010c46:	061f      	lsls	r7, r3, #24
 8010c48:	f851 5b04 	ldr.w	r5, [r1], #4
 8010c4c:	d402      	bmi.n	8010c54 <_printf_i+0x188>
 8010c4e:	065f      	lsls	r7, r3, #25
 8010c50:	bf48      	it	mi
 8010c52:	b2ad      	uxthmi	r5, r5
 8010c54:	6031      	str	r1, [r6, #0]
 8010c56:	07d9      	lsls	r1, r3, #31
 8010c58:	bf44      	itt	mi
 8010c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8010c5e:	6023      	strmi	r3, [r4, #0]
 8010c60:	b11d      	cbz	r5, 8010c6a <_printf_i+0x19e>
 8010c62:	2310      	movs	r3, #16
 8010c64:	e7ac      	b.n	8010bc0 <_printf_i+0xf4>
 8010c66:	4827      	ldr	r0, [pc, #156]	@ (8010d04 <_printf_i+0x238>)
 8010c68:	e7e9      	b.n	8010c3e <_printf_i+0x172>
 8010c6a:	6823      	ldr	r3, [r4, #0]
 8010c6c:	f023 0320 	bic.w	r3, r3, #32
 8010c70:	6023      	str	r3, [r4, #0]
 8010c72:	e7f6      	b.n	8010c62 <_printf_i+0x196>
 8010c74:	4616      	mov	r6, r2
 8010c76:	e7bd      	b.n	8010bf4 <_printf_i+0x128>
 8010c78:	6833      	ldr	r3, [r6, #0]
 8010c7a:	6825      	ldr	r5, [r4, #0]
 8010c7c:	6961      	ldr	r1, [r4, #20]
 8010c7e:	1d18      	adds	r0, r3, #4
 8010c80:	6030      	str	r0, [r6, #0]
 8010c82:	062e      	lsls	r6, r5, #24
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	d501      	bpl.n	8010c8c <_printf_i+0x1c0>
 8010c88:	6019      	str	r1, [r3, #0]
 8010c8a:	e002      	b.n	8010c92 <_printf_i+0x1c6>
 8010c8c:	0668      	lsls	r0, r5, #25
 8010c8e:	d5fb      	bpl.n	8010c88 <_printf_i+0x1bc>
 8010c90:	8019      	strh	r1, [r3, #0]
 8010c92:	2300      	movs	r3, #0
 8010c94:	6123      	str	r3, [r4, #16]
 8010c96:	4616      	mov	r6, r2
 8010c98:	e7bc      	b.n	8010c14 <_printf_i+0x148>
 8010c9a:	6833      	ldr	r3, [r6, #0]
 8010c9c:	1d1a      	adds	r2, r3, #4
 8010c9e:	6032      	str	r2, [r6, #0]
 8010ca0:	681e      	ldr	r6, [r3, #0]
 8010ca2:	6862      	ldr	r2, [r4, #4]
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f7ef fab2 	bl	8000210 <memchr>
 8010cac:	b108      	cbz	r0, 8010cb2 <_printf_i+0x1e6>
 8010cae:	1b80      	subs	r0, r0, r6
 8010cb0:	6060      	str	r0, [r4, #4]
 8010cb2:	6863      	ldr	r3, [r4, #4]
 8010cb4:	6123      	str	r3, [r4, #16]
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cbc:	e7aa      	b.n	8010c14 <_printf_i+0x148>
 8010cbe:	6923      	ldr	r3, [r4, #16]
 8010cc0:	4632      	mov	r2, r6
 8010cc2:	4649      	mov	r1, r9
 8010cc4:	4640      	mov	r0, r8
 8010cc6:	47d0      	blx	sl
 8010cc8:	3001      	adds	r0, #1
 8010cca:	d0ad      	beq.n	8010c28 <_printf_i+0x15c>
 8010ccc:	6823      	ldr	r3, [r4, #0]
 8010cce:	079b      	lsls	r3, r3, #30
 8010cd0:	d413      	bmi.n	8010cfa <_printf_i+0x22e>
 8010cd2:	68e0      	ldr	r0, [r4, #12]
 8010cd4:	9b03      	ldr	r3, [sp, #12]
 8010cd6:	4298      	cmp	r0, r3
 8010cd8:	bfb8      	it	lt
 8010cda:	4618      	movlt	r0, r3
 8010cdc:	e7a6      	b.n	8010c2c <_printf_i+0x160>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	4632      	mov	r2, r6
 8010ce2:	4649      	mov	r1, r9
 8010ce4:	4640      	mov	r0, r8
 8010ce6:	47d0      	blx	sl
 8010ce8:	3001      	adds	r0, #1
 8010cea:	d09d      	beq.n	8010c28 <_printf_i+0x15c>
 8010cec:	3501      	adds	r5, #1
 8010cee:	68e3      	ldr	r3, [r4, #12]
 8010cf0:	9903      	ldr	r1, [sp, #12]
 8010cf2:	1a5b      	subs	r3, r3, r1
 8010cf4:	42ab      	cmp	r3, r5
 8010cf6:	dcf2      	bgt.n	8010cde <_printf_i+0x212>
 8010cf8:	e7eb      	b.n	8010cd2 <_printf_i+0x206>
 8010cfa:	2500      	movs	r5, #0
 8010cfc:	f104 0619 	add.w	r6, r4, #25
 8010d00:	e7f5      	b.n	8010cee <_printf_i+0x222>
 8010d02:	bf00      	nop
 8010d04:	08011d69 	.word	0x08011d69
 8010d08:	08011d7a 	.word	0x08011d7a

08010d0c <__sflush_r>:
 8010d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d14:	0716      	lsls	r6, r2, #28
 8010d16:	4605      	mov	r5, r0
 8010d18:	460c      	mov	r4, r1
 8010d1a:	d454      	bmi.n	8010dc6 <__sflush_r+0xba>
 8010d1c:	684b      	ldr	r3, [r1, #4]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	dc02      	bgt.n	8010d28 <__sflush_r+0x1c>
 8010d22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	dd48      	ble.n	8010dba <__sflush_r+0xae>
 8010d28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d2a:	2e00      	cmp	r6, #0
 8010d2c:	d045      	beq.n	8010dba <__sflush_r+0xae>
 8010d2e:	2300      	movs	r3, #0
 8010d30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d34:	682f      	ldr	r7, [r5, #0]
 8010d36:	6a21      	ldr	r1, [r4, #32]
 8010d38:	602b      	str	r3, [r5, #0]
 8010d3a:	d030      	beq.n	8010d9e <__sflush_r+0x92>
 8010d3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010d3e:	89a3      	ldrh	r3, [r4, #12]
 8010d40:	0759      	lsls	r1, r3, #29
 8010d42:	d505      	bpl.n	8010d50 <__sflush_r+0x44>
 8010d44:	6863      	ldr	r3, [r4, #4]
 8010d46:	1ad2      	subs	r2, r2, r3
 8010d48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d4a:	b10b      	cbz	r3, 8010d50 <__sflush_r+0x44>
 8010d4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d4e:	1ad2      	subs	r2, r2, r3
 8010d50:	2300      	movs	r3, #0
 8010d52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d54:	6a21      	ldr	r1, [r4, #32]
 8010d56:	4628      	mov	r0, r5
 8010d58:	47b0      	blx	r6
 8010d5a:	1c43      	adds	r3, r0, #1
 8010d5c:	89a3      	ldrh	r3, [r4, #12]
 8010d5e:	d106      	bne.n	8010d6e <__sflush_r+0x62>
 8010d60:	6829      	ldr	r1, [r5, #0]
 8010d62:	291d      	cmp	r1, #29
 8010d64:	d82b      	bhi.n	8010dbe <__sflush_r+0xb2>
 8010d66:	4a2a      	ldr	r2, [pc, #168]	@ (8010e10 <__sflush_r+0x104>)
 8010d68:	410a      	asrs	r2, r1
 8010d6a:	07d6      	lsls	r6, r2, #31
 8010d6c:	d427      	bmi.n	8010dbe <__sflush_r+0xb2>
 8010d6e:	2200      	movs	r2, #0
 8010d70:	6062      	str	r2, [r4, #4]
 8010d72:	04d9      	lsls	r1, r3, #19
 8010d74:	6922      	ldr	r2, [r4, #16]
 8010d76:	6022      	str	r2, [r4, #0]
 8010d78:	d504      	bpl.n	8010d84 <__sflush_r+0x78>
 8010d7a:	1c42      	adds	r2, r0, #1
 8010d7c:	d101      	bne.n	8010d82 <__sflush_r+0x76>
 8010d7e:	682b      	ldr	r3, [r5, #0]
 8010d80:	b903      	cbnz	r3, 8010d84 <__sflush_r+0x78>
 8010d82:	6560      	str	r0, [r4, #84]	@ 0x54
 8010d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d86:	602f      	str	r7, [r5, #0]
 8010d88:	b1b9      	cbz	r1, 8010dba <__sflush_r+0xae>
 8010d8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d8e:	4299      	cmp	r1, r3
 8010d90:	d002      	beq.n	8010d98 <__sflush_r+0x8c>
 8010d92:	4628      	mov	r0, r5
 8010d94:	f7ff fb40 	bl	8010418 <_free_r>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d9c:	e00d      	b.n	8010dba <__sflush_r+0xae>
 8010d9e:	2301      	movs	r3, #1
 8010da0:	4628      	mov	r0, r5
 8010da2:	47b0      	blx	r6
 8010da4:	4602      	mov	r2, r0
 8010da6:	1c50      	adds	r0, r2, #1
 8010da8:	d1c9      	bne.n	8010d3e <__sflush_r+0x32>
 8010daa:	682b      	ldr	r3, [r5, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d0c6      	beq.n	8010d3e <__sflush_r+0x32>
 8010db0:	2b1d      	cmp	r3, #29
 8010db2:	d001      	beq.n	8010db8 <__sflush_r+0xac>
 8010db4:	2b16      	cmp	r3, #22
 8010db6:	d11e      	bne.n	8010df6 <__sflush_r+0xea>
 8010db8:	602f      	str	r7, [r5, #0]
 8010dba:	2000      	movs	r0, #0
 8010dbc:	e022      	b.n	8010e04 <__sflush_r+0xf8>
 8010dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dc2:	b21b      	sxth	r3, r3
 8010dc4:	e01b      	b.n	8010dfe <__sflush_r+0xf2>
 8010dc6:	690f      	ldr	r7, [r1, #16]
 8010dc8:	2f00      	cmp	r7, #0
 8010dca:	d0f6      	beq.n	8010dba <__sflush_r+0xae>
 8010dcc:	0793      	lsls	r3, r2, #30
 8010dce:	680e      	ldr	r6, [r1, #0]
 8010dd0:	bf08      	it	eq
 8010dd2:	694b      	ldreq	r3, [r1, #20]
 8010dd4:	600f      	str	r7, [r1, #0]
 8010dd6:	bf18      	it	ne
 8010dd8:	2300      	movne	r3, #0
 8010dda:	eba6 0807 	sub.w	r8, r6, r7
 8010dde:	608b      	str	r3, [r1, #8]
 8010de0:	f1b8 0f00 	cmp.w	r8, #0
 8010de4:	dde9      	ble.n	8010dba <__sflush_r+0xae>
 8010de6:	6a21      	ldr	r1, [r4, #32]
 8010de8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010dea:	4643      	mov	r3, r8
 8010dec:	463a      	mov	r2, r7
 8010dee:	4628      	mov	r0, r5
 8010df0:	47b0      	blx	r6
 8010df2:	2800      	cmp	r0, #0
 8010df4:	dc08      	bgt.n	8010e08 <__sflush_r+0xfc>
 8010df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dfe:	81a3      	strh	r3, [r4, #12]
 8010e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e08:	4407      	add	r7, r0
 8010e0a:	eba8 0800 	sub.w	r8, r8, r0
 8010e0e:	e7e7      	b.n	8010de0 <__sflush_r+0xd4>
 8010e10:	dfbffffe 	.word	0xdfbffffe

08010e14 <_fflush_r>:
 8010e14:	b538      	push	{r3, r4, r5, lr}
 8010e16:	690b      	ldr	r3, [r1, #16]
 8010e18:	4605      	mov	r5, r0
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	b913      	cbnz	r3, 8010e24 <_fflush_r+0x10>
 8010e1e:	2500      	movs	r5, #0
 8010e20:	4628      	mov	r0, r5
 8010e22:	bd38      	pop	{r3, r4, r5, pc}
 8010e24:	b118      	cbz	r0, 8010e2e <_fflush_r+0x1a>
 8010e26:	6a03      	ldr	r3, [r0, #32]
 8010e28:	b90b      	cbnz	r3, 8010e2e <_fflush_r+0x1a>
 8010e2a:	f7ff f8fb 	bl	8010024 <__sinit>
 8010e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d0f3      	beq.n	8010e1e <_fflush_r+0xa>
 8010e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010e38:	07d0      	lsls	r0, r2, #31
 8010e3a:	d404      	bmi.n	8010e46 <_fflush_r+0x32>
 8010e3c:	0599      	lsls	r1, r3, #22
 8010e3e:	d402      	bmi.n	8010e46 <_fflush_r+0x32>
 8010e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e42:	f7ff faa6 	bl	8010392 <__retarget_lock_acquire_recursive>
 8010e46:	4628      	mov	r0, r5
 8010e48:	4621      	mov	r1, r4
 8010e4a:	f7ff ff5f 	bl	8010d0c <__sflush_r>
 8010e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e50:	07da      	lsls	r2, r3, #31
 8010e52:	4605      	mov	r5, r0
 8010e54:	d4e4      	bmi.n	8010e20 <_fflush_r+0xc>
 8010e56:	89a3      	ldrh	r3, [r4, #12]
 8010e58:	059b      	lsls	r3, r3, #22
 8010e5a:	d4e1      	bmi.n	8010e20 <_fflush_r+0xc>
 8010e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e5e:	f7ff fa99 	bl	8010394 <__retarget_lock_release_recursive>
 8010e62:	e7dd      	b.n	8010e20 <_fflush_r+0xc>

08010e64 <fiprintf>:
 8010e64:	b40e      	push	{r1, r2, r3}
 8010e66:	b503      	push	{r0, r1, lr}
 8010e68:	4601      	mov	r1, r0
 8010e6a:	ab03      	add	r3, sp, #12
 8010e6c:	4805      	ldr	r0, [pc, #20]	@ (8010e84 <fiprintf+0x20>)
 8010e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e72:	6800      	ldr	r0, [r0, #0]
 8010e74:	9301      	str	r3, [sp, #4]
 8010e76:	f7ff fca3 	bl	80107c0 <_vfiprintf_r>
 8010e7a:	b002      	add	sp, #8
 8010e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e80:	b003      	add	sp, #12
 8010e82:	4770      	bx	lr
 8010e84:	200000c0 	.word	0x200000c0

08010e88 <__swbuf_r>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	460e      	mov	r6, r1
 8010e8c:	4614      	mov	r4, r2
 8010e8e:	4605      	mov	r5, r0
 8010e90:	b118      	cbz	r0, 8010e9a <__swbuf_r+0x12>
 8010e92:	6a03      	ldr	r3, [r0, #32]
 8010e94:	b90b      	cbnz	r3, 8010e9a <__swbuf_r+0x12>
 8010e96:	f7ff f8c5 	bl	8010024 <__sinit>
 8010e9a:	69a3      	ldr	r3, [r4, #24]
 8010e9c:	60a3      	str	r3, [r4, #8]
 8010e9e:	89a3      	ldrh	r3, [r4, #12]
 8010ea0:	071a      	lsls	r2, r3, #28
 8010ea2:	d501      	bpl.n	8010ea8 <__swbuf_r+0x20>
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	b943      	cbnz	r3, 8010eba <__swbuf_r+0x32>
 8010ea8:	4621      	mov	r1, r4
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f000 f82a 	bl	8010f04 <__swsetup_r>
 8010eb0:	b118      	cbz	r0, 8010eba <__swbuf_r+0x32>
 8010eb2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010eb6:	4638      	mov	r0, r7
 8010eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010eba:	6823      	ldr	r3, [r4, #0]
 8010ebc:	6922      	ldr	r2, [r4, #16]
 8010ebe:	1a98      	subs	r0, r3, r2
 8010ec0:	6963      	ldr	r3, [r4, #20]
 8010ec2:	b2f6      	uxtb	r6, r6
 8010ec4:	4283      	cmp	r3, r0
 8010ec6:	4637      	mov	r7, r6
 8010ec8:	dc05      	bgt.n	8010ed6 <__swbuf_r+0x4e>
 8010eca:	4621      	mov	r1, r4
 8010ecc:	4628      	mov	r0, r5
 8010ece:	f7ff ffa1 	bl	8010e14 <_fflush_r>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d1ed      	bne.n	8010eb2 <__swbuf_r+0x2a>
 8010ed6:	68a3      	ldr	r3, [r4, #8]
 8010ed8:	3b01      	subs	r3, #1
 8010eda:	60a3      	str	r3, [r4, #8]
 8010edc:	6823      	ldr	r3, [r4, #0]
 8010ede:	1c5a      	adds	r2, r3, #1
 8010ee0:	6022      	str	r2, [r4, #0]
 8010ee2:	701e      	strb	r6, [r3, #0]
 8010ee4:	6962      	ldr	r2, [r4, #20]
 8010ee6:	1c43      	adds	r3, r0, #1
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d004      	beq.n	8010ef6 <__swbuf_r+0x6e>
 8010eec:	89a3      	ldrh	r3, [r4, #12]
 8010eee:	07db      	lsls	r3, r3, #31
 8010ef0:	d5e1      	bpl.n	8010eb6 <__swbuf_r+0x2e>
 8010ef2:	2e0a      	cmp	r6, #10
 8010ef4:	d1df      	bne.n	8010eb6 <__swbuf_r+0x2e>
 8010ef6:	4621      	mov	r1, r4
 8010ef8:	4628      	mov	r0, r5
 8010efa:	f7ff ff8b 	bl	8010e14 <_fflush_r>
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d0d9      	beq.n	8010eb6 <__swbuf_r+0x2e>
 8010f02:	e7d6      	b.n	8010eb2 <__swbuf_r+0x2a>

08010f04 <__swsetup_r>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	4b29      	ldr	r3, [pc, #164]	@ (8010fac <__swsetup_r+0xa8>)
 8010f08:	4605      	mov	r5, r0
 8010f0a:	6818      	ldr	r0, [r3, #0]
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	b118      	cbz	r0, 8010f18 <__swsetup_r+0x14>
 8010f10:	6a03      	ldr	r3, [r0, #32]
 8010f12:	b90b      	cbnz	r3, 8010f18 <__swsetup_r+0x14>
 8010f14:	f7ff f886 	bl	8010024 <__sinit>
 8010f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f1c:	0719      	lsls	r1, r3, #28
 8010f1e:	d422      	bmi.n	8010f66 <__swsetup_r+0x62>
 8010f20:	06da      	lsls	r2, r3, #27
 8010f22:	d407      	bmi.n	8010f34 <__swsetup_r+0x30>
 8010f24:	2209      	movs	r2, #9
 8010f26:	602a      	str	r2, [r5, #0]
 8010f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f2c:	81a3      	strh	r3, [r4, #12]
 8010f2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f32:	e033      	b.n	8010f9c <__swsetup_r+0x98>
 8010f34:	0758      	lsls	r0, r3, #29
 8010f36:	d512      	bpl.n	8010f5e <__swsetup_r+0x5a>
 8010f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f3a:	b141      	cbz	r1, 8010f4e <__swsetup_r+0x4a>
 8010f3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f40:	4299      	cmp	r1, r3
 8010f42:	d002      	beq.n	8010f4a <__swsetup_r+0x46>
 8010f44:	4628      	mov	r0, r5
 8010f46:	f7ff fa67 	bl	8010418 <_free_r>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f4e:	89a3      	ldrh	r3, [r4, #12]
 8010f50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010f54:	81a3      	strh	r3, [r4, #12]
 8010f56:	2300      	movs	r3, #0
 8010f58:	6063      	str	r3, [r4, #4]
 8010f5a:	6923      	ldr	r3, [r4, #16]
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	89a3      	ldrh	r3, [r4, #12]
 8010f60:	f043 0308 	orr.w	r3, r3, #8
 8010f64:	81a3      	strh	r3, [r4, #12]
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	b94b      	cbnz	r3, 8010f7e <__swsetup_r+0x7a>
 8010f6a:	89a3      	ldrh	r3, [r4, #12]
 8010f6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f74:	d003      	beq.n	8010f7e <__swsetup_r+0x7a>
 8010f76:	4621      	mov	r1, r4
 8010f78:	4628      	mov	r0, r5
 8010f7a:	f000 f860 	bl	801103e <__smakebuf_r>
 8010f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f82:	f013 0201 	ands.w	r2, r3, #1
 8010f86:	d00a      	beq.n	8010f9e <__swsetup_r+0x9a>
 8010f88:	2200      	movs	r2, #0
 8010f8a:	60a2      	str	r2, [r4, #8]
 8010f8c:	6962      	ldr	r2, [r4, #20]
 8010f8e:	4252      	negs	r2, r2
 8010f90:	61a2      	str	r2, [r4, #24]
 8010f92:	6922      	ldr	r2, [r4, #16]
 8010f94:	b942      	cbnz	r2, 8010fa8 <__swsetup_r+0xa4>
 8010f96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010f9a:	d1c5      	bne.n	8010f28 <__swsetup_r+0x24>
 8010f9c:	bd38      	pop	{r3, r4, r5, pc}
 8010f9e:	0799      	lsls	r1, r3, #30
 8010fa0:	bf58      	it	pl
 8010fa2:	6962      	ldrpl	r2, [r4, #20]
 8010fa4:	60a2      	str	r2, [r4, #8]
 8010fa6:	e7f4      	b.n	8010f92 <__swsetup_r+0x8e>
 8010fa8:	2000      	movs	r0, #0
 8010faa:	e7f7      	b.n	8010f9c <__swsetup_r+0x98>
 8010fac:	200000c0 	.word	0x200000c0

08010fb0 <memmove>:
 8010fb0:	4288      	cmp	r0, r1
 8010fb2:	b510      	push	{r4, lr}
 8010fb4:	eb01 0402 	add.w	r4, r1, r2
 8010fb8:	d902      	bls.n	8010fc0 <memmove+0x10>
 8010fba:	4284      	cmp	r4, r0
 8010fbc:	4623      	mov	r3, r4
 8010fbe:	d807      	bhi.n	8010fd0 <memmove+0x20>
 8010fc0:	1e43      	subs	r3, r0, #1
 8010fc2:	42a1      	cmp	r1, r4
 8010fc4:	d008      	beq.n	8010fd8 <memmove+0x28>
 8010fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010fce:	e7f8      	b.n	8010fc2 <memmove+0x12>
 8010fd0:	4402      	add	r2, r0
 8010fd2:	4601      	mov	r1, r0
 8010fd4:	428a      	cmp	r2, r1
 8010fd6:	d100      	bne.n	8010fda <memmove+0x2a>
 8010fd8:	bd10      	pop	{r4, pc}
 8010fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fe2:	e7f7      	b.n	8010fd4 <memmove+0x24>

08010fe4 <abort>:
 8010fe4:	b508      	push	{r3, lr}
 8010fe6:	2006      	movs	r0, #6
 8010fe8:	f000 f88e 	bl	8011108 <raise>
 8010fec:	2001      	movs	r0, #1
 8010fee:	f7f0 f9ad 	bl	800134c <_exit>

08010ff2 <__swhatbuf_r>:
 8010ff2:	b570      	push	{r4, r5, r6, lr}
 8010ff4:	460c      	mov	r4, r1
 8010ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ffa:	2900      	cmp	r1, #0
 8010ffc:	b096      	sub	sp, #88	@ 0x58
 8010ffe:	4615      	mov	r5, r2
 8011000:	461e      	mov	r6, r3
 8011002:	da0d      	bge.n	8011020 <__swhatbuf_r+0x2e>
 8011004:	89a3      	ldrh	r3, [r4, #12]
 8011006:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801100a:	f04f 0100 	mov.w	r1, #0
 801100e:	bf14      	ite	ne
 8011010:	2340      	movne	r3, #64	@ 0x40
 8011012:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011016:	2000      	movs	r0, #0
 8011018:	6031      	str	r1, [r6, #0]
 801101a:	602b      	str	r3, [r5, #0]
 801101c:	b016      	add	sp, #88	@ 0x58
 801101e:	bd70      	pop	{r4, r5, r6, pc}
 8011020:	466a      	mov	r2, sp
 8011022:	f000 f879 	bl	8011118 <_fstat_r>
 8011026:	2800      	cmp	r0, #0
 8011028:	dbec      	blt.n	8011004 <__swhatbuf_r+0x12>
 801102a:	9901      	ldr	r1, [sp, #4]
 801102c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011030:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011034:	4259      	negs	r1, r3
 8011036:	4159      	adcs	r1, r3
 8011038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801103c:	e7eb      	b.n	8011016 <__swhatbuf_r+0x24>

0801103e <__smakebuf_r>:
 801103e:	898b      	ldrh	r3, [r1, #12]
 8011040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011042:	079d      	lsls	r5, r3, #30
 8011044:	4606      	mov	r6, r0
 8011046:	460c      	mov	r4, r1
 8011048:	d507      	bpl.n	801105a <__smakebuf_r+0x1c>
 801104a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801104e:	6023      	str	r3, [r4, #0]
 8011050:	6123      	str	r3, [r4, #16]
 8011052:	2301      	movs	r3, #1
 8011054:	6163      	str	r3, [r4, #20]
 8011056:	b003      	add	sp, #12
 8011058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801105a:	ab01      	add	r3, sp, #4
 801105c:	466a      	mov	r2, sp
 801105e:	f7ff ffc8 	bl	8010ff2 <__swhatbuf_r>
 8011062:	9f00      	ldr	r7, [sp, #0]
 8011064:	4605      	mov	r5, r0
 8011066:	4639      	mov	r1, r7
 8011068:	4630      	mov	r0, r6
 801106a:	f7fe fda9 	bl	800fbc0 <_malloc_r>
 801106e:	b948      	cbnz	r0, 8011084 <__smakebuf_r+0x46>
 8011070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011074:	059a      	lsls	r2, r3, #22
 8011076:	d4ee      	bmi.n	8011056 <__smakebuf_r+0x18>
 8011078:	f023 0303 	bic.w	r3, r3, #3
 801107c:	f043 0302 	orr.w	r3, r3, #2
 8011080:	81a3      	strh	r3, [r4, #12]
 8011082:	e7e2      	b.n	801104a <__smakebuf_r+0xc>
 8011084:	89a3      	ldrh	r3, [r4, #12]
 8011086:	6020      	str	r0, [r4, #0]
 8011088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801108c:	81a3      	strh	r3, [r4, #12]
 801108e:	9b01      	ldr	r3, [sp, #4]
 8011090:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011094:	b15b      	cbz	r3, 80110ae <__smakebuf_r+0x70>
 8011096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801109a:	4630      	mov	r0, r6
 801109c:	f000 f84e 	bl	801113c <_isatty_r>
 80110a0:	b128      	cbz	r0, 80110ae <__smakebuf_r+0x70>
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	f023 0303 	bic.w	r3, r3, #3
 80110a8:	f043 0301 	orr.w	r3, r3, #1
 80110ac:	81a3      	strh	r3, [r4, #12]
 80110ae:	89a3      	ldrh	r3, [r4, #12]
 80110b0:	431d      	orrs	r5, r3
 80110b2:	81a5      	strh	r5, [r4, #12]
 80110b4:	e7cf      	b.n	8011056 <__smakebuf_r+0x18>

080110b6 <_raise_r>:
 80110b6:	291f      	cmp	r1, #31
 80110b8:	b538      	push	{r3, r4, r5, lr}
 80110ba:	4605      	mov	r5, r0
 80110bc:	460c      	mov	r4, r1
 80110be:	d904      	bls.n	80110ca <_raise_r+0x14>
 80110c0:	2316      	movs	r3, #22
 80110c2:	6003      	str	r3, [r0, #0]
 80110c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110c8:	bd38      	pop	{r3, r4, r5, pc}
 80110ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80110cc:	b112      	cbz	r2, 80110d4 <_raise_r+0x1e>
 80110ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110d2:	b94b      	cbnz	r3, 80110e8 <_raise_r+0x32>
 80110d4:	4628      	mov	r0, r5
 80110d6:	f000 f853 	bl	8011180 <_getpid_r>
 80110da:	4622      	mov	r2, r4
 80110dc:	4601      	mov	r1, r0
 80110de:	4628      	mov	r0, r5
 80110e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110e4:	f000 b83a 	b.w	801115c <_kill_r>
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d00a      	beq.n	8011102 <_raise_r+0x4c>
 80110ec:	1c59      	adds	r1, r3, #1
 80110ee:	d103      	bne.n	80110f8 <_raise_r+0x42>
 80110f0:	2316      	movs	r3, #22
 80110f2:	6003      	str	r3, [r0, #0]
 80110f4:	2001      	movs	r0, #1
 80110f6:	e7e7      	b.n	80110c8 <_raise_r+0x12>
 80110f8:	2100      	movs	r1, #0
 80110fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80110fe:	4620      	mov	r0, r4
 8011100:	4798      	blx	r3
 8011102:	2000      	movs	r0, #0
 8011104:	e7e0      	b.n	80110c8 <_raise_r+0x12>
	...

08011108 <raise>:
 8011108:	4b02      	ldr	r3, [pc, #8]	@ (8011114 <raise+0xc>)
 801110a:	4601      	mov	r1, r0
 801110c:	6818      	ldr	r0, [r3, #0]
 801110e:	f7ff bfd2 	b.w	80110b6 <_raise_r>
 8011112:	bf00      	nop
 8011114:	200000c0 	.word	0x200000c0

08011118 <_fstat_r>:
 8011118:	b538      	push	{r3, r4, r5, lr}
 801111a:	4d07      	ldr	r5, [pc, #28]	@ (8011138 <_fstat_r+0x20>)
 801111c:	2300      	movs	r3, #0
 801111e:	4604      	mov	r4, r0
 8011120:	4608      	mov	r0, r1
 8011122:	4611      	mov	r1, r2
 8011124:	602b      	str	r3, [r5, #0]
 8011126:	f7f0 f961 	bl	80013ec <_fstat>
 801112a:	1c43      	adds	r3, r0, #1
 801112c:	d102      	bne.n	8011134 <_fstat_r+0x1c>
 801112e:	682b      	ldr	r3, [r5, #0]
 8011130:	b103      	cbz	r3, 8011134 <_fstat_r+0x1c>
 8011132:	6023      	str	r3, [r4, #0]
 8011134:	bd38      	pop	{r3, r4, r5, pc}
 8011136:	bf00      	nop
 8011138:	2000dc0c 	.word	0x2000dc0c

0801113c <_isatty_r>:
 801113c:	b538      	push	{r3, r4, r5, lr}
 801113e:	4d06      	ldr	r5, [pc, #24]	@ (8011158 <_isatty_r+0x1c>)
 8011140:	2300      	movs	r3, #0
 8011142:	4604      	mov	r4, r0
 8011144:	4608      	mov	r0, r1
 8011146:	602b      	str	r3, [r5, #0]
 8011148:	f7f0 f960 	bl	800140c <_isatty>
 801114c:	1c43      	adds	r3, r0, #1
 801114e:	d102      	bne.n	8011156 <_isatty_r+0x1a>
 8011150:	682b      	ldr	r3, [r5, #0]
 8011152:	b103      	cbz	r3, 8011156 <_isatty_r+0x1a>
 8011154:	6023      	str	r3, [r4, #0]
 8011156:	bd38      	pop	{r3, r4, r5, pc}
 8011158:	2000dc0c 	.word	0x2000dc0c

0801115c <_kill_r>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	4d07      	ldr	r5, [pc, #28]	@ (801117c <_kill_r+0x20>)
 8011160:	2300      	movs	r3, #0
 8011162:	4604      	mov	r4, r0
 8011164:	4608      	mov	r0, r1
 8011166:	4611      	mov	r1, r2
 8011168:	602b      	str	r3, [r5, #0]
 801116a:	f7f0 f8df 	bl	800132c <_kill>
 801116e:	1c43      	adds	r3, r0, #1
 8011170:	d102      	bne.n	8011178 <_kill_r+0x1c>
 8011172:	682b      	ldr	r3, [r5, #0]
 8011174:	b103      	cbz	r3, 8011178 <_kill_r+0x1c>
 8011176:	6023      	str	r3, [r4, #0]
 8011178:	bd38      	pop	{r3, r4, r5, pc}
 801117a:	bf00      	nop
 801117c:	2000dc0c 	.word	0x2000dc0c

08011180 <_getpid_r>:
 8011180:	f7f0 b8cc 	b.w	800131c <_getpid>

08011184 <_init>:
 8011184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011186:	bf00      	nop
 8011188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801118a:	bc08      	pop	{r3}
 801118c:	469e      	mov	lr, r3
 801118e:	4770      	bx	lr

08011190 <_fini>:
 8011190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011192:	bf00      	nop
 8011194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011196:	bc08      	pop	{r3}
 8011198:	469e      	mov	lr, r3
 801119a:	4770      	bx	lr
